"use strict";
(self["webpackChunkweb"] = self["webpackChunkweb"] || []).push([["default-node_modules_ag-grid-enterprise_menu_dist_es6_main_js-node_modules_ag-grid-enterprise-cdffd8"],{

/***/ 756526:
/*!********************************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/column-tool-panel/dist/es6/columnToolPanel/columnModelItem.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ColumnModelItem": () => (/* binding */ ColumnModelItem)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);

var ColumnModelItem = /** @class */function () {
  function ColumnModelItem(displayName, columnOrGroup, dept, group, expanded) {
    if (group === void 0) {
      group = false;
    }
    this.eventService = new _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.EventService();
    this.displayName = displayName;
    this.dept = dept;
    this.group = group;
    if (group) {
      this.columnGroup = columnOrGroup;
      this.expanded = expanded;
      this.children = [];
    } else {
      this.column = columnOrGroup;
    }
  }
  ColumnModelItem.prototype.isGroup = function () {
    return this.group;
  };
  ColumnModelItem.prototype.getDisplayName = function () {
    return this.displayName;
  };
  ColumnModelItem.prototype.getColumnGroup = function () {
    return this.columnGroup;
  };
  ColumnModelItem.prototype.getColumn = function () {
    return this.column;
  };
  ColumnModelItem.prototype.getDept = function () {
    return this.dept;
  };
  ColumnModelItem.prototype.isExpanded = function () {
    return !!this.expanded;
  };
  ColumnModelItem.prototype.getChildren = function () {
    return this.children;
  };
  ColumnModelItem.prototype.isPassesFilter = function () {
    return this.passesFilter;
  };
  ColumnModelItem.prototype.setExpanded = function (expanded) {
    if (expanded === this.expanded) {
      return;
    }
    this.expanded = expanded;
    this.eventService.dispatchEvent({
      type: ColumnModelItem.EVENT_EXPANDED_CHANGED
    });
  };
  ColumnModelItem.prototype.setPassesFilter = function (passesFilter) {
    this.passesFilter = passesFilter;
  };
  ColumnModelItem.prototype.addEventListener = function (eventType, listener) {
    this.eventService.addEventListener(eventType, listener);
  };
  ColumnModelItem.prototype.removeEventListener = function (eventType, listener) {
    this.eventService.removeEventListener(eventType, listener);
  };
  ColumnModelItem.EVENT_EXPANDED_CHANGED = 'expandedChanged';
  return ColumnModelItem;
}();


/***/ }),

/***/ 27925:
/*!********************************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/column-tool-panel/dist/es6/columnToolPanel/columnToolPanel.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ColumnToolPanel": () => (/* binding */ ColumnToolPanel)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
/* harmony import */ var _pivotModePanel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pivotModePanel */ 314194);
/* harmony import */ var _ag_grid_enterprise_row_grouping__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ag-grid-enterprise/row-grouping */ 244060);
/* harmony import */ var _primaryColsPanel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./primaryColsPanel */ 886154);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};




var ColumnToolPanel = /** @class */function (_super) {
  __extends(ColumnToolPanel, _super);
  function ColumnToolPanel() {
    var _this = _super.call(this, ColumnToolPanel.TEMPLATE) || this;
    _this.initialised = false;
    _this.childDestroyFuncs = [];
    return _this;
  }
  // lazy initialise the panel
  ColumnToolPanel.prototype.setVisible = function (visible) {
    _super.prototype.setDisplayed.call(this, visible);
    if (visible && !this.initialised) {
      this.init(this.params);
    }
  };
  ColumnToolPanel.prototype.init = function (params) {
    var _this = this;
    var defaultParams = {
      suppressColumnMove: false,
      suppressColumnSelectAll: false,
      suppressColumnFilter: false,
      suppressColumnExpandAll: false,
      contractColumnSelection: false,
      suppressPivotMode: false,
      suppressRowGroups: false,
      suppressValues: false,
      suppressPivots: false,
      suppressSyncLayoutWithGrid: false,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.mergeDeep(defaultParams, params);
    this.params = defaultParams;
    if (this.isRowGroupingModuleLoaded() && !this.params.suppressPivotMode) {
      this.pivotModePanel = this.createBean(new _pivotModePanel__WEBPACK_IMPORTED_MODULE_1__.PivotModePanel()); // DO NOT CHANGE TO createManagedBean
      this.childDestroyFuncs.push(function () {
        return _this.destroyBean(_this.pivotModePanel);
      });
      this.appendChild(this.pivotModePanel);
    }
    this.primaryColsPanel = this.createBean(new _primaryColsPanel__WEBPACK_IMPORTED_MODULE_3__.PrimaryColsPanel()); // DO NOT CHANGE TO createManagedBean
    this.childDestroyFuncs.push(function () {
      return _this.destroyBean(_this.primaryColsPanel);
    });
    this.primaryColsPanel.init(true, this.params, "toolPanelUi");
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.addCssClass(this.primaryColsPanel.getGui(), 'ag-column-panel-column-select');
    this.appendChild(this.primaryColsPanel);
    if (this.isRowGroupingModuleLoaded()) {
      if (!this.params.suppressRowGroups) {
        this.rowGroupDropZonePanel = this.createBean(new _ag_grid_enterprise_row_grouping__WEBPACK_IMPORTED_MODULE_2__.RowGroupDropZonePanel(false)); // DO NOT CHANGE TO createManagedBean
        this.childDestroyFuncs.push(function () {
          return _this.destroyBean(_this.rowGroupDropZonePanel);
        });
        this.appendChild(this.rowGroupDropZonePanel);
      }
      if (!this.params.suppressValues) {
        this.valuesDropZonePanel = this.createBean(new _ag_grid_enterprise_row_grouping__WEBPACK_IMPORTED_MODULE_2__.ValuesDropZonePanel(false)); // DO NOT CHANGE TO createManagedBean
        this.childDestroyFuncs.push(function () {
          return _this.destroyBean(_this.valuesDropZonePanel);
        });
        this.appendChild(this.valuesDropZonePanel);
      }
      if (!this.params.suppressPivots) {
        this.pivotDropZonePanel = this.createBean(new _ag_grid_enterprise_row_grouping__WEBPACK_IMPORTED_MODULE_2__.PivotDropZonePanel(false)); // DO NOT CHANGE TO createManagedBean
        this.childDestroyFuncs.push(function () {
          return _this.destroyBean(_this.pivotDropZonePanel);
        });
        this.appendChild(this.pivotDropZonePanel);
      }
      this.setLastVisible();
      var pivotModeListener_1 = this.addManagedListener(this.eventService, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, function () {
        _this.resetChildrenHeight();
        _this.setLastVisible();
      });
      this.childDestroyFuncs.push(function () {
        return pivotModeListener_1();
      });
    }
    this.initialised = true;
  };
  ColumnToolPanel.prototype.setPivotModeSectionVisible = function (visible) {
    var _this = this;
    if (!this.isRowGroupingModuleLoaded()) {
      return;
    }
    if (this.pivotModePanel) {
      this.pivotModePanel.setDisplayed(visible);
    } else if (visible) {
      this.pivotModePanel = this.createBean(new _pivotModePanel__WEBPACK_IMPORTED_MODULE_1__.PivotModePanel());
      // ensure pivot mode panel is positioned at the top of the columns tool panel
      this.getGui().insertBefore(this.pivotModePanel.getGui(), this.getGui().firstChild);
      this.childDestroyFuncs.push(function () {
        return _this.destroyBean(_this.pivotModePanel);
      });
    }
    this.setLastVisible();
  };
  ColumnToolPanel.prototype.setRowGroupsSectionVisible = function (visible) {
    if (!this.isRowGroupingModuleLoaded()) {
      return;
    }
    if (this.rowGroupDropZonePanel) {
      this.rowGroupDropZonePanel.setDisplayed(visible);
    } else if (visible) {
      this.rowGroupDropZonePanel = this.createManagedBean(new _ag_grid_enterprise_row_grouping__WEBPACK_IMPORTED_MODULE_2__.RowGroupDropZonePanel(false));
      this.appendChild(this.rowGroupDropZonePanel);
    }
    this.setLastVisible();
  };
  ColumnToolPanel.prototype.setValuesSectionVisible = function (visible) {
    if (!this.isRowGroupingModuleLoaded()) {
      return;
    }
    if (this.valuesDropZonePanel) {
      this.valuesDropZonePanel.setDisplayed(visible);
    } else if (visible) {
      this.valuesDropZonePanel = this.createManagedBean(new _ag_grid_enterprise_row_grouping__WEBPACK_IMPORTED_MODULE_2__.ValuesDropZonePanel(false));
      this.appendChild(this.valuesDropZonePanel);
    }
    this.setLastVisible();
  };
  ColumnToolPanel.prototype.setPivotSectionVisible = function (visible) {
    if (!this.isRowGroupingModuleLoaded()) {
      return;
    }
    if (this.pivotDropZonePanel) {
      this.pivotDropZonePanel.setDisplayed(visible);
    } else if (visible) {
      this.pivotDropZonePanel = this.createManagedBean(new _ag_grid_enterprise_row_grouping__WEBPACK_IMPORTED_MODULE_2__.PivotDropZonePanel(false));
      this.appendChild(this.pivotDropZonePanel);
      this.pivotDropZonePanel.setDisplayed(visible);
    }
    this.setLastVisible();
  };
  ColumnToolPanel.prototype.setResizers = function () {
    [this.primaryColsPanel, this.rowGroupDropZonePanel, this.valuesDropZonePanel, this.pivotDropZonePanel].forEach(function (panel) {
      if (!panel) {
        return;
      }
      var eGui = panel.getGui();
      panel.toggleResizable(!_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.containsClass(eGui, 'ag-last-column-drop') && !_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.containsClass(eGui, 'ag-hidden'));
    });
  };
  ColumnToolPanel.prototype.setLastVisible = function () {
    var eGui = this.getGui();
    var columnDrops = Array.prototype.slice.call(eGui.querySelectorAll('.ag-column-drop'));
    columnDrops.forEach(function (columnDrop) {
      return _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.removeCssClass(columnDrop, 'ag-last-column-drop');
    });
    var columnDropEls = eGui.querySelectorAll('.ag-column-drop:not(.ag-hidden)');
    var lastVisible = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.last(columnDropEls);
    if (lastVisible) {
      _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.addCssClass(lastVisible, 'ag-last-column-drop');
    }
    this.setResizers();
  };
  ColumnToolPanel.prototype.resetChildrenHeight = function () {
    var eGui = this.getGui();
    var children = eGui.children;
    for (var i = 0; i < children.length; i++) {
      var child = children[i];
      child.style.removeProperty('height');
      child.style.removeProperty('flex');
    }
  };
  ColumnToolPanel.prototype.isRowGroupingModuleLoaded = function () {
    return _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.assertRegistered(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.RowGroupingModule, 'Row Grouping');
  };
  ColumnToolPanel.prototype.expandColumnGroups = function (groupIds) {
    this.primaryColsPanel.expandGroups(groupIds);
  };
  ColumnToolPanel.prototype.collapseColumnGroups = function (groupIds) {
    this.primaryColsPanel.collapseGroups(groupIds);
  };
  ColumnToolPanel.prototype.setColumnLayout = function (colDefs) {
    this.primaryColsPanel.setColumnLayout(colDefs);
  };
  ColumnToolPanel.prototype.syncLayoutWithGrid = function () {
    this.primaryColsPanel.syncLayoutWithGrid();
  };
  ColumnToolPanel.prototype.destroyChildren = function () {
    this.childDestroyFuncs.forEach(function (func) {
      return func();
    });
    this.childDestroyFuncs.length = 0;
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.clearElement(this.getGui());
  };
  ColumnToolPanel.prototype.refresh = function () {
    this.destroyChildren();
    this.init(this.params);
  };
  // this is a user component, and IComponent has "public destroy()" as part of the interface.
  // so this must be public.
  ColumnToolPanel.prototype.destroy = function () {
    this.destroyChildren();
    _super.prototype.destroy.call(this);
  };
  ColumnToolPanel.TEMPLATE = "<div class=\"ag-column-panel\"></div>";
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)("gridApi")], ColumnToolPanel.prototype, "gridApi", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)("columnApi")], ColumnToolPanel.prototype, "columnApi", void 0);
  return ColumnToolPanel;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Component);


/***/ }),

/***/ 734072:
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/column-tool-panel/dist/es6/columnToolPanel/modelItemUtils.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ModelItemUtils": () => (/* binding */ ModelItemUtils)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var ModelItemUtils = /** @class */function () {
  function ModelItemUtils() {}
  ModelItemUtils.prototype.selectAllChildren = function (colTree, selectAllChecked, eventType) {
    var cols = this.extractAllLeafColumns(colTree);
    this.setAllColumns(cols, selectAllChecked, eventType);
  };
  ModelItemUtils.prototype.setColumn = function (col, selectAllChecked, eventType) {
    this.setAllColumns([col], selectAllChecked, eventType);
  };
  ModelItemUtils.prototype.setAllColumns = function (cols, selectAllChecked, eventType) {
    if (this.columnModel.isPivotMode()) {
      this.setAllPivot(cols, selectAllChecked, eventType);
    } else {
      this.setAllVisible(cols, selectAllChecked, eventType);
    }
  };
  ModelItemUtils.prototype.extractAllLeafColumns = function (allItems) {
    var res = [];
    var recursiveFunc = function (items) {
      items.forEach(function (item) {
        if (!item.isPassesFilter()) {
          return;
        }
        if (item.isGroup()) {
          recursiveFunc(item.getChildren());
        } else {
          res.push(item.getColumn());
        }
      });
    };
    recursiveFunc(allItems);
    return res;
  };
  ModelItemUtils.prototype.setAllVisible = function (columns, visible, eventType) {
    var colStateItems = [];
    columns.forEach(function (col) {
      if (col.getColDef().lockVisible) {
        return;
      }
      if (col.isVisible() != visible) {
        colStateItems.push({
          colId: col.getId(),
          hide: !visible
        });
      }
    });
    if (colStateItems.length > 0) {
      this.columnModel.applyColumnState({
        state: colStateItems
      }, eventType);
    }
  };
  ModelItemUtils.prototype.setAllPivot = function (columns, value, eventType) {
    if (this.gridOptionsWrapper.isFunctionsPassive()) {
      this.setAllPivotPassive(columns, value);
    } else {
      this.setAllPivotActive(columns, value, eventType);
    }
  };
  ModelItemUtils.prototype.setAllPivotPassive = function (columns, value) {
    var copyOfPivotColumns = this.columnModel.getPivotColumns().slice();
    var copyOfValueColumns = this.columnModel.getValueColumns().slice();
    var copyOfRowGroupColumns = this.columnModel.getRowGroupColumns().slice();
    var pivotChanged = false;
    var valueChanged = false;
    var rowGroupChanged = false;
    var turnOnAction = function (col) {
      // don't change any column that's already got a function active
      if (col.isAnyFunctionActive()) {
        return;
      }
      if (col.isAllowValue()) {
        copyOfValueColumns.push(col);
        valueChanged = true;
      } else if (col.isAllowRowGroup()) {
        copyOfRowGroupColumns.push(col);
        pivotChanged = true;
      } else if (col.isAllowPivot()) {
        copyOfPivotColumns.push(col);
        rowGroupChanged = true;
      }
    };
    var turnOffAction = function (col) {
      if (!col.isAnyFunctionActive()) {
        return;
      }
      if (copyOfPivotColumns.indexOf(col) >= 0) {
        _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.removeFromArray(copyOfPivotColumns, col);
        pivotChanged = true;
      }
      if (copyOfValueColumns.indexOf(col) >= 0) {
        _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.removeFromArray(copyOfValueColumns, col);
        valueChanged = true;
      }
      if (copyOfRowGroupColumns.indexOf(col) >= 0) {
        _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.removeFromArray(copyOfRowGroupColumns, col);
        rowGroupChanged = true;
      }
    };
    var action = value ? turnOnAction : turnOffAction;
    columns.forEach(action);
    if (pivotChanged) {
      var event_1 = {
        type: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST,
        columns: copyOfPivotColumns,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(event_1);
    }
    if (rowGroupChanged) {
      var event_2 = {
        type: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST,
        columns: copyOfRowGroupColumns,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(event_2);
    }
    if (valueChanged) {
      var event_3 = {
        type: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_VALUE_CHANGE_REQUEST,
        columns: copyOfRowGroupColumns,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(event_3);
    }
  };
  ModelItemUtils.prototype.setAllPivotActive = function (columns, value, eventType) {
    var _this = this;
    var colStateItems = [];
    var turnOnAction = function (col) {
      // don't change any column that's already got a function active
      if (col.isAnyFunctionActive()) {
        return;
      }
      if (col.isAllowValue()) {
        var aggFunc = typeof col.getAggFunc() === 'string' ? col.getAggFunc() : _this.aggFuncService.getDefaultAggFunc(col);
        colStateItems.push({
          colId: col.getId(),
          aggFunc: aggFunc
        });
      } else if (col.isAllowRowGroup()) {
        colStateItems.push({
          colId: col.getId(),
          rowGroup: true
        });
      } else if (col.isAllowPivot()) {
        colStateItems.push({
          colId: col.getId(),
          pivot: true
        });
      }
    };
    var turnOffAction = function (col) {
      var isActive = col.isPivotActive() || col.isRowGroupActive() || col.isValueActive();
      if (isActive) {
        colStateItems.push({
          colId: col.getId(),
          pivot: false,
          rowGroup: false,
          aggFunc: null
        });
      }
    };
    var action = value ? turnOnAction : turnOffAction;
    columns.forEach(action);
    if (colStateItems.length > 0) {
      this.columnModel.applyColumnState({
        state: colStateItems
      }, eventType);
    }
  };
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('aggFuncService')], ModelItemUtils.prototype, "aggFuncService", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')], ModelItemUtils.prototype, "columnModel", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('gridOptionsWrapper')], ModelItemUtils.prototype, "gridOptionsWrapper", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnApi')], ModelItemUtils.prototype, "columnApi", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('gridApi')], ModelItemUtils.prototype, "gridApi", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('eventService')], ModelItemUtils.prototype, "eventService", void 0);
  ModelItemUtils = __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Bean)('modelItemUtils')], ModelItemUtils);
  return ModelItemUtils;
}();


/***/ }),

/***/ 314194:
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/column-tool-panel/dist/es6/columnToolPanel/pivotModePanel.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PivotModePanel": () => (/* binding */ PivotModePanel)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var PivotModePanel = /** @class */function (_super) {
  __extends(PivotModePanel, _super);
  function PivotModePanel() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  PivotModePanel.prototype.createTemplate = function () {
    return (/* html */"<div class=\"ag-pivot-mode-panel\">\n                <ag-toggle-button ref=\"cbPivotMode\" class=\"ag-pivot-mode-select\"></ag-toggle-button>\n            </div>"
    );
  };
  PivotModePanel.prototype.init = function () {
    this.setTemplate(this.createTemplate());
    this.cbPivotMode.setValue(this.columnModel.isPivotMode());
    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
    this.cbPivotMode.setLabel(localeTextFunc('pivotMode', 'Pivot Mode'));
    this.addManagedListener(this.cbPivotMode, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.AgCheckbox.EVENT_CHANGED, this.onBtPivotMode.bind(this));
    this.addManagedListener(this.eventService, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_NEW_COLUMNS_LOADED, this.onPivotModeChanged.bind(this));
    this.addManagedListener(this.eventService, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onPivotModeChanged.bind(this));
  };
  PivotModePanel.prototype.onBtPivotMode = function () {
    var newValue = !!this.cbPivotMode.getValue();
    if (newValue !== this.columnModel.isPivotMode()) {
      this.columnModel.setPivotMode(newValue, "toolPanelUi");
      var api = this.gridOptionsWrapper.getApi();
      if (api) {
        api.refreshHeader();
      }
    }
  };
  PivotModePanel.prototype.onPivotModeChanged = function () {
    var pivotModeActive = this.columnModel.isPivotMode();
    this.cbPivotMode.setValue(pivotModeActive);
  };
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')], PivotModePanel.prototype, "columnModel", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('cbPivotMode')], PivotModePanel.prototype, "cbPivotMode", void 0);
  __decorate([_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.PreConstruct], PivotModePanel.prototype, "init", null);
  return PivotModePanel;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Component);


/***/ }),

/***/ 61327:
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/column-tool-panel/dist/es6/columnToolPanel/primaryColsHeaderPanel.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExpandState": () => (/* binding */ ExpandState),
/* harmony export */   "PrimaryColsHeaderPanel": () => (/* binding */ PrimaryColsHeaderPanel)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var ExpandState;
(function (ExpandState) {
  ExpandState[ExpandState["EXPANDED"] = 0] = "EXPANDED";
  ExpandState[ExpandState["COLLAPSED"] = 1] = "COLLAPSED";
  ExpandState[ExpandState["INDETERMINATE"] = 2] = "INDETERMINATE";
})(ExpandState || (ExpandState = {}));
var PrimaryColsHeaderPanel = /** @class */function (_super) {
  __extends(PrimaryColsHeaderPanel, _super);
  function PrimaryColsHeaderPanel() {
    return _super.call(this, PrimaryColsHeaderPanel.TEMPLATE) || this;
  }
  PrimaryColsHeaderPanel.prototype.postConstruct = function () {
    var _this = this;
    this.createExpandIcons();
    this.addManagedListener(this.eExpand, 'click', this.onExpandClicked.bind(this));
    this.addManagedListener(this.eExpand, 'keydown', function (e) {
      if (e.keyCode === _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.KeyCode.SPACE) {
        _this.onExpandClicked();
      }
    });
    this.addManagedListener(this.eSelect.getInputElement(), 'click', this.onSelectClicked.bind(this));
    this.eFilterTextField.onValueChange(function () {
      return _this.onFilterTextChanged();
    });
    this.addManagedListener(this.eFilterTextField.getInputElement(), 'keypress', this.onMiniFilterKeyPress.bind(this));
    this.addManagedListener(this.eventService, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_NEW_COLUMNS_LOADED, this.showOrHideOptions.bind(this));
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    this.eSelect.setInputAriaLabel(translate('ariaColumnSelectAll', 'Toggle Select All Columns'));
    this.eFilterTextField.setInputAriaLabel(translate('ariaFilterColumnsInput', 'Filter Columns Input'));
  };
  PrimaryColsHeaderPanel.prototype.init = function (params) {
    this.params = params;
    if (this.columnModel.isReady()) {
      this.showOrHideOptions();
    }
  };
  PrimaryColsHeaderPanel.prototype.createExpandIcons = function () {
    this.eExpand.appendChild(this.eExpandChecked = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('columnSelectOpen', this.gridOptionsWrapper));
    this.eExpand.appendChild(this.eExpandUnchecked = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('columnSelectClosed', this.gridOptionsWrapper));
    this.eExpand.appendChild(this.eExpandIndeterminate = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('columnSelectIndeterminate', this.gridOptionsWrapper));
    this.setExpandState(ExpandState.EXPANDED);
  };
  // we only show expand / collapse if we are showing columns
  PrimaryColsHeaderPanel.prototype.showOrHideOptions = function () {
    var showFilter = !this.params.suppressColumnFilter;
    var showSelect = !this.params.suppressColumnSelectAll;
    var showExpand = !this.params.suppressColumnExpandAll;
    var groupsPresent = this.columnModel.isPrimaryColumnGroupsPresent();
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    this.eFilterTextField.setInputPlaceholder(translate('searchOoo', 'Search...'));
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eFilterTextField.getGui(), showFilter);
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eSelect.getGui(), showSelect);
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eExpand, showExpand && groupsPresent);
  };
  PrimaryColsHeaderPanel.prototype.onFilterTextChanged = function () {
    var _this = this;
    if (!this.onFilterTextChangedDebounced) {
      this.onFilterTextChangedDebounced = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.debounce(function () {
        var filterText = _this.eFilterTextField.getValue();
        _this.dispatchEvent({
          type: "filterChanged",
          filterText: filterText
        });
      }, PrimaryColsHeaderPanel.DEBOUNCE_DELAY);
    }
    this.onFilterTextChangedDebounced();
  };
  PrimaryColsHeaderPanel.prototype.onMiniFilterKeyPress = function (e) {
    var _this = this;
    if (_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.isKeyPressed(e, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.KeyCode.ENTER)) {
      // we need to add a delay that corresponds to the filter text debounce delay to ensure
      // the text filtering has happened, otherwise all columns will be deselected
      setTimeout(function () {
        return _this.onSelectClicked();
      }, PrimaryColsHeaderPanel.DEBOUNCE_DELAY);
    }
  };
  PrimaryColsHeaderPanel.prototype.onSelectClicked = function () {
    this.dispatchEvent({
      type: this.selectState ? 'unselectAll' : 'selectAll'
    });
  };
  PrimaryColsHeaderPanel.prototype.onExpandClicked = function () {
    this.dispatchEvent({
      type: this.expandState === ExpandState.EXPANDED ? 'collapseAll' : 'expandAll'
    });
  };
  PrimaryColsHeaderPanel.prototype.setExpandState = function (state) {
    this.expandState = state;
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eExpandChecked, this.expandState === ExpandState.EXPANDED);
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eExpandUnchecked, this.expandState === ExpandState.COLLAPSED);
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eExpandIndeterminate, this.expandState === ExpandState.INDETERMINATE);
  };
  PrimaryColsHeaderPanel.prototype.setSelectionState = function (state) {
    this.selectState = state;
    this.eSelect.setValue(this.selectState);
  };
  PrimaryColsHeaderPanel.DEBOUNCE_DELAY = 300;
  PrimaryColsHeaderPanel.TEMPLATE = "<div class=\"ag-column-select-header\" role=\"presentation\" tabindex=\"-1\">\n            <div ref=\"eExpand\" class=\"ag-column-select-header-icon\" tabindex=\"0\"></div>\n            <ag-checkbox ref=\"eSelect\" class=\"ag-column-select-header-checkbox\"></ag-checkbox>\n            <ag-input-text-field class=\"ag-column-select-header-filter-wrapper\" ref=\"eFilterTextField\"></ag-input-text-field>\n        </div>";
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')], PrimaryColsHeaderPanel.prototype, "columnModel", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eExpand')], PrimaryColsHeaderPanel.prototype, "eExpand", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eSelect')], PrimaryColsHeaderPanel.prototype, "eSelect", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eFilterTextField')], PrimaryColsHeaderPanel.prototype, "eFilterTextField", void 0);
  __decorate([_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.PostConstruct], PrimaryColsHeaderPanel.prototype, "postConstruct", null);
  return PrimaryColsHeaderPanel;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Component);


/***/ }),

/***/ 935213:
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/column-tool-panel/dist/es6/columnToolPanel/primaryColsListPanel.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PrimaryColsListPanel": () => (/* binding */ PrimaryColsListPanel)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
/* harmony import */ var _primaryColsListPanelItemDragFeature__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./primaryColsListPanelItemDragFeature */ 121246);
/* harmony import */ var _toolPanelColumnGroupComp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./toolPanelColumnGroupComp */ 778070);
/* harmony import */ var _toolPanelColumnComp__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./toolPanelColumnComp */ 211798);
/* harmony import */ var _primaryColsHeaderPanel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./primaryColsHeaderPanel */ 61327);
/* harmony import */ var _columnModelItem__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./columnModelItem */ 756526);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};






var UIColumnModel = /** @class */function () {
  function UIColumnModel(items) {
    this.items = items;
  }
  UIColumnModel.prototype.getRowCount = function () {
    return this.items.length;
  };
  UIColumnModel.prototype.getRow = function (index) {
    return this.items[index];
  };
  return UIColumnModel;
}();
var PRIMARY_COLS_LIST_PANEL_CLASS = 'ag-column-select-list';
var PrimaryColsListPanel = /** @class */function (_super) {
  __extends(PrimaryColsListPanel, _super);
  function PrimaryColsListPanel() {
    var _this = _super.call(this, PrimaryColsListPanel.TEMPLATE) || this;
    _this.destroyColumnItemFuncs = [];
    return _this;
  }
  PrimaryColsListPanel.prototype.destroyColumnTree = function () {
    this.allColsTree = [];
    this.destroyColumnItemFuncs.forEach(function (f) {
      return f();
    });
    this.destroyColumnItemFuncs = [];
  };
  PrimaryColsListPanel.prototype.init = function (params, allowDragging, eventType) {
    var _this = this;
    this.params = params;
    this.allowDragging = allowDragging;
    this.eventType = eventType;
    if (!this.params.suppressSyncLayoutWithGrid) {
      this.addManagedListener(this.eventService, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_MOVED, this.onColumnsChanged.bind(this));
    }
    this.addManagedListener(this.eventService, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_NEW_COLUMNS_LOADED, this.onColumnsChanged.bind(this));
    var eventsImpactingCheckedState = [_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PIVOT_CHANGED, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_VALUE_CHANGED, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_VISIBLE, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_NEW_COLUMNS_LOADED];
    eventsImpactingCheckedState.forEach(function (event) {
      // update header select all checkbox with current selection state
      _this.addManagedListener(_this.eventService, event, _this.fireSelectionChangedEvent.bind(_this));
    });
    this.expandGroupsByDefault = !this.params.contractColumnSelection;
    this.virtualList = this.createManagedBean(new _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.VirtualList('column-select', 'tree'));
    this.appendChild(this.virtualList.getGui());
    this.virtualList.setComponentCreator(function (item, listItemElement) {
      _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.setAriaLevel(listItemElement, item.getDept() + 1);
      return _this.createComponentFromItem(item, listItemElement);
    });
    if (this.columnModel.isReady()) {
      this.onColumnsChanged();
    }
    if (!params.suppressColumnMove && !this.gridOptionsWrapper.isSuppressMovableColumns()) {
      this.createManagedBean(new _primaryColsListPanelItemDragFeature__WEBPACK_IMPORTED_MODULE_1__.PrimaryColsListPanelItemDragFeature(this, this.virtualList));
    }
  };
  PrimaryColsListPanel.prototype.createComponentFromItem = function (item, listItemElement) {
    if (item.isGroup()) {
      var renderedGroup = new _toolPanelColumnGroupComp__WEBPACK_IMPORTED_MODULE_2__.ToolPanelColumnGroupComp(item, this.allowDragging, this.eventType, listItemElement);
      this.getContext().createBean(renderedGroup);
      return renderedGroup;
    }
    var columnComp = new _toolPanelColumnComp__WEBPACK_IMPORTED_MODULE_3__.ToolPanelColumnComp(item.getColumn(), item.getDept(), this.allowDragging, this.groupsExist, listItemElement);
    this.getContext().createBean(columnComp);
    return columnComp;
  };
  PrimaryColsListPanel.prototype.onColumnsChanged = function () {
    var expandedStates = this.getExpandedStates();
    var pivotModeActive = this.columnModel.isPivotMode();
    var shouldSyncColumnLayoutWithGrid = !this.params.suppressSyncLayoutWithGrid && !pivotModeActive;
    if (shouldSyncColumnLayoutWithGrid) {
      this.buildTreeFromWhatGridIsDisplaying();
    } else {
      this.buildTreeFromProvidedColumnDefs();
    }
    this.setExpandedStates(expandedStates);
    this.markFilteredColumns();
    this.flattenAndFilterModel();
  };
  PrimaryColsListPanel.prototype.getDisplayedColsList = function () {
    return this.displayedColsList;
  };
  PrimaryColsListPanel.prototype.getExpandedStates = function () {
    if (!this.allColsTree) {
      return {};
    }
    var res = {};
    this.forEachItem(function (item) {
      if (!item.isGroup()) {
        return;
      }
      var colGroup = item.getColumnGroup();
      if (colGroup) {
        // group should always exist, this is defensive
        res[colGroup.getId()] = item.isExpanded();
      }
    });
    return res;
  };
  PrimaryColsListPanel.prototype.setExpandedStates = function (states) {
    if (!this.allColsTree) {
      return;
    }
    this.forEachItem(function (item) {
      if (!item.isGroup()) {
        return;
      }
      var colGroup = item.getColumnGroup();
      if (colGroup) {
        // group should always exist, this is defensive
        var expanded = states[colGroup.getId()];
        var groupExistedLastTime = expanded != null;
        if (groupExistedLastTime) {
          item.setExpanded(expanded);
        }
      }
    });
  };
  PrimaryColsListPanel.prototype.buildTreeFromWhatGridIsDisplaying = function () {
    this.colDefService.syncLayoutWithGrid(this.setColumnLayout.bind(this));
  };
  PrimaryColsListPanel.prototype.setColumnLayout = function (colDefs) {
    var columnTree = this.colDefService.createColumnTree(colDefs);
    this.buildListModel(columnTree);
    // using col defs to check if groups exist as it could be a custom layout
    this.groupsExist = colDefs.some(function (colDef) {
      return colDef && typeof colDef.children !== 'undefined';
    });
    this.markFilteredColumns();
    this.flattenAndFilterModel();
  };
  PrimaryColsListPanel.prototype.buildTreeFromProvidedColumnDefs = function () {
    // add column / group comps to tool panel
    this.buildListModel(this.columnModel.getPrimaryColumnTree());
    this.groupsExist = this.columnModel.isPrimaryColumnGroupsPresent();
  };
  PrimaryColsListPanel.prototype.buildListModel = function (columnTree) {
    var _this = this;
    var columnExpandedListener = this.onColumnExpanded.bind(this);
    var addListeners = function (item) {
      item.addEventListener(_columnModelItem__WEBPACK_IMPORTED_MODULE_5__.ColumnModelItem.EVENT_EXPANDED_CHANGED, columnExpandedListener);
      var removeFunc = item.removeEventListener.bind(item, _columnModelItem__WEBPACK_IMPORTED_MODULE_5__.ColumnModelItem.EVENT_EXPANDED_CHANGED, columnExpandedListener);
      _this.destroyColumnItemFuncs.push(removeFunc);
    };
    var recursivelyBuild = function (tree, dept, parentList) {
      tree.forEach(function (child) {
        if (child instanceof _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ProvidedColumnGroup) {
          createGroupItem(child, dept, parentList);
        } else {
          createColumnItem(child, dept, parentList);
        }
      });
    };
    var createGroupItem = function (columnGroup, dept, parentList) {
      var columnGroupDef = columnGroup.getColGroupDef();
      var skipThisGroup = columnGroupDef && columnGroupDef.suppressColumnsToolPanel;
      if (skipThisGroup) {
        return;
      }
      if (columnGroup.isPadding()) {
        recursivelyBuild(columnGroup.getChildren(), dept, parentList);
        return;
      }
      var displayName = _this.columnModel.getDisplayNameForOriginalColumnGroup(null, columnGroup, _this.eventType);
      var item = new _columnModelItem__WEBPACK_IMPORTED_MODULE_5__.ColumnModelItem(displayName, columnGroup, dept, true, _this.expandGroupsByDefault);
      parentList.push(item);
      addListeners(item);
      recursivelyBuild(columnGroup.getChildren(), dept + 1, item.getChildren());
    };
    var createColumnItem = function (column, dept, parentList) {
      var skipThisColumn = column.getColDef() && column.getColDef().suppressColumnsToolPanel;
      if (skipThisColumn) {
        return;
      }
      var displayName = _this.columnModel.getDisplayNameForColumn(column, 'columnToolPanel');
      parentList.push(new _columnModelItem__WEBPACK_IMPORTED_MODULE_5__.ColumnModelItem(displayName, column, dept));
    };
    this.destroyColumnTree();
    recursivelyBuild(columnTree, 0, this.allColsTree);
  };
  PrimaryColsListPanel.prototype.onColumnExpanded = function () {
    this.flattenAndFilterModel();
  };
  PrimaryColsListPanel.prototype.flattenAndFilterModel = function () {
    var _this = this;
    this.displayedColsList = [];
    var recursiveFunc = function (item) {
      if (!item.isPassesFilter()) {
        return;
      }
      _this.displayedColsList.push(item);
      if (item.isGroup() && item.isExpanded()) {
        item.getChildren().forEach(recursiveFunc);
      }
    };
    this.allColsTree.forEach(recursiveFunc);
    this.virtualList.setModel(new UIColumnModel(this.displayedColsList));
    var focusedRow = this.virtualList.getLastFocusedRow();
    this.virtualList.refresh();
    if (focusedRow != null) {
      this.focusRowIfAlive(focusedRow);
    }
    this.notifyListeners();
  };
  PrimaryColsListPanel.prototype.focusRowIfAlive = function (rowIndex) {
    var _this = this;
    window.setTimeout(function () {
      if (_this.isAlive()) {
        _this.virtualList.focusRow(rowIndex);
      }
    }, 0);
  };
  PrimaryColsListPanel.prototype.forEachItem = function (callback) {
    var recursiveFunc = function (items) {
      items.forEach(function (item) {
        callback(item);
        if (item.isGroup()) {
          recursiveFunc(item.getChildren());
        }
      });
    };
    recursiveFunc(this.allColsTree);
  };
  PrimaryColsListPanel.prototype.doSetExpandedAll = function (value) {
    this.forEachItem(function (item) {
      if (item.isGroup()) {
        item.setExpanded(value);
      }
    });
  };
  PrimaryColsListPanel.prototype.setGroupsExpanded = function (expand, groupIds) {
    if (!groupIds) {
      this.doSetExpandedAll(expand);
      return;
    }
    var expandedGroupIds = [];
    this.forEachItem(function (item) {
      if (!item.isGroup()) {
        return;
      }
      var groupId = item.getColumnGroup().getId();
      if (groupIds.indexOf(groupId) >= 0) {
        item.setExpanded(expand);
        expandedGroupIds.push(groupId);
      }
    });
    var unrecognisedGroupIds = groupIds.filter(function (groupId) {
      return !_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.includes(expandedGroupIds, groupId);
    });
    if (unrecognisedGroupIds.length > 0) {
      console.warn('AG Grid: unable to find group(s) for supplied groupIds:', unrecognisedGroupIds);
    }
  };
  PrimaryColsListPanel.prototype.getExpandState = function () {
    var expandedCount = 0;
    var notExpandedCount = 0;
    this.forEachItem(function (item) {
      if (!item.isGroup()) {
        return;
      }
      if (item.isExpanded()) {
        expandedCount++;
      } else {
        notExpandedCount++;
      }
    });
    if (expandedCount > 0 && notExpandedCount > 0) {
      return _primaryColsHeaderPanel__WEBPACK_IMPORTED_MODULE_4__.ExpandState.INDETERMINATE;
    }
    if (notExpandedCount > 0) {
      return _primaryColsHeaderPanel__WEBPACK_IMPORTED_MODULE_4__.ExpandState.COLLAPSED;
    }
    return _primaryColsHeaderPanel__WEBPACK_IMPORTED_MODULE_4__.ExpandState.EXPANDED;
  };
  PrimaryColsListPanel.prototype.doSetSelectedAll = function (selectAllChecked) {
    this.modelItemUtils.selectAllChildren(this.allColsTree, selectAllChecked, this.eventType);
  };
  PrimaryColsListPanel.prototype.getSelectionState = function () {
    var checkedCount = 0;
    var uncheckedCount = 0;
    var pivotMode = this.columnModel.isPivotMode();
    this.forEachItem(function (item) {
      if (item.isGroup()) {
        return;
      }
      if (!item.isPassesFilter()) {
        return;
      }
      var column = item.getColumn();
      var colDef = column.getColDef();
      var checked;
      if (pivotMode) {
        var noPivotModeOptionsAllowed = !column.isAllowPivot() && !column.isAllowRowGroup() && !column.isAllowValue();
        if (noPivotModeOptionsAllowed) {
          return;
        }
        checked = column.isValueActive() || column.isPivotActive() || column.isRowGroupActive();
      } else {
        if (colDef.lockVisible) {
          return;
        }
        checked = column.isVisible();
      }
      checked ? checkedCount++ : uncheckedCount++;
    });
    if (checkedCount > 0 && uncheckedCount > 0) {
      return undefined;
    }
    return !(checkedCount === 0 || uncheckedCount > 0);
  };
  PrimaryColsListPanel.prototype.setFilterText = function (filterText) {
    this.filterText = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.exists(filterText) ? filterText.toLowerCase() : null;
    this.markFilteredColumns();
    this.flattenAndFilterModel();
  };
  PrimaryColsListPanel.prototype.markFilteredColumns = function () {
    var _this = this;
    var passesFilter = function (item) {
      if (!_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.exists(_this.filterText)) {
        return true;
      }
      var displayName = item.getDisplayName();
      return displayName == null || displayName.toLowerCase().indexOf(_this.filterText) !== -1;
    };
    var recursivelyCheckFilter = function (item, parentPasses) {
      var atLeastOneChildPassed = false;
      if (item.isGroup()) {
        var groupPasses_1 = passesFilter(item);
        item.getChildren().forEach(function (child) {
          var childPasses = recursivelyCheckFilter(child, groupPasses_1 || parentPasses);
          if (childPasses) {
            atLeastOneChildPassed = childPasses;
          }
        });
      }
      var filterPasses = parentPasses || atLeastOneChildPassed ? true : passesFilter(item);
      item.setPassesFilter(filterPasses);
      return filterPasses;
    };
    this.allColsTree.forEach(function (item) {
      return recursivelyCheckFilter(item, false);
    });
  };
  PrimaryColsListPanel.prototype.notifyListeners = function () {
    this.fireGroupExpandedEvent();
    this.fireSelectionChangedEvent();
  };
  PrimaryColsListPanel.prototype.fireGroupExpandedEvent = function () {
    var expandState = this.getExpandState();
    this.dispatchEvent({
      type: 'groupExpanded',
      state: expandState
    });
  };
  PrimaryColsListPanel.prototype.fireSelectionChangedEvent = function () {
    var selectionState = this.getSelectionState();
    this.dispatchEvent({
      type: 'selectionChanged',
      state: selectionState
    });
  };
  PrimaryColsListPanel.TEMPLATE = "<div class=\"" + PRIMARY_COLS_LIST_PANEL_CLASS + "\" role=\"presentation\"></div>";
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')], PrimaryColsListPanel.prototype, "columnModel", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('toolPanelColDefService')], PrimaryColsListPanel.prototype, "colDefService", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('modelItemUtils')], PrimaryColsListPanel.prototype, "modelItemUtils", void 0);
  __decorate([_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.PreDestroy], PrimaryColsListPanel.prototype, "destroyColumnTree", null);
  return PrimaryColsListPanel;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Component);


/***/ }),

/***/ 121246:
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/column-tool-panel/dist/es6/columnToolPanel/primaryColsListPanelItemDragFeature.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PrimaryColsListPanelItemDragFeature": () => (/* binding */ PrimaryColsListPanelItemDragFeature)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
/* harmony import */ var _toolPanelColumnGroupComp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toolPanelColumnGroupComp */ 778070);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var PRIMARY_COLS_LIST_ITEM_HOVERED = 'ag-column-list-item-hovered';
var PrimaryColsListPanelItemDragFeature = /** @class */function (_super) {
  __extends(PrimaryColsListPanelItemDragFeature, _super);
  function PrimaryColsListPanelItemDragFeature(comp, virtualList) {
    var _this = _super.call(this) || this;
    _this.comp = comp;
    _this.virtualList = virtualList;
    _this.currentDragColumn = null;
    _this.lastHoveredColumnItem = null;
    return _this;
  }
  PrimaryColsListPanelItemDragFeature.prototype.postConstruct = function () {
    this.addManagedListener(this.eventService, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PANEL_ITEM_DRAG_START, this.columnPanelItemDragStart.bind(this));
    this.addManagedListener(this.eventService, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PANEL_ITEM_DRAG_END, this.columnPanelItemDragEnd.bind(this));
    this.createDropTarget();
    this.createAutoScrollService();
  };
  PrimaryColsListPanelItemDragFeature.prototype.columnPanelItemDragStart = function (_a) {
    var column = _a.column;
    this.currentDragColumn = column;
    var currentColumns = this.getCurrentColumns();
    var hasNotMovable = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.find(currentColumns, function (col) {
      var colDef = col.getColDef();
      return !!colDef.suppressMovable || !!colDef.lockPosition;
    });
    if (hasNotMovable) {
      this.moveBlocked = true;
    }
  };
  PrimaryColsListPanelItemDragFeature.prototype.columnPanelItemDragEnd = function () {
    var _this = this;
    window.setTimeout(function () {
      _this.currentDragColumn = null;
      _this.moveBlocked = false;
    }, 10);
  };
  PrimaryColsListPanelItemDragFeature.prototype.createDropTarget = function () {
    var _this = this;
    var dropTarget = {
      isInterestedIn: function (type) {
        return type === _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.DragSourceType.ToolPanel;
      },
      getIconName: function () {
        return _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.DragAndDropService[_this.moveBlocked ? 'ICON_NOT_ALLOWED' : 'ICON_MOVE'];
      },
      getContainer: function () {
        return _this.comp.getGui();
      },
      onDragging: function (e) {
        return _this.onDragging(e);
      },
      onDragStop: function () {
        return _this.onDragStop();
      },
      onDragLeave: function () {
        return _this.onDragLeave();
      }
    };
    this.dragAndDropService.addDropTarget(dropTarget);
  };
  PrimaryColsListPanelItemDragFeature.prototype.createAutoScrollService = function () {
    var virtualListGui = this.virtualList.getGui();
    this.autoScrollService = new _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.AutoScrollService({
      scrollContainer: virtualListGui,
      scrollAxis: 'y',
      getVerticalPosition: function () {
        return virtualListGui.scrollTop;
      },
      setVerticalPosition: function (position) {
        return virtualListGui.scrollTop = position;
      }
    });
  };
  PrimaryColsListPanelItemDragFeature.prototype.onDragging = function (e) {
    if (!this.currentDragColumn || this.moveBlocked) {
      return;
    }
    var hoveredColumnItem = this.getDragColumnItem(e);
    var comp = this.virtualList.getComponentAt(hoveredColumnItem.rowIndex);
    if (!comp) {
      return;
    }
    var el = comp.getGui().parentElement;
    if (this.lastHoveredColumnItem && this.lastHoveredColumnItem.rowIndex === hoveredColumnItem.rowIndex && this.lastHoveredColumnItem.position === hoveredColumnItem.position) {
      return;
    }
    this.autoScrollService.check(e.event);
    this.clearHoveredItems();
    this.lastHoveredColumnItem = hoveredColumnItem;
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.radioCssClass(el, "" + PRIMARY_COLS_LIST_ITEM_HOVERED);
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.radioCssClass(el, "ag-item-highlight-" + hoveredColumnItem.position);
  };
  PrimaryColsListPanelItemDragFeature.prototype.getDragColumnItem = function (e) {
    var virtualListGui = this.virtualList.getGui();
    var paddingTop = parseFloat(window.getComputedStyle(virtualListGui).paddingTop);
    var rowHeight = this.virtualList.getRowHeight();
    var scrollTop = this.virtualList.getScrollTop();
    var rowIndex = Math.max(0, (e.y - paddingTop + scrollTop) / rowHeight);
    var maxLen = this.comp.getDisplayedColsList().length - 1;
    var normalizedRowIndex = Math.min(maxLen, rowIndex) | 0;
    return {
      rowIndex: normalizedRowIndex,
      position: Math.round(rowIndex) > rowIndex || rowIndex > maxLen ? 'bottom' : 'top',
      component: this.virtualList.getComponentAt(normalizedRowIndex)
    };
  };
  PrimaryColsListPanelItemDragFeature.prototype.onDragStop = function () {
    if (this.moveBlocked) {
      return;
    }
    var targetIndex = this.getTargetIndex();
    var columnsToMove = this.getCurrentColumns();
    if (targetIndex != null) {
      this.columnModel.moveColumns(columnsToMove, targetIndex);
    }
    this.clearHoveredItems();
    this.autoScrollService.ensureCleared();
  };
  PrimaryColsListPanelItemDragFeature.prototype.getMoveDiff = function (end) {
    var allColumns = this.columnModel.getAllGridColumns();
    var currentColumns = this.getCurrentColumns();
    var currentColumn = currentColumns[0];
    var span = currentColumns.length;
    var currentIndex = allColumns.indexOf(currentColumn);
    if (currentIndex < end) {
      return span;
    }
    return 0;
  };
  PrimaryColsListPanelItemDragFeature.prototype.getCurrentColumns = function () {
    if (this.currentDragColumn instanceof _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ProvidedColumnGroup) {
      return this.currentDragColumn.getLeafColumns();
    }
    return [this.currentDragColumn];
  };
  PrimaryColsListPanelItemDragFeature.prototype.getTargetIndex = function () {
    if (!this.lastHoveredColumnItem) {
      return null;
    }
    var columnItemComponent = this.lastHoveredColumnItem.component;
    var isBefore = this.lastHoveredColumnItem.position === 'top';
    var targetColumn;
    if (columnItemComponent instanceof _toolPanelColumnGroupComp__WEBPACK_IMPORTED_MODULE_1__.ToolPanelColumnGroupComp) {
      var columns = columnItemComponent.getColumns();
      targetColumn = columns[0];
      isBefore = true;
    } else {
      targetColumn = columnItemComponent.getColumn();
    }
    var targetColumnIndex = this.columnModel.getAllGridColumns().indexOf(targetColumn);
    var adjustedTarget = isBefore ? targetColumnIndex : targetColumnIndex + 1;
    var diff = this.getMoveDiff(adjustedTarget);
    return adjustedTarget - diff;
  };
  PrimaryColsListPanelItemDragFeature.prototype.onDragLeave = function () {
    this.clearHoveredItems();
    this.autoScrollService.ensureCleared();
  };
  PrimaryColsListPanelItemDragFeature.prototype.clearHoveredItems = function () {
    var virtualListGui = this.virtualList.getGui();
    virtualListGui.querySelectorAll("." + PRIMARY_COLS_LIST_ITEM_HOVERED).forEach(function (el) {
      [PRIMARY_COLS_LIST_ITEM_HOVERED, 'ag-item-highlight-top', 'ag-item-highlight-bottom'].forEach(function (cls) {
        _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.removeCssClass(el, cls);
      });
    });
    this.lastHoveredColumnItem = null;
  };
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')], PrimaryColsListPanelItemDragFeature.prototype, "columnModel", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('dragAndDropService')], PrimaryColsListPanelItemDragFeature.prototype, "dragAndDropService", void 0);
  __decorate([_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.PostConstruct], PrimaryColsListPanelItemDragFeature.prototype, "postConstruct", null);
  return PrimaryColsListPanelItemDragFeature;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.BeanStub);


/***/ }),

/***/ 886154:
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/column-tool-panel/dist/es6/columnToolPanel/primaryColsPanel.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PrimaryColsPanel": () => (/* binding */ PrimaryColsPanel)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var PrimaryColsPanel = /** @class */function (_super) {
  __extends(PrimaryColsPanel, _super);
  function PrimaryColsPanel() {
    return _super.call(this, PrimaryColsPanel.TEMPLATE) || this;
  }
  PrimaryColsPanel.prototype.postConstruct = function () {
    this.initialiseTabGuard({});
  };
  // we allow dragging in the toolPanel, but not when this component appears in the column menu
  PrimaryColsPanel.prototype.init = function (allowDragging, params, eventType) {
    this.allowDragging = allowDragging;
    this.params = params;
    this.eventType = eventType;
    this.primaryColsHeaderPanel.init(this.params);
    var hideFilter = this.params.suppressColumnFilter;
    var hideSelect = this.params.suppressColumnSelectAll;
    var hideExpand = this.params.suppressColumnExpandAll;
    if (hideExpand && hideFilter && hideSelect) {
      this.primaryColsHeaderPanel.setDisplayed(false);
    }
    this.addManagedListener(this.primaryColsListPanel, 'groupExpanded', this.onGroupExpanded.bind(this));
    this.addManagedListener(this.primaryColsListPanel, 'selectionChanged', this.onSelectionChange.bind(this));
    this.primaryColsListPanel.init(this.params, this.allowDragging, this.eventType);
    this.addManagedListener(this.primaryColsHeaderPanel, 'expandAll', this.onExpandAll.bind(this));
    this.addManagedListener(this.primaryColsHeaderPanel, 'collapseAll', this.onCollapseAll.bind(this));
    this.addManagedListener(this.primaryColsHeaderPanel, 'selectAll', this.onSelectAll.bind(this));
    this.addManagedListener(this.primaryColsHeaderPanel, 'unselectAll', this.onUnselectAll.bind(this));
    this.addManagedListener(this.primaryColsHeaderPanel, 'filterChanged', this.onFilterChanged.bind(this));
    this.positionableFeature = new _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.PositionableFeature(this.getGui(), {
      minHeight: 100
    });
    this.createManagedBean(this.positionableFeature);
  };
  PrimaryColsPanel.prototype.toggleResizable = function (resizable) {
    this.positionableFeature.setResizable(resizable ? {
      bottom: true
    } : false);
  };
  PrimaryColsPanel.prototype.onExpandAll = function () {
    this.primaryColsListPanel.doSetExpandedAll(true);
  };
  PrimaryColsPanel.prototype.onCollapseAll = function () {
    this.primaryColsListPanel.doSetExpandedAll(false);
  };
  PrimaryColsPanel.prototype.expandGroups = function (groupIds) {
    this.primaryColsListPanel.setGroupsExpanded(true, groupIds);
  };
  PrimaryColsPanel.prototype.collapseGroups = function (groupIds) {
    this.primaryColsListPanel.setGroupsExpanded(false, groupIds);
  };
  PrimaryColsPanel.prototype.setColumnLayout = function (colDefs) {
    this.primaryColsListPanel.setColumnLayout(colDefs);
  };
  PrimaryColsPanel.prototype.onFilterChanged = function (event) {
    this.primaryColsListPanel.setFilterText(event.filterText);
  };
  PrimaryColsPanel.prototype.syncLayoutWithGrid = function () {
    this.primaryColsListPanel.onColumnsChanged();
  };
  PrimaryColsPanel.prototype.onSelectAll = function () {
    this.primaryColsListPanel.doSetSelectedAll(true);
  };
  PrimaryColsPanel.prototype.onUnselectAll = function () {
    this.primaryColsListPanel.doSetSelectedAll(false);
  };
  PrimaryColsPanel.prototype.onGroupExpanded = function (event) {
    this.primaryColsHeaderPanel.setExpandState(event.state);
  };
  PrimaryColsPanel.prototype.onSelectionChange = function (event) {
    this.primaryColsHeaderPanel.setSelectionState(event.state);
  };
  PrimaryColsPanel.TEMPLATE = "<div class=\"ag-column-select\">\n            <ag-primary-cols-header ref=\"primaryColsHeaderPanel\"></ag-primary-cols-header>\n            <ag-primary-cols-list ref=\"primaryColsListPanel\"></ag-primary-cols-list>\n        </div>";
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('primaryColsHeaderPanel')], PrimaryColsPanel.prototype, "primaryColsHeaderPanel", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('primaryColsListPanel')], PrimaryColsPanel.prototype, "primaryColsListPanel", void 0);
  __decorate([_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.PostConstruct], PrimaryColsPanel.prototype, "postConstruct", null);
  return PrimaryColsPanel;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.TabGuardComp);


/***/ }),

/***/ 211798:
/*!************************************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/column-tool-panel/dist/es6/columnToolPanel/toolPanelColumnComp.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ToolPanelColumnComp": () => (/* binding */ ToolPanelColumnComp)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var ToolPanelColumnComp = /** @class */function (_super) {
  __extends(ToolPanelColumnComp, _super);
  function ToolPanelColumnComp(column, columnDept, allowDragging, groupsExist, focusWrapper) {
    var _this = _super.call(this) || this;
    _this.column = column;
    _this.columnDept = columnDept;
    _this.allowDragging = allowDragging;
    _this.groupsExist = groupsExist;
    _this.focusWrapper = focusWrapper;
    _this.processingColumnStateChange = false;
    return _this;
  }
  ToolPanelColumnComp.prototype.init = function () {
    var _this = this;
    this.setTemplate(ToolPanelColumnComp.TEMPLATE);
    this.eDragHandle = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('columnDrag', this.gridOptionsWrapper);
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.addCssClass(this.eDragHandle, 'ag-drag-handle');
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.addCssClass(this.eDragHandle, 'ag-column-select-column-drag-handle');
    var checkboxGui = this.cbSelect.getGui();
    var checkboxInput = this.cbSelect.getInputElement();
    checkboxGui.insertAdjacentElement('afterend', this.eDragHandle);
    checkboxInput.setAttribute('tabindex', '-1');
    this.displayName = this.columnModel.getDisplayNameForColumn(this.column, 'columnToolPanel');
    var displayNameSanitised = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.escapeString(this.displayName);
    this.eLabel.innerHTML = displayNameSanitised;
    // if grouping, we add an extra level of indent, to cater for expand/contract icons we need to indent for
    var indent = this.columnDept;
    if (this.groupsExist) {
      this.addCssClass('ag-column-select-add-group-indent');
    }
    this.addCssClass("ag-column-select-indent-" + indent);
    this.setupDragging();
    this.addManagedListener(this.eventService, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onColumnStateChanged.bind(this));
    this.addManagedListener(this.column, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Column.EVENT_VALUE_CHANGED, this.onColumnStateChanged.bind(this));
    this.addManagedListener(this.column, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Column.EVENT_PIVOT_CHANGED, this.onColumnStateChanged.bind(this));
    this.addManagedListener(this.column, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Column.EVENT_ROW_GROUP_CHANGED, this.onColumnStateChanged.bind(this));
    this.addManagedListener(this.column, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Column.EVENT_VISIBLE_CHANGED, this.onColumnStateChanged.bind(this));
    this.addManagedListener(this.focusWrapper, 'keydown', this.handleKeyDown.bind(this));
    this.addManagedListener(this.gridOptionsWrapper, 'functionsReadOnly', this.onColumnStateChanged.bind(this));
    this.addManagedListener(this.cbSelect, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.AgCheckbox.EVENT_CHANGED, this.onCheckboxChanged.bind(this));
    this.addManagedListener(this.eLabel, 'click', this.onLabelClicked.bind(this));
    this.onColumnStateChanged();
    this.refreshAriaLabel();
    this.setupTooltip();
    var classes = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.CssClassApplier.getToolPanelClassesFromColDef(this.column.getColDef(), this.gridOptionsWrapper, this.column, null);
    classes.forEach(function (c) {
      return _this.addOrRemoveCssClass(c, true);
    });
  };
  ToolPanelColumnComp.prototype.getColumn = function () {
    return this.column;
  };
  ToolPanelColumnComp.prototype.setupTooltip = function () {
    var _this = this;
    var refresh = function () {
      var newTooltipText = _this.column.getColDef().headerTooltip;
      _this.setTooltip(newTooltipText);
    };
    refresh();
    this.addManagedListener(this.eventService, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_NEW_COLUMNS_LOADED, refresh);
  };
  ToolPanelColumnComp.prototype.getTooltipParams = function () {
    var res = _super.prototype.getTooltipParams.call(this);
    res.location = 'columnToolPanelColumn';
    res.colDef = this.column.getColDef();
    return res;
  };
  ToolPanelColumnComp.prototype.handleKeyDown = function (e) {
    if (e.keyCode === _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.KeyCode.SPACE) {
      e.preventDefault();
      if (this.isSelectable()) {
        this.onSelectAllChanged(!this.isSelected());
      }
    }
  };
  ToolPanelColumnComp.prototype.onLabelClicked = function () {
    if (this.gridOptionsWrapper.isFunctionsReadOnly()) {
      return;
    }
    var nextState = !this.cbSelect.getValue();
    this.onChangeCommon(nextState);
  };
  ToolPanelColumnComp.prototype.onCheckboxChanged = function (event) {
    this.onChangeCommon(event.selected);
  };
  ToolPanelColumnComp.prototype.onChangeCommon = function (nextState) {
    // ignore lock visible columns
    if (this.cbSelect.isReadOnly()) {
      return;
    }
    this.refreshAriaLabel();
    // only want to action if the user clicked the checkbox, not if we are setting the checkbox because
    // of a change in the model
    if (this.processingColumnStateChange) {
      return;
    }
    this.modelItemUtils.setColumn(this.column, nextState, 'toolPanelUi');
  };
  ToolPanelColumnComp.prototype.refreshAriaLabel = function () {
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    var columnLabel = translate('ariaColumn', 'Column');
    var state = this.cbSelect.getValue() ? translate('ariaVisible', 'visible') : translate('ariaHidden', 'hidden');
    var visibilityLabel = translate('ariaToggleVisibility', 'Press SPACE to toggle visibility');
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.setAriaLabel(this.focusWrapper, this.displayName + " " + columnLabel);
    this.cbSelect.setInputAriaLabel(visibilityLabel + " (" + state + ")");
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.setAriaDescribedBy(this.focusWrapper, this.cbSelect.getInputElement().id);
  };
  ToolPanelColumnComp.prototype.setupDragging = function () {
    var _this = this;
    if (!this.allowDragging) {
      _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eDragHandle, false);
      return;
    }
    var dragSource = {
      type: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.DragSourceType.ToolPanel,
      eElement: this.eDragHandle,
      dragItemName: this.displayName,
      getDragItem: function () {
        return _this.createDragItem();
      },
      onDragStarted: function () {
        var event = {
          type: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PANEL_ITEM_DRAG_START,
          column: _this.column
        };
        _this.eventService.dispatchEvent(event);
      },
      onDragStopped: function () {
        var event = {
          type: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PANEL_ITEM_DRAG_END
        };
        _this.eventService.dispatchEvent(event);
      }
    };
    this.dragAndDropService.addDragSource(dragSource, true);
    this.addDestroyFunc(function () {
      return _this.dragAndDropService.removeDragSource(dragSource);
    });
  };
  ToolPanelColumnComp.prototype.createDragItem = function () {
    var visibleState = {};
    visibleState[this.column.getId()] = this.column.isVisible();
    return {
      columns: [this.column],
      visibleState: visibleState
    };
  };
  ToolPanelColumnComp.prototype.onColumnStateChanged = function () {
    this.processingColumnStateChange = true;
    var isPivotMode = this.columnModel.isPivotMode();
    if (isPivotMode) {
      // if reducing, checkbox means column is one of pivot, value or group
      var anyFunctionActive = this.column.isAnyFunctionActive();
      this.cbSelect.setValue(anyFunctionActive);
    } else {
      // if not reducing, the checkbox tells us if column is visible or not
      this.cbSelect.setValue(this.column.isVisible());
    }
    var checkboxReadOnly;
    if (isPivotMode) {
      // when in pivot mode, the item should be read only if:
      //  a) gui is not allowed make any changes
      var functionsReadOnly = this.gridOptionsWrapper.isFunctionsReadOnly();
      //  b) column is not allow any functions on it
      var noFunctionsAllowed = !this.column.isAnyFunctionAllowed();
      checkboxReadOnly = functionsReadOnly || noFunctionsAllowed;
    } else {
      // when in normal mode, the checkbox is read only if visibility is locked
      checkboxReadOnly = !!this.column.getColDef().lockVisible;
    }
    this.cbSelect.setReadOnly(checkboxReadOnly);
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.addOrRemoveCssClass(this.getGui(), 'ag-column-select-column-readonly', checkboxReadOnly);
    var checkboxPassive = isPivotMode && this.gridOptionsWrapper.isFunctionsPassive();
    this.cbSelect.setPassive(checkboxPassive);
    this.processingColumnStateChange = false;
  };
  ToolPanelColumnComp.prototype.getDisplayName = function () {
    return this.displayName;
  };
  ToolPanelColumnComp.prototype.onSelectAllChanged = function (value) {
    if (value !== this.cbSelect.getValue()) {
      if (!this.cbSelect.isReadOnly()) {
        this.cbSelect.toggle();
      }
    }
  };
  ToolPanelColumnComp.prototype.isSelected = function () {
    return this.cbSelect.getValue();
  };
  ToolPanelColumnComp.prototype.isSelectable = function () {
    return !this.cbSelect.isReadOnly();
  };
  ToolPanelColumnComp.prototype.isExpandable = function () {
    return false;
  };
  ToolPanelColumnComp.prototype.setExpanded = function (value) {
    console.warn('ag-grid: can not expand a column item that does not represent a column group header');
  };
  ToolPanelColumnComp.TEMPLATE = "<div class=\"ag-column-select-column\" aria-hidden=\"true\">\n            <ag-checkbox ref=\"cbSelect\" class=\"ag-column-select-checkbox\"></ag-checkbox>\n            <span class=\"ag-column-select-column-label\" ref=\"eLabel\"></span>\n        </div>";
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')], ToolPanelColumnComp.prototype, "columnModel", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('dragAndDropService')], ToolPanelColumnComp.prototype, "dragAndDropService", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('modelItemUtils')], ToolPanelColumnComp.prototype, "modelItemUtils", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eLabel')], ToolPanelColumnComp.prototype, "eLabel", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('cbSelect')], ToolPanelColumnComp.prototype, "cbSelect", void 0);
  __decorate([_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.PostConstruct], ToolPanelColumnComp.prototype, "init", null);
  return ToolPanelColumnComp;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Component);


/***/ }),

/***/ 778070:
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/column-tool-panel/dist/es6/columnToolPanel/toolPanelColumnGroupComp.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ToolPanelColumnGroupComp": () => (/* binding */ ToolPanelColumnGroupComp)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
/* harmony import */ var _columnModelItem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./columnModelItem */ 756526);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var ToolPanelColumnGroupComp = /** @class */function (_super) {
  __extends(ToolPanelColumnGroupComp, _super);
  function ToolPanelColumnGroupComp(modelItem, allowDragging, eventType, focusWrapper) {
    var _this = _super.call(this) || this;
    _this.modelItem = modelItem;
    _this.allowDragging = allowDragging;
    _this.eventType = eventType;
    _this.focusWrapper = focusWrapper;
    _this.processingColumnStateChange = false;
    _this.modelItem = modelItem;
    _this.columnGroup = modelItem.getColumnGroup();
    _this.columnDept = modelItem.getDept();
    _this.allowDragging = allowDragging;
    return _this;
  }
  ToolPanelColumnGroupComp.prototype.init = function () {
    var _this = this;
    this.setTemplate(ToolPanelColumnGroupComp.TEMPLATE);
    this.eDragHandle = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('columnDrag', this.gridOptionsWrapper);
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.addCssClass(this.eDragHandle, 'ag-drag-handle');
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.addCssClass(this.eDragHandle, 'ag-column-select-column-group-drag-handle');
    var checkboxGui = this.cbSelect.getGui();
    var checkboxInput = this.cbSelect.getInputElement();
    checkboxGui.insertAdjacentElement('afterend', this.eDragHandle);
    checkboxInput.setAttribute('tabindex', '-1');
    this.displayName = this.columnModel.getDisplayNameForOriginalColumnGroup(null, this.columnGroup, this.eventType);
    if (_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.missing(this.displayName)) {
      this.displayName = '>>';
    }
    this.eLabel.innerHTML = this.displayName ? this.displayName : '';
    this.setupExpandContract();
    this.addCssClass('ag-column-select-indent-' + this.columnDept);
    this.addManagedListener(this.eventService, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onColumnStateChanged.bind(this));
    this.addManagedListener(this.eLabel, 'click', this.onLabelClicked.bind(this));
    this.addManagedListener(this.cbSelect, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.AgCheckbox.EVENT_CHANGED, this.onCheckboxChanged.bind(this));
    this.addManagedListener(this.modelItem, _columnModelItem__WEBPACK_IMPORTED_MODULE_1__.ColumnModelItem.EVENT_EXPANDED_CHANGED, this.onExpandChanged.bind(this));
    this.addManagedListener(this.focusWrapper, 'keydown', this.handleKeyDown.bind(this));
    this.setOpenClosedIcons();
    this.setupDragging();
    this.onColumnStateChanged();
    this.addVisibilityListenersToAllChildren();
    this.refreshAriaExpanded();
    this.refreshAriaLabel();
    this.setupTooltip();
    var classes = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.CssClassApplier.getToolPanelClassesFromColDef(this.columnGroup.getColGroupDef(), this.gridOptionsWrapper, null, this.columnGroup);
    classes.forEach(function (c) {
      return _this.addOrRemoveCssClass(c, true);
    });
  };
  ToolPanelColumnGroupComp.prototype.getColumns = function () {
    return this.columnGroup.getLeafColumns();
  };
  ToolPanelColumnGroupComp.prototype.setupTooltip = function () {
    var _this = this;
    var colGroupDef = this.columnGroup.getColGroupDef();
    if (!colGroupDef) {
      return;
    }
    var refresh = function () {
      var newTooltipText = colGroupDef.headerTooltip;
      _this.setTooltip(newTooltipText);
    };
    refresh();
    this.addManagedListener(this.eventService, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_NEW_COLUMNS_LOADED, refresh);
  };
  ToolPanelColumnGroupComp.prototype.getTooltipParams = function () {
    var res = _super.prototype.getTooltipParams.call(this);
    res.location = 'columnToolPanelColumnGroup';
    return res;
  };
  ToolPanelColumnGroupComp.prototype.handleKeyDown = function (e) {
    switch (e.keyCode) {
      case _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.KeyCode.LEFT:
        e.preventDefault();
        this.modelItem.setExpanded(false);
        break;
      case _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.KeyCode.RIGHT:
        e.preventDefault();
        this.modelItem.setExpanded(true);
        break;
      case _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.KeyCode.SPACE:
        e.preventDefault();
        if (this.isSelectable()) {
          this.onSelectAllChanged(!this.isSelected());
        }
        break;
    }
  };
  ToolPanelColumnGroupComp.prototype.addVisibilityListenersToAllChildren = function () {
    var _this = this;
    this.columnGroup.getLeafColumns().forEach(function (column) {
      _this.addManagedListener(column, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Column.EVENT_VISIBLE_CHANGED, _this.onColumnStateChanged.bind(_this));
      _this.addManagedListener(column, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Column.EVENT_VALUE_CHANGED, _this.onColumnStateChanged.bind(_this));
      _this.addManagedListener(column, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Column.EVENT_PIVOT_CHANGED, _this.onColumnStateChanged.bind(_this));
      _this.addManagedListener(column, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Column.EVENT_ROW_GROUP_CHANGED, _this.onColumnStateChanged.bind(_this));
    });
  };
  ToolPanelColumnGroupComp.prototype.setupDragging = function () {
    var _this = this;
    if (!this.allowDragging) {
      _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eDragHandle, false);
      return;
    }
    var dragSource = {
      type: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.DragSourceType.ToolPanel,
      eElement: this.eDragHandle,
      dragItemName: this.displayName,
      getDragItem: function () {
        return _this.createDragItem();
      },
      onDragStarted: function () {
        var event = {
          type: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PANEL_ITEM_DRAG_START,
          column: _this.columnGroup
        };
        _this.eventService.dispatchEvent(event);
      },
      onDragStopped: function () {
        var event = {
          type: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PANEL_ITEM_DRAG_END
        };
        _this.eventService.dispatchEvent(event);
      }
    };
    this.dragAndDropService.addDragSource(dragSource, true);
    this.addDestroyFunc(function () {
      return _this.dragAndDropService.removeDragSource(dragSource);
    });
  };
  ToolPanelColumnGroupComp.prototype.createDragItem = function () {
    var visibleState = {};
    this.columnGroup.getLeafColumns().forEach(function (col) {
      visibleState[col.getId()] = col.isVisible();
    });
    return {
      columns: this.columnGroup.getLeafColumns(),
      visibleState: visibleState
    };
  };
  ToolPanelColumnGroupComp.prototype.setupExpandContract = function () {
    this.eGroupClosedIcon.appendChild(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIcon('columnSelectClosed', this.gridOptionsWrapper, null));
    this.eGroupOpenedIcon.appendChild(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIcon('columnSelectOpen', this.gridOptionsWrapper, null));
    this.addManagedListener(this.eGroupClosedIcon, 'click', this.onExpandOrContractClicked.bind(this));
    this.addManagedListener(this.eGroupOpenedIcon, 'click', this.onExpandOrContractClicked.bind(this));
    var touchListener = new _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.TouchListener(this.eColumnGroupIcons, true);
    this.addManagedListener(touchListener, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.TouchListener.EVENT_TAP, this.onExpandOrContractClicked.bind(this));
    this.addDestroyFunc(touchListener.destroy.bind(touchListener));
  };
  ToolPanelColumnGroupComp.prototype.onLabelClicked = function () {
    var nextState = !this.cbSelect.getValue();
    this.onChangeCommon(nextState);
  };
  ToolPanelColumnGroupComp.prototype.onCheckboxChanged = function (event) {
    this.onChangeCommon(event.selected);
  };
  ToolPanelColumnGroupComp.prototype.getVisibleLeafColumns = function () {
    var childColumns = [];
    var extractCols = function (children) {
      children.forEach(function (child) {
        if (!child.isPassesFilter()) {
          return;
        }
        if (child.isGroup()) {
          extractCols(child.getChildren());
        } else {
          childColumns.push(child.getColumn());
        }
      });
    };
    extractCols(this.modelItem.getChildren());
    return childColumns;
  };
  ToolPanelColumnGroupComp.prototype.onChangeCommon = function (nextState) {
    this.refreshAriaLabel();
    if (this.processingColumnStateChange) {
      return;
    }
    this.modelItemUtils.selectAllChildren(this.modelItem.getChildren(), nextState, this.eventType);
  };
  ToolPanelColumnGroupComp.prototype.refreshAriaLabel = function () {
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    var columnLabel = translate('ariaColumnGroup', 'Column Group');
    var state = this.cbSelect.getValue() ? translate('ariaVisible', 'visible') : translate('ariaHidden', 'hidden');
    var visibilityLabel = translate('ariaToggleVisibility', 'Press SPACE to toggle visibility');
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.setAriaLabel(this.focusWrapper, this.displayName + " " + columnLabel);
    this.cbSelect.setInputAriaLabel(visibilityLabel + " (" + state + ")");
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.setAriaDescribedBy(this.focusWrapper, this.cbSelect.getInputElement().id);
  };
  ToolPanelColumnGroupComp.prototype.onColumnStateChanged = function () {
    var selectedValue = this.workOutSelectedValue();
    var readOnlyValue = this.workOutReadOnlyValue();
    this.processingColumnStateChange = true;
    this.cbSelect.setValue(selectedValue);
    this.cbSelect.setReadOnly(readOnlyValue);
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.addOrRemoveCssClass(this.getGui(), 'ag-column-select-column-group-readonly', readOnlyValue);
    this.processingColumnStateChange = false;
  };
  ToolPanelColumnGroupComp.prototype.workOutSelectedValue = function () {
    var _this = this;
    var pivotMode = this.columnModel.isPivotMode();
    var visibleLeafColumns = this.getVisibleLeafColumns();
    var checkedCount = 0;
    var uncheckedCount = 0;
    visibleLeafColumns.forEach(function (column) {
      if (!pivotMode && column.getColDef().lockVisible) {
        return;
      }
      if (_this.isColumnChecked(column, pivotMode)) {
        checkedCount++;
      } else {
        uncheckedCount++;
      }
    });
    if (checkedCount > 0 && uncheckedCount > 0) {
      return undefined;
    }
    return checkedCount > 0;
  };
  ToolPanelColumnGroupComp.prototype.workOutReadOnlyValue = function () {
    var pivotMode = this.columnModel.isPivotMode();
    var colsThatCanAction = 0;
    this.columnGroup.getLeafColumns().forEach(function (col) {
      if (pivotMode) {
        if (col.isAnyFunctionAllowed()) {
          colsThatCanAction++;
        }
      } else {
        if (!col.getColDef().lockVisible) {
          colsThatCanAction++;
        }
      }
    });
    return colsThatCanAction === 0;
  };
  ToolPanelColumnGroupComp.prototype.isColumnChecked = function (column, pivotMode) {
    if (pivotMode) {
      var pivoted = column.isPivotActive();
      var grouped = column.isRowGroupActive();
      var aggregated = column.isValueActive();
      return pivoted || grouped || aggregated;
    }
    return column.isVisible();
  };
  ToolPanelColumnGroupComp.prototype.onExpandOrContractClicked = function () {
    var oldState = this.modelItem.isExpanded();
    this.modelItem.setExpanded(!oldState);
  };
  ToolPanelColumnGroupComp.prototype.onExpandChanged = function () {
    this.setOpenClosedIcons();
    this.refreshAriaExpanded();
  };
  ToolPanelColumnGroupComp.prototype.setOpenClosedIcons = function () {
    var folderOpen = this.modelItem.isExpanded();
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eGroupClosedIcon, !folderOpen);
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eGroupOpenedIcon, folderOpen);
  };
  ToolPanelColumnGroupComp.prototype.refreshAriaExpanded = function () {
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.setAriaExpanded(this.focusWrapper, this.modelItem.isExpanded());
  };
  ToolPanelColumnGroupComp.prototype.getDisplayName = function () {
    return this.displayName;
  };
  ToolPanelColumnGroupComp.prototype.onSelectAllChanged = function (value) {
    var cbValue = this.cbSelect.getValue();
    var readOnly = this.cbSelect.isReadOnly();
    if (!readOnly && (value && !cbValue || !value && cbValue)) {
      this.cbSelect.toggle();
    }
  };
  ToolPanelColumnGroupComp.prototype.isSelected = function () {
    return this.cbSelect.getValue();
  };
  ToolPanelColumnGroupComp.prototype.isSelectable = function () {
    return !this.cbSelect.isReadOnly();
  };
  ToolPanelColumnGroupComp.prototype.setSelected = function (selected) {
    this.cbSelect.setValue(selected, true);
  };
  ToolPanelColumnGroupComp.TEMPLATE = "<div class=\"ag-column-select-column-group\" aria-hidden=\"true\">\n            <span class=\"ag-column-group-icons\" ref=\"eColumnGroupIcons\" >\n                <span class=\"ag-column-group-closed-icon\" ref=\"eGroupClosedIcon\"></span>\n                <span class=\"ag-column-group-opened-icon\" ref=\"eGroupOpenedIcon\"></span>\n            </span>\n            <ag-checkbox ref=\"cbSelect\" class=\"ag-column-select-checkbox\"></ag-checkbox>\n            <span class=\"ag-column-select-column-label\" ref=\"eLabel\"></span>\n        </div>";
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')], ToolPanelColumnGroupComp.prototype, "columnModel", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('dragAndDropService')], ToolPanelColumnGroupComp.prototype, "dragAndDropService", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('modelItemUtils')], ToolPanelColumnGroupComp.prototype, "modelItemUtils", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('cbSelect')], ToolPanelColumnGroupComp.prototype, "cbSelect", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eLabel')], ToolPanelColumnGroupComp.prototype, "eLabel", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eGroupOpenedIcon')], ToolPanelColumnGroupComp.prototype, "eGroupOpenedIcon", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eGroupClosedIcon')], ToolPanelColumnGroupComp.prototype, "eGroupClosedIcon", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eColumnGroupIcons')], ToolPanelColumnGroupComp.prototype, "eColumnGroupIcons", void 0);
  __decorate([_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.PostConstruct], ToolPanelColumnGroupComp.prototype, "init", null);
  return ToolPanelColumnGroupComp;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Component);


/***/ }),

/***/ 661509:
/*!***********************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/column-tool-panel/dist/es6/columnsToolPanelModule.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ColumnsToolPanelModule": () => (/* binding */ ColumnsToolPanelModule)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
/* harmony import */ var _ag_grid_enterprise_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ag-grid-enterprise/core */ 704796);
/* harmony import */ var _columnToolPanel_primaryColsHeaderPanel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./columnToolPanel/primaryColsHeaderPanel */ 61327);
/* harmony import */ var _columnToolPanel_primaryColsListPanel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./columnToolPanel/primaryColsListPanel */ 935213);
/* harmony import */ var _columnToolPanel_columnToolPanel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./columnToolPanel/columnToolPanel */ 27925);
/* harmony import */ var _columnToolPanel_primaryColsPanel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./columnToolPanel/primaryColsPanel */ 886154);
/* harmony import */ var _ag_grid_enterprise_row_grouping__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ag-grid-enterprise/row-grouping */ 244060);
/* harmony import */ var _ag_grid_enterprise_side_bar__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ag-grid-enterprise/side-bar */ 677817);
/* harmony import */ var _columnToolPanel_modelItemUtils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./columnToolPanel/modelItemUtils */ 734072);









var ColumnsToolPanelModule = {
  moduleName: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.ColumnToolPanelModule,
  beans: [_columnToolPanel_modelItemUtils__WEBPACK_IMPORTED_MODULE_8__.ModelItemUtils],
  agStackComponents: [{
    componentName: 'AgPrimaryColsHeader',
    componentClass: _columnToolPanel_primaryColsHeaderPanel__WEBPACK_IMPORTED_MODULE_2__.PrimaryColsHeaderPanel
  }, {
    componentName: 'AgPrimaryColsList',
    componentClass: _columnToolPanel_primaryColsListPanel__WEBPACK_IMPORTED_MODULE_3__.PrimaryColsListPanel
  }, {
    componentName: 'AgPrimaryCols',
    componentClass: _columnToolPanel_primaryColsPanel__WEBPACK_IMPORTED_MODULE_5__.PrimaryColsPanel
  }],
  userComponents: [{
    componentName: 'agColumnsToolPanel',
    componentClass: _columnToolPanel_columnToolPanel__WEBPACK_IMPORTED_MODULE_4__.ColumnToolPanel
  }],
  dependantModules: [_ag_grid_enterprise_core__WEBPACK_IMPORTED_MODULE_1__.EnterpriseCoreModule, _ag_grid_enterprise_row_grouping__WEBPACK_IMPORTED_MODULE_6__.RowGroupingModule, _ag_grid_enterprise_side_bar__WEBPACK_IMPORTED_MODULE_7__.SideBarModule]
};

/***/ }),

/***/ 495098:
/*!*****************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/column-tool-panel/dist/es6/main.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ColumnsToolPanelModule": () => (/* reexport safe */ _columnsToolPanelModule__WEBPACK_IMPORTED_MODULE_0__.ColumnsToolPanelModule),
/* harmony export */   "PrimaryColsPanel": () => (/* reexport safe */ _columnToolPanel_primaryColsPanel__WEBPACK_IMPORTED_MODULE_1__.PrimaryColsPanel)
/* harmony export */ });
/* harmony import */ var _columnsToolPanelModule__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./columnsToolPanelModule */ 661509);
/* harmony import */ var _columnToolPanel_primaryColsPanel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./columnToolPanel/primaryColsPanel */ 886154);

// used by the enterprise column menu


/***/ }),

/***/ 268357:
/*!****************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/menu/dist/es6/main.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MenuItemComponent": () => (/* reexport safe */ _menu_menuItemComponent__WEBPACK_IMPORTED_MODULE_1__.MenuItemComponent),
/* harmony export */   "MenuModule": () => (/* reexport safe */ _menuModule__WEBPACK_IMPORTED_MODULE_0__.MenuModule)
/* harmony export */ });
/* harmony import */ var _menuModule__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./menuModule */ 14199);
/* harmony import */ var _menu_menuItemComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./menu/menuItemComponent */ 652012);



/***/ }),

/***/ 14199:
/*!**********************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/menu/dist/es6/menuModule.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MenuModule": () => (/* binding */ MenuModule)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
/* harmony import */ var _ag_grid_enterprise_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ag-grid-enterprise/core */ 704796);
/* harmony import */ var _menu_enterpriseMenu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./menu/enterpriseMenu */ 204032);
/* harmony import */ var _menu_contextMenu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./menu/contextMenu */ 897564);
/* harmony import */ var _menu_menuItemMapper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./menu/menuItemMapper */ 980733);





var MenuModule = {
  moduleName: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.MenuModule,
  beans: [_menu_enterpriseMenu__WEBPACK_IMPORTED_MODULE_2__.EnterpriseMenuFactory, _menu_contextMenu__WEBPACK_IMPORTED_MODULE_3__.ContextMenuFactory, _menu_menuItemMapper__WEBPACK_IMPORTED_MODULE_4__.MenuItemMapper],
  dependantModules: [_ag_grid_enterprise_core__WEBPACK_IMPORTED_MODULE_1__.EnterpriseCoreModule]
};

/***/ }),

/***/ 897564:
/*!****************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/menu/dist/es6/menu/contextMenu.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ContextMenuFactory": () => (/* binding */ ContextMenuFactory)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
/* harmony import */ var _menuItemComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./menuItemComponent */ 652012);
/* harmony import */ var _menuList__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./menuList */ 901675);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};



var CSS_MENU = 'ag-menu';
var CSS_CONTEXT_MENU_OPEN = ' ag-context-menu-open';
var ContextMenuFactory = /** @class */function (_super) {
  __extends(ContextMenuFactory, _super);
  function ContextMenuFactory() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ContextMenuFactory.prototype.hideActiveMenu = function () {
    this.destroyBean(this.activeMenu);
  };
  ContextMenuFactory.prototype.getMenuItems = function (node, column, value) {
    var defaultMenuOptions = [];
    if (_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.exists(node) && _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.isRegistered(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.ClipboardModule)) {
      if (column) {
        // only makes sense if column exists, could have originated from a row
        defaultMenuOptions.push('copy', 'copyWithHeaders', 'paste', 'separator');
      }
    }
    if (this.gridOptionsWrapper.isEnableCharts() && _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.isRegistered(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.RangeSelectionModule) && _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.isRegistered(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.GridChartsModule)) {
      if (this.columnModel.isPivotMode()) {
        defaultMenuOptions.push('pivotChart');
      }
      if (this.rangeService && !this.rangeService.isEmpty()) {
        defaultMenuOptions.push('chartRange');
      }
    }
    if (_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.exists(node)) {
      // if user clicks a cell
      var csvModuleMissing = !_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.isRegistered(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.CsvExportModule);
      var excelModuleMissing = !_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.isRegistered(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.ExcelExportModule);
      var suppressExcel = this.gridOptionsWrapper.isSuppressExcelExport() || excelModuleMissing;
      var suppressCsv = this.gridOptionsWrapper.isSuppressCsvExport() || csvModuleMissing;
      var onIPad = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.isIOSUserAgent();
      var anyExport = !onIPad && (!suppressExcel || !suppressCsv);
      if (anyExport) {
        defaultMenuOptions.push('export');
      }
    }
    if (this.gridOptionsWrapper.getContextMenuItemsFunc()) {
      var userFunc = this.gridOptionsWrapper.getContextMenuItemsFunc();
      var params = {
        node: node,
        column: column,
        value: value,
        defaultItems: defaultMenuOptions.length ? defaultMenuOptions : undefined,
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        context: this.gridOptionsWrapper.getContext()
      };
      return userFunc ? userFunc(params) : undefined;
    }
    return defaultMenuOptions;
  };
  ContextMenuFactory.prototype.onContextMenu = function (mouseEvent, touchEvent, rowNode, column, value, anchorToElement) {
    // to allow us to debug in chrome, we ignore the event if ctrl is pressed.
    // not everyone wants this, so first 'if' below allows to turn this hack off.
    if (!this.gridOptionsWrapper.isAllowContextMenuWithControlKey()) {
      // then do the check
      if (mouseEvent && (mouseEvent.ctrlKey || mouseEvent.metaKey)) {
        return;
      }
    }
    // need to do this regardless of context menu showing or not, so doing
    // before the isSuppressContextMenu() check
    if (mouseEvent) {
      this.preventDefaultOnContextMenu(mouseEvent);
    }
    if (this.gridOptionsWrapper.isSuppressContextMenu()) {
      return;
    }
    var eventOrTouch = mouseEvent ? mouseEvent : touchEvent.touches[0];
    if (this.showMenu(rowNode, column, value, eventOrTouch, anchorToElement)) {
      var event_1 = mouseEvent ? mouseEvent : touchEvent;
      event_1.preventDefault();
    }
  };
  ContextMenuFactory.prototype.preventDefaultOnContextMenu = function (mouseEvent) {
    // if we don't do this, then middle click will never result in a 'click' event, as 'mousedown'
    // will be consumed by the browser to mean 'scroll' (as you can scroll with the middle mouse
    // button in the browser). so this property allows the user to receive middle button clicks if
    // they want.
    var gridOptionsWrapper = this.gridOptionsWrapper;
    var which = mouseEvent.which;
    if (gridOptionsWrapper.isPreventDefaultOnContextMenu() || gridOptionsWrapper.isSuppressMiddleClickScrolls() && which === 2) {
      mouseEvent.preventDefault();
    }
  };
  ContextMenuFactory.prototype.showMenu = function (node, column, value, mouseEvent, anchorToElement) {
    var _this = this;
    var menuItems = this.getMenuItems(node, column, value);
    var eGridBodyGui = this.ctrlsService.getGridBodyCtrl().getGui();
    if (menuItems === undefined || _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.missingOrEmpty(menuItems)) {
      return false;
    }
    var menu = new ContextMenu(menuItems);
    this.createBean(menu);
    var eMenuGui = menu.getGui();
    var positionParams = {
      column: column,
      rowNode: node,
      type: 'contextMenu',
      mouseEvent: mouseEvent,
      ePopup: eMenuGui,
      // move one pixel away so that accidentally double clicking
      // won't show the browser's contextmenu
      nudgeY: 1
    };
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    var addPopupRes = this.popupService.addPopup({
      modal: true,
      eChild: eMenuGui,
      closeOnEsc: true,
      closedCallback: function () {
        _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.removeCssClass(eGridBodyGui, CSS_CONTEXT_MENU_OPEN);
        _this.destroyBean(menu);
      },
      click: mouseEvent,
      positionCallback: function () {
        _this.popupService.positionPopupUnderMouseEvent(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.assign({}, {
          nudgeX: _this.gridOptionsWrapper.isEnableRtl() ? (eMenuGui.offsetWidth + 1) * -1 : 1
        }, positionParams));
      },
      // so when browser is scrolled down, or grid is scrolled, context menu stays with cell
      anchorToElement: anchorToElement,
      ariaLabel: translate('ariaLabelContextMenu', 'Context Menu')
    });
    if (addPopupRes) {
      _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.addCssClass(eGridBodyGui, CSS_CONTEXT_MENU_OPEN);
      menu.afterGuiAttached({
        container: 'contextMenu',
        hidePopup: addPopupRes.hideFunc
      });
    }
    // there should never be an active menu at this point, however it was found
    // that you could right click a second time just 1 or 2 pixels from the first
    // click, and another menu would pop up. so somehow the logic for closing the
    // first menu (clicking outside should close it) was glitchy somehow. an easy
    // way to avoid this is just remove the old context menu here if it exists.
    if (this.activeMenu) {
      this.hideActiveMenu();
    }
    this.activeMenu = menu;
    menu.addEventListener(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.BeanStub.EVENT_DESTROYED, function () {
      if (_this.activeMenu === menu) {
        _this.activeMenu = null;
      }
    });
    // hide the popup if something gets selected
    if (addPopupRes) {
      menu.addEventListener(_menuItemComponent__WEBPACK_IMPORTED_MODULE_1__.MenuItemComponent.EVENT_MENU_ITEM_SELECTED, addPopupRes.hideFunc);
    }
    return true;
  };
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('popupService')], ContextMenuFactory.prototype, "popupService", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Optional)('rangeService')], ContextMenuFactory.prototype, "rangeService", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('ctrlsService')], ContextMenuFactory.prototype, "ctrlsService", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')], ContextMenuFactory.prototype, "columnModel", void 0);
  ContextMenuFactory = __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Bean)('contextMenuFactory')], ContextMenuFactory);
  return ContextMenuFactory;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.BeanStub);

var ContextMenu = /** @class */function (_super) {
  __extends(ContextMenu, _super);
  function ContextMenu(menuItems) {
    var _this = _super.call(this, /* html */"<div class=\"" + CSS_MENU + "\" role=\"presentation\"></div>") || this;
    _this.menuList = null;
    _this.focusedCell = null;
    _this.menuItems = menuItems;
    return _this;
  }
  ContextMenu.prototype.addMenuItems = function () {
    var _this = this;
    var menuList = this.createBean(new _menuList__WEBPACK_IMPORTED_MODULE_2__.MenuList());
    var menuItemsMapped = this.menuItemMapper.mapWithStockItems(this.menuItems, null);
    menuList.addMenuItems(menuItemsMapped);
    this.appendChild(menuList);
    this.menuList = menuList;
    menuList.addEventListener(_menuItemComponent__WEBPACK_IMPORTED_MODULE_1__.MenuItemComponent.EVENT_MENU_ITEM_SELECTED, function (e) {
      return _this.dispatchEvent(e);
    });
  };
  ContextMenu.prototype.afterGuiAttached = function (params) {
    if (params.hidePopup) {
      this.addDestroyFunc(params.hidePopup);
    }
    this.focusedCell = this.focusService.getFocusedCell();
    if (this.menuList) {
      this.focusService.focusInto(this.menuList.getGui());
    }
  };
  ContextMenu.prototype.restoreFocusedCell = function () {
    var currentFocusedCell = this.focusService.getFocusedCell();
    if (currentFocusedCell && this.focusedCell && this.cellPositionUtils.equals(currentFocusedCell, this.focusedCell)) {
      var _a = this.focusedCell,
        rowIndex = _a.rowIndex,
        rowPinned = _a.rowPinned,
        column = _a.column;
      var doc = this.gridOptionsWrapper.getDocument();
      if (doc.activeElement === doc.body) {
        this.focusService.setFocusedCell(rowIndex, column, rowPinned, true);
      }
    }
  };
  ContextMenu.prototype.destroy = function () {
    this.restoreFocusedCell();
    _super.prototype.destroy.call(this);
  };
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('menuItemMapper')], ContextMenu.prototype, "menuItemMapper", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('focusService')], ContextMenu.prototype, "focusService", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('cellPositionUtils')], ContextMenu.prototype, "cellPositionUtils", void 0);
  __decorate([_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.PostConstruct], ContextMenu.prototype, "addMenuItems", null);
  return ContextMenu;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Component);

/***/ }),

/***/ 204032:
/*!*******************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/menu/dist/es6/menu/enterpriseMenu.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EnterpriseMenu": () => (/* binding */ EnterpriseMenu),
/* harmony export */   "EnterpriseMenuFactory": () => (/* binding */ EnterpriseMenuFactory)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
/* harmony import */ var _menuList__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./menuList */ 901675);
/* harmony import */ var _menuItemComponent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./menuItemComponent */ 652012);
/* harmony import */ var _ag_grid_enterprise_column_tool_panel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ag-grid-enterprise/column-tool-panel */ 495098);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};




var EnterpriseMenuFactory = /** @class */function (_super) {
  __extends(EnterpriseMenuFactory, _super);
  function EnterpriseMenuFactory() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  EnterpriseMenuFactory.prototype.hideActiveMenu = function () {
    this.destroyBean(this.activeMenu);
  };
  EnterpriseMenuFactory.prototype.showMenuAfterMouseEvent = function (column, mouseEvent, defaultTab) {
    var _this = this;
    this.showMenu(column, function (menu) {
      var ePopup = menu.getGui();
      _this.popupService.positionPopupUnderMouseEvent({
        type: 'columnMenu',
        column: column,
        mouseEvent: mouseEvent,
        ePopup: ePopup
      });
      if (defaultTab) {
        menu.showTab(defaultTab);
      }
    }, 'columnMenu', defaultTab, undefined, mouseEvent.target);
  };
  EnterpriseMenuFactory.prototype.showMenuAfterButtonClick = function (column, eventSource, containerType, defaultTab, restrictToTabs) {
    var _this = this;
    var multiplier = -1;
    var alignSide = 'left';
    if (this.gridOptionsWrapper.isEnableRtl()) {
      multiplier = 1;
      alignSide = 'right';
    }
    this.showMenu(column, function (menu) {
      var ePopup = menu.getGui();
      _this.popupService.positionPopupUnderComponent({
        type: containerType,
        column: column,
        eventSource: eventSource,
        ePopup: ePopup,
        alignSide: alignSide,
        nudgeX: 9 * multiplier,
        nudgeY: -23,
        keepWithinBounds: true
      });
      if (defaultTab) {
        menu.showTab(defaultTab);
      }
    }, containerType, defaultTab, restrictToTabs, eventSource);
  };
  EnterpriseMenuFactory.prototype.showMenu = function (column, positionCallback, containerType, defaultTab, restrictToTabs, eventSource) {
    var _this = this;
    var menu = this.createBean(new EnterpriseMenu(column, this.lastSelectedTab, restrictToTabs));
    var eMenuGui = menu.getGui();
    var anchorToElement = eventSource || this.ctrlsService.getGridBodyCtrl().getGui();
    var closedFuncs = [];
    closedFuncs.push(function (e) {
      _this.destroyBean(menu);
      column.setMenuVisible(false, 'contextMenu');
      var isKeyboardEvent = e instanceof KeyboardEvent;
      if (isKeyboardEvent && eventSource && _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.isVisible(eventSource)) {
        var focusableEl = _this.focusService.findTabbableParent(eventSource);
        if (focusableEl) {
          focusableEl.focus();
        }
      }
    });
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    // need to show filter before positioning, as only after filter
    // is visible can we find out what the width of it is
    var addPopupRes = this.popupService.addPopup({
      modal: true,
      eChild: eMenuGui,
      closeOnEsc: true,
      closedCallback: function (e) {
        closedFuncs.forEach(function (f) {
          return f(e);
        });
      },
      afterGuiAttached: function (params) {
        return menu.afterGuiAttached(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.assign({}, {
          container: containerType
        }, params));
      },
      positionCallback: function () {
        return positionCallback(menu);
      },
      anchorToElement: anchorToElement,
      ariaLabel: translate('ariaLabelColumnMenu', 'Column Menu')
    });
    if (addPopupRes) {
      // if user starts showing / hiding columns, or otherwise move the underlying column
      // for this menu, we want to stop tracking the menu with the column position. otherwise
      // the menu would move as the user is using the columns tab inside the menu.
      var stopAnchoringPromise = addPopupRes.stopAnchoringPromise;
      if (stopAnchoringPromise) {
        stopAnchoringPromise.then(function (stopAnchoringFunc) {
          column.addEventListener(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Column.EVENT_LEFT_CHANGED, stopAnchoringFunc);
          column.addEventListener(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Column.EVENT_VISIBLE_CHANGED, stopAnchoringFunc);
          closedFuncs.push(function () {
            column.removeEventListener(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Column.EVENT_LEFT_CHANGED, stopAnchoringFunc);
            column.removeEventListener(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Column.EVENT_VISIBLE_CHANGED, stopAnchoringFunc);
          });
        });
      }
    }
    if (!defaultTab) {
      menu.showTabBasedOnPreviousSelection();
      // reposition the menu because the method above could load
      // an element that is bigger than enterpriseMenu header.
      positionCallback(menu);
    }
    menu.addEventListener(EnterpriseMenu.EVENT_TAB_SELECTED, function (event) {
      _this.lastSelectedTab = event.key;
    });
    column.setMenuVisible(true, 'contextMenu');
    this.activeMenu = menu;
    menu.addEventListener(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.BeanStub.EVENT_DESTROYED, function () {
      if (_this.activeMenu === menu) {
        _this.activeMenu = null;
      }
    });
  };
  EnterpriseMenuFactory.prototype.isMenuEnabled = function (column) {
    return column.getMenuTabs(EnterpriseMenu.TABS_DEFAULT).length > 0;
  };
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('popupService')], EnterpriseMenuFactory.prototype, "popupService", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('focusService')], EnterpriseMenuFactory.prototype, "focusService", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('ctrlsService')], EnterpriseMenuFactory.prototype, "ctrlsService", void 0);
  EnterpriseMenuFactory = __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Bean)('menuFactory')], EnterpriseMenuFactory);
  return EnterpriseMenuFactory;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.BeanStub);

var EnterpriseMenu = /** @class */function (_super) {
  __extends(EnterpriseMenu, _super);
  function EnterpriseMenu(column, initialSelection, restrictTo) {
    var _this = _super.call(this) || this;
    _this.tabFactories = {};
    _this.includeChecks = {};
    _this.column = column;
    _this.initialSelection = initialSelection;
    _this.tabFactories[EnterpriseMenu.TAB_GENERAL] = _this.createMainPanel.bind(_this);
    _this.tabFactories[EnterpriseMenu.TAB_FILTER] = _this.createFilterPanel.bind(_this);
    _this.tabFactories[EnterpriseMenu.TAB_COLUMNS] = _this.createColumnsPanel.bind(_this);
    _this.includeChecks[EnterpriseMenu.TAB_GENERAL] = function () {
      return true;
    };
    _this.includeChecks[EnterpriseMenu.TAB_FILTER] = function () {
      return column.isFilterAllowed();
    };
    _this.includeChecks[EnterpriseMenu.TAB_COLUMNS] = function () {
      return true;
    };
    _this.restrictTo = restrictTo;
    return _this;
  }
  EnterpriseMenu.prototype.init = function () {
    var _this = this;
    var tabs = this.getTabsToCreate().map(function (name) {
      return _this.createTab(name);
    });
    this.tabbedLayout = new _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.TabbedLayout({
      items: tabs,
      cssClass: 'ag-menu',
      onActiveItemClicked: this.onHidePopup.bind(this),
      onItemClicked: this.onTabItemClicked.bind(this)
    });
    this.createBean(this.tabbedLayout);
    if (this.mainMenuList) {
      this.mainMenuList.setParentComponent(this.tabbedLayout);
    }
  };
  EnterpriseMenu.prototype.getTabsToCreate = function () {
    var _this = this;
    if (this.restrictTo) {
      return this.restrictTo;
    }
    return this.column.getMenuTabs(EnterpriseMenu.TABS_DEFAULT).filter(function (tabName) {
      return _this.isValidMenuTabItem(tabName);
    }).filter(function (tabName) {
      return _this.isNotSuppressed(tabName);
    }).filter(function (tabName) {
      return _this.isModuleLoaded(tabName);
    });
  };
  EnterpriseMenu.prototype.isModuleLoaded = function (menuTabName) {
    if (menuTabName === EnterpriseMenu.TAB_COLUMNS) {
      return _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.isRegistered(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.ColumnToolPanelModule);
    }
    return true;
  };
  EnterpriseMenu.prototype.isValidMenuTabItem = function (menuTabName) {
    var isValid = true;
    var itemsToConsider = EnterpriseMenu.TABS_DEFAULT;
    if (this.restrictTo != null) {
      isValid = this.restrictTo.indexOf(menuTabName) > -1;
      itemsToConsider = this.restrictTo;
    }
    isValid = isValid && EnterpriseMenu.TABS_DEFAULT.indexOf(menuTabName) > -1;
    if (!isValid) {
      console.warn("Trying to render an invalid menu item '" + menuTabName + "'. Check that your 'menuTabs' contains one of [" + itemsToConsider + "]");
    }
    return isValid;
  };
  EnterpriseMenu.prototype.isNotSuppressed = function (menuTabName) {
    return this.includeChecks[menuTabName]();
  };
  EnterpriseMenu.prototype.createTab = function (name) {
    return this.tabFactories[name]();
  };
  EnterpriseMenu.prototype.showTabBasedOnPreviousSelection = function () {
    // show the tab the user was on last time they had a menu open
    this.showTab(this.initialSelection);
  };
  EnterpriseMenu.prototype.showTab = function (toShow) {
    if (this.tabItemColumns && toShow === EnterpriseMenu.TAB_COLUMNS) {
      this.tabbedLayout.showItem(this.tabItemColumns);
    } else if (this.tabItemFilter && toShow === EnterpriseMenu.TAB_FILTER) {
      this.tabbedLayout.showItem(this.tabItemFilter);
    } else if (this.tabItemGeneral && toShow === EnterpriseMenu.TAB_GENERAL) {
      this.tabbedLayout.showItem(this.tabItemGeneral);
    } else {
      this.tabbedLayout.showFirstItem();
    }
  };
  EnterpriseMenu.prototype.onTabItemClicked = function (event) {
    var key = null;
    switch (event.item) {
      case this.tabItemColumns:
        key = EnterpriseMenu.TAB_COLUMNS;
        break;
      case this.tabItemFilter:
        key = EnterpriseMenu.TAB_FILTER;
        break;
      case this.tabItemGeneral:
        key = EnterpriseMenu.TAB_GENERAL;
        break;
    }
    if (key) {
      this.activateTab(key);
    }
  };
  EnterpriseMenu.prototype.activateTab = function (tab) {
    var ev = {
      type: EnterpriseMenu.EVENT_TAB_SELECTED,
      key: tab
    };
    this.dispatchEvent(ev);
  };
  EnterpriseMenu.prototype.getMenuItems = function () {
    var defaultMenuOptions = this.getDefaultMenuOptions();
    var result;
    var userFunc = this.gridOptionsWrapper.getMainMenuItemsFunc();
    if (userFunc) {
      result = userFunc({
        column: this.column,
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        context: this.gridOptionsWrapper.getContext(),
        defaultItems: defaultMenuOptions
      });
    } else {
      result = defaultMenuOptions;
    }
    // GUI looks weird when two separators are side by side. this can happen accidentally
    // if we remove items from the menu then two separators can edit up adjacent.
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.removeRepeatsFromArray(result, EnterpriseMenu.MENU_ITEM_SEPARATOR);
    return result;
  };
  EnterpriseMenu.prototype.getDefaultMenuOptions = function () {
    var result = [];
    var allowPinning = !this.column.getColDef().lockPinned;
    var rowGroupCount = this.columnModel.getRowGroupColumns().length;
    var doingGrouping = rowGroupCount > 0;
    var groupedByThisColumn = this.columnModel.getRowGroupColumns().indexOf(this.column) >= 0;
    var allowValue = this.column.isAllowValue();
    var allowRowGroup = this.column.isAllowRowGroup();
    var isPrimary = this.column.isPrimary();
    var pivotModeOn = this.columnModel.isPivotMode();
    var isInMemoryRowModel = this.rowModel.getType() === _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
    var usingTreeData = this.gridOptionsWrapper.isTreeData();
    var allowValueAgg =
    // if primary, then only allow aggValue if grouping and it's a value columns
    isPrimary && doingGrouping && allowValue
    // secondary columns can always have aggValue, as it means it's a pivot value column
    || !isPrimary;
    if (allowPinning) {
      result.push('pinSubMenu');
    }
    if (allowValueAgg) {
      result.push('valueAggSubMenu');
    }
    if (allowPinning || allowValueAgg) {
      result.push(EnterpriseMenu.MENU_ITEM_SEPARATOR);
    }
    result.push('autoSizeThis');
    result.push('autoSizeAll');
    result.push(EnterpriseMenu.MENU_ITEM_SEPARATOR);
    if (allowRowGroup && this.column.isPrimary()) {
      if (groupedByThisColumn) {
        result.push('rowUnGroup');
      } else {
        result.push('rowGroup');
      }
    }
    result.push(EnterpriseMenu.MENU_ITEM_SEPARATOR);
    result.push('resetColumns');
    // only add grouping expand/collapse if grouping in the InMemoryRowModel
    // if pivoting, we only have expandable groups if grouping by 2 or more columns
    // as the lowest level group is not expandable while pivoting.
    // if not pivoting, then any active row group can be expanded.
    var allowExpandAndContract = isInMemoryRowModel && (usingTreeData || rowGroupCount > (pivotModeOn ? 1 : 0));
    if (allowExpandAndContract) {
      result.push('expandAll');
      result.push('contractAll');
    }
    return result;
  };
  EnterpriseMenu.prototype.createMainPanel = function () {
    this.mainMenuList = this.createManagedBean(new _menuList__WEBPACK_IMPORTED_MODULE_1__.MenuList());
    var menuItems = this.getMenuItems();
    var menuItemsMapped = this.menuItemMapper.mapWithStockItems(menuItems, this.column);
    this.mainMenuList.addMenuItems(menuItemsMapped);
    this.mainMenuList.addEventListener(_menuItemComponent__WEBPACK_IMPORTED_MODULE_2__.MenuItemComponent.EVENT_MENU_ITEM_SELECTED, this.onHidePopup.bind(this));
    this.tabItemGeneral = {
      title: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('menu', this.gridOptionsWrapper, this.column),
      titleLabel: EnterpriseMenu.TAB_GENERAL.replace('MenuTab', ''),
      bodyPromise: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.AgPromise.resolve(this.mainMenuList.getGui()),
      name: EnterpriseMenu.TAB_GENERAL
    };
    return this.tabItemGeneral;
  };
  EnterpriseMenu.prototype.onHidePopup = function () {
    this.hidePopupFunc();
    // this method only gets called when the menu was closed by selection an option
    // in this case we highlight the cell that was previously highlighted
    var focusedCell = this.focusService.getFocusedCell();
    if (focusedCell) {
      var rowIndex = focusedCell.rowIndex,
        rowPinned = focusedCell.rowPinned,
        column = focusedCell.column;
      this.focusService.setFocusedCell(rowIndex, column, rowPinned, true);
    }
  };
  EnterpriseMenu.prototype.createFilterPanel = function () {
    var filterWrapper = this.filterManager.getOrCreateFilterWrapper(this.column, 'COLUMN_MENU');
    var afterFilterAttachedCallback = function (params) {
      if (!filterWrapper.filterPromise) {
        return;
      }
      // slightly odd block this - this promise will always have been resolved by the time it gets here, so won't be
      // async (_unless_ in react or similar, but if so why not encountered before now?).
      // I'd suggest a future improvement would be to remove/replace this promise as this block just wont work if it is
      // async and is confusing if you don't have this context
      filterWrapper.filterPromise.then(function (filter) {
        if (filter && filter.afterGuiAttached) {
          filter.afterGuiAttached(params);
        }
      });
    };
    this.tabItemFilter = {
      title: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('filter', this.gridOptionsWrapper, this.column),
      titleLabel: EnterpriseMenu.TAB_FILTER.replace('MenuTab', ''),
      bodyPromise: filterWrapper.guiPromise,
      afterAttachedCallback: afterFilterAttachedCallback,
      name: EnterpriseMenu.TAB_FILTER
    };
    return this.tabItemFilter;
  };
  EnterpriseMenu.prototype.createColumnsPanel = function () {
    var eWrapperDiv = document.createElement('div');
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.addCssClass(eWrapperDiv, 'ag-menu-column-select-wrapper');
    this.columnSelectPanel = this.createManagedBean(new _ag_grid_enterprise_column_tool_panel__WEBPACK_IMPORTED_MODULE_3__.PrimaryColsPanel());
    var columnsMenuParams = this.column.getColDef().columnsMenuParams;
    if (!columnsMenuParams) {
      columnsMenuParams = {};
    }
    this.columnSelectPanel.init(false, {
      suppressColumnMove: false,
      suppressValues: false,
      suppressPivots: false,
      suppressRowGroups: false,
      suppressPivotMode: false,
      contractColumnSelection: !!columnsMenuParams.contractColumnSelection,
      suppressColumnExpandAll: !!columnsMenuParams.suppressColumnExpandAll,
      suppressColumnFilter: !!columnsMenuParams.suppressColumnFilter,
      suppressColumnSelectAll: !!columnsMenuParams.suppressColumnSelectAll,
      suppressSyncLayoutWithGrid: !!columnsMenuParams.suppressSyncLayoutWithGrid,
      api: this.gridApi,
      columnApi: this.columnApi
    }, 'columnMenu');
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.addCssClass(this.columnSelectPanel.getGui(), 'ag-menu-column-select');
    eWrapperDiv.appendChild(this.columnSelectPanel.getGui());
    this.tabItemColumns = {
      title: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('columns', this.gridOptionsWrapper, this.column),
      titleLabel: EnterpriseMenu.TAB_COLUMNS.replace('MenuTab', ''),
      bodyPromise: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.AgPromise.resolve(eWrapperDiv),
      name: EnterpriseMenu.TAB_COLUMNS
    };
    return this.tabItemColumns;
  };
  EnterpriseMenu.prototype.afterGuiAttached = function (params) {
    var container = params.container,
      hidePopup = params.hidePopup;
    this.tabbedLayout.setAfterAttachedParams({
      container: container,
      hidePopup: hidePopup
    });
    if (hidePopup) {
      this.hidePopupFunc = hidePopup;
      this.addDestroyFunc(hidePopup);
    }
  };
  EnterpriseMenu.prototype.getGui = function () {
    return this.tabbedLayout.getGui();
  };
  EnterpriseMenu.EVENT_TAB_SELECTED = 'tabSelected';
  EnterpriseMenu.TAB_FILTER = 'filterMenuTab';
  EnterpriseMenu.TAB_GENERAL = 'generalMenuTab';
  EnterpriseMenu.TAB_COLUMNS = 'columnsMenuTab';
  EnterpriseMenu.TABS_DEFAULT = [EnterpriseMenu.TAB_GENERAL, EnterpriseMenu.TAB_FILTER, EnterpriseMenu.TAB_COLUMNS];
  EnterpriseMenu.MENU_ITEM_SEPARATOR = 'separator';
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')], EnterpriseMenu.prototype, "columnModel", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('filterManager')], EnterpriseMenu.prototype, "filterManager", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('gridApi')], EnterpriseMenu.prototype, "gridApi", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnApi')], EnterpriseMenu.prototype, "columnApi", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('menuItemMapper')], EnterpriseMenu.prototype, "menuItemMapper", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowModel')], EnterpriseMenu.prototype, "rowModel", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('focusService')], EnterpriseMenu.prototype, "focusService", void 0);
  __decorate([_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.PostConstruct], EnterpriseMenu.prototype, "init", null);
  return EnterpriseMenu;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.BeanStub);


/***/ }),

/***/ 652012:
/*!**********************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/menu/dist/es6/menu/menuItemComponent.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MenuItemComponent": () => (/* binding */ MenuItemComponent)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
/* harmony import */ var _menuList__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./menuList */ 901675);
/* harmony import */ var _menuPanel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./menuPanel */ 855647);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};



var MenuItemComponent = /** @class */function (_super) {
  __extends(MenuItemComponent, _super);
  function MenuItemComponent(params) {
    var _this = _super.call(this) || this;
    _this.params = params;
    _this.isActive = false;
    _this.subMenuIsOpen = false;
    _this.setTemplate( /* html */"<div class=\"" + _this.getClassName() + "\" tabindex=\"-1\" role=\"treeitem\"></div>");
    return _this;
  }
  MenuItemComponent.prototype.init = function () {
    var _this = this;
    this.addIcon();
    this.addName();
    this.addShortcut();
    this.addSubMenu();
    this.addTooltip();
    var eGui = this.getGui();
    if (this.params.disabled) {
      this.addCssClass(this.getClassName('disabled'));
      _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.setAriaDisabled(eGui, true);
    } else {
      this.addGuiEventListener('click', function (e) {
        return _this.onItemSelected(e);
      });
      this.addGuiEventListener('keydown', function (e) {
        if (e.keyCode === _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.KeyCode.ENTER || e.keyCode === _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.KeyCode.SPACE) {
          e.preventDefault();
          _this.onItemSelected(e);
        }
      });
      this.addGuiEventListener('mouseenter', function () {
        return _this.onMouseEnter();
      });
      this.addGuiEventListener('mouseleave', function () {
        return _this.onMouseLeave();
      });
    }
    if (this.params.cssClasses) {
      this.params.cssClasses.forEach(function (it) {
        return _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.addCssClass(eGui, it);
      });
    }
  };
  MenuItemComponent.prototype.isDisabled = function () {
    return !!this.params.disabled;
  };
  MenuItemComponent.prototype.openSubMenu = function (activateFirstItem) {
    var _this = this;
    if (activateFirstItem === void 0) {
      activateFirstItem = false;
    }
    this.closeSubMenu();
    if (!this.params.subMenu) {
      return;
    }
    var ePopup = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.loadTemplate( /* html */"<div class=\"ag-menu\" role=\"presentation\"></div>");
    var destroySubMenu;
    if (this.params.subMenu instanceof Array) {
      var currentLevel = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.getAriaLevel(this.getGui());
      var nextLevel = isNaN(currentLevel) ? 1 : currentLevel + 1;
      var childMenu_1 = this.createBean(new _menuList__WEBPACK_IMPORTED_MODULE_1__.MenuList(nextLevel));
      childMenu_1.setParentComponent(this);
      childMenu_1.addMenuItems(this.params.subMenu);
      ePopup.appendChild(childMenu_1.getGui());
      // bubble menu item selected events
      this.addManagedListener(childMenu_1, MenuItemComponent.EVENT_MENU_ITEM_SELECTED, function (e) {
        return _this.dispatchEvent(e);
      });
      childMenu_1.addGuiEventListener('mouseenter', function () {
        return _this.cancelDeactivate();
      });
      destroySubMenu = function () {
        return _this.destroyBean(childMenu_1);
      };
      if (activateFirstItem) {
        setTimeout(function () {
          return childMenu_1.activateFirstItem();
        }, 0);
      }
    } else {
      var subMenu_1 = this.params.subMenu;
      var menuPanel = this.createBean(new _menuPanel__WEBPACK_IMPORTED_MODULE_2__.MenuPanel(subMenu_1));
      menuPanel.setParentComponent(this);
      var subMenuGui_1 = menuPanel.getGui();
      var mouseEvent_1 = 'mouseenter';
      var mouseEnterListener_1 = function () {
        return _this.cancelDeactivate();
      };
      subMenuGui_1.addEventListener(mouseEvent_1, mouseEnterListener_1);
      destroySubMenu = function () {
        return subMenuGui_1.removeEventListener(mouseEvent_1, mouseEnterListener_1);
      };
      ePopup.appendChild(subMenuGui_1);
      if (subMenu_1.afterGuiAttached) {
        setTimeout(function () {
          return subMenu_1.afterGuiAttached();
        }, 0);
      }
    }
    var eGui = this.getGui();
    var positionCallback = this.popupService.positionPopupForMenu.bind(this.popupService, {
      eventSource: eGui,
      ePopup: ePopup
    });
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    var addPopupRes = this.popupService.addPopup({
      modal: true,
      eChild: ePopup,
      positionCallback: positionCallback,
      anchorToElement: eGui,
      ariaLabel: translate('ariaLabelSubMenu', 'SubMenu')
    });
    this.subMenuIsOpen = true;
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.setAriaExpanded(eGui, true);
    this.hideSubMenu = function () {
      if (addPopupRes) {
        addPopupRes.hideFunc();
      }
      _this.subMenuIsOpen = false;
      _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.setAriaExpanded(eGui, false);
      destroySubMenu();
    };
  };
  MenuItemComponent.prototype.closeSubMenu = function () {
    if (!this.hideSubMenu) {
      return;
    }
    this.hideSubMenu();
    this.hideSubMenu = null;
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.setAriaExpanded(this.getGui(), false);
  };
  MenuItemComponent.prototype.isSubMenuOpen = function () {
    return this.subMenuIsOpen;
  };
  MenuItemComponent.prototype.activate = function (openSubMenu) {
    var _this = this;
    this.cancelActivate();
    if (this.params.disabled) {
      return;
    }
    this.isActive = true;
    this.addCssClass(this.getClassName('active'));
    this.getGui().focus();
    if (openSubMenu && this.params.subMenu) {
      window.setTimeout(function () {
        if (_this.isAlive() && _this.isActive) {
          _this.openSubMenu();
        }
      }, 300);
    }
    this.onItemActivated();
  };
  MenuItemComponent.prototype.deactivate = function () {
    this.cancelDeactivate();
    this.removeCssClass(this.getClassName('active'));
    this.isActive = false;
    if (this.subMenuIsOpen) {
      this.hideSubMenu();
    }
  };
  MenuItemComponent.prototype.addIcon = function () {
    if (!this.params.checked && !this.params.icon && this.params.isCompact) {
      return;
    }
    var icon = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.loadTemplate( /* html */"<span ref=\"eIcon\" class=\"" + this.getClassName('part') + " " + this.getClassName('icon') + "\" role=\"presentation\"></span>");
    if (this.params.checked) {
      icon.appendChild(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('check', this.gridOptionsWrapper));
    } else if (this.params.icon) {
      if (_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.isNodeOrElement(this.params.icon)) {
        icon.appendChild(this.params.icon);
      } else if (typeof this.params.icon === 'string') {
        icon.innerHTML = this.params.icon;
      } else {
        console.warn('AG Grid: menu item icon must be DOM node or string');
      }
    }
    this.getGui().appendChild(icon);
  };
  MenuItemComponent.prototype.addName = function () {
    if (!this.params.name && this.params.isCompact) {
      return;
    }
    var name = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.loadTemplate( /* html */"<span ref=\"eName\" class=\"" + this.getClassName('part') + " " + this.getClassName('text') + "\">" + (this.params.name || '') + "</span>");
    this.getGui().appendChild(name);
  };
  MenuItemComponent.prototype.addTooltip = function () {
    if (!this.params.tooltip) {
      return;
    }
    this.tooltip = this.params.tooltip;
    if (this.gridOptionsWrapper.isEnableBrowserTooltips()) {
      this.getGui().setAttribute('title', this.tooltip);
    } else {
      this.createManagedBean(new _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.CustomTooltipFeature(this));
    }
  };
  MenuItemComponent.prototype.getTooltipParams = function () {
    return {
      location: 'menu',
      value: this.tooltip
    };
  };
  MenuItemComponent.prototype.addShortcut = function () {
    if (!this.params.shortcut && this.params.isCompact) {
      return;
    }
    var shortcut = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.loadTemplate( /* html */"<span ref=\"eShortcut\" class=\"" + this.getClassName('part') + " " + this.getClassName('shortcut') + "\">" + (this.params.shortcut || '') + "</span>");
    this.getGui().appendChild(shortcut);
  };
  MenuItemComponent.prototype.addSubMenu = function () {
    if (!this.params.subMenu && this.params.isCompact) {
      return;
    }
    var pointer = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.loadTemplate( /* html */"<span ref=\"ePopupPointer\" class=\"" + this.getClassName('part') + " " + this.getClassName('popup-pointer') + "\"></span>");
    var eGui = this.getGui();
    if (this.params.subMenu) {
      var iconName = this.gridOptionsWrapper.isEnableRtl() ? 'smallLeft' : 'smallRight';
      _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.setAriaExpanded(eGui, false);
      pointer.appendChild(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan(iconName, this.gridOptionsWrapper));
    }
    eGui.appendChild(pointer);
  };
  MenuItemComponent.prototype.onItemSelected = function (event) {
    if (this.params.action) {
      this.params.action();
    } else {
      this.openSubMenu(event && event.type === 'keydown');
    }
    if (this.params.subMenu && !this.params.action) {
      return;
    }
    var e = {
      type: MenuItemComponent.EVENT_MENU_ITEM_SELECTED,
      action: this.params.action,
      checked: this.params.checked,
      cssClasses: this.params.cssClasses,
      disabled: this.params.disabled,
      icon: this.params.icon,
      name: this.params.name,
      shortcut: this.params.shortcut,
      subMenu: this.params.subMenu,
      tooltip: this.params.tooltip,
      event: event
    };
    this.dispatchEvent(e);
  };
  MenuItemComponent.prototype.onItemActivated = function () {
    var event = {
      type: MenuItemComponent.EVENT_MENU_ITEM_ACTIVATED,
      menuItem: this
    };
    this.dispatchEvent(event);
  };
  MenuItemComponent.prototype.cancelActivate = function () {
    if (this.activateTimeoutId) {
      window.clearTimeout(this.activateTimeoutId);
      this.activateTimeoutId = 0;
    }
  };
  MenuItemComponent.prototype.cancelDeactivate = function () {
    if (this.deactivateTimeoutId) {
      window.clearTimeout(this.deactivateTimeoutId);
      this.deactivateTimeoutId = 0;
    }
  };
  MenuItemComponent.prototype.onMouseEnter = function () {
    var _this = this;
    this.cancelDeactivate();
    if (this.params.isAnotherSubMenuOpen()) {
      // wait to see if the user enters the open sub-menu
      this.activateTimeoutId = window.setTimeout(function () {
        return _this.activate(true);
      }, MenuItemComponent.ACTIVATION_DELAY);
    } else {
      // activate immediately
      this.activate(true);
    }
  };
  MenuItemComponent.prototype.onMouseLeave = function () {
    var _this = this;
    this.cancelActivate();
    if (this.isSubMenuOpen()) {
      // wait to see if the user enters the sub-menu
      this.deactivateTimeoutId = window.setTimeout(function () {
        return _this.deactivate();
      }, MenuItemComponent.ACTIVATION_DELAY);
    } else {
      // de-activate immediately
      this.deactivate();
    }
  };
  MenuItemComponent.prototype.getClassName = function (suffix) {
    var prefix = this.params.isCompact ? 'ag-compact-menu-option' : 'ag-menu-option';
    return suffix ? prefix + "-" + suffix : prefix;
  };
  MenuItemComponent.EVENT_MENU_ITEM_SELECTED = 'menuItemSelected';
  MenuItemComponent.EVENT_MENU_ITEM_ACTIVATED = 'menuItemActivated';
  MenuItemComponent.ACTIVATION_DELAY = 80;
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('popupService')], MenuItemComponent.prototype, "popupService", void 0);
  __decorate([_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.PostConstruct], MenuItemComponent.prototype, "init", null);
  return MenuItemComponent;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Component);


/***/ }),

/***/ 980733:
/*!*******************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/menu/dist/es6/menu/menuItemMapper.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MenuItemMapper": () => (/* binding */ MenuItemMapper)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var MenuItemMapper = /** @class */function (_super) {
  __extends(MenuItemMapper, _super);
  function MenuItemMapper() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  MenuItemMapper.prototype.mapWithStockItems = function (originalList, column) {
    var _this = this;
    if (!originalList) {
      return [];
    }
    var resultList = [];
    originalList.forEach(function (menuItemOrString) {
      var result;
      if (typeof menuItemOrString === 'string') {
        result = _this.getStockMenuItem(menuItemOrString, column);
      } else {
        result = menuItemOrString;
      }
      // if no mapping, can happen when module is not loaded but user tries to use module anyway
      if (!result) {
        return;
      }
      var resultDef = result;
      var subMenu = resultDef.subMenu;
      if (subMenu && subMenu instanceof Array) {
        resultDef.subMenu = _this.mapWithStockItems(resultDef.subMenu, column);
      }
      if (result != null) {
        resultList.push(result);
      }
    });
    return resultList;
  };
  MenuItemMapper.prototype.getStockMenuItem = function (key, column) {
    var _this = this;
    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
    var skipHeaderOnAutoSize = this.gridOptionsWrapper.isSkipHeaderOnAutoSize();
    switch (key) {
      case 'pinSubMenu':
        return {
          name: localeTextFunc('pinColumn', 'Pin Column'),
          icon: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('menuPin', this.gridOptionsWrapper, null),
          subMenu: ['pinLeft', 'pinRight', 'clearPinned']
        };
      case 'pinLeft':
        return {
          name: localeTextFunc('pinLeft', 'Pin Left'),
          action: function () {
            return _this.columnModel.setColumnPinned(column, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Constants.PINNED_LEFT, "contextMenu");
          },
          checked: !!column && column.isPinnedLeft()
        };
      case 'pinRight':
        return {
          name: localeTextFunc('pinRight', 'Pin Right'),
          action: function () {
            return _this.columnModel.setColumnPinned(column, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Constants.PINNED_RIGHT, "contextMenu");
          },
          checked: !!column && column.isPinnedRight()
        };
      case 'clearPinned':
        return {
          name: localeTextFunc('noPin', 'No Pin'),
          action: function () {
            return _this.columnModel.setColumnPinned(column, null, "contextMenu");
          },
          checked: !!column && !column.isPinned()
        };
      case 'valueAggSubMenu':
        if (_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.assertRegistered(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.RowGroupingModule, 'Aggregation from Menu')) {
          return {
            name: localeTextFunc('valueAggregation', 'Value Aggregation'),
            icon: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('menuValue', this.gridOptionsWrapper, null),
            subMenu: this.createAggregationSubMenu(column)
          };
        } else {
          return null;
        }
      case 'autoSizeThis':
        return {
          name: localeTextFunc('autosizeThiscolumn', 'Autosize This Column'),
          action: function () {
            return _this.columnModel.autoSizeColumn(column, skipHeaderOnAutoSize, "contextMenu");
          }
        };
      case 'autoSizeAll':
        return {
          name: localeTextFunc('autosizeAllColumns', 'Autosize All Columns'),
          action: function () {
            return _this.columnModel.autoSizeAllColumns(skipHeaderOnAutoSize, "contextMenu");
          }
        };
      case 'rowGroup':
        return {
          name: localeTextFunc('groupBy', 'Group by') + ' ' + _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.escapeString(this.columnModel.getDisplayNameForColumn(column, 'header')),
          action: function () {
            return _this.columnModel.addRowGroupColumn(column, "contextMenu");
          },
          icon: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('menuAddRowGroup', this.gridOptionsWrapper, null)
        };
      case 'rowUnGroup':
        return {
          name: localeTextFunc('ungroupBy', 'Un-Group by') + ' ' + _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.escapeString(this.columnModel.getDisplayNameForColumn(column, 'header')),
          action: function () {
            return _this.columnModel.removeRowGroupColumn(column, "contextMenu");
          },
          icon: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('menuRemoveRowGroup', this.gridOptionsWrapper, null)
        };
      case 'resetColumns':
        return {
          name: localeTextFunc('resetColumns', 'Reset Columns'),
          action: function () {
            return _this.columnModel.resetColumnState("contextMenu");
          }
        };
      case 'expandAll':
        return {
          name: localeTextFunc('expandAll', 'Expand All'),
          action: function () {
            return _this.gridApi.expandAll();
          }
        };
      case 'contractAll':
        return {
          name: localeTextFunc('collapseAll', 'Collapse All'),
          action: function () {
            return _this.gridApi.collapseAll();
          }
        };
      case 'copy':
        if (_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.assertRegistered(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.ClipboardModule, 'Copy from Menu')) {
          return {
            name: localeTextFunc('copy', 'Copy'),
            shortcut: localeTextFunc('ctrlC', 'Ctrl+C'),
            icon: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('clipboardCopy', this.gridOptionsWrapper, null),
            action: function () {
              return _this.clipboardService.copyToClipboard(false);
            }
          };
        } else {
          return null;
        }
      case 'copyWithHeaders':
        if (_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.assertRegistered(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.ClipboardModule, 'Copy with Headers from Menu')) {
          return {
            name: localeTextFunc('copyWithHeaders', 'Copy with Headers'),
            // shortcut: localeTextFunc('ctrlC','Ctrl+C'),
            icon: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('clipboardCopy', this.gridOptionsWrapper, null),
            action: function () {
              return _this.clipboardService.copyToClipboard(true);
            }
          };
        } else {
          return null;
        }
      case 'paste':
        if (_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.assertRegistered(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.ClipboardModule, 'Paste from Clipboard')) {
          return {
            name: localeTextFunc('paste', 'Paste'),
            shortcut: localeTextFunc('ctrlV', 'Ctrl+V'),
            disabled: true,
            icon: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('clipboardPaste', this.gridOptionsWrapper, null),
            action: function () {
              return _this.clipboardService.pasteFromClipboard();
            }
          };
        } else {
          return null;
        }
      case 'export':
        var exportSubMenuItems = [];
        var csvModuleLoaded = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.isRegistered(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.CsvExportModule);
        var excelModuleLoaded = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.isRegistered(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.ExcelExportModule);
        if (!this.gridOptionsWrapper.isSuppressCsvExport() && csvModuleLoaded) {
          exportSubMenuItems.push('csvExport');
        }
        if (!this.gridOptionsWrapper.isSuppressExcelExport() && excelModuleLoaded) {
          exportSubMenuItems.push('excelExport');
        }
        return {
          name: localeTextFunc('export', 'Export'),
          subMenu: exportSubMenuItems,
          icon: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('save', this.gridOptionsWrapper, null)
        };
      case 'csvExport':
        return {
          name: localeTextFunc('csvExport', 'CSV Export'),
          icon: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('csvExport', this.gridOptionsWrapper, null),
          action: function () {
            return _this.gridApi.exportDataAsCsv({});
          }
        };
      case 'excelExport':
        return {
          name: localeTextFunc('excelExport', 'Excel Export'),
          icon: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('excelExport', this.gridOptionsWrapper, null),
          action: function () {
            return _this.gridApi.exportDataAsExcel();
          }
        };
      case 'separator':
        return 'separator';
      default:
        var chartMenuItem = this.getChartItems(key);
        if (chartMenuItem) {
          return chartMenuItem;
        } else {
          console.warn("AG Grid: unknown menu item type " + key);
          return null;
        }
    }
  };
  MenuItemMapper.prototype.getChartItems = function (key) {
    var _this = this;
    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
    var pivotChartMenuItem = function (localeKey, defaultText, chartType) {
      return {
        name: localeTextFunc(localeKey, defaultText),
        action: function () {
          return _this.chartService.createPivotChart({
            chartType: chartType
          });
        }
      };
    };
    var rangeChartMenuItem = function (localeKey, defaultText, chartType) {
      return {
        name: localeTextFunc(localeKey, defaultText),
        action: function () {
          return _this.chartService.createChartFromCurrentRange(chartType);
        }
      };
    };
    switch (key) {
      // case 'pivotChartAndPivotMode':
      //     return {
      //         name: localeTextFunc('pivotChartAndPivotMode', 'Pivot Chart & Pivot Mode&lrm;'),
      //         action: () => this.chartService.pivotChart(ChartType.GroupedColumn),
      //         icon: _.createIconNoSpan('chart', this.gridOptionsWrapper, null)
      //     };
      case 'pivotChart':
        return {
          name: localeTextFunc('pivotChart', 'Pivot Chart'),
          subMenu: ['pivotColumnChart', 'pivotBarChart', 'pivotPieChart', 'pivotLineChart', 'pivotXYChart', 'pivotAreaChart'],
          icon: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('chart', this.gridOptionsWrapper, null)
        };
      case 'chartRange':
        return {
          name: localeTextFunc('chartRange', 'Chart Range'),
          subMenu: ['rangeColumnChart', 'rangeBarChart', 'rangePieChart', 'rangeLineChart', 'rangeXYChart', 'rangeAreaChart', 'rangeHistogramChart'],
          icon: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('chart', this.gridOptionsWrapper, null)
        };
      case 'pivotColumnChart':
        return {
          name: localeTextFunc('columnChart', 'Column'),
          subMenu: ['pivotGroupedColumn', 'pivotStackedColumn', 'pivotNormalizedColumn']
        };
      case 'pivotGroupedColumn':
        return pivotChartMenuItem('groupedColumn', 'Grouped&lrm;', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ChartType.GroupedColumn);
      case 'pivotStackedColumn':
        return pivotChartMenuItem('stackedColumn', 'Stacked&lrm;', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ChartType.StackedColumn);
      case 'pivotNormalizedColumn':
        return pivotChartMenuItem('normalizedColumn', '100% Stacked&lrm;', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ChartType.NormalizedColumn);
      case 'rangeColumnChart':
        return {
          name: localeTextFunc('columnChart', 'Column'),
          subMenu: ['rangeGroupedColumn', 'rangeStackedColumn', 'rangeNormalizedColumn']
        };
      case 'rangeGroupedColumn':
        return rangeChartMenuItem('groupedColumn', 'Grouped&lrm;', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ChartType.GroupedColumn);
      case 'rangeStackedColumn':
        return rangeChartMenuItem('stackedColumn', 'Stacked&lrm;', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ChartType.StackedColumn);
      case 'rangeNormalizedColumn':
        return rangeChartMenuItem('normalizedColumn', '100% Stacked&lrm;', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ChartType.NormalizedColumn);
      case 'pivotBarChart':
        return {
          name: localeTextFunc('barChart', 'Bar'),
          subMenu: ['pivotGroupedBar', 'pivotStackedBar', 'pivotNormalizedBar']
        };
      case 'pivotGroupedBar':
        return pivotChartMenuItem('groupedBar', 'Grouped&lrm;', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ChartType.GroupedBar);
      case 'pivotStackedBar':
        return pivotChartMenuItem('stackedBar', 'Stacked&lrm;', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ChartType.StackedBar);
      case 'pivotNormalizedBar':
        return pivotChartMenuItem('normalizedBar', '100% Stacked&lrm;', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ChartType.NormalizedBar);
      case 'rangeBarChart':
        return {
          name: localeTextFunc('barChart', 'Bar'),
          subMenu: ['rangeGroupedBar', 'rangeStackedBar', 'rangeNormalizedBar']
        };
      case 'rangeGroupedBar':
        return rangeChartMenuItem('groupedBar', 'Grouped&lrm;', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ChartType.GroupedBar);
      case 'rangeStackedBar':
        return rangeChartMenuItem('stackedBar', 'Stacked&lrm;', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ChartType.StackedBar);
      case 'rangeNormalizedBar':
        return rangeChartMenuItem('normalizedBar', '100% Stacked&lrm;', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ChartType.NormalizedBar);
      case 'pivotPieChart':
        return {
          name: localeTextFunc('pieChart', 'Pie'),
          subMenu: ['pivotPie', 'pivotDoughnut']
        };
      case 'pivotPie':
        return pivotChartMenuItem('pie', 'Pie&lrm;', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ChartType.Pie);
      case 'pivotDoughnut':
        return pivotChartMenuItem('doughnut', 'Doughnut&lrm;', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ChartType.Doughnut);
      case 'rangePieChart':
        return {
          name: localeTextFunc('pieChart', 'Pie'),
          subMenu: ['rangePie', 'rangeDoughnut']
        };
      case 'rangePie':
        return rangeChartMenuItem('pie', 'Pie&lrm;', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ChartType.Pie);
      case 'rangeDoughnut':
        return rangeChartMenuItem('doughnut', 'Doughnut&lrm;', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ChartType.Doughnut);
      case 'pivotLineChart':
        return pivotChartMenuItem('line', 'Line&lrm;', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ChartType.Line);
      case 'rangeLineChart':
        return rangeChartMenuItem('line', 'Line&lrm;', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ChartType.Line);
      case 'pivotXYChart':
        return {
          name: localeTextFunc('xyChart', 'X Y (Scatter)'),
          subMenu: ['pivotScatter', 'pivotBubble']
        };
      case 'pivotScatter':
        return pivotChartMenuItem('scatter', 'Scatter&lrm;', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ChartType.Scatter);
      case 'pivotBubble':
        return pivotChartMenuItem('bubble', 'Bubble&lrm;', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ChartType.Bubble);
      case 'rangeXYChart':
        return {
          name: localeTextFunc('xyChart', 'X Y (Scatter)'),
          subMenu: ['rangeScatter', 'rangeBubble']
        };
      case 'rangeScatter':
        return rangeChartMenuItem('scatter', 'Scatter&lrm;', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ChartType.Scatter);
      case 'rangeBubble':
        return rangeChartMenuItem('bubble', 'Bubble&lrm;', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ChartType.Bubble);
      case 'pivotAreaChart':
        return {
          name: localeTextFunc('areaChart', 'Area'),
          subMenu: ['pivotArea', 'pivotStackedArea', 'pivotNormalizedArea']
        };
      case 'pivotArea':
        return pivotChartMenuItem('area', 'Area&lrm;', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ChartType.Area);
      case 'pivotStackedArea':
        return pivotChartMenuItem('stackedArea', 'Stacked&lrm;', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ChartType.StackedArea);
      case 'pivotNormalizedArea':
        return pivotChartMenuItem('normalizedArea', '100% Stacked&lrm;', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ChartType.NormalizedArea);
      case 'rangeAreaChart':
        return {
          name: localeTextFunc('areaChart', 'Area'),
          subMenu: ['rangeArea', 'rangeStackedArea', 'rangeNormalizedArea']
        };
      case 'rangeArea':
        return rangeChartMenuItem('area', 'Area&lrm;', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ChartType.Area);
      case 'rangeStackedArea':
        return rangeChartMenuItem('stackedArea', 'Stacked&lrm;', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ChartType.StackedArea);
      case 'rangeNormalizedArea':
        return rangeChartMenuItem('normalizedArea', '100% Stacked&lrm;', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ChartType.NormalizedArea);
      case 'rangeHistogramChart':
        return rangeChartMenuItem('histogramChart', 'Histogram&lrm;', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ChartType.Histogram);
      default:
        return null;
    }
  };
  MenuItemMapper.prototype.createAggregationSubMenu = function (column) {
    var _this = this;
    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
    var columnIsAlreadyAggValue = column.isValueActive();
    var funcNames = this.aggFuncService.getFuncNames(column);
    var columnToUse;
    if (column.isPrimary()) {
      columnToUse = column;
    } else {
      var pivotValueColumn = column.getColDef().pivotValueColumn;
      columnToUse = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.exists(pivotValueColumn) ? pivotValueColumn : undefined;
    }
    var result = [];
    funcNames.forEach(function (funcName) {
      result.push({
        name: localeTextFunc(funcName, funcName),
        action: function () {
          _this.columnModel.setColumnAggFunc(columnToUse, funcName, "contextMenu");
          _this.columnModel.addValueColumn(columnToUse, "contextMenu");
        },
        checked: columnIsAlreadyAggValue && columnToUse.getAggFunc() === funcName
      });
    });
    return result;
  };
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')], MenuItemMapper.prototype, "columnModel", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('gridApi')], MenuItemMapper.prototype, "gridApi", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Optional)('clipboardService')], MenuItemMapper.prototype, "clipboardService", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Optional)('aggFuncService')], MenuItemMapper.prototype, "aggFuncService", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Optional)('chartService')], MenuItemMapper.prototype, "chartService", void 0);
  MenuItemMapper = __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Bean)('menuItemMapper')], MenuItemMapper);
  return MenuItemMapper;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.BeanStub);


/***/ }),

/***/ 901675:
/*!*************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/menu/dist/es6/menu/menuList.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MenuList": () => (/* binding */ MenuList)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
/* harmony import */ var _menuItemComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./menuItemComponent */ 652012);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var MenuList = /** @class */function (_super) {
  __extends(MenuList, _super);
  function MenuList(level) {
    if (level === void 0) {
      level = 1;
    }
    var _this = _super.call(this, /* html */"<div class=\"ag-menu-list\" role=\"tree\"></div>") || this;
    _this.level = level;
    _this.menuItems = [];
    return _this;
  }
  MenuList.prototype.postConstruct = function () {
    var _this = this;
    this.initialiseTabGuard({
      onTabKeyDown: function (e) {
        return _this.onTabKeyDown(e);
      },
      handleKeyDown: function (e) {
        return _this.handleKeyDown(e);
      }
    });
  };
  MenuList.prototype.onTabKeyDown = function (e) {
    var parent = this.getParentComponent();
    var parentGui = parent && parent.getGui();
    var isManaged = parentGui && _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.containsClass(parentGui, 'ag-focus-managed');
    if (!isManaged) {
      e.preventDefault();
    }
    if (e.shiftKey) {
      this.closeIfIsChild(e);
    }
  };
  MenuList.prototype.handleKeyDown = function (e) {
    switch (e.keyCode) {
      case _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.KeyCode.UP:
      case _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.KeyCode.RIGHT:
      case _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.KeyCode.DOWN:
      case _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.KeyCode.LEFT:
        e.preventDefault();
        this.handleNavKey(e.keyCode);
        break;
      case _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.KeyCode.ESCAPE:
        var topMenu = this.findTopMenu();
        if (topMenu) {
          this.focusService.focusInto(topMenu.getGui());
        }
        break;
    }
  };
  MenuList.prototype.clearActiveItem = function () {
    if (this.activeMenuItem) {
      this.activeMenuItem.deactivate();
      this.activeMenuItem = null;
    }
  };
  MenuList.prototype.addMenuItems = function (menuItems) {
    var _this = this;
    if (menuItems == null) {
      return;
    }
    menuItems.forEach(function (menuItemOrString) {
      if (menuItemOrString === 'separator') {
        _this.addSeparator();
      } else if (typeof menuItemOrString === 'string') {
        console.warn("AG Grid: unrecognised menu item " + menuItemOrString);
      } else {
        _this.addItem(menuItemOrString);
      }
    });
  };
  MenuList.prototype.addItem = function (menuItemDef) {
    var _this = this;
    var menuItem = this.createManagedBean(new _menuItemComponent__WEBPACK_IMPORTED_MODULE_1__.MenuItemComponent(__assign(__assign({}, menuItemDef), {
      isAnotherSubMenuOpen: function () {
        return _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.some(_this.menuItems, function (m) {
          return m.isSubMenuOpen();
        });
      }
    })));
    menuItem.setParentComponent(this);
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.setAriaLevel(menuItem.getGui(), this.level);
    this.menuItems.push(menuItem);
    this.appendChild(menuItem.getGui());
    this.addManagedListener(menuItem, _menuItemComponent__WEBPACK_IMPORTED_MODULE_1__.MenuItemComponent.EVENT_MENU_ITEM_SELECTED, function (event) {
      _this.dispatchEvent(event);
    });
    this.addManagedListener(menuItem, _menuItemComponent__WEBPACK_IMPORTED_MODULE_1__.MenuItemComponent.EVENT_MENU_ITEM_ACTIVATED, function (event) {
      if (_this.activeMenuItem && _this.activeMenuItem !== event.menuItem) {
        _this.activeMenuItem.deactivate();
      }
      _this.activeMenuItem = event.menuItem;
    });
  };
  MenuList.prototype.activateFirstItem = function () {
    var item = this.menuItems.filter(function (currentItem) {
      return !currentItem.isDisabled();
    })[0];
    if (!item) {
      return;
    }
    item.activate();
  };
  MenuList.prototype.addSeparator = function () {
    var separatorHtml = /* html */"\n            <div class=\"ag-menu-separator\" aria-hidden=\"true\">\n                <div class=\"ag-menu-separator-part\"></div>\n                <div class=\"ag-menu-separator-part\"></div>\n                <div class=\"ag-menu-separator-part\"></div>\n                <div class=\"ag-menu-separator-part\"></div>\n            </div>";
    this.appendChild(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.loadTemplate(separatorHtml));
  };
  MenuList.prototype.findTopMenu = function () {
    var parent = this.getParentComponent();
    if (!parent && this instanceof MenuList) {
      return this;
    }
    while (true) {
      var nextParent = parent && parent.getParentComponent && parent.getParentComponent();
      if (!nextParent || !(nextParent instanceof MenuList || nextParent instanceof _menuItemComponent__WEBPACK_IMPORTED_MODULE_1__.MenuItemComponent)) {
        break;
      }
      parent = nextParent;
    }
    return parent instanceof MenuList ? parent : undefined;
  };
  MenuList.prototype.handleNavKey = function (key) {
    switch (key) {
      case _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.KeyCode.UP:
      case _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.KeyCode.DOWN:
        var nextItem = this.findNextItem(key === _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.KeyCode.UP);
        if (nextItem && nextItem !== this.activeMenuItem) {
          nextItem.activate();
        }
        return;
    }
    var left = this.gridOptionsWrapper.isEnableRtl() ? _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.KeyCode.RIGHT : _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.KeyCode.LEFT;
    if (key === left) {
      this.closeIfIsChild();
    } else {
      this.openChild();
    }
  };
  MenuList.prototype.closeIfIsChild = function (e) {
    var parentItem = this.getParentComponent();
    if (parentItem && parentItem instanceof _menuItemComponent__WEBPACK_IMPORTED_MODULE_1__.MenuItemComponent) {
      if (e) {
        e.preventDefault();
      }
      parentItem.closeSubMenu();
      parentItem.getGui().focus();
    }
  };
  MenuList.prototype.openChild = function () {
    if (this.activeMenuItem) {
      this.activeMenuItem.openSubMenu(true);
    }
  };
  MenuList.prototype.findNextItem = function (up) {
    var items = this.menuItems.filter(function (item) {
      return !item.isDisabled();
    });
    if (!items.length) {
      return;
    }
    if (!this.activeMenuItem) {
      return up ? _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.last(items) : items[0];
    }
    if (up) {
      items.reverse();
    }
    var nextItem;
    var foundCurrent = false;
    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      if (!foundCurrent) {
        if (item === this.activeMenuItem) {
          foundCurrent = true;
        }
        continue;
      }
      nextItem = item;
      break;
    }
    return nextItem || this.activeMenuItem;
  };
  MenuList.prototype.destroy = function () {
    this.clearActiveItem();
    _super.prototype.destroy.call(this);
  };
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('focusService')], MenuList.prototype, "focusService", void 0);
  __decorate([_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.PostConstruct], MenuList.prototype, "postConstruct", null);
  return MenuList;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.TabGuardComp);


/***/ }),

/***/ 855647:
/*!**************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/menu/dist/es6/menu/menuPanel.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MenuPanel": () => (/* binding */ MenuPanel)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var MenuPanel = /** @class */function (_super) {
  __extends(MenuPanel, _super);
  function MenuPanel(wrappedComponent) {
    var _this = _super.call(this) || this;
    _this.wrappedComponent = wrappedComponent;
    _this.setTemplateFromElement(wrappedComponent.getGui());
    return _this;
  }
  MenuPanel.prototype.postConstruct = function () {
    var _this = this;
    this.initialiseTabGuard({
      onTabKeyDown: function (e) {
        return _this.onTabKeyDown(e);
      },
      handleKeyDown: function (e) {
        return _this.handleKeyDown(e);
      }
    });
  };
  MenuPanel.prototype.handleKeyDown = function (e) {
    if (e.keyCode === _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.KeyCode.ESCAPE) {
      this.closePanel();
    }
  };
  MenuPanel.prototype.onTabKeyDown = function (e) {
    if (e.defaultPrevented) {
      return;
    }
    this.closePanel();
    e.preventDefault();
  };
  MenuPanel.prototype.closePanel = function () {
    var menuItem = this.parentComponent;
    menuItem.closeSubMenu();
    setTimeout(function () {
      return menuItem.getGui().focus();
    }, 0);
  };
  __decorate([_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.PostConstruct], MenuPanel.prototype, "postConstruct", null);
  return MenuPanel;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.TabGuardComp);


/***/ }),

/***/ 244060:
/*!************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/row-grouping/dist/es6/main.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PivotDropZonePanel": () => (/* reexport safe */ _rowGrouping_columnDropZones_pivotDropZonePanel__WEBPACK_IMPORTED_MODULE_3__.PivotDropZonePanel),
/* harmony export */   "RowGroupDropZonePanel": () => (/* reexport safe */ _rowGrouping_columnDropZones_rowGroupDropZonePanel__WEBPACK_IMPORTED_MODULE_1__.RowGroupDropZonePanel),
/* harmony export */   "RowGroupingModule": () => (/* reexport safe */ _rowGroupingModule__WEBPACK_IMPORTED_MODULE_0__.RowGroupingModule),
/* harmony export */   "ValuesDropZonePanel": () => (/* reexport safe */ _rowGrouping_columnDropZones_valueDropZonePanel__WEBPACK_IMPORTED_MODULE_2__.ValuesDropZonePanel)
/* harmony export */ });
/* harmony import */ var _rowGroupingModule__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rowGroupingModule */ 154472);
/* harmony import */ var _rowGrouping_columnDropZones_rowGroupDropZonePanel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rowGrouping/columnDropZones/rowGroupDropZonePanel */ 904367);
/* harmony import */ var _rowGrouping_columnDropZones_valueDropZonePanel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rowGrouping/columnDropZones/valueDropZonePanel */ 59231);
/* harmony import */ var _rowGrouping_columnDropZones_pivotDropZonePanel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rowGrouping/columnDropZones/pivotDropZonePanel */ 660282);





/***/ }),

/***/ 154472:
/*!*************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/row-grouping/dist/es6/rowGroupingModule.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RowGroupingModule": () => (/* binding */ RowGroupingModule)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
/* harmony import */ var _ag_grid_enterprise_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ag-grid-enterprise/core */ 704796);
/* harmony import */ var _rowGrouping_aggregationStage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rowGrouping/aggregationStage */ 638574);
/* harmony import */ var _rowGrouping_groupStage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rowGrouping/groupStage */ 481952);
/* harmony import */ var _rowGrouping_pivotColDefService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rowGrouping/pivotColDefService */ 907367);
/* harmony import */ var _rowGrouping_pivotStage__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./rowGrouping/pivotStage */ 473845);
/* harmony import */ var _rowGrouping_aggFuncService__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./rowGrouping/aggFuncService */ 29627);
/* harmony import */ var _rowGrouping_columnDropZones_gridHeaderDropZones__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./rowGrouping/columnDropZones/gridHeaderDropZones */ 16584);








var RowGroupingModule = {
  moduleName: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.RowGroupingModule,
  beans: [_rowGrouping_aggregationStage__WEBPACK_IMPORTED_MODULE_2__.AggregationStage, _rowGrouping_groupStage__WEBPACK_IMPORTED_MODULE_3__.GroupStage, _rowGrouping_pivotColDefService__WEBPACK_IMPORTED_MODULE_4__.PivotColDefService, _rowGrouping_pivotStage__WEBPACK_IMPORTED_MODULE_5__.PivotStage, _rowGrouping_aggFuncService__WEBPACK_IMPORTED_MODULE_6__.AggFuncService],
  agStackComponents: [{
    componentName: 'AgGridHeaderDropZones',
    componentClass: _rowGrouping_columnDropZones_gridHeaderDropZones__WEBPACK_IMPORTED_MODULE_7__.GridHeaderDropZones
  }],
  dependantModules: [_ag_grid_enterprise_core__WEBPACK_IMPORTED_MODULE_1__.EnterpriseCoreModule]
};

/***/ }),

/***/ 29627:
/*!**********************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/row-grouping/dist/es6/rowGrouping/aggFuncService.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AggFuncService": () => (/* binding */ AggFuncService)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

// @ts-ignore
var AGBigInt = typeof BigInt === 'undefined' ? null : BigInt;
var AggFuncService = /** @class */function (_super) {
  __extends(AggFuncService, _super);
  function AggFuncService() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.aggFuncsMap = {};
    _this.initialised = false;
    return _this;
  }
  AggFuncService_1 = AggFuncService;
  AggFuncService.prototype.init = function () {
    if (this.initialised) {
      return;
    }
    this.initialiseWithDefaultAggregations();
    this.addAggFuncs(this.gridOptionsWrapper.getAggFuncs());
  };
  AggFuncService.prototype.initialiseWithDefaultAggregations = function () {
    this.aggFuncsMap[AggFuncService_1.AGG_SUM] = aggSum;
    this.aggFuncsMap[AggFuncService_1.AGG_FIRST] = aggFirst;
    this.aggFuncsMap[AggFuncService_1.AGG_LAST] = aggLast;
    this.aggFuncsMap[AggFuncService_1.AGG_MIN] = aggMin;
    this.aggFuncsMap[AggFuncService_1.AGG_MAX] = aggMax;
    this.aggFuncsMap[AggFuncService_1.AGG_COUNT] = aggCount;
    this.aggFuncsMap[AggFuncService_1.AGG_AVG] = aggAvg;
    this.initialised = true;
  };
  AggFuncService.prototype.getDefaultAggFunc = function (column) {
    var allKeys = this.getFuncNames(column);
    // use 'sum' if it's a) allowed for the column and b) still registered
    // (ie not removed by user)
    var sumInKeysList = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.includes(allKeys, AggFuncService_1.AGG_SUM);
    var sumInFuncs = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.exists(this.aggFuncsMap[AggFuncService_1.AGG_SUM]);
    if (sumInKeysList && sumInFuncs) {
      return AggFuncService_1.AGG_SUM;
    }
    return _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.existsAndNotEmpty(allKeys) ? allKeys[0] : null;
  };
  AggFuncService.prototype.addAggFuncs = function (aggFuncs) {
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.iterateObject(aggFuncs, this.addAggFunc.bind(this));
  };
  AggFuncService.prototype.addAggFunc = function (key, aggFunc) {
    this.init();
    this.aggFuncsMap[key] = aggFunc;
  };
  AggFuncService.prototype.getAggFunc = function (name) {
    this.init();
    return this.aggFuncsMap[name];
  };
  AggFuncService.prototype.getFuncNames = function (column) {
    var userAllowedFuncs = column.getColDef().allowedAggFuncs;
    return userAllowedFuncs == null ? Object.keys(this.aggFuncsMap).sort() : userAllowedFuncs;
  };
  AggFuncService.prototype.clear = function () {
    this.aggFuncsMap = {};
  };
  var AggFuncService_1;
  AggFuncService.AGG_SUM = 'sum';
  AggFuncService.AGG_FIRST = 'first';
  AggFuncService.AGG_LAST = 'last';
  AggFuncService.AGG_MIN = 'min';
  AggFuncService.AGG_MAX = 'max';
  AggFuncService.AGG_COUNT = 'count';
  AggFuncService.AGG_AVG = 'avg';
  __decorate([_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.PostConstruct], AggFuncService.prototype, "init", null);
  AggFuncService = AggFuncService_1 = __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Bean)('aggFuncService')], AggFuncService);
  return AggFuncService;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.BeanStub);

function aggSum(params) {
  var values = params.values;
  var result = null; // the logic ensures that we never combine bigint arithmetic with numbers, but TS is hard to please
  // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code
  for (var i = 0; i < values.length; i++) {
    var value = values[i];
    if (typeof value === 'number') {
      if (result === null) {
        result = value;
      } else {
        if (AGBigInt) {
          result += typeof result === 'number' ? value : AGBigInt(value);
        } else {
          result += value;
        }
      }
    } else if (typeof value === 'bigint') {
      if (result === null) {
        result = value;
      } else {
        result = (typeof result === 'bigint' ? result : AGBigInt(result)) + value;
      }
    }
  }
  return result;
}
function aggFirst(params) {
  return params.values.length > 0 ? params.values[0] : null;
}
function aggLast(params) {
  return params.values.length > 0 ? _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.last(params.values) : null;
}
function aggMin(params) {
  var values = params.values;
  var result = null;
  // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code
  for (var i = 0; i < values.length; i++) {
    var value = values[i];
    if ((typeof value === 'number' || typeof value === 'bigint') && (result === null || result > value)) {
      result = value;
    }
  }
  return result;
}
function aggMax(params) {
  var values = params.values;
  var result = null;
  // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code
  for (var i = 0; i < values.length; i++) {
    var value = values[i];
    if ((typeof value === 'number' || typeof value === 'bigint') && (result === null || result < value)) {
      result = value;
    }
  }
  return result;
}
function aggCount(params) {
  var values = params.values;
  var result = 0;
  // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code
  for (var i = 0; i < values.length; i++) {
    var value = values[i];
    // check if the value is from a group, in which case use the group's count
    result += value != null && typeof value.value === 'number' ? value.value : 1;
  }
  return {
    value: result,
    toString: function () {
      return this.value.toString();
    },
    // used for sorting
    toNumber: function () {
      return this.value;
    }
  };
}
// the average function is tricky as the multiple levels require weighted averages
// for the non-leaf node aggregations.
function aggAvg(params) {
  var values = params.values;
  var sum = 0; // the logic ensures that we never combine bigint arithmetic with numbers, but TS is hard to please
  var count = 0;
  // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code
  for (var i = 0; i < values.length; i++) {
    var currentValue = values[i];
    var valueToAdd = null;
    if (typeof currentValue === 'number' || typeof currentValue === 'bigint') {
      valueToAdd = currentValue;
      count++;
    } else if (currentValue != null && (typeof currentValue.value === 'number' || typeof currentValue.value === 'bigint') && typeof currentValue.count === 'number') {
      // we are aggregating groups, so we take the aggregated values to calculated a weighted average
      if (AGBigInt) {
        valueToAdd = currentValue.value * (typeof currentValue.value === 'number' ? currentValue.count : AGBigInt(currentValue.count));
      } else {
        valueToAdd = currentValue.value * currentValue.count;
      }
      count += currentValue.count;
    }
    if (typeof valueToAdd === 'number') {
      if (AGBigInt) {
        sum += typeof sum === 'number' ? valueToAdd : AGBigInt(valueToAdd);
      } else {
        sum += valueToAdd;
      }
    } else if (typeof valueToAdd === 'bigint') {
      sum = (typeof sum === 'bigint' ? sum : AGBigInt(sum)) + valueToAdd;
    }
  }
  var value = null;
  // avoid divide by zero error
  if (count > 0) {
    if (AGBigInt) {
      value = sum / (typeof sum === 'number' ? count : AGBigInt(count));
    } else {
      value = sum / count;
    }
  }
  // the result will be an object. when this cell is rendered, only the avg is shown.
  // however when this cell is part of another aggregation, the count is also needed
  // to create a weighted average for the next level.
  return {
    count: count,
    value: value,
    // the grid by default uses toString to render values for an object, so this
    // is a trick to get the default cellRenderer to display the avg value
    toString: function () {
      return typeof this.value === 'number' || typeof this.value === 'bigint' ? this.value.toString() : '';
    },
    // used for sorting
    toNumber: function () {
      return this.value;
    }
  };
}

/***/ }),

/***/ 638574:
/*!************************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/row-grouping/dist/es6/rowGrouping/aggregationStage.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AggregationStage": () => (/* binding */ AggregationStage)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var AggregationStage = /** @class */function (_super) {
  __extends(AggregationStage, _super);
  function AggregationStage() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  // it's possible to recompute the aggregate without doing the other parts
  // + gridApi.recomputeAggregates()
  AggregationStage.prototype.execute = function (params) {
    // if changed path is active, it means we came from a) change detection or b) transaction update.
    // for both of these, if no value columns are present, it means there is nothing to aggregate now
    // and there is no cleanup to be done (as value columns don't change between transactions or change
    // detections). if no value columns and no changed path, means we have to go through all nodes in
    // case we need to clean up agg data from before.
    var noValueColumns = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.missingOrEmpty(this.columnModel.getValueColumns());
    var noUserAgg = !this.gridOptionsWrapper.getGroupRowAggNodesFunc();
    var changedPathActive = params.changedPath && params.changedPath.isActive();
    if (noValueColumns && noUserAgg && changedPathActive) {
      return;
    }
    var aggDetails = this.createAggDetails(params);
    this.recursivelyCreateAggData(aggDetails);
  };
  AggregationStage.prototype.createAggDetails = function (params) {
    var pivotActive = this.columnModel.isPivotActive();
    var measureColumns = this.columnModel.getValueColumns();
    var pivotColumns = pivotActive ? this.columnModel.getPivotColumns() : [];
    var aggDetails = {
      changedPath: params.changedPath,
      valueColumns: measureColumns,
      pivotColumns: pivotColumns
    };
    return aggDetails;
  };
  AggregationStage.prototype.recursivelyCreateAggData = function (aggDetails) {
    var _this = this;
    // update prop, in case changed since last time
    this.filteredOnly = !this.gridOptionsWrapper.isSuppressAggFilteredOnly();
    var callback = function (rowNode) {
      var hasNoChildren = !rowNode.hasChildren();
      if (hasNoChildren) {
        // this check is needed for TreeData, in case the node is no longer a child,
        // but it was a child previously.
        if (rowNode.aggData) {
          rowNode.setAggData(null);
        }
        // never agg data for leaf nodes
        return;
      }
      //Optionally prevent the aggregation at the root Node
      //https://ag-grid.atlassian.net/browse/AG-388
      var isRootNode = rowNode.level === -1;
      if (isRootNode) {
        var notPivoting = !_this.columnModel.isPivotMode();
        var suppressAggAtRootLevel = _this.gridOptionsWrapper.isSuppressAggAtRootLevel();
        if (suppressAggAtRootLevel && notPivoting) {
          return;
        }
      }
      _this.aggregateRowNode(rowNode, aggDetails);
    };
    aggDetails.changedPath.forEachChangedNodeDepthFirst(callback, true);
  };
  AggregationStage.prototype.aggregateRowNode = function (rowNode, aggDetails) {
    var measureColumnsMissing = aggDetails.valueColumns.length === 0;
    var pivotColumnsMissing = aggDetails.pivotColumns.length === 0;
    var userFunc = this.gridOptionsWrapper.getGroupRowAggNodesFunc();
    var aggResult;
    if (userFunc) {
      aggResult = userFunc(rowNode.childrenAfterFilter);
    } else if (measureColumnsMissing) {
      aggResult = null;
    } else if (pivotColumnsMissing) {
      aggResult = this.aggregateRowNodeUsingValuesOnly(rowNode, aggDetails);
    } else {
      aggResult = this.aggregateRowNodeUsingValuesAndPivot(rowNode);
    }
    rowNode.setAggData(aggResult);
    // if we are grouping, then it's possible there is a sibling footer
    // to the group, so update the data here also if there is one
    if (rowNode.sibling) {
      rowNode.sibling.setAggData(aggResult);
    }
  };
  AggregationStage.prototype.aggregateRowNodeUsingValuesAndPivot = function (rowNode) {
    var _this = this;
    var result = {};
    var pivotColumnDefs = this.pivotStage.getPivotColumnDefs();
    // Step 1: process value columns
    pivotColumnDefs.filter(function (v) {
      return !_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.exists(v.pivotTotalColumnIds);
    }) // only process pivot value columns
    .forEach(function (valueColDef) {
      var keys = valueColDef.pivotKeys || [];
      var values;
      var valueColumn = valueColDef.pivotValueColumn;
      var colId = valueColDef.colId;
      if (rowNode.leafGroup) {
        // lowest level group, get the values from the mapped set
        values = _this.getValuesFromMappedSet(rowNode.childrenMapped, keys, valueColumn);
      } else {
        // value columns and pivot columns, non-leaf group
        values = _this.getValuesPivotNonLeaf(rowNode, colId);
      }
      result[colId] = _this.aggregateValues(values, valueColumn.getAggFunc(), valueColumn, rowNode);
    });
    // Step 2: process total columns
    pivotColumnDefs.filter(function (v) {
      return _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.exists(v.pivotTotalColumnIds);
    }) // only process pivot total columns
    .forEach(function (totalColDef) {
      var aggResults = [];
      var pivotValueColumn = totalColDef.pivotValueColumn,
        pivotTotalColumnIds = totalColDef.pivotTotalColumnIds,
        colId = totalColDef.colId;
      //retrieve results for colIds associated with this pivot total column
      if (!pivotTotalColumnIds || !pivotTotalColumnIds.length) {
        return;
      }
      pivotTotalColumnIds.forEach(function (currentColId) {
        aggResults.push(result[currentColId]);
      });
      result[colId] = _this.aggregateValues(aggResults, pivotValueColumn.getAggFunc(), pivotValueColumn, rowNode);
    });
    return result;
  };
  AggregationStage.prototype.aggregateRowNodeUsingValuesOnly = function (rowNode, aggDetails) {
    var _this = this;
    var result = {};
    var changedValueColumns = aggDetails.changedPath.isActive() ? aggDetails.changedPath.getValueColumnsForNode(rowNode, aggDetails.valueColumns) : aggDetails.valueColumns;
    var notChangedValueColumns = aggDetails.changedPath.isActive() ? aggDetails.changedPath.getNotValueColumnsForNode(rowNode, aggDetails.valueColumns) : null;
    var values2d = this.getValuesNormal(rowNode, changedValueColumns);
    var oldValues = rowNode.aggData;
    changedValueColumns.forEach(function (valueColumn, index) {
      result[valueColumn.getId()] = _this.aggregateValues(values2d[index], valueColumn.getAggFunc(), valueColumn, rowNode);
    });
    if (notChangedValueColumns && oldValues) {
      notChangedValueColumns.forEach(function (valueColumn) {
        result[valueColumn.getId()] = oldValues[valueColumn.getId()];
      });
    }
    return result;
  };
  AggregationStage.prototype.getValuesPivotNonLeaf = function (rowNode, colId) {
    var values = [];
    rowNode.childrenAfterFilter.forEach(function (node) {
      var value = node.aggData[colId];
      values.push(value);
    });
    return values;
  };
  AggregationStage.prototype.getValuesFromMappedSet = function (mappedSet, keys, valueColumn) {
    var _this = this;
    var mapPointer = mappedSet;
    keys.forEach(function (key) {
      return mapPointer = mapPointer ? mapPointer[key] : null;
    });
    if (!mapPointer) {
      return [];
    }
    var values = [];
    mapPointer.forEach(function (rowNode) {
      var value = _this.valueService.getValue(valueColumn, rowNode);
      values.push(value);
    });
    return values;
  };
  AggregationStage.prototype.getValuesNormal = function (rowNode, valueColumns) {
    // create 2d array, of all values for all valueColumns
    var values = [];
    valueColumns.forEach(function () {
      return values.push([]);
    });
    var valueColumnCount = valueColumns.length;
    var nodeList = this.filteredOnly ? rowNode.childrenAfterFilter : rowNode.childrenAfterGroup;
    var rowCount = nodeList.length;
    for (var i = 0; i < rowCount; i++) {
      var childNode = nodeList[i];
      for (var j = 0; j < valueColumnCount; j++) {
        var valueColumn = valueColumns[j];
        // if the row is a group, then it will only have an agg result value,
        // which means valueGetter is never used.
        var value = this.valueService.getValue(valueColumn, childNode);
        values[j].push(value);
      }
    }
    return values;
  };
  AggregationStage.prototype.aggregateValues = function (values, aggFuncOrString, column, rowNode) {
    var aggFunc = typeof aggFuncOrString === 'string' ? this.aggFuncService.getAggFunc(aggFuncOrString) : aggFuncOrString;
    if (typeof aggFunc !== 'function') {
      console.error("AG Grid: unrecognised aggregation function " + aggFuncOrString);
      return null;
    }
    var deprecationWarning = function () {
      _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.doOnce(function () {
        console.warn('AG Grid: since v24.0, custom aggregation functions take a params object. Please alter your aggregation function to use params.values');
      }, 'aggregationStage.aggregateValues Deprecation');
    };
    var aggFuncAny = aggFunc;
    var params = {
      values: values,
      column: column,
      colDef: column ? column.getColDef() : undefined,
      rowNode: rowNode,
      data: rowNode ? rowNode.data : undefined,
      api: this.gridApi,
      columnApi: this.columnApi,
      context: this.gridOptionsWrapper.getContext(),
      // the three things below are for logging warning messages in case anyone is treating
      // the params object as an array. in previous grid versions, we didn't pass params object,
      // but passed values array instead.
      forEach: function (callback, thisArg) {
        deprecationWarning();
        return values.forEach(callback, thisArg);
      },
      get length() {
        deprecationWarning();
        return values.length;
      },
      set length(val) {
        deprecationWarning();
        values.length = val;
      }
    }; // the "as any" is needed to allow the deprecation warning messages
    return aggFuncAny(params);
  };
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')], AggregationStage.prototype, "columnModel", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('valueService')], AggregationStage.prototype, "valueService", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('pivotStage')], AggregationStage.prototype, "pivotStage", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('aggFuncService')], AggregationStage.prototype, "aggFuncService", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('gridApi')], AggregationStage.prototype, "gridApi", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnApi')], AggregationStage.prototype, "columnApi", void 0);
  AggregationStage = __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Bean)('aggregationStage')], AggregationStage);
  return AggregationStage;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.BeanStub);


/***/ }),

/***/ 268175:
/*!********************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/row-grouping/dist/es6/rowGrouping/batchRemover.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BatchRemover": () => (/* binding */ BatchRemover)
/* harmony export */ });
var BatchRemover = /** @class */function () {
  function BatchRemover() {
    this.allSets = {};
    this.allParents = [];
  }
  BatchRemover.prototype.removeFromChildrenAfterGroup = function (parent, child) {
    var set = this.getSet(parent);
    set.removeFromChildrenAfterGroup[child.id] = true;
  };
  BatchRemover.prototype.removeFromAllLeafChildren = function (parent, child) {
    var set = this.getSet(parent);
    set.removeFromAllLeafChildren[child.id] = true;
  };
  BatchRemover.prototype.getSet = function (parent) {
    if (!this.allSets[parent.id]) {
      this.allSets[parent.id] = {
        removeFromAllLeafChildren: {},
        removeFromChildrenAfterGroup: {}
      };
      this.allParents.push(parent);
    }
    return this.allSets[parent.id];
  };
  BatchRemover.prototype.getAllParents = function () {
    return this.allParents;
  };
  BatchRemover.prototype.flush = function () {
    var _this = this;
    this.allParents.forEach(function (parent) {
      var nodeDetails = _this.allSets[parent.id];
      parent.childrenAfterGroup = parent.childrenAfterGroup.filter(function (child) {
        return !nodeDetails.removeFromChildrenAfterGroup[child.id];
      });
      parent.allLeafChildren = parent.allLeafChildren.filter(function (child) {
        return !nodeDetails.removeFromAllLeafChildren[child.id];
      });
      parent.updateHasChildren();
    });
    this.allSets = {};
    this.allParents.length = 0;
  };
  return BatchRemover;
}();


/***/ }),

/***/ 307602:
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/row-grouping/dist/es6/rowGrouping/columnDropZones/baseDropZonePanel.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseDropZonePanel": () => (/* binding */ BaseDropZonePanel)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
/* harmony import */ var _dropZoneColumnComp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dropZoneColumnComp */ 158328);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();


var BaseDropZonePanel = /** @class */function (_super) {
  __extends(BaseDropZonePanel, _super);
  function BaseDropZonePanel(horizontal, valueColumn) {
    var _this = _super.call(this, "<div class=\"ag-unselectable\"></div>") || this;
    _this.horizontal = horizontal;
    _this.valueColumn = valueColumn;
    _this.state = BaseDropZonePanel.STATE_NOT_DRAGGING;
    _this.guiDestroyFunctions = [];
    _this.childColumnComponents = [];
    _this.resizeEnabled = false;
    _this.addElementClasses(_this.getGui());
    _this.eColumnDropList = document.createElement('div');
    _this.addElementClasses(_this.eColumnDropList, 'list');
    return _this;
  }
  BaseDropZonePanel.prototype.isHorizontal = function () {
    return this.horizontal;
  };
  BaseDropZonePanel.prototype.toggleResizable = function (resizable) {
    this.positionableFeature.setResizable(resizable ? {
      bottom: true
    } : false);
    this.resizeEnabled = resizable;
  };
  BaseDropZonePanel.prototype.setBeans = function (beans) {
    this.beans = beans;
  };
  BaseDropZonePanel.prototype.destroy = function () {
    this.destroyGui();
    _super.prototype.destroy.call(this);
  };
  BaseDropZonePanel.prototype.destroyGui = function () {
    this.guiDestroyFunctions.forEach(function (func) {
      return func();
    });
    this.guiDestroyFunctions.length = 0;
    this.childColumnComponents.length = 0;
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.clearElement(this.getGui());
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.clearElement(this.eColumnDropList);
  };
  BaseDropZonePanel.prototype.init = function (params) {
    this.params = params;
    this.addManagedListener(this.beans.eventService, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_NEW_COLUMNS_LOADED, this.refreshGui.bind(this));
    this.addManagedListener(this.beans.gridOptionsWrapper, 'functionsReadOnly', this.refreshGui.bind(this));
    this.setupDropTarget();
    this.positionableFeature = new _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.PositionableFeature(this.getGui(), {
      minHeight: 100
    });
    this.createManagedBean(this.positionableFeature);
    // we don't know if this bean will be initialised before columnModel.
    // if columnModel first, then below will work
    // if columnModel second, then below will put blank in, and then above event gets first when columnModel is set up
    this.refreshGui();
  };
  BaseDropZonePanel.prototype.addElementClasses = function (el, suffix) {
    suffix = suffix ? "-" + suffix : '';
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.addCssClass(el, "ag-column-drop" + suffix);
    var direction = this.horizontal ? 'horizontal' : 'vertical';
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.addCssClass(el, "ag-column-drop-" + direction + suffix);
  };
  BaseDropZonePanel.prototype.setupDropTarget = function () {
    this.dropTarget = {
      getContainer: this.getGui.bind(this),
      getIconName: this.getIconName.bind(this),
      onDragging: this.onDragging.bind(this),
      onDragEnter: this.onDragEnter.bind(this),
      onDragLeave: this.onDragLeave.bind(this),
      onDragStop: this.onDragStop.bind(this),
      isInterestedIn: this.isInterestedIn.bind(this)
    };
    this.beans.dragAndDropService.addDropTarget(this.dropTarget);
  };
  BaseDropZonePanel.prototype.isInterestedIn = function (type) {
    // not interested in row drags
    return type === _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.DragSourceType.HeaderCell || type === _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.DragSourceType.ToolPanel;
  };
  BaseDropZonePanel.prototype.checkInsertIndex = function (draggingEvent) {
    var newIndex = this.horizontal ? this.getNewHorizontalInsertIndex(draggingEvent) : this.getNewVerticalInsertIndex(draggingEvent);
    // <0 happens when drag is no a direction we are interested in, eg drag is up/down but in horizontal panel
    if (newIndex < 0) {
      return false;
    }
    var changed = newIndex !== this.insertIndex;
    if (changed) {
      this.insertIndex = newIndex;
    }
    return changed;
  };
  BaseDropZonePanel.prototype.getNewHorizontalInsertIndex = function (draggingEvent) {
    if (_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.missing(draggingEvent.hDirection)) {
      return -1;
    }
    var newIndex = 0;
    var mouseEvent = draggingEvent.event;
    var enableRtl = this.beans.gridOptionsWrapper.isEnableRtl();
    var goingLeft = draggingEvent.hDirection === _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.HorizontalDirection.Left;
    var mouseX = mouseEvent.clientX;
    this.childColumnComponents.forEach(function (childColumn) {
      var rect = childColumn.getGui().getBoundingClientRect();
      var rectX = goingLeft ? rect.right : rect.left;
      var horizontalFit = enableRtl ? mouseX <= rectX : mouseX >= rectX;
      if (horizontalFit) {
        newIndex++;
      }
    });
    return newIndex;
  };
  BaseDropZonePanel.prototype.getNewVerticalInsertIndex = function (draggingEvent) {
    if (_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.missing(draggingEvent.vDirection)) {
      return -1;
    }
    var newIndex = 0;
    var mouseEvent = draggingEvent.event;
    this.childColumnComponents.forEach(function (childColumn) {
      var rect = childColumn.getGui().getBoundingClientRect();
      var verticalFit = mouseEvent.clientY >= (draggingEvent.vDirection === _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.VerticalDirection.Down ? rect.top : rect.bottom);
      if (verticalFit) {
        newIndex++;
      }
    });
    return newIndex;
  };
  BaseDropZonePanel.prototype.checkDragStartedBySelf = function (draggingEvent) {
    if (this.state !== BaseDropZonePanel.STATE_NOT_DRAGGING) {
      return;
    }
    this.state = BaseDropZonePanel.STATE_REARRANGE_COLUMNS;
    this.potentialDndColumns = draggingEvent.dragSource.getDragItem().columns || [];
    this.refreshGui();
    this.checkInsertIndex(draggingEvent);
    this.refreshGui();
  };
  BaseDropZonePanel.prototype.onDragging = function (draggingEvent) {
    this.checkDragStartedBySelf(draggingEvent);
    if (this.checkInsertIndex(draggingEvent)) {
      this.refreshGui();
    }
  };
  BaseDropZonePanel.prototype.onDragEnter = function (draggingEvent) {
    // this will contain all columns that are potential drops
    var dragColumns = draggingEvent.dragSource.getDragItem().columns || [];
    this.state = BaseDropZonePanel.STATE_NEW_COLUMNS_IN;
    // take out columns that are not droppable
    var goodDragColumns = dragColumns.filter(this.isColumnDroppable.bind(this));
    if (goodDragColumns.length > 0) {
      this.potentialDndColumns = goodDragColumns;
      this.checkInsertIndex(draggingEvent);
      this.refreshGui();
    }
  };
  BaseDropZonePanel.prototype.isPotentialDndColumns = function () {
    return _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.existsAndNotEmpty(this.potentialDndColumns);
  };
  BaseDropZonePanel.prototype.onDragLeave = function (draggingEvent) {
    // if the dragging started from us, we remove the group, however if it started
    // someplace else, then we don't, as it was only 'asking'
    if (this.state === BaseDropZonePanel.STATE_REARRANGE_COLUMNS) {
      var columns = draggingEvent.dragSource.getDragItem().columns || [];
      this.removeColumns(columns);
    }
    if (this.isPotentialDndColumns()) {
      this.potentialDndColumns = [];
      this.refreshGui();
    }
    this.state = BaseDropZonePanel.STATE_NOT_DRAGGING;
  };
  BaseDropZonePanel.prototype.onDragStop = function () {
    if (this.isPotentialDndColumns()) {
      var success = false;
      if (this.state === BaseDropZonePanel.STATE_NEW_COLUMNS_IN) {
        this.addColumns(this.potentialDndColumns);
        success = true;
      } else {
        success = this.rearrangeColumns(this.potentialDndColumns);
      }
      this.potentialDndColumns = [];
      // If the function is passive, then we don't refresh, as we assume the client application
      // is going to call setRowGroups / setPivots / setValues at a later point which will then
      // cause a refresh. This gives a nice GUI where the ghost stays until the app has caught
      // up with the changes. However, if there was no change in the order, then we do need to
      // refresh to reset the columns
      if (!this.beans.gridOptionsWrapper.isFunctionsPassive() || !success) {
        this.refreshGui();
      }
    }
    this.state = BaseDropZonePanel.STATE_NOT_DRAGGING;
  };
  BaseDropZonePanel.prototype.removeColumns = function (columnsToRemove) {
    var newColumnList = this.getExistingColumns().filter(function (col) {
      return !_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.includes(columnsToRemove, col);
    });
    this.updateColumns(newColumnList);
  };
  BaseDropZonePanel.prototype.addColumns = function (columnsToAdd) {
    if (!columnsToAdd) {
      return;
    }
    var newColumnList = this.getExistingColumns().slice();
    var colsToAddNoDuplicates = columnsToAdd.filter(function (col) {
      return newColumnList.indexOf(col) < 0;
    });
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.insertArrayIntoArray(newColumnList, colsToAddNoDuplicates, this.insertIndex);
    this.updateColumns(newColumnList);
  };
  BaseDropZonePanel.prototype.rearrangeColumns = function (columnsToAdd) {
    var newColumnList = this.getNonGhostColumns().slice();
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.insertArrayIntoArray(newColumnList, columnsToAdd, this.insertIndex);
    if (_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.areEqual(newColumnList, this.getExistingColumns())) {
      return false;
    }
    this.updateColumns(newColumnList);
    return true;
  };
  BaseDropZonePanel.prototype.refreshGui = function () {
    // we reset the scroll position after the refresh.
    // if we don't do this, then the list will always scroll to the top
    // each time we refresh it. this is because part of the refresh empties
    // out the list which sets scroll to zero. so the user could be just
    // reordering the list - we want to prevent the resetting of the scroll.
    // this is relevant for vertical display only (as horizontal has no scroll)
    var scrollTop = this.eColumnDropList.scrollTop;
    var resizeEnabled = this.resizeEnabled;
    this.toggleResizable(false);
    this.destroyGui();
    this.addIconAndTitleToGui();
    this.addEmptyMessageToGui();
    this.addColumnsToGui();
    if (!this.isHorizontal()) {
      this.eColumnDropList.scrollTop = scrollTop;
    }
    if (resizeEnabled) {
      this.toggleResizable(resizeEnabled);
    }
  };
  BaseDropZonePanel.prototype.getNonGhostColumns = function () {
    var _this = this;
    var existingColumns = this.getExistingColumns();
    if (this.isPotentialDndColumns()) {
      return existingColumns.filter(function (column) {
        return !_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.includes(_this.potentialDndColumns, column);
      });
    }
    return existingColumns;
  };
  BaseDropZonePanel.prototype.addColumnsToGui = function () {
    var _this = this;
    var nonGhostColumns = this.getNonGhostColumns();
    var addingGhosts = this.isPotentialDndColumns();
    var itemsToAddToGui = [];
    nonGhostColumns.forEach(function (column, index) {
      if (addingGhosts && index >= _this.insertIndex) {
        return;
      }
      var columnComponent = _this.createColumnComponent(column, false);
      itemsToAddToGui.push(columnComponent);
    });
    if (this.isPotentialDndColumns()) {
      this.potentialDndColumns.forEach(function (column) {
        var columnComponent = _this.createColumnComponent(column, true);
        itemsToAddToGui.push(columnComponent);
      });
      nonGhostColumns.forEach(function (column, index) {
        if (index < _this.insertIndex) {
          return;
        }
        var columnComponent = _this.createColumnComponent(column, false);
        itemsToAddToGui.push(columnComponent);
      });
    }
    this.getGui().appendChild(this.eColumnDropList);
    itemsToAddToGui.forEach(function (columnComponent, index) {
      if (index > 0) {
        _this.addArrow(_this.eColumnDropList);
      }
      _this.eColumnDropList.appendChild(columnComponent.getGui());
    });
  };
  BaseDropZonePanel.prototype.createColumnComponent = function (column, ghost) {
    var _this = this;
    var columnComponent = new _dropZoneColumnComp__WEBPACK_IMPORTED_MODULE_1__.DropZoneColumnComp(column, this.dropTarget, ghost, this.valueColumn, this.horizontal);
    columnComponent.addEventListener(_dropZoneColumnComp__WEBPACK_IMPORTED_MODULE_1__.DropZoneColumnComp.EVENT_COLUMN_REMOVE, this.removeColumns.bind(this, [column]));
    this.beans.context.createBean(columnComponent);
    this.guiDestroyFunctions.push(function () {
      return _this.destroyBean(columnComponent);
    });
    if (!ghost) {
      this.childColumnComponents.push(columnComponent);
    }
    return columnComponent;
  };
  BaseDropZonePanel.prototype.addIconAndTitleToGui = function () {
    var eGroupIcon = this.params.icon;
    var eTitleBar = document.createElement('div');
    this.addElementClasses(eTitleBar, 'title-bar');
    this.addElementClasses(eGroupIcon, 'icon');
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.addOrRemoveCssClass(this.getGui(), 'ag-column-drop-empty', this.isExistingColumnsEmpty());
    eTitleBar.appendChild(eGroupIcon);
    if (!this.horizontal) {
      var eTitle = document.createElement('span');
      this.addElementClasses(eTitle, 'title');
      eTitle.innerHTML = this.params.title;
      eTitleBar.appendChild(eTitle);
    }
    this.getGui().appendChild(eTitleBar);
  };
  BaseDropZonePanel.prototype.isExistingColumnsEmpty = function () {
    return this.getExistingColumns().length === 0;
  };
  BaseDropZonePanel.prototype.addEmptyMessageToGui = function () {
    if (!this.isExistingColumnsEmpty() || this.isPotentialDndColumns()) {
      return;
    }
    var eMessage = document.createElement('span');
    eMessage.innerHTML = this.params.emptyMessage;
    this.addElementClasses(eMessage, 'empty-message');
    this.eColumnDropList.appendChild(eMessage);
  };
  BaseDropZonePanel.prototype.addArrow = function (eParent) {
    // only add the arrows if the layout is horizontal
    if (this.horizontal) {
      // for RTL it's a left arrow, otherwise it's a right arrow
      var enableRtl = this.beans.gridOptionsWrapper.isEnableRtl();
      var icon = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan(enableRtl ? 'smallLeft' : 'smallRight', this.beans.gridOptionsWrapper);
      this.addElementClasses(icon, 'cell-separator');
      eParent.appendChild(icon);
    }
  };
  BaseDropZonePanel.STATE_NOT_DRAGGING = 'notDragging';
  BaseDropZonePanel.STATE_NEW_COLUMNS_IN = 'newColumnsIn';
  BaseDropZonePanel.STATE_REARRANGE_COLUMNS = 'rearrangeColumns';
  return BaseDropZonePanel;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Component);


/***/ }),

/***/ 158328:
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/row-grouping/dist/es6/rowGrouping/columnDropZones/dropZoneColumnComp.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DropZoneColumnComp": () => (/* binding */ DropZoneColumnComp)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var DropZoneColumnComp = /** @class */function (_super) {
  __extends(DropZoneColumnComp, _super);
  function DropZoneColumnComp(column, dragSourceDropTarget, ghost, valueColumn, horizontal) {
    var _this = _super.call(this) || this;
    _this.column = column;
    _this.dragSourceDropTarget = dragSourceDropTarget;
    _this.ghost = ghost;
    _this.valueColumn = valueColumn;
    _this.horizontal = horizontal;
    _this.popupShowing = false;
    return _this;
  }
  DropZoneColumnComp.prototype.init = function () {
    this.setTemplate(DropZoneColumnComp.TEMPLATE);
    this.addElementClasses(this.getGui());
    this.addElementClasses(this.eDragHandle, 'drag-handle');
    this.addElementClasses(this.eText, 'text');
    this.addElementClasses(this.eButton, 'button');
    this.eDragHandle.appendChild(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('columnDrag', this.gridOptionsWrapper));
    this.eButton.appendChild(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('cancel', this.gridOptionsWrapper));
    this.displayName = this.columnModel.getDisplayNameForColumn(this.column, 'columnDrop');
    this.setupComponents();
    if (!this.ghost && !this.gridOptionsWrapper.isFunctionsReadOnly()) {
      this.addDragSource();
    }
    this.setupTooltip();
  };
  DropZoneColumnComp.prototype.setupTooltip = function () {
    var _this = this;
    var refresh = function () {
      var newTooltipText = _this.column.getColDef().headerTooltip;
      _this.setTooltip(newTooltipText);
    };
    refresh();
    this.addManagedListener(this.eventService, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_NEW_COLUMNS_LOADED, refresh);
  };
  DropZoneColumnComp.prototype.addDragSource = function () {
    var _this = this;
    var dragSource = {
      type: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.DragSourceType.ToolPanel,
      eElement: this.eDragHandle,
      defaultIconName: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.DragAndDropService.ICON_HIDE,
      getDragItem: function () {
        return _this.createDragItem();
      },
      dragItemName: this.displayName,
      dragSourceDropTarget: this.dragSourceDropTarget
    };
    this.dragAndDropService.addDragSource(dragSource, true);
    this.addDestroyFunc(function () {
      return _this.dragAndDropService.removeDragSource(dragSource);
    });
  };
  DropZoneColumnComp.prototype.createDragItem = function () {
    var visibleState = {};
    visibleState[this.column.getId()] = this.column.isVisible();
    return {
      columns: [this.column],
      visibleState: visibleState
    };
  };
  DropZoneColumnComp.prototype.setupComponents = function () {
    this.setTextValue();
    this.setupRemove();
    if (this.ghost) {
      _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.addCssClass(this.getGui(), 'ag-column-drop-cell-ghost');
    }
    if (this.valueColumn && !this.gridOptionsWrapper.isFunctionsReadOnly()) {
      this.addGuiEventListener('click', this.onShowAggFuncSelection.bind(this));
    }
  };
  DropZoneColumnComp.prototype.setupRemove = function () {
    var _this = this;
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eButton, !this.gridOptionsWrapper.isFunctionsReadOnly());
    this.addManagedListener(this.eButton, 'click', function (mouseEvent) {
      var agEvent = {
        type: DropZoneColumnComp.EVENT_COLUMN_REMOVE
      };
      _this.dispatchEvent(agEvent);
      mouseEvent.stopPropagation();
    });
    var touchListener = new _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.TouchListener(this.eButton);
    this.addManagedListener(touchListener, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.TouchListener.EVENT_TAP, function (event) {
      var agEvent = {
        type: DropZoneColumnComp.EVENT_COLUMN_REMOVE
      };
      _this.dispatchEvent(agEvent);
    });
    this.addDestroyFunc(touchListener.destroy.bind(touchListener));
  };
  DropZoneColumnComp.prototype.setTextValue = function () {
    var displayValue;
    if (this.valueColumn) {
      var aggFunc = this.column.getAggFunc();
      // if aggFunc is a string, we can use it, but if it's a function, then we swap with 'func'
      var aggFuncString = typeof aggFunc === 'string' ? aggFunc : 'agg';
      var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
      var aggFuncStringTranslated = localeTextFunc(aggFuncString, aggFuncString);
      displayValue = aggFuncStringTranslated + "(" + this.displayName + ")";
    } else {
      displayValue = this.displayName;
    }
    var displayValueSanitised = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.escapeString(displayValue);
    this.eText.innerHTML = displayValueSanitised;
  };
  DropZoneColumnComp.prototype.onShowAggFuncSelection = function () {
    var _this = this;
    if (this.popupShowing) {
      return;
    }
    this.popupShowing = true;
    var virtualList = new _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.VirtualList('select-agg-func');
    var rows = this.aggFuncService.getFuncNames(this.column);
    virtualList.setModel({
      getRow: function (index) {
        return rows[index];
      },
      getRowCount: function () {
        return rows.length;
      }
    });
    this.getContext().createBean(virtualList);
    var ePopup = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.loadTemplate('<div class="ag-select-agg-func-popup"></div>');
    ePopup.style.top = '0px';
    ePopup.style.left = '0px';
    ePopup.appendChild(virtualList.getGui());
    // ePopup.style.height = this.gridOptionsWrapper.getAggFuncPopupHeight() + 'px';
    ePopup.style.width = this.getGui().clientWidth + 'px';
    var popupHiddenFunc = function () {
      _this.destroyBean(virtualList);
      _this.popupShowing = false;
    };
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    var addPopupRes = this.popupService.addPopup({
      modal: true,
      eChild: ePopup,
      closeOnEsc: true,
      closedCallback: popupHiddenFunc,
      ariaLabel: translate('ariaLabelAggregationFunction', 'Aggregation Function')
    });
    if (addPopupRes) {
      virtualList.setComponentCreator(this.createAggSelect.bind(this, addPopupRes.hideFunc));
    }
    this.popupService.positionPopupUnderComponent({
      type: 'aggFuncSelect',
      eventSource: this.getGui(),
      ePopup: ePopup,
      keepWithinBounds: true,
      column: this.column
    });
    virtualList.refresh();
  };
  DropZoneColumnComp.prototype.createAggSelect = function (hidePopup, value) {
    var _this = this;
    var itemSelected = function () {
      hidePopup();
      if (_this.gridOptionsWrapper.isFunctionsPassive()) {
        var event_1 = {
          type: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_AGG_FUNC_CHANGE_REQUEST,
          columns: [_this.column],
          aggFunc: value,
          api: _this.gridApi,
          columnApi: _this.columnApi
        };
        _this.eventService.dispatchEvent(event_1);
      } else {
        _this.columnModel.setColumnAggFunc(_this.column, value, "toolPanelDragAndDrop");
      }
    };
    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
    var aggFuncString = value.toString();
    var aggFuncStringTranslated = localeTextFunc(aggFuncString, aggFuncString);
    var comp = new AggItemComp(itemSelected, aggFuncStringTranslated);
    return comp;
  };
  DropZoneColumnComp.prototype.addElementClasses = function (el, suffix) {
    suffix = suffix ? "-" + suffix : '';
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.addCssClass(el, "ag-column-drop-cell" + suffix);
    var direction = this.horizontal ? 'horizontal' : 'vertical';
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.addCssClass(el, "ag-column-drop-" + direction + "-cell" + suffix);
  };
  DropZoneColumnComp.EVENT_COLUMN_REMOVE = 'columnRemove';
  DropZoneColumnComp.TEMPLATE = "<span>\n          <span ref=\"eDragHandle\" class=\"ag-drag-handle ag-column-drop-cell-drag-handle\"></span>\n          <span ref=\"eText\" class=\"ag-column-drop-cell-text\"></span>\n          <span ref=\"eButton\" class=\"ag-column-drop-cell-button\"></span>\n        </span>";
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('dragAndDropService')], DropZoneColumnComp.prototype, "dragAndDropService", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')], DropZoneColumnComp.prototype, "columnModel", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('popupService')], DropZoneColumnComp.prototype, "popupService", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Optional)('aggFuncService')], DropZoneColumnComp.prototype, "aggFuncService", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnApi')], DropZoneColumnComp.prototype, "columnApi", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('gridApi')], DropZoneColumnComp.prototype, "gridApi", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eText')], DropZoneColumnComp.prototype, "eText", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eDragHandle')], DropZoneColumnComp.prototype, "eDragHandle", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eButton')], DropZoneColumnComp.prototype, "eButton", void 0);
  __decorate([_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.PostConstruct], DropZoneColumnComp.prototype, "init", null);
  return DropZoneColumnComp;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Component);

var AggItemComp = /** @class */function (_super) {
  __extends(AggItemComp, _super);
  function AggItemComp(itemSelected, value) {
    var _this = _super.call(this, '<div class="ag-select-agg-func-item"/>') || this;
    _this.getGui().innerText = value;
    _this.value = value;
    _this.addGuiEventListener('click', itemSelected);
    return _this;
  }
  return AggItemComp;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Component);

/***/ }),

/***/ 16584:
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/row-grouping/dist/es6/rowGrouping/columnDropZones/gridHeaderDropZones.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GridHeaderDropZones": () => (/* binding */ GridHeaderDropZones)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
/* harmony import */ var _rowGroupDropZonePanel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rowGroupDropZonePanel */ 904367);
/* harmony import */ var _pivotDropZonePanel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pivotDropZonePanel */ 660282);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};



var GridHeaderDropZones = /** @class */function (_super) {
  __extends(GridHeaderDropZones, _super);
  function GridHeaderDropZones() {
    return _super.call(this) || this;
  }
  GridHeaderDropZones.prototype.postConstruct = function () {
    this.setGui(this.createNorthPanel());
    this.addManagedListener(this.eventService, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onRowGroupChanged.bind(this));
    this.addManagedListener(this.eventService, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_NEW_COLUMNS_LOADED, this.onRowGroupChanged.bind(this));
    this.onRowGroupChanged();
  };
  GridHeaderDropZones.prototype.createNorthPanel = function () {
    var topPanelGui = document.createElement('div');
    var dropPanelVisibleListener = this.onDropPanelVisible.bind(this);
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.addCssClass(topPanelGui, 'ag-column-drop-wrapper');
    this.rowGroupComp = new _rowGroupDropZonePanel__WEBPACK_IMPORTED_MODULE_1__.RowGroupDropZonePanel(true);
    this.createManagedBean(this.rowGroupComp);
    this.pivotComp = new _pivotDropZonePanel__WEBPACK_IMPORTED_MODULE_2__.PivotDropZonePanel(true);
    this.createManagedBean(this.pivotComp);
    topPanelGui.appendChild(this.rowGroupComp.getGui());
    topPanelGui.appendChild(this.pivotComp.getGui());
    this.addManagedListener(this.rowGroupComp, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Component.EVENT_DISPLAYED_CHANGED, dropPanelVisibleListener);
    this.addManagedListener(this.pivotComp, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Component.EVENT_DISPLAYED_CHANGED, dropPanelVisibleListener);
    this.onDropPanelVisible();
    return topPanelGui;
  };
  GridHeaderDropZones.prototype.onDropPanelVisible = function () {
    var bothDisplayed = this.rowGroupComp.isDisplayed() && this.pivotComp.isDisplayed();
    this.rowGroupComp.addOrRemoveCssClass('ag-column-drop-horizontal-half-width', bothDisplayed);
    this.pivotComp.addOrRemoveCssClass('ag-column-drop-horizontal-half-width', bothDisplayed);
  };
  GridHeaderDropZones.prototype.onRowGroupChanged = function () {
    if (!this.rowGroupComp) {
      return;
    }
    var rowGroupPanelShow = this.gridOptionsWrapper.getRowGroupPanelShow();
    if (rowGroupPanelShow === _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Constants.ALWAYS) {
      this.rowGroupComp.setDisplayed(true);
    } else if (rowGroupPanelShow === _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Constants.ONLY_WHEN_GROUPING) {
      var grouping = !this.columnModel.isRowGroupEmpty();
      this.rowGroupComp.setDisplayed(grouping);
    } else {
      this.rowGroupComp.setDisplayed(false);
    }
  };
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')], GridHeaderDropZones.prototype, "columnModel", void 0);
  __decorate([_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.PostConstruct], GridHeaderDropZones.prototype, "postConstruct", null);
  return GridHeaderDropZones;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Component);


/***/ }),

/***/ 660282:
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/row-grouping/dist/es6/rowGrouping/columnDropZones/pivotDropZonePanel.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PivotDropZonePanel": () => (/* binding */ PivotDropZonePanel)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
/* harmony import */ var _baseDropZonePanel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./baseDropZonePanel */ 307602);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var PivotDropZonePanel = /** @class */function (_super) {
  __extends(PivotDropZonePanel, _super);
  function PivotDropZonePanel(horizontal) {
    return _super.call(this, horizontal, false) || this;
  }
  PivotDropZonePanel.prototype.passBeansUp = function () {
    _super.prototype.setBeans.call(this, {
      gridOptionsWrapper: this.gridOptionsWrapper,
      eventService: this.eventService,
      context: this.getContext(),
      loggerFactory: this.loggerFactory,
      dragAndDropService: this.dragAndDropService
    });
    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
    var emptyMessage = localeTextFunc('pivotColumnsEmptyMessage', 'Drag here to set column labels');
    var title = localeTextFunc('pivots', 'Column Labels');
    _super.prototype.init.call(this, {
      dragAndDropIcon: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.DragAndDropService.ICON_GROUP,
      icon: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('pivotPanel', this.gridOptionsWrapper, null),
      emptyMessage: emptyMessage,
      title: title
    });
    this.addManagedListener(this.eventService, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_NEW_COLUMNS_LOADED, this.refresh.bind(this));
    this.addManagedListener(this.eventService, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PIVOT_CHANGED, this.refresh.bind(this));
    this.addManagedListener(this.eventService, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.checkVisibility.bind(this));
    this.refresh();
  };
  PivotDropZonePanel.prototype.getTooltipParams = function () {
    var res = _super.prototype.getTooltipParams.call(this);
    res.location = 'pivotColumnsList';
    return res;
  };
  PivotDropZonePanel.prototype.refresh = function () {
    this.checkVisibility();
    this.refreshGui();
  };
  PivotDropZonePanel.prototype.checkVisibility = function () {
    var pivotMode = this.columnModel.isPivotMode();
    if (this.isHorizontal()) {
      // what we do for horizontal (ie the pivot panel at the top) depends
      // on the user property as well as pivotMode.
      switch (this.gridOptionsWrapper.getPivotPanelShow()) {
        case 'always':
          this.setDisplayed(pivotMode);
          break;
        case 'onlyWhenPivoting':
          var pivotActive = this.columnModel.isPivotActive();
          this.setDisplayed(pivotMode && pivotActive);
          break;
        default:
          // never show it
          this.setDisplayed(false);
          break;
      }
    } else {
      // in toolPanel, the pivot panel is always shown when pivot mode is on
      this.setDisplayed(pivotMode);
    }
  };
  PivotDropZonePanel.prototype.isColumnDroppable = function (column) {
    // we never allow grouping of secondary columns
    if (this.gridOptionsWrapper.isFunctionsReadOnly() || !column.isPrimary()) {
      return false;
    }
    return column.isAllowPivot() && !column.isPivotActive();
  };
  PivotDropZonePanel.prototype.updateColumns = function (columns) {
    if (this.gridOptionsWrapper.isFunctionsPassive()) {
      var event_1 = {
        type: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST,
        columns: columns,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(event_1);
    } else {
      this.columnModel.setPivotColumns(columns, "toolPanelUi");
    }
  };
  PivotDropZonePanel.prototype.getIconName = function () {
    return this.isPotentialDndColumns() ? _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.DragAndDropService.ICON_PIVOT : _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.DragAndDropService.ICON_NOT_ALLOWED;
  };
  PivotDropZonePanel.prototype.getExistingColumns = function () {
    return this.columnModel.getPivotColumns();
  };
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')], PivotDropZonePanel.prototype, "columnModel", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('loggerFactory')], PivotDropZonePanel.prototype, "loggerFactory", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('dragAndDropService')], PivotDropZonePanel.prototype, "dragAndDropService", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnApi')], PivotDropZonePanel.prototype, "columnApi", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('gridApi')], PivotDropZonePanel.prototype, "gridApi", void 0);
  __decorate([_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.PostConstruct], PivotDropZonePanel.prototype, "passBeansUp", null);
  return PivotDropZonePanel;
}(_baseDropZonePanel__WEBPACK_IMPORTED_MODULE_1__.BaseDropZonePanel);


/***/ }),

/***/ 904367:
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/row-grouping/dist/es6/rowGrouping/columnDropZones/rowGroupDropZonePanel.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RowGroupDropZonePanel": () => (/* binding */ RowGroupDropZonePanel)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
/* harmony import */ var _baseDropZonePanel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./baseDropZonePanel */ 307602);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var RowGroupDropZonePanel = /** @class */function (_super) {
  __extends(RowGroupDropZonePanel, _super);
  function RowGroupDropZonePanel(horizontal) {
    return _super.call(this, horizontal, false) || this;
  }
  RowGroupDropZonePanel.prototype.passBeansUp = function () {
    _super.prototype.setBeans.call(this, {
      gridOptionsWrapper: this.gridOptionsWrapper,
      eventService: this.eventService,
      context: this.getContext(),
      loggerFactory: this.loggerFactory,
      dragAndDropService: this.dragAndDropService
    });
    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
    var emptyMessage = localeTextFunc('rowGroupColumnsEmptyMessage', 'Drag here to set row groups');
    var title = localeTextFunc('groups', 'Row Groups');
    _super.prototype.init.call(this, {
      dragAndDropIcon: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.DragAndDropService.ICON_GROUP,
      icon: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('rowGroupPanel', this.gridOptionsWrapper, null),
      emptyMessage: emptyMessage,
      title: title
    });
    this.addManagedListener(this.eventService, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.refreshGui.bind(this));
  };
  RowGroupDropZonePanel.prototype.getTooltipParams = function () {
    var res = _super.prototype.getTooltipParams.call(this);
    res.location = 'rowGroupColumnsList';
    return res;
  };
  RowGroupDropZonePanel.prototype.isColumnDroppable = function (column) {
    // we never allow grouping of secondary columns
    if (this.gridOptionsWrapper.isFunctionsReadOnly() || !column.isPrimary()) {
      return false;
    }
    return column.isAllowRowGroup() && !column.isRowGroupActive();
  };
  RowGroupDropZonePanel.prototype.updateColumns = function (columns) {
    if (this.gridOptionsWrapper.isFunctionsPassive()) {
      var event_1 = {
        type: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST,
        columns: columns,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(event_1);
    } else {
      this.columnModel.setRowGroupColumns(columns, "toolPanelUi");
    }
  };
  RowGroupDropZonePanel.prototype.getIconName = function () {
    return this.isPotentialDndColumns() ? _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.DragAndDropService.ICON_GROUP : _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.DragAndDropService.ICON_NOT_ALLOWED;
  };
  RowGroupDropZonePanel.prototype.getExistingColumns = function () {
    return this.columnModel.getRowGroupColumns();
  };
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')], RowGroupDropZonePanel.prototype, "columnModel", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('loggerFactory')], RowGroupDropZonePanel.prototype, "loggerFactory", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('dragAndDropService')], RowGroupDropZonePanel.prototype, "dragAndDropService", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnApi')], RowGroupDropZonePanel.prototype, "columnApi", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('gridApi')], RowGroupDropZonePanel.prototype, "gridApi", void 0);
  __decorate([_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.PostConstruct], RowGroupDropZonePanel.prototype, "passBeansUp", null);
  return RowGroupDropZonePanel;
}(_baseDropZonePanel__WEBPACK_IMPORTED_MODULE_1__.BaseDropZonePanel);


/***/ }),

/***/ 59231:
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/row-grouping/dist/es6/rowGrouping/columnDropZones/valueDropZonePanel.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ValuesDropZonePanel": () => (/* binding */ ValuesDropZonePanel)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
/* harmony import */ var _baseDropZonePanel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./baseDropZonePanel */ 307602);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var ValuesDropZonePanel = /** @class */function (_super) {
  __extends(ValuesDropZonePanel, _super);
  function ValuesDropZonePanel(horizontal) {
    return _super.call(this, horizontal, true) || this;
  }
  ValuesDropZonePanel.prototype.passBeansUp = function () {
    _super.prototype.setBeans.call(this, {
      gridOptionsWrapper: this.gridOptionsWrapper,
      eventService: this.eventService,
      context: this.getContext(),
      loggerFactory: this.loggerFactory,
      dragAndDropService: this.dragAndDropService
    });
    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
    var emptyMessage = localeTextFunc('valueColumnsEmptyMessage', 'Drag here to aggregate');
    var title = localeTextFunc('values', 'Values');
    _super.prototype.init.call(this, {
      dragAndDropIcon: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.DragAndDropService.ICON_AGGREGATE,
      icon: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('valuePanel', this.gridOptionsWrapper, null),
      emptyMessage: emptyMessage,
      title: title
    });
    this.addManagedListener(this.eventService, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_VALUE_CHANGED, this.refreshGui.bind(this));
  };
  ValuesDropZonePanel.prototype.getTooltipParams = function () {
    var res = _super.prototype.getTooltipParams.call(this);
    res.location = 'valueColumnsList';
    return res;
  };
  ValuesDropZonePanel.prototype.getIconName = function () {
    return this.isPotentialDndColumns() ? _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.DragAndDropService.ICON_AGGREGATE : _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.DragAndDropService.ICON_NOT_ALLOWED;
  };
  ValuesDropZonePanel.prototype.isColumnDroppable = function (column) {
    // we never allow grouping of secondary columns
    if (this.gridOptionsWrapper.isFunctionsReadOnly() || !column.isPrimary()) {
      return false;
    }
    return column.isAllowValue() && !column.isValueActive();
  };
  ValuesDropZonePanel.prototype.updateColumns = function (columns) {
    if (this.gridOptionsWrapper.isFunctionsPassive()) {
      var event_1 = {
        type: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_VALUE_CHANGE_REQUEST,
        columns: columns,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(event_1);
    } else {
      this.columnModel.setValueColumns(columns, "toolPanelUi");
    }
  };
  ValuesDropZonePanel.prototype.getExistingColumns = function () {
    return this.columnModel.getValueColumns();
  };
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')], ValuesDropZonePanel.prototype, "columnModel", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('loggerFactory')], ValuesDropZonePanel.prototype, "loggerFactory", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('dragAndDropService')], ValuesDropZonePanel.prototype, "dragAndDropService", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnApi')], ValuesDropZonePanel.prototype, "columnApi", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('gridApi')], ValuesDropZonePanel.prototype, "gridApi", void 0);
  __decorate([_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.PostConstruct], ValuesDropZonePanel.prototype, "passBeansUp", null);
  return ValuesDropZonePanel;
}(_baseDropZonePanel__WEBPACK_IMPORTED_MODULE_1__.BaseDropZonePanel);


/***/ }),

/***/ 481952:
/*!******************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/row-grouping/dist/es6/rowGrouping/groupStage.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GroupStage": () => (/* binding */ GroupStage)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
/* harmony import */ var _batchRemover__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./batchRemover */ 268175);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var GroupStage = /** @class */function (_super) {
  __extends(GroupStage, _super);
  function GroupStage() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    // we use a sequence variable so that each time we do a grouping, we don't
    // reuse the ids - otherwise the rowRenderer will confuse rowNodes between redraws
    // when it tries to animate between rows.
    _this.groupIdSequence = new _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.NumberSequence();
    return _this;
  }
  GroupStage.prototype.postConstruct = function () {
    this.usingTreeData = this.gridOptionsWrapper.isTreeData();
    if (this.usingTreeData) {
      this.getDataPath = this.gridOptionsWrapper.getDataPathFunc();
    }
  };
  GroupStage.prototype.execute = function (params) {
    var details = this.createGroupingDetails(params);
    if (details.transactions) {
      this.handleTransaction(details);
    } else {
      var afterColsChanged = params.afterColumnsChanged === true;
      this.shotgunResetEverything(details, afterColsChanged);
    }
    this.sortGroupsWithComparator(details.rootNode);
    this.selectableService.updateSelectableAfterGrouping(details.rootNode);
  };
  GroupStage.prototype.createGroupingDetails = function (params) {
    var rowNode = params.rowNode,
      changedPath = params.changedPath,
      rowNodeTransactions = params.rowNodeTransactions,
      rowNodeOrder = params.rowNodeOrder;
    var groupedCols = this.usingTreeData ? null : this.columnModel.getRowGroupColumns();
    var details = {
      // someone complained that the parent attribute was causing some change detection
      // to break is some angular add-on - which i never used. taking the parent out breaks
      // a cyclic dependency, hence this flag got introduced.
      includeParents: !this.gridOptionsWrapper.isSuppressParentsInRowNodes(),
      expandByDefault: this.gridOptionsWrapper.getGroupDefaultExpanded(),
      groupedCols: groupedCols,
      rootNode: rowNode,
      pivotMode: this.columnModel.isPivotMode(),
      groupedColCount: this.usingTreeData || !groupedCols ? 0 : groupedCols.length,
      rowNodeOrder: rowNodeOrder,
      transactions: rowNodeTransactions,
      // if no transaction, then it's shotgun, changed path would be 'not active' at this point anyway
      changedPath: changedPath
    };
    return details;
  };
  GroupStage.prototype.handleTransaction = function (details) {
    var _this = this;
    details.transactions.forEach(function (tran) {
      // we don't allow batch remover for tree data as tree data uses Filler Nodes,
      // and creating/deleting filler nodes needs to be done alongside the node deleting
      // and moving. if we want to Batch Remover working with tree data then would need
      // to consider how Filler Nodes would be impacted (it's possible that it can be easily
      // modified to work, however for now I don't have the brain energy to work it all out).
      var batchRemover = !_this.usingTreeData ? new _batchRemover__WEBPACK_IMPORTED_MODULE_1__.BatchRemover() : undefined;
      // the order here of [add, remove, update] needs to be the same as in ClientSideNodeManager,
      // as the order is important when a record with the same id is added and removed in the same
      // transaction.
      if (_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.existsAndNotEmpty(tran.remove)) {
        _this.removeNodes(tran.remove, details, batchRemover);
      }
      if (_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.existsAndNotEmpty(tran.update)) {
        _this.moveNodesInWrongPath(tran.update, details, batchRemover);
      }
      if (_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.existsAndNotEmpty(tran.add)) {
        _this.insertNodes(tran.add, details, false);
      }
      // must flush here, and not allow another transaction to be applied,
      // as each transaction must finish leaving the data in a consistent state.
      if (batchRemover) {
        var parentsWithChildrenRemoved = batchRemover.getAllParents().slice();
        batchRemover.flush();
        _this.removeEmptyGroups(parentsWithChildrenRemoved, details);
      }
    });
    if (details.rowNodeOrder) {
      this.sortChildren(details);
    }
  };
  // this is used when doing delta updates, eg Redux, keeps nodes in right order
  GroupStage.prototype.sortChildren = function (details) {
    details.changedPath.forEachChangedNodeDepthFirst(function (rowNode) {
      _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.sortRowNodesByOrder(rowNode.childrenAfterGroup, details.rowNodeOrder);
    });
  };
  GroupStage.prototype.sortGroupsWithComparator = function (rootNode) {
    // we don't do group sorting for tree data
    if (this.usingTreeData) {
      return;
    }
    var comparator = this.gridOptionsWrapper.getDefaultGroupOrderComparator();
    if (_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.exists(comparator)) {
      recursiveSort(rootNode);
    }
    function recursiveSort(rowNode) {
      var doSort = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.exists(rowNode.childrenAfterGroup) &&
      // we only want to sort groups, so we do not sort leafs (a leaf group has leafs as children)
      !rowNode.leafGroup;
      if (doSort) {
        rowNode.childrenAfterGroup.sort(comparator);
        rowNode.childrenAfterGroup.forEach(function (childNode) {
          return recursiveSort(childNode);
        });
      }
    }
  };
  GroupStage.prototype.getExistingPathForNode = function (node, details) {
    var res = [];
    // when doing tree data, the node is part of the path,
    // but when doing grid grouping, the node is not part of the path so we start with the parent.
    var pointer = this.usingTreeData ? node : node.parent;
    while (pointer && pointer !== details.rootNode) {
      res.push({
        key: pointer.key,
        rowGroupColumn: pointer.rowGroupColumn,
        field: pointer.field
      });
      pointer = pointer.parent;
    }
    res.reverse();
    return res;
  };
  GroupStage.prototype.moveNodesInWrongPath = function (childNodes, details, batchRemover) {
    var _this = this;
    childNodes.forEach(function (childNode) {
      // we add node, even if parent has not changed, as the data could have
      // changed, hence aggregations will be wrong
      if (details.changedPath.isActive()) {
        details.changedPath.addParentNode(childNode.parent);
      }
      var infoToKeyMapper = function (item) {
        return item.key;
      };
      var oldPath = _this.getExistingPathForNode(childNode, details).map(infoToKeyMapper);
      var newPath = _this.getGroupInfo(childNode, details).map(infoToKeyMapper);
      var nodeInCorrectPath = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.areEqual(oldPath, newPath);
      if (!nodeInCorrectPath) {
        _this.moveNode(childNode, details, batchRemover);
      }
    });
  };
  GroupStage.prototype.moveNode = function (childNode, details, batchRemover) {
    this.removeNodesInStages([childNode], details, batchRemover);
    this.insertOneNode(childNode, details, true);
    // hack - if we didn't do this, then renaming a tree item (ie changing rowNode.key) wouldn't get
    // refreshed into the gui.
    // this is needed to kick off the event that rowComp listens to for refresh. this in turn
    // then will get each cell in the row to refresh - which is what we need as we don't know which
    // columns will be displaying the rowNode.key info.
    childNode.setData(childNode.data);
    // we add both old and new parents to changed path, as both will need to be refreshed.
    // we already added the old parent (in calling method), so just add the new parent here
    if (details.changedPath.isActive()) {
      var newParent = childNode.parent;
      details.changedPath.addParentNode(newParent);
    }
  };
  GroupStage.prototype.removeNodes = function (leafRowNodes, details, batchRemover) {
    this.removeNodesInStages(leafRowNodes, details, batchRemover);
    if (details.changedPath.isActive()) {
      leafRowNodes.forEach(function (rowNode) {
        return details.changedPath.addParentNode(rowNode.parent);
      });
    }
  };
  GroupStage.prototype.removeNodesInStages = function (leafRowNodes, details, batchRemover) {
    this.removeNodesFromParents(leafRowNodes, details, batchRemover);
    if (this.usingTreeData) {
      this.postRemoveCreateFillerNodes(leafRowNodes, details);
      // When not TreeData, then removeEmptyGroups is called just before the BatchRemover is flushed.
      // However for TreeData, there is no BatchRemover, so we have to call removeEmptyGroups here.
      var nodeParents = leafRowNodes.map(function (n) {
        return n.parent;
      });
      this.removeEmptyGroups(nodeParents, details);
    }
  };
  GroupStage.prototype.forEachParentGroup = function (details, group, callback) {
    var pointer = group;
    while (pointer && pointer !== details.rootNode) {
      callback(pointer);
      pointer = pointer.parent;
    }
  };
  GroupStage.prototype.removeNodesFromParents = function (nodesToRemove, details, provided) {
    var _this = this;
    // this method can be called with BatchRemover as optional. if it is missed, we created a local version
    // and flush it at the end. if one is provided, we add to the provided one and it gets flushed elsewhere.
    var batchRemoverIsLocal = provided == null;
    var batchRemoverToUse = provided ? provided : new _batchRemover__WEBPACK_IMPORTED_MODULE_1__.BatchRemover();
    nodesToRemove.forEach(function (nodeToRemove) {
      _this.removeFromParent(nodeToRemove, batchRemoverToUse);
      // remove from allLeafChildren. we clear down all parents EXCEPT the Root Node, as
      // the ClientSideNodeManager is responsible for the Root Node.
      _this.forEachParentGroup(details, nodeToRemove.parent, function (parentNode) {
        batchRemoverToUse.removeFromAllLeafChildren(parentNode, nodeToRemove);
      });
    });
    if (batchRemoverIsLocal) {
      batchRemoverToUse.flush();
    }
  };
  GroupStage.prototype.postRemoveCreateFillerNodes = function (nodesToRemove, details) {
    var _this = this;
    nodesToRemove.forEach(function (nodeToRemove) {
      // if not group, and children are present, need to move children to a group.
      // otherwise if no children, we can just remove without replacing.
      var replaceWithGroup = nodeToRemove.hasChildren();
      if (replaceWithGroup) {
        var oldPath = _this.getExistingPathForNode(nodeToRemove, details);
        // because we just removed the userGroup, this will always return new support group
        var newGroupNode_1 = _this.findParentForNode(nodeToRemove, oldPath, details);
        // these properties are the ones that will be incorrect in the newly created group,
        // so copy them from the old childNode
        newGroupNode_1.expanded = nodeToRemove.expanded;
        newGroupNode_1.allLeafChildren = nodeToRemove.allLeafChildren;
        newGroupNode_1.childrenAfterGroup = nodeToRemove.childrenAfterGroup;
        newGroupNode_1.childrenMapped = nodeToRemove.childrenMapped;
        newGroupNode_1.updateHasChildren();
        newGroupNode_1.childrenAfterGroup.forEach(function (rowNode) {
          return rowNode.parent = newGroupNode_1;
        });
      }
    });
  };
  GroupStage.prototype.removeEmptyGroups = function (possibleEmptyGroups, details) {
    var _this = this;
    // we do this multiple times, as when we remove groups, that means the parent of just removed
    // group can then be empty. to get around this, if we remove, then we check everything again for
    // newly emptied groups. the max number of times this will execute is the depth of the group tree.
    var checkAgain = true;
    var groupShouldBeRemoved = function (rowNode) {
      // because of the while loop below, it's possible we already moved the node,
      // so double check before trying to remove again.
      var mapKey = _this.getChildrenMappedKey(rowNode.key, rowNode.rowGroupColumn);
      var parentRowNode = rowNode.parent;
      var groupAlreadyRemoved = parentRowNode && parentRowNode.childrenMapped ? !parentRowNode.childrenMapped[mapKey] : true;
      if (groupAlreadyRemoved) {
        // if not linked, then group was already removed
        return false;
      }
      // if still not removed, then we remove if this group is empty
      return !!rowNode.isEmptyRowGroupNode();
    };
    var _loop_1 = function () {
      checkAgain = false;
      var batchRemover = new _batchRemover__WEBPACK_IMPORTED_MODULE_1__.BatchRemover();
      possibleEmptyGroups.forEach(function (possibleEmptyGroup) {
        // remove empty groups
        _this.forEachParentGroup(details, possibleEmptyGroup, function (rowNode) {
          if (groupShouldBeRemoved(rowNode)) {
            checkAgain = true;
            _this.removeFromParent(rowNode, batchRemover);
            // we remove selection on filler nodes here, as the selection would not be removed
            // from the RowNodeManager, as filler nodes don't exist on the RowNodeManager
            rowNode.setSelected(false);
          }
        });
      });
      batchRemover.flush();
    };
    while (checkAgain) {
      _loop_1();
    }
  };
  // removes the node from the parent by:
  // a) removing from childrenAfterGroup (using batchRemover if present, otherwise immediately)
  // b) removing from childrenMapped (immediately)
  // c) setRowTop(null) - as the rowRenderer uses this to know the RowNode is no longer needed
  // d) setRowIndex(null) - as the rowNode will no longer be displayed.
  GroupStage.prototype.removeFromParent = function (child, batchRemover) {
    if (child.parent) {
      if (batchRemover) {
        batchRemover.removeFromChildrenAfterGroup(child.parent, child);
      } else {
        _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.removeFromArray(child.parent.childrenAfterGroup, child);
        child.parent.updateHasChildren();
      }
    }
    var mapKey = this.getChildrenMappedKey(child.key, child.rowGroupColumn);
    if (child.parent && child.parent.childrenMapped) {
      child.parent.childrenMapped[mapKey] = undefined;
    }
    // this is important for transition, see rowComp removeFirstPassFuncs. when doing animation and
    // remove, if rowTop is still present, the rowComp thinks it's just moved position.
    child.setRowTop(null);
    child.setRowIndex(null);
  };
  GroupStage.prototype.addToParent = function (child, parent) {
    var mapKey = this.getChildrenMappedKey(child.key, child.rowGroupColumn);
    if (parent) {
      var children = parent.childrenMapped != null;
      if (children) {
        parent.childrenMapped[mapKey] = child;
      }
      parent.childrenAfterGroup.push(child);
      parent.updateHasChildren();
    }
  };
  GroupStage.prototype.areGroupColsEqual = function (d1, d2) {
    if (d1 == null || d2 == null || d1.pivotMode !== d2.pivotMode) {
      return false;
    }
    return _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.areEqual(d1.groupedCols, d2.groupedCols);
  };
  GroupStage.prototype.checkAllGroupDataAfterColsChanged = function (details) {
    var _this = this;
    var recurse = function (rowNodes) {
      if (!rowNodes) {
        return;
      }
      rowNodes.forEach(function (rowNode) {
        var isLeafNode = !_this.usingTreeData && !rowNode.group;
        if (isLeafNode) {
          return;
        }
        var groupInfo = {
          field: rowNode.field,
          key: rowNode.key,
          rowGroupColumn: rowNode.rowGroupColumn
        };
        _this.setGroupData(rowNode, groupInfo);
        recurse(rowNode.childrenAfterGroup);
      });
    };
    recurse(details.rootNode.childrenAfterGroup);
  };
  GroupStage.prototype.shotgunResetEverything = function (details, afterColumnsChanged) {
    if (this.noChangeInGroupingColumns(details, afterColumnsChanged)) {
      return;
    }
    // groups are about to get disposed, so need to deselect any that are selected
    this.selectionService.removeGroupsFromSelection();
    // because we are not creating the root node each time, we have the logic
    // here to change leafGroup once.
    // we set .leafGroup to false for tree data, as .leafGroup is only used when pivoting, and pivoting
    // isn't allowed with treeData, so the grid never actually use .leafGroup when doing treeData.
    details.rootNode.leafGroup = this.usingTreeData ? false : details.groupedCols.length === 0;
    // we are doing everything from scratch, so reset childrenAfterGroup and childrenMapped from the rootNode
    details.rootNode.childrenAfterGroup = [];
    details.rootNode.childrenMapped = {};
    details.rootNode.updateHasChildren();
    this.insertNodes(details.rootNode.allLeafChildren, details, false);
  };
  GroupStage.prototype.noChangeInGroupingColumns = function (details, afterColumnsChanged) {
    var noFurtherProcessingNeeded = false;
    var groupDisplayColumns = this.columnModel.getGroupDisplayColumns();
    var newGroupDisplayColIds = groupDisplayColumns ? groupDisplayColumns.map(function (c) {
      return c.getId();
    }).join('-') : '';
    if (afterColumnsChanged) {
      // we only need to redo grouping if doing normal grouping (ie not tree data)
      // and the group cols have changed.
      noFurtherProcessingNeeded = this.usingTreeData || this.areGroupColsEqual(details, this.oldGroupingDetails);
      // if the group display cols have changed, then we need to update rowNode.groupData
      // (regardless of tree data or row grouping)
      if (this.oldGroupDisplayColIds !== newGroupDisplayColIds) {
        this.checkAllGroupDataAfterColsChanged(details);
      }
    }
    this.oldGroupingDetails = details;
    this.oldGroupDisplayColIds = newGroupDisplayColIds;
    return noFurtherProcessingNeeded;
  };
  GroupStage.prototype.insertNodes = function (newRowNodes, details, isMove) {
    var _this = this;
    newRowNodes.forEach(function (rowNode) {
      _this.insertOneNode(rowNode, details, isMove);
      if (details.changedPath.isActive()) {
        details.changedPath.addParentNode(rowNode.parent);
      }
    });
  };
  GroupStage.prototype.insertOneNode = function (childNode, details, isMove) {
    var path = this.getGroupInfo(childNode, details);
    var parentGroup = this.findParentForNode(childNode, path, details);
    if (!parentGroup.group) {
      console.warn("AG Grid: duplicate group keys for row data, keys should be unique", [parentGroup.data, childNode.data]);
    }
    if (this.usingTreeData) {
      this.swapGroupWithUserNode(parentGroup, childNode, isMove);
    } else {
      childNode.parent = parentGroup;
      childNode.level = path.length;
      parentGroup.childrenAfterGroup.push(childNode);
      parentGroup.updateHasChildren();
    }
  };
  GroupStage.prototype.findParentForNode = function (childNode, path, details) {
    var _this = this;
    var nextNode = details.rootNode;
    path.forEach(function (groupInfo, level) {
      nextNode = _this.getOrCreateNextNode(nextNode, groupInfo, level, details);
      // node gets added to all group nodes.
      // note: we do not add to rootNode here, as the rootNode is the master list of rowNodes
      nextNode.allLeafChildren.push(childNode);
    });
    return nextNode;
  };
  GroupStage.prototype.swapGroupWithUserNode = function (fillerGroup, userGroup, isMove) {
    userGroup.parent = fillerGroup.parent;
    userGroup.key = fillerGroup.key;
    userGroup.field = fillerGroup.field;
    userGroup.groupData = fillerGroup.groupData;
    userGroup.level = fillerGroup.level;
    // AG-3441 - preserve the existing expanded status of the node if we're moving it, so that
    // you can drag a sub tree from one parent to another without changing its expansion
    if (!isMove) {
      userGroup.expanded = fillerGroup.expanded;
    }
    // we set .leafGroup to false for tree data, as .leafGroup is only used when pivoting, and pivoting
    // isn't allowed with treeData, so the grid never actually use .leafGroup when doing treeData.
    userGroup.leafGroup = fillerGroup.leafGroup;
    // always null for userGroups, as row grouping is not allowed when doing tree data
    userGroup.rowGroupIndex = fillerGroup.rowGroupIndex;
    userGroup.allLeafChildren = fillerGroup.allLeafChildren;
    userGroup.childrenAfterGroup = fillerGroup.childrenAfterGroup;
    userGroup.childrenMapped = fillerGroup.childrenMapped;
    userGroup.updateHasChildren();
    this.removeFromParent(fillerGroup);
    userGroup.childrenAfterGroup.forEach(function (rowNode) {
      return rowNode.parent = userGroup;
    });
    this.addToParent(userGroup, fillerGroup.parent);
  };
  GroupStage.prototype.getOrCreateNextNode = function (parentGroup, groupInfo, level, details) {
    var key = this.getChildrenMappedKey(groupInfo.key, groupInfo.rowGroupColumn);
    var nextNode = parentGroup.childrenMapped ? parentGroup.childrenMapped[key] : undefined;
    if (!nextNode) {
      nextNode = this.createGroup(groupInfo, parentGroup, level, details);
      // attach the new group to the parent
      this.addToParent(nextNode, parentGroup);
    }
    return nextNode;
  };
  GroupStage.prototype.createGroup = function (groupInfo, parent, level, details) {
    var groupNode = new _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.RowNode(this.beans);
    groupNode.group = true;
    groupNode.field = groupInfo.field;
    groupNode.rowGroupColumn = groupInfo.rowGroupColumn;
    this.setGroupData(groupNode, groupInfo);
    // we put 'row-group-' before the group id, so it doesn't clash with standard row id's. we also use 't-' and 'b-'
    // for top pinned and bottom pinned rows.
    groupNode.id = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.RowNode.ID_PREFIX_ROW_GROUP + this.groupIdSequence.next();
    groupNode.key = groupInfo.key;
    groupNode.level = level;
    groupNode.leafGroup = this.usingTreeData ? false : level === details.groupedColCount - 1;
    groupNode.allLeafChildren = [];
    // why is this done here? we are not updating the children count as we go,
    // i suspect this is updated in the filter stage
    groupNode.setAllChildrenCount(0);
    groupNode.rowGroupIndex = this.usingTreeData ? null : level;
    groupNode.childrenAfterGroup = [];
    groupNode.childrenMapped = {};
    groupNode.updateHasChildren();
    groupNode.parent = details.includeParents ? parent : null;
    this.setExpandedInitialValue(details, groupNode);
    return groupNode;
  };
  GroupStage.prototype.setGroupData = function (groupNode, groupInfo) {
    var _this = this;
    groupNode.groupData = {};
    var groupDisplayCols = this.columnModel.getGroupDisplayColumns();
    groupDisplayCols.forEach(function (col) {
      // newGroup.rowGroupColumn=null when working off GroupInfo, and we always display the group in the group column
      // if rowGroupColumn is present, then it's grid row grouping and we only include if configuration says so
      var displayGroupForCol = _this.usingTreeData || (groupNode.rowGroupColumn ? col.isRowGroupDisplayed(groupNode.rowGroupColumn.getId()) : false);
      if (displayGroupForCol) {
        groupNode.groupData[col.getColId()] = groupInfo.key;
      }
    });
  };
  GroupStage.prototype.getChildrenMappedKey = function (key, rowGroupColumn) {
    if (rowGroupColumn) {
      // grouping by columns
      return rowGroupColumn.getId() + '-' + key;
    }
    // tree data - we don't have rowGroupColumns
    return key;
  };
  GroupStage.prototype.setExpandedInitialValue = function (details, groupNode) {
    // if pivoting the leaf group is never expanded as we do not show leaf rows
    if (details.pivotMode && groupNode.leafGroup) {
      groupNode.expanded = false;
      return;
    }
    // use callback if exists
    var userCallback = this.gridOptionsWrapper.getIsGroupOpenByDefaultFunc();
    if (userCallback) {
      var params = {
        rowNode: groupNode,
        field: groupNode.field,
        key: groupNode.key,
        level: groupNode.level,
        rowGroupColumn: groupNode.rowGroupColumn
      };
      groupNode.expanded = userCallback(params) == true;
      return;
    }
    // use expandByDefault if exists
    var expandByDefault = details.expandByDefault;
    if (details.expandByDefault === -1) {
      groupNode.expanded = true;
      return;
    }
    // otherwise
    groupNode.expanded = groupNode.level < expandByDefault;
  };
  GroupStage.prototype.getGroupInfo = function (rowNode, details) {
    if (this.usingTreeData) {
      return this.getGroupInfoFromCallback(rowNode);
    }
    return this.getGroupInfoFromGroupColumns(rowNode, details);
  };
  GroupStage.prototype.getGroupInfoFromCallback = function (rowNode) {
    var keys = this.getDataPath ? this.getDataPath(rowNode.data) : null;
    if (keys === null || keys === undefined || keys.length === 0) {
      _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.doOnce(function () {
        return console.warn("getDataPath() should not return an empty path for data", rowNode.data);
      }, 'groupStage.getGroupInfoFromCallback');
    }
    var groupInfoMapper = function (key) {
      return {
        key: key,
        field: null,
        rowGroupColumn: null
      };
    };
    return keys ? keys.map(groupInfoMapper) : [];
  };
  GroupStage.prototype.getGroupInfoFromGroupColumns = function (rowNode, details) {
    var _this = this;
    var res = [];
    details.groupedCols.forEach(function (groupCol) {
      var key = _this.valueService.getKeyForNode(groupCol, rowNode);
      var keyExists = key !== null && key !== undefined;
      // unbalanced tree and pivot mode don't work together - not because of the grid, it doesn't make
      // mathematical sense as you are building up a cube. so if pivot mode, we put in a blank key where missing.
      // this keeps the tree balanced and hence can be represented as a group.
      if (details.pivotMode && !keyExists) {
        key = ' ';
        keyExists = true;
      }
      if (keyExists) {
        var item = {
          key: key,
          field: groupCol.getColDef().field,
          rowGroupColumn: groupCol
        };
        res.push(item);
      }
    });
    return res;
  };
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')], GroupStage.prototype, "columnModel", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('selectableService')], GroupStage.prototype, "selectableService", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('valueService')], GroupStage.prototype, "valueService", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('beans')], GroupStage.prototype, "beans", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('selectionService')], GroupStage.prototype, "selectionService", void 0);
  __decorate([_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.PostConstruct], GroupStage.prototype, "postConstruct", null);
  GroupStage = __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Bean)('groupStage')], GroupStage);
  return GroupStage;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.BeanStub);


/***/ }),

/***/ 907367:
/*!**************************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/row-grouping/dist/es6/rowGrouping/pivotColDefService.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PivotColDefService": () => (/* binding */ PivotColDefService)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __spreadArrays = undefined && undefined.__spreadArrays || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
};

var PivotColDefService = /** @class */function (_super) {
  __extends(PivotColDefService, _super);
  function PivotColDefService() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  PivotColDefService_1 = PivotColDefService;
  PivotColDefService.prototype.createPivotColumnDefs = function (uniqueValues) {
    // this is passed to the columnModel, to configure the columns and groups we show
    var pivotColumnGroupDefs = [];
    // this is used by the aggregation stage, to do the aggregation based on the pivot columns
    var pivotColumnDefs = [];
    var pivotColumns = this.columnModel.getPivotColumns();
    var valueColumns = this.columnModel.getValueColumns();
    var levelsDeep = pivotColumns.length;
    var columnIdSequence = new _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.NumberSequence();
    this.recursivelyAddGroup(pivotColumnGroupDefs, pivotColumnDefs, 1, uniqueValues, [], columnIdSequence, levelsDeep, pivotColumns);
    // additional columns that contain the aggregated total for each value column per row
    this.addRowGroupTotals(pivotColumnGroupDefs, pivotColumnDefs, valueColumns, columnIdSequence);
    // additional group columns that contain child totals for each collapsed child column / group
    this.addExpandablePivotGroups(pivotColumnGroupDefs, pivotColumnDefs, columnIdSequence);
    // additional group columns that contain an aggregated total across all child columns
    this.addPivotTotalsToGroups(pivotColumnGroupDefs, pivotColumnDefs, columnIdSequence);
    // we clone, so the colDefs in pivotColumnsGroupDefs and pivotColumnDefs are not shared. this is so that
    // any changes the user makes (via processSecondaryColumnDefinitions) don't impact the internal aggregations,
    // as these use the col defs also
    var pivotColumnDefsClone = pivotColumnDefs.map(function (colDef) {
      return _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.cloneObject(colDef);
    });
    return {
      pivotColumnGroupDefs: pivotColumnGroupDefs,
      pivotColumnDefs: pivotColumnDefsClone
    };
  };
  // parentChildren - the list of colDefs we are adding to
  // @index - how far the column is from the top (also same as pivotKeys.length)
  // @uniqueValues - the values for which we should create a col for
  // @pivotKeys - the keys for the pivot, eg if pivoting on {Language,Country} then could be {English,Ireland}
  PivotColDefService.prototype.recursivelyAddGroup = function (parentChildren, pivotColumnDefs, index, uniqueValues, pivotKeys, columnIdSequence, levelsDeep, primaryPivotColumns) {
    var _this = this;
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.iterateObject(uniqueValues, function (key, value) {
      var newPivotKeys = __spreadArrays(pivotKeys, [key]);
      var createGroup = index !== levelsDeep;
      if (createGroup) {
        var groupDef = {
          children: [],
          headerName: key,
          pivotKeys: newPivotKeys,
          columnGroupShow: 'open',
          groupId: 'pivot' + columnIdSequence.next()
        };
        parentChildren.push(groupDef);
        _this.recursivelyAddGroup(groupDef.children, pivotColumnDefs, index + 1, value, newPivotKeys, columnIdSequence, levelsDeep, primaryPivotColumns);
      } else {
        var measureColumns = _this.columnModel.getValueColumns();
        var valueGroup_1 = {
          children: [],
          headerName: key,
          pivotKeys: newPivotKeys,
          columnGroupShow: 'open',
          groupId: 'pivot' + columnIdSequence.next()
        };
        // if no value columns selected, then we insert one blank column, so the user at least sees columns
        // rendered. otherwise the grid would render with no columns (just empty groups) which would give the
        // impression that the grid is broken
        if (measureColumns.length === 0) {
          // this is the blank column, for when no value columns enabled.
          var colDef = _this.createColDef(null, '-', newPivotKeys, columnIdSequence);
          valueGroup_1.children.push(colDef);
          pivotColumnDefs.push(colDef);
        } else {
          measureColumns.forEach(function (measureColumn) {
            var columnName = _this.columnModel.getDisplayNameForColumn(measureColumn, 'header');
            var colDef = _this.createColDef(measureColumn, columnName, newPivotKeys, columnIdSequence);
            colDef.columnGroupShow = 'open';
            valueGroup_1.children.push(colDef);
            pivotColumnDefs.push(colDef);
          });
        }
        parentChildren.push(valueGroup_1);
      }
    });
    // sort by either user provided comparator, or our own one
    var primaryPivotColumnDefs = primaryPivotColumns[index - 1].getColDef();
    var userComparator = primaryPivotColumnDefs.pivotComparator;
    var comparator = this.headerNameComparator.bind(this, userComparator);
    parentChildren.sort(comparator);
  };
  PivotColDefService.prototype.addExpandablePivotGroups = function (pivotColumnGroupDefs, pivotColumnDefs, columnIdSequence) {
    var _this = this;
    if (this.gridOptionsWrapper.isSuppressExpandablePivotGroups() || this.gridOptionsWrapper.getPivotColumnGroupTotals()) {
      return;
    }
    var recursivelyAddSubTotals = function (groupDef, currentPivotColumnDefs, currentColumnIdSequence, acc) {
      var group = groupDef;
      if (group.children) {
        var childAcc_1 = new Map();
        group.children.forEach(function (grp) {
          recursivelyAddSubTotals(grp, currentPivotColumnDefs, currentColumnIdSequence, childAcc_1);
        });
        var firstGroup_1 = !group.children.some(function (child) {
          return child.children;
        });
        _this.columnModel.getValueColumns().forEach(function (valueColumn) {
          var columnName = _this.columnModel.getDisplayNameForColumn(valueColumn, 'header');
          var totalColDef = _this.createColDef(valueColumn, columnName, groupDef.pivotKeys, currentColumnIdSequence);
          totalColDef.pivotTotalColumnIds = childAcc_1.get(valueColumn.getColId());
          totalColDef.columnGroupShow = 'closed';
          totalColDef.aggFunc = valueColumn.getAggFunc();
          if (!firstGroup_1) {
            // add total colDef to group and pivot colDefs array
            var children = groupDef.children;
            children.push(totalColDef);
            currentPivotColumnDefs.push(totalColDef);
          }
        });
        _this.merge(acc, childAcc_1);
      } else {
        var def = groupDef;
        // check that value column exists, i.e. aggFunc is supplied
        if (!def.pivotValueColumn) {
          return;
        }
        var pivotValueColId = def.pivotValueColumn.getColId();
        var arr = acc.has(pivotValueColId) ? acc.get(pivotValueColId) : [];
        arr.push(def.colId);
        acc.set(pivotValueColId, arr);
      }
    };
    pivotColumnGroupDefs.forEach(function (groupDef) {
      recursivelyAddSubTotals(groupDef, pivotColumnDefs, columnIdSequence, new Map());
    });
  };
  PivotColDefService.prototype.addPivotTotalsToGroups = function (pivotColumnGroupDefs, pivotColumnDefs, columnIdSequence) {
    var _this = this;
    if (!this.gridOptionsWrapper.getPivotColumnGroupTotals()) {
      return;
    }
    var insertAfter = this.gridOptionsWrapper.getPivotColumnGroupTotals() === 'after';
    var valueCols = this.columnModel.getValueColumns();
    var aggFuncs = valueCols.map(function (valueCol) {
      return valueCol.getAggFunc();
    });
    // don't add pivot totals if there is less than 1 aggFunc or they are not all the same
    if (!aggFuncs || aggFuncs.length < 1 || !this.sameAggFuncs(aggFuncs)) {
      // console.warn('AG Grid: aborting adding pivot total columns - value columns require same aggFunc');
      return;
    }
    // arbitrarily select a value column to use as a template for pivot columns
    var valueColumn = valueCols[0];
    pivotColumnGroupDefs.forEach(function (groupDef) {
      _this.recursivelyAddPivotTotal(groupDef, pivotColumnDefs, columnIdSequence, valueColumn, insertAfter);
    });
  };
  PivotColDefService.prototype.recursivelyAddPivotTotal = function (groupDef, pivotColumnDefs, columnIdSequence, valueColumn, insertAfter) {
    var _this = this;
    var group = groupDef;
    if (!group.children) {
      var def = groupDef;
      return def.colId ? [def.colId] : null;
    }
    var colIds = [];
    // need to recurse children first to obtain colIds used in the aggregation stage
    group.children.forEach(function (grp) {
      var childColIds = _this.recursivelyAddPivotTotal(grp, pivotColumnDefs, columnIdSequence, valueColumn, insertAfter);
      if (childColIds) {
        colIds = colIds.concat(childColIds);
      }
    });
    // only add total colDef if there is more than 1 child node
    if (group.children.length > 1) {
      var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
      var headerName = localeTextFunc('pivotColumnGroupTotals', 'Total');
      //create total colDef using an arbitrary value column as a template
      var totalColDef = this.createColDef(valueColumn, headerName, groupDef.pivotKeys, columnIdSequence);
      totalColDef.pivotTotalColumnIds = colIds;
      totalColDef.aggFunc = valueColumn.getAggFunc();
      // add total colDef to group and pivot colDefs array
      var children = groupDef.children;
      insertAfter ? children.push(totalColDef) : children.unshift(totalColDef);
      pivotColumnDefs.push(totalColDef);
    }
    return colIds;
  };
  PivotColDefService.prototype.addRowGroupTotals = function (pivotColumnGroupDefs, pivotColumnDefs, valueColumns, columnIdSequence) {
    var _this = this;
    if (!this.gridOptionsWrapper.getPivotRowTotals()) {
      return;
    }
    var insertAfter = this.gridOptionsWrapper.getPivotRowTotals() === 'after';
    // order of row group totals depends on position
    var valueCols = insertAfter ? valueColumns.slice() : valueColumns.slice().reverse();
    var _loop_1 = function (i) {
      var valueCol = valueCols[i];
      var colIds = [];
      pivotColumnGroupDefs.forEach(function (groupDef) {
        colIds = colIds.concat(_this.extractColIdsForValueColumn(groupDef, valueCol));
      });
      this_1.createRowGroupTotal(pivotColumnGroupDefs, pivotColumnDefs, [], columnIdSequence, valueCol, colIds, insertAfter);
    };
    var this_1 = this;
    for (var i = 0; i < valueCols.length; i++) {
      _loop_1(i);
    }
  };
  PivotColDefService.prototype.extractColIdsForValueColumn = function (groupDef, valueColumn) {
    var _this = this;
    var group = groupDef;
    if (!group.children) {
      var colDef = group;
      return colDef.pivotValueColumn === valueColumn && colDef.colId ? [colDef.colId] : [];
    }
    var colIds = [];
    group.children.forEach(function (grp) {
      _this.extractColIdsForValueColumn(grp, valueColumn);
      var childColIds = _this.extractColIdsForValueColumn(grp, valueColumn);
      colIds = colIds.concat(childColIds);
    });
    return colIds;
  };
  PivotColDefService.prototype.createRowGroupTotal = function (parentChildren, pivotColumnDefs, pivotKeys, columnIdSequence, valueColumn, colIds, insertAfter) {
    var newPivotKeys = pivotKeys.slice(0);
    var measureColumns = this.columnModel.getValueColumns();
    var valueGroup = {
      children: [],
      pivotKeys: newPivotKeys,
      groupId: PivotColDefService_1.PIVOT_ROW_TOTAL_PREFIX + columnIdSequence.next()
    };
    if (measureColumns.length === 0) {
      var colDef = this.createColDef(null, '-', newPivotKeys, columnIdSequence);
      valueGroup.children.push(colDef);
      pivotColumnDefs.push(colDef);
    } else {
      var columnName = this.columnModel.getDisplayNameForColumn(valueColumn, 'header');
      var colDef = this.createColDef(valueColumn, columnName, newPivotKeys, columnIdSequence);
      colDef.pivotTotalColumnIds = colIds;
      valueGroup.children.push(colDef);
      pivotColumnDefs.push(colDef);
    }
    insertAfter ? parentChildren.push(valueGroup) : parentChildren.unshift(valueGroup);
  };
  PivotColDefService.prototype.createColDef = function (valueColumn, headerName, pivotKeys, columnIdSequence) {
    var colDef = {};
    if (valueColumn) {
      var colDefToCopy = valueColumn.getColDef();
      _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.assign(colDef, colDefToCopy);
      // even if original column was hidden, we always show the pivot value column, otherwise it would be
      // very confusing for people thinking the pivot is broken
      colDef.hide = false;
    }
    colDef.headerName = headerName;
    colDef.colId = 'pivot_' + columnIdSequence.next();
    // pivot columns repeat over field, so it makes sense to use the unique id instead. For example if you want to
    // assign values to pinned bottom rows using setPinnedBottomRowData the value service will use this colId.
    colDef.field = colDef.colId;
    colDef.pivotKeys = pivotKeys;
    colDef.pivotValueColumn = valueColumn;
    colDef.filter = false;
    return colDef;
  };
  PivotColDefService.prototype.sameAggFuncs = function (aggFuncs) {
    if (aggFuncs.length == 1) {
      return true;
    }
    //check if all aggFunc's match
    for (var i = 1; i < aggFuncs.length; i++) {
      if (aggFuncs[i] !== aggFuncs[0]) {
        return false;
      }
    }
    return true;
  };
  PivotColDefService.prototype.headerNameComparator = function (userComparator, a, b) {
    if (userComparator) {
      return userComparator(a.headerName, b.headerName);
    } else {
      if (a.headerName && !b.headerName) {
        return 1;
      } else if (!a.headerName && b.headerName) {
        return -1;
      }
      // slightly naff here - just to satify typescript
      // really should be &&, but if so ts complains
      // the above if/else checks would deal with either being falsy, so at this stage if either are falsy, both are
      // ..still naff though
      if (!a.headerName || !b.headerName) {
        return 0;
      }
      if (a.headerName < b.headerName) {
        return -1;
      }
      if (a.headerName > b.headerName) {
        return 1;
      }
      return 0;
    }
  };
  PivotColDefService.prototype.merge = function (m1, m2) {
    m2.forEach(function (value, key, map) {
      var existingList = m1.has(key) ? m1.get(key) : [];
      var updatedList = __spreadArrays(existingList, value);
      m1.set(key, updatedList);
    });
  };
  var PivotColDefService_1;
  PivotColDefService.PIVOT_ROW_TOTAL_PREFIX = 'PivotRowTotal_';
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')], PivotColDefService.prototype, "columnModel", void 0);
  PivotColDefService = PivotColDefService_1 = __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Bean)('pivotColDefService')], PivotColDefService);
  return PivotColDefService;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.BeanStub);


/***/ }),

/***/ 473845:
/*!******************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/row-grouping/dist/es6/rowGrouping/pivotStage.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PivotStage": () => (/* binding */ PivotStage)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var PivotStage = /** @class */function (_super) {
  __extends(PivotStage, _super);
  function PivotStage() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.uniqueValues = {};
    return _this;
  }
  PivotStage.prototype.execute = function (params) {
    var rootNode = params.rowNode;
    var changedPath = params.changedPath;
    if (this.columnModel.isPivotActive()) {
      this.executePivotOn(rootNode, changedPath);
    } else {
      this.executePivotOff(changedPath);
    }
  };
  PivotStage.prototype.executePivotOff = function (changedPath) {
    this.aggregationColumnsHashLastTime = null;
    this.uniqueValues = {};
    if (this.columnModel.isSecondaryColumnsPresent()) {
      this.columnModel.setSecondaryColumns(null, "rowModelUpdated");
      if (changedPath) {
        changedPath.setInactive();
      }
    }
  };
  PivotStage.prototype.executePivotOn = function (rootNode, changedPath) {
    var uniqueValues = this.bucketUpRowNodes(rootNode);
    var uniqueValuesChanged = this.setUniqueValues(uniqueValues);
    var aggregationColumns = this.columnModel.getValueColumns();
    var aggregationColumnsHash = aggregationColumns.map(function (column) {
      return column.getId();
    }).join('#');
    var aggregationFuncsHash = aggregationColumns.map(function (column) {
      return column.getAggFunc().toString();
    }).join('#');
    var aggregationColumnsChanged = this.aggregationColumnsHashLastTime !== aggregationColumnsHash;
    var aggregationFuncsChanged = this.aggregationFuncsHashLastTime !== aggregationFuncsHash;
    this.aggregationColumnsHashLastTime = aggregationColumnsHash;
    this.aggregationFuncsHashLastTime = aggregationFuncsHash;
    if (uniqueValuesChanged || aggregationColumnsChanged || aggregationFuncsChanged) {
      var _a = this.pivotColDefService.createPivotColumnDefs(this.uniqueValues),
        pivotColumnGroupDefs = _a.pivotColumnGroupDefs,
        pivotColumnDefs = _a.pivotColumnDefs;
      this.pivotColumnDefs = pivotColumnDefs;
      this.columnModel.setSecondaryColumns(pivotColumnGroupDefs, "rowModelUpdated");
      // because the secondary columns have changed, then the aggregation needs to visit the whole
      // tree again, so we make the changedPath not active, to force aggregation to visit all paths.
      if (changedPath) {
        changedPath.setInactive();
      }
    }
  };
  PivotStage.prototype.setUniqueValues = function (newValues) {
    var json1 = JSON.stringify(newValues);
    var json2 = JSON.stringify(this.uniqueValues);
    var uniqueValuesChanged = json1 !== json2;
    // we only continue the below if the unique values are different, as otherwise
    // the result will be the same as the last time we did it
    if (uniqueValuesChanged) {
      this.uniqueValues = newValues;
      return true;
    } else {
      return false;
    }
  };
  // returns true if values were different
  PivotStage.prototype.bucketUpRowNodes = function (rootNode) {
    var _this = this;
    // accessed from inside inner function
    var uniqueValues = {};
    // finds all leaf groups and calls mapRowNode with it
    var recursivelySearchForLeafNodes = function (rowNode) {
      if (rowNode.leafGroup) {
        _this.bucketRowNode(rowNode, uniqueValues);
      } else {
        rowNode.childrenAfterFilter.forEach(function (child) {
          recursivelySearchForLeafNodes(child);
        });
      }
    };
    recursivelySearchForLeafNodes(rootNode);
    return uniqueValues;
  };
  PivotStage.prototype.bucketRowNode = function (rowNode, uniqueValues) {
    var pivotColumns = this.columnModel.getPivotColumns();
    if (pivotColumns.length === 0) {
      rowNode.childrenMapped = null;
      return;
    }
    rowNode.childrenMapped = this.bucketChildren(rowNode.childrenAfterFilter, pivotColumns, 0, uniqueValues);
  };
  PivotStage.prototype.bucketChildren = function (children, pivotColumns, pivotIndex, uniqueValues) {
    var _this = this;
    var mappedChildren = {};
    var pivotColumn = pivotColumns[pivotIndex];
    // map the children out based on the pivot column
    children.forEach(function (child) {
      var key = _this.valueService.getKeyForNode(pivotColumn, child);
      if (_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.missing(key)) {
        key = '';
      }
      if (!uniqueValues[key]) {
        uniqueValues[key] = {};
      }
      if (!mappedChildren[key]) {
        mappedChildren[key] = [];
      }
      mappedChildren[key].push(child);
    });
    // if it's the last pivot column, return as is, otherwise go one level further in the map
    if (pivotIndex === pivotColumns.length - 1) {
      return mappedChildren;
    } else {
      var result_1 = {};
      _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.iterateObject(mappedChildren, function (key, value) {
        result_1[key] = _this.bucketChildren(value, pivotColumns, pivotIndex + 1, uniqueValues[key]);
      });
      return result_1;
    }
  };
  PivotStage.prototype.getPivotColumnDefs = function () {
    return this.pivotColumnDefs;
  };
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('valueService')], PivotStage.prototype, "valueService", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')], PivotStage.prototype, "columnModel", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('pivotColDefService')], PivotStage.prototype, "pivotColDefService", void 0);
  PivotStage = __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Bean)('pivotStage')], PivotStage);
  return PivotStage;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.BeanStub);


/***/ }),

/***/ 369153:
/*!******************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/set-filter/dist/es6/clientSideValueExtractor.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ClientSideValuesExtractor": () => (/* binding */ ClientSideValuesExtractor)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);

var ClientSideValuesExtractor = /** @class */function () {
  function ClientSideValuesExtractor(rowModel, filterParams) {
    this.rowModel = rowModel;
    this.filterParams = filterParams;
  }
  ClientSideValuesExtractor.prototype.extractUniqueValues = function (predicate) {
    var _this = this;
    var values = new Set();
    var keyCreator = this.filterParams.colDef.keyCreator;
    this.rowModel.forEachLeafNode(function (node) {
      // only pull values from rows that have data. this means we skip filler group nodes.
      if (!node.data || !predicate(node)) {
        return;
      }
      var value = _this.filterParams.valueGetter(node);
      if (keyCreator) {
        var params = {
          value: value,
          colDef: _this.filterParams.colDef,
          column: _this.filterParams.column,
          node: node,
          data: node.data,
          api: _this.filterParams.api,
          columnApi: _this.filterParams.columnApi,
          context: _this.filterParams.context
        };
        value = keyCreator(params);
      }
      value = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.makeNull(value);
      if (value != null && Array.isArray(value)) {
        _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.forEach(value, function (x) {
          var formatted = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.toStringOrNull(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.makeNull(x));
          values.add(formatted);
        });
      } else {
        values.add(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.toStringOrNull(value));
      }
    });
    return _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.values(values);
  };
  return ClientSideValuesExtractor;
}();


/***/ }),

/***/ 585506:
/*!**********************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/set-filter/dist/es6/main.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SetFilter": () => (/* reexport safe */ _setFilter_setFilter__WEBPACK_IMPORTED_MODULE_1__.SetFilter),
/* harmony export */   "SetFilterModule": () => (/* reexport safe */ _setFilterModule__WEBPACK_IMPORTED_MODULE_0__.SetFilterModule)
/* harmony export */ });
/* harmony import */ var _setFilterModule__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setFilterModule */ 223526);
/* harmony import */ var _setFilter_setFilter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./setFilter/setFilter */ 952494);



/***/ }),

/***/ 223526:
/*!*********************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/set-filter/dist/es6/setFilterModule.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SetFilterModule": () => (/* binding */ SetFilterModule)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
/* harmony import */ var _ag_grid_enterprise_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ag-grid-enterprise/core */ 704796);
/* harmony import */ var _setFilter_setFilter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./setFilter/setFilter */ 952494);
/* harmony import */ var _setFilter_setFloatingFilter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./setFilter/setFloatingFilter */ 428092);




var SetFilterModule = {
  moduleName: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.SetFilterModule,
  beans: [],
  userComponents: [{
    componentName: 'agSetColumnFilter',
    componentClass: _setFilter_setFilter__WEBPACK_IMPORTED_MODULE_2__.SetFilter
  }, {
    componentName: 'agSetColumnFloatingFilter',
    componentClass: _setFilter_setFloatingFilter__WEBPACK_IMPORTED_MODULE_3__.SetFloatingFilterComp
  }],
  dependantModules: [_ag_grid_enterprise_core__WEBPACK_IMPORTED_MODULE_1__.EnterpriseCoreModule]
};

/***/ }),

/***/ 615305:
/*!**************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/set-filter/dist/es6/setFilter/localeText.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DEFAULT_LOCALE_TEXT": () => (/* binding */ DEFAULT_LOCALE_TEXT)
/* harmony export */ });
var DEFAULT_LOCALE_TEXT = {
  loadingOoo: 'Loading...',
  blanks: '(Blanks)',
  searchOoo: 'Search...',
  selectAll: '(Select All)',
  selectAllSearchResults: '(Select All Search Results)',
  noMatches: 'No matches.'
};

/***/ }),

/***/ 952494:
/*!*************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/set-filter/dist/es6/setFilter/setFilter.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SetFilter": () => (/* binding */ SetFilter)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
/* harmony import */ var _setValueModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./setValueModel */ 345089);
/* harmony import */ var _setFilterListItem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./setFilterListItem */ 584088);
/* harmony import */ var _localeText__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./localeText */ 615305);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};




var SetFilter = /** @class */function (_super) {
  __extends(SetFilter, _super);
  function SetFilter() {
    var _this = _super.call(this, 'setFilter') || this;
    _this.valueModel = null;
    _this.setFilterParams = null;
    _this.virtualList = null;
    // To make the filtering super fast, we store the values in an object, and check for the boolean value.
    // Although Set would be a more natural choice of data structure, its performance across browsers is
    // significantly worse than using an object: https://jsbench.me/hdk91jbw1h/
    _this.appliedModelValues = null;
    return _this;
  }
  SetFilter.prototype.postConstruct = function () {
    _super.prototype.postConstruct.call(this);
    this.positionableFeature = new _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.PositionableFeature(this.eSetFilterList, {
      forcePopupParentAsOffsetParent: true
    });
    this.createBean(this.positionableFeature);
  };
  // unlike the simple filters, nothing in the set filter UI shows/hides.
  // maybe this method belongs in abstractSimpleFilter???
  SetFilter.prototype.updateUiVisibility = function () {};
  SetFilter.prototype.createBodyTemplate = function () {
    return (/* html */"\n            <div class=\"ag-set-filter\">\n                <div ref=\"eFilterLoading\" class=\"ag-filter-loading ag-hidden\">" + this.translateForSetFilter('loadingOoo') + "</div>\n                <ag-input-text-field class=\"ag-mini-filter\" ref=\"eMiniFilter\"></ag-input-text-field>\n                <div ref=\"eFilterNoMatches\" class=\"ag-filter-no-matches ag-hidden\">" + this.translateForSetFilter('noMatches') + "</div>\n                <div ref=\"eSetFilterList\" class=\"ag-set-filter-list\" role=\"presentation\"></div>\n            </div>"
    );
  };
  SetFilter.prototype.handleKeyDown = function (e) {
    _super.prototype.handleKeyDown.call(this, e);
    if (e.defaultPrevented) {
      return;
    }
    switch (e.which || e.keyCode) {
      case _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.KeyCode.SPACE:
        this.handleKeySpace(e);
        break;
      case _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.KeyCode.ENTER:
        this.handleKeyEnter(e);
        break;
    }
  };
  SetFilter.prototype.handleKeySpace = function (e) {
    if (!this.eSetFilterList.contains(document.activeElement) || !this.virtualList) {
      return;
    }
    var currentItem = this.virtualList.getLastFocusedRow();
    if (currentItem != null) {
      var component = this.virtualList.getComponentAt(currentItem);
      if (component) {
        e.preventDefault();
        component.toggleSelected();
      }
    }
  };
  SetFilter.prototype.handleKeyEnter = function (e) {
    if (!this.setFilterParams) {
      return;
    }
    if (this.setFilterParams.excelMode) {
      e.preventDefault();
      // in Excel Mode, hitting Enter is the same as pressing the Apply button
      this.onBtApply(false, false, e);
      if (this.setFilterParams.excelMode === 'mac') {
        // in Mac version, select all the input text
        this.eMiniFilter.getInputElement().select();
      }
    }
  };
  SetFilter.prototype.getCssIdentifier = function () {
    return 'set-filter';
  };
  SetFilter.prototype.setModelAndRefresh = function (values) {
    var _this = this;
    return this.valueModel ? this.valueModel.setModel(values).then(function () {
      return _this.refresh();
    }) : _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.AgPromise.resolve();
  };
  SetFilter.prototype.resetUiToDefaults = function () {
    this.setMiniFilter(null);
    return this.setModelAndRefresh(null);
  };
  SetFilter.prototype.setModelIntoUi = function (model) {
    this.setMiniFilter(null);
    if (model instanceof Array) {
      var message_1 = 'AG Grid: The Set Filter Model is no longer an array and models as arrays are ' + 'deprecated. Please check the docs on what the set filter model looks like. Future versions of ' + 'AG Grid will have the array version of the model removed.';
      _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.doOnce(function () {
        return console.warn(message_1);
      }, 'setFilter.modelAsArray');
    }
    // also supporting old filter model for backwards compatibility
    var values = model == null ? null : model instanceof Array ? model : model.values;
    return this.setModelAndRefresh(values);
  };
  SetFilter.prototype.getModelFromUi = function () {
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    var values = this.valueModel.getModel();
    if (!values) {
      return null;
    }
    if (this.gridOptionsWrapper.isEnableOldSetFilterModel()) {
      // this is a hack, it breaks casting rules, to apply with old model
      return values;
    }
    return {
      values: values,
      filterType: this.getFilterType()
    };
  };
  SetFilter.prototype.getModel = function () {
    return _super.prototype.getModel.call(this);
  };
  SetFilter.prototype.getFilterType = function () {
    return 'set';
  };
  SetFilter.prototype.getValueModel = function () {
    return this.valueModel;
  };
  SetFilter.prototype.areModelsEqual = function (a, b) {
    // both are missing
    if (a == null && b == null) {
      return true;
    }
    return a != null && b != null && _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.areEqual(a.values, b.values);
  };
  SetFilter.prototype.setParams = function (params) {
    var _this = this;
    this.applyExcelModeOptions(params);
    _super.prototype.setParams.call(this, params);
    this.checkSetFilterDeprecatedParams(params);
    this.setFilterParams = params;
    this.valueModel = new _setValueModel__WEBPACK_IMPORTED_MODULE_1__.SetValueModel(params, function (loading) {
      return _this.showOrHideLoadingScreen(loading);
    }, this.valueFormatterService, function (key) {
      return _this.translateForSetFilter(key);
    });
    this.initialiseFilterBodyUi();
    if (params.rowModel.getType() === _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Constants.ROW_MODEL_TYPE_CLIENT_SIDE && !params.values && !params.suppressSyncValuesAfterDataChange) {
      this.addEventListenersForDataChanges();
    }
  };
  SetFilter.prototype.applyExcelModeOptions = function (params) {
    // apply default options to match Excel behaviour, unless they have already been specified
    if (params.excelMode === 'windows') {
      if (!params.buttons) {
        params.buttons = ['apply', 'cancel'];
      }
      if (params.closeOnApply == null) {
        params.closeOnApply = true;
      }
    } else if (params.excelMode === 'mac') {
      if (!params.buttons) {
        params.buttons = ['reset'];
      }
      if (params.applyMiniFilterWhileTyping == null) {
        params.applyMiniFilterWhileTyping = true;
      }
      if (params.debounceMs == null) {
        params.debounceMs = 500;
      }
    }
  };
  SetFilter.prototype.checkSetFilterDeprecatedParams = function (params) {
    if (params.syncValuesLikeExcel) {
      var message_2 = 'AG Grid: since version 22.x, the Set Filter param syncValuesLikeExcel is no longer' + ' used as this is the default behaviour. To turn this default behaviour off, use the' + ' param suppressSyncValuesAfterDataChange';
      _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.doOnce(function () {
        return console.warn(message_2);
      }, 'syncValuesLikeExcel deprecated');
    }
    if (params.selectAllOnMiniFilter) {
      var message_3 = 'AG Grid: since version 22.x, the Set Filter param selectAllOnMiniFilter is no longer' + ' used as this is the default behaviour.';
      _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.doOnce(function () {
        return console.warn(message_3);
      }, 'selectAllOnMiniFilter deprecated');
    }
    if (params.suppressSyncValuesAfterDataChange) {
      var message_4 = 'AG Grid: since version 23.1, the Set Filter param suppressSyncValuesAfterDataChange has' + ' been deprecated and will be removed in a future major release.';
      _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.doOnce(function () {
        return console.warn(message_4);
      }, 'suppressSyncValuesAfterDataChange deprecated');
    }
    if (params.suppressRemoveEntries) {
      var message_5 = 'AG Grid: since version 23.1, the Set Filter param suppressRemoveEntries has' + ' been deprecated and will be removed in a future major release.';
      _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.doOnce(function () {
        return console.warn(message_5);
      }, 'suppressRemoveEntries deprecated');
    }
  };
  SetFilter.prototype.addEventListenersForDataChanges = function () {
    var _this = this;
    this.addManagedListener(this.eventService, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_ROW_DATA_UPDATED, function () {
      return _this.syncAfterDataChange();
    });
    this.addManagedListener(this.eventService, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_CELL_VALUE_CHANGED, function (event) {
      // only interested in changes to do with this column
      if (_this.setFilterParams && event.column === _this.setFilterParams.column) {
        _this.syncAfterDataChange();
      }
    });
  };
  SetFilter.prototype.syncAfterDataChange = function (refreshValues, keepSelection) {
    var _this = this;
    if (refreshValues === void 0) {
      refreshValues = true;
    }
    if (keepSelection === void 0) {
      keepSelection = true;
    }
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    var promise = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.AgPromise.resolve();
    if (refreshValues) {
      promise = this.valueModel.refreshValues(keepSelection);
    } else if (!keepSelection) {
      promise = this.valueModel.setModel(null);
    }
    return promise.then(function () {
      _this.refresh();
      _this.onBtApply(false, true);
    });
  };
  /** @deprecated since version 23.2. The loading screen is displayed automatically when the set filter is retrieving values. */
  SetFilter.prototype.setLoading = function (loading) {
    var message = 'AG Grid: since version 23.2, setLoading has been deprecated. The loading screen is displayed automatically when the set filter is retrieving values.';
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.doOnce(function () {
      return console.warn(message);
    }, 'setFilter.setLoading');
    this.showOrHideLoadingScreen(loading);
  };
  SetFilter.prototype.showOrHideLoadingScreen = function (isLoading) {
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eFilterLoading, isLoading);
  };
  SetFilter.prototype.initialiseFilterBodyUi = function () {
    this.initVirtualList();
    this.initMiniFilter();
  };
  SetFilter.prototype.initVirtualList = function () {
    var _this = this;
    if (!this.setFilterParams) {
      throw new Error('Set filter params have not been provided.');
    }
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    var virtualList = this.virtualList = this.createBean(new _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.VirtualList('filter'));
    var eSetFilterList = this.getRefElement('eSetFilterList');
    if (eSetFilterList) {
      eSetFilterList.appendChild(virtualList.getGui());
    }
    var cellHeight = this.setFilterParams.cellHeight;
    if (cellHeight != null) {
      virtualList.setRowHeight(cellHeight);
    }
    virtualList.setComponentCreator(function (value) {
      return _this.createSetListItem(value);
    });
    var model;
    if (this.setFilterParams.suppressSelectAll) {
      model = new ModelWrapper(this.valueModel);
    } else {
      model = new ModelWrapperWithSelectAll(this.valueModel, function () {
        return _this.isSelectAllSelected();
      });
    }
    virtualList.setModel(model);
  };
  SetFilter.prototype.getSelectAllLabel = function () {
    if (!this.setFilterParams) {
      throw new Error('Set filter params have not been provided.');
    }
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    var key = this.valueModel.getMiniFilter() == null || !this.setFilterParams.excelMode ? 'selectAll' : 'selectAllSearchResults';
    return this.translateForSetFilter(key);
  };
  SetFilter.prototype.createSetListItem = function (value) {
    var _this = this;
    if (!this.setFilterParams) {
      throw new Error('Set filter params have not been provided.');
    }
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    var listItem;
    if (value === SetFilter.SELECT_ALL_VALUE) {
      listItem = this.createBean(new _setFilterListItem__WEBPACK_IMPORTED_MODULE_2__.SetFilterListItem(function () {
        return _this.getSelectAllLabel();
      }, this.setFilterParams, function (key) {
        return _this.translateForSetFilter(key);
      }, this.isSelectAllSelected()));
      listItem.addEventListener(_setFilterListItem__WEBPACK_IMPORTED_MODULE_2__.SetFilterListItem.EVENT_SELECTION_CHANGED, function (e) {
        return _this.onSelectAll(e.isSelected);
      });
      return listItem;
    }
    listItem = this.createBean(new _setFilterListItem__WEBPACK_IMPORTED_MODULE_2__.SetFilterListItem(value, this.setFilterParams, function (key) {
      return _this.translateForSetFilter(key);
    }, this.valueModel.isValueSelected(value)));
    listItem.addEventListener(_setFilterListItem__WEBPACK_IMPORTED_MODULE_2__.SetFilterListItem.EVENT_SELECTION_CHANGED, function (e) {
      return _this.onItemSelected(value, e.isSelected);
    });
    return listItem;
  };
  SetFilter.prototype.initMiniFilter = function () {
    var _this = this;
    if (!this.setFilterParams) {
      throw new Error('Set filter params have not been provided.');
    }
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    var _a = this,
      eMiniFilter = _a.eMiniFilter,
      gridOptionsWrapper = _a.gridOptionsWrapper;
    var translate = gridOptionsWrapper.getLocaleTextFunc();
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(eMiniFilter.getGui(), !this.setFilterParams.suppressMiniFilter);
    eMiniFilter.setValue(this.valueModel.getMiniFilter());
    eMiniFilter.onValueChange(function () {
      return _this.onMiniFilterInput();
    });
    eMiniFilter.setInputAriaLabel(translate('ariaSearchFilterValues', 'Search filter values'));
    this.addManagedListener(eMiniFilter.getInputElement(), 'keypress', function (e) {
      return _this.onMiniFilterKeyPress(e);
    });
  };
  // we need to have the GUI attached before we can draw the virtual rows, as the
  // virtual row logic needs info about the GUI state
  SetFilter.prototype.afterGuiAttached = function (params) {
    if (!this.setFilterParams) {
      throw new Error('Set filter params have not been provided.');
    }
    _super.prototype.afterGuiAttached.call(this, params);
    this.refreshVirtualList();
    if (this.setFilterParams.excelMode) {
      this.resetUiToActiveModel();
    }
    var eMiniFilter = this.eMiniFilter;
    eMiniFilter.setInputPlaceholder(this.translateForSetFilter('searchOoo'));
    if (!params || !params.suppressFocus) {
      eMiniFilter.getFocusableElement().focus();
    }
    var resizable = !!(params && params.container === 'floatingFilter');
    var resizableObject;
    if (this.gridOptionsWrapper.isEnableRtl()) {
      resizableObject = {
        bottom: true,
        bottomLeft: true,
        left: true
      };
    } else {
      resizableObject = {
        bottom: true,
        bottomRight: true,
        right: true
      };
    }
    if (resizable) {
      this.positionableFeature.restoreLastSize();
      this.positionableFeature.setResizable(resizableObject);
    } else {
      this.positionableFeature.removeSizeFromEl();
      this.positionableFeature.setResizable(false);
    }
  };
  SetFilter.prototype.applyModel = function () {
    if (!this.setFilterParams) {
      throw new Error('Set filter params have not been provided.');
    }
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    if (this.setFilterParams.excelMode && this.valueModel.isEverythingVisibleSelected()) {
      // In Excel, if the filter is applied with all visible values selected, then any active filter on the
      // column is removed. This ensures the filter is removed in this situation.
      this.valueModel.selectAllMatchingMiniFilter();
    }
    var result = _super.prototype.applyModel.call(this);
    // keep appliedModelValues in sync with the applied model
    var appliedModel = this.getModel();
    if (appliedModel) {
      this.appliedModelValues = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.reduce(appliedModel.values, function (values, value) {
        values[String(value)] = true;
        return values;
      }, {});
    } else {
      this.appliedModelValues = null;
    }
    return result;
  };
  SetFilter.prototype.isModelValid = function (model) {
    return this.setFilterParams && this.setFilterParams.excelMode ? model == null || model.values.length > 0 : true;
  };
  SetFilter.prototype.doesFilterPass = function (params) {
    var _this = this;
    if (!this.setFilterParams || !this.valueModel || !this.appliedModelValues) {
      return true;
    }
    var _a = this.setFilterParams,
      valueGetter = _a.valueGetter,
      keyCreator = _a.colDef.keyCreator;
    var value = valueGetter(params.node);
    if (keyCreator) {
      var keyParams = {
        value: value,
        colDef: this.setFilterParams.colDef,
        column: this.setFilterParams.column,
        node: params.node,
        data: params.data,
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        context: this.gridOptionsWrapper.getContext()
      };
      value = keyCreator(keyParams);
    }
    value = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.makeNull(value);
    if (Array.isArray(value)) {
      return _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.some(value, function (v) {
        return _this.appliedModelValues[_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.makeNull(v)] === true;
      });
    }
    // Comparing against a value performs better than just checking for undefined
    // https://jsbench.me/hdk91jbw1h/
    return this.appliedModelValues[value] === true;
  };
  SetFilter.prototype.onNewRowsLoaded = function () {
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    var valuesType = this.valueModel.getValuesType();
    var keepSelection = this.isNewRowsActionKeep();
    this.syncAfterDataChange(valuesType === _setValueModel__WEBPACK_IMPORTED_MODULE_1__.SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES, keepSelection);
  };
  //noinspection JSUnusedGlobalSymbols
  /**
   * Public method provided so the user can change the value of the filter once
   * the filter has been already started
   * @param options The options to use.
   */
  SetFilter.prototype.setFilterValues = function (options) {
    var _this = this;
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    this.valueModel.overrideValues(options, this.isNewRowsActionKeep()).then(function () {
      _this.refresh();
      _this.onUiChanged();
    });
  };
  //noinspection JSUnusedGlobalSymbols
  /**
   * Public method provided so the user can reset the values of the filter once that it has started.
   */
  SetFilter.prototype.resetFilterValues = function () {
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    this.valueModel.setValuesType(_setValueModel__WEBPACK_IMPORTED_MODULE_1__.SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES);
    this.syncAfterDataChange(true, this.isNewRowsActionKeep());
  };
  SetFilter.prototype.refreshFilterValues = function () {
    var _this = this;
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    // the model is still being initialised
    if (!this.valueModel.isInitialised()) {
      return;
    }
    this.valueModel.refreshValues().then(function () {
      _this.refresh();
      _this.onUiChanged();
    });
  };
  SetFilter.prototype.onAnyFilterChanged = function () {
    var _this = this;
    // don't block the current action when updating the values for this filter
    setTimeout(function () {
      if (!_this.isAlive()) {
        return;
      }
      if (!_this.valueModel) {
        throw new Error('Value model has not been created.');
      }
      _this.valueModel.refreshAfterAnyFilterChanged().then(function () {
        return _this.refresh();
      });
    }, 0);
  };
  SetFilter.prototype.onMiniFilterInput = function () {
    if (!this.setFilterParams) {
      throw new Error('Set filter params have not been provided.');
    }
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    if (this.valueModel.setMiniFilter(this.eMiniFilter.getValue())) {
      if (this.setFilterParams.applyMiniFilterWhileTyping) {
        this.filterOnAllVisibleValues(false);
      } else {
        this.updateUiAfterMiniFilterChange();
      }
    }
  };
  SetFilter.prototype.updateUiAfterMiniFilterChange = function () {
    if (!this.setFilterParams) {
      throw new Error('Set filter params have not been provided.');
    }
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    if (this.setFilterParams.excelMode) {
      if (this.valueModel.getMiniFilter() == null) {
        this.resetUiToActiveModel();
      } else {
        this.valueModel.selectAllMatchingMiniFilter(true);
        this.refresh();
        this.onUiChanged();
      }
    } else {
      this.refresh();
    }
    this.showOrHideResults();
  };
  SetFilter.prototype.showOrHideResults = function () {
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    var hideResults = this.valueModel.getMiniFilter() != null && this.valueModel.getDisplayedValueCount() < 1;
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eNoMatches, hideResults);
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eSetFilterList, !hideResults);
  };
  SetFilter.prototype.resetUiToActiveModel = function () {
    var _this = this;
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    this.eMiniFilter.setValue(null, true);
    this.valueModel.setMiniFilter(null);
    this.setModelIntoUi(this.getModel()).then(function () {
      return _this.onUiChanged(false, 'prevent');
    });
  };
  SetFilter.prototype.onMiniFilterKeyPress = function (e) {
    if (_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.isKeyPressed(e, _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.KeyCode.ENTER) && (!this.setFilterParams || !this.setFilterParams.excelMode)) {
      this.filterOnAllVisibleValues();
    }
  };
  SetFilter.prototype.filterOnAllVisibleValues = function (applyImmediately) {
    if (applyImmediately === void 0) {
      applyImmediately = true;
    }
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    this.valueModel.selectAllMatchingMiniFilter(true);
    this.refresh();
    this.onUiChanged(false, applyImmediately ? 'immediately' : 'debounce');
    this.showOrHideResults();
  };
  SetFilter.prototype.focusRowIfAlive = function (rowIndex) {
    var _this = this;
    if (rowIndex == null) {
      return;
    }
    window.setTimeout(function () {
      if (!_this.virtualList) {
        throw new Error('Virtual list has not been created.');
      }
      if (_this.isAlive()) {
        _this.virtualList.focusRow(rowIndex);
      }
    }, 0);
  };
  SetFilter.prototype.onSelectAll = function (isSelected) {
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    if (!this.virtualList) {
      throw new Error('Virtual list has not been created.');
    }
    if (isSelected) {
      this.valueModel.selectAllMatchingMiniFilter();
    } else {
      this.valueModel.deselectAllMatchingMiniFilter();
    }
    var focusedRow = this.virtualList.getLastFocusedRow();
    this.refresh();
    this.onUiChanged();
    this.focusRowIfAlive(focusedRow);
  };
  SetFilter.prototype.onItemSelected = function (value, isSelected) {
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    if (!this.virtualList) {
      throw new Error('Virtual list has not been created.');
    }
    if (isSelected) {
      this.valueModel.selectValue(value);
    } else {
      this.valueModel.deselectValue(value);
    }
    var focusedRow = this.virtualList.getLastFocusedRow();
    this.refresh();
    this.onUiChanged();
    this.focusRowIfAlive(focusedRow);
  };
  SetFilter.prototype.setMiniFilter = function (newMiniFilter) {
    this.eMiniFilter.setValue(newMiniFilter);
    this.onMiniFilterInput();
  };
  SetFilter.prototype.getMiniFilter = function () {
    return this.valueModel ? this.valueModel.getMiniFilter() : null;
  };
  /** @deprecated since version 23.2. Please use setModel instead. */
  SetFilter.prototype.selectEverything = function () {
    var message = 'AG Grid: since version 23.2, selectEverything has been deprecated. Please use setModel instead.';
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.doOnce(function () {
      return console.warn(message);
    }, 'setFilter.selectEverything');
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    this.valueModel.selectAllMatchingMiniFilter();
    this.refresh();
  };
  /** @deprecated since version 23.2. Please use setModel instead. */
  SetFilter.prototype.selectNothing = function () {
    var message = 'AG Grid: since version 23.2, selectNothing has been deprecated. Please use setModel instead.';
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.doOnce(function () {
      return console.warn(message);
    }, 'setFilter.selectNothing');
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    this.valueModel.deselectAllMatchingMiniFilter();
    this.refresh();
  };
  /** @deprecated since version 23.2. Please use setModel instead. */
  SetFilter.prototype.unselectValue = function (value) {
    var message = 'AG Grid: since version 23.2, unselectValue has been deprecated. Please use setModel instead.';
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.doOnce(function () {
      return console.warn(message);
    }, 'setFilter.unselectValue');
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    this.valueModel.deselectValue(value);
    this.refresh();
  };
  /** @deprecated since version 23.2. Please use setModel instead. */
  SetFilter.prototype.selectValue = function (value) {
    var message = 'AG Grid: since version 23.2, selectValue has been deprecated. Please use setModel instead.';
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.doOnce(function () {
      return console.warn(message);
    }, 'setFilter.selectValue');
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    this.valueModel.selectValue(value);
    this.refresh();
  };
  SetFilter.prototype.refresh = function () {
    if (!this.virtualList) {
      throw new Error('Virtual list has not been created.');
    }
    this.virtualList.refresh();
  };
  /** @deprecated since version 23.2. Please use getModel instead. */
  SetFilter.prototype.isValueSelected = function (value) {
    var message = 'AG Grid: since version 23.2, isValueSelected has been deprecated. Please use getModel instead.';
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.doOnce(function () {
      return console.warn(message);
    }, 'setFilter.isValueSelected');
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    return this.valueModel.isValueSelected(value);
  };
  /** @deprecated since version 23.2. Please use getModel instead. */
  SetFilter.prototype.isEverythingSelected = function () {
    var message = 'AG Grid: since version 23.2, isEverythingSelected has been deprecated. Please use getModel instead.';
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.doOnce(function () {
      return console.warn(message);
    }, 'setFilter.isEverythingSelected');
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    return this.valueModel.isEverythingVisibleSelected();
  };
  /** @deprecated since version 23.2. Please use getModel instead. */
  SetFilter.prototype.isNothingSelected = function () {
    var message = 'AG Grid: since version 23.2, isNothingSelected has been deprecated. Please use getModel instead.';
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.doOnce(function () {
      return console.warn(message);
    }, 'setFilter.isNothingSelected');
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    return this.valueModel.isNothingVisibleSelected();
  };
  /** @deprecated since version 23.2. Please use getValues instead. */
  SetFilter.prototype.getUniqueValueCount = function () {
    var message = 'AG Grid: since version 23.2, getUniqueValueCount has been deprecated. Please use getValues instead.';
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.doOnce(function () {
      return console.warn(message);
    }, 'setFilter.getUniqueValueCount');
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    return this.valueModel.getUniqueValueCount();
  };
  /** @deprecated since version 23.2. Please use getValues instead. */
  SetFilter.prototype.getUniqueValue = function (index) {
    var message = 'AG Grid: since version 23.2, getUniqueValue has been deprecated. Please use getValues instead.';
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.doOnce(function () {
      return console.warn(message);
    }, 'setFilter.getUniqueValue');
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    return this.valueModel.getUniqueValue(index);
  };
  SetFilter.prototype.getValues = function () {
    return this.valueModel ? this.valueModel.getValues() : [];
  };
  SetFilter.prototype.refreshVirtualList = function () {
    if (this.setFilterParams && this.setFilterParams.refreshValuesOnOpen) {
      this.refreshFilterValues();
    } else {
      this.refresh();
    }
  };
  SetFilter.prototype.translateForSetFilter = function (key) {
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    return translate(key, _localeText__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_LOCALE_TEXT[key]);
  };
  SetFilter.prototype.isSelectAllSelected = function () {
    if (!this.setFilterParams || !this.valueModel) {
      return false;
    }
    if (!this.setFilterParams.defaultToNothingSelected) {
      // everything selected by default
      if (this.valueModel.hasSelections() && this.valueModel.isNothingVisibleSelected()) {
        return false;
      }
      if (this.valueModel.isEverythingVisibleSelected()) {
        return true;
      }
    } else {
      // nothing selected by default
      if (this.valueModel.hasSelections() && this.valueModel.isEverythingVisibleSelected()) {
        return true;
      }
      if (this.valueModel.isNothingVisibleSelected()) {
        return false;
      }
    }
    // returning `undefined` means the checkbox status is indeterminate.
    return undefined;
  };
  SetFilter.prototype.destroy = function () {
    if (this.virtualList != null) {
      this.virtualList.destroy();
      this.virtualList = null;
    }
    _super.prototype.destroy.call(this);
  };
  SetFilter.SELECT_ALL_VALUE = '__AG_SELECT_ALL__';
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eMiniFilter')], SetFilter.prototype, "eMiniFilter", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eFilterLoading')], SetFilter.prototype, "eFilterLoading", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eSetFilterList')], SetFilter.prototype, "eSetFilterList", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eFilterNoMatches')], SetFilter.prototype, "eNoMatches", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('valueFormatterService')], SetFilter.prototype, "valueFormatterService", void 0);
  return SetFilter;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ProvidedFilter);

var ModelWrapper = /** @class */function () {
  function ModelWrapper(model) {
    this.model = model;
  }
  ModelWrapper.prototype.getRowCount = function () {
    return this.model.getDisplayedValueCount();
  };
  ModelWrapper.prototype.getRow = function (index) {
    return this.model.getDisplayedValue(index);
  };
  ModelWrapper.prototype.isRowSelected = function (index) {
    return this.model.isValueSelected(this.getRow(index));
  };
  return ModelWrapper;
}();
var ModelWrapperWithSelectAll = /** @class */function () {
  function ModelWrapperWithSelectAll(model, isSelectAllSelected) {
    this.model = model;
    this.isSelectAllSelected = isSelectAllSelected;
  }
  ModelWrapperWithSelectAll.prototype.getRowCount = function () {
    return this.model.getDisplayedValueCount() + 1;
  };
  ModelWrapperWithSelectAll.prototype.getRow = function (index) {
    return index === 0 ? SetFilter.SELECT_ALL_VALUE : this.model.getDisplayedValue(index - 1);
  };
  ModelWrapperWithSelectAll.prototype.isRowSelected = function (index) {
    return index === 0 ? this.isSelectAllSelected() : this.model.isValueSelected(this.getRow(index));
  };
  return ModelWrapperWithSelectAll;
}();

/***/ }),

/***/ 584088:
/*!*********************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/set-filter/dist/es6/setFilter/setFilterListItem.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SetFilterListItem": () => (/* binding */ SetFilterListItem)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var SetFilterListItem = /** @class */function (_super) {
  __extends(SetFilterListItem, _super);
  function SetFilterListItem(value, params, translate, isSelected) {
    var _this = _super.call(this, SetFilterListItem.TEMPLATE) || this;
    _this.value = value;
    _this.params = params;
    _this.translate = translate;
    _this.isSelected = isSelected;
    return _this;
  }
  SetFilterListItem.prototype.init = function () {
    var _this = this;
    this.render();
    this.eCheckbox.setValue(this.isSelected, true);
    this.eCheckbox.onValueChange(function (value) {
      var parsedValue = value || false;
      _this.isSelected = parsedValue;
      var event = {
        type: SetFilterListItem.EVENT_SELECTION_CHANGED,
        isSelected: parsedValue
      };
      _this.dispatchEvent(event);
    });
  };
  SetFilterListItem.prototype.toggleSelected = function () {
    this.isSelected = !this.isSelected;
    this.eCheckbox.setValue(this.isSelected);
  };
  SetFilterListItem.prototype.render = function () {
    var column = this.params.column;
    var value = this.value;
    var formattedValue = null;
    if (typeof value === 'function') {
      value = value();
    } else {
      formattedValue = this.getFormattedValue(this.params, column, value);
    }
    if (this.params.showTooltips) {
      var tooltipValue = formattedValue != null ? formattedValue : value;
      this.setTooltip(tooltipValue);
    }
    var params = {
      value: value,
      valueFormatted: formattedValue,
      api: this.gridOptionsWrapper.getApi(),
      context: this.gridOptionsWrapper.getContext()
    };
    this.renderCell(params);
  };
  SetFilterListItem.prototype.getTooltipParams = function () {
    var res = _super.prototype.getTooltipParams.call(this);
    res.location = 'setFilterValue';
    res.colDef = this.getComponentHolder();
    return res;
  };
  SetFilterListItem.prototype.getFormattedValue = function (filterParams, column, value) {
    var formatter = filterParams && filterParams.valueFormatter;
    return this.valueFormatterService.formatValue(column, null, null, value, formatter, false);
  };
  SetFilterListItem.prototype.renderCell = function (params) {
    var _this = this;
    var cellRendererPromise = this.userComponentFactory.newSetFilterCellRenderer(this.params, params);
    if (cellRendererPromise == null) {
      var valueToRender = params.valueFormatted == null ? params.value : params.valueFormatted;
      this.eCheckbox.setLabel(valueToRender == null ? this.translate('blanks') : valueToRender);
      return;
    }
    cellRendererPromise.then(function (component) {
      if (component) {
        _this.eCheckbox.setLabel(component.getGui());
        _this.addDestroyFunc(function () {
          return _this.destroyBean(component);
        });
      }
    });
  };
  SetFilterListItem.prototype.getComponentHolder = function () {
    return this.params.column.getColDef();
  };
  SetFilterListItem.EVENT_SELECTION_CHANGED = 'selectionChanged';
  SetFilterListItem.TEMPLATE = "\n        <div class=\"ag-set-filter-item\">\n            <ag-checkbox ref=\"eCheckbox\" class=\"ag-set-filter-item-checkbox\"></ag-checkbox>\n        </div>";
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('valueFormatterService')], SetFilterListItem.prototype, "valueFormatterService", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('userComponentFactory')], SetFilterListItem.prototype, "userComponentFactory", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eCheckbox')], SetFilterListItem.prototype, "eCheckbox", void 0);
  __decorate([_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.PostConstruct], SetFilterListItem.prototype, "init", null);
  return SetFilterListItem;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Component);


/***/ }),

/***/ 428092:
/*!*********************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/set-filter/dist/es6/setFilter/setFloatingFilter.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SetFloatingFilterComp": () => (/* binding */ SetFloatingFilterComp)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
/* harmony import */ var _setValueModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./setValueModel */ 345089);
/* harmony import */ var _localeText__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./localeText */ 615305);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};



var SetFloatingFilterComp = /** @class */function (_super) {
  __extends(SetFloatingFilterComp, _super);
  function SetFloatingFilterComp() {
    var _this = _super.call(this, /* html */"\n            <div class=\"ag-floating-filter-input\" role=\"presentation\">\n                <ag-input-text-field ref=\"eFloatingFilterText\"></ag-input-text-field>\n            </div>") || this;
    _this.availableValuesListenerAdded = false;
    return _this;
  }
  // this is a user component, and IComponent has "public destroy()" as part of the interface.
  // so we need to override destroy() just to make the method public.
  SetFloatingFilterComp.prototype.destroy = function () {
    _super.prototype.destroy.call(this);
  };
  SetFloatingFilterComp.prototype.init = function (params) {
    var displayName = this.columnModel.getDisplayNameForColumn(params.column, 'header', true);
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    this.eFloatingFilterText.setDisabled(true).setInputAriaLabel(displayName + " " + translate('ariaFilterInput', 'Filter Input')).addGuiEventListener('click', function () {
      return params.showParentFilter();
    });
    this.params = params;
  };
  SetFloatingFilterComp.prototype.onParentModelChanged = function (parentModel) {
    this.lastKnownModel = parentModel;
    this.updateFloatingFilterText();
  };
  SetFloatingFilterComp.prototype.addAvailableValuesListener = function () {
    var _this = this;
    this.params.parentFilterInstance(function (setFilter) {
      var setValueModel = setFilter.getValueModel();
      if (!setValueModel) {
        return;
      }
      // unlike other filters, what we show in the floating filter can be different, even
      // if another filter changes. this is due to how set filter restricts its values based
      // on selections in other filters, e.g. if you filter Language to English, then the set filter
      // on Country will only show English speaking countries. Thus the list of items to show
      // in the floating filter can change.
      _this.addManagedListener(setValueModel, _setValueModel__WEBPACK_IMPORTED_MODULE_1__.SetValueModel.EVENT_AVAILABLE_VALUES_CHANGED, function () {
        return _this.updateFloatingFilterText();
      });
    });
    this.availableValuesListenerAdded = true;
  };
  SetFloatingFilterComp.prototype.updateFloatingFilterText = function () {
    var _this = this;
    if (!this.lastKnownModel) {
      this.eFloatingFilterText.setValue('');
      return;
    }
    if (!this.availableValuesListenerAdded) {
      this.addAvailableValuesListener();
    }
    // also supporting old filter model for backwards compatibility
    var values = this.lastKnownModel instanceof Array ? this.lastKnownModel : this.lastKnownModel.values;
    if (!values) {
      this.eFloatingFilterText.setValue('');
      return;
    }
    this.params.parentFilterInstance(function (setFilter) {
      var valueModel = setFilter.getValueModel();
      if (!valueModel) {
        return;
      }
      var availableValues = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.filter(values, function (v) {
        return valueModel.isValueAvailable(v);
      });
      var localeTextFunc = _this.gridOptionsWrapper.getLocaleTextFunc();
      // format all the values, if a formatter is provided
      var formattedValues = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.map(availableValues, function (value) {
        var _a = _this.params,
          column = _a.column,
          filterParams = _a.filterParams;
        var formattedValue = _this.valueFormatterService.formatValue(column, null, null, value, filterParams.valueFormatter, false);
        var valueToRender = formattedValue != null ? formattedValue : value;
        return valueToRender == null ? localeTextFunc('blanks', _localeText__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_LOCALE_TEXT.blanks) : valueToRender;
      });
      var arrayToDisplay = formattedValues.length > 10 ? formattedValues.slice(0, 10).concat('...') : formattedValues;
      var valuesString = "(" + formattedValues.length + ") " + arrayToDisplay.join(',');
      _this.eFloatingFilterText.setValue(valuesString);
    });
  };
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eFloatingFilterText')], SetFloatingFilterComp.prototype, "eFloatingFilterText", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('valueFormatterService')], SetFloatingFilterComp.prototype, "valueFormatterService", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')], SetFloatingFilterComp.prototype, "columnModel", void 0);
  return SetFloatingFilterComp;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Component);


/***/ }),

/***/ 345089:
/*!*****************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/set-filter/dist/es6/setFilter/setValueModel.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SetFilterModelValuesType": () => (/* binding */ SetFilterModelValuesType),
/* harmony export */   "SetValueModel": () => (/* binding */ SetValueModel)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
/* harmony import */ var _clientSideValueExtractor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../clientSideValueExtractor */ 369153);


var SetFilterModelValuesType;
(function (SetFilterModelValuesType) {
  SetFilterModelValuesType[SetFilterModelValuesType["PROVIDED_LIST"] = 0] = "PROVIDED_LIST";
  SetFilterModelValuesType[SetFilterModelValuesType["PROVIDED_CALLBACK"] = 1] = "PROVIDED_CALLBACK";
  SetFilterModelValuesType[SetFilterModelValuesType["TAKEN_FROM_GRID_VALUES"] = 2] = "TAKEN_FROM_GRID_VALUES";
})(SetFilterModelValuesType || (SetFilterModelValuesType = {}));
var SetValueModel = /** @class */function () {
  function SetValueModel(filterParams, setIsLoading, valueFormatterService, translate) {
    var _this = this;
    this.filterParams = filterParams;
    this.setIsLoading = setIsLoading;
    this.valueFormatterService = valueFormatterService;
    this.translate = translate;
    this.localEventService = new _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.EventService();
    this.miniFilterText = null;
    // The lookup for a set is much faster than the lookup for an array, especially when the length of the array is
    // thousands of records long, so where lookups are important we use a set.
    /** Values provided to the filter for use. */
    this.providedValues = null;
    /** All possible values for the filter, sorted if required. */
    this.allValues = [];
    /** Remaining values when filters from other columns have been applied. */
    this.availableValues = new Set();
    /** All values that are currently displayed, after the mini-filter has been applied. */
    this.displayedValues = [];
    /** Values that have been selected for this filter. */
    this.selectedValues = new Set();
    this.initialised = false;
    var column = filterParams.column,
      colDef = filterParams.colDef,
      textFormatter = filterParams.textFormatter,
      doesRowPassOtherFilter = filterParams.doesRowPassOtherFilter,
      suppressSorting = filterParams.suppressSorting,
      comparator = filterParams.comparator,
      rowModel = filterParams.rowModel,
      values = filterParams.values;
    this.column = column;
    this.colDef = colDef;
    this.formatter = textFormatter || _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.TextFilter.DEFAULT_FORMATTER;
    this.doesRowPassOtherFilters = doesRowPassOtherFilter;
    this.suppressSorting = suppressSorting || false;
    this.comparator = comparator || colDef.comparator || _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.defaultComparator;
    if (rowModel.getType() === _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
      this.clientSideValuesExtractor = new _clientSideValueExtractor__WEBPACK_IMPORTED_MODULE_1__.ClientSideValuesExtractor(rowModel, this.filterParams);
    }
    if (values == null) {
      this.valuesType = SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES;
    } else {
      this.valuesType = Array.isArray(values) ? SetFilterModelValuesType.PROVIDED_LIST : SetFilterModelValuesType.PROVIDED_CALLBACK;
      this.providedValues = values;
    }
    this.updateAllValues().then(function (updatedValues) {
      return _this.resetSelectionState(updatedValues || []);
    });
  }
  SetValueModel.prototype.addEventListener = function (eventType, listener, async) {
    this.localEventService.addEventListener(eventType, listener, async);
  };
  SetValueModel.prototype.removeEventListener = function (eventType, listener, async) {
    this.localEventService.removeEventListener(eventType, listener, async);
  };
  /**
   * Re-fetches the values used in the filter from the value source.
   * If keepSelection is false, the filter selection will be reset to everything selected,
   * otherwise the current selection will be preserved.
   */
  SetValueModel.prototype.refreshValues = function (keepSelection) {
    if (keepSelection === void 0) {
      keepSelection = true;
    }
    var currentModel = this.getModel();
    this.updateAllValues();
    // ensure model is updated for new values
    return this.setModel(keepSelection ? currentModel : null);
  };
  /**
   * Overrides the current values being used for the set filter.
   * If keepSelection is false, the filter selection will be reset to everything selected,
   * otherwise the current selection will be preserved.
   */
  SetValueModel.prototype.overrideValues = function (valuesToUse, keepSelection) {
    var _this = this;
    if (keepSelection === void 0) {
      keepSelection = true;
    }
    return new _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.AgPromise(function (resolve) {
      // wait for any existing values to be populated before overriding
      _this.allValuesPromise.then(function () {
        _this.valuesType = SetFilterModelValuesType.PROVIDED_LIST;
        _this.providedValues = valuesToUse;
        _this.refreshValues(keepSelection).then(function () {
          return resolve();
        });
      });
    });
  };
  SetValueModel.prototype.refreshAfterAnyFilterChanged = function () {
    var _this = this;
    return this.showAvailableOnly() ? this.allValuesPromise.then(function (values) {
      return _this.updateAvailableValues(values || []);
    }) : _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.AgPromise.resolve();
  };
  SetValueModel.prototype.isInitialised = function () {
    return this.initialised;
  };
  SetValueModel.prototype.updateAllValues = function () {
    var _this = this;
    this.allValuesPromise = new _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.AgPromise(function (resolve) {
      switch (_this.valuesType) {
        case SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES:
        case SetFilterModelValuesType.PROVIDED_LIST:
          {
            var values = _this.valuesType === SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES ? _this.getValuesFromRows(false) : _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.toStrings(_this.providedValues);
            var sortedValues = _this.sortValues(values || []);
            _this.allValues = sortedValues;
            resolve(sortedValues);
            break;
          }
        case SetFilterModelValuesType.PROVIDED_CALLBACK:
          {
            _this.setIsLoading(true);
            var callback_1 = _this.providedValues;
            var params_1 = {
              success: function (values) {
                var processedValues = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.toStrings(values);
                _this.setIsLoading(false);
                var sortedValues = _this.sortValues(processedValues || []);
                _this.allValues = sortedValues;
                resolve(sortedValues);
              },
              colDef: _this.colDef
            };
            window.setTimeout(function () {
              return callback_1(params_1);
            }, 0);
            break;
          }
        default:
          throw new Error('Unrecognised valuesType');
      }
    });
    this.allValuesPromise.then(function (values) {
      return _this.updateAvailableValues(values || []);
    }).then(function () {
      return _this.initialised = true;
    });
    return this.allValuesPromise;
  };
  SetValueModel.prototype.setValuesType = function (value) {
    this.valuesType = value;
  };
  SetValueModel.prototype.getValuesType = function () {
    return this.valuesType;
  };
  SetValueModel.prototype.isValueAvailable = function (value) {
    return this.availableValues.has(value);
  };
  SetValueModel.prototype.showAvailableOnly = function () {
    return this.valuesType === SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES && !this.filterParams.suppressRemoveEntries;
  };
  SetValueModel.prototype.updateAvailableValues = function (allValues) {
    var availableValues = this.showAvailableOnly() ? this.sortValues(this.getValuesFromRows(true)) : allValues;
    this.availableValues = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.convertToSet(availableValues);
    this.localEventService.dispatchEvent({
      type: SetValueModel.EVENT_AVAILABLE_VALUES_CHANGED
    });
    this.updateDisplayedValues();
  };
  SetValueModel.prototype.sortValues = function (values) {
    if (this.suppressSorting) {
      return values;
    }
    if (!this.filterParams.excelMode || values.indexOf(null) < 0) {
      return values.sort(this.comparator);
    }
    // ensure the blank value always appears last
    return _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.filter(values, function (v) {
      return v != null;
    }).sort(this.comparator).concat(null);
  };
  SetValueModel.prototype.getValuesFromRows = function (removeUnavailableValues) {
    var _this = this;
    if (removeUnavailableValues === void 0) {
      removeUnavailableValues = false;
    }
    if (!this.clientSideValuesExtractor) {
      console.error('AG Grid: Set Filter cannot initialise because you are using a row model that does not contain all rows in the browser. Either use a different filter type, or configure Set Filter such that you provide it with values');
      return [];
    }
    var predicate = function (node) {
      return !removeUnavailableValues || _this.doesRowPassOtherFilters(node);
    };
    return this.clientSideValuesExtractor.extractUniqueValues(predicate);
  };
  /** Sets mini filter value. Returns true if it changed from last value, otherwise false. */
  SetValueModel.prototype.setMiniFilter = function (value) {
    value = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.makeNull(value);
    if (this.miniFilterText === value) {
      //do nothing if filter has not changed
      return false;
    }
    this.miniFilterText = value;
    this.updateDisplayedValues();
    return true;
  };
  SetValueModel.prototype.getMiniFilter = function () {
    return this.miniFilterText;
  };
  SetValueModel.prototype.updateDisplayedValues = function () {
    var _this = this;
    // if no filter, just display all available values
    if (this.miniFilterText == null) {
      this.displayedValues = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.values(this.availableValues);
      return;
    }
    // if filter present, we filter down the list
    this.displayedValues = [];
    // to allow for case insensitive searches, upper-case both filter text and value
    var formattedFilterText = (this.formatter(this.miniFilterText) || '').toUpperCase();
    var matchesFilter = function (valueToCheck) {
      return valueToCheck != null && valueToCheck.toUpperCase().indexOf(formattedFilterText) >= 0;
    };
    this.availableValues.forEach(function (value) {
      if (value == null) {
        if (_this.filterParams.excelMode && matchesFilter(_this.translate('blanks'))) {
          _this.displayedValues.push(value);
        }
      } else {
        var textFormatterValue = _this.formatter(value);
        // TODO: should this be applying the text formatter *after* the value formatter?
        var valueFormatterValue = _this.valueFormatterService.formatValue(_this.column, null, null, textFormatterValue, _this.filterParams.valueFormatter, false);
        if (matchesFilter(textFormatterValue) || matchesFilter(valueFormatterValue)) {
          _this.displayedValues.push(value);
        }
      }
    });
  };
  SetValueModel.prototype.getDisplayedValueCount = function () {
    return this.displayedValues.length;
  };
  SetValueModel.prototype.getDisplayedValue = function (index) {
    return this.displayedValues[index];
  };
  SetValueModel.prototype.hasSelections = function () {
    return this.filterParams.defaultToNothingSelected ? this.selectedValues.size > 0 : this.allValues.length !== this.selectedValues.size;
  };
  SetValueModel.prototype.getUniqueValueCount = function () {
    return this.allValues.length;
  };
  SetValueModel.prototype.getUniqueValue = function (index) {
    return this.allValues[index];
  };
  SetValueModel.prototype.getValues = function () {
    return this.allValues.slice();
  };
  SetValueModel.prototype.selectAllMatchingMiniFilter = function (clearExistingSelection) {
    var _this = this;
    if (clearExistingSelection === void 0) {
      clearExistingSelection = false;
    }
    if (this.miniFilterText == null) {
      // ensure everything is selected
      this.selectedValues = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.convertToSet(this.allValues);
    } else {
      // ensure everything that matches the mini filter is selected
      if (clearExistingSelection) {
        this.selectedValues.clear();
      }
      _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.forEach(this.displayedValues, function (value) {
        return _this.selectedValues.add(value);
      });
    }
  };
  SetValueModel.prototype.deselectAllMatchingMiniFilter = function () {
    var _this = this;
    if (this.miniFilterText == null) {
      // ensure everything is deselected
      this.selectedValues.clear();
    } else {
      // ensure everything that matches the mini filter is deselected
      _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.forEach(this.displayedValues, function (value) {
        return _this.selectedValues.delete(value);
      });
    }
  };
  SetValueModel.prototype.selectValue = function (value) {
    this.selectedValues.add(value);
  };
  SetValueModel.prototype.deselectValue = function (value) {
    if (this.filterParams.excelMode && this.isEverythingVisibleSelected()) {
      // ensure we're starting from the correct "everything selected" state
      this.resetSelectionState(this.displayedValues);
    }
    this.selectedValues.delete(value);
  };
  SetValueModel.prototype.isValueSelected = function (value) {
    return this.selectedValues.has(value);
  };
  SetValueModel.prototype.isEverythingVisibleSelected = function () {
    var _this = this;
    return _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.filter(this.displayedValues, function (it) {
      return _this.isValueSelected(it);
    }).length === this.displayedValues.length;
  };
  SetValueModel.prototype.isNothingVisibleSelected = function () {
    var _this = this;
    return _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.filter(this.displayedValues, function (it) {
      return _this.isValueSelected(it);
    }).length === 0;
  };
  SetValueModel.prototype.getModel = function () {
    return this.hasSelections() ? _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.values(this.selectedValues) : null;
  };
  SetValueModel.prototype.setModel = function (model) {
    var _this = this;
    return this.allValuesPromise.then(function (values) {
      if (model == null) {
        _this.resetSelectionState(values || []);
      } else {
        // select all values from the model that exist in the filter
        _this.selectedValues.clear();
        var allValues_1 = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.convertToSet(values || []);
        _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.forEach(model, function (value) {
          if (allValues_1.has(value)) {
            _this.selectedValues.add(value);
          }
        });
      }
    });
  };
  SetValueModel.prototype.resetSelectionState = function (values) {
    if (this.filterParams.defaultToNothingSelected) {
      this.selectedValues.clear();
    } else {
      this.selectedValues = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.convertToSet(values || []);
    }
  };
  SetValueModel.EVENT_AVAILABLE_VALUES_CHANGED = 'availableValuesChanged';
  return SetValueModel;
}();


/***/ }),

/***/ 677817:
/*!********************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/side-bar/dist/es6/main.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SideBarModule": () => (/* reexport safe */ _sideBarModule__WEBPACK_IMPORTED_MODULE_0__.SideBarModule),
/* harmony export */   "ToolPanelColDefService": () => (/* reexport safe */ _sideBar_common_toolPanelColDefService__WEBPACK_IMPORTED_MODULE_1__.ToolPanelColDefService)
/* harmony export */ });
/* harmony import */ var _sideBarModule__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sideBarModule */ 459392);
/* harmony import */ var _sideBar_common_toolPanelColDefService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sideBar/common/toolPanelColDefService */ 364218);



/***/ }),

/***/ 459392:
/*!*****************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/side-bar/dist/es6/sideBarModule.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SideBarModule": () => (/* binding */ SideBarModule)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
/* harmony import */ var _ag_grid_enterprise_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ag-grid-enterprise/core */ 704796);
/* harmony import */ var _sideBar_horizontalResizeComp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sideBar/horizontalResizeComp */ 290877);
/* harmony import */ var _sideBar_sideBarComp__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sideBar/sideBarComp */ 160232);
/* harmony import */ var _sideBar_sideBarButtonsComp__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sideBar/sideBarButtonsComp */ 160626);
/* harmony import */ var _sideBar_common_toolPanelColDefService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sideBar/common/toolPanelColDefService */ 364218);






var SideBarModule = {
  moduleName: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.SideBarModule,
  beans: [_sideBar_common_toolPanelColDefService__WEBPACK_IMPORTED_MODULE_5__.ToolPanelColDefService],
  agStackComponents: [{
    componentName: 'AgHorizontalResize',
    componentClass: _sideBar_horizontalResizeComp__WEBPACK_IMPORTED_MODULE_2__.HorizontalResizeComp
  }, {
    componentName: 'AgSideBar',
    componentClass: _sideBar_sideBarComp__WEBPACK_IMPORTED_MODULE_3__.SideBarComp
  }, {
    componentName: 'AgSideBarButtons',
    componentClass: _sideBar_sideBarButtonsComp__WEBPACK_IMPORTED_MODULE_4__.SideBarButtonsComp
  }],
  dependantModules: [_ag_grid_enterprise_core__WEBPACK_IMPORTED_MODULE_1__.EnterpriseCoreModule]
};

/***/ }),

/***/ 364218:
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/side-bar/dist/es6/sideBar/common/toolPanelColDefService.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ToolPanelColDefService": () => (/* binding */ ToolPanelColDefService)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var ToolPanelColDefService = /** @class */function (_super) {
  __extends(ToolPanelColDefService, _super);
  function ToolPanelColDefService() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.isColGroupDef = function (colDef) {
      return colDef && typeof colDef.children !== 'undefined';
    };
    _this.getId = function (colDef) {
      return _this.isColGroupDef(colDef) ? colDef.groupId : colDef.colId;
    };
    return _this;
  }
  ToolPanelColDefService.prototype.createColumnTree = function (colDefs) {
    var _this = this;
    var invalidColIds = [];
    var createDummyColGroup = function (abstractColDef, depth) {
      if (_this.isColGroupDef(abstractColDef)) {
        // creating 'dummy' group which is not associated with grid column group
        var groupDef = abstractColDef;
        var groupId = typeof groupDef.groupId !== 'undefined' ? groupDef.groupId : groupDef.headerName;
        var group = new _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ProvidedColumnGroup(groupDef, groupId, false, depth);
        var children_1 = [];
        groupDef.children.forEach(function (def) {
          var child = createDummyColGroup(def, depth + 1);
          // check column exists in case invalid colDef is supplied for primary column
          if (child) {
            children_1.push(child);
          }
        });
        group.setChildren(children_1);
        return group;
      } else {
        var colDef = abstractColDef;
        var key = colDef.colId ? colDef.colId : colDef.field;
        var column = _this.columnModel.getPrimaryColumn(key);
        if (!column) {
          invalidColIds.push(colDef);
        }
        return column;
      }
    };
    var mappedResults = [];
    colDefs.forEach(function (colDef) {
      var result = createDummyColGroup(colDef, 0);
      if (result) {
        // only return correctly mapped colDef results
        mappedResults.push(result);
      }
    });
    if (invalidColIds.length > 0) {
      console.warn('AG Grid: unable to find grid columns for the supplied colDef(s):', invalidColIds);
    }
    return mappedResults;
  };
  ToolPanelColDefService.prototype.syncLayoutWithGrid = function (syncLayoutCallback) {
    // extract ordered list of leaf path trees (column group hierarchy for each individual leaf column)
    var leafPathTrees = this.getLeafPathTrees();
    // merge leaf path tree taking split column groups into account
    var mergedColumnTrees = this.mergeLeafPathTrees(leafPathTrees);
    // sync layout with merged column trees
    syncLayoutCallback(mergedColumnTrees);
  };
  ToolPanelColDefService.prototype.getLeafPathTrees = function () {
    // leaf tree paths are obtained by walking up the tree starting at a column until we reach the top level group.
    var getLeafPathTree = function (node, childDef) {
      var leafPathTree;
      // build up tree in reverse order
      if (node instanceof _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ProvidedColumnGroup) {
        if (node.isPadding()) {
          // skip over padding groups
          leafPathTree = childDef;
        } else {
          var groupDef = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.assign({}, node.getColGroupDef());
          // ensure group contains groupId
          groupDef.groupId = node.getGroupId();
          groupDef.children = [childDef];
          leafPathTree = groupDef;
        }
      } else {
        var colDef = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.assign({}, node.getColDef());
        // ensure col contains colId
        colDef.colId = node.getColId();
        leafPathTree = colDef;
      }
      // walk tree
      var parent = node.getOriginalParent();
      if (parent) {
        // keep walking up the tree until we reach the root
        return getLeafPathTree(parent, leafPathTree);
      } else {
        // we have reached the root - exit with resulting leaf path tree
        return leafPathTree;
      }
    };
    // obtain a sorted list of all grid columns
    var allGridColumns = this.columnModel.getAllGridColumns();
    // only primary columns and non row group columns should appear in the tool panel
    var allPrimaryGridColumns = allGridColumns.filter(function (column) {
      var colDef = column.getColDef();
      return column.isPrimary() && !colDef.showRowGroup;
    });
    // construct a leaf path tree for each column
    return allPrimaryGridColumns.map(function (col) {
      return getLeafPathTree(col, col.getColDef());
    });
  };
  ToolPanelColDefService.prototype.mergeLeafPathTrees = function (leafPathTrees) {
    var _this = this;
    var getLeafPathString = function (leafPath) {
      var group = leafPath;
      return group.children ? group.groupId + getLeafPathString(group.children[0]) : '';
    };
    var matchingRootGroupIds = function (pathA, pathB) {
      var bothPathsAreGroups = _this.isColGroupDef(pathA) && _this.isColGroupDef(pathB);
      return bothPathsAreGroups && _this.getId(pathA) === _this.getId(pathB);
    };
    var mergeTrees = function (treeA, treeB) {
      if (!_this.isColGroupDef(treeB)) {
        return treeA;
      }
      var mergeResult = treeA;
      var groupToMerge = treeB;
      if (groupToMerge.children && groupToMerge.groupId) {
        var added = _this.addChildrenToGroup(mergeResult, groupToMerge.groupId, groupToMerge.children[0]);
        if (added) {
          return mergeResult;
        }
      }
      groupToMerge.children.forEach(function (child) {
        return mergeTrees(mergeResult, child);
      });
      return mergeResult;
    };
    // we can't just merge the leaf path trees as groups can be split apart - instead only merge if leaf
    // path groups with the same root group id are contiguous.
    var mergeColDefs = [];
    for (var i = 1; i <= leafPathTrees.length; i++) {
      var first = leafPathTrees[i - 1];
      var second = leafPathTrees[i];
      if (matchingRootGroupIds(first, second)) {
        leafPathTrees[i] = mergeTrees(first, second);
      } else {
        mergeColDefs.push(first);
      }
    }
    return mergeColDefs;
  };
  ToolPanelColDefService.prototype.addChildrenToGroup = function (tree, groupId, colDef) {
    var _this = this;
    var subGroupIsSplit = function (currentSubGroup, currentSubGroupToAdd) {
      var existingChildIds = currentSubGroup.children.map(_this.getId);
      var childGroupAlreadyExists = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.includes(existingChildIds, _this.getId(currentSubGroupToAdd));
      var lastChild = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.last(currentSubGroup.children);
      var lastChildIsDifferent = lastChild && _this.getId(lastChild) !== _this.getId(currentSubGroupToAdd);
      return childGroupAlreadyExists && lastChildIsDifferent;
    };
    if (!this.isColGroupDef(tree)) {
      return true;
    }
    var currentGroup = tree;
    var groupToAdd = colDef;
    if (subGroupIsSplit(currentGroup, groupToAdd)) {
      currentGroup.children.push(groupToAdd);
      return true;
    }
    if (currentGroup.groupId === groupId) {
      // add children that don't already exist to group
      var existingChildIds = currentGroup.children.map(this.getId);
      var colDefAlreadyPresent = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.includes(existingChildIds, this.getId(groupToAdd));
      if (!colDefAlreadyPresent) {
        currentGroup.children.push(groupToAdd);
        return true;
      }
    }
    // recurse until correct group is found to add children
    currentGroup.children.forEach(function (subGroup) {
      return _this.addChildrenToGroup(subGroup, groupId, colDef);
    });
    return false;
  };
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')], ToolPanelColDefService.prototype, "columnModel", void 0);
  ToolPanelColDefService = __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Bean)('toolPanelColDefService')], ToolPanelColDefService);
  return ToolPanelColDefService;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.BeanStub);


/***/ }),

/***/ 290877:
/*!********************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/side-bar/dist/es6/sideBar/horizontalResizeComp.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HorizontalResizeComp": () => (/* binding */ HorizontalResizeComp)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var HorizontalResizeComp = /** @class */function (_super) {
  __extends(HorizontalResizeComp, _super);
  function HorizontalResizeComp() {
    var _this = _super.call(this, /* html */"<div class=\"ag-tool-panel-horizontal-resize\"></div>") || this;
    _this.minWidth = 100;
    _this.maxWidth = null;
    return _this;
  }
  HorizontalResizeComp.prototype.setElementToResize = function (elementToResize) {
    this.elementToResize = elementToResize;
  };
  HorizontalResizeComp.prototype.postConstruct = function () {
    var finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({
      eResizeBar: this.getGui(),
      dragStartPixels: 1,
      onResizeStart: this.onResizeStart.bind(this),
      onResizing: this.onResizing.bind(this),
      onResizeEnd: this.onResizing.bind(this)
    });
    this.addDestroyFunc(finishedWithResizeFunc);
    this.setInverted(this.gridOptionsWrapper.isEnableRtl());
  };
  HorizontalResizeComp.prototype.onResizeStart = function () {
    this.startingWidth = this.elementToResize.offsetWidth;
  };
  HorizontalResizeComp.prototype.onResizing = function (delta) {
    var direction = this.inverted ? -1 : 1;
    var newWidth = Math.max(this.minWidth, Math.floor(this.startingWidth - delta * direction));
    if (this.maxWidth != null) {
      newWidth = Math.min(this.maxWidth, newWidth);
    }
    this.elementToResize.style.width = newWidth + "px";
  };
  HorizontalResizeComp.prototype.setInverted = function (inverted) {
    this.inverted = inverted;
  };
  HorizontalResizeComp.prototype.setMaxWidth = function (value) {
    this.maxWidth = value;
  };
  HorizontalResizeComp.prototype.setMinWidth = function (value) {
    if (value != null) {
      this.minWidth = value;
    } else {
      this.minWidth = 100;
    }
  };
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('horizontalResizeService')], HorizontalResizeComp.prototype, "horizontalResizeService", void 0);
  __decorate([_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.PostConstruct], HorizontalResizeComp.prototype, "postConstruct", null);
  return HorizontalResizeComp;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Component);


/***/ }),

/***/ 76281:
/*!*****************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/side-bar/dist/es6/sideBar/sideBarButtonComp.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SideBarButtonComp": () => (/* binding */ SideBarButtonComp)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var SideBarButtonComp = /** @class */function (_super) {
  __extends(SideBarButtonComp, _super);
  function SideBarButtonComp(toolPanelDef) {
    var _this = _super.call(this) || this;
    _this.toolPanelDef = toolPanelDef;
    return _this;
  }
  SideBarButtonComp.prototype.getToolPanelId = function () {
    return this.toolPanelDef.id;
  };
  SideBarButtonComp.prototype.postConstruct = function () {
    var template = this.createTemplate();
    this.setTemplate(template);
    this.eIconWrapper.insertAdjacentElement('afterbegin', _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan(this.toolPanelDef.iconKey, this.gridOptionsWrapper));
    this.addManagedListener(this.eToggleButton, 'click', this.onButtonPressed.bind(this));
  };
  SideBarButtonComp.prototype.createTemplate = function () {
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    var def = this.toolPanelDef;
    var label = translate(def.labelKey, def.labelDefault);
    var res = /* html */"<div class=\"ag-side-button\" role=\"presentation\">\n                <button type=\"button\" ref=\"eToggleButton\" tabindex=\"-1\" role=\"tab\" class=\"ag-side-button-button\">\n                    <div ref=\"eIconWrapper\" class=\"ag-side-button-icon-wrapper\" aria-hidden=\"true\"></div>\n                    <span class=\"ag-side-button-label\">" + label + "</span>\n                </button>\n            </div>";
    return res;
  };
  SideBarButtonComp.prototype.onButtonPressed = function () {
    this.dispatchEvent({
      type: SideBarButtonComp.EVENT_TOGGLE_BUTTON_CLICKED
    });
  };
  SideBarButtonComp.prototype.setSelected = function (selected) {
    this.addOrRemoveCssClass('ag-selected', selected);
  };
  SideBarButtonComp.EVENT_TOGGLE_BUTTON_CLICKED = 'toggleButtonClicked';
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eToggleButton')], SideBarButtonComp.prototype, "eToggleButton", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eIconWrapper')], SideBarButtonComp.prototype, "eIconWrapper", void 0);
  __decorate([_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.PostConstruct], SideBarButtonComp.prototype, "postConstruct", null);
  return SideBarButtonComp;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Component);


/***/ }),

/***/ 160626:
/*!******************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/side-bar/dist/es6/sideBar/sideBarButtonsComp.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SideBarButtonsComp": () => (/* binding */ SideBarButtonsComp)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
/* harmony import */ var _sideBarButtonComp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sideBarButtonComp */ 76281);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var SideBarButtonsComp = /** @class */function (_super) {
  __extends(SideBarButtonsComp, _super);
  function SideBarButtonsComp() {
    var _this = _super.call(this, SideBarButtonsComp.TEMPLATE) || this;
    _this.buttonComps = [];
    return _this;
  }
  SideBarButtonsComp.prototype.postConstruct = function () {
    this.addManagedListener(this.getFocusableElement(), 'keydown', this.handleKeyDown.bind(this));
  };
  SideBarButtonsComp.prototype.handleKeyDown = function (e) {
    if (e.keyCode !== _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.KeyCode.TAB || !e.shiftKey) {
      return;
    }
    var lastColumn = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.last(this.columnModel.getAllDisplayedColumns());
    if (this.focusService.focusGridView(lastColumn, true)) {
      e.preventDefault();
    }
  };
  SideBarButtonsComp.prototype.setToolPanelDefs = function (toolPanelDefs) {
    toolPanelDefs.forEach(this.addButtonComp.bind(this));
  };
  SideBarButtonsComp.prototype.setActiveButton = function (id) {
    this.buttonComps.forEach(function (comp) {
      comp.setSelected(id === comp.getToolPanelId());
    });
  };
  SideBarButtonsComp.prototype.addButtonComp = function (def) {
    var _this = this;
    var buttonComp = this.createBean(new _sideBarButtonComp__WEBPACK_IMPORTED_MODULE_1__.SideBarButtonComp(def));
    this.buttonComps.push(buttonComp);
    this.appendChild(buttonComp);
    buttonComp.addEventListener(_sideBarButtonComp__WEBPACK_IMPORTED_MODULE_1__.SideBarButtonComp.EVENT_TOGGLE_BUTTON_CLICKED, function () {
      _this.dispatchEvent({
        type: SideBarButtonsComp.EVENT_SIDE_BAR_BUTTON_CLICKED,
        toolPanelId: def.id
      });
    });
  };
  SideBarButtonsComp.prototype.clearButtons = function () {
    this.buttonComps = this.destroyBeans(this.buttonComps);
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.clearElement(this.getGui());
  };
  SideBarButtonsComp.EVENT_SIDE_BAR_BUTTON_CLICKED = 'sideBarButtonClicked';
  SideBarButtonsComp.TEMPLATE = "<div class=\"ag-side-buttons\" role=\"tablist\"></div>";
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('focusService')], SideBarButtonsComp.prototype, "focusService", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')], SideBarButtonsComp.prototype, "columnModel", void 0);
  __decorate([_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.PostConstruct], SideBarButtonsComp.prototype, "postConstruct", null);
  __decorate([_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.PreDestroy], SideBarButtonsComp.prototype, "clearButtons", null);
  return SideBarButtonsComp;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Component);


/***/ }),

/***/ 160232:
/*!***********************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/side-bar/dist/es6/sideBar/sideBarComp.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SideBarComp": () => (/* binding */ SideBarComp)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
/* harmony import */ var _sideBarButtonsComp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sideBarButtonsComp */ 160626);
/* harmony import */ var _toolPanelWrapper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./toolPanelWrapper */ 451528);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};



var SideBarComp = /** @class */function (_super) {
  __extends(SideBarComp, _super);
  function SideBarComp() {
    var _this = _super.call(this, SideBarComp.TEMPLATE) || this;
    _this.toolPanelWrappers = [];
    return _this;
  }
  SideBarComp.prototype.postConstruct = function () {
    var _this = this;
    this.sideBarButtonsComp.addEventListener(_sideBarButtonsComp__WEBPACK_IMPORTED_MODULE_1__.SideBarButtonsComp.EVENT_SIDE_BAR_BUTTON_CLICKED, this.onToolPanelButtonClicked.bind(this));
    this.setSideBarDef();
    this.gridOptionsWrapper.addEventListener('sideBar', function () {
      _this.clearDownUi();
      _this.setSideBarDef();
    });
    this.gridApi.registerSideBarComp(this);
    this.createManagedBean(new _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ManagedFocusFeature(this.getFocusableElement(), {
      onTabKeyDown: this.onTabKeyDown.bind(this),
      handleKeyDown: this.handleKeyDown.bind(this)
    }));
  };
  SideBarComp.prototype.onTabKeyDown = function (e) {
    if (e.defaultPrevented) {
      return;
    }
    var _a = this,
      focusService = _a.focusService,
      sideBarButtonsComp = _a.sideBarButtonsComp;
    var eGui = this.getGui();
    var sideBarGui = sideBarButtonsComp.getGui();
    var activeElement = document.activeElement;
    var openPanel = eGui.querySelector('.ag-tool-panel-wrapper:not(.ag-hidden)');
    if (!openPanel) {
      return;
    }
    if (sideBarGui.contains(activeElement)) {
      if (focusService.focusInto(openPanel, e.shiftKey)) {
        e.preventDefault();
      }
    } else {
      if (!focusService.isFocusUnderManagedComponent(openPanel) && e.shiftKey) {
        var firstFocusableEl = focusService.findFocusableElements(openPanel)[0];
        if (document.activeElement === firstFocusableEl) {
          var selectedButton = sideBarGui.querySelector('.ag-selected button');
          if (selectedButton) {
            e.preventDefault();
            selectedButton.focus();
          }
        }
      }
    }
  };
  SideBarComp.prototype.handleKeyDown = function (e) {
    if (!this.sideBarButtonsComp.getGui().contains(document.activeElement)) {
      return;
    }
    var sideBarGui = this.sideBarButtonsComp.getGui();
    var buttons = Array.prototype.slice.call(sideBarGui.querySelectorAll('.ag-side-button'));
    var currentButton = document.activeElement;
    var currentPos = _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.findIndex(buttons, function (button) {
      return button.contains(currentButton);
    });
    var nextPos = null;
    switch (e.keyCode) {
      case _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.KeyCode.LEFT:
      case _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.KeyCode.UP:
        nextPos = Math.max(0, currentPos - 1);
        break;
      case _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.KeyCode.RIGHT:
      case _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.KeyCode.DOWN:
        nextPos = Math.min(currentPos + 1, buttons.length - 1);
        break;
    }
    if (nextPos === null) {
      return;
    }
    var innerButton = buttons[nextPos].querySelector('button');
    if (innerButton) {
      innerButton.focus();
      e.preventDefault();
    }
  };
  SideBarComp.prototype.onToolPanelButtonClicked = function (event) {
    var id = event.toolPanelId;
    var openedItem = this.openedItem();
    // if item was already open, we close it
    if (openedItem === id) {
      this.openToolPanel(undefined); // passing undefined closes
    } else {
      this.openToolPanel(id);
    }
  };
  SideBarComp.prototype.clearDownUi = function () {
    this.sideBarButtonsComp.clearButtons();
    this.destroyToolPanelWrappers();
  };
  SideBarComp.prototype.setSideBarDef = function () {
    // initially hide side bar
    this.setDisplayed(false);
    var sideBar = this.gridOptionsWrapper.getSideBar();
    var sideBarExists = !!sideBar && !!sideBar.toolPanels;
    if (!sideBarExists) {
      return;
    }
    var shouldDisplaySideBar = sideBarExists && !sideBar.hiddenByDefault;
    this.setDisplayed(shouldDisplaySideBar);
    var toolPanelDefs = sideBar.toolPanels;
    this.sideBarButtonsComp.setToolPanelDefs(toolPanelDefs);
    this.setupToolPanels(toolPanelDefs);
    this.setSideBarPosition(sideBar.position);
    if (!sideBar.hiddenByDefault) {
      this.openToolPanel(sideBar.defaultToolPanel);
    }
  };
  SideBarComp.prototype.setSideBarPosition = function (position) {
    if (!position) {
      position = 'right';
    }
    var isLeft = position === 'left';
    var resizerSide = isLeft ? 'right' : 'left';
    var eGui = this.getGui();
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.addOrRemoveCssClass(eGui, 'ag-side-bar-left', isLeft);
    _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.addOrRemoveCssClass(eGui, 'ag-side-bar-right', !isLeft);
    this.toolPanelWrappers.forEach(function (wrapper) {
      wrapper.setResizerSizerSide(resizerSide);
    });
    return this;
  };
  SideBarComp.prototype.setupToolPanels = function (defs) {
    var _this = this;
    defs.forEach(function (def) {
      if (def.id == null) {
        console.warn("ag-grid: please review all your toolPanel components, it seems like at least one of them doesn't have an id");
        return;
      }
      // helpers, in case user doesn't have the right module loaded
      if (def.toolPanel === 'agColumnsToolPanel') {
        var moduleMissing = !_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.assertRegistered(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.ColumnToolPanelModule, 'Column Tool Panel');
        if (moduleMissing) {
          return;
        }
      }
      if (def.toolPanel === 'agFiltersToolPanel') {
        var moduleMissing = !_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.assertRegistered(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.FiltersToolPanelModule, 'Filters Tool Panel');
        if (moduleMissing) {
          return;
        }
      }
      var wrapper = new _toolPanelWrapper__WEBPACK_IMPORTED_MODULE_2__.ToolPanelWrapper();
      _this.getContext().createBean(wrapper);
      wrapper.setToolPanelDef(def);
      wrapper.setDisplayed(false);
      _this.getGui().appendChild(wrapper.getGui());
      _this.toolPanelWrappers.push(wrapper);
    });
  };
  SideBarComp.prototype.refresh = function () {
    this.toolPanelWrappers.forEach(function (wrapper) {
      return wrapper.refresh();
    });
  };
  SideBarComp.prototype.openToolPanel = function (key) {
    var currentlyOpenedKey = this.openedItem();
    if (currentlyOpenedKey === key) {
      return;
    }
    this.toolPanelWrappers.forEach(function (wrapper) {
      var show = key === wrapper.getToolPanelId();
      wrapper.setDisplayed(show);
    });
    var newlyOpenedKey = this.openedItem();
    var openToolPanelChanged = currentlyOpenedKey !== newlyOpenedKey;
    if (openToolPanelChanged) {
      this.sideBarButtonsComp.setActiveButton(key);
      this.raiseToolPanelVisibleEvent(key);
    }
  };
  SideBarComp.prototype.getToolPanelInstance = function (key) {
    var toolPanelWrapper = this.toolPanelWrappers.filter(function (toolPanel) {
      return toolPanel.getToolPanelId() === key;
    })[0];
    if (!toolPanelWrapper) {
      console.warn("ag-grid: unable to lookup Tool Panel as invalid key supplied: " + key);
      return;
    }
    return toolPanelWrapper.getToolPanelInstance();
  };
  SideBarComp.prototype.raiseToolPanelVisibleEvent = function (key) {
    var event = {
      type: _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_TOOL_PANEL_VISIBLE_CHANGED,
      source: key,
      api: this.gridOptionsWrapper.getApi(),
      columnApi: this.gridOptionsWrapper.getColumnApi()
    };
    this.eventService.dispatchEvent(event);
  };
  SideBarComp.prototype.close = function () {
    this.openToolPanel(undefined);
  };
  SideBarComp.prototype.isToolPanelShowing = function () {
    return !!this.openedItem();
  };
  SideBarComp.prototype.openedItem = function () {
    var activeToolPanel = null;
    this.toolPanelWrappers.forEach(function (wrapper) {
      if (wrapper.isDisplayed()) {
        activeToolPanel = wrapper.getToolPanelId();
      }
    });
    return activeToolPanel;
  };
  SideBarComp.prototype.destroyToolPanelWrappers = function () {
    var _this = this;
    this.toolPanelWrappers.forEach(function (wrapper) {
      _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__._.removeFromParent(wrapper.getGui());
      _this.destroyBean(wrapper);
    });
    this.toolPanelWrappers.length = 0;
  };
  SideBarComp.prototype.destroy = function () {
    this.destroyToolPanelWrappers();
    _super.prototype.destroy.call(this);
  };
  SideBarComp.TEMPLATE = "<div class=\"ag-side-bar ag-unselectable\">\n            <ag-side-bar-buttons ref=\"sideBarButtons\"></ag-side-bar-buttons>\n        </div>";
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('gridApi')], SideBarComp.prototype, "gridApi", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)('focusService')], SideBarComp.prototype, "focusService", void 0);
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('sideBarButtons')], SideBarComp.prototype, "sideBarButtonsComp", void 0);
  __decorate([_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.PostConstruct], SideBarComp.prototype, "postConstruct", null);
  return SideBarComp;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Component);


/***/ }),

/***/ 451528:
/*!****************************************************************************************!*\
  !*** ./node_modules/@ag-grid-enterprise/side-bar/dist/es6/sideBar/toolPanelWrapper.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ToolPanelWrapper": () => (/* binding */ ToolPanelWrapper)
/* harmony export */ });
/* harmony import */ var _ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-grid-community/core */ 620491);
/* harmony import */ var _horizontalResizeComp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./horizontalResizeComp */ 290877);
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var ToolPanelWrapper = /** @class */function (_super) {
  __extends(ToolPanelWrapper, _super);
  function ToolPanelWrapper() {
    return _super.call(this, ToolPanelWrapper.TEMPLATE) || this;
  }
  ToolPanelWrapper.prototype.setupResize = function () {
    var eGui = this.getGui();
    var resizeBar = this.resizeBar = new _horizontalResizeComp__WEBPACK_IMPORTED_MODULE_1__.HorizontalResizeComp();
    this.getContext().createBean(resizeBar);
    resizeBar.setElementToResize(eGui);
    this.appendChild(resizeBar);
  };
  ToolPanelWrapper.prototype.getToolPanelId = function () {
    return this.toolPanelId;
  };
  ToolPanelWrapper.prototype.setToolPanelDef = function (toolPanelDef) {
    var id = toolPanelDef.id,
      minWidth = toolPanelDef.minWidth,
      maxWidth = toolPanelDef.maxWidth,
      width = toolPanelDef.width;
    this.toolPanelId = id;
    this.width = width;
    var params = {
      api: this.gridOptionsWrapper.getApi(),
      columnApi: this.gridOptionsWrapper.getColumnApi()
    };
    var componentPromise = this.userComponentFactory.newToolPanelComponent(toolPanelDef, params);
    if (componentPromise == null) {
      console.warn("ag-grid: error processing tool panel component " + id + ". You need to specify either 'toolPanel' or 'toolPanelFramework'");
      return;
    }
    componentPromise.then(this.setToolPanelComponent.bind(this));
    if (minWidth != null) {
      this.resizeBar.setMinWidth(minWidth);
    }
    if (maxWidth != null) {
      this.resizeBar.setMaxWidth(maxWidth);
    }
  };
  ToolPanelWrapper.prototype.setToolPanelComponent = function (compInstance) {
    var _this = this;
    this.toolPanelCompInstance = compInstance;
    this.appendChild(compInstance.getGui());
    this.addDestroyFunc(function () {
      _this.destroyBean(compInstance);
    });
    if (this.width) {
      this.getGui().style.width = this.width + "px";
    }
  };
  ToolPanelWrapper.prototype.getToolPanelInstance = function () {
    return this.toolPanelCompInstance;
  };
  ToolPanelWrapper.prototype.setResizerSizerSide = function (side) {
    var isRtl = this.gridOptionsWrapper.isEnableRtl();
    var isLeft = side === 'left';
    var inverted = isRtl ? isLeft : !isLeft;
    this.resizeBar.setInverted(inverted);
  };
  ToolPanelWrapper.prototype.refresh = function () {
    this.toolPanelCompInstance.refresh();
  };
  ToolPanelWrapper.TEMPLATE = "<div class=\"ag-tool-panel-wrapper\"/>";
  __decorate([(0,_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Autowired)("userComponentFactory")], ToolPanelWrapper.prototype, "userComponentFactory", void 0);
  __decorate([_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.PostConstruct], ToolPanelWrapper.prototype, "setupResize", null);
  return ToolPanelWrapper;
}(_ag_grid_community_core__WEBPACK_IMPORTED_MODULE_0__.Component);


/***/ }),

/***/ 442617:
/*!***************************************************************!*\
  !*** ./libs/web/ui/search/src/lib/web-ui-search.component.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WebUiSearchComponent": () => (/* binding */ WebUiSearchComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 94650);
/* harmony import */ var _icon_src_lib_web_ui_icon_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../icon/src/lib/web-ui-icon.component */ 768164);



class WebUiSearchComponent {
  constructor() {
    this.focused = false;
    this.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.submit = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.focus = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.blur = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
  }
  set value(value) {
    this._value = value;
  }
  get value() {
    var _a;
    return (_a = this._value) !== null && _a !== void 0 ? _a : '';
  }
  get showClearButton() {
    var _a;
    return ((_a = this.value) === null || _a === void 0 ? void 0 : _a.length) > 0;
  }
  setValue(val) {
    this._value = val;
    this.valueChange.emit(val);
  }
  onFocus() {
    this.focus.emit();
    this.focused = true;
  }
  onBlur() {
    this.blur.emit();
    this.focused = false;
  }
  onSubmit() {
    this.submit.emit();
  }
  onClearClick() {
    this._value = '';
    this.valueChange.emit('');
  }
}
WebUiSearchComponent.ɵfac = function WebUiSearchComponent_Factory(t) {
  return new (t || WebUiSearchComponent)();
};
WebUiSearchComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: WebUiSearchComponent,
  selectors: [["ui-search"]],
  inputs: {
    value: "value"
  },
  outputs: {
    valueChange: "valueChange",
    submit: "submit",
    focus: "focus",
    blur: "blur"
  },
  decls: 7,
  vars: 7,
  consts: [[1, "dark:border-gray-700", "w-full"], [1, "relative", "rounded-md", "shadow-sm"], [1, "absolute", "inset-y-0", "left-0", "pl-3", "flex", "items-center", "text-gray-500", "pointer-events-none"], ["icon", "search", 1, "h-4", "w-4", "transition", "duration-150", "ease-in-out"], ["type", "text", "name", "search", "id", "search", "placeholder", "Search...", 1, "focus:ring-blue-500", "focus:border-blue-500", "block", "w-full", "pl-10", "sm:text-sm", "border-gray-300", "text-gray-600", "dark:text-gray-300", "dark:bg-transparent", "dark:border-gray-600", "rounded-md", 3, "value", "input", "keyup.enter", "focus", "blur"], ["title", "Clear", 1, "absolute", "inset-y-0", "right-0", "pr-3", "pl-2", "flex", "h-full", "items-center", "text-gray-500", "hover:text-red-700", "transition", "duration-150", "ease-in-out", 3, "click"], ["icon", "delete", 1, "h-4", "w-4"]],
  template: function WebUiSearchComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0)(1, "div", 1)(2, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](3, "ui-icon", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "input", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("input", function WebUiSearchComponent_Template_input_input_4_listener($event) {
        return ctx.valueChange.emit($event.target.value);
      })("keyup.enter", function WebUiSearchComponent_Template_input_keyup_enter_4_listener() {
        return ctx.onSubmit();
      })("focus", function WebUiSearchComponent_Template_input_focus_4_listener() {
        return ctx.onFocus();
      })("blur", function WebUiSearchComponent_Template_input_blur_4_listener() {
        return ctx.onBlur();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "button", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function WebUiSearchComponent_Template_button_click_5_listener() {
        return ctx.onClearClick();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](6, "ui-icon", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("text-blue-700", ctx.focused);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("value", ctx.value);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("opacity-0", !ctx.showClearButton)("opacity-100", ctx.showClearButton);
    }
  },
  dependencies: [_icon_src_lib_web_ui_icon_component__WEBPACK_IMPORTED_MODULE_1__.WebUiIconComponent],
  encapsulation: 2
});

/***/ }),

/***/ 235310:
/*!************************************************************!*\
  !*** ./libs/web/ui/search/src/lib/web-ui-search.module.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WebUiSearchModule": () => (/* binding */ WebUiSearchModule)
/* harmony export */ });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ 836895);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ 134793);
/* harmony import */ var _case_clinical_web_ui_icon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @case-clinical/web/ui/icon */ 320558);
/* harmony import */ var _web_ui_search_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./web-ui-search.component */ 442617);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 94650);





class WebUiSearchModule {}
WebUiSearchModule.ɵfac = function WebUiSearchModule_Factory(t) {
  return new (t || WebUiSearchModule)();
};
WebUiSearchModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: WebUiSearchModule
});
WebUiSearchModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_router__WEBPACK_IMPORTED_MODULE_2__.RouterModule, _case_clinical_web_ui_icon__WEBPACK_IMPORTED_MODULE_3__.WebUiIconModule]
});
(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](WebUiSearchModule, {
    declarations: [_web_ui_search_component__WEBPACK_IMPORTED_MODULE_4__.WebUiSearchComponent],
    imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_router__WEBPACK_IMPORTED_MODULE_2__.RouterModule, _case_clinical_web_ui_icon__WEBPACK_IMPORTED_MODULE_3__.WebUiIconModule],
    exports: [_web_ui_search_component__WEBPACK_IMPORTED_MODULE_4__.WebUiSearchComponent]
  });
})();

/***/ })

}]);