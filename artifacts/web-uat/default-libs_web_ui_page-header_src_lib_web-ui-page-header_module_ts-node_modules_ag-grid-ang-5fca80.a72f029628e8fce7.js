"use strict";
(self["webpackChunkweb"] = self["webpackChunkweb"] || []).push([["default-libs_web_ui_page-header_src_lib_web-ui-page-header_module_ts-node_modules_ag-grid-ang-5fca80"],{

/***/ 586477:
/*!*************************************************************************!*\
  !*** ./libs/web/ui/page-header/src/lib/web-ui-page-header.component.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WebUiPageHeaderComponent": () => (/* binding */ WebUiPageHeaderComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 94650);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ 836895);
/* harmony import */ var _button_src_lib_web_ui_button_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../button/src/lib/web-ui-button.component */ 797800);




function WebUiPageHeaderComponent_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "ui-button", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("showLeftArrowIcon", true);
  }
}
function WebUiPageHeaderComponent_ng_container_4_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
  }
}
function WebUiPageHeaderComponent_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, WebUiPageHeaderComponent_ng_container_4_ng_container_1_Template, 1, 0, "ng-container", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", ctx_r1.controls);
  }
}
function WebUiPageHeaderComponent_ng_container_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "ui-button", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("label", ctx_r2.linkTitle)("link", ctx_r2.linkPath);
  }
}
class WebUiPageHeaderComponent {}
WebUiPageHeaderComponent.ɵfac = function WebUiPageHeaderComponent_Factory(t) {
  return new (t || WebUiPageHeaderComponent)();
};
WebUiPageHeaderComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: WebUiPageHeaderComponent,
  selectors: [["ui-page-header"]],
  inputs: {
    title: "title",
    linkPath: "linkPath",
    linkTitle: "linkTitle",
    showBackButton: "showBackButton",
    controls: "controls"
  },
  decls: 6,
  vars: 4,
  consts: [[1, "flex", "items-center", "px-6", "py-3", "border-b", "dark:border-gray-700", "border-gray-200", "dark:text-gray-100"], [4, "ngIf"], [1, "text-lg", "font-medium", "text-gray-900", "dark:text-gray-100"], ["link", "..", "label", "Back", "variant", "white", 1, "mr-4", 3, "showLeftArrowIcon"], [4, "ngTemplateOutlet"], [1, "ml-auto", 3, "label", "link"]],
  template: function WebUiPageHeaderComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, WebUiPageHeaderComponent_ng_container_1_Template, 2, 1, "ng-container", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, WebUiPageHeaderComponent_ng_container_4_Template, 2, 1, "ng-container", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, WebUiPageHeaderComponent_ng_container_5_Template, 2, 2, "ng-container", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.showBackButton);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", ctx.title, " ");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.controls);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.linkTitle && ctx.linkPath);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgTemplateOutlet, _button_src_lib_web_ui_button_component__WEBPACK_IMPORTED_MODULE_2__.WebUiButtonComponent],
  encapsulation: 2
});

/***/ }),

/***/ 752707:
/*!**********************************************************************!*\
  !*** ./libs/web/ui/page-header/src/lib/web-ui-page-header.module.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WebUiPageHeaderModule": () => (/* binding */ WebUiPageHeaderModule)
/* harmony export */ });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ 836895);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ 134793);
/* harmony import */ var _case_clinical_web_ui_button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @case-clinical/web/ui/button */ 510948);
/* harmony import */ var _web_ui_page_header_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./web-ui-page-header.component */ 586477);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 94650);





class WebUiPageHeaderModule {}
WebUiPageHeaderModule.ɵfac = function WebUiPageHeaderModule_Factory(t) {
  return new (t || WebUiPageHeaderModule)();
};
WebUiPageHeaderModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: WebUiPageHeaderModule
});
WebUiPageHeaderModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_router__WEBPACK_IMPORTED_MODULE_2__.RouterModule, _case_clinical_web_ui_button__WEBPACK_IMPORTED_MODULE_3__.WebUiButtonModule]
});
(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](WebUiPageHeaderModule, {
    declarations: [_web_ui_page_header_component__WEBPACK_IMPORTED_MODULE_4__.WebUiPageHeaderComponent],
    imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_router__WEBPACK_IMPORTED_MODULE_2__.RouterModule, _case_clinical_web_ui_button__WEBPACK_IMPORTED_MODULE_3__.WebUiButtonModule],
    exports: [_web_ui_page_header_component__WEBPACK_IMPORTED_MODULE_4__.WebUiPageHeaderComponent]
  });
})();

/***/ }),

/***/ 427869:
/*!******************************************************************!*\
  !*** ./node_modules/ag-grid-angular/fesm2015/ag-grid-angular.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AgGridAngular": () => (/* binding */ AgGridAngular),
/* harmony export */   "AgGridColumn": () => (/* binding */ AgGridColumn),
/* harmony export */   "AgGridModule": () => (/* binding */ AgGridModule),
/* harmony export */   "AngularFrameworkComponentWrapper": () => (/* binding */ AngularFrameworkComponentWrapper),
/* harmony export */   "AngularFrameworkOverrides": () => (/* binding */ AngularFrameworkOverrides)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 450023);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 94650);
/* harmony import */ var ag_grid_community__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ag-grid-community */ 793564);




var AgGridColumn_1;
let AgGridColumn = AgGridColumn_1 = class AgGridColumn {
  hasChildColumns() {
    if (this.childColumns && this.childColumns.length > 0) {
      // necessary because of https://github.com/angular/angular/issues/10098
      return !(this.childColumns.length === 1 && this.childColumns.first === this);
    }
    return false;
  }
  toColDef() {
    let colDef = this.createColDefFromGridColumn(this);
    if (this.hasChildColumns()) {
      colDef["children"] = this.getChildColDefs(this.childColumns);
    }
    return colDef;
  }
  getChildColDefs(childColumns) {
    return childColumns
    // necessary because of https://github.com/angular/angular/issues/10098
    .filter(column => !column.hasChildColumns()).map(column => {
      return column.toColDef();
    });
  }
  createColDefFromGridColumn(from) {
    let {
        childColumns
      } = from,
      colDef = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__rest)(from, ["childColumns"]);
    return colDef;
  }
};
AgGridColumn.ɵfac = function AgGridColumn_Factory(t) {
  return new (t || AgGridColumn)();
};
AgGridColumn.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineComponent"]({
  type: AgGridColumn,
  selectors: [["ag-grid-column"]],
  contentQueries: function AgGridColumn_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵcontentQuery"](dirIndex, AgGridColumn_1, 4);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵloadQuery"]()) && (ctx.childColumns = _t);
    }
  },
  inputs: {
    children: "children",
    sortingOrder: "sortingOrder",
    allowedAggFuncs: "allowedAggFuncs",
    menuTabs: "menuTabs",
    cellClassRules: "cellClassRules",
    icons: "icons",
    headerGroupComponent: "headerGroupComponent",
    headerGroupComponentFramework: "headerGroupComponentFramework",
    headerGroupComponentParams: "headerGroupComponentParams",
    cellStyle: "cellStyle",
    cellRendererParams: "cellRendererParams",
    cellEditorFramework: "cellEditorFramework",
    cellEditorParams: "cellEditorParams",
    pinnedRowCellRendererFramework: "pinnedRowCellRendererFramework",
    pinnedRowCellRendererParams: "pinnedRowCellRendererParams",
    filterFramework: "filterFramework",
    filterParams: "filterParams",
    headerComponent: "headerComponent",
    headerComponentFramework: "headerComponentFramework",
    headerComponentParams: "headerComponentParams",
    floatingFilterComponent: "floatingFilterComponent",
    floatingFilterComponentParams: "floatingFilterComponentParams",
    floatingFilterComponentFramework: "floatingFilterComponentFramework",
    tooltipComponent: "tooltipComponent",
    tooltipComponentParams: "tooltipComponentParams",
    tooltipComponentFramework: "tooltipComponentFramework",
    refData: "refData",
    columnsMenuParams: "columnsMenuParams",
    headerName: "headerName",
    columnGroupShow: "columnGroupShow",
    headerClass: "headerClass",
    toolPanelClass: "toolPanelClass",
    headerValueGetter: "headerValueGetter",
    groupId: "groupId",
    colId: "colId",
    sort: "sort",
    initialSort: "initialSort",
    field: "field",
    type: "type",
    tooltipField: "tooltipField",
    headerTooltip: "headerTooltip",
    cellClass: "cellClass",
    showRowGroup: "showRowGroup",
    filter: "filter",
    initialAggFunc: "initialAggFunc",
    aggFunc: "aggFunc",
    cellRenderer: "cellRenderer",
    cellEditor: "cellEditor",
    pinned: "pinned",
    initialPinned: "initialPinned",
    chartDataType: "chartDataType",
    sortedAt: "sortedAt",
    sortIndex: "sortIndex",
    initialSortIndex: "initialSortIndex",
    flex: "flex",
    initialFlex: "initialFlex",
    width: "width",
    initialWidth: "initialWidth",
    minWidth: "minWidth",
    maxWidth: "maxWidth",
    rowGroupIndex: "rowGroupIndex",
    initialRowGroupIndex: "initialRowGroupIndex",
    pivotIndex: "pivotIndex",
    initialPivotIndex: "initialPivotIndex",
    dndSourceOnRowDrag: "dndSourceOnRowDrag",
    valueGetter: "valueGetter",
    valueSetter: "valueSetter",
    filterValueGetter: "filterValueGetter",
    keyCreator: "keyCreator",
    cellRendererFramework: "cellRendererFramework",
    pinnedRowCellRenderer: "pinnedRowCellRenderer",
    valueFormatter: "valueFormatter",
    pinnedRowValueFormatter: "pinnedRowValueFormatter",
    valueParser: "valueParser",
    comparator: "comparator",
    equals: "equals",
    pivotComparator: "pivotComparator",
    suppressKeyboardEvent: "suppressKeyboardEvent",
    suppressHeaderKeyboardEvent: "suppressHeaderKeyboardEvent",
    colSpan: "colSpan",
    rowSpan: "rowSpan",
    getQuickFilterText: "getQuickFilterText",
    newValueHandler: "newValueHandler",
    onCellValueChanged: "onCellValueChanged",
    onCellClicked: "onCellClicked",
    onCellDoubleClicked: "onCellDoubleClicked",
    onCellContextMenu: "onCellContextMenu",
    rowDragText: "rowDragText",
    tooltipValueGetter: "tooltipValueGetter",
    cellRendererSelector: "cellRendererSelector",
    cellEditorSelector: "cellEditorSelector",
    suppressCellFlash: "suppressCellFlash",
    suppressColumnsToolPanel: "suppressColumnsToolPanel",
    suppressFiltersToolPanel: "suppressFiltersToolPanel",
    openByDefault: "openByDefault",
    marryChildren: "marryChildren",
    hide: "hide",
    initialHide: "initialHide",
    rowGroup: "rowGroup",
    initialRowGroup: "initialRowGroup",
    pivot: "pivot",
    initialPivot: "initialPivot",
    checkboxSelection: "checkboxSelection",
    headerCheckboxSelection: "headerCheckboxSelection",
    headerCheckboxSelectionFilteredOnly: "headerCheckboxSelectionFilteredOnly",
    suppressMenu: "suppressMenu",
    suppressMovable: "suppressMovable",
    lockPosition: "lockPosition",
    lockVisible: "lockVisible",
    lockPinned: "lockPinned",
    unSortIcon: "unSortIcon",
    suppressSizeToFit: "suppressSizeToFit",
    suppressAutoSize: "suppressAutoSize",
    enableRowGroup: "enableRowGroup",
    enablePivot: "enablePivot",
    enableValue: "enableValue",
    editable: "editable",
    suppressPaste: "suppressPaste",
    suppressNavigable: "suppressNavigable",
    enableCellChangeFlash: "enableCellChangeFlash",
    rowDrag: "rowDrag",
    dndSource: "dndSource",
    autoHeight: "autoHeight",
    wrapText: "wrapText",
    sortable: "sortable",
    resizable: "resizable",
    singleClickEdit: "singleClickEdit",
    floatingFilter: "floatingFilter"
  },
  decls: 0,
  vars: 0,
  template: function AgGridColumn_Template(rf, ctx) {},
  encapsulation: 2
});
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.ContentChildren)(AgGridColumn_1), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.QueryList)], AgGridColumn.prototype, "childColumns", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "children", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "sortingOrder", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "allowedAggFuncs", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "menuTabs", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "cellClassRules", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "icons", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "headerGroupComponent", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "headerGroupComponentFramework", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "headerGroupComponentParams", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "cellStyle", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "cellRendererParams", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "cellEditorFramework", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "cellEditorParams", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "pinnedRowCellRendererFramework", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "pinnedRowCellRendererParams", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "filterFramework", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "filterParams", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "headerComponent", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "headerComponentFramework", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "headerComponentParams", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "floatingFilterComponent", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "floatingFilterComponentParams", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "floatingFilterComponentFramework", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "tooltipComponent", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "tooltipComponentParams", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "tooltipComponentFramework", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "refData", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "columnsMenuParams", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "headerName", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "columnGroupShow", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "headerClass", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "toolPanelClass", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "headerValueGetter", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "groupId", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "colId", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "sort", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "initialSort", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "field", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "type", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "tooltipField", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "headerTooltip", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "cellClass", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "showRowGroup", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "filter", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "initialAggFunc", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "aggFunc", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "cellRenderer", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "cellEditor", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "pinned", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "initialPinned", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "chartDataType", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "sortedAt", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "sortIndex", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "initialSortIndex", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "flex", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "initialFlex", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "width", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "initialWidth", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "minWidth", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "maxWidth", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "rowGroupIndex", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "initialRowGroupIndex", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "pivotIndex", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "initialPivotIndex", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "dndSourceOnRowDrag", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "valueGetter", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "valueSetter", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "filterValueGetter", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "keyCreator", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "cellRendererFramework", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "pinnedRowCellRenderer", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "valueFormatter", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "pinnedRowValueFormatter", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "valueParser", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "comparator", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "equals", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "pivotComparator", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "suppressKeyboardEvent", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "suppressHeaderKeyboardEvent", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "colSpan", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "rowSpan", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "getQuickFilterText", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "newValueHandler", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "onCellValueChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "onCellClicked", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "onCellDoubleClicked", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "onCellContextMenu", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "rowDragText", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "tooltipValueGetter", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "cellRendererSelector", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "cellEditorSelector", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "suppressCellFlash", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "suppressColumnsToolPanel", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "suppressFiltersToolPanel", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "openByDefault", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "marryChildren", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "hide", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "initialHide", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "rowGroup", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "initialRowGroup", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "pivot", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "initialPivot", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "checkboxSelection", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "headerCheckboxSelection", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "headerCheckboxSelectionFilteredOnly", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "suppressMenu", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "suppressMovable", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "lockPosition", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "lockVisible", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "lockPinned", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "unSortIcon", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "suppressSizeToFit", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "suppressAutoSize", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "enableRowGroup", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "enablePivot", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "enableValue", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "editable", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "suppressPaste", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "suppressNavigable", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "enableCellChangeFlash", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "rowDrag", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "dndSource", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "autoHeight", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "wrapText", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "sortable", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "resizable", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "singleClickEdit", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridColumn.prototype, "floatingFilter", void 0);
let AngularFrameworkOverrides = class AngularFrameworkOverrides extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.VanillaFrameworkOverrides {
  constructor(_ngZone) {
    super();
    this._ngZone = _ngZone;
  }
  setEmitterUsedCallback(isEmitterUsed) {
    this.isEmitterUsed = isEmitterUsed;
  }
  setTimeout(action, timeout) {
    if (this._ngZone) {
      this._ngZone.runOutsideAngular(() => {
        window.setTimeout(() => {
          action();
        }, timeout);
      });
    } else {
      window.setTimeout(() => {
        action();
      }, timeout);
    }
  }
  addEventListener(element, eventType, listener, useCapture) {
    if (this.isOutsideAngular(eventType) && this._ngZone) {
      this._ngZone.runOutsideAngular(() => {
        element.addEventListener(eventType, listener, useCapture);
      });
    } else {
      element.addEventListener(eventType, listener, useCapture);
    }
  }
  dispatchEvent(eventType, listener) {
    if (this.isOutsideAngular(eventType)) {
      if (this._ngZone) {
        this._ngZone.runOutsideAngular(listener);
      } else {
        listener();
      }
    } else if (this.isEmitterUsed(eventType)) {
      // only trigger off events (and potentially change detection) if actually used
      if (!_angular_core__WEBPACK_IMPORTED_MODULE_2__.NgZone.isInAngularZone() && this._ngZone) {
        this._ngZone.run(listener);
      } else {
        listener();
      }
    }
  }
};
AngularFrameworkOverrides.ɵfac = function AngularFrameworkOverrides_Factory(t) {
  return new (t || AngularFrameworkOverrides)(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_2__.NgZone));
};
AngularFrameworkOverrides.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjectable"]({
  token: AngularFrameworkOverrides,
  factory: function (t) {
    return AngularFrameworkOverrides.ɵfac(t);
  }
});
AngularFrameworkOverrides.ctorParameters = () => [{
  type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.NgZone
}];
AngularFrameworkOverrides = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_2__.NgZone])], AngularFrameworkOverrides);
let AngularFrameworkComponentWrapper = class AngularFrameworkComponentWrapper extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BaseComponentWrapper {
  setViewContainerRef(viewContainerRef) {
    this.viewContainerRef = viewContainerRef;
  }
  setComponentFactoryResolver(componentFactoryResolver) {
    this.componentFactoryResolver = componentFactoryResolver;
  }
  createWrapper(OriginalConstructor) {
    let that = this;
    class DynamicAgNg2Component extends BaseGuiComponent {
      init(params) {
        super.init(params);
        this._componentRef.changeDetectorRef.detectChanges();
      }
      createComponent() {
        return that.createComponent(OriginalConstructor);
      }
      hasMethod(name) {
        return wrapper.getFrameworkComponentInstance()[name] != null;
      }
      callMethod(name, args) {
        const componentRef = this.getFrameworkComponentInstance();
        return wrapper.getFrameworkComponentInstance()[name].apply(componentRef, args);
      }
      addMethod(name, callback) {
        wrapper[name] = callback;
      }
    }
    let wrapper = new DynamicAgNg2Component();
    return wrapper;
  }
  createComponent(componentType) {
    // used to cache the factory, but this a) caused issues when used with either webpack/angularcli with --prod
    // but more significantly, the underlying implementation of resolveComponentFactory uses a map too, so us
    // caching the factory here yields no performance benefits
    let factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
    return this.viewContainerRef.createComponent(factory);
  }
};
AngularFrameworkComponentWrapper.ɵfac = /*@__PURE__*/function () {
  let ɵAngularFrameworkComponentWrapper_BaseFactory;
  return function AngularFrameworkComponentWrapper_Factory(t) {
    return (ɵAngularFrameworkComponentWrapper_BaseFactory || (ɵAngularFrameworkComponentWrapper_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵgetInheritedFactory"](AngularFrameworkComponentWrapper)))(t || AngularFrameworkComponentWrapper);
  };
}();
AngularFrameworkComponentWrapper.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjectable"]({
  token: AngularFrameworkComponentWrapper,
  factory: function (t) {
    return AngularFrameworkComponentWrapper.ɵfac(t);
  }
});
class BaseGuiComponent {
  init(params) {
    this._params = params;
    this._componentRef = this.createComponent();
    this._agAwareComponent = this._componentRef.instance;
    this._frameworkComponentInstance = this._componentRef.instance;
    this._eGui = this._componentRef.location.nativeElement;
    this._agAwareComponent.agInit(this._params);
  }
  getGui() {
    return this._eGui;
  }
  destroy() {
    if (this._componentRef) {
      this._componentRef.destroy();
    }
  }
  getFrameworkComponentInstance() {
    return this._frameworkComponentInstance;
  }
}
let AgGridAngular = class AgGridAngular {
  constructor(elementDef, viewContainerRef, angularFrameworkOverrides, frameworkComponentWrapper, componentFactoryResolver) {
    this.viewContainerRef = viewContainerRef;
    this.angularFrameworkOverrides = angularFrameworkOverrides;
    this.frameworkComponentWrapper = frameworkComponentWrapper;
    this.componentFactoryResolver = componentFactoryResolver;
    this._initialised = false;
    this._destroyed = false;
    // in order to ensure firing of gridReady is deterministic
    this._fullyReady = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgPromise.resolve(true);
    // @START@
    this.alignedGrids = undefined;
    this.rowData = undefined;
    this.columnDefs = undefined;
    this.excelStyles = undefined;
    this.pinnedTopRowData = undefined;
    this.pinnedBottomRowData = undefined;
    this.chartThemes = undefined;
    this.components = undefined;
    this.frameworkComponents = undefined;
    this.rowStyle = undefined;
    this.context = undefined;
    this.autoGroupColumnDef = undefined;
    this.localeText = undefined;
    this.icons = undefined;
    this.datasource = undefined;
    this.serverSideDatasource = undefined;
    this.viewportDatasource = undefined;
    this.groupRowRendererParams = undefined;
    this.aggFuncs = undefined;
    this.fullWidthCellRendererParams = undefined;
    this.defaultColGroupDef = undefined;
    this.defaultColDef = undefined;
    this.defaultExportParams = undefined;
    this.defaultCsvExportParams = undefined;
    this.defaultExcelExportParams = undefined;
    this.columnTypes = undefined;
    this.rowClassRules = undefined;
    this.detailGridOptions = undefined;
    this.detailCellRendererParams = undefined;
    this.loadingCellRendererParams = undefined;
    this.loadingOverlayComponentParams = undefined;
    this.noRowsOverlayComponentParams = undefined;
    this.popupParent = undefined;
    this.colResizeDefault = undefined;
    this.reduxStore = undefined;
    this.statusBar = undefined;
    this.sideBar = undefined;
    this.chartThemeOverrides = undefined;
    this.customChartThemes = undefined;
    this.sortingOrder = undefined;
    this.rowClass = undefined;
    this.rowSelection = undefined;
    this.overlayLoadingTemplate = undefined;
    this.overlayNoRowsTemplate = undefined;
    this.quickFilterText = undefined;
    this.rowModelType = undefined;
    this.editType = undefined;
    this.domLayout = undefined;
    this.clipboardDeliminator = undefined;
    this.rowGroupPanelShow = undefined;
    this.multiSortKey = undefined;
    this.pivotColumnGroupTotals = undefined;
    this.pivotRowTotals = undefined;
    this.pivotPanelShow = undefined;
    this.fillHandleDirection = undefined;
    this.serverSideStoreType = undefined;
    this.rowHeight = undefined;
    this.detailRowHeight = undefined;
    this.rowBuffer = undefined;
    this.colWidth = undefined;
    this.headerHeight = undefined;
    this.groupHeaderHeight = undefined;
    this.floatingFiltersHeight = undefined;
    this.pivotHeaderHeight = undefined;
    this.pivotGroupHeaderHeight = undefined;
    this.groupDefaultExpanded = undefined;
    this.minColWidth = undefined;
    this.maxColWidth = undefined;
    this.viewportRowModelPageSize = undefined;
    this.viewportRowModelBufferSize = undefined;
    this.autoSizePadding = undefined;
    this.maxBlocksInCache = undefined;
    this.maxConcurrentDatasourceRequests = undefined;
    this.tooltipShowDelay = undefined;
    this.cacheOverflowSize = undefined;
    this.paginationPageSize = undefined;
    this.cacheBlockSize = undefined;
    this.infiniteInitialRowCount = undefined;
    this.scrollbarWidth = undefined;
    this.batchUpdateWaitMillis = undefined;
    this.asyncTransactionWaitMillis = undefined;
    this.blockLoadDebounceMillis = undefined;
    this.keepDetailRowsCount = undefined;
    this.undoRedoCellEditingLimit = undefined;
    this.cellFlashDelay = undefined;
    this.cellFadeDelay = undefined;
    this.tabIndex = undefined;
    this.localeTextFunc = undefined;
    this.groupRowInnerRenderer = undefined;
    this.groupRowInnerRendererFramework = undefined;
    this.dateComponent = undefined;
    this.dateComponentFramework = undefined;
    this.groupRowRenderer = undefined;
    this.groupRowRendererFramework = undefined;
    this.isExternalFilterPresent = undefined;
    this.getRowHeight = undefined;
    this.doesExternalFilterPass = undefined;
    this.getRowClass = undefined;
    this.getRowStyle = undefined;
    this.getRowClassRules = undefined;
    this.traverseNode = undefined;
    this.getContextMenuItems = undefined;
    this.getMainMenuItems = undefined;
    this.processRowPostCreate = undefined;
    this.processCellForClipboard = undefined;
    this.groupRowAggNodes = undefined;
    this.getRowNodeId = undefined;
    this.isFullWidthCell = undefined;
    this.fullWidthCellRenderer = undefined;
    this.fullWidthCellRendererFramework = undefined;
    this.processSecondaryColDef = undefined;
    this.processSecondaryColGroupDef = undefined;
    this.getBusinessKeyForNode = undefined;
    this.sendToClipboard = undefined;
    this.navigateToNextHeader = undefined;
    this.tabToNextHeader = undefined;
    this.navigateToNextCell = undefined;
    this.tabToNextCell = undefined;
    this.getDetailRowData = undefined;
    this.processCellFromClipboard = undefined;
    this.getDocument = undefined;
    this.postProcessPopup = undefined;
    this.getChildCount = undefined;
    this.getDataPath = undefined;
    this.loadingCellRenderer = undefined;
    this.loadingCellRendererFramework = undefined;
    this.loadingOverlayComponent = undefined;
    this.loadingOverlayComponentFramework = undefined;
    this.noRowsOverlayComponent = undefined;
    this.noRowsOverlayComponentFramework = undefined;
    this.detailCellRenderer = undefined;
    this.detailCellRendererFramework = undefined;
    this.defaultGroupSortComparator = undefined;
    this.isRowMaster = undefined;
    this.isRowSelectable = undefined;
    this.postSort = undefined;
    this.processHeaderForClipboard = undefined;
    this.paginationNumberFormatter = undefined;
    this.processDataFromClipboard = undefined;
    this.getServerSideGroupKey = undefined;
    this.isServerSideGroup = undefined;
    this.suppressKeyboardEvent = undefined;
    this.createChartContainer = undefined;
    this.processChartOptions = undefined;
    this.getChartToolbarItems = undefined;
    this.fillOperation = undefined;
    this.isApplyServerSideTransaction = undefined;
    this.getServerSideStoreParams = undefined;
    this.isServerSideGroupOpenByDefault = undefined;
    this.isGroupOpenByDefault = undefined;
    this.suppressMakeColumnVisibleAfterUnGroup = undefined;
    this.suppressRowClickSelection = undefined;
    this.suppressCellSelection = undefined;
    this.suppressHorizontalScroll = undefined;
    this.alwaysShowHorizontalScroll = undefined;
    this.alwaysShowVerticalScroll = undefined;
    this.debug = undefined;
    this.enableBrowserTooltips = undefined;
    this.enableCellExpressions = undefined;
    this.angularCompileRows = undefined;
    this.angularCompileFilters = undefined;
    this.groupSuppressAutoColumn = undefined;
    this.groupSelectsChildren = undefined;
    this.groupIncludeFooter = undefined;
    this.groupIncludeTotalFooter = undefined;
    this.groupUseEntireRow = undefined;
    this.groupSuppressBlankHeader = undefined;
    this.suppressMenuHide = undefined;
    this.suppressRowDeselection = undefined;
    this.unSortIcon = undefined;
    this.suppressMultiSort = undefined;
    this.singleClickEdit = undefined;
    this.suppressLoadingOverlay = undefined;
    this.suppressNoRowsOverlay = undefined;
    this.suppressAutoSize = undefined;
    this.skipHeaderOnAutoSize = undefined;
    this.suppressParentsInRowNodes = undefined;
    this.suppressColumnMoveAnimation = undefined;
    this.suppressMovableColumns = undefined;
    this.suppressFieldDotNotation = undefined;
    this.enableRangeSelection = undefined;
    this.enableRangeHandle = undefined;
    this.enableFillHandle = undefined;
    this.suppressClearOnFillReduction = undefined;
    this.deltaSort = undefined;
    this.suppressTouch = undefined;
    this.suppressAsyncEvents = undefined;
    this.allowContextMenuWithControlKey = undefined;
    this.suppressContextMenu = undefined;
    this.rememberGroupStateWhenNewData = undefined;
    this.enableCellChangeFlash = undefined;
    this.suppressDragLeaveHidesColumns = undefined;
    this.suppressMiddleClickScrolls = undefined;
    this.suppressPreventDefaultOnMouseWheel = undefined;
    this.suppressCopyRowsToClipboard = undefined;
    this.copyHeadersToClipboard = undefined;
    this.pivotMode = undefined;
    this.suppressAggFuncInHeader = undefined;
    this.suppressColumnVirtualisation = undefined;
    this.suppressAggAtRootLevel = undefined;
    this.suppressFocusAfterRefresh = undefined;
    this.functionsPassive = undefined;
    this.functionsReadOnly = undefined;
    this.animateRows = undefined;
    this.groupSelectsFiltered = undefined;
    this.groupRemoveSingleChildren = undefined;
    this.groupRemoveLowestSingleChildren = undefined;
    this.enableRtl = undefined;
    this.suppressClickEdit = undefined;
    this.rowDragManaged = undefined;
    this.suppressRowDrag = undefined;
    this.suppressMoveWhenRowDragging = undefined;
    this.enableMultiRowDragging = undefined;
    this.enableGroupEdit = undefined;
    this.embedFullWidthRows = undefined;
    this.deprecatedEmbedFullWidthRows = undefined;
    this.suppressPaginationPanel = undefined;
    this.floatingFilter = undefined;
    this.groupHideOpenParents = undefined;
    this.groupMultiAutoColumn = undefined;
    this.pagination = undefined;
    this.stopEditingWhenGridLosesFocus = undefined;
    this.paginationAutoPageSize = undefined;
    this.suppressScrollOnNewData = undefined;
    this.purgeClosedRowNodes = undefined;
    this.cacheQuickFilter = undefined;
    this.deltaRowDataMode = undefined;
    this.ensureDomOrder = undefined;
    this.accentedSort = undefined;
    this.suppressChangeDetection = undefined;
    this.valueCache = undefined;
    this.valueCacheNeverExpires = undefined;
    this.aggregateOnlyChangedColumns = undefined;
    this.suppressAnimationFrame = undefined;
    this.suppressExcelExport = undefined;
    this.suppressCsvExport = undefined;
    this.treeData = undefined;
    this.masterDetail = undefined;
    this.suppressMultiRangeSelection = undefined;
    this.enterMovesDownAfterEdit = undefined;
    this.enterMovesDown = undefined;
    this.suppressPropertyNamesCheck = undefined;
    this.rowMultiSelectWithClick = undefined;
    this.suppressEnterpriseResetOnNewColumns = undefined;
    this.enableOldSetFilterModel = undefined;
    this.suppressRowHoverHighlight = undefined;
    this.suppressRowTransform = undefined;
    this.suppressClipboardPaste = undefined;
    this.suppressLastEmptyLineOnPaste = undefined;
    this.serverSideSortingAlwaysResets = undefined;
    this.reactNext = undefined;
    this.suppressSetColumnStateEvents = undefined;
    this.suppressColumnStateEvents = undefined;
    this.enableCharts = undefined;
    this.deltaColumnMode = undefined;
    this.suppressMaintainUnsortedOrder = undefined;
    this.enableCellTextSelection = undefined;
    this.suppressBrowserResizeObserver = undefined;
    this.suppressMaxRenderedRowRestriction = undefined;
    this.excludeChildrenWhenTreeDataFiltering = undefined;
    this.tooltipMouseTrack = undefined;
    this.keepDetailRows = undefined;
    this.paginateChildRows = undefined;
    this.preventDefaultOnContextMenu = undefined;
    this.undoRedoCellEditing = undefined;
    this.allowDragFromColumnsToolPanel = undefined;
    this.immutableData = undefined;
    this.immutableColumns = undefined;
    this.pivotSuppressAutoColumn = undefined;
    this.suppressExpandablePivotGroups = undefined;
    this.applyColumnDefOrder = undefined;
    this.debounceVerticalScrollbar = undefined;
    this.detailRowAutoHeight = undefined;
    this.serverSideFilteringAlwaysResets = undefined;
    this.suppressAggFilteredOnly = undefined;
    this.showOpenedGroup = undefined;
    this.suppressClipboardApi = undefined;
    this.suppressModelUpdateAfterUpdateTransaction = undefined;
    this.stopEditingWhenCellsLoseFocus = undefined;
    this.columnEverythingChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.newColumnsLoaded = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.columnPivotModeChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.columnRowGroupChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.expandOrCollapseAll = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.columnPivotChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.gridColumnsChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.columnValueChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.columnMoved = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.columnVisible = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.columnPinned = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.columnGroupOpened = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.columnResized = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.displayedColumnsChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.virtualColumnsChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.asyncTransactionsFlushed = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.rowGroupOpened = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.rowDataChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.rowDataUpdated = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.pinnedRowDataChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.rangeSelectionChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.chartCreated = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.chartRangeSelectionChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.chartOptionsChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.chartDestroyed = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.toolPanelVisibleChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.modelUpdated = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.pasteStart = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.pasteEnd = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.fillStart = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.fillEnd = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.cellClicked = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.cellDoubleClicked = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.cellMouseDown = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.cellContextMenu = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.cellValueChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.rowValueChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.cellFocused = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.rowSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.selectionChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.cellKeyDown = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.cellKeyPress = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.cellMouseOver = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.cellMouseOut = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.filterChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.filterModified = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.filterOpened = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.sortChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.virtualRowRemoved = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.rowClicked = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.rowDoubleClicked = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.gridReady = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.gridSizeChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.viewportChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.scrollbarWidthChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.firstDataRendered = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.dragStarted = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.dragStopped = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.checkboxChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.rowEditingStarted = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.rowEditingStopped = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.cellEditingStarted = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.cellEditingStopped = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.bodyScroll = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.animationQueueEmpty = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.heightScaleChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.paginationChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.componentStateChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.bodyHeightChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.displayedColumnsWidthChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.scrollVisibilityChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.columnHoverChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.flashCells = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.paginationPixelOffsetChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.displayedRowsChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.leftPinnedWidthChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.rightPinnedWidthChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.rowContainerHeightChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.rowDragEnter = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.rowDragMove = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.rowDragLeave = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.rowDragEnd = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.popupToFront = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.columnRowGroupChangeRequest = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.columnPivotChangeRequest = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.columnValueChangeRequest = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.columnAggFuncChangeRequest = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.keyboardFocus = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.mouseFocus = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.storeUpdated = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this._nativeElement = elementDef.nativeElement;
  }
  ngAfterViewInit() {
    this.frameworkComponentWrapper.setViewContainerRef(this.viewContainerRef);
    this.frameworkComponentWrapper.setComponentFactoryResolver(this.componentFactoryResolver);
    this.angularFrameworkOverrides.setEmitterUsedCallback(this.isEmitterUsed.bind(this));
    this.gridOptions = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ComponentUtil.copyAttributesToGridOptions(this.gridOptions, this, true);
    this.gridParams = {
      globalEventListener: this.globalEventListener.bind(this),
      frameworkOverrides: this.angularFrameworkOverrides,
      providedBeanInstances: {
        frameworkComponentWrapper: this.frameworkComponentWrapper
      },
      modules: this.modules || []
    };
    if (this.columns && this.columns.length > 0) {
      this.gridOptions.columnDefs = this.columns.map(column => {
        return column.toColDef();
      });
    }
    new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Grid(this._nativeElement, this.gridOptions, this.gridParams);
    if (this.gridOptions.api) {
      this.api = this.gridOptions.api;
    }
    if (this.gridOptions.columnApi) {
      this.columnApi = this.gridOptions.columnApi;
    }
    this._initialised = true;
    // sometimes, especially in large client apps gridReady can fire before ngAfterViewInit
    // this ties these together so that gridReady will always fire after agGridAngular's ngAfterViewInit
    // the actual containing component's ngAfterViewInit will fire just after agGridAngular's
    this._fullyReady.resolveNow(null, resolve => resolve);
  }
  ngOnChanges(changes) {
    if (this._initialised) {
      ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ComponentUtil.processOnChange(changes, this.gridOptions, this.api, this.columnApi);
    }
  }
  ngOnDestroy() {
    if (this._initialised) {
      // need to do this before the destroy, so we know not to emit any events
      // while tearing down the grid.
      this._destroyed = true;
      if (this.api) {
        this.api.destroy();
      }
    }
  }
  // we'll emit the emit if a user is listening for a given event either on the component via normal angular binding
  // or via gridOptions
  isEmitterUsed(eventType) {
    const emitter = this[eventType];
    const hasEmitter = !!emitter && emitter.observers && emitter.observers.length > 0;
    // gridReady => onGridReady
    const asEventName = `on${eventType.charAt(0).toUpperCase()}${eventType.substring(1)}`;
    const hasGridOptionListener = !!this.gridOptions && !!this.gridOptions[asEventName];
    return hasEmitter || hasGridOptionListener;
  }
  globalEventListener(eventType, event) {
    // if we are tearing down, don't emit angular events, as this causes
    // problems with the angular router
    if (this._destroyed) {
      return;
    }
    // generically look up the eventType
    const emitter = this[eventType];
    if (emitter && this.isEmitterUsed(eventType)) {
      if (eventType === 'gridReady') {
        // if the user is listening for gridReady, wait for ngAfterViewInit to fire first, then emit the
        // gridReady event
        this._fullyReady.then(result => {
          emitter.emit(event);
        });
      } else {
        emitter.emit(event);
      }
    } else {
      console.log('AG Grid Angular: could not find EventEmitter: ' + eventType);
    }
  }
};
AgGridAngular.ɵfac = function AgGridAngular_Factory(t) {
  return new (t || AgGridAngular)(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_2__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_2__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](AngularFrameworkOverrides), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](AngularFrameworkComponentWrapper), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_2__.ComponentFactoryResolver));
};
AgGridAngular.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineComponent"]({
  type: AgGridAngular,
  selectors: [["ag-grid-angular"]],
  contentQueries: function AgGridAngular_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵcontentQuery"](dirIndex, AgGridColumn, 4);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵloadQuery"]()) && (ctx.columns = _t);
    }
  },
  inputs: {
    alignedGrids: "alignedGrids",
    rowData: "rowData",
    columnDefs: "columnDefs",
    excelStyles: "excelStyles",
    pinnedTopRowData: "pinnedTopRowData",
    pinnedBottomRowData: "pinnedBottomRowData",
    chartThemes: "chartThemes",
    components: "components",
    frameworkComponents: "frameworkComponents",
    rowStyle: "rowStyle",
    context: "context",
    autoGroupColumnDef: "autoGroupColumnDef",
    localeText: "localeText",
    icons: "icons",
    datasource: "datasource",
    serverSideDatasource: "serverSideDatasource",
    viewportDatasource: "viewportDatasource",
    groupRowRendererParams: "groupRowRendererParams",
    aggFuncs: "aggFuncs",
    fullWidthCellRendererParams: "fullWidthCellRendererParams",
    defaultColGroupDef: "defaultColGroupDef",
    defaultColDef: "defaultColDef",
    defaultExportParams: "defaultExportParams",
    defaultCsvExportParams: "defaultCsvExportParams",
    defaultExcelExportParams: "defaultExcelExportParams",
    columnTypes: "columnTypes",
    rowClassRules: "rowClassRules",
    detailGridOptions: "detailGridOptions",
    detailCellRendererParams: "detailCellRendererParams",
    loadingCellRendererParams: "loadingCellRendererParams",
    loadingOverlayComponentParams: "loadingOverlayComponentParams",
    noRowsOverlayComponentParams: "noRowsOverlayComponentParams",
    popupParent: "popupParent",
    colResizeDefault: "colResizeDefault",
    reduxStore: "reduxStore",
    statusBar: "statusBar",
    sideBar: "sideBar",
    chartThemeOverrides: "chartThemeOverrides",
    customChartThemes: "customChartThemes",
    sortingOrder: "sortingOrder",
    rowClass: "rowClass",
    rowSelection: "rowSelection",
    overlayLoadingTemplate: "overlayLoadingTemplate",
    overlayNoRowsTemplate: "overlayNoRowsTemplate",
    quickFilterText: "quickFilterText",
    rowModelType: "rowModelType",
    editType: "editType",
    domLayout: "domLayout",
    clipboardDeliminator: "clipboardDeliminator",
    rowGroupPanelShow: "rowGroupPanelShow",
    multiSortKey: "multiSortKey",
    pivotColumnGroupTotals: "pivotColumnGroupTotals",
    pivotRowTotals: "pivotRowTotals",
    pivotPanelShow: "pivotPanelShow",
    fillHandleDirection: "fillHandleDirection",
    serverSideStoreType: "serverSideStoreType",
    rowHeight: "rowHeight",
    detailRowHeight: "detailRowHeight",
    rowBuffer: "rowBuffer",
    colWidth: "colWidth",
    headerHeight: "headerHeight",
    groupHeaderHeight: "groupHeaderHeight",
    floatingFiltersHeight: "floatingFiltersHeight",
    pivotHeaderHeight: "pivotHeaderHeight",
    pivotGroupHeaderHeight: "pivotGroupHeaderHeight",
    groupDefaultExpanded: "groupDefaultExpanded",
    minColWidth: "minColWidth",
    maxColWidth: "maxColWidth",
    viewportRowModelPageSize: "viewportRowModelPageSize",
    viewportRowModelBufferSize: "viewportRowModelBufferSize",
    autoSizePadding: "autoSizePadding",
    maxBlocksInCache: "maxBlocksInCache",
    maxConcurrentDatasourceRequests: "maxConcurrentDatasourceRequests",
    tooltipShowDelay: "tooltipShowDelay",
    cacheOverflowSize: "cacheOverflowSize",
    paginationPageSize: "paginationPageSize",
    cacheBlockSize: "cacheBlockSize",
    infiniteInitialRowCount: "infiniteInitialRowCount",
    scrollbarWidth: "scrollbarWidth",
    batchUpdateWaitMillis: "batchUpdateWaitMillis",
    asyncTransactionWaitMillis: "asyncTransactionWaitMillis",
    blockLoadDebounceMillis: "blockLoadDebounceMillis",
    keepDetailRowsCount: "keepDetailRowsCount",
    undoRedoCellEditingLimit: "undoRedoCellEditingLimit",
    cellFlashDelay: "cellFlashDelay",
    cellFadeDelay: "cellFadeDelay",
    tabIndex: "tabIndex",
    localeTextFunc: "localeTextFunc",
    groupRowInnerRenderer: "groupRowInnerRenderer",
    groupRowInnerRendererFramework: "groupRowInnerRendererFramework",
    dateComponent: "dateComponent",
    dateComponentFramework: "dateComponentFramework",
    groupRowRenderer: "groupRowRenderer",
    groupRowRendererFramework: "groupRowRendererFramework",
    isExternalFilterPresent: "isExternalFilterPresent",
    getRowHeight: "getRowHeight",
    doesExternalFilterPass: "doesExternalFilterPass",
    getRowClass: "getRowClass",
    getRowStyle: "getRowStyle",
    getRowClassRules: "getRowClassRules",
    traverseNode: "traverseNode",
    getContextMenuItems: "getContextMenuItems",
    getMainMenuItems: "getMainMenuItems",
    processRowPostCreate: "processRowPostCreate",
    processCellForClipboard: "processCellForClipboard",
    groupRowAggNodes: "groupRowAggNodes",
    getRowNodeId: "getRowNodeId",
    isFullWidthCell: "isFullWidthCell",
    fullWidthCellRenderer: "fullWidthCellRenderer",
    fullWidthCellRendererFramework: "fullWidthCellRendererFramework",
    processSecondaryColDef: "processSecondaryColDef",
    processSecondaryColGroupDef: "processSecondaryColGroupDef",
    getBusinessKeyForNode: "getBusinessKeyForNode",
    sendToClipboard: "sendToClipboard",
    navigateToNextHeader: "navigateToNextHeader",
    tabToNextHeader: "tabToNextHeader",
    navigateToNextCell: "navigateToNextCell",
    tabToNextCell: "tabToNextCell",
    getDetailRowData: "getDetailRowData",
    processCellFromClipboard: "processCellFromClipboard",
    getDocument: "getDocument",
    postProcessPopup: "postProcessPopup",
    getChildCount: "getChildCount",
    getDataPath: "getDataPath",
    loadingCellRenderer: "loadingCellRenderer",
    loadingCellRendererFramework: "loadingCellRendererFramework",
    loadingOverlayComponent: "loadingOverlayComponent",
    loadingOverlayComponentFramework: "loadingOverlayComponentFramework",
    noRowsOverlayComponent: "noRowsOverlayComponent",
    noRowsOverlayComponentFramework: "noRowsOverlayComponentFramework",
    detailCellRenderer: "detailCellRenderer",
    detailCellRendererFramework: "detailCellRendererFramework",
    defaultGroupSortComparator: "defaultGroupSortComparator",
    isRowMaster: "isRowMaster",
    isRowSelectable: "isRowSelectable",
    postSort: "postSort",
    processHeaderForClipboard: "processHeaderForClipboard",
    paginationNumberFormatter: "paginationNumberFormatter",
    processDataFromClipboard: "processDataFromClipboard",
    getServerSideGroupKey: "getServerSideGroupKey",
    isServerSideGroup: "isServerSideGroup",
    suppressKeyboardEvent: "suppressKeyboardEvent",
    createChartContainer: "createChartContainer",
    processChartOptions: "processChartOptions",
    getChartToolbarItems: "getChartToolbarItems",
    fillOperation: "fillOperation",
    isApplyServerSideTransaction: "isApplyServerSideTransaction",
    getServerSideStoreParams: "getServerSideStoreParams",
    isServerSideGroupOpenByDefault: "isServerSideGroupOpenByDefault",
    isGroupOpenByDefault: "isGroupOpenByDefault",
    suppressMakeColumnVisibleAfterUnGroup: "suppressMakeColumnVisibleAfterUnGroup",
    suppressRowClickSelection: "suppressRowClickSelection",
    suppressCellSelection: "suppressCellSelection",
    suppressHorizontalScroll: "suppressHorizontalScroll",
    alwaysShowHorizontalScroll: "alwaysShowHorizontalScroll",
    alwaysShowVerticalScroll: "alwaysShowVerticalScroll",
    debug: "debug",
    enableBrowserTooltips: "enableBrowserTooltips",
    enableCellExpressions: "enableCellExpressions",
    angularCompileRows: "angularCompileRows",
    angularCompileFilters: "angularCompileFilters",
    groupSuppressAutoColumn: "groupSuppressAutoColumn",
    groupSelectsChildren: "groupSelectsChildren",
    groupIncludeFooter: "groupIncludeFooter",
    groupIncludeTotalFooter: "groupIncludeTotalFooter",
    groupUseEntireRow: "groupUseEntireRow",
    groupSuppressBlankHeader: "groupSuppressBlankHeader",
    suppressMenuHide: "suppressMenuHide",
    suppressRowDeselection: "suppressRowDeselection",
    unSortIcon: "unSortIcon",
    suppressMultiSort: "suppressMultiSort",
    singleClickEdit: "singleClickEdit",
    suppressLoadingOverlay: "suppressLoadingOverlay",
    suppressNoRowsOverlay: "suppressNoRowsOverlay",
    suppressAutoSize: "suppressAutoSize",
    skipHeaderOnAutoSize: "skipHeaderOnAutoSize",
    suppressParentsInRowNodes: "suppressParentsInRowNodes",
    suppressColumnMoveAnimation: "suppressColumnMoveAnimation",
    suppressMovableColumns: "suppressMovableColumns",
    suppressFieldDotNotation: "suppressFieldDotNotation",
    enableRangeSelection: "enableRangeSelection",
    enableRangeHandle: "enableRangeHandle",
    enableFillHandle: "enableFillHandle",
    suppressClearOnFillReduction: "suppressClearOnFillReduction",
    deltaSort: "deltaSort",
    suppressTouch: "suppressTouch",
    suppressAsyncEvents: "suppressAsyncEvents",
    allowContextMenuWithControlKey: "allowContextMenuWithControlKey",
    suppressContextMenu: "suppressContextMenu",
    rememberGroupStateWhenNewData: "rememberGroupStateWhenNewData",
    enableCellChangeFlash: "enableCellChangeFlash",
    suppressDragLeaveHidesColumns: "suppressDragLeaveHidesColumns",
    suppressMiddleClickScrolls: "suppressMiddleClickScrolls",
    suppressPreventDefaultOnMouseWheel: "suppressPreventDefaultOnMouseWheel",
    suppressCopyRowsToClipboard: "suppressCopyRowsToClipboard",
    copyHeadersToClipboard: "copyHeadersToClipboard",
    pivotMode: "pivotMode",
    suppressAggFuncInHeader: "suppressAggFuncInHeader",
    suppressColumnVirtualisation: "suppressColumnVirtualisation",
    suppressAggAtRootLevel: "suppressAggAtRootLevel",
    suppressFocusAfterRefresh: "suppressFocusAfterRefresh",
    functionsPassive: "functionsPassive",
    functionsReadOnly: "functionsReadOnly",
    animateRows: "animateRows",
    groupSelectsFiltered: "groupSelectsFiltered",
    groupRemoveSingleChildren: "groupRemoveSingleChildren",
    groupRemoveLowestSingleChildren: "groupRemoveLowestSingleChildren",
    enableRtl: "enableRtl",
    suppressClickEdit: "suppressClickEdit",
    rowDragManaged: "rowDragManaged",
    suppressRowDrag: "suppressRowDrag",
    suppressMoveWhenRowDragging: "suppressMoveWhenRowDragging",
    enableMultiRowDragging: "enableMultiRowDragging",
    enableGroupEdit: "enableGroupEdit",
    embedFullWidthRows: "embedFullWidthRows",
    deprecatedEmbedFullWidthRows: "deprecatedEmbedFullWidthRows",
    suppressPaginationPanel: "suppressPaginationPanel",
    floatingFilter: "floatingFilter",
    groupHideOpenParents: "groupHideOpenParents",
    groupMultiAutoColumn: "groupMultiAutoColumn",
    pagination: "pagination",
    stopEditingWhenGridLosesFocus: "stopEditingWhenGridLosesFocus",
    paginationAutoPageSize: "paginationAutoPageSize",
    suppressScrollOnNewData: "suppressScrollOnNewData",
    purgeClosedRowNodes: "purgeClosedRowNodes",
    cacheQuickFilter: "cacheQuickFilter",
    deltaRowDataMode: "deltaRowDataMode",
    ensureDomOrder: "ensureDomOrder",
    accentedSort: "accentedSort",
    suppressChangeDetection: "suppressChangeDetection",
    valueCache: "valueCache",
    valueCacheNeverExpires: "valueCacheNeverExpires",
    aggregateOnlyChangedColumns: "aggregateOnlyChangedColumns",
    suppressAnimationFrame: "suppressAnimationFrame",
    suppressExcelExport: "suppressExcelExport",
    suppressCsvExport: "suppressCsvExport",
    treeData: "treeData",
    masterDetail: "masterDetail",
    suppressMultiRangeSelection: "suppressMultiRangeSelection",
    enterMovesDownAfterEdit: "enterMovesDownAfterEdit",
    enterMovesDown: "enterMovesDown",
    suppressPropertyNamesCheck: "suppressPropertyNamesCheck",
    rowMultiSelectWithClick: "rowMultiSelectWithClick",
    suppressEnterpriseResetOnNewColumns: "suppressEnterpriseResetOnNewColumns",
    enableOldSetFilterModel: "enableOldSetFilterModel",
    suppressRowHoverHighlight: "suppressRowHoverHighlight",
    suppressRowTransform: "suppressRowTransform",
    suppressClipboardPaste: "suppressClipboardPaste",
    suppressLastEmptyLineOnPaste: "suppressLastEmptyLineOnPaste",
    serverSideSortingAlwaysResets: "serverSideSortingAlwaysResets",
    reactNext: "reactNext",
    suppressSetColumnStateEvents: "suppressSetColumnStateEvents",
    suppressColumnStateEvents: "suppressColumnStateEvents",
    enableCharts: "enableCharts",
    deltaColumnMode: "deltaColumnMode",
    suppressMaintainUnsortedOrder: "suppressMaintainUnsortedOrder",
    enableCellTextSelection: "enableCellTextSelection",
    suppressBrowserResizeObserver: "suppressBrowserResizeObserver",
    suppressMaxRenderedRowRestriction: "suppressMaxRenderedRowRestriction",
    excludeChildrenWhenTreeDataFiltering: "excludeChildrenWhenTreeDataFiltering",
    tooltipMouseTrack: "tooltipMouseTrack",
    keepDetailRows: "keepDetailRows",
    paginateChildRows: "paginateChildRows",
    preventDefaultOnContextMenu: "preventDefaultOnContextMenu",
    undoRedoCellEditing: "undoRedoCellEditing",
    allowDragFromColumnsToolPanel: "allowDragFromColumnsToolPanel",
    immutableData: "immutableData",
    immutableColumns: "immutableColumns",
    pivotSuppressAutoColumn: "pivotSuppressAutoColumn",
    suppressExpandablePivotGroups: "suppressExpandablePivotGroups",
    applyColumnDefOrder: "applyColumnDefOrder",
    debounceVerticalScrollbar: "debounceVerticalScrollbar",
    detailRowAutoHeight: "detailRowAutoHeight",
    serverSideFilteringAlwaysResets: "serverSideFilteringAlwaysResets",
    suppressAggFilteredOnly: "suppressAggFilteredOnly",
    showOpenedGroup: "showOpenedGroup",
    suppressClipboardApi: "suppressClipboardApi",
    suppressModelUpdateAfterUpdateTransaction: "suppressModelUpdateAfterUpdateTransaction",
    stopEditingWhenCellsLoseFocus: "stopEditingWhenCellsLoseFocus",
    gridOptions: "gridOptions",
    modules: "modules"
  },
  outputs: {
    columnEverythingChanged: "columnEverythingChanged",
    newColumnsLoaded: "newColumnsLoaded",
    columnPivotModeChanged: "columnPivotModeChanged",
    columnRowGroupChanged: "columnRowGroupChanged",
    expandOrCollapseAll: "expandOrCollapseAll",
    columnPivotChanged: "columnPivotChanged",
    gridColumnsChanged: "gridColumnsChanged",
    columnValueChanged: "columnValueChanged",
    columnMoved: "columnMoved",
    columnVisible: "columnVisible",
    columnPinned: "columnPinned",
    columnGroupOpened: "columnGroupOpened",
    columnResized: "columnResized",
    displayedColumnsChanged: "displayedColumnsChanged",
    virtualColumnsChanged: "virtualColumnsChanged",
    asyncTransactionsFlushed: "asyncTransactionsFlushed",
    rowGroupOpened: "rowGroupOpened",
    rowDataChanged: "rowDataChanged",
    rowDataUpdated: "rowDataUpdated",
    pinnedRowDataChanged: "pinnedRowDataChanged",
    rangeSelectionChanged: "rangeSelectionChanged",
    chartCreated: "chartCreated",
    chartRangeSelectionChanged: "chartRangeSelectionChanged",
    chartOptionsChanged: "chartOptionsChanged",
    chartDestroyed: "chartDestroyed",
    toolPanelVisibleChanged: "toolPanelVisibleChanged",
    modelUpdated: "modelUpdated",
    pasteStart: "pasteStart",
    pasteEnd: "pasteEnd",
    fillStart: "fillStart",
    fillEnd: "fillEnd",
    cellClicked: "cellClicked",
    cellDoubleClicked: "cellDoubleClicked",
    cellMouseDown: "cellMouseDown",
    cellContextMenu: "cellContextMenu",
    cellValueChanged: "cellValueChanged",
    rowValueChanged: "rowValueChanged",
    cellFocused: "cellFocused",
    rowSelected: "rowSelected",
    selectionChanged: "selectionChanged",
    cellKeyDown: "cellKeyDown",
    cellKeyPress: "cellKeyPress",
    cellMouseOver: "cellMouseOver",
    cellMouseOut: "cellMouseOut",
    filterChanged: "filterChanged",
    filterModified: "filterModified",
    filterOpened: "filterOpened",
    sortChanged: "sortChanged",
    virtualRowRemoved: "virtualRowRemoved",
    rowClicked: "rowClicked",
    rowDoubleClicked: "rowDoubleClicked",
    gridReady: "gridReady",
    gridSizeChanged: "gridSizeChanged",
    viewportChanged: "viewportChanged",
    scrollbarWidthChanged: "scrollbarWidthChanged",
    firstDataRendered: "firstDataRendered",
    dragStarted: "dragStarted",
    dragStopped: "dragStopped",
    checkboxChanged: "checkboxChanged",
    rowEditingStarted: "rowEditingStarted",
    rowEditingStopped: "rowEditingStopped",
    cellEditingStarted: "cellEditingStarted",
    cellEditingStopped: "cellEditingStopped",
    bodyScroll: "bodyScroll",
    animationQueueEmpty: "animationQueueEmpty",
    heightScaleChanged: "heightScaleChanged",
    paginationChanged: "paginationChanged",
    componentStateChanged: "componentStateChanged",
    bodyHeightChanged: "bodyHeightChanged",
    displayedColumnsWidthChanged: "displayedColumnsWidthChanged",
    scrollVisibilityChanged: "scrollVisibilityChanged",
    columnHoverChanged: "columnHoverChanged",
    flashCells: "flashCells",
    paginationPixelOffsetChanged: "paginationPixelOffsetChanged",
    displayedRowsChanged: "displayedRowsChanged",
    leftPinnedWidthChanged: "leftPinnedWidthChanged",
    rightPinnedWidthChanged: "rightPinnedWidthChanged",
    rowContainerHeightChanged: "rowContainerHeightChanged",
    rowDragEnter: "rowDragEnter",
    rowDragMove: "rowDragMove",
    rowDragLeave: "rowDragLeave",
    rowDragEnd: "rowDragEnd",
    popupToFront: "popupToFront",
    columnRowGroupChangeRequest: "columnRowGroupChangeRequest",
    columnPivotChangeRequest: "columnPivotChangeRequest",
    columnValueChangeRequest: "columnValueChangeRequest",
    columnAggFuncChangeRequest: "columnAggFuncChangeRequest",
    keyboardFocus: "keyboardFocus",
    mouseFocus: "mouseFocus",
    storeUpdated: "storeUpdated"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵProvidersFeature"]([AngularFrameworkOverrides, AngularFrameworkComponentWrapper]), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵNgOnChangesFeature"]],
  decls: 0,
  vars: 0,
  template: function AgGridAngular_Template(rf, ctx) {},
  encapsulation: 2
});
AgGridAngular.ctorParameters = () => [{
  type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.ElementRef
}, {
  type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.ViewContainerRef
}, {
  type: AngularFrameworkOverrides
}, {
  type: AngularFrameworkComponentWrapper
}, {
  type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.ComponentFactoryResolver
}];
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.ContentChildren)(AgGridColumn), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.QueryList)], AgGridAngular.prototype, "columns", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "gridOptions", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Array)], AgGridAngular.prototype, "modules", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "alignedGrids", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "rowData", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "columnDefs", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "excelStyles", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "pinnedTopRowData", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "pinnedBottomRowData", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "chartThemes", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "components", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "frameworkComponents", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "rowStyle", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "context", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "autoGroupColumnDef", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "localeText", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "icons", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "datasource", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "serverSideDatasource", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "viewportDatasource", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "groupRowRendererParams", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "aggFuncs", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "fullWidthCellRendererParams", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "defaultColGroupDef", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "defaultColDef", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "defaultExportParams", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "defaultCsvExportParams", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "defaultExcelExportParams", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "columnTypes", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "rowClassRules", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "detailGridOptions", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "detailCellRendererParams", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "loadingCellRendererParams", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "loadingOverlayComponentParams", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "noRowsOverlayComponentParams", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "popupParent", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "colResizeDefault", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "reduxStore", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "statusBar", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "sideBar", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "chartThemeOverrides", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "customChartThemes", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "sortingOrder", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "rowClass", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "rowSelection", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "overlayLoadingTemplate", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "overlayNoRowsTemplate", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "quickFilterText", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "rowModelType", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "editType", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "domLayout", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "clipboardDeliminator", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "rowGroupPanelShow", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "multiSortKey", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "pivotColumnGroupTotals", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "pivotRowTotals", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "pivotPanelShow", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "fillHandleDirection", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "serverSideStoreType", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "rowHeight", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "detailRowHeight", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "rowBuffer", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "colWidth", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "headerHeight", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "groupHeaderHeight", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "floatingFiltersHeight", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "pivotHeaderHeight", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "pivotGroupHeaderHeight", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "groupDefaultExpanded", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "minColWidth", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "maxColWidth", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "viewportRowModelPageSize", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "viewportRowModelBufferSize", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "autoSizePadding", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "maxBlocksInCache", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "maxConcurrentDatasourceRequests", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "tooltipShowDelay", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "cacheOverflowSize", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "paginationPageSize", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "cacheBlockSize", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "infiniteInitialRowCount", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "scrollbarWidth", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "batchUpdateWaitMillis", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "asyncTransactionWaitMillis", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "blockLoadDebounceMillis", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "keepDetailRowsCount", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "undoRedoCellEditingLimit", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "cellFlashDelay", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "cellFadeDelay", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "tabIndex", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "localeTextFunc", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "groupRowInnerRenderer", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "groupRowInnerRendererFramework", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "dateComponent", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "dateComponentFramework", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "groupRowRenderer", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "groupRowRendererFramework", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "isExternalFilterPresent", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "getRowHeight", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "doesExternalFilterPass", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "getRowClass", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "getRowStyle", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "getRowClassRules", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "traverseNode", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "getContextMenuItems", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "getMainMenuItems", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "processRowPostCreate", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "processCellForClipboard", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "groupRowAggNodes", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "getRowNodeId", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "isFullWidthCell", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "fullWidthCellRenderer", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "fullWidthCellRendererFramework", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "processSecondaryColDef", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "processSecondaryColGroupDef", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "getBusinessKeyForNode", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "sendToClipboard", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "navigateToNextHeader", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "tabToNextHeader", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "navigateToNextCell", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "tabToNextCell", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "getDetailRowData", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "processCellFromClipboard", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "getDocument", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "postProcessPopup", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "getChildCount", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "getDataPath", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "loadingCellRenderer", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "loadingCellRendererFramework", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "loadingOverlayComponent", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "loadingOverlayComponentFramework", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "noRowsOverlayComponent", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "noRowsOverlayComponentFramework", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "detailCellRenderer", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "detailCellRendererFramework", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "defaultGroupSortComparator", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "isRowMaster", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "isRowSelectable", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "postSort", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "processHeaderForClipboard", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "paginationNumberFormatter", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "processDataFromClipboard", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "getServerSideGroupKey", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "isServerSideGroup", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressKeyboardEvent", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "createChartContainer", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "processChartOptions", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "getChartToolbarItems", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "fillOperation", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "isApplyServerSideTransaction", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "getServerSideStoreParams", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "isServerSideGroupOpenByDefault", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "isGroupOpenByDefault", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressMakeColumnVisibleAfterUnGroup", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressRowClickSelection", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressCellSelection", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressHorizontalScroll", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "alwaysShowHorizontalScroll", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "alwaysShowVerticalScroll", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "debug", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "enableBrowserTooltips", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "enableCellExpressions", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "angularCompileRows", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "angularCompileFilters", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "groupSuppressAutoColumn", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "groupSelectsChildren", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "groupIncludeFooter", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "groupIncludeTotalFooter", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "groupUseEntireRow", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "groupSuppressBlankHeader", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressMenuHide", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressRowDeselection", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "unSortIcon", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressMultiSort", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "singleClickEdit", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressLoadingOverlay", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressNoRowsOverlay", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressAutoSize", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "skipHeaderOnAutoSize", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressParentsInRowNodes", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressColumnMoveAnimation", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressMovableColumns", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressFieldDotNotation", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "enableRangeSelection", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "enableRangeHandle", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "enableFillHandle", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressClearOnFillReduction", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "deltaSort", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressTouch", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressAsyncEvents", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "allowContextMenuWithControlKey", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressContextMenu", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "rememberGroupStateWhenNewData", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "enableCellChangeFlash", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressDragLeaveHidesColumns", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressMiddleClickScrolls", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressPreventDefaultOnMouseWheel", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressCopyRowsToClipboard", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "copyHeadersToClipboard", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "pivotMode", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressAggFuncInHeader", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressColumnVirtualisation", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressAggAtRootLevel", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressFocusAfterRefresh", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "functionsPassive", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "functionsReadOnly", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "animateRows", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "groupSelectsFiltered", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "groupRemoveSingleChildren", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "groupRemoveLowestSingleChildren", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "enableRtl", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressClickEdit", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "rowDragManaged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressRowDrag", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressMoveWhenRowDragging", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "enableMultiRowDragging", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "enableGroupEdit", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "embedFullWidthRows", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "deprecatedEmbedFullWidthRows", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressPaginationPanel", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "floatingFilter", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "groupHideOpenParents", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "groupMultiAutoColumn", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "pagination", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "stopEditingWhenGridLosesFocus", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "paginationAutoPageSize", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressScrollOnNewData", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "purgeClosedRowNodes", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "cacheQuickFilter", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "deltaRowDataMode", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "ensureDomOrder", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "accentedSort", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressChangeDetection", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "valueCache", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "valueCacheNeverExpires", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "aggregateOnlyChangedColumns", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressAnimationFrame", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressExcelExport", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressCsvExport", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "treeData", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "masterDetail", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressMultiRangeSelection", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "enterMovesDownAfterEdit", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "enterMovesDown", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressPropertyNamesCheck", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "rowMultiSelectWithClick", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressEnterpriseResetOnNewColumns", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "enableOldSetFilterModel", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressRowHoverHighlight", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressRowTransform", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressClipboardPaste", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressLastEmptyLineOnPaste", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "serverSideSortingAlwaysResets", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "reactNext", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressSetColumnStateEvents", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressColumnStateEvents", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "enableCharts", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "deltaColumnMode", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressMaintainUnsortedOrder", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "enableCellTextSelection", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressBrowserResizeObserver", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressMaxRenderedRowRestriction", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "excludeChildrenWhenTreeDataFiltering", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "tooltipMouseTrack", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "keepDetailRows", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "paginateChildRows", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "preventDefaultOnContextMenu", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "undoRedoCellEditing", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "allowDragFromColumnsToolPanel", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "immutableData", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "immutableColumns", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "pivotSuppressAutoColumn", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressExpandablePivotGroups", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "applyColumnDefOrder", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "debounceVerticalScrollbar", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "detailRowAutoHeight", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "serverSideFilteringAlwaysResets", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressAggFilteredOnly", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "showOpenedGroup", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressClipboardApi", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "suppressModelUpdateAfterUpdateTransaction", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", Object)], AgGridAngular.prototype, "stopEditingWhenCellsLoseFocus", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "columnEverythingChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "newColumnsLoaded", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "columnPivotModeChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "columnRowGroupChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "expandOrCollapseAll", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "columnPivotChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "gridColumnsChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "columnValueChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "columnMoved", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "columnVisible", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "columnPinned", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "columnGroupOpened", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "columnResized", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "displayedColumnsChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "virtualColumnsChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "asyncTransactionsFlushed", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "rowGroupOpened", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "rowDataChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "rowDataUpdated", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "pinnedRowDataChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "rangeSelectionChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "chartCreated", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "chartRangeSelectionChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "chartOptionsChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "chartDestroyed", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "toolPanelVisibleChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "modelUpdated", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "pasteStart", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "pasteEnd", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "fillStart", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "fillEnd", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "cellClicked", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "cellDoubleClicked", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "cellMouseDown", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "cellContextMenu", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "cellValueChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "rowValueChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "cellFocused", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "rowSelected", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "selectionChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "cellKeyDown", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "cellKeyPress", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "cellMouseOver", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "cellMouseOut", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "filterChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "filterModified", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "filterOpened", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "sortChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "virtualRowRemoved", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "rowClicked", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "rowDoubleClicked", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "gridReady", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "gridSizeChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "viewportChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "scrollbarWidthChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "firstDataRendered", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "dragStarted", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "dragStopped", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "checkboxChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "rowEditingStarted", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "rowEditingStopped", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "cellEditingStarted", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "cellEditingStopped", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "bodyScroll", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "animationQueueEmpty", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "heightScaleChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "paginationChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "componentStateChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "bodyHeightChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "displayedColumnsWidthChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "scrollVisibilityChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "columnHoverChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "flashCells", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "paginationPixelOffsetChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "displayedRowsChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "leftPinnedWidthChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "rightPinnedWidthChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "rowContainerHeightChanged", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "rowDragEnter", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "rowDragMove", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "rowDragLeave", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "rowDragEnd", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "popupToFront", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "columnRowGroupChangeRequest", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "columnPivotChangeRequest", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "columnValueChangeRequest", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "columnAggFuncChangeRequest", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "keyboardFocus", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "mouseFocus", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output)(), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter)], AgGridAngular.prototype, "storeUpdated", void 0);
AgGridAngular = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__metadata)("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_2__.ElementRef, _angular_core__WEBPACK_IMPORTED_MODULE_2__.ViewContainerRef, AngularFrameworkOverrides, AngularFrameworkComponentWrapper, _angular_core__WEBPACK_IMPORTED_MODULE_2__.ComponentFactoryResolver])], AgGridAngular);
var AgGridModule_1;
let AgGridModule = AgGridModule_1 = class AgGridModule {
  static withComponents(components) {
    return {
      ngModule: AgGridModule_1,
      providers: [{
        provide: _angular_core__WEBPACK_IMPORTED_MODULE_2__.ANALYZE_FOR_ENTRY_COMPONENTS,
        useValue: components,
        multi: true
      }]
    };
  }
  static forRoot(components) {
    return {
      ngModule: AgGridModule_1,
      providers: [{
        provide: _angular_core__WEBPACK_IMPORTED_MODULE_2__.ANALYZE_FOR_ENTRY_COMPONENTS,
        useValue: components,
        multi: true
      }]
    };
  }
};
AgGridModule.ɵfac = function AgGridModule_Factory(t) {
  return new (t || AgGridModule)();
};
AgGridModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineNgModule"]({
  type: AgGridModule
});
AgGridModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjector"]({});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](AgGridColumn, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Component,
    args: [{
      selector: 'ag-grid-column',
      template: ''
    }]
  }], null, {
    childColumns: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.ContentChildren,
      args: [AgGridColumn_1]
    }],
    children: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    sortingOrder: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    allowedAggFuncs: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    menuTabs: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    cellClassRules: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    icons: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    headerGroupComponent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    headerGroupComponentFramework: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    headerGroupComponentParams: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    cellStyle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    cellRendererParams: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    cellEditorFramework: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    cellEditorParams: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    pinnedRowCellRendererFramework: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    pinnedRowCellRendererParams: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    filterFramework: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    filterParams: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    headerComponent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    headerComponentFramework: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    headerComponentParams: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    floatingFilterComponent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    floatingFilterComponentParams: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    floatingFilterComponentFramework: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    tooltipComponent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    tooltipComponentParams: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    tooltipComponentFramework: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    refData: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    columnsMenuParams: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    headerName: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    columnGroupShow: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    headerClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    toolPanelClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    headerValueGetter: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    groupId: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    colId: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    sort: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    initialSort: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    field: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    type: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    tooltipField: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    headerTooltip: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    cellClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    showRowGroup: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    filter: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    initialAggFunc: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    aggFunc: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    cellRenderer: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    cellEditor: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    pinned: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    initialPinned: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    chartDataType: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    sortedAt: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    sortIndex: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    initialSortIndex: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    flex: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    initialFlex: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    width: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    initialWidth: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    minWidth: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    maxWidth: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    rowGroupIndex: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    initialRowGroupIndex: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    pivotIndex: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    initialPivotIndex: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    dndSourceOnRowDrag: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    valueGetter: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    valueSetter: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    filterValueGetter: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    keyCreator: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    cellRendererFramework: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    pinnedRowCellRenderer: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    valueFormatter: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    pinnedRowValueFormatter: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    valueParser: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    comparator: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    equals: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    pivotComparator: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressKeyboardEvent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressHeaderKeyboardEvent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    colSpan: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    rowSpan: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    getQuickFilterText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    newValueHandler: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    onCellValueChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    onCellClicked: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    onCellDoubleClicked: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    onCellContextMenu: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    rowDragText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    tooltipValueGetter: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    cellRendererSelector: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    cellEditorSelector: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressCellFlash: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressColumnsToolPanel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressFiltersToolPanel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    openByDefault: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    marryChildren: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    hide: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    initialHide: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    rowGroup: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    initialRowGroup: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    pivot: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    initialPivot: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    checkboxSelection: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    headerCheckboxSelection: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    headerCheckboxSelectionFilteredOnly: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressMenu: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressMovable: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    lockPosition: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    lockVisible: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    lockPinned: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    unSortIcon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressSizeToFit: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressAutoSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    enableRowGroup: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    enablePivot: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    enableValue: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    editable: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressPaste: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressNavigable: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    enableCellChangeFlash: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    rowDrag: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    dndSource: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    autoHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    wrapText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    sortable: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    resizable: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    singleClickEdit: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    floatingFilter: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }]
  });
})();
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](AngularFrameworkOverrides, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Injectable
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.NgZone
    }];
  }, null);
})();
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](AngularFrameworkComponentWrapper, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Injectable
  }], null, null);
})();
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](AgGridAngular, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Component,
    args: [{
      selector: 'ag-grid-angular',
      template: '',
      providers: [AngularFrameworkOverrides, AngularFrameworkComponentWrapper],
      // tell angular we don't want view encapsulation, we don't want a shadow root
      encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__.ViewEncapsulation.None
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.ElementRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.ViewContainerRef
    }, {
      type: AngularFrameworkOverrides
    }, {
      type: AngularFrameworkComponentWrapper
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.ComponentFactoryResolver
    }];
  }, {
    alignedGrids: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    rowData: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    columnDefs: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    excelStyles: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    pinnedTopRowData: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    pinnedBottomRowData: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    chartThemes: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    components: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    frameworkComponents: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    rowStyle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    context: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    autoGroupColumnDef: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    localeText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    icons: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    datasource: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    serverSideDatasource: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    viewportDatasource: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    groupRowRendererParams: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    aggFuncs: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    fullWidthCellRendererParams: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    defaultColGroupDef: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    defaultColDef: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    defaultExportParams: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    defaultCsvExportParams: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    defaultExcelExportParams: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    columnTypes: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    rowClassRules: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    detailGridOptions: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    detailCellRendererParams: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    loadingCellRendererParams: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    loadingOverlayComponentParams: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    noRowsOverlayComponentParams: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    popupParent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    colResizeDefault: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    reduxStore: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    statusBar: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    sideBar: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    chartThemeOverrides: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    customChartThemes: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    sortingOrder: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    rowClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    rowSelection: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    overlayLoadingTemplate: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    overlayNoRowsTemplate: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    quickFilterText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    rowModelType: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    editType: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    domLayout: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    clipboardDeliminator: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    rowGroupPanelShow: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    multiSortKey: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    pivotColumnGroupTotals: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    pivotRowTotals: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    pivotPanelShow: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    fillHandleDirection: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    serverSideStoreType: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    rowHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    detailRowHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    rowBuffer: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    colWidth: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    headerHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    groupHeaderHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    floatingFiltersHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    pivotHeaderHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    pivotGroupHeaderHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    groupDefaultExpanded: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    minColWidth: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    maxColWidth: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    viewportRowModelPageSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    viewportRowModelBufferSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    autoSizePadding: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    maxBlocksInCache: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    maxConcurrentDatasourceRequests: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    tooltipShowDelay: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    cacheOverflowSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    paginationPageSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    cacheBlockSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    infiniteInitialRowCount: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    scrollbarWidth: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    batchUpdateWaitMillis: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    asyncTransactionWaitMillis: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    blockLoadDebounceMillis: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    keepDetailRowsCount: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    undoRedoCellEditingLimit: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    cellFlashDelay: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    cellFadeDelay: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    tabIndex: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    localeTextFunc: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    groupRowInnerRenderer: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    groupRowInnerRendererFramework: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    dateComponent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    dateComponentFramework: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    groupRowRenderer: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    groupRowRendererFramework: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    isExternalFilterPresent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    getRowHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    doesExternalFilterPass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    getRowClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    getRowStyle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    getRowClassRules: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    traverseNode: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    getContextMenuItems: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    getMainMenuItems: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    processRowPostCreate: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    processCellForClipboard: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    groupRowAggNodes: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    getRowNodeId: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    isFullWidthCell: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    fullWidthCellRenderer: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    fullWidthCellRendererFramework: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    processSecondaryColDef: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    processSecondaryColGroupDef: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    getBusinessKeyForNode: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    sendToClipboard: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    navigateToNextHeader: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    tabToNextHeader: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    navigateToNextCell: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    tabToNextCell: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    getDetailRowData: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    processCellFromClipboard: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    getDocument: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    postProcessPopup: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    getChildCount: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    getDataPath: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    loadingCellRenderer: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    loadingCellRendererFramework: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    loadingOverlayComponent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    loadingOverlayComponentFramework: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    noRowsOverlayComponent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    noRowsOverlayComponentFramework: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    detailCellRenderer: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    detailCellRendererFramework: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    defaultGroupSortComparator: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    isRowMaster: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    isRowSelectable: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    postSort: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    processHeaderForClipboard: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    paginationNumberFormatter: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    processDataFromClipboard: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    getServerSideGroupKey: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    isServerSideGroup: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressKeyboardEvent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    createChartContainer: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    processChartOptions: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    getChartToolbarItems: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    fillOperation: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    isApplyServerSideTransaction: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    getServerSideStoreParams: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    isServerSideGroupOpenByDefault: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    isGroupOpenByDefault: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressMakeColumnVisibleAfterUnGroup: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressRowClickSelection: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressCellSelection: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressHorizontalScroll: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    alwaysShowHorizontalScroll: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    alwaysShowVerticalScroll: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    debug: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    enableBrowserTooltips: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    enableCellExpressions: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    angularCompileRows: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    angularCompileFilters: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    groupSuppressAutoColumn: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    groupSelectsChildren: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    groupIncludeFooter: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    groupIncludeTotalFooter: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    groupUseEntireRow: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    groupSuppressBlankHeader: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressMenuHide: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressRowDeselection: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    unSortIcon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressMultiSort: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    singleClickEdit: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressLoadingOverlay: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressNoRowsOverlay: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressAutoSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    skipHeaderOnAutoSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressParentsInRowNodes: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressColumnMoveAnimation: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressMovableColumns: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressFieldDotNotation: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    enableRangeSelection: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    enableRangeHandle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    enableFillHandle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressClearOnFillReduction: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    deltaSort: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressTouch: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressAsyncEvents: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    allowContextMenuWithControlKey: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressContextMenu: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    rememberGroupStateWhenNewData: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    enableCellChangeFlash: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressDragLeaveHidesColumns: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressMiddleClickScrolls: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressPreventDefaultOnMouseWheel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressCopyRowsToClipboard: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    copyHeadersToClipboard: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    pivotMode: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressAggFuncInHeader: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressColumnVirtualisation: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressAggAtRootLevel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressFocusAfterRefresh: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    functionsPassive: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    functionsReadOnly: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    animateRows: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    groupSelectsFiltered: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    groupRemoveSingleChildren: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    groupRemoveLowestSingleChildren: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    enableRtl: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressClickEdit: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    rowDragManaged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressRowDrag: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressMoveWhenRowDragging: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    enableMultiRowDragging: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    enableGroupEdit: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    embedFullWidthRows: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    deprecatedEmbedFullWidthRows: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressPaginationPanel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    floatingFilter: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    groupHideOpenParents: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    groupMultiAutoColumn: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    pagination: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    stopEditingWhenGridLosesFocus: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    paginationAutoPageSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressScrollOnNewData: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    purgeClosedRowNodes: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    cacheQuickFilter: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    deltaRowDataMode: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    ensureDomOrder: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    accentedSort: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressChangeDetection: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    valueCache: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    valueCacheNeverExpires: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    aggregateOnlyChangedColumns: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressAnimationFrame: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressExcelExport: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressCsvExport: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    treeData: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    masterDetail: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressMultiRangeSelection: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    enterMovesDownAfterEdit: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    enterMovesDown: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressPropertyNamesCheck: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    rowMultiSelectWithClick: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressEnterpriseResetOnNewColumns: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    enableOldSetFilterModel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressRowHoverHighlight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressRowTransform: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressClipboardPaste: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressLastEmptyLineOnPaste: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    serverSideSortingAlwaysResets: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    reactNext: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressSetColumnStateEvents: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressColumnStateEvents: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    enableCharts: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    deltaColumnMode: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressMaintainUnsortedOrder: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    enableCellTextSelection: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressBrowserResizeObserver: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressMaxRenderedRowRestriction: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    excludeChildrenWhenTreeDataFiltering: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    tooltipMouseTrack: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    keepDetailRows: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    paginateChildRows: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    preventDefaultOnContextMenu: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    undoRedoCellEditing: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    allowDragFromColumnsToolPanel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    immutableData: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    immutableColumns: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    pivotSuppressAutoColumn: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressExpandablePivotGroups: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    applyColumnDefOrder: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    debounceVerticalScrollbar: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    detailRowAutoHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    serverSideFilteringAlwaysResets: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressAggFilteredOnly: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    showOpenedGroup: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressClipboardApi: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    suppressModelUpdateAfterUpdateTransaction: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    stopEditingWhenCellsLoseFocus: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    columnEverythingChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    newColumnsLoaded: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    columnPivotModeChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    columnRowGroupChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    expandOrCollapseAll: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    columnPivotChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    gridColumnsChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    columnValueChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    columnMoved: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    columnVisible: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    columnPinned: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    columnGroupOpened: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    columnResized: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    displayedColumnsChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    virtualColumnsChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    asyncTransactionsFlushed: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    rowGroupOpened: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    rowDataChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    rowDataUpdated: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    pinnedRowDataChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    rangeSelectionChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    chartCreated: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    chartRangeSelectionChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    chartOptionsChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    chartDestroyed: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    toolPanelVisibleChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    modelUpdated: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    pasteStart: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    pasteEnd: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    fillStart: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    fillEnd: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    cellClicked: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    cellDoubleClicked: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    cellMouseDown: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    cellContextMenu: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    cellValueChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    rowValueChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    cellFocused: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    rowSelected: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    selectionChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    cellKeyDown: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    cellKeyPress: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    cellMouseOver: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    cellMouseOut: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    filterChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    filterModified: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    filterOpened: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    sortChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    virtualRowRemoved: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    rowClicked: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    rowDoubleClicked: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    gridReady: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    gridSizeChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    viewportChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    scrollbarWidthChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    firstDataRendered: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    dragStarted: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    dragStopped: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    checkboxChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    rowEditingStarted: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    rowEditingStopped: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    cellEditingStarted: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    cellEditingStopped: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    bodyScroll: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    animationQueueEmpty: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    heightScaleChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    paginationChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    componentStateChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    bodyHeightChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    displayedColumnsWidthChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    scrollVisibilityChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    columnHoverChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    flashCells: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    paginationPixelOffsetChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    displayedRowsChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    leftPinnedWidthChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    rightPinnedWidthChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    rowContainerHeightChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    rowDragEnter: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    rowDragMove: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    rowDragLeave: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    rowDragEnd: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    popupToFront: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    columnRowGroupChangeRequest: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    columnPivotChangeRequest: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    columnValueChangeRequest: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    columnAggFuncChangeRequest: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    keyboardFocus: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    mouseFocus: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    storeUpdated: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }],
    gridOptions: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    columns: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.ContentChildren,
      args: [AgGridColumn]
    }],
    modules: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }]
  });
})();
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](AgGridModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.NgModule,
    args: [{
      declarations: [AgGridAngular, AgGridColumn],
      imports: [],
      exports: [AgGridAngular, AgGridColumn]
    }]
  }], null, null);
})();
(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵsetNgModuleScope"](AgGridModule, {
    declarations: [AgGridAngular, AgGridColumn],
    exports: [AgGridAngular, AgGridColumn]
  });
})();

/**
 * Generated bundle index. Do not edit.
 */



//# sourceMappingURL=ag-grid-angular.js.map

/***/ }),

/***/ 793564:
/*!**********************************************************************!*\
  !*** ./node_modules/ag-grid-community/dist/ag-grid-community.cjs.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components * @version v25.3.0
 * @link http://www.ag-grid.com/
' * @license MIT
 */



Object.defineProperty(exports, "__esModule", ({
  value: true
}));

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
/**
 * If value is undefined, null or blank, returns null, otherwise returns the value
 * @param {T} value
 * @returns {T | null}
 */
function makeNull(value) {
  if (value == null || value === '') {
    return null;
  }
  return value;
}
function exists(value, allowEmptyString) {
  if (allowEmptyString === void 0) {
    allowEmptyString = false;
  }
  return value != null && (value !== '' || allowEmptyString);
}
function missing(value) {
  return !exists(value);
}
function missingOrEmpty(value) {
  return value == null || value.length === 0;
}
function toStringOrNull(value) {
  return value != null && typeof value.toString === 'function' ? value.toString() : null;
}
// for parsing html attributes, where we want empty strings and missing attributes to be undefined
function attrToNumber(value) {
  if (value === undefined) {
    // undefined or empty means ignore the value
    return;
  }
  if (value === null || value === '') {
    // null or blank means clear
    return null;
  }
  if (typeof value === 'number') {
    return isNaN(value) ? undefined : value;
  }
  var valueParsed = parseInt(value, 10);
  return isNaN(valueParsed) ? undefined : valueParsed;
}
// for parsing html attributes, where we want empty strings and missing attributes to be undefined
function attrToBoolean(value) {
  if (value === undefined) {
    // undefined or empty means ignore the value
    return;
  }
  if (value === null || value === '') {
    // null means clear
    return false;
  }
  if (typeof value === 'boolean') {
    // if simple boolean, return the boolean
    return value;
  }
  // if equal to the string 'true' (ignoring case) then return true
  return /true/i.test(value);
}
// for parsing html attributes, where we want empty strings and missing attributes to be undefined
function attrToString(value) {
  if (value == null || value === '') {
    return;
  }
  return value;
}
/** @deprecated */
function referenceCompare(left, right) {
  if (left == null && right == null) {
    return true;
  }
  if (left == null && right != null) {
    return false;
  }
  if (left != null && right == null) {
    return false;
  }
  return left === right;
}
function jsonEquals(val1, val2) {
  var val1Json = val1 ? JSON.stringify(val1) : null;
  var val2Json = val2 ? JSON.stringify(val2) : null;
  return val1Json === val2Json;
}
function defaultComparator(valueA, valueB, accentedCompare) {
  if (accentedCompare === void 0) {
    accentedCompare = false;
  }
  var valueAMissing = valueA == null;
  var valueBMissing = valueB == null;
  // this is for aggregations sum and avg, where the result can be a number that is wrapped.
  // if we didn't do this, then the toString() value would be used, which would result in
  // the strings getting used instead of the numbers.
  if (valueA && valueA.toNumber) {
    valueA = valueA.toNumber();
  }
  if (valueB && valueB.toNumber) {
    valueB = valueB.toNumber();
  }
  if (valueAMissing && valueBMissing) {
    return 0;
  }
  if (valueAMissing) {
    return -1;
  }
  if (valueBMissing) {
    return 1;
  }
  function doQuickCompare(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
  }
  if (typeof valueA !== 'string') {
    return doQuickCompare(valueA, valueB);
  }
  if (!accentedCompare) {
    return doQuickCompare(valueA, valueB);
  }
  try {
    // using local compare also allows chinese comparisons
    return valueA.localeCompare(valueB);
  } catch (e) {
    // if something wrong with localeCompare, eg not supported
    // by browser, then just continue with the quick one
    return doQuickCompare(valueA, valueB);
  }
}
function find(collection, predicate, value) {
  if (collection === null || collection === undefined) {
    return null;
  }
  if (!Array.isArray(collection)) {
    var objToArray = values(collection);
    return find(objToArray, predicate, value);
  }
  var collectionAsArray = collection;
  var firstMatchingItem = null;
  for (var i = 0; i < collectionAsArray.length; i++) {
    var item = collectionAsArray[i];
    if (typeof predicate === 'string') {
      if (item[predicate] === value) {
        firstMatchingItem = item;
        break;
      }
    } else {
      var callback = predicate;
      if (callback(item)) {
        firstMatchingItem = item;
        break;
      }
    }
  }
  return firstMatchingItem;
}
function values(object) {
  if (object instanceof Set || object instanceof Map) {
    var arr_1 = [];
    object.forEach(function (value) {
      return arr_1.push(value);
    });
    return arr_1;
  }
  return Object.keys(object).map(function (key) {
    return object[key];
  });
}
var GenericUtils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  makeNull: makeNull,
  exists: exists,
  missing: missing,
  missingOrEmpty: missingOrEmpty,
  toStringOrNull: toStringOrNull,
  attrToNumber: attrToNumber,
  attrToBoolean: attrToBoolean,
  attrToString: attrToString,
  referenceCompare: referenceCompare,
  jsonEquals: jsonEquals,
  defaultComparator: defaultComparator,
  find: find,
  values: values
});

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var ColumnKeyCreator = /** @class */function () {
  function ColumnKeyCreator() {
    this.existingKeys = {};
  }
  ColumnKeyCreator.prototype.addExistingKeys = function (keys) {
    for (var i = 0; i < keys.length; i++) {
      this.existingKeys[keys[i]] = true;
    }
  };
  ColumnKeyCreator.prototype.getUniqueKey = function (colId, colField) {
    // in case user passed in number for colId, convert to string
    colId = toStringOrNull(colId);
    var count = 0;
    while (true) {
      var idToTry = void 0;
      if (colId) {
        idToTry = colId;
        if (count !== 0) {
          idToTry += '_' + count;
        }
      } else if (colField) {
        idToTry = colField;
        if (count !== 0) {
          idToTry += '_' + count;
        }
      } else {
        idToTry = '' + count;
      }
      if (!this.existingKeys[idToTry]) {
        this.existingKeys[idToTry] = true;
        return idToTry;
      }
      count++;
    }
  };
  return ColumnKeyCreator;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
function firstExistingValue() {
  var values = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    values[_i] = arguments[_i];
  }
  for (var i = 0; i < values.length; i++) {
    var value = values[i];
    if (exists(value)) {
      return value;
    }
  }
  return null;
}
/** @deprecated */
function anyExists(values) {
  return values && firstExistingValue(values) != null;
}
function existsAndNotEmpty(value) {
  return value != null && value.length > 0;
}
function last(arr) {
  if (!arr || !arr.length) {
    return;
  }
  return arr[arr.length - 1];
}
function areEqual(a, b, comparator) {
  if (a == null && b == null) {
    return true;
  }
  return a != null && b != null && a.length === b.length && every(a, function (value, index) {
    return comparator ? comparator(value, b[index]) : b[index] === value;
  });
}
/** @deprecated */
function compareArrays(array1, array2) {
  return areEqual(array1, array2);
}
/** @deprecated */
function shallowCompare(arr1, arr2) {
  return areEqual(arr1, arr2);
}
function sortNumerically(array) {
  return array.sort(function (a, b) {
    return a - b;
  });
}
function removeRepeatsFromArray(array, object) {
  if (!array) {
    return;
  }
  for (var index = array.length - 2; index >= 0; index--) {
    var thisOneMatches = array[index] === object;
    var nextOneMatches = array[index + 1] === object;
    if (thisOneMatches && nextOneMatches) {
      array.splice(index + 1, 1);
    }
  }
}
function removeFromArray(array, object) {
  var index = array.indexOf(object);
  if (index >= 0) {
    array.splice(index, 1);
  }
}
function removeAllFromArray(array, toRemove) {
  forEach(toRemove, function (item) {
    return removeFromArray(array, item);
  });
}
function insertIntoArray(array, object, toIndex) {
  array.splice(toIndex, 0, object);
}
function insertArrayIntoArray(dest, src, toIndex) {
  if (dest == null || src == null) {
    return;
  }
  // put items in backwards, otherwise inserted items end up in reverse order
  for (var i = src.length - 1; i >= 0; i--) {
    var item = src[i];
    insertIntoArray(dest, item, toIndex);
  }
}
function moveInArray(array, objectsToMove, toIndex) {
  // first take out items from the array
  removeAllFromArray(array, objectsToMove);
  // now add the objects, in same order as provided to us, that means we start at the end
  // as the objects will be pushed to the right as they are inserted
  forEach(objectsToMove.slice().reverse(), function (obj) {
    return insertIntoArray(array, obj, toIndex);
  });
}
function includes(array, value) {
  return array.indexOf(value) > -1;
}
function flatten(arrayOfArrays) {
  return [].concat.apply([], arrayOfArrays);
}
function pushAll(target, source) {
  if (source == null || target == null) {
    return;
  }
  forEach(source, function (value) {
    return target.push(value);
  });
}
function toStrings(array) {
  return map(array, toStringOrNull);
}
function findIndex(collection, predicate) {
  for (var i = 0; i < collection.length; i++) {
    if (predicate(collection[i], i, collection)) {
      return i;
    }
  }
  return -1;
}
function fill(collection, value, start, end) {
  if (value === void 0) {
    value = null;
  }
  if (start === void 0) {
    start = 0;
  }
  if (end === void 0) {
    end = collection.length;
  }
  for (var i = start; i < end; i++) {
    collection[i] = value;
  }
  return collection;
}
/**
 * The implementation of Array.prototype.every in browsers is always slower than just using a simple for loop, so
 * use this for improved performance.
 * https://jsbench.me/bek91dtit8/
 */
function every(list, predicate) {
  if (list == null) {
    return true;
  }
  for (var i = 0; i < list.length; i++) {
    if (!predicate(list[i], i)) {
      return false;
    }
  }
  return true;
}
/**
 * The implementation of Array.prototype.some in browsers is always slower than just using a simple for loop, so
 * use this for improved performance.
 * https://jsbench.me/5dk91e4tmt/
 */
function some(list, predicate) {
  if (list == null) {
    return false;
  }
  for (var i = 0; i < list.length; i++) {
    if (predicate(list[i], i)) {
      return true;
    }
  }
  return false;
}
/**
 * The implementation of Array.prototype.forEach in browsers is often slower than just using a simple for loop, so
 * use this for improved performance.
 * https://jsbench.me/apk91elt8a/
 */
function forEach(list, action) {
  if (list == null) {
    return;
  }
  for (var i = 0; i < list.length; i++) {
    action(list[i], i);
  }
}
function forEachReverse(list, action) {
  if (list == null) {
    return;
  }
  for (var i = list.length - 1; i >= 0; i--) {
    action(list[i], i);
  }
}
/**
 * The implementation of Array.prototype.map in browsers is generally the same as just using a simple for loop. However,
 * Firefox does exhibit some difference, and this performs no worse in other browsers, so use this if you want improved
 * performance.
 * https://jsbench.me/njk91ez8pc/
 */
function map(list, process) {
  if (list == null) {
    return null;
  }
  var mapped = [];
  for (var i = 0; i < list.length; i++) {
    mapped.push(process(list[i], i));
  }
  return mapped;
}
/**
 * The implementation of Array.prototype.filter in browsers is always slower than just using a simple for loop, so
 * use this for improved performance.
 * https://jsbench.me/7bk91fk08c/
 */
function filter(list, predicate) {
  if (list == null) {
    return null;
  }
  var filtered = [];
  for (var i = 0; i < list.length; i++) {
    if (predicate(list[i], i)) {
      filtered.push(list[i]);
    }
  }
  return filtered;
}
/**
 * The implementation of Array.prototype.reduce in browsers is generally the same as just using a simple for loop. However,
 * Chrome does exhibit some difference, and this performs no worse in other browsers, so use this if you want improved
 * performance.
 * https://jsbench.me/7vk92n6u1f/
 */
function reduce(list, step, initial) {
  if (list == null || initial == null) {
    return null;
  }
  var result = initial;
  for (var i = 0; i < list.length; i++) {
    result = step(result, list[i], i);
  }
  return result;
}
/** @deprecated */
function forEachSnapshotFirst(list, callback) {
  if (!list) {
    return;
  }
  var arrayCopy = list.slice(0);
  arrayCopy.forEach(callback);
}
var ArrayUtils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  firstExistingValue: firstExistingValue,
  anyExists: anyExists,
  existsAndNotEmpty: existsAndNotEmpty,
  last: last,
  areEqual: areEqual,
  compareArrays: compareArrays,
  shallowCompare: shallowCompare,
  sortNumerically: sortNumerically,
  removeRepeatsFromArray: removeRepeatsFromArray,
  removeFromArray: removeFromArray,
  removeAllFromArray: removeAllFromArray,
  insertIntoArray: insertIntoArray,
  insertArrayIntoArray: insertArrayIntoArray,
  moveInArray: moveInArray,
  includes: includes,
  flatten: flatten,
  pushAll: pushAll,
  toStrings: toStrings,
  findIndex: findIndex,
  fill: fill,
  every: every,
  some: some,
  forEach: forEach,
  forEachReverse: forEachReverse,
  map: map,
  filter: filter,
  reduce: reduce,
  forEachSnapshotFirst: forEachSnapshotFirst
});

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
function iterateObject(object, callback) {
  if (object == null) {
    return;
  }
  if (Array.isArray(object)) {
    forEach(object, function (value, index) {
      return callback("" + index, value);
    });
  } else {
    forEach(Object.keys(object), function (key) {
      return callback(key, object[key]);
    });
  }
}
function cloneObject(object) {
  var copy = {};
  var keys = Object.keys(object);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var value = object[key];
    copy[key] = value;
  }
  return copy;
}
function deepCloneObject(object) {
  return JSON.parse(JSON.stringify(object));
}
// returns copy of an object, doing a deep clone of any objects with that object.
// this is used for eg creating copies of Column Definitions, where we want to
// deep copy all objects, but do not want to deep copy functions (eg when user provides
// a function or class for colDef.cellRenderer)
function deepCloneDefinition(object, keysToSkip) {
  if (!object) {
    return;
  }
  var obj = object;
  var res = {};
  Object.keys(obj).forEach(function (key) {
    if (keysToSkip && keysToSkip.indexOf(key) >= 0) {
      return;
    }
    var value = obj[key];
    // 'simple object' means a bunch of key/value pairs, eg {filter: 'myFilter'}. it does
    // NOT include the following:
    // 1) arrays
    // 2) functions or classes (eg ColumnAPI instance)
    var sourceIsSimpleObject = isNonNullObject(value) && value.constructor === Object;
    if (sourceIsSimpleObject) {
      res[key] = deepCloneDefinition(value);
    } else {
      res[key] = value;
    }
  });
  return res;
}
function getProperty(object, key) {
  return object[key];
}
function setProperty(object, key, value) {
  object[key] = value;
}
/**
 * Will copy the specified properties from `source` into the equivalent properties on `target`, ignoring properties with
 * a value of `undefined`.
 */
function copyPropertiesIfPresent(source, target) {
  var properties = [];
  for (var _i = 2; _i < arguments.length; _i++) {
    properties[_i - 2] = arguments[_i];
  }
  forEach(properties, function (p) {
    return copyPropertyIfPresent(source, target, p);
  });
}
/**
 * Will copy the specified property from `source` into the equivalent property on `target`, unless the property has a
 * value of `undefined`. If a transformation is provided, it will be applied to the value before being set on `target`.
 */
function copyPropertyIfPresent(source, target, property, transform) {
  var value = getProperty(source, property);
  if (value !== undefined) {
    setProperty(target, property, transform ? transform(value) : value);
  }
}
function getAllKeysInObjects(objects) {
  var allValues = {};
  objects.filter(function (obj) {
    return obj != null;
  }).forEach(function (obj) {
    forEach(Object.keys(obj), function (key) {
      return allValues[key] = null;
    });
  });
  return Object.keys(allValues);
}
function getAllValuesInObject(obj) {
  if (!obj) {
    return [];
  }
  var anyObject = Object;
  if (typeof anyObject.values === 'function') {
    return anyObject.values(obj);
  }
  var ret = [];
  for (var key in obj) {
    if (obj.hasOwnProperty(key) && obj.propertyIsEnumerable(key)) {
      ret.push(obj[key]);
    }
  }
  return ret;
}
function mergeDeep(dest, source, copyUndefined, makeCopyOfSimpleObjects) {
  if (copyUndefined === void 0) {
    copyUndefined = true;
  }
  if (makeCopyOfSimpleObjects === void 0) {
    makeCopyOfSimpleObjects = false;
  }
  if (!exists(source)) {
    return;
  }
  iterateObject(source, function (key, sourceValue) {
    var destValue = dest[key];
    if (destValue === sourceValue) {
      return;
    }
    // when creating params, we don't want to just copy objects over. otherwise merging ColDefs (eg DefaultColDef
    // and Column Types) would result in params getting shared between objects.
    // by putting an empty value into destValue first, it means we end up copying over values from
    // the source object, rather than just copying in the source object in it's entirety.
    if (makeCopyOfSimpleObjects) {
      var objectIsDueToBeCopied = destValue == null && sourceValue != null;
      if (objectIsDueToBeCopied) {
        // 'simple object' means a bunch of key/value pairs, eg {filter: 'myFilter'}, as opposed
        // to a Class instance (such as ColumnAPI instance).
        var sourceIsSimpleObject = typeof sourceValue === 'object' && sourceValue.constructor === Object;
        var dontCopy = sourceIsSimpleObject;
        if (dontCopy) {
          destValue = {};
          dest[key] = destValue;
        }
      }
    }
    if (isNonNullObject(sourceValue) && isNonNullObject(destValue) && !Array.isArray(destValue)) {
      mergeDeep(destValue, sourceValue, copyUndefined, makeCopyOfSimpleObjects);
    } else if (copyUndefined || sourceValue !== undefined) {
      dest[key] = sourceValue;
    }
  });
}
function assign(object) {
  var sources = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    sources[_i - 1] = arguments[_i];
  }
  forEach(sources, function (source) {
    return iterateObject(source, function (key, value) {
      return object[key] = value;
    });
  });
  return object;
}
function missingOrEmptyObject(value) {
  return missing(value) || Object.keys(value).length === 0;
}
function get(source, expression, defaultValue) {
  if (source == null) {
    return defaultValue;
  }
  var keys = expression.split('.');
  var objectToRead = source;
  while (keys.length > 1) {
    objectToRead = objectToRead[keys.shift()];
    if (objectToRead == null) {
      return defaultValue;
    }
  }
  var value = objectToRead[keys[0]];
  return value != null ? value : defaultValue;
}
function set(target, expression, value) {
  if (target == null) {
    return;
  }
  var keys = expression.split('.');
  var objectToUpdate = target;
  while (keys.length > 1) {
    objectToUpdate = objectToUpdate[keys.shift()];
    if (objectToUpdate == null) {
      return;
    }
  }
  objectToUpdate[keys[0]] = value;
}
function deepFreeze(object) {
  Object.freeze(object);
  forEach(values(object), function (v) {
    if (isNonNullObject(v) || typeof v === 'function') {
      deepFreeze(v);
    }
  });
  return object;
}
function getValueUsingField(data, field, fieldContainsDots) {
  if (!field || !data) {
    return;
  }
  // if no '.', then it's not a deep value
  if (!fieldContainsDots) {
    return data[field];
  }
  // otherwise it is a deep value, so need to dig for it
  var fields = field.split('.');
  var currentObject = data;
  for (var i = 0; i < fields.length; i++) {
    if (currentObject == null) {
      return undefined;
    }
    currentObject = currentObject[fields[i]];
  }
  return currentObject;
}
// used by ColumnAPI and GridAPI to remove all references, so keeping grid in memory resulting in a
// memory leak if user is not disposing of the GridAPI or ColumnApi references
function removeAllReferences(obj, objectName) {
  Object.keys(obj).forEach(function (key) {
    var value = obj[key];
    // we want to replace all the @autowired services, which are objects. any simple types (boolean, string etc)
    // we don't care about
    if (typeof value === 'object') {
      obj[key] = undefined;
    }
  });
  var proto = Object.getPrototypeOf(obj);
  var properties = {};
  Object.keys(proto).forEach(function (key) {
    var value = proto[key];
    // leave all basic types - this is needed for GridAPI to leave the "destroyed: boolean" attribute alone
    if (typeof value === 'function') {
      var func = function () {
        console.warn("AG Grid: " + objectName + " function " + key + "() cannot be called as the grid has been destroyed.\n                     Please don't call grid API functions on destroyed grids - as a matter of fact you shouldn't\n                     be keeping the API reference, your application has a memory leak! Remove the API reference\n                     when the grid is destroyed.");
      };
      properties[key] = {
        value: func,
        writable: true
      };
    }
  });
  Object.defineProperties(obj, properties);
}
function isNonNullObject(value) {
  return typeof value === 'object' && value !== null;
}
var ObjectUtils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  iterateObject: iterateObject,
  cloneObject: cloneObject,
  deepCloneObject: deepCloneObject,
  deepCloneDefinition: deepCloneDefinition,
  getProperty: getProperty,
  setProperty: setProperty,
  copyPropertiesIfPresent: copyPropertiesIfPresent,
  copyPropertyIfPresent: copyPropertyIfPresent,
  getAllKeysInObjects: getAllKeysInObjects,
  getAllValuesInObject: getAllValuesInObject,
  mergeDeep: mergeDeep,
  assign: assign,
  missingOrEmptyObject: missingOrEmptyObject,
  get: get,
  set: set,
  deepFreeze: deepFreeze,
  getValueUsingField: getValueUsingField,
  removeAllReferences: removeAllReferences,
  isNonNullObject: isNonNullObject
});

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var FUNCTION_STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
var FUNCTION_ARGUMENT_NAMES = /([^\s,]+)/g;
var doOnceFlags = {};
/**
 * If the key was passed before, then doesn't execute the func
 * @param {Function} func
 * @param {string} key
 */
function doOnce(func, key) {
  if (doOnceFlags[key]) {
    return;
  }
  func();
  doOnceFlags[key] = true;
}
function getFunctionName(funcConstructor) {
  // for every other browser in the world
  if (funcConstructor.name) {
    return funcConstructor.name;
  }
  // for the pestilence that is ie11
  var matches = /function\s+([^\(]+)/.exec(funcConstructor.toString());
  return matches && matches.length === 2 ? matches[1].trim() : null;
}
/** @deprecated */
function getFunctionParameters(func) {
  var fnStr = func.toString().replace(FUNCTION_STRIP_COMMENTS, '');
  return fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(FUNCTION_ARGUMENT_NAMES) || [];
}
function isFunction(val) {
  return !!(val && val.constructor && val.call && val.apply);
}
function executeInAWhile(funcs) {
  executeAfter(funcs, 400);
}
var executeNextVMTurnFuncs = [];
var executeNextVMTurnPending = false;
function executeNextVMTurn(func) {
  executeNextVMTurnFuncs.push(func);
  if (executeNextVMTurnPending) {
    return;
  }
  executeNextVMTurnPending = true;
  window.setTimeout(function () {
    var funcsCopy = executeNextVMTurnFuncs.slice();
    executeNextVMTurnFuncs.length = 0;
    executeNextVMTurnPending = false;
    funcsCopy.forEach(function (func) {
      return func();
    });
  }, 0);
}
function executeAfter(funcs, milliseconds) {
  if (milliseconds === void 0) {
    milliseconds = 0;
  }
  if (funcs.length > 0) {
    window.setTimeout(function () {
      return funcs.forEach(function (func) {
        return func();
      });
    }, milliseconds);
  }
}
/**
 * from https://stackoverflow.com/questions/24004791/can-someone-explain-the-debounce-function-in-javascript
 * @param {Function} func The function to be debounced
 * @param {number} wait The time in ms to debounce
 * @param {boolean} immediate If it should run immediately or wait for the initial debounce delay
 * @return {Function} The debounced function
 */
function debounce(func, wait, immediate) {
  if (immediate === void 0) {
    immediate = false;
  }
  // 'private' variable for instance
  // The returned function will be able to reference this due to closure.
  // Each call to the returned function will share this common timer.
  var timeout;
  // Calling debounce returns a new anonymous function
  return function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    // reference the context and args for the setTimeout function
    var context = this;
    // Should the function be called now? If immediate is true
    //   and not already in a timeout then the answer is: Yes
    var callNow = immediate && !timeout;
    // This is the basic debounce behaviour where you can call this
    //   function several times, but it will only execute once
    //   [before or after imposing a delay].
    //   Each time the returned function is called, the timer starts over.
    window.clearTimeout(timeout);
    // Set the new timeout
    timeout = window.setTimeout(function () {
      // Inside the timeout function, clear the timeout variable
      // which will let the next execution run when in 'immediate' mode
      timeout = null;
      // Check if the function already ran with the immediate flag
      if (!immediate) {
        // Call the original function with apply
        // apply lets you define the 'this' object as well as the arguments
        //    (both captured before setTimeout)
        func.apply(context, args);
      }
    }, wait);
    // Immediate mode and no wait timer? Execute the function..
    if (callNow) {
      func.apply(context, args);
    }
  };
}
function waitUntil(condition, callback, timeout, timeoutMessage) {
  if (timeout === void 0) {
    timeout = 100;
  }
  var timeStamp = new Date().getTime();
  var interval = null;
  var executed = false;
  var internalCallback = function () {
    var reachedTimeout = new Date().getTime() - timeStamp > timeout;
    if (condition() || reachedTimeout) {
      callback();
      executed = true;
      if (interval != null) {
        window.clearInterval(interval);
        interval = null;
      }
      if (reachedTimeout && timeoutMessage) {
        console.warn(timeoutMessage);
      }
    }
  };
  internalCallback();
  if (!executed) {
    interval = window.setInterval(internalCallback, 10);
  }
}
function compose() {
  var fns = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    fns[_i] = arguments[_i];
  }
  return function (arg) {
    return fns.reduce(function (composed, f) {
      return f(composed);
    }, arg);
  };
}
function callIfPresent(func) {
  if (func) {
    func();
  }
}
var FunctionUtils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  doOnce: doOnce,
  getFunctionName: getFunctionName,
  getFunctionParameters: getFunctionParameters,
  isFunction: isFunction,
  executeInAWhile: executeInAWhile,
  executeNextVMTurn: executeNextVMTurn,
  executeAfter: executeAfter,
  debounce: debounce,
  waitUntil: waitUntil,
  compose: compose,
  callIfPresent: callIfPresent
});

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var Context = /** @class */function () {
  function Context(params, logger) {
    this.beanWrappers = {};
    this.destroyed = false;
    if (!params || !params.beanClasses) {
      return;
    }
    this.contextParams = params;
    this.logger = logger;
    this.logger.log(">> creating ag-Application Context");
    this.createBeans();
    var beanInstances = this.getBeanInstances();
    this.wireBeans(beanInstances);
    this.logger.log(">> ag-Application Context ready - component is alive");
  }
  Context.prototype.getBeanInstances = function () {
    return values(this.beanWrappers).map(function (beanEntry) {
      return beanEntry.beanInstance;
    });
  };
  Context.prototype.createBean = function (bean, afterPreCreateCallback) {
    if (!bean) {
      throw Error("Can't wire to bean since it is null");
    }
    this.wireBeans([bean], afterPreCreateCallback);
    return bean;
  };
  Context.prototype.wireBeans = function (beanInstances, afterPreCreateCallback) {
    this.autoWireBeans(beanInstances);
    this.methodWireBeans(beanInstances);
    this.callLifeCycleMethods(beanInstances, 'preConstructMethods');
    // the callback sets the attributes, so the component has access to attributes
    // before postConstruct methods in the component are executed
    if (exists(afterPreCreateCallback)) {
      beanInstances.forEach(afterPreCreateCallback);
    }
    this.callLifeCycleMethods(beanInstances, 'postConstructMethods');
  };
  Context.prototype.createBeans = function () {
    var _this = this;
    // register all normal beans
    this.contextParams.beanClasses.forEach(this.createBeanWrapper.bind(this));
    // register override beans, these will overwrite beans above of same name
    // instantiate all beans - overridden beans will be left out
    iterateObject(this.beanWrappers, function (key, beanEntry) {
      var constructorParamsMeta;
      if (beanEntry.bean.__agBeanMetaData && beanEntry.bean.__agBeanMetaData.autowireMethods && beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor) {
        constructorParamsMeta = beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor;
      }
      var constructorParams = _this.getBeansForParameters(constructorParamsMeta, beanEntry.bean.name);
      var newInstance = applyToConstructor(beanEntry.bean, constructorParams);
      beanEntry.beanInstance = newInstance;
    });
    var createdBeanNames = Object.keys(this.beanWrappers).join(', ');
    this.logger.log("created beans: " + createdBeanNames);
  };
  // tslint:disable-next-line
  Context.prototype.createBeanWrapper = function (BeanClass) {
    var metaData = BeanClass.__agBeanMetaData;
    if (!metaData) {
      var beanName = void 0;
      if (BeanClass.prototype.constructor) {
        beanName = getFunctionName(BeanClass.prototype.constructor);
      } else {
        beanName = "" + BeanClass;
      }
      console.error("Context item " + beanName + " is not a bean");
      return;
    }
    var beanEntry = {
      bean: BeanClass,
      beanInstance: null,
      beanName: metaData.beanName
    };
    this.beanWrappers[metaData.beanName] = beanEntry;
  };
  Context.prototype.autoWireBeans = function (beanInstances) {
    var _this = this;
    beanInstances.forEach(function (beanInstance) {
      _this.forEachMetaDataInHierarchy(beanInstance, function (metaData, beanName) {
        var attributes = metaData.agClassAttributes;
        if (!attributes) {
          return;
        }
        attributes.forEach(function (attribute) {
          var otherBean = _this.lookupBeanInstance(beanName, attribute.beanName, attribute.optional);
          beanInstance[attribute.attributeName] = otherBean;
        });
      });
    });
  };
  Context.prototype.methodWireBeans = function (beanInstances) {
    var _this = this;
    beanInstances.forEach(function (beanInstance) {
      _this.forEachMetaDataInHierarchy(beanInstance, function (metaData, beanName) {
        iterateObject(metaData.autowireMethods, function (methodName, wireParams) {
          // skip constructor, as this is dealt with elsewhere
          if (methodName === "agConstructor") {
            return;
          }
          var initParams = _this.getBeansForParameters(wireParams, beanName);
          beanInstance[methodName].apply(beanInstance, initParams);
        });
      });
    });
  };
  Context.prototype.forEachMetaDataInHierarchy = function (beanInstance, callback) {
    var prototype = Object.getPrototypeOf(beanInstance);
    while (prototype != null) {
      var constructor = prototype.constructor;
      if (constructor.hasOwnProperty('__agBeanMetaData')) {
        var metaData = constructor.__agBeanMetaData;
        var beanName = this.getBeanName(constructor);
        callback(metaData, beanName);
      }
      prototype = Object.getPrototypeOf(prototype);
    }
  };
  Context.prototype.getBeanName = function (constructor) {
    if (constructor.__agBeanMetaData && constructor.__agBeanMetaData.beanName) {
      return constructor.__agBeanMetaData.beanName;
    }
    var constructorString = constructor.toString();
    var beanName = constructorString.substring(9, constructorString.indexOf("("));
    return beanName;
  };
  Context.prototype.getBeansForParameters = function (parameters, beanName) {
    var _this = this;
    var beansList = [];
    if (parameters) {
      iterateObject(parameters, function (paramIndex, otherBeanName) {
        var otherBean = _this.lookupBeanInstance(beanName, otherBeanName);
        beansList[Number(paramIndex)] = otherBean;
      });
    }
    return beansList;
  };
  Context.prototype.lookupBeanInstance = function (wiringBean, beanName, optional) {
    if (optional === void 0) {
      optional = false;
    }
    if (beanName === "context") {
      return this;
    }
    if (this.contextParams.providedBeanInstances && this.contextParams.providedBeanInstances.hasOwnProperty(beanName)) {
      return this.contextParams.providedBeanInstances[beanName];
    }
    var beanEntry = this.beanWrappers[beanName];
    if (beanEntry) {
      return beanEntry.beanInstance;
    }
    if (!optional) {
      console.error("AG Grid: unable to find bean reference " + beanName + " while initialising " + wiringBean);
    }
    return null;
  };
  Context.prototype.callLifeCycleMethods = function (beanInstances, lifeCycleMethod) {
    var _this = this;
    beanInstances.forEach(function (beanInstance) {
      return _this.callLifeCycleMethodsOnBean(beanInstance, lifeCycleMethod);
    });
  };
  Context.prototype.callLifeCycleMethodsOnBean = function (beanInstance, lifeCycleMethod, methodToIgnore) {
    // putting all methods into a map removes duplicates
    var allMethods = {};
    // dump methods from each level of the metadata hierarchy
    this.forEachMetaDataInHierarchy(beanInstance, function (metaData) {
      var methods = metaData[lifeCycleMethod];
      if (methods) {
        methods.forEach(function (methodName) {
          if (methodName != methodToIgnore) {
            allMethods[methodName] = true;
          }
        });
      }
    });
    var allMethodsList = Object.keys(allMethods);
    allMethodsList.forEach(function (methodName) {
      return beanInstance[methodName]();
    });
  };
  Context.prototype.getBean = function (name) {
    return this.lookupBeanInstance("getBean", name, true);
  };
  Context.prototype.destroy = function () {
    if (this.destroyed) {
      return;
    }
    this.logger.log(">> Shutting down ag-Application Context");
    var beanInstances = this.getBeanInstances();
    this.destroyBeans(beanInstances);
    this.contextParams.providedBeanInstances = null;
    this.destroyed = true;
    this.logger.log(">> ag-Application Context shut down - component is dead");
  };
  Context.prototype.destroyBean = function (bean) {
    if (!bean) {
      return;
    }
    this.destroyBeans([bean]);
  };
  Context.prototype.destroyBeans = function (beans) {
    var _this = this;
    if (!beans) {
      return [];
    }
    beans.forEach(function (bean) {
      _this.callLifeCycleMethodsOnBean(bean, 'preDestroyMethods', 'destroy');
      // call destroy() explicitly if it exists
      var beanAny = bean;
      if (typeof beanAny.destroy === 'function') {
        beanAny.destroy();
      }
    });
    return [];
  };
  return Context;
}();
// taken from: http://stackoverflow.com/questions/3362471/how-can-i-call-a-javascript-constructor-using-call-or-apply
// allows calling 'apply' on a constructor
function applyToConstructor(constructor, argArray) {
  var args = [null].concat(argArray);
  var factoryFunction = constructor.bind.apply(constructor, args);
  return new factoryFunction();
}
function PreConstruct(target, methodName, descriptor) {
  var props = getOrCreateProps(target.constructor);
  if (!props.preConstructMethods) {
    props.preConstructMethods = [];
  }
  props.preConstructMethods.push(methodName);
}
function PostConstruct(target, methodName, descriptor) {
  var props = getOrCreateProps(target.constructor);
  if (!props.postConstructMethods) {
    props.postConstructMethods = [];
  }
  props.postConstructMethods.push(methodName);
}
function PreDestroy(target, methodName, descriptor) {
  var props = getOrCreateProps(target.constructor);
  if (!props.preDestroyMethods) {
    props.preDestroyMethods = [];
  }
  props.preDestroyMethods.push(methodName);
}
function Bean(beanName) {
  return function (classConstructor) {
    var props = getOrCreateProps(classConstructor);
    props.beanName = beanName;
  };
}
function Autowired(name) {
  return function (target, propertyKey, descriptor) {
    autowiredFunc(target, name, false, target, propertyKey, null);
  };
}
function Optional(name) {
  return function (target, propertyKey, descriptor) {
    autowiredFunc(target, name, true, target, propertyKey, null);
  };
}
function autowiredFunc(target, name, optional, classPrototype, methodOrAttributeName, index) {
  if (name === null) {
    console.error("AG Grid: Autowired name should not be null");
    return;
  }
  if (typeof index === "number") {
    console.error("AG Grid: Autowired should be on an attribute");
    return;
  }
  // it's an attribute on the class
  var props = getOrCreateProps(target.constructor);
  if (!props.agClassAttributes) {
    props.agClassAttributes = [];
  }
  props.agClassAttributes.push({
    attributeName: methodOrAttributeName,
    beanName: name,
    optional: optional
  });
}
function Qualifier(name) {
  return function (classPrototype, methodOrAttributeName, index) {
    var constructor = typeof classPrototype == "function" ? classPrototype : classPrototype.constructor;
    var props;
    if (typeof index === "number") {
      // it's a parameter on a method
      var methodName = void 0;
      if (methodOrAttributeName) {
        props = getOrCreateProps(constructor);
        methodName = methodOrAttributeName;
      } else {
        props = getOrCreateProps(constructor);
        methodName = "agConstructor";
      }
      if (!props.autowireMethods) {
        props.autowireMethods = {};
      }
      if (!props.autowireMethods[methodName]) {
        props.autowireMethods[methodName] = {};
      }
      props.autowireMethods[methodName][index] = name;
    }
  };
}
function getOrCreateProps(target) {
  if (!target.hasOwnProperty("__agBeanMetaData")) {
    target.__agBeanMetaData = {};
  }
  return target.__agBeanMetaData;
}

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __decorate =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param =  false || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};
var EventService = /** @class */function () {
  function EventService() {
    this.allSyncListeners = new Map();
    this.allAsyncListeners = new Map();
    this.globalSyncListeners = new Set();
    this.globalAsyncListeners = new Set();
    this.asyncFunctionsQueue = [];
    this.scheduled = false;
    // using an object performs better than a Set for the number of different events we have
    this.firedEvents = {};
  }
  // because this class is used both inside the context and outside the context, we do not
  // use autowired attributes, as that would be confusing, as sometimes the attributes
  // would be wired, and sometimes not.
  //
  // the global event servers used by AG Grid is autowired by the context once, and this
  // setBeans method gets called once.
  //
  // the times when this class is used outside of the context (eg RowNode has an instance of this
  // class) then it is not a bean, and this setBeans method is not called.
  EventService.prototype.setBeans = function (loggerFactory, gridOptionsWrapper, frameworkOverrides, globalEventListener) {
    if (globalEventListener === void 0) {
      globalEventListener = null;
    }
    this.logger = loggerFactory.create('EventService');
    this.frameworkOverrides = frameworkOverrides;
    if (globalEventListener) {
      var async = gridOptionsWrapper.useAsyncEvents();
      this.addGlobalListener(globalEventListener, async);
    }
  };
  EventService.prototype.getListeners = function (eventType, async, autoCreateListenerCollection) {
    var listenerMap = async ? this.allAsyncListeners : this.allSyncListeners;
    var listeners = listenerMap.get(eventType);
    // Note: 'autoCreateListenerCollection' should only be 'true' if a listener is about to be added. For instance
    // getListeners() is also called during event dispatch even though no listeners are added. This measure protects
    // against 'memory bloat' as empty collections will prevent the RowNode's event service from being removed after
    // the RowComp is destroyed, see noRegisteredListenersExist() below.
    if (!listeners && autoCreateListenerCollection) {
      listeners = new Set();
      listenerMap.set(eventType, listeners);
    }
    return listeners;
  };
  EventService.prototype.noRegisteredListenersExist = function () {
    return this.allSyncListeners.size === 0 && this.allAsyncListeners.size === 0 && this.globalSyncListeners.size === 0 && this.globalAsyncListeners.size === 0;
  };
  EventService.prototype.addEventListener = function (eventType, listener, async) {
    if (async === void 0) {
      async = false;
    }
    this.getListeners(eventType, async, true).add(listener);
  };
  EventService.prototype.removeEventListener = function (eventType, listener, async) {
    if (async === void 0) {
      async = false;
    }
    var listeners = this.getListeners(eventType, async, false);
    if (!listeners) {
      return;
    }
    listeners.delete(listener);
    if (listeners.size === 0) {
      var listenerMap = async ? this.allAsyncListeners : this.allSyncListeners;
      listenerMap.delete(eventType);
    }
  };
  EventService.prototype.addGlobalListener = function (listener, async) {
    if (async === void 0) {
      async = false;
    }
    (async ? this.globalAsyncListeners : this.globalSyncListeners).add(listener);
  };
  EventService.prototype.removeGlobalListener = function (listener, async) {
    if (async === void 0) {
      async = false;
    }
    (async ? this.globalAsyncListeners : this.globalSyncListeners).delete(listener);
  };
  EventService.prototype.dispatchEvent = function (event) {
    this.dispatchToListeners(event, true);
    this.dispatchToListeners(event, false);
    this.firedEvents[event.type] = true;
  };
  EventService.prototype.dispatchEventOnce = function (event) {
    if (!this.firedEvents[event.type]) {
      this.dispatchEvent(event);
    }
  };
  EventService.prototype.dispatchToListeners = function (event, async) {
    var _this = this;
    var eventType = event.type;
    var processEventListeners = function (listeners) {
      return listeners.forEach(function (listener) {
        if (async) {
          _this.dispatchAsync(function () {
            return listener(event);
          });
        } else {
          listener(event);
        }
      });
    };
    var listeners = this.getListeners(eventType, async, false);
    if (listeners) {
      processEventListeners(listeners);
    }
    var globalListeners = async ? this.globalAsyncListeners : this.globalSyncListeners;
    globalListeners.forEach(function (listener) {
      if (async) {
        _this.dispatchAsync(function () {
          return _this.frameworkOverrides.dispatchEvent(eventType, function () {
            return listener(eventType, event);
          });
        });
      } else {
        _this.frameworkOverrides.dispatchEvent(eventType, function () {
          return listener(eventType, event);
        });
      }
    });
  };
  // this gets called inside the grid's thread, for each event that it
  // wants to set async. the grid then batches the events into one setTimeout()
  // because setTimeout() is an expensive operation. ideally we would have
  // each event in it's own setTimeout(), but we batch for performance.
  EventService.prototype.dispatchAsync = function (func) {
    // add to the queue for executing later in the next VM turn
    this.asyncFunctionsQueue.push(func);
    // check if timeout is already scheduled. the first time the grid calls
    // this within it's thread turn, this should be false, so it will schedule
    // the 'flush queue' method the first time it comes here. then the flag is
    // set to 'true' so it will know it's already scheduled for subsequent calls.
    if (!this.scheduled) {
      // if not scheduled, schedule one
      window.setTimeout(this.flushAsyncQueue.bind(this), 0);
      // mark that it is scheduled
      this.scheduled = true;
    }
  };
  // this happens in the next VM turn only, and empties the queue of events
  EventService.prototype.flushAsyncQueue = function () {
    this.scheduled = false;
    // we take a copy, because the event listener could be using
    // the grid, which would cause more events, which would be potentially
    // added to the queue, so safe to take a copy, the new events will
    // get executed in a later VM turn rather than risk updating the
    // queue as we are flushing it.
    var queueCopy = this.asyncFunctionsQueue.slice();
    this.asyncFunctionsQueue = [];
    // execute the queue
    queueCopy.forEach(function (func) {
      return func();
    });
  };
  __decorate([__param(0, Qualifier('loggerFactory')), __param(1, Qualifier('gridOptionsWrapper')), __param(2, Qualifier('frameworkOverrides')), __param(3, Qualifier('globalEventListener'))], EventService.prototype, "setBeans", null);
  EventService = __decorate([Bean('eventService')], EventService);
  return EventService;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var Constants = /** @class */function () {
  function Constants() {}
  Constants.ROW_BUFFER_SIZE = 10;
  Constants.LAYOUT_INTERVAL = 500;
  Constants.BATCH_WAIT_MILLIS = 50;
  Constants.EXPORT_TYPE_DRAG_COPY = 'dragCopy';
  Constants.EXPORT_TYPE_CLIPBOARD = 'clipboard';
  Constants.EXPORT_TYPE_EXCEL = 'excel';
  Constants.EXPORT_TYPE_CSV = 'csv';
  Constants.ROW_MODEL_TYPE_INFINITE = 'infinite';
  Constants.ROW_MODEL_TYPE_VIEWPORT = 'viewport';
  Constants.ROW_MODEL_TYPE_CLIENT_SIDE = 'clientSide';
  Constants.ROW_MODEL_TYPE_SERVER_SIDE = 'serverSide';
  Constants.ALWAYS = 'always';
  Constants.ONLY_WHEN_GROUPING = 'onlyWhenGrouping';
  Constants.PINNED_TOP = 'top';
  Constants.PINNED_BOTTOM = 'bottom';
  Constants.DOM_LAYOUT_NORMAL = 'normal';
  Constants.DOM_LAYOUT_PRINT = 'print';
  Constants.DOM_LAYOUT_AUTO_HEIGHT = 'autoHeight';
  Constants.GROUP_AUTO_COLUMN_ID = 'ag-Grid-AutoColumn';
  Constants.SOURCE_PASTE = 'paste';
  Constants.PINNED_RIGHT = 'right';
  Constants.PINNED_LEFT = 'left';
  Constants.SORT_ASC = 'asc';
  Constants.SORT_DESC = 'desc';
  Constants.INPUT_SELECTOR = 'input, select, button, textarea';
  Constants.FOCUSABLE_SELECTOR = '[tabindex], input, select, button, textarea';
  Constants.FOCUSABLE_EXCLUDE = '.ag-hidden, .ag-hidden *, [disabled], .ag-disabled, .ag-disabled *';
  return Constants;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
(function (ModuleNames) {
  // when using modules, user references this
  ModuleNames["CommunityCoreModule"] = "@ag-grid-community/core";
  // when not using modules, user references this
  ModuleNames["CommunityAllModules"] = "@ag-grid-community/all";
  // community modules
  ModuleNames["InfiniteRowModelModule"] = "@ag-grid-community/infinite-row-model";
  ModuleNames["ClientSideRowModelModule"] = "@ag-grid-community/client-side-row-model";
  ModuleNames["CsvExportModule"] = "@ag-grid-community/csv-export";
  // enterprise core - users never import on this, but other enterprise modules do
  ModuleNames["EnterpriseCoreModule"] = "@ag-grid-enterprise/core";
  // when not using modules, user references this
  ModuleNames["EnterpriseAllModules"] = "@ag-grid-enterprise/all";
  // enterprise modules
  ModuleNames["RowGroupingModule"] = "@ag-grid-enterprise/row-grouping";
  ModuleNames["ColumnToolPanelModule"] = "@ag-grid-enterprise/column-tool-panel";
  ModuleNames["FiltersToolPanelModule"] = "@ag-grid-enterprise/filter-tool-panel";
  ModuleNames["MenuModule"] = "@ag-grid-enterprise/menu";
  ModuleNames["SetFilterModule"] = "@ag-grid-enterprise/set-filter";
  ModuleNames["MultiFilterModule"] = "@ag-grid-enterprise/multi-filter";
  ModuleNames["StatusBarModule"] = "@ag-grid-enterprise/status-bar";
  ModuleNames["SideBarModule"] = "@ag-grid-enterprise/side-bar";
  ModuleNames["RangeSelectionModule"] = "@ag-grid-enterprise/range-selection";
  ModuleNames["MasterDetailModule"] = "@ag-grid-enterprise/master-detail";
  ModuleNames["RichSelectModule"] = "@ag-grid-enterprise/rich-select";
  ModuleNames["GridChartsModule"] = "@ag-grid-enterprise/charts";
  ModuleNames["ViewportRowModelModule"] = "@ag-grid-enterprise/viewport-row-model";
  ModuleNames["ServerSideRowModelModule"] = "@ag-grid-enterprise/server-side-row-model";
  ModuleNames["ExcelExportModule"] = "@ag-grid-enterprise/excel-export";
  ModuleNames["ClipboardModule"] = "@ag-grid-enterprise/clipboard";
  ModuleNames["DateTimeCellEditorModule"] = "@ag-grid-enterprise/date-time-cell-editor";
  // framework wrappers currently don't provide beans, comps etc, so no need to be modules,
  // however i argue they should be as in theory they 'could' provide beans etc
  ModuleNames["AngularModule"] = "@ag-grid-community/angular";
  ModuleNames["ReactModule"] = "@ag-grid-community/react";
  ModuleNames["VueModule"] = "@ag-grid-community/vue";
  ModuleNames["PolymerModule"] = "@ag-grid-community/polymer";
  // and then this, which is definitely not a grid module, as it should not have any dependency
  // on the grid (ie shouldn't even reference the Module interface)
  // ChartsModule = "@ag-grid-community/charts-core",
})(exports.ModuleNames || (exports.ModuleNames = {}));

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var ModuleRegistry = /** @class */function () {
  function ModuleRegistry() {}
  ModuleRegistry.register = function (module, moduleBased) {
    if (moduleBased === void 0) {
      moduleBased = true;
    }
    ModuleRegistry.modulesMap[module.moduleName] = module;
    if (ModuleRegistry.moduleBased === undefined) {
      ModuleRegistry.moduleBased = moduleBased;
    } else {
      if (ModuleRegistry.moduleBased !== moduleBased) {
        doOnce(function () {
          console.warn("AG Grid: You are mixing modules (i.e. @ag-grid-community/core) and packages (ag-grid-community) - you can only use one or the other of these mechanisms.");
          console.warn('Please see https://www.ag-grid.com/javascript-table/packages-modules/ for more information.');
        }, 'ModulePackageCheck');
      }
    }
  };
  // noinspection JSUnusedGlobalSymbols
  ModuleRegistry.registerModules = function (modules, moduleBased) {
    if (moduleBased === void 0) {
      moduleBased = true;
    }
    if (!modules) {
      return;
    }
    modules.forEach(function (module) {
      return ModuleRegistry.register(module, moduleBased);
    });
  };
  ModuleRegistry.assertRegistered = function (moduleName, reason) {
    if (this.isRegistered(moduleName)) {
      return true;
    }
    var warningKey = reason + moduleName;
    var warningMessage = "AG Grid: unable to use " + reason + " as module " + moduleName + " is not present. Please see: https://www.ag-grid.com/javascript-table/modules/";
    doOnce(function () {
      console.warn(warningMessage);
    }, warningKey);
    return false;
  };
  ModuleRegistry.isRegistered = function (moduleName) {
    return !!ModuleRegistry.modulesMap[moduleName];
  };
  ModuleRegistry.getRegisteredModules = function () {
    return values(ModuleRegistry.modulesMap);
  };
  ModuleRegistry.isPackageBased = function () {
    return !ModuleRegistry.moduleBased;
  };
  // having in a map a) removes duplicates and b) allows fast lookup
  ModuleRegistry.modulesMap = {};
  return ModuleRegistry;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __decorate$1 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
// Wrapper around a user provide column definition. The grid treats the column definition as ready only.
// This class contains all the runtime information about a column, plus some logic (the definition has no logic).
// This class implements both interfaces ColumnGroupChild and OriginalColumnGroupChild as the class can
// appear as a child of either the original tree or the displayed tree. However the relevant group classes
// for each type only implements one, as each group can only appear in it's associated tree (eg OriginalColumnGroup
// can only appear in OriginalColumn tree).
var Column = /** @class */function () {
  function Column(colDef, userProvidedColDef, colId, primary) {
    this.moving = false;
    this.menuVisible = false;
    this.filterActive = false;
    this.eventService = new EventService();
    this.rowGroupActive = false;
    this.pivotActive = false;
    this.aggregationActive = false;
    this.colDef = colDef;
    this.userProvidedColDef = userProvidedColDef;
    this.colId = colId;
    this.primary = primary;
    this.setState(colDef);
  }
  Column.prototype.setState = function (colDef) {
    // sort
    if (colDef.sort !== undefined) {
      if (colDef.sort === Constants.SORT_ASC || colDef.sort === Constants.SORT_DESC) {
        this.sort = colDef.sort;
      }
    } else {
      if (colDef.initialSort === Constants.SORT_ASC || colDef.initialSort === Constants.SORT_DESC) {
        this.sort = colDef.initialSort;
      }
    }
    // sortIndex
    var sortIndex = attrToNumber(colDef.sortIndex);
    var initialSortIndex = attrToNumber(colDef.initialSortIndex);
    if (sortIndex !== undefined) {
      if (sortIndex !== null) {
        this.sortIndex = sortIndex;
      }
    } else {
      if (initialSortIndex !== null) {
        this.sortIndex = initialSortIndex;
      }
    }
    // hide
    var hide = attrToBoolean(colDef.hide);
    var initialHide = attrToBoolean(colDef.initialHide);
    if (hide !== undefined) {
      this.visible = !hide;
    } else {
      this.visible = !initialHide;
    }
    // pinned
    if (colDef.pinned !== undefined) {
      this.setPinned(colDef.pinned);
    } else {
      this.setPinned(colDef.initialPinned);
    }
    // flex
    var flex = attrToNumber(colDef.flex);
    var initialFlex = attrToNumber(colDef.initialFlex);
    if (flex !== undefined) {
      this.flex = flex;
    } else if (initialFlex !== undefined) {
      this.flex = initialFlex;
    }
  };
  // gets called when user provides an alternative colDef, eg
  Column.prototype.setColDef = function (colDef, userProvidedColDef) {
    this.colDef = colDef;
    this.userProvidedColDef = userProvidedColDef;
    this.initMinAndMaxWidths();
    this.initDotNotation();
  };
  Column.prototype.getUserProvidedColDef = function () {
    return this.userProvidedColDef;
  };
  Column.prototype.setParent = function (parent) {
    this.parent = parent;
  };
  Column.prototype.getParent = function () {
    return this.parent;
  };
  Column.prototype.setOriginalParent = function (originalParent) {
    this.originalParent = originalParent;
  };
  Column.prototype.getOriginalParent = function () {
    return this.originalParent;
  };
  // this is done after constructor as it uses gridOptionsWrapper
  Column.prototype.initialise = function () {
    this.initMinAndMaxWidths();
    this.resetActualWidth('gridInitializing');
    this.initDotNotation();
    this.validate();
  };
  Column.prototype.initDotNotation = function () {
    var suppressDotNotation = this.gridOptionsWrapper.isSuppressFieldDotNotation();
    this.fieldContainsDots = exists(this.colDef.field) && this.colDef.field.indexOf('.') >= 0 && !suppressDotNotation;
    this.tooltipFieldContainsDots = exists(this.colDef.tooltipField) && this.colDef.tooltipField.indexOf('.') >= 0 && !suppressDotNotation;
  };
  Column.prototype.initMinAndMaxWidths = function () {
    var minColWidth = this.gridOptionsWrapper.getMinColWidth();
    var maxColWidth = this.gridOptionsWrapper.getMaxColWidth();
    if (this.colDef.minWidth != null) {
      // we force min width to be at least one pixel, otherwise column will disappear
      this.minWidth = Math.max(this.colDef.minWidth, 1);
    } else {
      this.minWidth = minColWidth;
    }
    if (this.colDef.maxWidth != null) {
      this.maxWidth = this.colDef.maxWidth;
    } else {
      this.maxWidth = maxColWidth;
    }
  };
  Column.prototype.resetActualWidth = function (source) {
    if (source === void 0) {
      source = 'api';
    }
    var initialWidth = this.columnUtils.calculateColInitialWidth(this.colDef);
    this.setActualWidth(initialWidth, source, true);
  };
  Column.prototype.isEmptyGroup = function () {
    return false;
  };
  Column.prototype.isRowGroupDisplayed = function (colId) {
    if (missing(this.colDef) || missing(this.colDef.showRowGroup)) {
      return false;
    }
    var showingAllGroups = this.colDef.showRowGroup === true;
    var showingThisGroup = this.colDef.showRowGroup === colId;
    return showingAllGroups || showingThisGroup;
  };
  Column.prototype.getUniqueId = function () {
    return this.getId();
  };
  Column.prototype.isPrimary = function () {
    return this.primary;
  };
  Column.prototype.isFilterAllowed = function () {
    // filter defined means it's a string, class or true.
    // if its false, null or undefined then it's false.
    var filterDefined = !!this.colDef.filter || !!this.colDef.filterFramework;
    return this.primary && filterDefined;
  };
  Column.prototype.isFieldContainsDots = function () {
    return this.fieldContainsDots;
  };
  Column.prototype.isTooltipFieldContainsDots = function () {
    return this.tooltipFieldContainsDots;
  };
  Column.prototype.validate = function () {
    var colDefAny = this.colDef;
    function warnOnce(msg, key, obj) {
      doOnce(function () {
        if (obj) {
          console.warn(msg, obj);
        } else {
          doOnce(function () {
            return console.warn(msg);
          }, key);
        }
      }, key);
    }
    var usingCSRM = this.gridOptionsWrapper.isRowModelDefault();
    if (usingCSRM && !ModuleRegistry.isRegistered(exports.ModuleNames.RowGroupingModule)) {
      var rowGroupingItems = ['enableRowGroup', 'rowGroup', 'rowGroupIndex', 'enablePivot', 'enableValue', 'pivot', 'pivotIndex', 'aggFunc'];
      rowGroupingItems.forEach(function (item) {
        if (exists(colDefAny[item])) {
          if (ModuleRegistry.isPackageBased()) {
            warnOnce("AG Grid: " + item + " is only valid in ag-grid-enterprise, your column definition should not have " + item, 'ColumnRowGroupingMissing' + item);
          } else {
            warnOnce("AG Grid: " + item + " is only valid with AG Grid Enterprise Module " + exports.ModuleNames.RowGroupingModule + " - your column definition should not have " + item, 'ColumnRowGroupingMissing' + item);
          }
        }
      });
    }
    if (!ModuleRegistry.isRegistered(exports.ModuleNames.RichSelectModule)) {
      if (this.colDef.cellEditor === 'agRichSelect' || this.colDef.cellEditor === 'agRichSelectCellEditor') {
        if (ModuleRegistry.isPackageBased()) {
          warnOnce("AG Grid: " + this.colDef.cellEditor + " can only be used with ag-grid-enterprise", 'ColumnRichSelectMissing');
        } else {
          warnOnce("AG Grid: " + this.colDef.cellEditor + " can only be used with AG Grid Enterprise Module " + exports.ModuleNames.RichSelectModule, 'ColumnRichSelectMissing');
        }
      }
    }
    if (!ModuleRegistry.isRegistered(exports.ModuleNames.DateTimeCellEditorModule)) {
      if (this.colDef.cellEditor === 'agRichSelect' || this.colDef.cellEditor === 'agDateTimeCellEditor') {
        if (ModuleRegistry.isPackageBased()) {
          warnOnce("AG Grid: " + this.colDef.cellEditor + " can only be used with ag-grid-enterprise", 'ColumnDateTimeMissing');
        } else {
          warnOnce("AG Grid: " + this.colDef.cellEditor + " can only be used with AG Grid Enterprise Module " + exports.ModuleNames.DateTimeCellEditorModule, 'ColumnDateTimeMissing');
        }
      }
    }
    if (this.gridOptionsWrapper.isTreeData()) {
      var itemsNotAllowedWithTreeData = ['rowGroup', 'rowGroupIndex', 'pivot', 'pivotIndex'];
      itemsNotAllowedWithTreeData.forEach(function (item) {
        if (exists(colDefAny[item])) {
          warnOnce("AG Grid: " + item + " is not possible when doing tree data, your column definition should not have " + item, 'TreeDataCannotRowGroup');
        }
      });
    }
    if (exists(this.colDef.width) && typeof this.colDef.width !== 'number') {
      warnOnce('AG Grid: colDef.width should be a number, not ' + typeof this.colDef.width, 'ColumnCheck_asdfawef');
    }
  };
  Column.prototype.addEventListener = function (eventType, listener) {
    this.eventService.addEventListener(eventType, listener);
  };
  Column.prototype.removeEventListener = function (eventType, listener) {
    this.eventService.removeEventListener(eventType, listener);
  };
  Column.prototype.createColumnFunctionCallbackParams = function (rowNode) {
    return {
      node: rowNode,
      data: rowNode.data,
      column: this,
      colDef: this.colDef,
      context: this.gridOptionsWrapper.getContext(),
      api: this.gridOptionsWrapper.getApi(),
      columnApi: this.gridOptionsWrapper.getColumnApi()
    };
  };
  Column.prototype.isSuppressNavigable = function (rowNode) {
    // if boolean set, then just use it
    if (typeof this.colDef.suppressNavigable === 'boolean') {
      return this.colDef.suppressNavigable;
    }
    // if function, then call the function to find out
    if (typeof this.colDef.suppressNavigable === 'function') {
      var params = this.createColumnFunctionCallbackParams(rowNode);
      var userFunc = this.colDef.suppressNavigable;
      return userFunc(params);
    }
    return false;
  };
  Column.prototype.isCellEditable = function (rowNode) {
    // only allow editing of groups if the user has this option enabled
    if (rowNode.group && !this.gridOptionsWrapper.isEnableGroupEdit()) {
      return false;
    }
    return this.isColumnFunc(rowNode, this.colDef.editable);
  };
  Column.prototype.isRowDrag = function (rowNode) {
    return this.isColumnFunc(rowNode, this.colDef.rowDrag);
  };
  Column.prototype.isDndSource = function (rowNode) {
    return this.isColumnFunc(rowNode, this.colDef.dndSource);
  };
  Column.prototype.isCellCheckboxSelection = function (rowNode) {
    return this.isColumnFunc(rowNode, this.colDef.checkboxSelection);
  };
  Column.prototype.isSuppressPaste = function (rowNode) {
    return this.isColumnFunc(rowNode, this.colDef ? this.colDef.suppressPaste : null);
  };
  Column.prototype.isResizable = function () {
    return this.colDef.resizable === true;
  };
  Column.prototype.isColumnFunc = function (rowNode, value) {
    // if boolean set, then just use it
    if (typeof value === 'boolean') {
      return value;
    }
    // if function, then call the function to find out
    if (typeof value === 'function') {
      var params = this.createColumnFunctionCallbackParams(rowNode);
      var editableFunc = value;
      return editableFunc(params);
    }
    return false;
  };
  Column.prototype.setMoving = function (moving, source) {
    if (source === void 0) {
      source = "api";
    }
    this.moving = moving;
    this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_MOVING_CHANGED, source));
  };
  Column.prototype.createColumnEvent = function (type, source) {
    return {
      api: this.gridApi,
      columnApi: this.columnApi,
      type: type,
      column: this,
      columns: [this],
      source: source
    };
  };
  Column.prototype.isMoving = function () {
    return this.moving;
  };
  Column.prototype.getSort = function () {
    return this.sort;
  };
  Column.prototype.setSort = function (sort, source) {
    if (source === void 0) {
      source = "api";
    }
    if (this.sort !== sort) {
      this.sort = sort;
      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_SORT_CHANGED, source));
    }
  };
  Column.prototype.setMenuVisible = function (visible, source) {
    if (source === void 0) {
      source = "api";
    }
    if (this.menuVisible !== visible) {
      this.menuVisible = visible;
      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_MENU_VISIBLE_CHANGED, source));
    }
  };
  Column.prototype.isMenuVisible = function () {
    return this.menuVisible;
  };
  Column.prototype.isSortAscending = function () {
    return this.sort === Constants.SORT_ASC;
  };
  Column.prototype.isSortDescending = function () {
    return this.sort === Constants.SORT_DESC;
  };
  Column.prototype.isSortNone = function () {
    return missing(this.sort);
  };
  Column.prototype.isSorting = function () {
    return exists(this.sort);
  };
  Column.prototype.getSortIndex = function () {
    return this.sortIndex;
  };
  Column.prototype.setSortIndex = function (sortOrder) {
    this.sortIndex = sortOrder;
  };
  Column.prototype.setAggFunc = function (aggFunc) {
    this.aggFunc = aggFunc;
  };
  Column.prototype.getAggFunc = function () {
    return this.aggFunc;
  };
  Column.prototype.getLeft = function () {
    return this.left;
  };
  Column.prototype.getOldLeft = function () {
    return this.oldLeft;
  };
  Column.prototype.getRight = function () {
    return this.left + this.actualWidth;
  };
  Column.prototype.setLeft = function (left, source) {
    if (source === void 0) {
      source = "api";
    }
    this.oldLeft = this.left;
    if (this.left !== left) {
      this.left = left;
      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_LEFT_CHANGED, source));
    }
  };
  Column.prototype.isFilterActive = function () {
    return this.filterActive;
  };
  // additionalEventAttributes is used by provided simple floating filter, so it can add 'floatingFilter=true' to the event
  Column.prototype.setFilterActive = function (active, source, additionalEventAttributes) {
    if (source === void 0) {
      source = "api";
    }
    if (this.filterActive !== active) {
      this.filterActive = active;
      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_FILTER_ACTIVE_CHANGED, source));
    }
    var filterChangedEvent = this.createColumnEvent(Column.EVENT_FILTER_CHANGED, source);
    if (additionalEventAttributes) {
      mergeDeep(filterChangedEvent, additionalEventAttributes);
    }
    this.eventService.dispatchEvent(filterChangedEvent);
  };
  Column.prototype.setPinned = function (pinned) {
    if (pinned === true || pinned === Constants.PINNED_LEFT) {
      this.pinned = Constants.PINNED_LEFT;
    } else if (pinned === Constants.PINNED_RIGHT) {
      this.pinned = Constants.PINNED_RIGHT;
    } else {
      this.pinned = null;
    }
  };
  Column.prototype.setFirstRightPinned = function (firstRightPinned, source) {
    if (source === void 0) {
      source = "api";
    }
    if (this.firstRightPinned !== firstRightPinned) {
      this.firstRightPinned = firstRightPinned;
      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_FIRST_RIGHT_PINNED_CHANGED, source));
    }
  };
  Column.prototype.setLastLeftPinned = function (lastLeftPinned, source) {
    if (source === void 0) {
      source = "api";
    }
    if (this.lastLeftPinned !== lastLeftPinned) {
      this.lastLeftPinned = lastLeftPinned;
      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_LAST_LEFT_PINNED_CHANGED, source));
    }
  };
  Column.prototype.isFirstRightPinned = function () {
    return this.firstRightPinned;
  };
  Column.prototype.isLastLeftPinned = function () {
    return this.lastLeftPinned;
  };
  Column.prototype.isPinned = function () {
    return this.pinned === Constants.PINNED_LEFT || this.pinned === Constants.PINNED_RIGHT;
  };
  Column.prototype.isPinnedLeft = function () {
    return this.pinned === Constants.PINNED_LEFT;
  };
  Column.prototype.isPinnedRight = function () {
    return this.pinned === Constants.PINNED_RIGHT;
  };
  Column.prototype.getPinned = function () {
    return this.pinned;
  };
  Column.prototype.setVisible = function (visible, source) {
    if (source === void 0) {
      source = "api";
    }
    var newValue = visible === true;
    if (this.visible !== newValue) {
      this.visible = newValue;
      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_VISIBLE_CHANGED, source));
    }
  };
  Column.prototype.isVisible = function () {
    return this.visible;
  };
  Column.prototype.getColDef = function () {
    return this.colDef;
  };
  Column.prototype.getColumnGroupShow = function () {
    return this.colDef.columnGroupShow;
  };
  Column.prototype.getColId = function () {
    return this.colId;
  };
  Column.prototype.getId = function () {
    return this.getColId();
  };
  Column.prototype.getDefinition = function () {
    return this.colDef;
  };
  Column.prototype.getActualWidth = function () {
    return this.actualWidth;
  };
  Column.prototype.createBaseColDefParams = function (rowNode) {
    var params = {
      node: rowNode,
      data: rowNode.data,
      colDef: this.colDef,
      column: this,
      api: this.gridOptionsWrapper.getApi(),
      columnApi: this.gridOptionsWrapper.getColumnApi(),
      context: this.gridOptionsWrapper.getContext()
    };
    return params;
  };
  Column.prototype.getColSpan = function (rowNode) {
    if (missing(this.colDef.colSpan)) {
      return 1;
    }
    var params = this.createBaseColDefParams(rowNode);
    var colSpan = this.colDef.colSpan(params);
    // colSpan must be number equal to or greater than 1
    return Math.max(colSpan, 1);
  };
  Column.prototype.getRowSpan = function (rowNode) {
    if (missing(this.colDef.rowSpan)) {
      return 1;
    }
    var params = this.createBaseColDefParams(rowNode);
    var rowSpan = this.colDef.rowSpan(params);
    // rowSpan must be number equal to or greater than 1
    return Math.max(rowSpan, 1);
  };
  Column.prototype.setActualWidth = function (actualWidth, source, silent) {
    if (source === void 0) {
      source = "api";
    }
    if (silent === void 0) {
      silent = false;
    }
    if (this.minWidth != null) {
      actualWidth = Math.max(actualWidth, this.minWidth);
    }
    if (this.maxWidth != null) {
      actualWidth = Math.min(actualWidth, this.maxWidth);
    }
    if (this.actualWidth !== actualWidth) {
      // disable flex for this column if it was manually resized.
      this.actualWidth = actualWidth;
      if (this.flex && source !== 'flex' && source !== 'gridInitializing') {
        this.flex = null;
      }
      if (!silent) {
        this.fireColumnWidthChangedEvent(source);
      }
    }
  };
  Column.prototype.fireColumnWidthChangedEvent = function (source) {
    this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_WIDTH_CHANGED, source));
  };
  Column.prototype.isGreaterThanMax = function (width) {
    if (this.maxWidth != null) {
      return width > this.maxWidth;
    }
    return false;
  };
  Column.prototype.getMinWidth = function () {
    return this.minWidth;
  };
  Column.prototype.getMaxWidth = function () {
    return this.maxWidth;
  };
  Column.prototype.getFlex = function () {
    return this.flex || 0;
  };
  // this method should only be used by the columnController to
  // change flex when required by the setColumnState method.
  Column.prototype.setFlex = function (flex) {
    if (this.flex !== flex) {
      this.flex = flex;
    }
  };
  Column.prototype.setMinimum = function (source) {
    if (source === void 0) {
      source = "api";
    }
    if (exists(this.minWidth)) {
      this.setActualWidth(this.minWidth, source);
    }
  };
  Column.prototype.setRowGroupActive = function (rowGroup, source) {
    if (source === void 0) {
      source = "api";
    }
    if (this.rowGroupActive !== rowGroup) {
      this.rowGroupActive = rowGroup;
      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_ROW_GROUP_CHANGED, source));
    }
  };
  Column.prototype.isRowGroupActive = function () {
    return this.rowGroupActive;
  };
  Column.prototype.setPivotActive = function (pivot, source) {
    if (source === void 0) {
      source = "api";
    }
    if (this.pivotActive !== pivot) {
      this.pivotActive = pivot;
      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_PIVOT_CHANGED, source));
    }
  };
  Column.prototype.isPivotActive = function () {
    return this.pivotActive;
  };
  Column.prototype.isAnyFunctionActive = function () {
    return this.isPivotActive() || this.isRowGroupActive() || this.isValueActive();
  };
  Column.prototype.isAnyFunctionAllowed = function () {
    return this.isAllowPivot() || this.isAllowRowGroup() || this.isAllowValue();
  };
  Column.prototype.setValueActive = function (value, source) {
    if (source === void 0) {
      source = "api";
    }
    if (this.aggregationActive !== value) {
      this.aggregationActive = value;
      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_VALUE_CHANGED, source));
    }
  };
  Column.prototype.isValueActive = function () {
    return this.aggregationActive;
  };
  Column.prototype.isAllowPivot = function () {
    return this.colDef.enablePivot === true;
  };
  Column.prototype.isAllowValue = function () {
    return this.colDef.enableValue === true;
  };
  Column.prototype.isAllowRowGroup = function () {
    return this.colDef.enableRowGroup === true;
  };
  Column.prototype.getMenuTabs = function (defaultValues) {
    var menuTabs = this.getColDef().menuTabs;
    if (menuTabs == null) {
      menuTabs = defaultValues;
    }
    return menuTabs;
  };
  // this used to be needed, as previous version of ag-grid had lockPosition as column state,
  // so couldn't depend on colDef version.
  Column.prototype.isLockPosition = function () {
    console.warn('AG Grid: since v21, col.isLockPosition() should not be used, please use col.getColDef().lockPosition instead.');
    return this.colDef ? !!this.colDef.lockPosition : false;
  };
  // this used to be needed, as previous version of ag-grid had lockVisible as column state,
  // so couldn't depend on colDef version.
  Column.prototype.isLockVisible = function () {
    console.warn('AG Grid: since v21, col.isLockVisible() should not be used, please use col.getColDef().lockVisible instead.');
    return this.colDef ? !!this.colDef.lockVisible : false;
  };
  // this used to be needed, as previous version of ag-grid had lockPinned as column state,
  // so couldn't depend on colDef version.
  Column.prototype.isLockPinned = function () {
    console.warn('AG Grid: since v21, col.isLockPinned() should not be used, please use col.getColDef().lockPinned instead.');
    return this.colDef ? !!this.colDef.lockPinned : false;
  };
  // + renderedHeaderCell - for making header cell transparent when moving
  Column.EVENT_MOVING_CHANGED = 'movingChanged';
  // + renderedCell - changing left position
  Column.EVENT_LEFT_CHANGED = 'leftChanged';
  // + renderedCell - changing width
  Column.EVENT_WIDTH_CHANGED = 'widthChanged';
  // + renderedCell - for changing pinned classes
  Column.EVENT_LAST_LEFT_PINNED_CHANGED = 'lastLeftPinnedChanged';
  Column.EVENT_FIRST_RIGHT_PINNED_CHANGED = 'firstRightPinnedChanged';
  // + renderedColumn - for changing visibility icon
  Column.EVENT_VISIBLE_CHANGED = 'visibleChanged';
  // + every time the filter changes, used in the floating filters
  Column.EVENT_FILTER_CHANGED = 'filterChanged';
  // + renderedHeaderCell - marks the header with filter icon
  Column.EVENT_FILTER_ACTIVE_CHANGED = 'filterActiveChanged';
  // + renderedHeaderCell - marks the header with sort icon
  Column.EVENT_SORT_CHANGED = 'sortChanged';
  Column.EVENT_MENU_VISIBLE_CHANGED = 'menuVisibleChanged';
  // + toolpanel, for gui updates
  Column.EVENT_ROW_GROUP_CHANGED = 'columnRowGroupChanged';
  // + toolpanel, for gui updates
  Column.EVENT_PIVOT_CHANGED = 'columnPivotChanged';
  // + toolpanel, for gui updates
  Column.EVENT_VALUE_CHANGED = 'columnValueChanged';
  __decorate$1([Autowired('gridOptionsWrapper')], Column.prototype, "gridOptionsWrapper", void 0);
  __decorate$1([Autowired('columnUtils')], Column.prototype, "columnUtils", void 0);
  __decorate$1([Autowired('columnApi')], Column.prototype, "columnApi", void 0);
  __decorate$1([Autowired('gridApi')], Column.prototype, "gridApi", void 0);
  __decorate$1([Autowired('context')], Column.prototype, "context", void 0);
  __decorate$1([PostConstruct], Column.prototype, "initialise", null);
  return Column;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __decorate$2 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ColumnGroup = /** @class */function () {
  function ColumnGroup(originalColumnGroup, groupId, instanceId, pinned) {
    // depends on the open/closed state of the group, only displaying columns are stored here
    this.displayedChildren = [];
    this.localEventService = new EventService();
    this.groupId = groupId;
    this.instanceId = instanceId;
    this.originalColumnGroup = originalColumnGroup;
    this.pinned = pinned;
  }
  // this is static, a it is used outside of this class
  ColumnGroup.createUniqueId = function (groupId, instanceId) {
    return groupId + '_' + instanceId;
  };
  // as the user is adding and removing columns, the groups are recalculated.
  // this reset clears out all children, ready for children to be added again
  ColumnGroup.prototype.reset = function () {
    this.parent = null;
    this.children = null;
    this.displayedChildren = null;
  };
  ColumnGroup.prototype.getParent = function () {
    return this.parent;
  };
  ColumnGroup.prototype.setParent = function (parent) {
    this.parent = parent;
  };
  ColumnGroup.prototype.getUniqueId = function () {
    return ColumnGroup.createUniqueId(this.groupId, this.instanceId);
  };
  ColumnGroup.prototype.isEmptyGroup = function () {
    return this.displayedChildren.length === 0;
  };
  ColumnGroup.prototype.isMoving = function () {
    var allLeafColumns = this.getOriginalColumnGroup().getLeafColumns();
    if (!allLeafColumns || allLeafColumns.length === 0) {
      return false;
    }
    return allLeafColumns.every(function (col) {
      return col.isMoving();
    });
  };
  ColumnGroup.prototype.checkLeft = function () {
    // first get all children to setLeft, as it impacts our decision below
    this.displayedChildren.forEach(function (child) {
      if (child instanceof ColumnGroup) {
        child.checkLeft();
      }
    });
    // set our left based on first displayed column
    if (this.displayedChildren.length > 0) {
      if (this.gridOptionsWrapper.isEnableRtl()) {
        var lastChild = last(this.displayedChildren);
        var lastChildLeft = lastChild.getLeft();
        this.setLeft(lastChildLeft);
      } else {
        var firstChildLeft = this.displayedChildren[0].getLeft();
        this.setLeft(firstChildLeft);
      }
    } else {
      // this should never happen, as if we have no displayed columns, then
      // this groups should not even exist.
      this.setLeft(null);
    }
  };
  ColumnGroup.prototype.getLeft = function () {
    return this.left;
  };
  ColumnGroup.prototype.getOldLeft = function () {
    return this.oldLeft;
  };
  ColumnGroup.prototype.setLeft = function (left) {
    this.oldLeft = left;
    if (this.left !== left) {
      this.left = left;
      this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_LEFT_CHANGED));
    }
  };
  ColumnGroup.prototype.getPinned = function () {
    return this.pinned;
  };
  ColumnGroup.prototype.createAgEvent = function (type) {
    return {
      type: type
    };
  };
  ColumnGroup.prototype.addEventListener = function (eventType, listener) {
    this.localEventService.addEventListener(eventType, listener);
  };
  ColumnGroup.prototype.removeEventListener = function (eventType, listener) {
    this.localEventService.removeEventListener(eventType, listener);
  };
  ColumnGroup.prototype.getGroupId = function () {
    return this.groupId;
  };
  ColumnGroup.prototype.getInstanceId = function () {
    return this.instanceId;
  };
  ColumnGroup.prototype.isChildInThisGroupDeepSearch = function (wantedChild) {
    var result = false;
    this.children.forEach(function (foundChild) {
      if (wantedChild === foundChild) {
        result = true;
      }
      if (foundChild instanceof ColumnGroup) {
        if (foundChild.isChildInThisGroupDeepSearch(wantedChild)) {
          result = true;
        }
      }
    });
    return result;
  };
  ColumnGroup.prototype.getActualWidth = function () {
    var groupActualWidth = 0;
    if (this.displayedChildren) {
      this.displayedChildren.forEach(function (child) {
        groupActualWidth += child.getActualWidth();
      });
    }
    return groupActualWidth;
  };
  ColumnGroup.prototype.isResizable = function () {
    if (!this.displayedChildren) {
      return false;
    }
    // if at least one child is resizable, then the group is resizable
    var result = false;
    this.displayedChildren.forEach(function (child) {
      if (child.isResizable()) {
        result = true;
      }
    });
    return result;
  };
  ColumnGroup.prototype.getMinWidth = function () {
    var result = 0;
    this.displayedChildren.forEach(function (groupChild) {
      result += groupChild.getMinWidth() || 0;
    });
    return result;
  };
  ColumnGroup.prototype.addChild = function (child) {
    if (!this.children) {
      this.children = [];
    }
    this.children.push(child);
  };
  ColumnGroup.prototype.getDisplayedChildren = function () {
    return this.displayedChildren;
  };
  ColumnGroup.prototype.getLeafColumns = function () {
    var result = [];
    this.addLeafColumns(result);
    return result;
  };
  ColumnGroup.prototype.getDisplayedLeafColumns = function () {
    var result = [];
    this.addDisplayedLeafColumns(result);
    return result;
  };
  // why two methods here doing the same thing?
  ColumnGroup.prototype.getDefinition = function () {
    return this.originalColumnGroup.getColGroupDef();
  };
  ColumnGroup.prototype.getColGroupDef = function () {
    return this.originalColumnGroup.getColGroupDef();
  };
  ColumnGroup.prototype.isPadding = function () {
    return this.originalColumnGroup.isPadding();
  };
  ColumnGroup.prototype.isExpandable = function () {
    return this.originalColumnGroup.isExpandable();
  };
  ColumnGroup.prototype.isExpanded = function () {
    return this.originalColumnGroup.isExpanded();
  };
  ColumnGroup.prototype.setExpanded = function (expanded) {
    this.originalColumnGroup.setExpanded(expanded);
  };
  ColumnGroup.prototype.addDisplayedLeafColumns = function (leafColumns) {
    this.displayedChildren.forEach(function (child) {
      if (child instanceof Column) {
        leafColumns.push(child);
      } else if (child instanceof ColumnGroup) {
        child.addDisplayedLeafColumns(leafColumns);
      }
    });
  };
  ColumnGroup.prototype.addLeafColumns = function (leafColumns) {
    this.children.forEach(function (child) {
      if (child instanceof Column) {
        leafColumns.push(child);
      } else if (child instanceof ColumnGroup) {
        child.addLeafColumns(leafColumns);
      }
    });
  };
  ColumnGroup.prototype.getChildren = function () {
    return this.children;
  };
  ColumnGroup.prototype.getColumnGroupShow = function () {
    return this.originalColumnGroup.getColumnGroupShow();
  };
  ColumnGroup.prototype.getOriginalColumnGroup = function () {
    return this.originalColumnGroup;
  };
  ColumnGroup.prototype.getPaddingLevel = function () {
    var parent = this.getParent();
    if (!this.isPadding() || !parent || !parent.isPadding()) {
      return 0;
    }
    return 1 + parent.getPaddingLevel();
  };
  ColumnGroup.prototype.calculateDisplayedColumns = function () {
    var _this = this;
    // clear out last time we calculated
    this.displayedChildren = [];
    // find the column group that is controlling expandable. this is relevant when we have padding (empty)
    // groups, where the expandable is actually the first parent that is not a padding group.
    var parentWithExpansion = this;
    while (parentWithExpansion != null && parentWithExpansion.isPadding()) {
      parentWithExpansion = parentWithExpansion.getParent();
    }
    var isExpandable = parentWithExpansion ? parentWithExpansion.originalColumnGroup.isExpandable() : false;
    // it not expandable, everything is visible
    if (!isExpandable) {
      this.displayedChildren = this.children;
      this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED));
      return;
    }
    // Add cols based on columnGroupShow
    // Note - the below also adds padding groups, these are always added because they never have
    // colDef.columnGroupShow set.
    this.children.forEach(function (child) {
      // never add empty groups
      var emptyGroup = child instanceof ColumnGroup && (!child.displayedChildren || !child.displayedChildren.length);
      if (emptyGroup) {
        return;
      }
      var headerGroupShow = child.getColumnGroupShow();
      switch (headerGroupShow) {
        case ColumnGroup.HEADER_GROUP_SHOW_OPEN:
          // when set to open, only show col if group is open
          if (parentWithExpansion.originalColumnGroup.isExpanded()) {
            _this.displayedChildren.push(child);
          }
          break;
        case ColumnGroup.HEADER_GROUP_SHOW_CLOSED:
          // when set to open, only show col if group is open
          if (!parentWithExpansion.originalColumnGroup.isExpanded()) {
            _this.displayedChildren.push(child);
          }
          break;
        default:
          _this.displayedChildren.push(child);
          break;
      }
    });
    this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED));
  };
  ColumnGroup.HEADER_GROUP_SHOW_OPEN = 'open';
  ColumnGroup.HEADER_GROUP_SHOW_CLOSED = 'closed';
  ColumnGroup.EVENT_LEFT_CHANGED = 'leftChanged';
  ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED = 'displayedChildrenChanged';
  __decorate$2([Autowired('gridOptionsWrapper')], ColumnGroup.prototype, "gridOptionsWrapper", void 0);
  return ColumnGroup;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var OriginalColumnGroup = /** @class */function () {
  function OriginalColumnGroup(colGroupDef, groupId, padding, level) {
    this.localEventService = new EventService();
    this.expandable = false;
    this.colGroupDef = colGroupDef;
    this.groupId = groupId;
    this.expanded = !!colGroupDef && !!colGroupDef.openByDefault;
    this.padding = padding;
    this.level = level;
  }
  OriginalColumnGroup.prototype.setOriginalParent = function (originalParent) {
    this.originalParent = originalParent;
  };
  OriginalColumnGroup.prototype.getOriginalParent = function () {
    return this.originalParent;
  };
  OriginalColumnGroup.prototype.getLevel = function () {
    return this.level;
  };
  OriginalColumnGroup.prototype.isVisible = function () {
    // return true if at least one child is visible
    if (this.children) {
      return this.children.some(function (child) {
        return child.isVisible();
      });
    }
    return false;
  };
  OriginalColumnGroup.prototype.isPadding = function () {
    return this.padding;
  };
  OriginalColumnGroup.prototype.setExpanded = function (expanded) {
    this.expanded = expanded === undefined ? false : expanded;
    var event = {
      type: OriginalColumnGroup.EVENT_EXPANDED_CHANGED
    };
    this.localEventService.dispatchEvent(event);
  };
  OriginalColumnGroup.prototype.isExpandable = function () {
    return this.expandable;
  };
  OriginalColumnGroup.prototype.isExpanded = function () {
    return this.expanded;
  };
  OriginalColumnGroup.prototype.getGroupId = function () {
    return this.groupId;
  };
  OriginalColumnGroup.prototype.getId = function () {
    return this.getGroupId();
  };
  OriginalColumnGroup.prototype.setChildren = function (children) {
    this.children = children;
  };
  OriginalColumnGroup.prototype.getChildren = function () {
    return this.children;
  };
  OriginalColumnGroup.prototype.getColGroupDef = function () {
    return this.colGroupDef;
  };
  OriginalColumnGroup.prototype.getLeafColumns = function () {
    var result = [];
    this.addLeafColumns(result);
    return result;
  };
  OriginalColumnGroup.prototype.addLeafColumns = function (leafColumns) {
    if (!this.children) {
      return;
    }
    this.children.forEach(function (child) {
      if (child instanceof Column) {
        leafColumns.push(child);
      } else if (child instanceof OriginalColumnGroup) {
        child.addLeafColumns(leafColumns);
      }
    });
  };
  OriginalColumnGroup.prototype.getColumnGroupShow = function () {
    var colGroupDef = this.colGroupDef;
    if (!colGroupDef) {
      return;
    }
    return colGroupDef.columnGroupShow;
  };
  // need to check that this group has at least one col showing when both expanded and contracted.
  // if not, then we don't allow expanding and contracting on this group
  OriginalColumnGroup.prototype.setupExpandable = function () {
    var _this = this;
    this.setExpandable();
    // note - we should be removing this event listener
    this.getLeafColumns().forEach(function (col) {
      return col.addEventListener(Column.EVENT_VISIBLE_CHANGED, _this.onColumnVisibilityChanged.bind(_this));
    });
  };
  OriginalColumnGroup.prototype.setExpandable = function () {
    if (this.isPadding()) {
      return;
    }
    // want to make sure the group doesn't disappear when it's open
    var atLeastOneShowingWhenOpen = false;
    // want to make sure the group doesn't disappear when it's closed
    var atLeastOneShowingWhenClosed = false;
    // want to make sure the group has something to show / hide
    var atLeastOneChangeable = false;
    var children = this.findChildrenRemovingPadding();
    for (var i = 0, j = children.length; i < j; i++) {
      var abstractColumn = children[i];
      if (!abstractColumn.isVisible()) {
        continue;
      }
      // if the abstractColumn is a grid generated group, there will be no colDef
      var headerGroupShow = abstractColumn.getColumnGroupShow();
      if (headerGroupShow === ColumnGroup.HEADER_GROUP_SHOW_OPEN) {
        atLeastOneShowingWhenOpen = true;
        atLeastOneChangeable = true;
      } else if (headerGroupShow === ColumnGroup.HEADER_GROUP_SHOW_CLOSED) {
        atLeastOneShowingWhenClosed = true;
        atLeastOneChangeable = true;
      } else {
        atLeastOneShowingWhenOpen = true;
        atLeastOneShowingWhenClosed = true;
      }
    }
    var expandable = atLeastOneShowingWhenOpen && atLeastOneShowingWhenClosed && atLeastOneChangeable;
    if (this.expandable !== expandable) {
      this.expandable = expandable;
      var event_1 = {
        type: OriginalColumnGroup.EVENT_EXPANDABLE_CHANGED
      };
      this.localEventService.dispatchEvent(event_1);
    }
  };
  OriginalColumnGroup.prototype.findChildrenRemovingPadding = function () {
    var res = [];
    var process = function (items) {
      items.forEach(function (item) {
        // if padding, we add this children instead of the padding
        var skipBecausePadding = item instanceof OriginalColumnGroup && item.isPadding();
        if (skipBecausePadding) {
          process(item.children);
        } else {
          res.push(item);
        }
      });
    };
    process(this.children);
    return res;
  };
  OriginalColumnGroup.prototype.onColumnVisibilityChanged = function () {
    this.setExpandable();
  };
  OriginalColumnGroup.prototype.addEventListener = function (eventType, listener) {
    this.localEventService.addEventListener(eventType, listener);
  };
  OriginalColumnGroup.prototype.removeEventListener = function (eventType, listener) {
    this.localEventService.removeEventListener(eventType, listener);
  };
  OriginalColumnGroup.EVENT_EXPANDED_CHANGED = 'expandedChanged';
  OriginalColumnGroup.EVENT_EXPANDABLE_CHANGED = 'expandableChanged';
  return OriginalColumnGroup;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var DefaultColumnTypes = {
  numericColumn: {
    headerClass: 'ag-right-aligned-header',
    cellClass: 'ag-right-aligned-cell'
  },
  rightAligned: {
    headerClass: 'ag-right-aligned-header',
    cellClass: 'ag-right-aligned-cell'
  }
};

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var AG_GRID_STOP_PROPAGATION = '__ag_Grid_Stop_Propagation';
var PASSIVE_EVENTS = ['touchstart', 'touchend', 'touchmove', 'touchcancel'];
var supports = {};
/**
 * a user once raised an issue - they said that when you opened a popup (eg context menu)
 * and then clicked on a selection checkbox, the popup wasn't closed. this is because the
 * popup listens for clicks on the body, however ag-grid WAS stopping propagation on the
 * checkbox clicks (so the rows didn't pick them up as row selection selection clicks).
 * to get around this, we have a pattern to stop propagation for the purposes of AG Grid,
 * but we still let the event pass back to the body.
 * @param {Event} event
 */
function stopPropagationForAgGrid(event) {
  event[AG_GRID_STOP_PROPAGATION] = true;
}
function isStopPropagationForAgGrid(event) {
  return event[AG_GRID_STOP_PROPAGATION] === true;
}
var isEventSupported = function () {
  var tags = {
    select: 'input',
    change: 'input',
    submit: 'form',
    reset: 'form',
    error: 'img',
    load: 'img',
    abort: 'img'
  };
  var eventChecker = function (eventName) {
    if (typeof supports[eventName] === 'boolean') {
      return supports[eventName];
    }
    var el = document.createElement(tags[eventName] || 'div');
    eventName = 'on' + eventName;
    var isSupported = (eventName in el);
    if (!isSupported) {
      el.setAttribute(eventName, 'return;');
      isSupported = typeof el[eventName] == 'function';
    }
    return supports[eventName] = isSupported;
  };
  return eventChecker;
}();
function getComponentForEvent(gridOptionsWrapper, event, type) {
  var sourceElement = getTarget(event);
  while (sourceElement) {
    var renderedComp = gridOptionsWrapper.getDomData(sourceElement, type);
    if (renderedComp) {
      return renderedComp;
    }
    sourceElement = sourceElement.parentElement;
  }
  return null;
}
/**
 * @deprecated
 * Adds all type of change listeners to an element, intended to be a text field
 * @param {HTMLElement} element
 * @param {EventListener} listener
 */
function addChangeListener(element, listener) {
  element.addEventListener('changed', listener);
  element.addEventListener('paste', listener);
  element.addEventListener('input', listener);
  // IE doesn't fire changed for special keys (eg delete, backspace), so need to
  // listen for this further ones
  element.addEventListener('keydown', listener);
  element.addEventListener('keyup', listener);
}
/**
 * srcElement is only available in IE. In all other browsers it is target
 * http://stackoverflow.com/questions/5301643/how-can-i-make-event-srcelement-work-in-firefox-and-what-does-it-mean
 * @param {Event} event
 * @returns {Element}
 */
function getTarget(event) {
  var eventNoType = event;
  return eventNoType.target || eventNoType.srcElement;
}
function isElementInEventPath(element, event) {
  if (!event || !element) {
    return false;
  }
  return getEventPath(event).indexOf(element) >= 0;
}
function createEventPath(event) {
  var res = [];
  var pointer = getTarget(event);
  while (pointer) {
    res.push(pointer);
    pointer = pointer.parentElement;
  }
  return res;
}
/**
 * firefox doesn't have event.path set, or any alternative to it, so we hack
 * it in. this is needed as it's to late to work out the path when the item is
 * removed from the dom. used by MouseEventService, where it works out if a click
 * was from the current grid, or a detail grid (master / detail).
 * @param {Event} event
 */
function addAgGridEventPath(event) {
  event.__agGridEventPath = getEventPath(event);
}
/**
 * Gets the path for an Event.
 * https://stackoverflow.com/questions/39245488/event-path-undefined-with-firefox-and-vue-js
 * https://developer.mozilla.org/en-US/docs/Web/API/Event
 * @param {Event} event
 * @returns {EventTarget[]}
 */
function getEventPath(event) {
  var eventNoType = event;
  if (eventNoType.deepPath) {
    // IE supports deep path
    return eventNoType.deepPath();
  }
  if (eventNoType.path) {
    // Chrome supports path
    return eventNoType.path;
  }
  if (eventNoType.composedPath) {
    // Firefox supports composePath
    return eventNoType.composedPath();
  }
  if (eventNoType.__agGridEventPath) {
    // Firefox supports composePath
    return eventNoType.__agGridEventPath;
  }
  // and finally, if none of the above worked,
  // we create the path ourselves
  return createEventPath(event);
}
function addSafePassiveEventListener(frameworkOverrides, eElement, event, listener) {
  var isPassive = includes(PASSIVE_EVENTS, event);
  var options = isPassive ? {
    passive: true
  } : undefined;
  // this check is here for certain scenarios where I believe the user must be destroying
  // the grid somehow but continuing for it to be used
  if (frameworkOverrides && frameworkOverrides.addEventListener) {
    frameworkOverrides.addEventListener(eElement, event, listener, options);
  }
}
var EventUtils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  stopPropagationForAgGrid: stopPropagationForAgGrid,
  isStopPropagationForAgGrid: isStopPropagationForAgGrid,
  isEventSupported: isEventSupported,
  getComponentForEvent: getComponentForEvent,
  addChangeListener: addChangeListener,
  getTarget: getTarget,
  isElementInEventPath: isElementInEventPath,
  createEventPath: createEventPath,
  addAgGridEventPath: addAgGridEventPath,
  getEventPath: getEventPath,
  addSafePassiveEventListener: addSafePassiveEventListener
});

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __decorate$3 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var BeanStub = /** @class */function () {
  function BeanStub() {
    var _this = this;
    this.destroyFunctions = [];
    this.destroyed = false;
    // for vue 3 - prevents Vue from trying to make this (and obviously any sub classes) from being reactive
    // prevents vue from creating proxies for created objects and prevents identity related issues
    this.__v_skip = true;
    this.getContext = function () {
      return _this.context;
    };
    this.isAlive = function () {
      return !_this.destroyed;
    };
  }
  // this was a test constructor niall built, when active, it prints after 5 seconds all beans/components that are
  // not destroyed. to use, create a new grid, then api.destroy() before 5 seconds. then anything that gets printed
  // points to a bean or component that was not properly disposed of.
  // constructor() {
  //     setTimeout(()=> {
  //         if (this.isAlive()) {
  //             let prototype: any = Object.getPrototypeOf(this);
  //             const constructor: any = prototype.constructor;
  //             const constructorString = constructor.toString();
  //             const beanName = constructorString.substring(9, constructorString.indexOf("("));
  //             console.log('is alive ' + beanName);
  //         }
  //     }, 5000);
  // }
  // CellComp and GridComp and override this because they get the FrameworkOverrides from the Beans bean
  BeanStub.prototype.getFrameworkOverrides = function () {
    return this.frameworkOverrides;
  };
  BeanStub.prototype.destroy = function () {
    // let prototype: any = Object.getPrototypeOf(this);
    // const constructor: any = prototype.constructor;
    // const constructorString = constructor.toString();
    // const beanName = constructorString.substring(9, constructorString.indexOf("("));
    this.destroyFunctions.forEach(function (func) {
      return func();
    });
    this.destroyFunctions.length = 0;
    this.destroyed = true;
    this.dispatchEvent({
      type: BeanStub.EVENT_DESTROYED
    });
  };
  BeanStub.prototype.addEventListener = function (eventType, listener) {
    if (!this.localEventService) {
      this.localEventService = new EventService();
    }
    this.localEventService.addEventListener(eventType, listener);
  };
  BeanStub.prototype.removeEventListener = function (eventType, listener) {
    if (this.localEventService) {
      this.localEventService.removeEventListener(eventType, listener);
    }
  };
  BeanStub.prototype.dispatchEventAsync = function (event) {
    var _this = this;
    window.setTimeout(function () {
      return _this.dispatchEvent(event);
    }, 0);
  };
  BeanStub.prototype.dispatchEvent = function (event) {
    if (this.localEventService) {
      this.localEventService.dispatchEvent(event);
    }
  };
  BeanStub.prototype.addManagedListener = function (object, event, listener) {
    var _this = this;
    if (this.destroyed) {
      return;
    }
    if (object instanceof HTMLElement) {
      addSafePassiveEventListener(this.getFrameworkOverrides(), object, event, listener);
    } else {
      object.addEventListener(event, listener);
    }
    var destroyFunc = function () {
      object.removeEventListener(event, listener);
      _this.destroyFunctions = _this.destroyFunctions.filter(function (fn) {
        return fn !== destroyFunc;
      });
      return null;
    };
    this.destroyFunctions.push(destroyFunc);
    return destroyFunc;
  };
  BeanStub.prototype.addDestroyFunc = function (func) {
    // if we are already destroyed, we execute the func now
    if (this.isAlive()) {
      this.destroyFunctions.push(func);
    } else {
      func();
    }
  };
  BeanStub.prototype.createManagedBean = function (bean, context) {
    var res = this.createBean(bean, context);
    this.addDestroyFunc(this.destroyBean.bind(this, bean, context));
    return res;
  };
  BeanStub.prototype.createBean = function (bean, context, afterPreCreateCallback) {
    return (context || this.getContext()).createBean(bean, afterPreCreateCallback);
  };
  BeanStub.prototype.destroyBean = function (bean, context) {
    return (context || this.getContext()).destroyBean(bean);
  };
  BeanStub.prototype.destroyBeans = function (beans, context) {
    var _this = this;
    if (beans) {
      forEach(beans, function (bean) {
        return _this.destroyBean(bean, context);
      });
    }
    return [];
  };
  BeanStub.EVENT_DESTROYED = 'destroyed';
  __decorate$3([Autowired('frameworkOverrides')], BeanStub.prototype, "frameworkOverrides", void 0);
  __decorate$3([Autowired('context')], BeanStub.prototype, "context", void 0);
  __decorate$3([Autowired('eventService')], BeanStub.prototype, "eventService", void 0);
  __decorate$3([Autowired('gridOptionsWrapper')], BeanStub.prototype, "gridOptionsWrapper", void 0);
  __decorate$3([PreDestroy], BeanStub.prototype, "destroy", null);
  return BeanStub;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$4 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param$1 =  false || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};
// takes ColDefs and ColGroupDefs and turns them into Columns and OriginalGroups
var ColumnFactory = /** @class */function (_super) {
  __extends(ColumnFactory, _super);
  function ColumnFactory() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ColumnFactory.prototype.setBeans = function (loggerFactory) {
    this.logger = loggerFactory.create('ColumnFactory');
  };
  ColumnFactory.prototype.createColumnTree = function (defs, primaryColumns, existingTree) {
    // column key creator dishes out unique column id's in a deterministic way,
    // so if we have two grids (that could be master/slave) with same column definitions,
    // then this ensures the two grids use identical id's.
    var columnKeyCreator = new ColumnKeyCreator();
    var _a = this.extractExistingTreeData(existingTree),
      existingCols = _a.existingCols,
      existingGroups = _a.existingGroups,
      existingColKeys = _a.existingColKeys;
    columnKeyCreator.addExistingKeys(existingColKeys);
    // create am unbalanced tree that maps the provided definitions
    var unbalancedTree = this.recursivelyCreateColumns(defs, 0, primaryColumns, existingCols, columnKeyCreator, existingGroups);
    var treeDept = this.findMaxDept(unbalancedTree, 0);
    this.logger.log('Number of levels for grouped columns is ' + treeDept);
    var columnTree = this.balanceColumnTree(unbalancedTree, 0, treeDept, columnKeyCreator);
    var deptFirstCallback = function (child, parent) {
      if (child instanceof OriginalColumnGroup) {
        child.setupExpandable();
      }
      // we set the original parents at the end, rather than when we go along, as balancing the tree
      // adds extra levels into the tree. so we can only set parents when balancing is done.
      child.setOriginalParent(parent);
    };
    this.columnUtils.depthFirstOriginalTreeSearch(null, columnTree, deptFirstCallback);
    return {
      columnTree: columnTree,
      treeDept: treeDept
    };
  };
  ColumnFactory.prototype.extractExistingTreeData = function (existingTree) {
    var existingCols = [];
    var existingGroups = [];
    var existingColKeys = [];
    if (existingTree) {
      this.columnUtils.depthFirstOriginalTreeSearch(null, existingTree, function (item) {
        if (item instanceof OriginalColumnGroup) {
          var group = item;
          existingGroups.push(group);
        } else {
          var col = item;
          existingColKeys.push(col.getId());
          existingCols.push(col);
        }
      });
    }
    return {
      existingCols: existingCols,
      existingGroups: existingGroups,
      existingColKeys: existingColKeys
    };
  };
  ColumnFactory.prototype.createForAutoGroups = function (autoGroupCols, gridBalancedTree) {
    var _this = this;
    var autoColBalancedTree = [];
    autoGroupCols.forEach(function (col) {
      var fakeTreeItem = _this.createAutoGroupTreeItem(gridBalancedTree, col);
      autoColBalancedTree.push(fakeTreeItem);
    });
    return autoColBalancedTree;
  };
  ColumnFactory.prototype.createAutoGroupTreeItem = function (balancedColumnTree, column) {
    var dept = this.findDepth(balancedColumnTree);
    // at the end, this will be the top of the tree item.
    var nextChild = column;
    for (var i = dept - 1; i >= 0; i--) {
      var autoGroup = new OriginalColumnGroup(null, "FAKE_PATH_" + column.getId() + "}_" + i, true, i);
      this.context.createBean(autoGroup);
      autoGroup.setChildren([nextChild]);
      nextChild.setOriginalParent(autoGroup);
      nextChild = autoGroup;
    }
    // at this point, the nextChild is the top most item in the tree
    return nextChild;
  };
  ColumnFactory.prototype.findDepth = function (balancedColumnTree) {
    var dept = 0;
    var pointer = balancedColumnTree;
    while (pointer && pointer[0] && pointer[0] instanceof OriginalColumnGroup) {
      dept++;
      pointer = pointer[0].getChildren();
    }
    return dept;
  };
  ColumnFactory.prototype.balanceColumnTree = function (unbalancedTree, currentDept, columnDept, columnKeyCreator) {
    var result = [];
    // go through each child, for groups, recurse a level deeper,
    // for columns we need to pad
    for (var i = 0; i < unbalancedTree.length; i++) {
      var child = unbalancedTree[i];
      if (child instanceof OriginalColumnGroup) {
        // child is a group, all we do is go to the next level of recursion
        var originalGroup = child;
        var newChildren = this.balanceColumnTree(originalGroup.getChildren(), currentDept + 1, columnDept, columnKeyCreator);
        originalGroup.setChildren(newChildren);
        result.push(originalGroup);
      } else {
        // child is a column - so here we add in the padded column groups if needed
        var firstPaddedGroup = void 0;
        var currentPaddedGroup = void 0;
        // this for loop will NOT run any loops if no padded column groups are needed
        for (var j = columnDept - 1; j >= currentDept; j--) {
          var newColId = columnKeyCreator.getUniqueKey(null, null);
          var colGroupDefMerged = this.createMergedColGroupDef(null);
          var paddedGroup = new OriginalColumnGroup(colGroupDefMerged, newColId, true, currentDept);
          this.context.createBean(paddedGroup);
          if (currentPaddedGroup) {
            currentPaddedGroup.setChildren([paddedGroup]);
          }
          currentPaddedGroup = paddedGroup;
          if (!firstPaddedGroup) {
            firstPaddedGroup = currentPaddedGroup;
          }
        }
        // likewise this if statement will not run if no padded groups
        if (firstPaddedGroup && currentPaddedGroup) {
          result.push(firstPaddedGroup);
          var hasGroups = unbalancedTree.some(function (leaf) {
            return leaf instanceof OriginalColumnGroup;
          });
          if (hasGroups) {
            currentPaddedGroup.setChildren([child]);
            continue;
          } else {
            currentPaddedGroup.setChildren(unbalancedTree);
            break;
          }
        }
        result.push(child);
      }
    }
    return result;
  };
  ColumnFactory.prototype.findMaxDept = function (treeChildren, dept) {
    var maxDeptThisLevel = dept;
    for (var i = 0; i < treeChildren.length; i++) {
      var abstractColumn = treeChildren[i];
      if (abstractColumn instanceof OriginalColumnGroup) {
        var originalGroup = abstractColumn;
        var newDept = this.findMaxDept(originalGroup.getChildren(), dept + 1);
        if (maxDeptThisLevel < newDept) {
          maxDeptThisLevel = newDept;
        }
      }
    }
    return maxDeptThisLevel;
  };
  ColumnFactory.prototype.recursivelyCreateColumns = function (defs, level, primaryColumns, existingColsCopy, columnKeyCreator, existingGroups) {
    var _this = this;
    var result = [];
    if (!defs) {
      return result;
    }
    defs.forEach(function (def) {
      var newGroupOrColumn;
      if (_this.isColumnGroup(def)) {
        newGroupOrColumn = _this.createColumnGroup(primaryColumns, def, level, existingColsCopy, columnKeyCreator, existingGroups);
      } else {
        newGroupOrColumn = _this.createColumn(primaryColumns, def, existingColsCopy, columnKeyCreator);
      }
      result.push(newGroupOrColumn);
    });
    return result;
  };
  ColumnFactory.prototype.createColumnGroup = function (primaryColumns, colGroupDef, level, existingColumns, columnKeyCreator, existingGroups) {
    var colGroupDefMerged = this.createMergedColGroupDef(colGroupDef);
    var groupId = columnKeyCreator.getUniqueKey(colGroupDefMerged.groupId || null, null);
    var originalGroup = new OriginalColumnGroup(colGroupDefMerged, groupId, false, level);
    this.context.createBean(originalGroup);
    var existingGroup = this.findExistingGroup(colGroupDef, existingGroups);
    if (existingGroup && existingGroup.isExpanded()) {
      originalGroup.setExpanded(true);
    }
    var children = this.recursivelyCreateColumns(colGroupDefMerged.children, level + 1, primaryColumns, existingColumns, columnKeyCreator, existingGroups);
    originalGroup.setChildren(children);
    return originalGroup;
  };
  ColumnFactory.prototype.createMergedColGroupDef = function (colGroupDef) {
    var colGroupDefMerged = {};
    assign(colGroupDefMerged, this.gridOptionsWrapper.getDefaultColGroupDef());
    assign(colGroupDefMerged, colGroupDef);
    this.checkForDeprecatedItems(colGroupDefMerged);
    return colGroupDefMerged;
  };
  ColumnFactory.prototype.createColumn = function (primaryColumns, colDef, existingColsCopy, columnKeyCreator) {
    var colDefMerged = this.mergeColDefs(colDef);
    this.checkForDeprecatedItems(colDefMerged);
    // see if column already exists
    var column = this.findExistingColumn(colDef, existingColsCopy);
    if (!column) {
      // no existing column, need to create one
      var colId = columnKeyCreator.getUniqueKey(colDefMerged.colId, colDefMerged.field);
      column = new Column(colDefMerged, colDef, colId, primaryColumns);
      this.context.createBean(column);
    } else {
      column.setColDef(colDefMerged, colDef);
      this.applyColumnState(column, colDefMerged);
    }
    return column;
  };
  ColumnFactory.prototype.applyColumnState = function (column, colDef) {
    // flex
    var flex = attrToNumber(colDef.flex);
    if (flex !== undefined) {
      column.setFlex(flex);
    }
    // width - we only set width if column is not flexing
    var noFlexThisCol = column.getFlex() <= 0;
    if (noFlexThisCol) {
      // both null and undefined means we skip, as it's not possible to 'clear' width (a column must have a width)
      var width = attrToNumber(colDef.width);
      if (width != null) {
        column.setActualWidth(width);
      } else {
        // otherwise set the width again, in case min or max width has changed,
        // and width needs to be adjusted.
        var widthBeforeUpdate = column.getActualWidth();
        column.setActualWidth(widthBeforeUpdate);
      }
    }
    // sort - anything but undefined will set sort, thus null or empty string will clear the sort
    if (colDef.sort !== undefined) {
      if (colDef.sort == Constants.SORT_ASC || colDef.sort == Constants.SORT_DESC) {
        column.setSort(colDef.sort);
      } else {
        column.setSort(undefined);
      }
    }
    // sorted at - anything but undefined, thus null will clear the sortIndex
    var sortIndex = attrToNumber(colDef.sortIndex);
    if (sortIndex !== undefined) {
      column.setSortIndex(sortIndex);
    }
    // hide - anything but undefined, thus null will clear the hide
    var hide = attrToBoolean(colDef.hide);
    if (hide !== undefined) {
      column.setVisible(!hide);
    }
    // pinned - anything but undefined, thus null or empty string will remove pinned
    if (colDef.pinned !== undefined) {
      column.setPinned(colDef.pinned);
    }
  };
  ColumnFactory.prototype.findExistingColumn = function (newColDef, existingColsCopy) {
    var res = find(existingColsCopy, function (existingCol) {
      var existingColDef = existingCol.getUserProvidedColDef();
      if (!existingColDef) {
        return false;
      }
      var newHasId = newColDef.colId != null;
      var newHasField = newColDef.field != null;
      if (newHasId) {
        return existingCol.getId() === newColDef.colId;
      }
      if (newHasField) {
        return existingColDef.field === newColDef.field;
      }
      // if no id or field present, then try object equivalence.
      if (existingColDef === newColDef) {
        return true;
      }
      return false;
    });
    // make sure we remove, so if user provided duplicate id, then we don't have more than
    // one column instance for colDef with common id
    if (existingColsCopy && res) {
      removeFromArray(existingColsCopy, res);
    }
    return res;
  };
  ColumnFactory.prototype.findExistingGroup = function (newGroupDef, existingGroups) {
    var res = find(existingGroups, function (existingGroup) {
      var existingDef = existingGroup.getColGroupDef();
      if (!existingDef) {
        return false;
      }
      var newHasId = newGroupDef.groupId != null;
      if (newHasId) {
        return existingGroup.getId() === newGroupDef.groupId;
      }
      return false;
    });
    // make sure we remove, so if user provided duplicate id, then we don't have more than
    // one column instance for colDef with common id
    if (res) {
      removeFromArray(existingGroups, res);
    }
    return res;
  };
  ColumnFactory.prototype.mergeColDefs = function (colDef) {
    // start with empty merged definition
    var colDefMerged = {};
    // merge properties from default column definitions
    var defaultColDef = this.gridOptionsWrapper.getDefaultColDef();
    mergeDeep(colDefMerged, defaultColDef, true, true);
    // merge properties from column type properties
    var columnType = colDef.type;
    if (!columnType) {
      columnType = defaultColDef && defaultColDef.type;
    }
    // if type of both colDef and defaultColDef, then colDef gets preference
    if (columnType) {
      this.assignColumnTypes(columnType, colDefMerged);
    }
    // merge properties from column definitions
    mergeDeep(colDefMerged, colDef, true, true);
    return colDefMerged;
  };
  ColumnFactory.prototype.assignColumnTypes = function (type, colDefMerged) {
    var typeKeys = [];
    if (type instanceof Array) {
      var invalidArray = type.some(function (a) {
        return typeof a !== 'string';
      });
      if (invalidArray) {
        console.warn("ag-grid: if colDef.type is supplied an array it should be of type 'string[]'");
      } else {
        typeKeys = type;
      }
    } else if (typeof type === 'string') {
      typeKeys = type.split(',');
    } else {
      console.warn("ag-grid: colDef.type should be of type 'string' | 'string[]'");
      return;
    }
    // merge user defined with default column types
    var allColumnTypes = assign({}, DefaultColumnTypes);
    var userTypes = this.gridOptionsWrapper.getColumnTypes() || {};
    iterateObject(userTypes, function (key, value) {
      if (key in allColumnTypes) {
        console.warn("AG Grid: the column type '" + key + "' is a default column type and cannot be overridden.");
      } else {
        allColumnTypes[key] = value;
      }
    });
    typeKeys.forEach(function (t) {
      var typeColDef = allColumnTypes[t.trim()];
      if (typeColDef) {
        mergeDeep(colDefMerged, typeColDef, true, true);
      } else {
        console.warn("ag-grid: colDef.type '" + t + "' does not correspond to defined gridOptions.columnTypes");
      }
    });
  };
  ColumnFactory.prototype.checkForDeprecatedItems = function (colDef) {
    if (colDef) {
      var colDefNoType = colDef; // take out the type, so we can access attributes not defined in the type
      if (colDefNoType.group !== undefined) {
        console.warn('ag-grid: colDef.group is invalid, please check documentation on how to do grouping as it changed in version 3');
      }
      if (colDefNoType.headerGroup !== undefined) {
        console.warn('ag-grid: colDef.headerGroup is invalid, please check documentation on how to do grouping as it changed in version 3');
      }
      if (colDefNoType.headerGroupShow !== undefined) {
        console.warn('ag-grid: colDef.headerGroupShow is invalid, should be columnGroupShow, please check documentation on how to do grouping as it changed in version 3');
      }
      if (colDefNoType.suppressRowGroup !== undefined) {
        console.warn('ag-grid: colDef.suppressRowGroup is deprecated, please use colDef.type instead');
      }
      if (colDefNoType.suppressAggregation !== undefined) {
        console.warn('ag-grid: colDef.suppressAggregation is deprecated, please use colDef.type instead');
      }
      if (colDefNoType.suppressRowGroup || colDefNoType.suppressAggregation) {
        console.warn('ag-grid: colDef.suppressAggregation and colDef.suppressRowGroup are deprecated, use allowRowGroup, allowPivot and allowValue instead');
      }
      if (colDefNoType.displayName) {
        console.warn("ag-grid: Found displayName " + colDefNoType.displayName + ", please use headerName instead, displayName is deprecated.");
        colDefNoType.headerName = colDefNoType.displayName;
      }
    }
  };
  // if object has children, we assume it's a group
  ColumnFactory.prototype.isColumnGroup = function (abstractColDef) {
    return abstractColDef.children !== undefined;
  };
  __decorate$4([Autowired('columnUtils')], ColumnFactory.prototype, "columnUtils", void 0);
  __decorate$4([__param$1(0, Qualifier('loggerFactory'))], ColumnFactory.prototype, "setBeans", null);
  ColumnFactory = __decorate$4([Bean('columnFactory')], ColumnFactory);
  return ColumnFactory;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var Events = /** @class */function () {
  function Events() {}
  /** Everything has changed with the columns. Either complete new set of columns set, or user called setState() */
  /** @deprecated - grid no longer uses this, and setSate() also fires individual events */
  Events.EVENT_COLUMN_EVERYTHING_CHANGED = 'columnEverythingChanged';
  /** User has set in new columns. */
  Events.EVENT_NEW_COLUMNS_LOADED = 'newColumnsLoaded';
  /** The pivot mode flag was changed */
  Events.EVENT_COLUMN_PIVOT_MODE_CHANGED = 'columnPivotModeChanged';
  /** A row group column was added, removed or order changed. */
  Events.EVENT_COLUMN_ROW_GROUP_CHANGED = 'columnRowGroupChanged';
  /** expandAll / collapseAll was called from the api. */
  Events.EVENT_EXPAND_COLLAPSE_ALL = 'expandOrCollapseAll';
  /** A pivot column was added, removed or order changed. */
  Events.EVENT_COLUMN_PIVOT_CHANGED = 'columnPivotChanged';
  /** The list of grid columns has changed. */
  Events.EVENT_GRID_COLUMNS_CHANGED = 'gridColumnsChanged';
  /** A value column was added, removed or agg function was changed. */
  Events.EVENT_COLUMN_VALUE_CHANGED = 'columnValueChanged';
  /** A column was moved */
  Events.EVENT_COLUMN_MOVED = 'columnMoved';
  /** One or more columns was shown / hidden */
  Events.EVENT_COLUMN_VISIBLE = 'columnVisible';
  /** One or more columns was pinned / unpinned*/
  Events.EVENT_COLUMN_PINNED = 'columnPinned';
  /** A column group was opened / closed */
  Events.EVENT_COLUMN_GROUP_OPENED = 'columnGroupOpened';
  /** One or more columns was resized. If just one, the column in the event is set. */
  Events.EVENT_COLUMN_RESIZED = 'columnResized';
  /** The list of displayed columns has changed, can result from columns open / close, column move, pivot, group, etc */
  Events.EVENT_DISPLAYED_COLUMNS_CHANGED = 'displayedColumnsChanged';
  /** The list of virtual columns has changed, results from viewport changing */
  Events.EVENT_VIRTUAL_COLUMNS_CHANGED = 'virtualColumnsChanged';
  /** Async Transactions Executed */
  Events.EVENT_ASYNC_TRANSACTIONS_FLUSHED = 'asyncTransactionsFlushed';
  /** A row group was opened / closed */
  Events.EVENT_ROW_GROUP_OPENED = 'rowGroupOpened';
  /** The client has set new data into the grid */
  Events.EVENT_ROW_DATA_CHANGED = 'rowDataChanged';
  /** The client has updated data for the grid */
  Events.EVENT_ROW_DATA_UPDATED = 'rowDataUpdated';
  /** The client has set new floating data into the grid */
  Events.EVENT_PINNED_ROW_DATA_CHANGED = 'pinnedRowDataChanged';
  /** Range selection has changed */
  Events.EVENT_RANGE_SELECTION_CHANGED = 'rangeSelectionChanged';
  /** Chart was created */
  Events.EVENT_CHART_CREATED = 'chartCreated';
  /** Chart Range selection has changed */
  Events.EVENT_CHART_RANGE_SELECTION_CHANGED = 'chartRangeSelectionChanged';
  /** Chart Options have changed */
  Events.EVENT_CHART_OPTIONS_CHANGED = 'chartOptionsChanged';
  /** Chart was destroyed */
  Events.EVENT_CHART_DESTROYED = 'chartDestroyed';
  /** For when the tool panel is shown / hidden */
  Events.EVENT_TOOL_PANEL_VISIBLE_CHANGED = 'toolPanelVisibleChanged';
  /** Model was updated - grid updates the drawn rows when this happens */
  Events.EVENT_MODEL_UPDATED = 'modelUpdated';
  Events.EVENT_PASTE_START = 'pasteStart';
  Events.EVENT_PASTE_END = 'pasteEnd';
  Events.EVENT_FILL_START = 'fillStart';
  Events.EVENT_FILL_END = 'fillEnd';
  Events.EVENT_CELL_CLICKED = 'cellClicked';
  Events.EVENT_CELL_DOUBLE_CLICKED = 'cellDoubleClicked';
  Events.EVENT_CELL_MOUSE_DOWN = 'cellMouseDown';
  Events.EVENT_CELL_CONTEXT_MENU = 'cellContextMenu';
  Events.EVENT_CELL_VALUE_CHANGED = 'cellValueChanged';
  Events.EVENT_ROW_VALUE_CHANGED = 'rowValueChanged';
  Events.EVENT_CELL_FOCUSED = 'cellFocused';
  Events.EVENT_ROW_SELECTED = 'rowSelected';
  Events.EVENT_SELECTION_CHANGED = 'selectionChanged';
  Events.EVENT_CELL_KEY_DOWN = 'cellKeyDown';
  Events.EVENT_CELL_KEY_PRESS = 'cellKeyPress';
  Events.EVENT_CELL_MOUSE_OVER = 'cellMouseOver';
  Events.EVENT_CELL_MOUSE_OUT = 'cellMouseOut';
  /** 2 events for filtering. The grid LISTENS for filterChanged and afterFilterChanged */
  Events.EVENT_FILTER_CHANGED = 'filterChanged';
  /** Filter was change but not applied. Only useful if apply buttons are used in filters. */
  Events.EVENT_FILTER_MODIFIED = 'filterModified';
  Events.EVENT_FILTER_OPENED = 'filterOpened';
  Events.EVENT_SORT_CHANGED = 'sortChanged';
  /** A row was removed from the dom, for any reason. Use to clean up resources (if any) used by the row. */
  Events.EVENT_VIRTUAL_ROW_REMOVED = 'virtualRowRemoved';
  Events.EVENT_ROW_CLICKED = 'rowClicked';
  Events.EVENT_ROW_DOUBLE_CLICKED = 'rowDoubleClicked';
  /** Gets called once after the grid has finished initialising. */
  Events.EVENT_GRID_READY = 'gridReady';
  /** Width of height of the main grid div has changed. Grid listens for this and does layout of grid if it's
   * changed, so always filling the space it was given. */
  Events.EVENT_GRID_SIZE_CHANGED = 'gridSizeChanged';
  /** The indexes of the rows rendered has changed, eg user has scrolled to a new vertical position. */
  Events.EVENT_VIEWPORT_CHANGED = 'viewportChanged';
  /* The width of the scrollbar has been calculated */
  Events.EVENT_SCROLLBAR_WIDTH_CHANGED = 'scrollbarWidthChanged';
  /** Rows were rendered for the first time (ie on async data load). */
  Events.EVENT_FIRST_DATA_RENDERED = 'firstDataRendered';
  /** A column drag has started, either resizing a column or moving a column. */
  Events.EVENT_DRAG_STARTED = 'dragStarted';
  /** A column drag has stopped */
  Events.EVENT_DRAG_STOPPED = 'dragStopped';
  Events.EVENT_CHECKBOX_CHANGED = 'checkboxChanged';
  Events.EVENT_ROW_EDITING_STARTED = 'rowEditingStarted';
  Events.EVENT_ROW_EDITING_STOPPED = 'rowEditingStopped';
  Events.EVENT_CELL_EDITING_STARTED = 'cellEditingStarted';
  Events.EVENT_CELL_EDITING_STOPPED = 'cellEditingStopped';
  /** Main body of grid has scrolled, either horizontally or vertically */
  Events.EVENT_BODY_SCROLL = 'bodyScroll';
  Events.EVENT_ANIMATION_QUEUE_EMPTY = 'animationQueueEmpty';
  Events.EVENT_HEIGHT_SCALE_CHANGED = 'heightScaleChanged';
  /** The displayed page for pagination has changed. For example the data was filtered or sorted,
   * or the user has moved to a different page. */
  Events.EVENT_PAGINATION_CHANGED = 'paginationChanged';
  /** Only used by React, Angular 2+, Web Components and VueJS AG Grid components
   * (not used if doing plain JavaScript or Angular 1.x). If the grid receives changes due
   * to bound properties, this event fires after the grid has finished processing the change. */
  Events.EVENT_COMPONENT_STATE_CHANGED = 'componentStateChanged';
  /** All items from here down are used internally by the grid, not intended for external use. */
  // not documented, either experimental, or we just don't want users using an depending on them
  Events.EVENT_BODY_HEIGHT_CHANGED = 'bodyHeightChanged';
  Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED = 'displayedColumnsWidthChanged';
  Events.EVENT_SCROLL_VISIBILITY_CHANGED = 'scrollVisibilityChanged';
  Events.EVENT_COLUMN_HOVER_CHANGED = 'columnHoverChanged';
  Events.EVENT_FLASH_CELLS = 'flashCells';
  Events.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED = 'paginationPixelOffsetChanged';
  Events.EVENT_DISPLAYED_ROWS_CHANGED = 'displayedRowsChanged';
  Events.EVENT_LEFT_PINNED_WIDTH_CHANGED = 'leftPinnedWidthChanged';
  Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED = 'rightPinnedWidthChanged';
  Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED = 'rowContainerHeightChanged';
  Events.EVENT_ROW_DRAG_ENTER = 'rowDragEnter';
  Events.EVENT_ROW_DRAG_MOVE = 'rowDragMove';
  Events.EVENT_ROW_DRAG_LEAVE = 'rowDragLeave';
  Events.EVENT_ROW_DRAG_END = 'rowDragEnd';
  // primarily for charts
  Events.EVENT_POPUP_TO_FRONT = 'popupToFront';
  // these are used for server side group and agg - only used by CS with Viewport Row Model - intention is
  // to design these better around server side functions and then release to general public when fully working with
  // all the row models.
  Events.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST = 'columnRowGroupChangeRequest';
  Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST = 'columnPivotChangeRequest';
  Events.EVENT_COLUMN_VALUE_CHANGE_REQUEST = 'columnValueChangeRequest';
  Events.EVENT_COLUMN_AGG_FUNC_CHANGE_REQUEST = 'columnAggFuncChangeRequest';
  Events.EVENT_KEYBOARD_FOCUS = 'keyboardFocus';
  Events.EVENT_MOUSE_FOCUS = 'mouseFocus';
  Events.EVENT_STORE_UPDATED = 'storeUpdated';
  return Events;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
// class returns unique instance id's for columns.
// eg, the following calls (in this order) will result in:
//
// getInstanceIdForKey('country') => 0
// getInstanceIdForKey('country') => 1
// getInstanceIdForKey('country') => 2
// getInstanceIdForKey('country') => 3
// getInstanceIdForKey('age') => 0
// getInstanceIdForKey('age') => 1
// getInstanceIdForKey('country') => 4
var GroupInstanceIdCreator = /** @class */function () {
  function GroupInstanceIdCreator() {
    // this map contains keys to numbers, so we remember what the last call was
    this.existingIds = {};
  }
  GroupInstanceIdCreator.prototype.getInstanceIdForKey = function (key) {
    var lastResult = this.existingIds[key];
    var result;
    if (typeof lastResult !== 'number') {
      // first time this key
      result = 0;
    } else {
      result = lastResult + 1;
    }
    this.existingIds[key] = result;
    return result;
  };
  return GroupInstanceIdCreator;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var reUnescapedHtml = /[&<>"']/g;
/**
 * HTML Escapes.
 */
var HTML_ESCAPES = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#39;'
};
/**
 * It encodes any string in UTF-8 format
 * taken from https://github.com/mathiasbynens/utf8.js
 * @param {string} s
 * @returns {string}
 */
function utf8_encode(s) {
  var stringFromCharCode = String.fromCharCode;
  function ucs2decode(string) {
    var output = [];
    if (!string) {
      return [];
    }
    var len = string.length;
    var counter = 0;
    var value;
    var extra;
    while (counter < len) {
      value = string.charCodeAt(counter++);
      if (value >= 0xD800 && value <= 0xDBFF && counter < len) {
        // high surrogate, and there is a next character
        extra = string.charCodeAt(counter++);
        if ((extra & 0xFC00) == 0xDC00) {
          // low surrogate
          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
        } else {
          // unmatched surrogate; only append this code unit, in case the next
          // code unit is the high surrogate of a surrogate pair
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }
    return output;
  }
  function checkScalarValue(point) {
    if (point >= 0xD800 && point <= 0xDFFF) {
      throw Error('Lone surrogate U+' + point.toString(16).toUpperCase() + ' is not a scalar value');
    }
  }
  function createByte(point, shift) {
    return stringFromCharCode(point >> shift & 0x3F | 0x80);
  }
  function encodeCodePoint(point) {
    if (point >= 0 && point <= 7 || point >= 14 && point <= 31) {
      return padStart("_x" + point.toString(16).toUpperCase() + "_", 4, '0');
    }
    if ((point & 0xFFFFFF80) == 0) {
      // 1-byte sequence
      return stringFromCharCode(point);
    }
    var symbol = '';
    if ((point & 0xFFFFF800) == 0) {
      // 2-byte sequence
      symbol = stringFromCharCode(point >> 6 & 0x1F | 0xC0);
    } else if ((point & 0xFFFF0000) == 0) {
      // 3-byte sequence
      checkScalarValue(point);
      symbol = stringFromCharCode(point >> 12 & 0x0F | 0xE0);
      symbol += createByte(point, 6);
    } else if ((point & 0xFFE00000) == 0) {
      // 4-byte sequence
      symbol = stringFromCharCode(point >> 18 & 0x07 | 0xF0);
      symbol += createByte(point, 12);
      symbol += createByte(point, 6);
    }
    symbol += stringFromCharCode(point & 0x3F | 0x80);
    return symbol;
  }
  var codePoints = ucs2decode(s);
  var length = codePoints.length;
  var index = -1;
  var codePoint;
  var byteString = '';
  while (++index < length) {
    codePoint = codePoints[index];
    byteString += encodeCodePoint(codePoint);
  }
  return byteString;
}
/**
 * @param str The string to be repeated
 * @param len The size of the output string
 * @returns A string with size len created from repeated `str`.
 */
function stringRepeat(str, len) {
  len = Math.floor(len);
  if (str.length === 0 || len === 0) {
    return '';
  }
  var maxCount = str.length * len;
  len = Math.floor(Math.log(len) / Math.log(2));
  while (len) {
    str += str;
    len--;
  }
  str += str.substring(0, maxCount - str.length);
  return str;
}
/**
 * @param str The string to be padded
 * @param totalLength The final length needed
 * @param padStr The string to generate the padding
 * @returns The padded string
 */
function padStart(str, totalLength, padStr) {
  if (str.length > totalLength) {
    return str;
  }
  totalLength -= str.length;
  if (totalLength > padStr.length) {
    padStr += stringRepeat(padStr, totalLength / padStr.length);
  }
  return padStr.slice(0, totalLength) + str;
}
/**
 * Converts a camelCase string into hyphenated string
 * from https://gist.github.com/youssman/745578062609e8acac9f
 * @param {string} str
 * @return {string}
 */
function camelCaseToHyphen(str) {
  if (str === null || str === undefined) {
    return null;
  }
  return str.replace(/([A-Z])/g, function (g) {
    return '-' + g[0].toLowerCase();
  });
}
/**
 * Converts a hyphenated string into camelCase string
 * from https://stackoverflow.com/questions/6660977/convert-hyphens-to-camel-case-camelcase
 * @param {string} str
 * @return {string}
 */
function hyphenToCamelCase(str) {
  if (str === null || str === undefined) {
    return null;
  }
  return str.replace(/-([a-z])/g, function (g) {
    return g[1].toUpperCase();
  });
}
function capitalise(str) {
  return str[0].toUpperCase() + str.substr(1).toLowerCase();
}
function escapeString(toEscape) {
  // we call toString() twice, in case value is an object, where user provides
  // a toString() method, and first call to toString() returns back something other
  // than a string (eg a number to render)
  return toEscape == null ? null : toEscape.toString().toString().replace(reUnescapedHtml, function (chr) {
    return HTML_ESCAPES[chr];
  });
}
/**
 * Converts a camelCase string into regular text
 * from: https://stackoverflow.com/questions/15369566/putting-space-in-camel-case-string-using-regular-expression
 * @param {string} camelCase
 * @return {string}
 */
function camelCaseToHumanText(camelCase) {
  if (!camelCase || camelCase == null) {
    return null;
  }
  var rex = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g;
  var words = camelCase.replace(rex, '$1$4 $2$3$5').replace('.', ' ').split(' ');
  return words.map(function (word) {
    return word.substring(0, 1).toUpperCase() + (word.length > 1 ? word.substring(1, word.length) : '');
  }).join(' ');
}
function startsWith(str, matchStart) {
  if (str === matchStart) {
    return true;
  }
  return str != null && str.slice(0, matchStart.length) === matchStart;
}
var StringUtils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  utf8_encode: utf8_encode,
  stringRepeat: stringRepeat,
  padStart: padStart,
  camelCaseToHyphen: camelCaseToHyphen,
  hyphenToCamelCase: hyphenToCamelCase,
  capitalise: capitalise,
  escapeString: escapeString,
  camelCaseToHumanText: camelCaseToHumanText,
  startsWith: startsWith
});

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
function convertToMap(arr) {
  var map = new Map();
  arr.forEach(function (pair) {
    return map.set(pair[0], pair[1]);
  });
  return map;
}
function keys(map) {
  var arr = [];
  map.forEach(function (_, key) {
    return arr.push(key);
  });
  return arr;
}
var MapUtils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  convertToMap: convertToMap,
  keys: keys
});

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$5 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param$2 =  false || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};
var ColumnController = /** @class */function (_super) {
  __extends$1(ColumnController, _super);
  function ColumnController() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    // header row count, based on user provided columns
    _this.primaryHeaderRowCount = 0;
    _this.secondaryHeaderRowCount = 0;
    _this.secondaryColumnsPresent = false;
    // header row count, either above, or based on pivoting if we are pivoting
    _this.gridHeaderRowCount = 0;
    // leave level columns of the displayed trees
    _this.displayedColumnsLeft = [];
    _this.displayedColumnsRight = [];
    _this.displayedColumnsCenter = [];
    // all three lists above combined
    _this.displayedColumns = [];
    // for fast lookup, to see if a column or group is still displayed
    _this.displayedColumnsAndGroupsMap = {};
    // all columns to be rendered
    _this.viewportColumns = [];
    // all columns to be rendered in the centre
    _this.viewportColumnsCenter = [];
    _this.rowGroupColumns = [];
    _this.valueColumns = [];
    _this.pivotColumns = [];
    _this.ready = false;
    _this.autoGroupsNeedBuilding = false;
    _this.forceRecreateAutoGroups = false;
    _this.pivotMode = false;
    _this.bodyWidth = 0;
    _this.leftWidth = 0;
    _this.rightWidth = 0;
    _this.bodyWidthDirty = true;
    _this.colDefVersion = 0;
    _this.flexColsCalculatedAtLestOnce = false;
    return _this;
  }
  ColumnController.prototype.init = function () {
    this.suppressColumnVirtualisation = this.gridOptionsWrapper.isSuppressColumnVirtualisation();
    var pivotMode = this.gridOptionsWrapper.isPivotMode();
    if (this.isPivotSettingAllowed(pivotMode)) {
      this.pivotMode = pivotMode;
    }
    this.usingTreeData = this.gridOptionsWrapper.isTreeData();
    this.addManagedListener(this.gridOptionsWrapper, 'autoGroupColumnDef', this.onAutoGroupColumnDefChanged.bind(this));
  };
  ColumnController.prototype.onAutoGroupColumnDefChanged = function () {
    this.autoGroupsNeedBuilding = true;
    this.forceRecreateAutoGroups = true;
    this.updateGridColumns();
    this.updateDisplayedColumns('gridOptionsChanged');
  };
  ColumnController.prototype.getColDefVersion = function () {
    return this.colDefVersion;
  };
  ColumnController.prototype.setColumnDefs = function (columnDefs, source) {
    var _this = this;
    if (source === void 0) {
      source = 'api';
    }
    var colsPreviouslyExisted = !!this.columnDefs;
    this.colDefVersion++;
    var raiseEventsFunc = this.compareColumnStatesAndRaiseEvents(source);
    this.columnDefs = columnDefs;
    // always invalidate cache on changing columns, as the column id's for the new columns
    // could overlap with the old id's, so the cache would return old values for new columns.
    this.valueCache.expire();
    // NOTE ==================
    // we should be destroying the existing columns and groups if they exist, for example, the original column
    // group adds a listener to the columns, it should be also removing the listeners
    this.autoGroupsNeedBuilding = true;
    var oldPrimaryColumns = this.primaryColumns;
    var oldPrimaryTree = this.primaryColumnTree;
    var balancedTreeResult = this.columnFactory.createColumnTree(columnDefs, true, oldPrimaryTree);
    this.primaryColumnTree = balancedTreeResult.columnTree;
    this.primaryHeaderRowCount = balancedTreeResult.treeDept + 1;
    this.primaryColumns = this.getColumnsFromTree(this.primaryColumnTree);
    this.primaryColumnsMap = {};
    this.primaryColumns.forEach(function (col) {
      return _this.primaryColumnsMap[col.getId()] = col;
    });
    this.extractRowGroupColumns(source, oldPrimaryColumns);
    this.extractPivotColumns(source, oldPrimaryColumns);
    this.extractValueColumns(source, oldPrimaryColumns);
    this.ready = true;
    this.updateGridColumns();
    if (colsPreviouslyExisted && this.gridColsArePrimary && this.gridOptionsWrapper.isApplyColumnDefOrder()) {
      this.orderGridColumnsLikePrimary();
    }
    this.updateDisplayedColumns(source);
    this.checkViewportColumns();
    // this event is not used by AG Grid, but left here for backwards compatibility,
    // in case applications use it
    this.dispatchEverythingChanged(source);
    raiseEventsFunc();
    this.dispatchNewColumnsLoaded();
  };
  ColumnController.prototype.dispatchNewColumnsLoaded = function () {
    var newColumnsLoadedEvent = {
      type: Events.EVENT_NEW_COLUMNS_LOADED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(newColumnsLoadedEvent);
  };
  // this event is legacy, no grid code listens to it. instead the grid listens to New Columns Loaded
  ColumnController.prototype.dispatchEverythingChanged = function (source) {
    if (source === void 0) {
      source = 'api';
    }
    var eventEverythingChanged = {
      type: Events.EVENT_COLUMN_EVERYTHING_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi,
      source: source
    };
    this.eventService.dispatchEvent(eventEverythingChanged);
  };
  ColumnController.prototype.orderGridColumnsLikePrimary = function () {
    var _this = this;
    this.gridColumns.sort(function (colA, colB) {
      var primaryIndexA = _this.primaryColumns.indexOf(colA);
      var primaryIndexB = _this.primaryColumns.indexOf(colB);
      // if both cols are present in primary, then we just return the position,
      // so position is maintained.
      var indexAPresent = primaryIndexA >= 0;
      var indexBPresent = primaryIndexB >= 0;
      if (indexAPresent && indexBPresent) {
        return primaryIndexA - primaryIndexB;
      }
      if (indexAPresent) {
        // B is auto group column, so put B first
        return 1;
      }
      if (indexBPresent) {
        // A is auto group column, so put A first
        return -1;
      }
      // otherwise both A and B are auto-group columns. so we just keep the order
      // as they were already in.
      var gridIndexA = _this.gridColumns.indexOf(colA);
      var gridIndexB = _this.gridColumns.indexOf(colB);
      return gridIndexA - gridIndexB;
    });
  };
  ColumnController.prototype.isAutoRowHeightActive = function () {
    return this.autoRowHeightColumns && this.autoRowHeightColumns.length > 0;
  };
  ColumnController.prototype.getAllAutoRowHeightCols = function () {
    return this.autoRowHeightColumns;
  };
  ColumnController.prototype.setViewport = function () {
    if (this.gridOptionsWrapper.isEnableRtl()) {
      this.viewportLeft = this.bodyWidth - this.scrollPosition - this.scrollWidth;
      this.viewportRight = this.bodyWidth - this.scrollPosition;
    } else {
      this.viewportLeft = this.scrollPosition;
      this.viewportRight = this.scrollWidth + this.scrollPosition;
    }
  };
  // used by clipboard service, to know what columns to paste into
  ColumnController.prototype.getDisplayedColumnsStartingAt = function (column) {
    var currentColumn = column;
    var columns = [];
    while (currentColumn != null) {
      columns.push(currentColumn);
      currentColumn = this.getDisplayedColAfter(currentColumn);
    }
    return columns;
  };
  // checks what columns are currently displayed due to column virtualisation. fires an event
  // if the list of columns has changed.
  // + setColumnWidth(), setViewportPosition(), setColumnDefs(), sizeColumnsToFit()
  ColumnController.prototype.checkViewportColumns = function () {
    // check displayCenterColumnTree exists first, as it won't exist when grid is initialising
    if (this.displayedColumnsCenter == null) {
      return;
    }
    var hashBefore = this.viewportColumns.map(function (column) {
      return column.getId();
    }).join('#');
    this.extractViewport();
    var hashAfter = this.viewportColumns.map(function (column) {
      return column.getId();
    }).join('#');
    if (hashBefore !== hashAfter) {
      var event_1 = {
        type: Events.EVENT_VIRTUAL_COLUMNS_CHANGED,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(event_1);
    }
  };
  ColumnController.prototype.setViewportPosition = function (scrollWidth, scrollPosition) {
    if (scrollWidth !== this.scrollWidth || scrollPosition !== this.scrollPosition || this.bodyWidthDirty) {
      this.scrollWidth = scrollWidth;
      this.scrollPosition = scrollPosition;
      // we need to call setVirtualViewportLeftAndRight() at least once after the body width changes,
      // as the viewport can stay the same, but in RTL, if body width changes, we need to work out the
      // virtual columns again
      this.bodyWidthDirty = true;
      this.setViewport();
      if (this.ready) {
        this.checkViewportColumns();
      }
    }
  };
  ColumnController.prototype.isPivotMode = function () {
    return this.pivotMode;
  };
  ColumnController.prototype.isPivotSettingAllowed = function (pivot) {
    if (pivot && this.gridOptionsWrapper.isTreeData()) {
      console.warn("AG Grid: Pivot mode not available in conjunction Tree Data i.e. 'gridOptions.treeData: true'");
      return false;
    }
    return true;
  };
  ColumnController.prototype.setPivotMode = function (pivotMode, source) {
    if (source === void 0) {
      source = 'api';
    }
    if (pivotMode === this.pivotMode || !this.isPivotSettingAllowed(this.pivotMode)) {
      return;
    }
    this.pivotMode = pivotMode;
    // we need to update grid columns to cover the scenario where user has groupSuppressAutoColumn=true, as
    // this means we don't use auto group column UNLESS we are in pivot mode (it's mandatory in pivot mode),
    // so need to updateGridColumn() to check it autoGroupCol needs to be added / removed
    this.autoGroupsNeedBuilding = true;
    this.updateGridColumns();
    this.updateDisplayedColumns(source);
    var event = {
      type: Events.EVENT_COLUMN_PIVOT_MODE_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(event);
  };
  ColumnController.prototype.getSecondaryPivotColumn = function (pivotKeys, valueColKey) {
    if (!this.secondaryColumnsPresent || !this.secondaryColumns) {
      return null;
    }
    var valueColumnToFind = this.getPrimaryColumn(valueColKey);
    var foundColumn = null;
    this.secondaryColumns.forEach(function (column) {
      var thisPivotKeys = column.getColDef().pivotKeys;
      var pivotValueColumn = column.getColDef().pivotValueColumn;
      var pivotKeyMatches = areEqual(thisPivotKeys, pivotKeys);
      var pivotValueMatches = pivotValueColumn === valueColumnToFind;
      if (pivotKeyMatches && pivotValueMatches) {
        foundColumn = column;
      }
    });
    return foundColumn;
  };
  ColumnController.prototype.setBeans = function (loggerFactory) {
    this.logger = loggerFactory.create('ColumnController');
  };
  ColumnController.prototype.setFirstRightAndLastLeftPinned = function (source) {
    var lastLeft;
    var firstRight;
    if (this.gridOptionsWrapper.isEnableRtl()) {
      lastLeft = this.displayedColumnsLeft ? this.displayedColumnsLeft[0] : null;
      firstRight = this.displayedColumnsRight ? last(this.displayedColumnsRight) : null;
    } else {
      lastLeft = this.displayedColumnsLeft ? last(this.displayedColumnsLeft) : null;
      firstRight = this.displayedColumnsRight ? this.displayedColumnsRight[0] : null;
    }
    this.gridColumns.forEach(function (column) {
      column.setLastLeftPinned(column === lastLeft, source);
      column.setFirstRightPinned(column === firstRight, source);
    });
  };
  ColumnController.prototype.autoSizeColumns = function (keys, skipHeader, source) {
    // because of column virtualisation, we can only do this function on columns that are
    // actually rendered, as non-rendered columns (outside the viewport and not rendered
    // due to column virtualisation) are not present. this can result in all rendered columns
    // getting narrowed, which in turn introduces more rendered columns on the RHS which
    // did not get autosized in the original run, leaving the visible grid with columns on
    // the LHS sized, but RHS no. so we keep looping through the visible columns until
    // no more cols are available (rendered) to be resized
    var _this = this;
    if (source === void 0) {
      source = "api";
    }
    // we autosize after animation frames finish in case any cell renderers need to complete first. this can
    // happen eg if client code is calling api.autoSizeAllColumns() straight after grid is initialised, but grid
    // hasn't fully drawn out all the cells yet (due to cell renderers in animation frames).
    this.animationFrameService.flushAllFrames();
    // keep track of which cols we have resized in here
    var columnsAutosized = [];
    // initialise with anything except 0 so that while loop executes at least once
    var changesThisTimeAround = -1;
    if (skipHeader == null) {
      skipHeader = this.gridOptionsWrapper.isSkipHeaderOnAutoSize();
    }
    while (changesThisTimeAround !== 0) {
      changesThisTimeAround = 0;
      this.actionOnGridColumns(keys, function (column) {
        // if already autosized, skip it
        if (columnsAutosized.indexOf(column) >= 0) {
          return false;
        }
        // get how wide this col should be
        var preferredWidth = _this.autoWidthCalculator.getPreferredWidthForColumn(column, skipHeader);
        // preferredWidth = -1 if this col is not on the screen
        if (preferredWidth > 0) {
          var newWidth = _this.normaliseColumnWidth(column, preferredWidth);
          column.setActualWidth(newWidth, source);
          columnsAutosized.push(column);
          changesThisTimeAround++;
        }
        return true;
      }, source);
    }
    this.fireColumnResizedEvent(columnsAutosized, true, 'autosizeColumns');
  };
  ColumnController.prototype.fireColumnResizedEvent = function (columns, finished, source, flexColumns) {
    if (flexColumns === void 0) {
      flexColumns = null;
    }
    if (columns && columns.length) {
      var event_2 = {
        type: Events.EVENT_COLUMN_RESIZED,
        columns: columns,
        column: columns.length === 1 ? columns[0] : null,
        flexColumns: flexColumns,
        finished: finished,
        api: this.gridApi,
        columnApi: this.columnApi,
        source: source
      };
      this.eventService.dispatchEvent(event_2);
    }
  };
  ColumnController.prototype.autoSizeColumn = function (key, skipHeader, source) {
    if (source === void 0) {
      source = "api";
    }
    if (key) {
      this.autoSizeColumns([key], skipHeader, source);
    }
  };
  ColumnController.prototype.autoSizeAllColumns = function (skipHeader, source) {
    if (source === void 0) {
      source = "api";
    }
    var allDisplayedColumns = this.getAllDisplayedColumns();
    this.autoSizeColumns(allDisplayedColumns, skipHeader, source);
  };
  ColumnController.prototype.getColumnsFromTree = function (rootColumns) {
    var result = [];
    var recursiveFindColumns = function (childColumns) {
      for (var i = 0; i < childColumns.length; i++) {
        var child = childColumns[i];
        if (child instanceof Column) {
          result.push(child);
        } else if (child instanceof OriginalColumnGroup) {
          recursiveFindColumns(child.getChildren());
        }
      }
    };
    recursiveFindColumns(rootColumns);
    return result;
  };
  ColumnController.prototype.getAllDisplayedTrees = function () {
    if (this.displayedTreeLeft && this.displayedTreeRight && this.displayedTreeCentre) {
      return this.displayedTreeLeft.concat(this.displayedTreeCentre).concat(this.displayedTreeRight);
    }
    return null;
  };
  // + columnSelectPanel
  ColumnController.prototype.getPrimaryColumnTree = function () {
    return this.primaryColumnTree;
  };
  // + gridPanel -> for resizing the body and setting top margin
  ColumnController.prototype.getHeaderRowCount = function () {
    return this.gridHeaderRowCount;
  };
  // + headerRenderer -> setting pinned body width
  ColumnController.prototype.getDisplayedTreeLeft = function () {
    return this.displayedTreeLeft;
  };
  // + headerRenderer -> setting pinned body width
  ColumnController.prototype.getDisplayedTreeRight = function () {
    return this.displayedTreeRight;
  };
  // + headerRenderer -> setting pinned body width
  ColumnController.prototype.getDisplayedTreeCentre = function () {
    return this.displayedTreeCentre;
  };
  // gridPanel -> ensureColumnVisible
  ColumnController.prototype.isColumnDisplayed = function (column) {
    return this.getAllDisplayedColumns().indexOf(column) >= 0;
  };
  // + csvCreator
  ColumnController.prototype.getAllDisplayedColumns = function () {
    return this.displayedColumns;
  };
  ColumnController.prototype.getViewportColumns = function () {
    return this.viewportColumns;
  };
  ColumnController.prototype.getDisplayedLeftColumnsForRow = function (rowNode) {
    if (!this.colSpanActive) {
      return this.displayedColumnsLeft;
    }
    return this.getDisplayedColumnsForRow(rowNode, this.displayedColumnsLeft);
  };
  ColumnController.prototype.getDisplayedRightColumnsForRow = function (rowNode) {
    if (!this.colSpanActive) {
      return this.displayedColumnsRight;
    }
    return this.getDisplayedColumnsForRow(rowNode, this.displayedColumnsRight);
  };
  ColumnController.prototype.getDisplayedColumnsForRow = function (rowNode, displayedColumns, filterCallback, emptySpaceBeforeColumn) {
    var result = [];
    var lastConsideredCol = null;
    var _loop_1 = function (i) {
      var col = displayedColumns[i];
      var maxAllowedColSpan = displayedColumns.length - i;
      var colSpan = Math.min(col.getColSpan(rowNode), maxAllowedColSpan);
      var columnsToCheckFilter = [col];
      if (colSpan > 1) {
        var colsToRemove = colSpan - 1;
        for (var j = 1; j <= colsToRemove; j++) {
          columnsToCheckFilter.push(displayedColumns[i + j]);
        }
        i += colsToRemove;
      }
      // see which cols we should take out for column virtualisation
      var filterPasses;
      if (filterCallback) {
        // if user provided a callback, means some columns may not be in the viewport.
        // the user will NOT provide a callback if we are talking about pinned areas,
        // as pinned areas have no horizontal scroll and do not virtualise the columns.
        // if lots of columns, that means column spanning, and we set filterPasses = true
        // if one or more of the columns spanned pass the filter.
        filterPasses = false;
        columnsToCheckFilter.forEach(function (colForFilter) {
          if (filterCallback(colForFilter)) {
            filterPasses = true;
          }
        });
      } else {
        filterPasses = true;
      }
      if (filterPasses) {
        if (result.length === 0 && lastConsideredCol) {
          var gapBeforeColumn = emptySpaceBeforeColumn ? emptySpaceBeforeColumn(col) : false;
          if (gapBeforeColumn) {
            result.push(lastConsideredCol);
          }
        }
        result.push(col);
      }
      lastConsideredCol = col;
      out_i_1 = i;
    };
    var out_i_1;
    for (var i = 0; i < displayedColumns.length; i++) {
      _loop_1(i);
      i = out_i_1;
    }
    return result;
  };
  // + rowRenderer
  // if we are not column spanning, this just returns back the virtual centre columns,
  // however if we are column spanning, then different rows can have different virtual
  // columns, so we have to work out the list for each individual row.
  ColumnController.prototype.getViewportCenterColumnsForRow = function (rowNode) {
    var _this = this;
    if (!this.colSpanActive) {
      return this.viewportColumnsCenter;
    }
    var emptySpaceBeforeColumn = function (col) {
      var left = col.getLeft();
      return exists(left) && left > _this.viewportLeft;
    };
    // if doing column virtualisation, then we filter based on the viewport.
    var filterCallback = this.suppressColumnVirtualisation ? null : this.isColumnInViewport.bind(this);
    return this.getDisplayedColumnsForRow(rowNode, this.displayedColumnsCenter, filterCallback, emptySpaceBeforeColumn);
  };
  ColumnController.prototype.getAriaColumnIndex = function (col) {
    return this.getAllGridColumns().indexOf(col) + 1;
  };
  ColumnController.prototype.isColumnInViewport = function (col) {
    var columnLeft = col.getLeft() || 0;
    var columnRight = columnLeft + col.getActualWidth();
    // adding 200 for buffer size, so some cols off viewport are rendered.
    // this helps horizontal scrolling so user rarely sees white space (unless
    // they scroll horizontally fast). however we are conservative, as the more
    // buffer the slower the vertical redraw speed
    var leftBounds = this.viewportLeft - 200;
    var rightBounds = this.viewportRight + 200;
    var columnToMuchLeft = columnLeft < leftBounds && columnRight < leftBounds;
    var columnToMuchRight = columnLeft > rightBounds && columnRight > rightBounds;
    return !columnToMuchLeft && !columnToMuchRight;
  };
  // used by:
  // + angularGrid -> setting pinned body width
  // note: this should be cached
  ColumnController.prototype.getDisplayedColumnsLeftWidth = function () {
    return this.getWidthOfColsInList(this.displayedColumnsLeft);
  };
  // note: this should be cached
  ColumnController.prototype.getDisplayedColumnsRightWidth = function () {
    return this.getWidthOfColsInList(this.displayedColumnsRight);
  };
  ColumnController.prototype.updatePrimaryColumnList = function (keys, masterList, actionIsAdd, columnCallback, eventType, source) {
    var _this = this;
    if (source === void 0) {
      source = "api";
    }
    if (!keys || missingOrEmpty(keys)) {
      return;
    }
    var atLeastOne = false;
    keys.forEach(function (key) {
      var columnToAdd = _this.getPrimaryColumn(key);
      if (!columnToAdd) {
        return;
      }
      if (actionIsAdd) {
        if (masterList.indexOf(columnToAdd) >= 0) {
          return;
        }
        masterList.push(columnToAdd);
      } else {
        if (masterList.indexOf(columnToAdd) < 0) {
          return;
        }
        removeFromArray(masterList, columnToAdd);
      }
      columnCallback(columnToAdd);
      atLeastOne = true;
    });
    if (!atLeastOne) {
      return;
    }
    if (this.autoGroupsNeedBuilding) {
      this.updateGridColumns();
    }
    this.updateDisplayedColumns(source);
    var event = {
      type: eventType,
      columns: masterList,
      column: masterList.length === 1 ? masterList[0] : null,
      api: this.gridApi,
      columnApi: this.columnApi,
      source: source
    };
    this.eventService.dispatchEvent(event);
  };
  ColumnController.prototype.setRowGroupColumns = function (colKeys, source) {
    if (source === void 0) {
      source = "api";
    }
    this.autoGroupsNeedBuilding = true;
    this.setPrimaryColumnList(colKeys, this.rowGroupColumns, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.setRowGroupActive.bind(this), source);
  };
  ColumnController.prototype.setRowGroupActive = function (active, column, source) {
    if (active === column.isRowGroupActive()) {
      return;
    }
    column.setRowGroupActive(active, source);
    if (!active && !this.gridOptionsWrapper.isSuppressMakeColumnVisibleAfterUnGroup()) {
      column.setVisible(true, source);
    }
  };
  ColumnController.prototype.addRowGroupColumn = function (key, source) {
    if (source === void 0) {
      source = "api";
    }
    if (key) {
      this.addRowGroupColumns([key], source);
    }
  };
  ColumnController.prototype.addRowGroupColumns = function (keys, source) {
    if (source === void 0) {
      source = "api";
    }
    this.autoGroupsNeedBuilding = true;
    this.updatePrimaryColumnList(keys, this.rowGroupColumns, true, this.setRowGroupActive.bind(this, true), Events.EVENT_COLUMN_ROW_GROUP_CHANGED, source);
  };
  ColumnController.prototype.removeRowGroupColumns = function (keys, source) {
    if (source === void 0) {
      source = "api";
    }
    this.autoGroupsNeedBuilding = true;
    this.updatePrimaryColumnList(keys, this.rowGroupColumns, false, this.setRowGroupActive.bind(this, false), Events.EVENT_COLUMN_ROW_GROUP_CHANGED, source);
  };
  ColumnController.prototype.removeRowGroupColumn = function (key, source) {
    if (source === void 0) {
      source = "api";
    }
    if (key) {
      this.removeRowGroupColumns([key], source);
    }
  };
  ColumnController.prototype.addPivotColumns = function (keys, source) {
    if (source === void 0) {
      source = "api";
    }
    this.updatePrimaryColumnList(keys, this.pivotColumns, true, function (column) {
      return column.setPivotActive(true, source);
    }, Events.EVENT_COLUMN_PIVOT_CHANGED, source);
  };
  ColumnController.prototype.setPivotColumns = function (colKeys, source) {
    if (source === void 0) {
      source = "api";
    }
    this.setPrimaryColumnList(colKeys, this.pivotColumns, Events.EVENT_COLUMN_PIVOT_CHANGED, function (added, column) {
      column.setPivotActive(added, source);
    }, source);
  };
  ColumnController.prototype.addPivotColumn = function (key, source) {
    if (source === void 0) {
      source = "api";
    }
    this.addPivotColumns([key], source);
  };
  ColumnController.prototype.removePivotColumns = function (keys, source) {
    if (source === void 0) {
      source = "api";
    }
    this.updatePrimaryColumnList(keys, this.pivotColumns, false, function (column) {
      return column.setPivotActive(false, source);
    }, Events.EVENT_COLUMN_PIVOT_CHANGED, source);
  };
  ColumnController.prototype.removePivotColumn = function (key, source) {
    if (source === void 0) {
      source = "api";
    }
    this.removePivotColumns([key], source);
  };
  ColumnController.prototype.setPrimaryColumnList = function (colKeys, masterList, eventName, columnCallback, source) {
    var _this = this;
    masterList.length = 0;
    if (exists(colKeys)) {
      colKeys.forEach(function (key) {
        var column = _this.getPrimaryColumn(key);
        if (column) {
          masterList.push(column);
        }
      });
    }
    this.primaryColumns.forEach(function (column) {
      var added = masterList.indexOf(column) >= 0;
      columnCallback(added, column);
    });
    if (this.autoGroupsNeedBuilding) {
      this.updateGridColumns();
    }
    this.updateDisplayedColumns(source);
    this.fireColumnEvent(eventName, masterList, source);
  };
  ColumnController.prototype.setValueColumns = function (colKeys, source) {
    if (source === void 0) {
      source = "api";
    }
    this.setPrimaryColumnList(colKeys, this.valueColumns, Events.EVENT_COLUMN_VALUE_CHANGED, this.setValueActive.bind(this), source);
  };
  ColumnController.prototype.setValueActive = function (active, column, source) {
    if (active === column.isValueActive()) {
      return;
    }
    column.setValueActive(active, source);
    if (active && !column.getAggFunc()) {
      var initialAggFunc = this.aggFuncService.getDefaultAggFunc(column);
      column.setAggFunc(initialAggFunc);
    }
  };
  ColumnController.prototype.addValueColumns = function (keys, source) {
    if (source === void 0) {
      source = "api";
    }
    this.updatePrimaryColumnList(keys, this.valueColumns, true, this.setValueActive.bind(this, true), Events.EVENT_COLUMN_VALUE_CHANGED, source);
  };
  ColumnController.prototype.addValueColumn = function (colKey, source) {
    if (source === void 0) {
      source = "api";
    }
    if (colKey) {
      this.addValueColumns([colKey], source);
    }
  };
  ColumnController.prototype.removeValueColumn = function (colKey, source) {
    if (source === void 0) {
      source = "api";
    }
    this.removeValueColumns([colKey], source);
  };
  ColumnController.prototype.removeValueColumns = function (keys, source) {
    if (source === void 0) {
      source = "api";
    }
    this.updatePrimaryColumnList(keys, this.valueColumns, false, this.setValueActive.bind(this, false), Events.EVENT_COLUMN_VALUE_CHANGED, source);
  };
  // returns the width we can set to this col, taking into consideration min and max widths
  ColumnController.prototype.normaliseColumnWidth = function (column, newWidth) {
    var minWidth = column.getMinWidth();
    if (exists(minWidth) && newWidth < minWidth) {
      newWidth = minWidth;
    }
    var maxWidth = column.getMaxWidth();
    if (exists(maxWidth) && column.isGreaterThanMax(newWidth)) {
      newWidth = maxWidth;
    }
    return newWidth;
  };
  ColumnController.prototype.getPrimaryOrGridColumn = function (key) {
    var column = this.getPrimaryColumn(key);
    return column || this.getGridColumn(key);
  };
  ColumnController.prototype.setColumnWidths = function (columnWidths, shiftKey,
  // @takeFromAdjacent - if user has 'shift' pressed, then pixels are taken from adjacent column
  finished,
  // @finished - ends up in the event, tells the user if more events are to come
  source) {
    var _this = this;
    if (source === void 0) {
      source = "api";
    }
    var sets = [];
    columnWidths.forEach(function (columnWidth) {
      var col = _this.getPrimaryOrGridColumn(columnWidth.key);
      if (!col) {
        return;
      }
      sets.push({
        width: columnWidth.newWidth,
        ratios: [1],
        columns: [col]
      });
      // if user wants to do shift resize by default, then we invert the shift operation
      var defaultIsShift = _this.gridOptionsWrapper.getColResizeDefault() === 'shift';
      if (defaultIsShift) {
        shiftKey = !shiftKey;
      }
      if (shiftKey) {
        var otherCol = _this.getDisplayedColAfter(col);
        if (!otherCol) {
          return;
        }
        var widthDiff = col.getActualWidth() - columnWidth.newWidth;
        var otherColWidth = otherCol.getActualWidth() + widthDiff;
        sets.push({
          width: otherColWidth,
          ratios: [1],
          columns: [otherCol]
        });
      }
    });
    if (sets.length === 0) {
      return;
    }
    this.resizeColumnSets(sets, finished, source);
  };
  ColumnController.prototype.checkMinAndMaxWidthsForSet = function (columnResizeSet) {
    var columns = columnResizeSet.columns,
      width = columnResizeSet.width;
    // every col has a min width, so sum them all up and see if we have enough room
    // for all the min widths
    var minWidthAccumulated = 0;
    var maxWidthAccumulated = 0;
    var maxWidthActive = true;
    columns.forEach(function (col) {
      var minWidth = col.getMinWidth();
      minWidthAccumulated += minWidth || 0;
      var maxWidth = col.getMaxWidth();
      if (exists(maxWidth) && maxWidth > 0) {
        maxWidthAccumulated += maxWidth;
      } else {
        // if at least one columns has no max width, it means the group of columns
        // then has no max width, as at least one column can take as much width as possible
        maxWidthActive = false;
      }
    });
    var minWidthPasses = width >= minWidthAccumulated;
    var maxWidthPasses = !maxWidthActive || width <= maxWidthAccumulated;
    return minWidthPasses && maxWidthPasses;
  };
  // method takes sets of columns and resizes them. either all sets will be resized, or nothing
  // be resized. this is used for example when user tries to resize a group and holds shift key,
  // then both the current group (grows), and the adjacent group (shrinks), will get resized,
  // so that's two sets for this method.
  ColumnController.prototype.resizeColumnSets = function (resizeSets, finished, source) {
    var passMinMaxCheck = !resizeSets || resizeSets.every(this.checkMinAndMaxWidthsForSet.bind(this));
    if (!passMinMaxCheck) {
      // even though we are not going to resize beyond min/max size, we still need to raise event when finished
      if (finished) {
        var columns = resizeSets && resizeSets.length > 0 ? resizeSets[0].columns : null;
        this.fireColumnResizedEvent(columns, finished, source);
      }
      return; // don't resize!
    }

    var changedCols = [];
    var allResizedCols = [];
    resizeSets.forEach(function (set) {
      var width = set.width,
        columns = set.columns,
        ratios = set.ratios;
      // keep track of pixels used, and last column gets the remaining,
      // to cater for rounding errors, and min width adjustments
      var newWidths = {};
      var finishedCols = {};
      columns.forEach(function (col) {
        return allResizedCols.push(col);
      });
      // the loop below goes through each col. if a col exceeds it's min/max width,
      // it then gets set to its min/max width and the column is removed marked as 'finished'
      // and the calculation is done again leaving this column out. take for example columns
      // {A, width: 50, maxWidth: 100}
      // {B, width: 50}
      // {C, width: 50}
      // and then the set is set to width 600 - on the first pass the grid tries to set each column
      // to 200. it checks A and sees 200 > 100 and so sets the width to 100. col A is then marked
      // as 'finished' and the calculation is done again with the remaining cols B and C, which end up
      // splitting the remaining 500 pixels.
      var finishedColsGrew = true;
      var loopCount = 0;
      var _loop_2 = function () {
        loopCount++;
        if (loopCount > 1000) {
          // this should never happen, but in the future, someone might introduce a bug here,
          // so we stop the browser from hanging and report bug properly
          console.error('AG Grid: infinite loop in resizeColumnSets');
          return "break";
        }
        finishedColsGrew = false;
        var subsetCols = [];
        var subsetRatioTotal = 0;
        var pixelsToDistribute = width;
        columns.forEach(function (col, index) {
          var thisColFinished = finishedCols[col.getId()];
          if (thisColFinished) {
            pixelsToDistribute -= newWidths[col.getId()];
          } else {
            subsetCols.push(col);
            var ratioThisCol = ratios[index];
            subsetRatioTotal += ratioThisCol;
          }
        });
        // because we are not using all of the ratios (cols can be missing),
        // we scale the ratio. if all columns are included, then subsetRatioTotal=1,
        // and so the ratioScale will be 1.
        var ratioScale = 1 / subsetRatioTotal;
        subsetCols.forEach(function (col, index) {
          var lastCol = index === subsetCols.length - 1;
          var colNewWidth;
          if (lastCol) {
            colNewWidth = pixelsToDistribute;
          } else {
            colNewWidth = Math.round(ratios[index] * width * ratioScale);
            pixelsToDistribute -= colNewWidth;
          }
          var minWidth = col.getMinWidth();
          var maxWidth = col.getMaxWidth();
          if (exists(minWidth) && colNewWidth < minWidth) {
            colNewWidth = minWidth;
            finishedCols[col.getId()] = true;
            finishedColsGrew = true;
          } else if (exists(maxWidth) && maxWidth > 0 && colNewWidth > maxWidth) {
            colNewWidth = maxWidth;
            finishedCols[col.getId()] = true;
            finishedColsGrew = true;
          }
          newWidths[col.getId()] = colNewWidth;
        });
      };
      while (finishedColsGrew) {
        var state_1 = _loop_2();
        if (state_1 === "break") break;
      }
      columns.forEach(function (col) {
        var newWidth = newWidths[col.getId()];
        if (col.getActualWidth() !== newWidth) {
          col.setActualWidth(newWidth, source);
          changedCols.push(col);
        }
      });
    });
    // if no cols changed, then no need to update more or send event.
    var atLeastOneColChanged = changedCols.length > 0;
    var flexedCols = this.refreshFlexedColumns({
      resizingCols: allResizedCols,
      skipSetLeft: true
    });
    if (atLeastOneColChanged) {
      this.setLeftValues(source);
      this.updateBodyWidths();
      this.checkViewportColumns();
    }
    // check for change first, to avoid unnecessary firing of events
    // however we always fire 'finished' events. this is important
    // when groups are resized, as if the group is changing slowly,
    // eg 1 pixel at a time, then each change will fire change events
    // in all the columns in the group, but only one with get the pixel.
    var colsForEvent = allResizedCols.concat(flexedCols);
    if (atLeastOneColChanged || finished) {
      this.fireColumnResizedEvent(colsForEvent, finished, source, flexedCols);
    }
  };
  ColumnController.prototype.setColumnAggFunc = function (key, aggFunc, source) {
    if (source === void 0) {
      source = "api";
    }
    if (!key) {
      return;
    }
    var column = this.getPrimaryColumn(key);
    if (!column) {
      return;
    }
    column.setAggFunc(aggFunc);
    this.fireColumnEvent(Events.EVENT_COLUMN_VALUE_CHANGED, [column], source);
  };
  ColumnController.prototype.fireColumnEvent = function (type, columns, source) {
    var event = {
      type: type,
      columns: columns,
      column: columns && columns.length == 1 ? columns[0] : null,
      api: this.gridApi,
      columnApi: this.columnApi,
      source: source
    };
    this.eventService.dispatchEvent(event);
  };
  ColumnController.prototype.moveRowGroupColumn = function (fromIndex, toIndex, source) {
    if (source === void 0) {
      source = "api";
    }
    var column = this.rowGroupColumns[fromIndex];
    this.rowGroupColumns.splice(fromIndex, 1);
    this.rowGroupColumns.splice(toIndex, 0, column);
    var event = {
      type: Events.EVENT_COLUMN_ROW_GROUP_CHANGED,
      columns: this.rowGroupColumns,
      column: this.rowGroupColumns.length === 1 ? this.rowGroupColumns[0] : null,
      api: this.gridApi,
      columnApi: this.columnApi,
      source: source
    };
    this.eventService.dispatchEvent(event);
  };
  ColumnController.prototype.moveColumns = function (columnsToMoveKeys, toIndex, source) {
    if (source === void 0) {
      source = "api";
    }
    this.columnAnimationService.start();
    if (toIndex > this.gridColumns.length - columnsToMoveKeys.length) {
      console.warn('AG Grid: tried to insert columns in invalid location, toIndex = ' + toIndex);
      console.warn('AG Grid: remember that you should not count the moving columns when calculating the new index');
      return;
    }
    // we want to pull all the columns out first and put them into an ordered list
    var columnsToMove = this.getGridColumns(columnsToMoveKeys);
    var failedRules = !this.doesMovePassRules(columnsToMove, toIndex);
    if (failedRules) {
      return;
    }
    moveInArray(this.gridColumns, columnsToMove, toIndex);
    this.updateDisplayedColumns(source);
    var event = {
      type: Events.EVENT_COLUMN_MOVED,
      columns: columnsToMove,
      column: columnsToMove.length === 1 ? columnsToMove[0] : null,
      toIndex: toIndex,
      api: this.gridApi,
      columnApi: this.columnApi,
      source: source
    };
    this.eventService.dispatchEvent(event);
    this.columnAnimationService.finish();
  };
  ColumnController.prototype.doesMovePassRules = function (columnsToMove, toIndex) {
    // make a copy of what the grid columns would look like after the move
    var proposedColumnOrder = this.gridColumns.slice();
    moveInArray(proposedColumnOrder, columnsToMove, toIndex);
    // then check that the new proposed order of the columns passes all rules
    if (!this.doesMovePassMarryChildren(proposedColumnOrder)) {
      return false;
    }
    if (!this.doesMovePassLockedPositions(proposedColumnOrder)) {
      return false;
    }
    return true;
  };
  // returns the provided cols sorted in same order as they appear in grid columns. eg if grid columns
  // contains [a,b,c,d,e] and col passed is [e,a] then the passed cols are sorted into [a,e]
  ColumnController.prototype.sortColumnsLikeGridColumns = function (cols) {
    var _this = this;
    if (!cols || cols.length <= 1) {
      return;
    }
    var notAllColsInGridColumns = cols.filter(function (c) {
      return _this.gridColumns.indexOf(c) < 0;
    }).length > 0;
    if (notAllColsInGridColumns) {
      return;
    }
    cols.sort(function (a, b) {
      var indexA = _this.gridColumns.indexOf(a);
      var indexB = _this.gridColumns.indexOf(b);
      return indexA - indexB;
    });
  };
  ColumnController.prototype.doesMovePassLockedPositions = function (proposedColumnOrder) {
    var foundNonLocked = false;
    var rulePassed = true;
    // go though the cols, see if any non-locked appear before any locked
    proposedColumnOrder.forEach(function (col) {
      if (col.getColDef().lockPosition) {
        if (foundNonLocked) {
          rulePassed = false;
        }
      } else {
        foundNonLocked = true;
      }
    });
    return rulePassed;
  };
  ColumnController.prototype.doesMovePassMarryChildren = function (allColumnsCopy) {
    var rulePassed = true;
    this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, function (child) {
      if (!(child instanceof OriginalColumnGroup)) {
        return;
      }
      var columnGroup = child;
      var colGroupDef = columnGroup.getColGroupDef();
      var marryChildren = colGroupDef && colGroupDef.marryChildren;
      if (!marryChildren) {
        return;
      }
      var newIndexes = [];
      columnGroup.getLeafColumns().forEach(function (col) {
        var newColIndex = allColumnsCopy.indexOf(col);
        newIndexes.push(newColIndex);
      });
      var maxIndex = Math.max.apply(Math, newIndexes);
      var minIndex = Math.min.apply(Math, newIndexes);
      // spread is how far the first column in this group is away from the last column
      var spread = maxIndex - minIndex;
      var maxSpread = columnGroup.getLeafColumns().length - 1;
      // if the columns
      if (spread > maxSpread) {
        rulePassed = false;
      }
      // console.log(`maxIndex = ${maxIndex}, minIndex = ${minIndex}, spread = ${spread}, maxSpread = ${maxSpread}, fail = ${spread > (count-1)}`)
      // console.log(allColumnsCopy.map( col => col.getColDef().field).join(','));
    });

    return rulePassed;
  };
  ColumnController.prototype.moveColumn = function (key, toIndex, source) {
    if (source === void 0) {
      source = "api";
    }
    this.moveColumns([key], toIndex, source);
  };
  ColumnController.prototype.moveColumnByIndex = function (fromIndex, toIndex, source) {
    if (source === void 0) {
      source = "api";
    }
    var column = this.gridColumns[fromIndex];
    this.moveColumn(column, toIndex, source);
  };
  ColumnController.prototype.getColumnDefs = function () {
    var _this = this;
    var cols = this.primaryColumns.slice();
    if (this.gridColsArePrimary) {
      cols.sort(function (a, b) {
        return _this.gridColumns.indexOf(a) - _this.gridColumns.indexOf(b);
      });
    } else if (this.lastPrimaryOrder) {
      cols.sort(function (a, b) {
        return _this.lastPrimaryOrder.indexOf(a) - _this.lastPrimaryOrder.indexOf(b);
      });
    }
    return this.columnDefFactory.buildColumnDefs(cols, this.rowGroupColumns, this.pivotColumns);
  };
  // used by:
  // + angularGrid -> for setting body width
  // + rowController -> setting main row widths (when inserting and resizing)
  // need to cache this
  ColumnController.prototype.getBodyContainerWidth = function () {
    return this.bodyWidth;
  };
  ColumnController.prototype.getContainerWidth = function (pinned) {
    switch (pinned) {
      case Constants.PINNED_LEFT:
        return this.leftWidth;
      case Constants.PINNED_RIGHT:
        return this.rightWidth;
      default:
        return this.bodyWidth;
    }
  };
  // after setColumnWidth or updateGroupsAndDisplayedColumns
  ColumnController.prototype.updateBodyWidths = function () {
    var newBodyWidth = this.getWidthOfColsInList(this.displayedColumnsCenter);
    var newLeftWidth = this.getWidthOfColsInList(this.displayedColumnsLeft);
    var newRightWidth = this.getWidthOfColsInList(this.displayedColumnsRight);
    // this is used by virtual col calculation, for RTL only, as a change to body width can impact displayed
    // columns, due to RTL inverting the y coordinates
    this.bodyWidthDirty = this.bodyWidth !== newBodyWidth;
    var atLeastOneChanged = this.bodyWidth !== newBodyWidth || this.leftWidth !== newLeftWidth || this.rightWidth !== newRightWidth;
    if (atLeastOneChanged) {
      this.bodyWidth = newBodyWidth;
      this.leftWidth = newLeftWidth;
      this.rightWidth = newRightWidth;
      // when this fires, it is picked up by the gridPanel, which ends up in
      // gridPanel calling setWidthAndScrollPosition(), which in turn calls setViewportPosition()
      var event_3 = {
        type: Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(event_3);
    }
  };
  // + rowController
  ColumnController.prototype.getValueColumns = function () {
    return this.valueColumns ? this.valueColumns : [];
  };
  // + rowController
  ColumnController.prototype.getPivotColumns = function () {
    return this.pivotColumns ? this.pivotColumns : [];
  };
  // + clientSideRowModel
  ColumnController.prototype.isPivotActive = function () {
    return this.pivotColumns && this.pivotColumns.length > 0 && this.pivotMode;
  };
  // + toolPanel
  ColumnController.prototype.getRowGroupColumns = function () {
    return this.rowGroupColumns ? this.rowGroupColumns : [];
  };
  // + rowController -> while inserting rows
  ColumnController.prototype.getDisplayedCenterColumns = function () {
    return this.displayedColumnsCenter;
  };
  // + rowController -> while inserting rows
  ColumnController.prototype.getDisplayedLeftColumns = function () {
    return this.displayedColumnsLeft;
  };
  ColumnController.prototype.getDisplayedRightColumns = function () {
    return this.displayedColumnsRight;
  };
  ColumnController.prototype.getDisplayedColumns = function (type) {
    switch (type) {
      case Constants.PINNED_LEFT:
        return this.getDisplayedLeftColumns();
      case Constants.PINNED_RIGHT:
        return this.getDisplayedRightColumns();
      default:
        return this.getDisplayedCenterColumns();
    }
  };
  // used by:
  // + clientSideRowController -> sorting, building quick filter text
  // + headerRenderer -> sorting (clearing icon)
  ColumnController.prototype.getAllPrimaryColumns = function () {
    return this.primaryColumns ? this.primaryColumns.slice() : null;
  };
  ColumnController.prototype.getSecondaryColumns = function () {
    return this.secondaryColumns ? this.secondaryColumns.slice() : null;
  };
  ColumnController.prototype.getAllColumnsForQuickFilter = function () {
    return this.columnsForQuickFilter;
  };
  // + moveColumnController
  ColumnController.prototype.getAllGridColumns = function () {
    return this.gridColumns;
  };
  ColumnController.prototype.isEmpty = function () {
    return missingOrEmpty(this.gridColumns);
  };
  ColumnController.prototype.isRowGroupEmpty = function () {
    return missingOrEmpty(this.rowGroupColumns);
  };
  ColumnController.prototype.setColumnVisible = function (key, visible, source) {
    if (source === void 0) {
      source = "api";
    }
    this.setColumnsVisible([key], visible, source);
  };
  ColumnController.prototype.setColumnsVisible = function (keys, visible, source) {
    var _this = this;
    if (visible === void 0) {
      visible = false;
    }
    if (source === void 0) {
      source = "api";
    }
    this.columnAnimationService.start();
    this.actionOnGridColumns(keys, function (column) {
      if (column.isVisible() !== visible) {
        column.setVisible(visible, source);
        return true;
      }
      return false;
    }, source, function () {
      var event = {
        type: Events.EVENT_COLUMN_VISIBLE,
        visible: visible,
        column: null,
        columns: null,
        api: _this.gridApi,
        columnApi: _this.columnApi,
        source: source
      };
      return event;
    });
    this.columnAnimationService.finish();
  };
  ColumnController.prototype.setColumnPinned = function (key, pinned, source) {
    if (source === void 0) {
      source = "api";
    }
    if (key) {
      this.setColumnsPinned([key], pinned, source);
    }
  };
  ColumnController.prototype.setColumnsPinned = function (keys, pinned, source) {
    var _this = this;
    if (source === void 0) {
      source = "api";
    }
    if (this.gridOptionsWrapper.getDomLayout() === 'print') {
      console.warn("Changing the column pinning status is not allowed with domLayout='print'");
      return;
    }
    this.columnAnimationService.start();
    var actualPinned;
    if (pinned === true || pinned === Constants.PINNED_LEFT) {
      actualPinned = Constants.PINNED_LEFT;
    } else if (pinned === Constants.PINNED_RIGHT) {
      actualPinned = Constants.PINNED_RIGHT;
    } else {
      actualPinned = null;
    }
    this.actionOnGridColumns(keys, function (col) {
      if (col.getPinned() !== actualPinned) {
        col.setPinned(actualPinned);
        return true;
      }
      return false;
    }, source, function () {
      var event = {
        type: Events.EVENT_COLUMN_PINNED,
        pinned: actualPinned,
        column: null,
        columns: null,
        api: _this.gridApi,
        columnApi: _this.columnApi,
        source: source
      };
      return event;
    });
    this.columnAnimationService.finish();
  };
  // does an action on a set of columns. provides common functionality for looking up the
  // columns based on key, getting a list of effected columns, and then updated the event
  // with either one column (if it was just one col) or a list of columns
  // used by: autoResize, setVisible, setPinned
  ColumnController.prototype.actionOnGridColumns = function (
  // the column keys this action will be on
  keys,
  // the action to do - if this returns false, the column was skipped
  // and won't be included in the event
  action,
  // should return back a column event of the right type
  source, createEvent) {
    var _this = this;
    if (missingOrEmpty(keys)) {
      return;
    }
    var updatedColumns = [];
    keys.forEach(function (key) {
      var column = _this.getGridColumn(key);
      if (!column) {
        return;
      }
      // need to check for false with type (ie !== instead of !=)
      // as not returning anything (undefined) would also be false
      var resultOfAction = action(column);
      if (resultOfAction !== false) {
        updatedColumns.push(column);
      }
    });
    if (!updatedColumns.length) {
      return;
    }
    this.updateDisplayedColumns(source);
    if (exists(createEvent) && createEvent) {
      var event_4 = createEvent();
      event_4.columns = updatedColumns;
      event_4.column = updatedColumns.length === 1 ? updatedColumns[0] : null;
      this.eventService.dispatchEvent(event_4);
    }
  };
  ColumnController.prototype.getDisplayedColBefore = function (col) {
    var allDisplayedColumns = this.getAllDisplayedColumns();
    var oldIndex = allDisplayedColumns.indexOf(col);
    if (oldIndex > 0) {
      return allDisplayedColumns[oldIndex - 1];
    }
    return null;
  };
  // used by:
  // + rowRenderer -> for navigation
  ColumnController.prototype.getDisplayedColAfter = function (col) {
    var allDisplayedColumns = this.getAllDisplayedColumns();
    var oldIndex = allDisplayedColumns.indexOf(col);
    if (oldIndex < allDisplayedColumns.length - 1) {
      return allDisplayedColumns[oldIndex + 1];
    }
    return null;
  };
  ColumnController.prototype.getDisplayedGroupAfter = function (columnGroup) {
    return this.getDisplayedGroupAtDirection(columnGroup, 'After');
  };
  ColumnController.prototype.getDisplayedGroupBefore = function (columnGroup) {
    return this.getDisplayedGroupAtDirection(columnGroup, 'Before');
  };
  ColumnController.prototype.getDisplayedGroupAtDirection = function (columnGroup, direction) {
    // pick the last displayed column in this group
    var requiredLevel = columnGroup.getOriginalColumnGroup().getLevel() + columnGroup.getPaddingLevel();
    var colGroupLeafColumns = columnGroup.getDisplayedLeafColumns();
    var col = direction === 'After' ? last(colGroupLeafColumns) : colGroupLeafColumns[0];
    var getDisplayColMethod = "getDisplayedCol" + direction;
    while (true) {
      // keep moving to the next col, until we get to another group
      var column = this[getDisplayColMethod](col);
      if (!column) {
        return null;
      }
      var groupPointer = this.getColumnGroupAtLevel(column, requiredLevel);
      if (groupPointer !== columnGroup) {
        return groupPointer;
      }
    }
  };
  ColumnController.prototype.getColumnGroupAtLevel = function (column, level) {
    // get group at same level as the one we are looking for
    var groupPointer = column.getParent();
    var originalGroupLevel;
    var groupPointerLevel;
    while (true) {
      var groupPointerOriginalColumnGroup = groupPointer.getOriginalColumnGroup();
      originalGroupLevel = groupPointerOriginalColumnGroup.getLevel();
      groupPointerLevel = groupPointer.getPaddingLevel();
      if (originalGroupLevel + groupPointerLevel <= level) {
        break;
      }
      groupPointer = groupPointer.getParent();
    }
    return groupPointer;
  };
  ColumnController.prototype.isPinningLeft = function () {
    return this.displayedColumnsLeft.length > 0;
  };
  ColumnController.prototype.isPinningRight = function () {
    return this.displayedColumnsRight.length > 0;
  };
  ColumnController.prototype.getPrimaryAndSecondaryAndAutoColumns = function () {
    var result = this.primaryColumns ? this.primaryColumns.slice(0) : [];
    if (this.groupAutoColumns && exists(this.groupAutoColumns)) {
      this.groupAutoColumns.forEach(function (col) {
        return result.push(col);
      });
    }
    if (this.secondaryColumnsPresent && this.secondaryColumns) {
      this.secondaryColumns.forEach(function (column) {
        return result.push(column);
      });
    }
    return result;
  };
  ColumnController.prototype.createStateItemFromColumn = function (column) {
    var rowGroupIndex = column.isRowGroupActive() ? this.rowGroupColumns.indexOf(column) : null;
    var pivotIndex = column.isPivotActive() ? this.pivotColumns.indexOf(column) : null;
    var aggFunc = column.isValueActive() ? column.getAggFunc() : null;
    var sort = column.getSort() != null ? column.getSort() : null;
    var sortIndex = column.getSortIndex() != null ? column.getSortIndex() : null;
    var flex = column.getFlex() != null && column.getFlex() > 0 ? column.getFlex() : null;
    var res = {
      colId: column.getColId(),
      width: column.getActualWidth(),
      hide: !column.isVisible(),
      pinned: column.getPinned(),
      sort: sort,
      sortIndex: sortIndex,
      aggFunc: aggFunc,
      rowGroup: column.isRowGroupActive(),
      rowGroupIndex: rowGroupIndex,
      pivot: column.isPivotActive(),
      pivotIndex: pivotIndex,
      flex: flex
    };
    return res;
  };
  ColumnController.prototype.getColumnState = function () {
    if (missing(this.primaryColumns) || !this.isAlive()) {
      return [];
    }
    var primaryColumnState = this.primaryColumns.map(this.createStateItemFromColumn.bind(this));
    var groupAutoColumnState = this.groupAutoColumns
    // if groupAutoCols, then include them
    ? this.groupAutoColumns.map(this.createStateItemFromColumn.bind(this))
    // otherwise no
    : [];
    var columnStateList = groupAutoColumnState.concat(primaryColumnState);
    if (!this.pivotMode) {
      this.orderColumnStateList(columnStateList);
    }
    return columnStateList;
  };
  ColumnController.prototype.orderColumnStateList = function (columnStateList) {
    // for fast looking, store the index of each column
    var gridColumnIdMap = convertToMap(this.gridColumns.map(function (col, index) {
      return [col.getColId(), index];
    }));
    columnStateList.sort(function (itemA, itemB) {
      var posA = gridColumnIdMap.has(itemA.colId) ? gridColumnIdMap.get(itemA.colId) : -1;
      var posB = gridColumnIdMap.has(itemB.colId) ? gridColumnIdMap.get(itemB.colId) : -1;
      return posA - posB;
    });
  };
  ColumnController.prototype.resetColumnState = function (source) {
    // NOTE = there is one bug here that no customer has noticed - if a column has colDef.lockPosition,
    // this is ignored  below when ordering the cols. to work, we should always put lockPosition cols first.
    // As a work around, developers should just put lockPosition columns first in their colDef list.
    if (source === void 0) {
      source = "api";
    }
    // we can't use 'allColumns' as the order might of messed up, so get the primary ordered list
    var primaryColumns = this.getColumnsFromTree(this.primaryColumnTree);
    var columnStates = [];
    // we start at 1000, so if user has mix of rowGroup and group specified, it will work with both.
    // eg IF user has ColA.rowGroupIndex=0, ColB.rowGroupIndex=1, ColC.rowGroup=true,
    // THEN result will be ColA.rowGroupIndex=0, ColB.rowGroupIndex=1, ColC.rowGroup=1000
    var letRowGroupIndex = 1000;
    var letPivotIndex = 1000;
    var colsToProcess = [];
    if (this.groupAutoColumns) {
      colsToProcess = colsToProcess.concat(this.groupAutoColumns);
    }
    if (primaryColumns) {
      colsToProcess = colsToProcess.concat(primaryColumns);
    }
    colsToProcess.forEach(function (column) {
      var colDef = column.getColDef();
      var sort = colDef.sort != null ? colDef.sort : null;
      var sortIndex = colDef.sortIndex;
      var hide = colDef.hide ? true : false;
      var pinned = colDef.pinned ? colDef.pinned : null;
      var width = colDef.width;
      var flex = colDef.flex != null ? colDef.flex : null;
      var rowGroupIndex = colDef.rowGroupIndex;
      var rowGroup = colDef.rowGroup;
      if (rowGroupIndex == null && (rowGroup == null || rowGroup == false)) {
        rowGroupIndex = null;
        rowGroup = null;
      }
      var pivotIndex = colDef.pivotIndex;
      var pivot = colDef.pivot;
      if (pivotIndex == null && (pivot == null || pivot == false)) {
        pivotIndex = null;
        pivot = null;
      }
      var aggFunc = colDef.aggFunc != null ? colDef.aggFunc : null;
      var stateItem = {
        colId: column.getColId(),
        sort: sort,
        sortIndex: sortIndex,
        hide: hide,
        pinned: pinned,
        width: width,
        flex: flex,
        rowGroup: rowGroup,
        rowGroupIndex: rowGroupIndex,
        pivot: pivot,
        pivotIndex: pivotIndex,
        aggFunc: aggFunc
      };
      if (missing(rowGroupIndex) && rowGroup) {
        stateItem.rowGroupIndex = letRowGroupIndex++;
      }
      if (missing(pivotIndex) && pivot) {
        stateItem.pivotIndex = letPivotIndex++;
      }
      columnStates.push(stateItem);
    });
    this.applyColumnState({
      state: columnStates,
      applyOrder: true
    }, source);
  };
  ColumnController.prototype.applyColumnState = function (params, source) {
    var _this = this;
    if (source === void 0) {
      source = "api";
    }
    if (missingOrEmpty(this.primaryColumns)) {
      return false;
    }
    if (params && params.state && !params.state.forEach) {
      console.warn('AG Grid: applyColumnState() - the state attribute should be an array, however an array was not found. Please provide an array of items (one for each col you want to change) for state.');
      return false;
    }
    this.columnAnimationService.start();
    var raiseEventsFunc = this.compareColumnStatesAndRaiseEvents(source);
    this.autoGroupsNeedBuilding = true;
    // at the end below, this list will have all columns we got no state for
    var columnsWithNoState = this.primaryColumns.slice();
    var success = true;
    var rowGroupIndexes = {};
    var pivotIndexes = {};
    var autoGroupColumnStates = [];
    var previousRowGroupCols = this.rowGroupColumns.slice();
    var previousPivotCols = this.pivotColumns.slice();
    if (params.state) {
      params.state.forEach(function (state) {
        var groupAutoColumnId = Constants.GROUP_AUTO_COLUMN_ID;
        var colId = state.colId || '';
        // auto group columns are re-created so deferring syncing with ColumnState
        var isAutoGroupColumn = startsWith(colId, groupAutoColumnId);
        if (isAutoGroupColumn) {
          autoGroupColumnStates.push(state);
          return;
        }
        var column = _this.getPrimaryColumn(colId);
        if (!column) {
          // we don't log the failure, as it's possible the user is applying that has extra
          // cols in it. for example they could of save while row-grouping (so state includes
          // auto-group column) and then applied state when not grouping (so the auto-group
          // column would be in the state but no used).
          success = false;
        } else {
          _this.syncColumnWithStateItem(column, state, params.defaultState, rowGroupIndexes, pivotIndexes, false, source);
          removeFromArray(columnsWithNoState, column);
        }
      });
    }
    // anything left over, we got no data for, so add in the column as non-value, non-rowGroup and hidden
    var applyDefaultsFunc = function (col) {
      return _this.syncColumnWithStateItem(col, null, params.defaultState, rowGroupIndexes, pivotIndexes, false, source);
    };
    columnsWithNoState.forEach(applyDefaultsFunc);
    // sort the lists according to the indexes that were provided
    var comparator = function (indexes, oldList, colA, colB) {
      var indexA = indexes[colA.getId()];
      var indexB = indexes[colB.getId()];
      var aHasIndex = indexA != null;
      var bHasIndex = indexB != null;
      if (aHasIndex && bHasIndex) {
        // both a and b are new cols with index, so sort on index
        return indexA - indexB;
      }
      if (aHasIndex) {
        // a has an index, so it should be before a
        return -1;
      }
      if (bHasIndex) {
        // b has an index, so it should be before a
        return 1;
      }
      var oldIndexA = oldList.indexOf(colA);
      var oldIndexB = oldList.indexOf(colB);
      var aHasOldIndex = oldIndexA >= 0;
      var bHasOldIndex = oldIndexB >= 0;
      if (aHasOldIndex && bHasOldIndex) {
        // both a and b are old cols, so sort based on last order
        return oldIndexA - oldIndexB;
      }
      if (aHasOldIndex) {
        // a is old, b is new, so b is first
        return -1;
      }
      // this bit does matter, means both are new cols
      // but without index or that b is old and a is new
      return 1;
    };
    this.rowGroupColumns.sort(comparator.bind(this, rowGroupIndexes, previousRowGroupCols));
    this.pivotColumns.sort(comparator.bind(this, pivotIndexes, previousPivotCols));
    this.updateGridColumns();
    // sync newly created auto group columns with ColumnState
    var autoGroupColsCopy = this.groupAutoColumns ? this.groupAutoColumns.slice() : [];
    autoGroupColumnStates.forEach(function (stateItem) {
      var autoCol = _this.getAutoColumn(stateItem.colId);
      removeFromArray(autoGroupColsCopy, autoCol);
      _this.syncColumnWithStateItem(autoCol, stateItem, params.defaultState, null, null, true, source);
    });
    // autogroup cols with nothing else, apply the default
    autoGroupColsCopy.forEach(applyDefaultsFunc);
    this.applyOrderAfterApplyState(params);
    this.updateDisplayedColumns(source);
    this.dispatchEverythingChanged(source);
    raiseEventsFunc();
    this.columnAnimationService.finish();
    return success;
  };
  ColumnController.prototype.applyOrderAfterApplyState = function (params) {
    if (!this.gridColsArePrimary || !params.applyOrder || !params.state) {
      return;
    }
    var newOrder = [];
    var processedColIds = {};
    var gridColumnsMap = {};
    this.gridColumns.forEach(function (col) {
      return gridColumnsMap[col.getId()] = col;
    });
    params.state.forEach(function (item) {
      if (!item.colId || processedColIds[item.colId]) {
        return;
      }
      var col = gridColumnsMap[item.colId];
      if (col) {
        newOrder.push(col);
        processedColIds[item.colId] = true;
      }
    });
    // add in all other columns
    this.gridColumns.forEach(function (col) {
      if (!processedColIds[col.getColId()]) {
        newOrder.push(col);
      }
    });
    // this is already done in updateGridColumns, however we changed the order above (to match the order of the state
    // columns) so we need to do it again. we could of put logic into the order above to take into account fixed
    // columns, however if we did then we would have logic for updating fixed columns twice. reusing the logic here
    // is less sexy for the code here, but it keeps consistency.
    newOrder = this.putFixedColumnsFirst(newOrder);
    if (!this.doesMovePassMarryChildren(newOrder)) {
      console.warn('AG Grid: Applying column order broke a group where columns should be married together. Applying new order has been discarded.');
      return;
    }
    this.gridColumns = newOrder;
  };
  ColumnController.prototype.compareColumnStatesAndRaiseEvents = function (source) {
    var _this = this;
    // if no columns to begin with, then it means we are setting columns for the first time, so
    // there should be no events fired to show differences in columns.
    var colsPreviouslyExisted = !!this.columnDefs;
    if (!colsPreviouslyExisted) {
      return function () {};
    }
    var startState = {
      rowGroupColumns: this.rowGroupColumns.slice(),
      pivotColumns: this.pivotColumns.slice(),
      valueColumns: this.valueColumns.slice()
    };
    var columnStateBefore = this.getColumnState();
    var columnStateBeforeMap = {};
    columnStateBefore.forEach(function (col) {
      columnStateBeforeMap[col.colId] = col;
    });
    return function () {
      if (_this.gridOptionsWrapper.isSuppressColumnStateEvents()) {
        return;
      }
      // raises generic ColumnEvents where all columns are returned rather than what has changed
      var raiseWhenListsDifferent = function (eventType, colsBefore, colsAfter, idMapper) {
        var beforeList = colsBefore.map(idMapper).sort();
        var afterList = colsAfter.map(idMapper).sort();
        var unchanged = areEqual(beforeList, afterList);
        if (unchanged) {
          return;
        }
        // returning all columns rather than what has changed!
        var event = {
          type: eventType,
          columns: colsAfter,
          column: colsAfter.length === 1 ? colsAfter[0] : null,
          api: _this.gridApi,
          columnApi: _this.columnApi,
          source: source
        };
        _this.eventService.dispatchEvent(event);
      };
      // determines which columns have changed according to supplied predicate
      var getChangedColumns = function (changedPredicate) {
        var changedColumns = [];
        _this.gridColumns.forEach(function (column) {
          var colStateBefore = columnStateBeforeMap[column.getColId()];
          if (colStateBefore && changedPredicate(colStateBefore, column)) {
            changedColumns.push(column);
          }
        });
        return changedColumns;
      };
      var columnIdMapper = function (c) {
        return c.getColId();
      };
      raiseWhenListsDifferent(Events.EVENT_COLUMN_ROW_GROUP_CHANGED, startState.rowGroupColumns, _this.rowGroupColumns, columnIdMapper);
      raiseWhenListsDifferent(Events.EVENT_COLUMN_PIVOT_CHANGED, startState.pivotColumns, _this.pivotColumns, columnIdMapper);
      var valueChangePredicate = function (cs, c) {
        var oldActive = cs.aggFunc != null;
        var activeChanged = oldActive != c.isValueActive();
        // we only check aggFunc if the agg is active
        var aggFuncChanged = oldActive && cs.aggFunc != c.getAggFunc();
        return activeChanged || aggFuncChanged;
      };
      var changedValues = getChangedColumns(valueChangePredicate);
      if (changedValues.length > 0) {
        // we pass all value columns, now the ones that changed. this is the same
        // as pivot and rowGroup cols, but different to all other properties below.
        // this is more for backwards compatibility, as it's always been this way.
        // really it should be the other way, as the order of the cols makes no difference
        // for valueColumns (apart from displaying them in the tool panel).
        _this.fireColumnEvent(Events.EVENT_COLUMN_VALUE_CHANGED, _this.valueColumns, source);
      }
      var resizeChangePredicate = function (cs, c) {
        return cs.width != c.getActualWidth();
      };
      _this.fireColumnResizedEvent(getChangedColumns(resizeChangePredicate), true, source);
      var pinnedChangePredicate = function (cs, c) {
        return cs.pinned != c.getPinned();
      };
      _this.raiseColumnPinnedEvent(getChangedColumns(pinnedChangePredicate), source);
      var visibilityChangePredicate = function (cs, c) {
        return cs.hide == c.isVisible();
      };
      _this.raiseColumnVisibleEvent(getChangedColumns(visibilityChangePredicate), source);
      var sortChangePredicate = function (cs, c) {
        return cs.sort != c.getSort() || cs.sortIndex != c.getSortIndex();
      };
      if (getChangedColumns(sortChangePredicate).length > 0) {
        _this.sortController.dispatchSortChangedEvents();
      }
      // special handling for moved column events
      _this.raiseColumnMovedEvent(columnStateBefore, source);
    };
  };
  ColumnController.prototype.raiseColumnPinnedEvent = function (changedColumns, source) {
    if (!changedColumns.length) {
      return;
    }
    // if just one column, we use this, otherwise we don't include the col
    var column = changedColumns.length === 1 ? changedColumns[0] : null;
    // only include visible if it's common in all columns
    var pinned = this.getCommonValue(changedColumns, function (col) {
      return col.getPinned();
    });
    var event = {
      type: Events.EVENT_COLUMN_PINNED,
      // mistake in typing, 'undefined' should be allowed, as 'null' means 'not pinned'
      pinned: pinned != null ? pinned : null,
      columns: changedColumns,
      column: column,
      api: this.gridApi,
      columnApi: this.columnApi,
      source: source
    };
    this.eventService.dispatchEvent(event);
  };
  ColumnController.prototype.getCommonValue = function (cols, valueGetter) {
    if (!cols || cols.length == 0) {
      return undefined;
    }
    // compare each value to the first value. if nothing differs, then value is common so return it.
    var firstValue = valueGetter(cols[0]);
    for (var i = 1; i < cols.length; i++) {
      if (firstValue !== valueGetter(cols[i])) {
        // values differ, no common value
        return undefined;
      }
    }
    return firstValue;
  };
  ColumnController.prototype.raiseColumnVisibleEvent = function (changedColumns, source) {
    if (!changedColumns.length) {
      return;
    }
    // if just one column, we use this, otherwise we don't include the col
    var column = changedColumns.length === 1 ? changedColumns[0] : null;
    // only include visible if it's common in all columns
    var visible = this.getCommonValue(changedColumns, function (col) {
      return col.isVisible();
    });
    var event = {
      type: Events.EVENT_COLUMN_VISIBLE,
      visible: visible,
      columns: changedColumns,
      column: column,
      api: this.gridApi,
      columnApi: this.columnApi,
      source: source
    };
    this.eventService.dispatchEvent(event);
  };
  ColumnController.prototype.raiseColumnMovedEvent = function (colStateBefore, source) {
    // we are only interested in columns that were both present and visible before and after
    var _this = this;
    var colStateAfter = this.getColumnState();
    var colStateAfterMapped = {};
    colStateAfter.forEach(function (s) {
      return colStateAfterMapped[s.colId] = s;
    });
    // get id's of cols in both before and after lists
    var colsIntersectIds = {};
    colStateBefore.forEach(function (s) {
      if (colStateAfterMapped[s.colId]) {
        colsIntersectIds[s.colId] = true;
      }
    });
    // filter state lists, so we only have cols that were present before and after
    var beforeFiltered = filter(colStateBefore, function (c) {
      return colsIntersectIds[c.colId];
    });
    var afterFiltered = filter(colStateAfter, function (c) {
      return colsIntersectIds[c.colId];
    });
    // see if any cols are in a different location
    var movedColumns = [];
    afterFiltered.forEach(function (csAfter, index) {
      var csBefore = beforeFiltered && beforeFiltered[index];
      if (csBefore && csBefore.colId !== csAfter.colId) {
        var gridCol = _this.getGridColumn(csBefore.colId);
        if (gridCol) {
          movedColumns.push(gridCol);
        }
      }
    });
    if (!movedColumns.length) {
      return;
    }
    var event = {
      type: Events.EVENT_COLUMN_MOVED,
      columns: movedColumns,
      column: null,
      api: this.gridApi,
      columnApi: this.columnApi,
      source: source
    };
    this.eventService.dispatchEvent(event);
  };
  ColumnController.prototype.syncColumnWithStateItem = function (column, stateItem, defaultState, rowGroupIndexes, pivotIndexes, autoCol, source) {
    if (!column) {
      return;
    }
    var getValue = function (key1, key2) {
      var stateAny = stateItem;
      var defaultAny = defaultState;
      var obj = {
        value1: undefined,
        value2: undefined
      };
      var calculated = false;
      if (stateAny) {
        if (stateAny[key1] !== undefined) {
          obj.value1 = stateAny[key1];
          calculated = true;
        }
        if (exists(key2) && stateAny[key2] !== undefined) {
          obj.value2 = stateAny[key2];
          calculated = true;
        }
      }
      if (!calculated && defaultAny) {
        if (defaultAny[key1] !== undefined) {
          obj.value1 = defaultAny[key1];
        }
        if (exists(key2) && defaultAny[key2] !== undefined) {
          obj.value2 = defaultAny[key2];
        }
      }
      return obj;
    };
    // following ensures we are left with boolean true or false, eg converts (null, undefined, 0) all to true
    var hide = getValue('hide').value1;
    if (hide !== undefined) {
      column.setVisible(!hide, source);
    }
    // sets pinned to 'left' or 'right'
    var pinned = getValue('pinned').value1;
    if (pinned !== undefined) {
      column.setPinned(pinned);
    }
    // if width provided and valid, use it, otherwise stick with the old width
    var minColWidth = this.gridOptionsWrapper.getMinColWidth();
    // flex
    var flex = getValue('flex').value1;
    if (flex !== undefined) {
      column.setFlex(flex);
    }
    // width - we only set width if column is not flexing
    var noFlexThisCol = column.getFlex() <= 0;
    if (noFlexThisCol) {
      // both null and undefined means we skip, as it's not possible to 'clear' width (a column must have a width)
      var width = getValue('width').value1;
      if (width != null) {
        if (minColWidth && width >= minColWidth) {
          column.setActualWidth(width, source);
        }
      }
    }
    var sort = getValue('sort').value1;
    if (sort !== undefined) {
      if (sort === Constants.SORT_DESC || sort === Constants.SORT_ASC) {
        column.setSort(sort);
      } else {
        column.setSort(undefined);
      }
    }
    var sortIndex = getValue('sortIndex').value1;
    if (sortIndex !== undefined) {
      column.setSortIndex(sortIndex);
    }
    // we do not do aggFunc, rowGroup or pivot for auto cols, as you can't do these with auto col
    if (autoCol) {
      return;
    }
    var aggFunc = getValue('aggFunc').value1;
    if (aggFunc !== undefined) {
      if (typeof aggFunc === 'string') {
        column.setAggFunc(aggFunc);
        if (!column.isValueActive()) {
          column.setValueActive(true, source);
          this.valueColumns.push(column);
        }
      } else {
        if (exists(aggFunc)) {
          console.warn('AG Grid: stateItem.aggFunc must be a string. if using your own aggregation ' + 'functions, register the functions first before using them in get/set state. This is because it is ' + 'intended for the column state to be stored and retrieved as simple JSON.');
        }
        column.setAggFunc(null);
        if (column.isValueActive()) {
          column.setValueActive(false, source);
          removeFromArray(this.valueColumns, column);
        }
      }
    }
    var _a = getValue('rowGroup', 'rowGroupIndex'),
      rowGroup = _a.value1,
      rowGroupIndex = _a.value2;
    if (rowGroup !== undefined || rowGroupIndex !== undefined) {
      if (typeof rowGroupIndex === 'number' || rowGroup) {
        if (!column.isRowGroupActive()) {
          column.setRowGroupActive(true, source);
          this.rowGroupColumns.push(column);
        }
        if (rowGroupIndexes && typeof rowGroupIndex === 'number') {
          rowGroupIndexes[column.getId()] = rowGroupIndex;
        }
      } else {
        if (column.isRowGroupActive()) {
          column.setRowGroupActive(false, source);
          removeFromArray(this.rowGroupColumns, column);
        }
      }
    }
    var _b = getValue('pivot', 'pivotIndex'),
      pivot = _b.value1,
      pivotIndex = _b.value2;
    if (pivot !== undefined || pivotIndex !== undefined) {
      if (typeof pivotIndex === 'number' || pivot) {
        if (!column.isPivotActive()) {
          column.setPivotActive(true, source);
          this.pivotColumns.push(column);
        }
        if (pivotIndexes && typeof pivotIndex === 'number') {
          pivotIndexes[column.getId()] = pivotIndex;
        }
      } else {
        if (column.isPivotActive()) {
          column.setPivotActive(false, source);
          removeFromArray(this.pivotColumns, column);
        }
      }
    }
  };
  ColumnController.prototype.getGridColumns = function (keys) {
    return this.getColumns(keys, this.getGridColumn.bind(this));
  };
  ColumnController.prototype.getColumns = function (keys, columnLookupCallback) {
    var foundColumns = [];
    if (keys) {
      keys.forEach(function (key) {
        var column = columnLookupCallback(key);
        if (column) {
          foundColumns.push(column);
        }
      });
    }
    return foundColumns;
  };
  // used by growGroupPanel
  ColumnController.prototype.getColumnWithValidation = function (key) {
    if (key == null) {
      return null;
    }
    var column = this.getGridColumn(key);
    if (!column) {
      console.warn('AG Grid: could not find column ' + key);
    }
    return column;
  };
  ColumnController.prototype.getPrimaryColumn = function (key) {
    return this.getColumn(key, this.primaryColumns, this.primaryColumnsMap);
  };
  ColumnController.prototype.getGridColumn = function (key) {
    return this.getColumn(key, this.gridColumns, this.gridColumnsMap);
  };
  ColumnController.prototype.getColumn = function (key, columnList, columnMap) {
    if (!key) {
      return null;
    }
    // most of the time this method gets called the key is a string, so we put this shortcut in
    // for performance reasons, to see if we can match for ID (it doesn't do auto columns, that's done below)
    if (typeof key == 'string' && columnMap[key]) {
      return columnMap[key];
    }
    for (var i = 0; i < columnList.length; i++) {
      if (this.columnsMatch(columnList[i], key)) {
        return columnList[i];
      }
    }
    return this.getAutoColumn(key);
  };
  ColumnController.prototype.getAutoColumn = function (key) {
    var _this = this;
    if (!this.groupAutoColumns || !exists(this.groupAutoColumns) || missing(this.groupAutoColumns)) {
      return null;
    }
    return find(this.groupAutoColumns, function (groupCol) {
      return _this.columnsMatch(groupCol, key);
    });
  };
  ColumnController.prototype.columnsMatch = function (column, key) {
    var columnMatches = column === key;
    var colDefMatches = column.getColDef() === key;
    var idMatches = column.getColId() == key;
    return columnMatches || colDefMatches || idMatches;
  };
  ColumnController.prototype.getDisplayNameForColumn = function (column, location, includeAggFunc) {
    if (includeAggFunc === void 0) {
      includeAggFunc = false;
    }
    if (!column) {
      return null;
    }
    var headerName = this.getHeaderName(column.getColDef(), column, null, null, location);
    if (includeAggFunc) {
      return this.wrapHeaderNameWithAggFunc(column, headerName);
    }
    return headerName;
  };
  ColumnController.prototype.getDisplayNameForOriginalColumnGroup = function (columnGroup, originalColumnGroup, location) {
    var colGroupDef = originalColumnGroup ? originalColumnGroup.getColGroupDef() : null;
    if (colGroupDef) {
      return this.getHeaderName(colGroupDef, null, columnGroup, originalColumnGroup, location);
    }
    return null;
  };
  ColumnController.prototype.getDisplayNameForColumnGroup = function (columnGroup, location) {
    return this.getDisplayNameForOriginalColumnGroup(columnGroup, columnGroup.getOriginalColumnGroup(), location);
  };
  // location is where the column is going to appear, ie who is calling us
  ColumnController.prototype.getHeaderName = function (colDef, column, columnGroup, originalColumnGroup, location) {
    var headerValueGetter = colDef.headerValueGetter;
    if (headerValueGetter) {
      var params = {
        colDef: colDef,
        column: column,
        columnGroup: columnGroup,
        originalColumnGroup: originalColumnGroup,
        location: location,
        api: this.gridOptionsWrapper.getApi(),
        context: this.gridOptionsWrapper.getContext()
      };
      if (typeof headerValueGetter === 'function') {
        // valueGetter is a function, so just call it
        return headerValueGetter(params);
      } else if (typeof headerValueGetter === 'string') {
        // valueGetter is an expression, so execute the expression
        return this.expressionService.evaluate(headerValueGetter, params);
      }
      console.warn('ag-grid: headerValueGetter must be a function or a string');
      return '';
    } else if (colDef.headerName != null) {
      return colDef.headerName;
    } else if (colDef.field) {
      return camelCaseToHumanText(colDef.field);
    }
    return '';
  };
  /*
      private getHeaderGroupName(columnGroup: ColumnGroup): string {
          let colGroupDef = columnGroup.getOriginalColumnGroup().getColGroupDef();
          let headerValueGetter = colGroupDef.headerValueGetter;
           if (headerValueGetter) {
              let params = {
                  columnGroup: columnGroup,
                  colDef: colGroupDef,
                  api: this.gridOptionsWrapper.getApi(),
                  context: this.gridOptionsWrapper.getContext()
              };
               if (typeof headerValueGetter === 'function') {
                  // valueGetter is a function, so just call it
                  return headerValueGetter(params);
              } else if (typeof headerValueGetter === 'string') {
                  // valueGetter is an expression, so execute the expression
                  return this.expressionService.evaluate(headerValueGetter, params);
              } else {
                  console.warn('ag-grid: headerValueGetter must be a function or a string');
                  return '';
              }
          } else {
              return colGroupDef.headerName;
          }
      }
  */
  ColumnController.prototype.wrapHeaderNameWithAggFunc = function (column, headerName) {
    if (this.gridOptionsWrapper.isSuppressAggFuncInHeader()) {
      return headerName;
    }
    // only columns with aggregation active can have aggregations
    var pivotValueColumn = column.getColDef().pivotValueColumn;
    var pivotActiveOnThisColumn = exists(pivotValueColumn);
    var aggFunc = null;
    var aggFuncFound;
    // otherwise we have a measure that is active, and we are doing aggregation on it
    if (pivotActiveOnThisColumn) {
      aggFunc = pivotValueColumn ? pivotValueColumn.getAggFunc() : null;
      aggFuncFound = true;
    } else {
      var measureActive = column.isValueActive();
      var aggregationPresent = this.pivotMode || !this.isRowGroupEmpty();
      if (measureActive && aggregationPresent) {
        aggFunc = column.getAggFunc();
        aggFuncFound = true;
      } else {
        aggFuncFound = false;
      }
    }
    if (aggFuncFound) {
      var aggFuncString = typeof aggFunc === 'string' ? aggFunc : 'func';
      var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
      var aggFuncStringTranslated = localeTextFunc(aggFuncString, aggFuncString);
      return aggFuncStringTranslated + "(" + headerName + ")";
    }
    return headerName;
  };
  // returns the group with matching colId and instanceId. If instanceId is missing,
  // matches only on the colId.
  ColumnController.prototype.getColumnGroup = function (colId, instanceId) {
    if (!colId) {
      return null;
    }
    if (colId instanceof ColumnGroup) {
      return colId;
    }
    var allColumnGroups = this.getAllDisplayedTrees();
    var checkInstanceId = typeof instanceId === 'number';
    var result = null;
    this.columnUtils.depthFirstAllColumnTreeSearch(allColumnGroups, function (child) {
      if (child instanceof ColumnGroup) {
        var columnGroup = child;
        var matched = void 0;
        if (checkInstanceId) {
          matched = colId === columnGroup.getGroupId() && instanceId === columnGroup.getInstanceId();
        } else {
          matched = colId === columnGroup.getGroupId();
        }
        if (matched) {
          result = columnGroup;
        }
      }
    });
    return result;
  };
  ColumnController.prototype.isReady = function () {
    return this.ready;
  };
  ColumnController.prototype.extractValueColumns = function (source, oldPrimaryColumns) {
    this.valueColumns = this.extractColumns(oldPrimaryColumns, this.valueColumns, function (col, flag) {
      return col.setValueActive(flag, source);
    },
    // aggFunc doesn't have index variant, cos order of value cols doesn't matter, so always return null
    function () {
      return undefined;
    }, function () {
      return undefined;
    },
    // aggFunc is a string, so return it's existence
    function (colDef) {
      var aggFunc = colDef.aggFunc;
      // null or empty string means clear
      if (aggFunc === null || aggFunc === '') {
        return null;
      }
      if (aggFunc === undefined) {
        return;
      }
      return !!aggFunc;
    }, function (colDef) {
      // return false if any of the following: null, undefined, empty string
      return colDef.initialAggFunc != null && colDef.initialAggFunc != '';
    });
    // all new columns added will have aggFunc missing, so set it to what is in the colDef
    this.valueColumns.forEach(function (col) {
      var colDef = col.getColDef();
      // if aggFunc provided, we always override, as reactive property
      if (colDef.aggFunc != null && colDef.aggFunc != '') {
        col.setAggFunc(colDef.aggFunc);
      } else {
        // otherwise we use initialAggFunc only if no agg func set - which happens when new column only
        if (!col.getAggFunc()) {
          col.setAggFunc(colDef.initialAggFunc);
        }
      }
    });
  };
  ColumnController.prototype.extractRowGroupColumns = function (source, oldPrimaryColumns) {
    this.rowGroupColumns = this.extractColumns(oldPrimaryColumns, this.rowGroupColumns, function (col, flag) {
      return col.setRowGroupActive(flag, source);
    }, function (colDef) {
      return colDef.rowGroupIndex;
    }, function (colDef) {
      return colDef.initialRowGroupIndex;
    }, function (colDef) {
      return colDef.rowGroup;
    }, function (colDef) {
      return colDef.initialRowGroup;
    });
  };
  ColumnController.prototype.extractColumns = function (oldPrimaryColumns, previousCols, setFlagFunc, getIndexFunc, getInitialIndexFunc, getValueFunc, getInitialValueFunc) {
    if (oldPrimaryColumns === void 0) {
      oldPrimaryColumns = [];
    }
    if (previousCols === void 0) {
      previousCols = [];
    }
    var colsWithIndex = [];
    var colsWithValue = [];
    // go though all cols.
    // if value, change
    // if default only, change only if new
    this.primaryColumns.forEach(function (col) {
      var colIsNew = oldPrimaryColumns.indexOf(col) < 0;
      var colDef = col.getColDef();
      var value = attrToBoolean(getValueFunc(colDef));
      var initialValue = attrToBoolean(getInitialValueFunc(colDef));
      var index = attrToNumber(getIndexFunc(colDef));
      var initialIndex = attrToNumber(getInitialIndexFunc(colDef));
      var include;
      if (colIsNew) {
        // col is new, use values if present, otherwise use default values if present
        var valuePresent = value !== undefined || index !== undefined;
        if (valuePresent) {
          if (value !== undefined) {
            // if boolean value present, we take it's value, even if 'false'
            include = value;
          } else {
            // otherwise we based on number value. note that 'null' resets, however 'undefined' doesn't
            // go through this code path (undefined means 'ignore').
            include = index >= 0;
          }
        } else {
          include = initialValue || initialIndex >= 0;
        }
      } else {
        // col is not new, we ignore the default values, just use the values if provided
        if (value !== undefined) {
          // value is never null, as attrToBoolean converts null to false
          include = value;
        } else if (index !== undefined) {
          if (index === null) {
            include = false;
          } else {
            include = index >= 0;
          }
        } else {
          // no values provided, we include if it was included last time
          include = previousCols.indexOf(col) >= 0;
        }
      }
      if (include) {
        var useIndex = colIsNew ? index != null || initialIndex != null : index != null;
        if (useIndex) {
          colsWithIndex.push(col);
        } else {
          colsWithValue.push(col);
        }
      }
    });
    var getIndexForCol = function (col) {
      var index = getIndexFunc(col.getColDef());
      var defaultIndex = getInitialIndexFunc(col.getColDef());
      return index != null ? index : defaultIndex;
    };
    // sort cols with index, and add these first
    colsWithIndex.sort(function (colA, colB) {
      var indexA = getIndexForCol(colA);
      var indexB = getIndexForCol(colB);
      if (indexA === indexB) {
        return 0;
      }
      if (indexA < indexB) {
        return -1;
      }
      return 1;
    });
    var res = [].concat(colsWithIndex);
    // second add columns that were there before and in the same order as they were before,
    // so we are preserving order of current grouping of columns that simply have rowGroup=true
    previousCols.forEach(function (col) {
      if (colsWithValue.indexOf(col) >= 0) {
        res.push(col);
      }
    });
    // lastly put in all remaining cols
    colsWithValue.forEach(function (col) {
      if (res.indexOf(col) < 0) {
        res.push(col);
      }
    });
    // set flag=false for removed cols
    previousCols.forEach(function (col) {
      if (res.indexOf(col) < 0) {
        setFlagFunc(col, false);
      }
    });
    // set flag=true for newly added cols
    res.forEach(function (col) {
      if (previousCols.indexOf(col) < 0) {
        setFlagFunc(col, true);
      }
    });
    return res;
  };
  ColumnController.prototype.extractPivotColumns = function (source, oldPrimaryColumns) {
    this.pivotColumns = this.extractColumns(oldPrimaryColumns, this.pivotColumns, function (col, flag) {
      return col.setPivotActive(flag, source);
    }, function (colDef) {
      return colDef.pivotIndex;
    }, function (colDef) {
      return colDef.initialPivotIndex;
    }, function (colDef) {
      return colDef.pivot;
    }, function (colDef) {
      return colDef.initialPivot;
    });
  };
  ColumnController.prototype.resetColumnGroupState = function (source) {
    if (source === void 0) {
      source = "api";
    }
    var stateItems = [];
    this.columnUtils.depthFirstOriginalTreeSearch(null, this.primaryColumnTree, function (child) {
      if (child instanceof OriginalColumnGroup) {
        var colGroupDef = child.getColGroupDef();
        var groupState = {
          groupId: child.getGroupId(),
          open: !colGroupDef ? undefined : colGroupDef.openByDefault
        };
        stateItems.push(groupState);
      }
    });
    this.setColumnGroupState(stateItems, source);
  };
  ColumnController.prototype.getColumnGroupState = function () {
    var columnGroupState = [];
    this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, function (node) {
      if (node instanceof OriginalColumnGroup) {
        var originalColumnGroup = node;
        columnGroupState.push({
          groupId: originalColumnGroup.getGroupId(),
          open: originalColumnGroup.isExpanded()
        });
      }
    });
    return columnGroupState;
  };
  ColumnController.prototype.setColumnGroupState = function (stateItems, source) {
    var _this = this;
    if (source === void 0) {
      source = "api";
    }
    this.columnAnimationService.start();
    var impactedGroups = [];
    stateItems.forEach(function (stateItem) {
      var groupKey = stateItem.groupId;
      var newValue = stateItem.open;
      var originalColumnGroup = _this.getOriginalColumnGroup(groupKey);
      if (!originalColumnGroup) {
        return;
      }
      if (originalColumnGroup.isExpanded() === newValue) {
        return;
      }
      _this.logger.log('columnGroupOpened(' + originalColumnGroup.getGroupId() + ',' + newValue + ')');
      originalColumnGroup.setExpanded(newValue);
      impactedGroups.push(originalColumnGroup);
    });
    this.updateGroupsAndDisplayedColumns(source);
    this.setFirstRightAndLastLeftPinned(source);
    impactedGroups.forEach(function (originalColumnGroup) {
      var event = {
        type: Events.EVENT_COLUMN_GROUP_OPENED,
        columnGroup: originalColumnGroup,
        api: _this.gridApi,
        columnApi: _this.columnApi
      };
      _this.eventService.dispatchEvent(event);
    });
    this.columnAnimationService.finish();
  };
  // called by headerRenderer - when a header is opened or closed
  ColumnController.prototype.setColumnGroupOpened = function (key, newValue, source) {
    if (source === void 0) {
      source = "api";
    }
    var keyAsString;
    if (key instanceof OriginalColumnGroup) {
      keyAsString = key.getId();
    } else {
      keyAsString = key || '';
    }
    this.setColumnGroupState([{
      groupId: keyAsString,
      open: newValue
    }], source);
  };
  ColumnController.prototype.getOriginalColumnGroup = function (key) {
    if (key instanceof OriginalColumnGroup) {
      return key;
    }
    if (typeof key !== 'string') {
      console.error('AG Grid: group key must be a string');
    }
    // otherwise, search for the column group by id
    var res = null;
    this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, function (node) {
      if (node instanceof OriginalColumnGroup) {
        var originalColumnGroup = node;
        if (originalColumnGroup.getId() === key) {
          res = originalColumnGroup;
        }
      }
    });
    return res;
  };
  ColumnController.prototype.calculateColumnsForDisplay = function () {
    var _this = this;
    var columnsForDisplay;
    if (this.pivotMode && !this.secondaryColumnsPresent) {
      // pivot mode is on, but we are not pivoting, so we only
      // show columns we are aggregating on
      columnsForDisplay = this.gridColumns.filter(function (column) {
        var isAutoGroupCol = _this.groupAutoColumns && includes(_this.groupAutoColumns, column);
        var isValueCol = _this.valueColumns && includes(_this.valueColumns, column);
        return isAutoGroupCol || isValueCol;
      });
    } else {
      // otherwise continue as normal. this can be working on the primary
      // or secondary columns, whatever the gridColumns are set to
      columnsForDisplay = this.gridColumns.filter(function (column) {
        // keep col if a) it's auto-group or b) it's visible
        var isAutoGroupCol = _this.groupAutoColumns && includes(_this.groupAutoColumns, column);
        return isAutoGroupCol || column.isVisible();
      });
    }
    return columnsForDisplay;
  };
  ColumnController.prototype.checkColSpanActiveInCols = function (columns) {
    var result = false;
    columns.forEach(function (col) {
      if (exists(col.getColDef().colSpan)) {
        result = true;
      }
    });
    return result;
  };
  ColumnController.prototype.calculateColumnsForGroupDisplay = function () {
    var _this = this;
    this.groupDisplayColumns = [];
    var checkFunc = function (col) {
      var colDef = col.getColDef();
      if (colDef && exists(colDef.showRowGroup)) {
        _this.groupDisplayColumns.push(col);
      }
    };
    this.gridColumns.forEach(checkFunc);
    if (this.groupAutoColumns) {
      this.groupAutoColumns.forEach(checkFunc);
    }
  };
  ColumnController.prototype.getGroupDisplayColumns = function () {
    return this.groupDisplayColumns;
  };
  ColumnController.prototype.updateDisplayedColumns = function (source) {
    var columnsForDisplay = this.calculateColumnsForDisplay();
    this.buildDisplayedTrees(columnsForDisplay);
    this.calculateColumnsForGroupDisplay();
    // also called when group opened/closed
    this.updateGroupsAndDisplayedColumns(source);
    // also called when group opened/closed
    this.setFirstRightAndLastLeftPinned(source);
  };
  ColumnController.prototype.isSecondaryColumnsPresent = function () {
    return this.secondaryColumnsPresent;
  };
  ColumnController.prototype.setSecondaryColumns = function (colDefs, source) {
    if (source === void 0) {
      source = "api";
    }
    var newColsPresent = colDefs && colDefs.length > 0;
    // if not cols passed, and we had to cols anyway, then do nothing
    if (!newColsPresent && !this.secondaryColumnsPresent) {
      return;
    }
    if (newColsPresent) {
      this.processSecondaryColumnDefinitions(colDefs);
      var balancedTreeResult = this.columnFactory.createColumnTree(colDefs, false);
      this.secondaryBalancedTree = balancedTreeResult.columnTree;
      this.secondaryHeaderRowCount = balancedTreeResult.treeDept + 1;
      this.secondaryColumns = this.getColumnsFromTree(this.secondaryBalancedTree);
      this.secondaryColumnsPresent = true;
    } else {
      this.secondaryBalancedTree = null;
      this.secondaryHeaderRowCount = -1;
      this.secondaryColumns = null;
      this.secondaryColumnsPresent = false;
    }
    this.updateGridColumns();
    this.updateDisplayedColumns(source);
  };
  ColumnController.prototype.processSecondaryColumnDefinitions = function (colDefs) {
    var columnCallback = this.gridOptionsWrapper.getProcessSecondaryColDefFunc();
    var groupCallback = this.gridOptionsWrapper.getProcessSecondaryColGroupDefFunc();
    if (!columnCallback && !groupCallback) {
      return undefined;
    }
    var searchForColDefs = function (colDefs2) {
      colDefs2.forEach(function (abstractColDef) {
        var isGroup = exists(abstractColDef.children);
        if (isGroup) {
          var colGroupDef = abstractColDef;
          if (groupCallback) {
            groupCallback(colGroupDef);
          }
          searchForColDefs(colGroupDef.children);
        } else {
          var colDef = abstractColDef;
          if (columnCallback) {
            columnCallback(colDef);
          }
        }
      });
    };
    if (colDefs) {
      searchForColDefs(colDefs);
    }
  };
  // called from: setColumnState, setColumnDefs, setSecondaryColumns
  ColumnController.prototype.updateGridColumns = function () {
    var _this = this;
    if (this.gridColsArePrimary) {
      this.lastPrimaryOrder = this.gridColumns;
    }
    if (this.secondaryColumns && this.secondaryBalancedTree) {
      this.gridBalancedTree = this.secondaryBalancedTree.slice();
      this.gridHeaderRowCount = this.secondaryHeaderRowCount;
      this.gridColumns = this.secondaryColumns.slice();
      this.gridColsArePrimary = false;
    } else {
      this.gridBalancedTree = this.primaryColumnTree.slice();
      this.gridHeaderRowCount = this.primaryHeaderRowCount;
      this.gridColumns = this.primaryColumns.slice();
      this.gridColsArePrimary = true;
      // updateGridColumns gets called after user adds a row group. we want to maintain the order of the columns
      // when this happens (eg if user moved a column) rather than revert back to the original column order.
      // likewise if changing in/out of pivot mode, we want to maintain the order of the primary cols
      this.orderGridColsLikeLastPrimary();
    }
    this.addAutoGroupToGridColumns();
    this.autoRowHeightColumns = this.gridColumns.filter(function (col) {
      return col.getColDef().autoHeight;
    });
    this.gridColumns = this.putFixedColumnsFirst(this.gridColumns);
    this.setupQuickFilterColumns();
    this.clearDisplayedAndViewportColumns();
    this.colSpanActive = this.checkColSpanActiveInCols(this.gridColumns);
    this.gridColumnsMap = {};
    this.gridColumns.forEach(function (col) {
      return _this.gridColumnsMap[col.getId()] = col;
    });
    var event = {
      type: Events.EVENT_GRID_COLUMNS_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(event);
  };
  ColumnController.prototype.orderGridColsLikeLastPrimary = function () {
    if (missing(this.lastPrimaryOrder)) {
      return;
    }
    var lastPrimaryOrderMapped = convertToMap(this.lastPrimaryOrder.map(function (col, index) {
      return [col, index];
    }));
    // only do the sort if at least one column is accounted for. columns will be not accounted for
    // if changing from secondary to primary columns
    var noColsFound = true;
    this.gridColumns.forEach(function (col) {
      if (lastPrimaryOrderMapped.has(col)) {
        noColsFound = false;
      }
    });
    if (noColsFound) {
      return;
    }
    // order cols in the same order as before. we need to make sure that all
    // cols still exists, so filter out any that no longer exist.
    var gridColsMap = convertToMap(this.gridColumns.map(function (col) {
      return [col, true];
    }));
    var oldColsOrdered = this.lastPrimaryOrder.filter(function (col) {
      return gridColsMap.has(col);
    });
    var oldColsMap = convertToMap(oldColsOrdered.map(function (col) {
      return [col, true];
    }));
    var newColsOrdered = this.gridColumns.filter(function (col) {
      return !oldColsMap.has(col);
    });
    // add in the new columns, at the end (if no group), or at the end of the group (if a group)
    var newGridColumns = oldColsOrdered.slice();
    newColsOrdered.forEach(function (newCol) {
      var parent = newCol.getOriginalParent();
      // if no parent, means we are not grouping, so just add the column to the end
      if (!parent) {
        newGridColumns.push(newCol);
        return;
      }
      // find the group the column belongs to. if no siblings at the current level (eg col in group on it's
      // own) then go up one level and look for siblings there.
      var siblings = [];
      while (!siblings.length && parent) {
        var leafCols = parent.getLeafColumns();
        leafCols.forEach(function (leafCol) {
          var presentInNewGriColumns = newGridColumns.indexOf(leafCol) >= 0;
          var noYetInSiblings = siblings.indexOf(leafCol) < 0;
          if (presentInNewGriColumns && noYetInSiblings) {
            siblings.push(leafCol);
          }
        });
        parent = parent.getOriginalParent();
      }
      // if no siblings exist at any level, this means the col is in a group (or parent groups) on it's own
      if (!siblings.length) {
        newGridColumns.push(newCol);
        return;
      }
      // find index of last column in the group
      var indexes = siblings.map(function (col) {
        return newGridColumns.indexOf(col);
      });
      var lastIndex = Math.max.apply(Math, indexes);
      insertIntoArray(newGridColumns, newCol, lastIndex + 1);
    });
    this.gridColumns = newGridColumns;
  };
  ColumnController.prototype.isPrimaryColumnGroupsPresent = function () {
    return this.primaryHeaderRowCount > 1;
  };
  // if we are using autoGroupCols, then they should be included for quick filter. this covers the
  // following scenarios:
  // a) user provides 'field' into autoGroupCol of normal grid, so now because a valid col to filter leafs on
  // b) using tree data and user depends on autoGroupCol for first col, and we also want to filter on this
  //    (tree data is a bit different, as parent rows can be filtered on, unlike row grouping)
  ColumnController.prototype.setupQuickFilterColumns = function () {
    if (this.groupAutoColumns) {
      this.columnsForQuickFilter = this.primaryColumns.concat(this.groupAutoColumns);
    } else {
      this.columnsForQuickFilter = this.primaryColumns;
    }
  };
  ColumnController.prototype.putFixedColumnsFirst = function (cols) {
    var locked = cols.filter(function (c) {
      return c.getColDef().lockPosition;
    });
    var unlocked = cols.filter(function (c) {
      return !c.getColDef().lockPosition;
    });
    return locked.concat(unlocked);
  };
  ColumnController.prototype.addAutoGroupToGridColumns = function () {
    // add in auto-group here
    this.createGroupAutoColumnsIfNeeded();
    if (missing(this.groupAutoColumns)) {
      return;
    }
    this.gridColumns = this.groupAutoColumns ? this.groupAutoColumns.concat(this.gridColumns) : this.gridColumns;
    var autoColBalancedTree = this.columnFactory.createForAutoGroups(this.groupAutoColumns, this.gridBalancedTree);
    this.gridBalancedTree = autoColBalancedTree.concat(this.gridBalancedTree);
  };
  // gets called after we copy down grid columns, to make sure any part of the gui
  // that tries to draw, eg the header, it will get empty lists of columns rather
  // than stale columns. for example, the header will received gridColumnsChanged
  // event, so will try and draw, but it will draw successfully when it acts on the
  // virtualColumnsChanged event
  ColumnController.prototype.clearDisplayedAndViewportColumns = function () {
    this.displayedTreeLeft = [];
    this.displayedTreeRight = [];
    this.displayedTreeCentre = [];
    this.viewportRowLeft = {};
    this.viewportRowRight = {};
    this.viewportRowCenter = {};
    this.displayedColumnsLeft = [];
    this.displayedColumnsRight = [];
    this.displayedColumnsCenter = [];
    this.displayedColumns = [];
    this.viewportColumns = [];
  };
  ColumnController.prototype.updateGroupsAndDisplayedColumns = function (source) {
    this.updateOpenClosedVisibilityInColumnGroups();
    this.deriveDisplayedColumns(source);
    this.refreshFlexedColumns();
    this.extractViewport();
    this.updateBodyWidths();
    // this event is picked up by the gui, headerRenderer and rowRenderer, to recalculate what columns to display
    var event = {
      type: Events.EVENT_DISPLAYED_COLUMNS_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(event);
  };
  ColumnController.prototype.deriveDisplayedColumns = function (source) {
    this.derivedDisplayedColumnsFromDisplayedTree(this.displayedTreeLeft, this.displayedColumnsLeft);
    this.derivedDisplayedColumnsFromDisplayedTree(this.displayedTreeCentre, this.displayedColumnsCenter);
    this.derivedDisplayedColumnsFromDisplayedTree(this.displayedTreeRight, this.displayedColumnsRight);
    this.joinDisplayedColumns();
    this.setLeftValues(source);
  };
  ColumnController.prototype.joinDisplayedColumns = function () {
    if (this.gridOptionsWrapper.isEnableRtl()) {
      this.displayedColumns = this.displayedColumnsRight.concat(this.displayedColumnsCenter).concat(this.displayedColumnsLeft);
    } else {
      this.displayedColumns = this.displayedColumnsLeft.concat(this.displayedColumnsCenter).concat(this.displayedColumnsRight);
    }
  };
  // sets the left pixel position of each column
  ColumnController.prototype.setLeftValues = function (source) {
    this.setLeftValuesOfColumns(source);
    this.setLeftValuesOfGroups();
  };
  ColumnController.prototype.setLeftValuesOfColumns = function (source) {
    var _this = this;
    // go through each list of displayed columns
    var allColumns = this.primaryColumns.slice(0);
    // let totalColumnWidth = this.getWidthOfColsInList()
    var doingRtl = this.gridOptionsWrapper.isEnableRtl();
    [this.displayedColumnsLeft, this.displayedColumnsRight, this.displayedColumnsCenter].forEach(function (columns) {
      if (doingRtl) {
        // when doing RTL, we start at the top most pixel (ie RHS) and work backwards
        var left_1 = _this.getWidthOfColsInList(columns);
        columns.forEach(function (column) {
          left_1 -= column.getActualWidth();
          column.setLeft(left_1, source);
        });
      } else {
        // otherwise normal LTR, we start at zero
        var left_2 = 0;
        columns.forEach(function (column) {
          column.setLeft(left_2, source);
          left_2 += column.getActualWidth();
        });
      }
      removeAllFromArray(allColumns, columns);
    });
    // items left in allColumns are columns not displayed, so remove the left position. this is
    // important for the rows, as if a col is made visible, then taken out, then made visible again,
    // we don't want the animation of the cell floating in from the old position, whatever that was.
    allColumns.forEach(function (column) {
      column.setLeft(null, source);
    });
  };
  ColumnController.prototype.setLeftValuesOfGroups = function () {
    // a groups left value is the lest left value of it's children
    [this.displayedTreeLeft, this.displayedTreeRight, this.displayedTreeCentre].forEach(function (columns) {
      columns.forEach(function (column) {
        if (column instanceof ColumnGroup) {
          var columnGroup = column;
          columnGroup.checkLeft();
        }
      });
    });
  };
  ColumnController.prototype.derivedDisplayedColumnsFromDisplayedTree = function (tree, columns) {
    columns.length = 0;
    this.columnUtils.depthFirstDisplayedColumnTreeSearch(tree, function (child) {
      if (child instanceof Column) {
        columns.push(child);
      }
    });
  };
  ColumnController.prototype.extractViewportColumns = function () {
    if (this.suppressColumnVirtualisation) {
      // no virtualisation, so don't filter
      this.viewportColumnsCenter = this.displayedColumnsCenter;
    } else {
      // filter out what should be visible
      this.viewportColumnsCenter = this.filterOutColumnsWithinViewport();
    }
    this.viewportColumns = this.viewportColumnsCenter.concat(this.displayedColumnsLeft).concat(this.displayedColumnsRight);
  };
  ColumnController.prototype.getVirtualHeaderGroupRow = function (type, dept) {
    var result;
    switch (type) {
      case Constants.PINNED_LEFT:
        result = this.viewportRowLeft[dept];
        break;
      case Constants.PINNED_RIGHT:
        result = this.viewportRowRight[dept];
        break;
      default:
        result = this.viewportRowCenter[dept];
        break;
    }
    if (missing(result)) {
      result = [];
    }
    return result;
  };
  ColumnController.prototype.extractViewportRows = function () {
    // go through each group, see if any of it's cols are displayed, and if yes,
    // then this group is included
    this.viewportRowLeft = {};
    this.viewportRowRight = {};
    this.viewportRowCenter = {};
    // for easy lookup when building the groups.
    var virtualColIds = {};
    this.viewportColumns.forEach(function (col) {
      return virtualColIds[col.getId()] = true;
    });
    var testGroup = function (children, result, dept) {
      var returnValue = false;
      for (var i = 0; i < children.length; i++) {
        // see if this item is within viewport
        var child = children[i];
        var addThisItem = false;
        if (child instanceof Column) {
          // for column, test if column is included
          addThisItem = virtualColIds[child.getId()] === true;
        } else {
          // if group, base decision on children
          var columnGroup = child;
          var displayedChildren = columnGroup.getDisplayedChildren();
          if (displayedChildren) {
            addThisItem = testGroup(displayedChildren, result, dept + 1);
          }
        }
        if (addThisItem) {
          returnValue = true;
          if (!result[dept]) {
            result[dept] = [];
          }
          result[dept].push(child);
        }
      }
      return returnValue;
    };
    testGroup(this.displayedTreeLeft, this.viewportRowLeft, 0);
    testGroup(this.displayedTreeRight, this.viewportRowRight, 0);
    testGroup(this.displayedTreeCentre, this.viewportRowCenter, 0);
  };
  ColumnController.prototype.extractViewport = function () {
    this.extractViewportColumns();
    this.extractViewportRows();
  };
  ColumnController.prototype.filterOutColumnsWithinViewport = function () {
    return this.displayedColumnsCenter.filter(this.isColumnInViewport.bind(this));
  };
  ColumnController.prototype.refreshFlexedColumns = function (params) {
    var _this = this;
    if (params === void 0) {
      params = {};
    }
    var source = params.source ? params.source : 'flex';
    if (params.viewportWidth != null) {
      this.flexViewportWidth = params.viewportWidth;
    }
    if (!this.flexViewportWidth) {
      return [];
    }
    // If the grid has left-over space, divide it between flexing columns in proportion to their flex value.
    // A "flexing column" is one that has a 'flex' value set and is not currently being constrained by its
    // minWidth or maxWidth rules.
    var flexAfterDisplayIndex = -1;
    if (params.resizingCols) {
      params.resizingCols.forEach(function (col) {
        var indexOfCol = _this.displayedColumnsCenter.indexOf(col);
        if (flexAfterDisplayIndex < indexOfCol) {
          flexAfterDisplayIndex = indexOfCol;
        }
      });
    }
    var isColFlex = function (col) {
      var afterResizingCols = _this.displayedColumnsCenter.indexOf(col) > flexAfterDisplayIndex;
      return col.getFlex() && afterResizingCols;
    };
    var knownWidthColumns = this.displayedColumnsCenter.filter(function (col) {
      return !isColFlex(col);
    });
    var flexingColumns = this.displayedColumnsCenter.filter(function (col) {
      return isColFlex(col);
    });
    var changedColumns = [];
    if (!flexingColumns.length) {
      return [];
    }
    var flexingColumnSizes = [];
    var spaceForFlexingColumns;
    outer: while (true) {
      var totalFlex = flexingColumns.reduce(function (count, col) {
        return count + col.getFlex();
      }, 0);
      spaceForFlexingColumns = this.flexViewportWidth - this.getWidthOfColsInList(knownWidthColumns);
      for (var i = 0; i < flexingColumns.length; i++) {
        var col = flexingColumns[i];
        var widthByFlexRule = spaceForFlexingColumns * col.getFlex() / totalFlex;
        var constrainedWidth = 0;
        var minWidth = col.getMinWidth();
        var maxWidth = col.getMaxWidth();
        if (exists(minWidth) && widthByFlexRule < minWidth) {
          constrainedWidth = minWidth;
        } else if (exists(maxWidth) && widthByFlexRule > maxWidth) {
          constrainedWidth = maxWidth;
        }
        if (constrainedWidth) {
          // This column is not in fact flexing as it is being constrained to a specific size
          // so remove it from the list of flexing columns and start again
          col.setActualWidth(constrainedWidth, source);
          removeFromArray(flexingColumns, col);
          changedColumns.push(col);
          knownWidthColumns.push(col);
          continue outer;
        }
        flexingColumnSizes[i] = Math.round(widthByFlexRule);
      }
      break;
    }
    var remainingSpace = spaceForFlexingColumns;
    flexingColumns.forEach(function (col, i) {
      col.setActualWidth(Math.min(flexingColumnSizes[i], remainingSpace), source);
      changedColumns.push(col);
      remainingSpace -= flexingColumnSizes[i];
    });
    if (!params.skipSetLeft) {
      this.setLeftValues(source);
    }
    if (params.updateBodyWidths) {
      this.updateBodyWidths();
    }
    if (params.fireResizedEvent) {
      this.fireColumnResizedEvent(changedColumns, true, source, flexingColumns);
    }
    // if the user sets rowData directly into GridOptions, then the row data is set before
    // grid is attached to the DOM. this means the columns are not flexed, and then the rows
    // have the wrong height (as they depend on column widths). so once the columns have
    // been flexed for the first time (only happens once grid is attached to DOM, as dependency
    // on getting the grid width, which only happens after attached after ResizeObserver fires)
    // we get get rows to re-calc their heights.
    if (!this.flexColsCalculatedAtLestOnce) {
      if (this.gridOptionsWrapper.isRowModelDefault()) {
        this.rowModel.resetRowHeights();
      }
      this.flexColsCalculatedAtLestOnce = true;
    }
    return flexingColumns;
  };
  // called from api
  ColumnController.prototype.sizeColumnsToFit = function (gridWidth, source, silent) {
    if (source === void 0) {
      source = "sizeColumnsToFit";
    }
    // avoid divide by zero
    var allDisplayedColumns = this.getAllDisplayedColumns();
    if (gridWidth <= 0 || !allDisplayedColumns.length) {
      return;
    }
    var colsToSpread = [];
    var colsToNotSpread = [];
    allDisplayedColumns.forEach(function (column) {
      if (column.getColDef().suppressSizeToFit === true) {
        colsToNotSpread.push(column);
      } else {
        colsToSpread.push(column);
      }
    });
    // make a copy of the cols that are going to be resized
    var colsToFireEventFor = colsToSpread.slice(0);
    var finishedResizing = false;
    var moveToNotSpread = function (column) {
      removeFromArray(colsToSpread, column);
      colsToNotSpread.push(column);
    };
    // resetting cols to their original width makes the sizeColumnsToFit more deterministic,
    // rather than depending on the current size of the columns. most users call sizeColumnsToFit
    // immediately after grid is created, so will make no difference. however if application is calling
    // sizeColumnsToFit repeatedly (eg after column group is opened / closed repeatedly) we don't want
    // the columns to start shrinking / growing over time.
    //
    // NOTE: the process below will assign values to `this.actualWidth` of each column without firing events
    // for this reason we need to manually fire resize events after the resize has been done for each column.
    colsToSpread.forEach(function (column) {
      return column.resetActualWidth(source);
    });
    while (!finishedResizing) {
      finishedResizing = true;
      var availablePixels = gridWidth - this.getWidthOfColsInList(colsToNotSpread);
      if (availablePixels <= 0) {
        // no width, set everything to minimum
        colsToSpread.forEach(function (column) {
          column.setMinimum(source);
        });
      } else {
        var scale = availablePixels / this.getWidthOfColsInList(colsToSpread);
        // we set the pixels for the last col based on what's left, as otherwise
        // we could be a pixel or two short or extra because of rounding errors.
        var pixelsForLastCol = availablePixels;
        // backwards through loop, as we are removing items as we go
        for (var i = colsToSpread.length - 1; i >= 0; i--) {
          var column = colsToSpread[i];
          var minWidth = column.getMinWidth();
          var maxWidth = column.getMaxWidth();
          var newWidth = Math.round(column.getActualWidth() * scale);
          if (exists(minWidth) && newWidth < minWidth) {
            newWidth = minWidth;
            moveToNotSpread(column);
            finishedResizing = false;
          } else if (exists(maxWidth) && column.isGreaterThanMax(newWidth)) {
            newWidth = maxWidth;
            moveToNotSpread(column);
            finishedResizing = false;
          } else if (i === 0) {
            // if this is the last column
            newWidth = pixelsForLastCol;
          }
          column.setActualWidth(newWidth, source, true);
          pixelsForLastCol -= newWidth;
        }
      }
    }
    // see notes above
    colsToFireEventFor.forEach(function (col) {
      col.fireColumnWidthChangedEvent(source);
    });
    this.setLeftValues(source);
    this.updateBodyWidths();
    if (silent) {
      return;
    }
    this.fireColumnResizedEvent(colsToFireEventFor, true, source);
  };
  ColumnController.prototype.buildDisplayedTrees = function (visibleColumns) {
    var leftVisibleColumns = [];
    var rightVisibleColumns = [];
    var centerVisibleColumns = [];
    visibleColumns.forEach(function (column) {
      switch (column.getPinned()) {
        case "left":
          leftVisibleColumns.push(column);
          break;
        case "right":
          rightVisibleColumns.push(column);
          break;
        default:
          centerVisibleColumns.push(column);
          break;
      }
    });
    var groupInstanceIdCreator = new GroupInstanceIdCreator();
    this.displayedTreeLeft = this.displayedGroupCreator.createDisplayedGroups(leftVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator, Constants.PINNED_LEFT, this.displayedTreeLeft);
    this.displayedTreeRight = this.displayedGroupCreator.createDisplayedGroups(rightVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator, Constants.PINNED_RIGHT, this.displayedTreeRight);
    this.displayedTreeCentre = this.displayedGroupCreator.createDisplayedGroups(centerVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator, null, this.displayedTreeCentre);
    this.updateDisplayedMap();
  };
  ColumnController.prototype.updateDisplayedMap = function () {
    var _this = this;
    this.displayedColumnsAndGroupsMap = {};
    var func = function (child) {
      _this.displayedColumnsAndGroupsMap[child.getUniqueId()] = child;
    };
    this.columnUtils.depthFirstAllColumnTreeSearch(this.displayedTreeCentre, func);
    this.columnUtils.depthFirstAllColumnTreeSearch(this.displayedTreeLeft, func);
    this.columnUtils.depthFirstAllColumnTreeSearch(this.displayedTreeRight, func);
  };
  ColumnController.prototype.isDisplayed = function (item) {
    var fromMap = this.displayedColumnsAndGroupsMap[item.getUniqueId()];
    // check for reference, in case new column / group with same id is now present
    return fromMap === item;
  };
  ColumnController.prototype.updateOpenClosedVisibilityInColumnGroups = function () {
    var allColumnGroups = this.getAllDisplayedTrees();
    this.columnUtils.depthFirstAllColumnTreeSearch(allColumnGroups, function (child) {
      if (child instanceof ColumnGroup) {
        var columnGroup = child;
        columnGroup.calculateDisplayedColumns();
      }
    });
  };
  ColumnController.prototype.getGroupAutoColumns = function () {
    return this.groupAutoColumns;
  };
  ColumnController.prototype.createGroupAutoColumnsIfNeeded = function () {
    if (!this.autoGroupsNeedBuilding) {
      return;
    }
    this.autoGroupsNeedBuilding = false;
    var groupFullWidthRow = this.gridOptionsWrapper.isGroupUseEntireRow(this.pivotMode);
    // we need to allow suppressing auto-column separately for group and pivot as the normal situation
    // is CSRM and user provides group column themselves for normal view, but when they go into pivot the
    // columns are generated by the grid so no opportunity for user to provide group column. so need a way
    // to suppress auto-col for grouping only, and not pivot.
    // however if using Viewport RM or SSRM and user is providing the columns, the user may wish full control
    // of the group column in this instance.
    var suppressAutoColumn = this.pivotMode ? this.gridOptionsWrapper.isPivotSuppressAutoColumn() : this.gridOptionsWrapper.isGroupSuppressAutoColumn();
    var groupingActive = this.rowGroupColumns.length > 0 || this.usingTreeData;
    var needAutoColumns = groupingActive && !suppressAutoColumn && !groupFullWidthRow;
    if (needAutoColumns) {
      var newAutoGroupCols = this.autoGroupColService.createAutoGroupColumns(this.rowGroupColumns);
      var autoColsDifferent = !this.autoColsEqual(newAutoGroupCols, this.groupAutoColumns);
      // we force recreate when suppressColumnStateEvents changes, so new group cols pick up the new
      // definitions. otherwise we could ignore the new cols because they appear to be the same.
      if (autoColsDifferent || this.forceRecreateAutoGroups) {
        this.groupAutoColumns = newAutoGroupCols;
      }
    } else {
      this.groupAutoColumns = null;
    }
  };
  ColumnController.prototype.autoColsEqual = function (colsA, colsB) {
    return areEqual(colsA, colsB, function (a, b) {
      return a.getColId() === b.getColId();
    });
  };
  ColumnController.prototype.getWidthOfColsInList = function (columnList) {
    return columnList.reduce(function (width, col) {
      return width + col.getActualWidth();
    }, 0);
  };
  ColumnController.prototype.getGridBalancedTree = function () {
    return this.gridBalancedTree;
  };
  ColumnController.prototype.hasFloatingFilters = function () {
    if (!this.gridColumns) {
      return false;
    }
    var res = this.gridColumns.some(function (col) {
      return col.getColDef().floatingFilter;
    });
    return res;
  };
  ColumnController.prototype.getFirstDisplayedColumn = function () {
    var isRtl = this.gridOptionsWrapper.isEnableRtl();
    var queryOrder = ['getDisplayedLeftColumns', 'getDisplayedCenterColumns', 'getDisplayedRightColumns'];
    if (isRtl) {
      queryOrder.reverse();
    }
    for (var i = 0; i < queryOrder.length; i++) {
      var container = this[queryOrder[i]]();
      if (container.length) {
        return isRtl ? last(container) : container[0];
      }
    }
    return null;
  };
  __decorate$5([Autowired('expressionService')], ColumnController.prototype, "expressionService", void 0);
  __decorate$5([Autowired('columnFactory')], ColumnController.prototype, "columnFactory", void 0);
  __decorate$5([Autowired('displayedGroupCreator')], ColumnController.prototype, "displayedGroupCreator", void 0);
  __decorate$5([Autowired('autoWidthCalculator')], ColumnController.prototype, "autoWidthCalculator", void 0);
  __decorate$5([Autowired('columnUtils')], ColumnController.prototype, "columnUtils", void 0);
  __decorate$5([Autowired('columnAnimationService')], ColumnController.prototype, "columnAnimationService", void 0);
  __decorate$5([Autowired('autoGroupColService')], ColumnController.prototype, "autoGroupColService", void 0);
  __decorate$5([Optional('aggFuncService')], ColumnController.prototype, "aggFuncService", void 0);
  __decorate$5([Optional('valueCache')], ColumnController.prototype, "valueCache", void 0);
  __decorate$5([Optional('animationFrameService')], ColumnController.prototype, "animationFrameService", void 0);
  __decorate$5([Autowired('rowModel')], ColumnController.prototype, "rowModel", void 0);
  __decorate$5([Autowired('columnApi')], ColumnController.prototype, "columnApi", void 0);
  __decorate$5([Autowired('gridApi')], ColumnController.prototype, "gridApi", void 0);
  __decorate$5([Autowired('sortController')], ColumnController.prototype, "sortController", void 0);
  __decorate$5([Autowired('columnDefFactory')], ColumnController.prototype, "columnDefFactory", void 0);
  __decorate$5([PostConstruct], ColumnController.prototype, "init", null);
  __decorate$5([__param$2(0, Qualifier('loggerFactory'))], ColumnController.prototype, "setBeans", null);
  ColumnController = __decorate$5([Bean('columnController')], ColumnController);
  return ColumnController;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
function padStartWidthZeros(value, totalStringSize) {
  return padStart(value.toString(), totalStringSize, '0');
}
function createArrayOfNumbers(first, last) {
  var result = [];
  for (var i = first; i <= last; i++) {
    result.push(i);
  }
  return result;
}
/**
 * Check if a value is numeric
 * from http://stackoverflow.com/questions/9716468/is-there-any-function-like-isnumeric-in-javascript-to-validate-numbers
 * @param {any} value
 * @return {boolean}
 */
function isNumeric(value) {
  return value !== '' && !isNaN(parseFloat(value)) && isFinite(value);
}
function getMaxSafeInteger() {
  // @ts-ignore
  return Number.MAX_SAFE_INTEGER || 9007199254740991;
}
function cleanNumber(value) {
  if (typeof value === 'string') {
    value = parseInt(value, 10);
  }
  if (typeof value === 'number') {
    return Math.floor(value);
  }
  return null;
}
function decToHex(number, bytes) {
  var hex = '';
  for (var i = 0; i < bytes; i++) {
    hex += String.fromCharCode(number & 0xff);
    number >>>= 8;
  }
  return hex;
}
function formatNumberTwoDecimalPlacesAndCommas(value) {
  if (typeof value !== 'number') {
    return '';
  }
  return formatNumberCommas(Math.round(value * 100) / 100);
}
/**
 * the native method number.toLocaleString(undefined, {minimumFractionDigits: 0})
 * puts in decimal places in IE, so we use this method instead
 * from: http://blog.tompawlak.org/number-currency-formatting-javascript
 * @param {number} value
 * @returns {string}
 */
function formatNumberCommas(value) {
  if (typeof value !== 'number') {
    return '';
  }
  return value.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
}
function sum(values) {
  return values == null ? null : values.reduce(function (total, value) {
    return total + value;
  }, 0);
}
var NumberUtils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  padStartWidthZeros: padStartWidthZeros,
  createArrayOfNumbers: createArrayOfNumbers,
  isNumeric: isNumeric,
  getMaxSafeInteger: getMaxSafeInteger,
  cleanNumber: cleanNumber,
  decToHex: decToHex,
  formatNumberTwoDecimalPlacesAndCommas: formatNumberTwoDecimalPlacesAndCommas,
  formatNumberCommas: formatNumberCommas,
  sum: sum
});

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$2 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$6 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
// takes in a list of columns, as specified by the column definitions, and returns column groups
var ColumnUtils = /** @class */function (_super) {
  __extends$2(ColumnUtils, _super);
  function ColumnUtils() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ColumnUtils.prototype.calculateColInitialWidth = function (colDef) {
    var optionsWrapper = this.gridOptionsWrapper;
    var minColWidth = colDef.minWidth != null ? colDef.minWidth : optionsWrapper.getMinColWidth();
    var maxColWidth = colDef.maxWidth != null ? colDef.maxWidth : optionsWrapper.getMaxColWidth() || getMaxSafeInteger();
    var width;
    var colDefWidth = attrToNumber(colDef.width);
    var colDefInitialWidth = attrToNumber(colDef.initialWidth);
    if (colDefWidth != null) {
      width = colDefWidth;
    } else if (colDefInitialWidth != null) {
      width = colDefInitialWidth;
    } else {
      width = optionsWrapper.getColWidth();
    }
    return Math.max(Math.min(width, maxColWidth), minColWidth);
  };
  ColumnUtils.prototype.getOriginalPathForColumn = function (column, originalBalancedTree) {
    var result = [];
    var found = false;
    var recursePath = function (balancedColumnTree, dept) {
      for (var i = 0; i < balancedColumnTree.length; i++) {
        if (found) {
          return;
        }
        // quit the search, so 'result' is kept with the found result
        var node = balancedColumnTree[i];
        if (node instanceof OriginalColumnGroup) {
          var nextNode = node;
          recursePath(nextNode.getChildren(), dept + 1);
          result[dept] = node;
        } else if (node === column) {
          found = true;
        }
      }
    };
    recursePath(originalBalancedTree, 0);
    // we should always find the path, but in case there is a bug somewhere, returning null
    // will make it fail rather than provide a 'hard to track down' bug
    return found ? result : null;
  };
  ColumnUtils.prototype.depthFirstOriginalTreeSearch = function (parent, tree, callback) {
    var _this = this;
    if (!tree) {
      return;
    }
    tree.forEach(function (child) {
      if (child instanceof OriginalColumnGroup) {
        _this.depthFirstOriginalTreeSearch(child, child.getChildren(), callback);
      }
      callback(child, parent);
    });
  };
  ColumnUtils.prototype.depthFirstAllColumnTreeSearch = function (tree, callback) {
    var _this = this;
    if (!tree) {
      return;
    }
    tree.forEach(function (child) {
      if (child instanceof ColumnGroup) {
        _this.depthFirstAllColumnTreeSearch(child.getChildren(), callback);
      }
      callback(child);
    });
  };
  ColumnUtils.prototype.depthFirstDisplayedColumnTreeSearch = function (tree, callback) {
    var _this = this;
    if (!tree) {
      return;
    }
    tree.forEach(function (child) {
      if (child instanceof ColumnGroup) {
        _this.depthFirstDisplayedColumnTreeSearch(child.getDisplayedChildren(), callback);
      }
      callback(child);
    });
  };
  ColumnUtils = __decorate$6([Bean('columnUtils')], ColumnUtils);
  return ColumnUtils;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$3 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$7 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
// takes in a list of columns, as specified by the column definitions, and returns column groups
var DisplayedGroupCreator = /** @class */function (_super) {
  __extends$3(DisplayedGroupCreator, _super);
  function DisplayedGroupCreator() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  DisplayedGroupCreator.prototype.createDisplayedGroups = function (
  // all displayed columns sorted - this is the columns the grid should show
  sortedVisibleColumns,
  // the tree of columns, as provided by the users, used to know what groups columns roll up into
  balancedColumnTree,
  // creates unique id's for the group
  groupInstanceIdCreator,
  // whether it's left, right or center col
  pinned,
  // we try to reuse old groups if we can, to allow gui to do animation
  oldDisplayedGroups) {
    var _this = this;
    var result = [];
    var previousRealPath;
    var previousOriginalPath;
    var oldColumnsMapped = this.mapOldGroupsById(oldDisplayedGroups);
    // go through each column, then do a bottom up comparison to the previous column, and start
    // to share groups if they converge at any point.
    sortedVisibleColumns.forEach(function (currentColumn) {
      var currentOriginalPath = _this.getOriginalPathForColumn(balancedColumnTree, currentColumn);
      var currentRealPath = [];
      var firstColumn = !previousOriginalPath;
      for (var i = 0; i < currentOriginalPath.length; i++) {
        if (firstColumn || currentOriginalPath[i] !== previousOriginalPath[i]) {
          // new group needed
          var newGroup = _this.createColumnGroup(currentOriginalPath[i], groupInstanceIdCreator, oldColumnsMapped, pinned);
          currentRealPath[i] = newGroup;
          // if top level, add to result, otherwise add to parent
          if (i == 0) {
            result.push(newGroup);
          } else {
            currentRealPath[i - 1].addChild(newGroup);
          }
        } else {
          // reuse old group
          currentRealPath[i] = previousRealPath[i];
        }
      }
      var noColumnGroups = currentRealPath.length === 0;
      if (noColumnGroups) {
        // if we are not grouping, then the result of the above is an empty
        // path (no groups), and we just add the column to the root list.
        result.push(currentColumn);
      } else {
        var leafGroup = last(currentRealPath);
        leafGroup.addChild(currentColumn);
      }
      previousRealPath = currentRealPath;
      previousOriginalPath = currentOriginalPath;
    });
    this.setupParentsIntoColumns(result, null);
    return result;
  };
  DisplayedGroupCreator.prototype.createColumnGroup = function (originalGroup, groupInstanceIdCreator, oldColumnsMapped, pinned) {
    var groupId = originalGroup.getGroupId();
    var instanceId = groupInstanceIdCreator.getInstanceIdForKey(groupId);
    var uniqueId = ColumnGroup.createUniqueId(groupId, instanceId);
    var columnGroup = oldColumnsMapped[uniqueId];
    // if the user is setting new colDefs, it is possible that the id's overlap, and we
    // would have a false match from above. so we double check we are talking about the
    // same original column group.
    if (columnGroup && columnGroup.getOriginalColumnGroup() !== originalGroup) {
      columnGroup = null;
    }
    if (exists(columnGroup)) {
      // clean out the old column group here, as we will be adding children into it again
      columnGroup.reset();
    } else {
      columnGroup = new ColumnGroup(originalGroup, groupId, instanceId, pinned);
      this.context.createBean(columnGroup);
    }
    return columnGroup;
  };
  // returns back a 2d map of ColumnGroup as follows: groupId -> instanceId -> ColumnGroup
  DisplayedGroupCreator.prototype.mapOldGroupsById = function (displayedGroups) {
    var result = {};
    var recursive = function (columnsOrGroups) {
      columnsOrGroups.forEach(function (columnOrGroup) {
        if (columnOrGroup instanceof ColumnGroup) {
          var columnGroup = columnOrGroup;
          result[columnOrGroup.getUniqueId()] = columnGroup;
          recursive(columnGroup.getChildren());
        }
      });
    };
    if (displayedGroups) {
      recursive(displayedGroups);
    }
    return result;
  };
  DisplayedGroupCreator.prototype.setupParentsIntoColumns = function (columnsOrGroups, parent) {
    var _this = this;
    columnsOrGroups.forEach(function (columnsOrGroup) {
      columnsOrGroup.setParent(parent);
      if (columnsOrGroup instanceof ColumnGroup) {
        var columnGroup = columnsOrGroup;
        _this.setupParentsIntoColumns(columnGroup.getChildren(), columnGroup);
      }
    });
  };
  DisplayedGroupCreator.prototype.getOriginalPathForColumn = function (balancedColumnTree, column) {
    var result = [];
    var found = false;
    var recursePath = function (columnTree, dept) {
      for (var i = 0; i < columnTree.length; i++) {
        // quit the search, so 'result' is kept with the found result
        if (found) {
          return;
        }
        var node = columnTree[i];
        if (node instanceof OriginalColumnGroup) {
          var nextNode = node;
          recursePath(nextNode.getChildren(), dept + 1);
          result[dept] = node;
        } else if (node === column) {
          found = true;
        }
      }
    };
    recursePath(balancedColumnTree, 0);
    // it's possible we didn't find a path. this happens if the column is generated
    // by the grid (auto-group), in that the definition didn't come from the client. in this case,
    // we create a fake original path.
    if (found) {
      return result;
    }
    console.warn('could not get path');
    return null;
  };
  DisplayedGroupCreator = __decorate$7([Bean('displayedGroupCreator')], DisplayedGroupCreator);
  return DisplayedGroupCreator;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$4 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$8 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HeadlessService = /** @class */function (_super) {
  __extends$4(HeadlessService, _super);
  function HeadlessService() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  HeadlessService_1 = HeadlessService;
  HeadlessService.prototype.getHeaderRows = function () {
    return this.headerRows;
  };
  HeadlessService.prototype.getRows = function () {
    return this.rows;
  };
  HeadlessService.prototype.getCenterRowContainer = function () {
    return this.centerRowContainer;
  };
  HeadlessService.prototype.postConstruct = function () {
    var _this = this;
    this.createHeaderRows();
    this.onPageLoaded();
    this.addManagedListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, this.onPageLoaded.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, function () {
      _this.createHeaderRows();
      _this.onPageLoaded();
    });
  };
  HeadlessService.prototype.createHeaderRows = function () {
    this.headerRows = [];
    var headerRowCount = this.columnController.getHeaderRowCount();
    for (var i = 0; i < headerRowCount; i++) {
      var groupLevel = i === headerRowCount - 1;
      this.headerRows.push(this.createHeaderRow(i, groupLevel));
    }
    this.dispatchEvent({
      type: HeadlessService_1.EVENT_HEADERS_UPDATED
    });
  };
  HeadlessService.prototype.onPageLoaded = function () {
    var _this = this;
    this.rows = [];
    var firstRow = this.paginationProxy.getPageFirstRow();
    var lastRow = this.paginationProxy.getPageLastRow();
    // first and last rows are -1 if no rows to display
    if (firstRow < 0 || lastRow < 0) {
      return;
    }
    var displayedColumns = this.columnController.getDisplayedColumns(null);
    var _loop_1 = function (rowIndex) {
      var rowNode = this_1.paginationProxy.getRow(rowIndex);
      if (!rowNode) {
        return "continue";
      }
      var cells = [];
      var rowVo = {
        cells: cells,
        index: rowIndex,
        id: rowNode.id,
        height: rowNode.rowHeight,
        top: rowNode.rowTop
      };
      displayedColumns.forEach(function (col) {
        cells.push({
          value: _this.valueService.getValue(col, rowNode),
          colId: col.getId(),
          width: col.getActualWidth(),
          left: col.getLeft()
        });
      });
      this_1.rows.push(rowVo);
    };
    var this_1 = this;
    for (var rowIndex = firstRow; rowIndex <= lastRow; rowIndex++) {
      _loop_1(rowIndex);
    }
    this.dispatchEvent({
      type: HeadlessService_1.EVENT_ROWS_UPDATED
    });
    this.centerRowContainer = {
      height: Math.max(this.paginationProxy.getCurrentPageHeight(), 1),
      width: this.columnController.getBodyContainerWidth()
    };
    this.dispatchEvent({
      type: HeadlessService_1.EVENT_ROW_CONTAINER_UPDATED
    });
  };
  HeadlessService.prototype.createHeaderRow = function (depth, groupLevel) {
    var _this = this;
    var items = this.columnController.getVirtualHeaderGroupRow(null, depth);
    var mapColumn = function (item) {
      var isCol = item instanceof Column;
      var name = isCol ? _this.columnController.getDisplayNameForColumn(item, 'header') : _this.columnController.getDisplayNameForColumnGroup(item, 'header');
      var res = {
        name: name,
        id: item.getUniqueId()
      };
      return res;
    };
    var res = {
      headerRowIndex: depth,
      groupLevel: groupLevel,
      columns: items.map(mapColumn)
    };
    return res;
  };
  var HeadlessService_1;
  HeadlessService.EVENT_ROWS_UPDATED = 'rowsUpdated';
  HeadlessService.EVENT_HEADERS_UPDATED = 'headersUpdated';
  HeadlessService.EVENT_ROW_CONTAINER_UPDATED = 'rowContainerUpdated';
  __decorate$8([Autowired('columnController')], HeadlessService.prototype, "columnController", void 0);
  __decorate$8([Autowired('paginationProxy')], HeadlessService.prototype, "paginationProxy", void 0);
  __decorate$8([Autowired('valueService')], HeadlessService.prototype, "valueService", void 0);
  __decorate$8([PostConstruct], HeadlessService.prototype, "postConstruct", null);
  HeadlessService = HeadlessService_1 = __decorate$8([Bean('headlessService')], HeadlessService);
  return HeadlessService;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
/**
 * These variables are lazy loaded, as otherwise they try and get initialised when we are loading
 * unit tests and we don't have references to window or document in the unit tests
 * from http://stackoverflow.com/questions/9847580/how-to-detect-safari-chrome-ie-firefox-and-opera-browser
 */
var isSafari;
var isIE;
var isEdge;
var isChrome;
var isFirefox;
var isIOS;
var invisibleScrollbar;
var browserScrollbarWidth;
function isBrowserIE() {
  if (isIE === undefined) {
    isIE = /*@cc_on!@*/!!document.documentMode; // At least IE6
  }

  return isIE;
}
function isBrowserEdge() {
  if (isEdge === undefined) {
    isEdge = !isBrowserIE() && !!window.StyleMedia;
  }
  return isEdge;
}
function isBrowserSafari() {
  if (isSafari === undefined) {
    // taken from https://stackoverflow.com/a/23522755/1388233
    isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
  }
  return isSafari;
}
function isBrowserChrome() {
  if (isChrome === undefined) {
    var win = window;
    isChrome = !!win.chrome && (!!win.chrome.webstore || !!win.chrome.runtime) || /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
  }
  return isChrome;
}
function isBrowserFirefox() {
  if (isFirefox === undefined) {
    var win = window;
    isFirefox = typeof win.InstallTrigger !== 'undefined';
  }
  return isFirefox;
}
function isIOSUserAgent() {
  if (isIOS === undefined) {
    // taken from https://stackoverflow.com/a/58064481/1388233
    isIOS = (/iPad|iPhone|iPod/.test(navigator.platform) ||
    // eslint-disable-next-line
    navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1) && !window.MSStream;
  }
  return isIOS;
}
function getTabIndex(el) {
  if (!el) {
    return null;
  }
  var numberTabIndex = el.tabIndex;
  var tabIndex = el.getAttribute('tabIndex');
  if (isBrowserIE() && numberTabIndex === 0 && tabIndex === null) {
    var map = {
      a: true,
      body: true,
      button: true,
      frame: true,
      iframe: true,
      img: true,
      input: true,
      isindex: true,
      object: true,
      select: true,
      textarea: true
    };
    return map[el.nodeName.toLowerCase()] === true ? '0' : null;
  }
  if (numberTabIndex === -1 && (tabIndex === null || tabIndex === '' && !isBrowserFirefox())) {
    return null;
  }
  return numberTabIndex.toString();
}
function getMaxDivHeight() {
  if (!document.body) {
    return -1;
  }
  var res = 1000000;
  // FF reports the height back but still renders blank after ~6M px
  var testUpTo = navigator.userAgent.toLowerCase().match(/firefox/) ? 6000000 : 1000000000;
  var div = document.createElement('div');
  document.body.appendChild(div);
  while (true) {
    var test = res * 2;
    div.style.height = test + 'px';
    if (test > testUpTo || div.clientHeight !== test) {
      break;
    } else {
      res = test;
    }
  }
  document.body.removeChild(div);
  return res;
}
function getScrollbarWidth() {
  if (browserScrollbarWidth == null) {
    initScrollbarWidthAndVisibility();
  }
  return browserScrollbarWidth;
}
function initScrollbarWidthAndVisibility() {
  var body = document.body;
  var div = document.createElement('div');
  div.style.width = div.style.height = '100px';
  div.style.opacity = '0';
  div.style.overflow = 'scroll';
  div.style.msOverflowStyle = 'scrollbar'; // needed for WinJS apps
  div.style.position = 'absolute';
  body.appendChild(div);
  var width = div.offsetWidth - div.clientWidth;
  // if width is 0 and client width is 0, means the DOM isn't ready
  if (width === 0 && div.clientWidth === 0) {
    width = null;
  }
  // remove div
  if (div.parentNode) {
    div.parentNode.removeChild(div);
  }
  if (width != null) {
    browserScrollbarWidth = width;
    invisibleScrollbar = width === 0;
  }
}
function isInvisibleScrollbar() {
  if (invisibleScrollbar == null) {
    initScrollbarWidthAndVisibility();
  }
  return invisibleScrollbar;
}
/** @deprecated */
function hasOverflowScrolling() {
  var prefixes = ['webkit', 'moz', 'o', 'ms'];
  var div = document.createElement('div');
  var body = document.getElementsByTagName('body')[0];
  var found = false;
  var p;
  body.appendChild(div);
  div.setAttribute('style', prefixes.map(function (prefix) {
    return "-" + prefix + "-overflow-scrolling: touch";
  }).concat('overflow-scrolling: touch').join(';'));
  var computedStyle = window.getComputedStyle(div);
  if (computedStyle.overflowScrolling === 'touch') {
    found = true;
  }
  if (!found) {
    for (var _i = 0, prefixes_1 = prefixes; _i < prefixes_1.length; _i++) {
      p = prefixes_1[_i];
      if (computedStyle[p + "OverflowScrolling"] === 'touch') {
        found = true;
        break;
      }
    }
  }
  if (div.parentNode) {
    div.parentNode.removeChild(div);
  }
  return found;
}
/**
 * Gets the document body width
 * from: http://stackoverflow.com/questions/1038727/how-to-get-browser-width-using-javascript-code
 * @returns {number}
 */
function getBodyWidth() {
  if (document.body) {
    return document.body.clientWidth;
  }
  if (window.innerHeight) {
    return window.innerWidth;
  }
  if (document.documentElement && document.documentElement.clientWidth) {
    return document.documentElement.clientWidth;
  }
  return -1;
}
/**
 * Gets the body height
 * from: http://stackoverflow.com/questions/1038727/how-to-get-browser-width-using-javascript-code
 * @returns {number}
 */
function getBodyHeight() {
  if (document.body) {
    return document.body.clientHeight;
  }
  if (window.innerHeight) {
    return window.innerHeight;
  }
  if (document.documentElement && document.documentElement.clientHeight) {
    return document.documentElement.clientHeight;
  }
  return -1;
}
var BrowserUtils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  isBrowserIE: isBrowserIE,
  isBrowserEdge: isBrowserEdge,
  isBrowserSafari: isBrowserSafari,
  isBrowserChrome: isBrowserChrome,
  isBrowserFirefox: isBrowserFirefox,
  isIOSUserAgent: isIOSUserAgent,
  getTabIndex: getTabIndex,
  getMaxDivHeight: getMaxDivHeight,
  getScrollbarWidth: getScrollbarWidth,
  isInvisibleScrollbar: isInvisibleScrollbar,
  hasOverflowScrolling: hasOverflowScrolling,
  getBodyWidth: getBodyWidth,
  getBodyHeight: getBodyHeight
});

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var rtlNegativeScroll;
function addCssClass(element, className) {
  if (!element || !className || className.length === 0) {
    return;
  }
  if (className.indexOf(' ') >= 0) {
    className.split(' ').forEach(function (value) {
      return addCssClass(element, value);
    });
    return;
  }
  if (element.classList) {
    element.classList.add(className);
  } else if (element.className && element.className.length > 0) {
    var cssClasses = element.className.split(' ');
    if (cssClasses.indexOf(className) < 0) {
      cssClasses.push(className);
      element.setAttribute('class', cssClasses.join(' '));
    }
  } else {
    // do not use element.classList = className here, it will cause
    // a read-only assignment error on some browsers (IE/Edge).
    element.setAttribute('class', className);
  }
  return element;
}
function removeCssClass(element, className) {
  if (!element || !className || className.length === 0) {
    return;
  }
  if (className.indexOf(' ') >= 0) {
    className.split(' ').forEach(function (value) {
      return removeCssClass(element, value);
    });
    return;
  }
  if (element.classList) {
    element.classList.remove(className);
  } else if (element.className && element.className.length > 0) {
    var newClassName = element.className.split(' ').filter(function (c) {
      return c !== className;
    }).join(' ');
    element.setAttribute('class', newClassName);
  }
}
function addOrRemoveCssClass(element, className, addOrRemove) {
  if (addOrRemove) {
    addCssClass(element, className);
  } else {
    removeCssClass(element, className);
  }
}
/**
 * This method adds a class to an element and remove that class from all siblings.
 * Useful for toggling state.
 * @param {HTMLElement} element The element to receive the class
 * @param {string} elementClass The class to be assigned to the element
 * @param {boolean} otherElementClass The class to be assigned to siblings of the element, but not the element itself
 */
function radioCssClass(element, elementClass, otherElementClass) {
  var parent = element.parentElement;
  var sibling = parent && parent.firstChild;
  while (sibling) {
    if (elementClass) {
      addOrRemoveCssClass(sibling, elementClass, sibling === element);
    }
    if (otherElementClass) {
      addOrRemoveCssClass(sibling, otherElementClass, sibling !== element);
    }
    sibling = sibling.nextSibling;
  }
}
function containsClass(element, className) {
  if (element.classList) {
    // for modern browsers
    return element.classList.contains(className);
  }
  if (element.className) {
    // for older browsers, check against the string of class names
    // if only one class, can check for exact match
    var onlyClass = element.className === className;
    // if many classes, check for class name, we have to pad with ' ' to stop other
    // class names that are a substring of this class
    var contains = element.className.indexOf(' ' + className + ' ') >= 0;
    // the padding above then breaks when it's the first or last class names
    var startsWithClass = element.className.indexOf(className + ' ') === 0;
    var endsWithClass = element.className.lastIndexOf(' ' + className) === element.className.length - className.length - 1;
    return onlyClass || contains || startsWithClass || endsWithClass;
  }
  // if item is not a node
  return false;
}
function isFocusableFormField(element) {
  var matches = Element.prototype.matches || Element.prototype.msMatchesSelector;
  var isFocusable = matches.call(element, Constants.INPUT_SELECTOR);
  var isNotFocusable = matches.call(element, Constants.FOCUSABLE_EXCLUDE);
  var isElementVisible = isVisible(element);
  var focusable = isFocusable && !isNotFocusable && isElementVisible;
  return focusable;
}
function setDisplayed(element, displayed) {
  addOrRemoveCssClass(element, 'ag-hidden', !displayed);
}
function setVisible(element, visible) {
  addOrRemoveCssClass(element, 'ag-invisible', !visible);
}
function setDisabled(element, disabled) {
  var attributeName = 'disabled';
  var addOrRemoveDisabledAttribute = disabled ? function (e) {
    return e.setAttribute(attributeName, '');
  } : function (e) {
    return e.removeAttribute(attributeName);
  };
  addOrRemoveDisabledAttribute(element);
  nodeListForEach(element.querySelectorAll('input'), function (input) {
    return addOrRemoveDisabledAttribute(input);
  });
}
function isElementChildOfClass(element, cls, maxNest) {
  var counter = 0;
  while (element) {
    if (containsClass(element, cls)) {
      return true;
    }
    element = element.parentElement;
    if (maxNest && ++counter > maxNest) {
      break;
    }
  }
  return false;
}
// returns back sizes as doubles instead of strings. similar to
// getBoundingClientRect, however getBoundingClientRect does not:
// a) work with fractions (eg browser is zooming)
// b) has CSS transitions applied (eg CSS scale, browser zoom), which we don't want, we want the un-transitioned values
function getElementSize(el) {
  var _a = window.getComputedStyle(el),
    height = _a.height,
    width = _a.width,
    paddingTop = _a.paddingTop,
    paddingRight = _a.paddingRight,
    paddingBottom = _a.paddingBottom,
    paddingLeft = _a.paddingLeft,
    marginTop = _a.marginTop,
    marginRight = _a.marginRight,
    marginBottom = _a.marginBottom,
    marginLeft = _a.marginLeft,
    boxSizing = _a.boxSizing;
  return {
    height: parseFloat(height),
    width: parseFloat(width),
    paddingTop: parseFloat(paddingTop),
    paddingRight: parseFloat(paddingRight),
    paddingBottom: parseFloat(paddingBottom),
    paddingLeft: parseFloat(paddingLeft),
    marginTop: parseFloat(marginTop),
    marginRight: parseFloat(marginRight),
    marginBottom: parseFloat(marginBottom),
    marginLeft: parseFloat(marginLeft),
    boxSizing: boxSizing
  };
}
function getInnerHeight(el) {
  var size = getElementSize(el);
  if (size.boxSizing === 'border-box') {
    return size.height - size.paddingTop - size.paddingBottom;
  }
  return size.height;
}
function getInnerWidth(el) {
  var size = getElementSize(el);
  if (size.boxSizing === 'border-box') {
    return size.width - size.paddingLeft - size.paddingRight;
  }
  return size.width;
}
function getAbsoluteHeight(el) {
  var size = getElementSize(el);
  var marginRight = size.marginBottom + size.marginTop;
  return Math.ceil(el.offsetHeight + marginRight);
}
function getAbsoluteWidth(el) {
  var size = getElementSize(el);
  var marginWidth = size.marginLeft + size.marginRight;
  return Math.ceil(el.offsetWidth + marginWidth);
}
function isRtlNegativeScroll() {
  if (typeof rtlNegativeScroll === "boolean") {
    return rtlNegativeScroll;
  }
  var template = document.createElement('div');
  template.style.direction = 'rtl';
  template.style.width = '1px';
  template.style.height = '1px';
  template.style.position = 'fixed';
  template.style.top = '0px';
  template.style.overflow = 'hidden';
  template.dir = 'rtl';
  template.innerHTML = /* html */
  "<div style=\"width: 2px\">\n            <span style=\"display: inline-block; width: 1px\"></span>\n            <span style=\"display: inline-block; width: 1px\"></span>\n        </div>";
  document.body.appendChild(template);
  template.scrollLeft = 1;
  rtlNegativeScroll = Math.floor(template.scrollLeft) === 0;
  document.body.removeChild(template);
  return rtlNegativeScroll;
}
function getScrollLeft(element, rtl) {
  var scrollLeft = element.scrollLeft;
  if (rtl) {
    // Absolute value - for FF that reports RTL scrolls in negative numbers
    scrollLeft = Math.abs(scrollLeft);
    if (isBrowserChrome() && !isRtlNegativeScroll()) {
      scrollLeft = element.scrollWidth - element.clientWidth - scrollLeft;
    }
  }
  return scrollLeft;
}
function setScrollLeft(element, value, rtl) {
  if (rtl) {
    // Chrome and Safari when doing RTL have the END position of the scroll as zero, not the start
    if (isRtlNegativeScroll()) {
      value *= -1;
    } else if (isBrowserSafari() || isBrowserChrome()) {
      value = element.scrollWidth - element.clientWidth - value;
    }
  }
  element.scrollLeft = value;
}
function clearElement(el) {
  while (el && el.firstChild) {
    el.removeChild(el.firstChild);
  }
}
/** @deprecated */
function removeElement(parent, cssSelector) {
  removeFromParent(parent.querySelector(cssSelector));
}
function removeFromParent(node) {
  if (node && node.parentNode) {
    node.parentNode.removeChild(node);
  }
}
function isVisible(element) {
  return element.offsetParent !== null;
}
/**
 * Loads the template and returns it as an element. makes up for no simple way in
 * the dom api to load html directly, eg we cannot do this: document.createElement(template)
 * @param {string} template
 * @returns {HTMLElement}
 */
function loadTemplate(template) {
  var tempDiv = document.createElement('div');
  tempDiv.innerHTML = (template || '').trim();
  return tempDiv.firstChild;
}
function appendHtml(eContainer, htmlTemplate) {
  if (eContainer.lastChild) {
    // https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML
    // we put the items at the start, so new items appear underneath old items,
    // so when expanding/collapsing groups, the new rows don't go on top of the
    // rows below that are moving our of the way
    eContainer.insertAdjacentHTML('afterbegin', htmlTemplate);
  } else {
    eContainer.innerHTML = htmlTemplate;
  }
}
/** @deprecated */
function getElementAttribute(element, attributeName) {
  if (element.attributes && element.attributes[attributeName]) {
    var attribute = element.attributes[attributeName];
    return attribute.value;
  }
  return null;
}
function offsetHeight(element) {
  return element && element.clientHeight ? element.clientHeight : 0;
}
function offsetWidth(element) {
  return element && element.clientWidth ? element.clientWidth : 0;
}
function ensureDomOrder(eContainer, eChild, eChildBefore) {
  // if already in right order, do nothing
  if (eChildBefore && eChildBefore.nextSibling === eChild) {
    return;
  }
  if (eChildBefore) {
    if (eChildBefore.nextSibling) {
      // insert between the eRowBefore and the row after it
      eContainer.insertBefore(eChild, eChildBefore.nextSibling);
    } else {
      // if nextSibling is missing, means other row is at end, so just append new row at the end
      eContainer.appendChild(eChild);
    }
  } else {
    // otherwise put at start
    if (eContainer.firstChild && eContainer.firstChild !== eChild) {
      // insert it at the first location
      eContainer.insertAdjacentElement('afterbegin', eChild);
    }
  }
}
function setDomChildOrder(eContainer, orderedChildren) {
  for (var i = 0; i < orderedChildren.length; i++) {
    var correctCellAtIndex = orderedChildren[i];
    var actualCellAtIndex = eContainer.children[i];
    if (actualCellAtIndex !== correctCellAtIndex) {
      eContainer.insertBefore(correctCellAtIndex, actualCellAtIndex);
    }
  }
}
function insertWithDomOrder(eContainer, eToInsert, eChildBefore) {
  if (eChildBefore) {
    // if previous element exists, just slot in after the previous element
    eChildBefore.insertAdjacentElement('afterend', eToInsert);
  } else {
    if (eContainer.firstChild) {
      // insert it at the first location
      eContainer.insertAdjacentElement('afterbegin', eToInsert);
    } else {
      // otherwise eContainer is empty, so just append it
      eContainer.appendChild(eToInsert);
    }
  }
}
/** @deprecated */
function prependDC(parent, documentFragment) {
  if (exists(parent.firstChild)) {
    parent.insertBefore(documentFragment, parent.firstChild);
  } else {
    parent.appendChild(documentFragment);
  }
}
function addStylesToElement(eElement, styles) {
  if (!styles) {
    return;
  }
  Object.keys(styles).forEach(function (key) {
    var keyCamelCase = hyphenToCamelCase(key);
    if (keyCamelCase) {
      eElement.style[keyCamelCase] = styles[key];
    }
  });
}
function isHorizontalScrollShowing(element) {
  return element.clientWidth < element.scrollWidth;
}
function isVerticalScrollShowing(element) {
  return element.clientHeight < element.scrollHeight;
}
function setElementWidth(element, width) {
  if (width === 'flex') {
    element.style.removeProperty('width');
    element.style.removeProperty('minWidth');
    element.style.removeProperty('maxWidth');
    element.style.flex = '1 1 auto';
  } else {
    setFixedWidth(element, width);
  }
}
function setFixedWidth(element, width) {
  width = formatSize(width);
  element.style.width = width.toString();
  element.style.maxWidth = width.toString();
  element.style.minWidth = width.toString();
}
function setElementHeight(element, height) {
  if (height === 'flex') {
    element.style.removeProperty('height');
    element.style.removeProperty('minHeight');
    element.style.removeProperty('maxHeight');
    element.style.flex = '1 1 auto';
  } else {
    setFixedHeight(element, height);
  }
}
function setFixedHeight(element, height) {
  height = formatSize(height);
  element.style.height = height.toString();
  element.style.maxHeight = height.toString();
  element.style.minHeight = height.toString();
}
function formatSize(size) {
  if (typeof size === 'number') {
    return size + "px";
  }
  return size;
}
/**
 * Returns true if it is a DOM node
 * taken from: http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object
 * @param {any} o
 * @return {boolean}
 */
function isNode(o) {
  return typeof Node === 'function' ? o instanceof Node : o && typeof o === 'object' && typeof o.nodeType === 'number' && typeof o.nodeName === 'string';
}
//
/**
 * Returns true if it is a DOM element
 * taken from: http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object
 * @param {any} o
 * @returns {boolean}
 */
function isElement(o) {
  return typeof HTMLElement === 'function' ? o instanceof HTMLElement //DOM2
  : o && isNonNullObject(o) && o.nodeType === 1 && typeof o.nodeName === 'string';
}
function isNodeOrElement(o) {
  return isNode(o) || isElement(o);
}
/**
 * Makes a copy of a node list into a list
 * @param {NodeList} nodeList
 * @returns {Node[]}
 */
function copyNodeList(nodeList) {
  if (nodeList == null) {
    return [];
  }
  var result = [];
  nodeListForEach(nodeList, function (node) {
    return result.push(node);
  });
  return result;
}
function iterateNamedNodeMap(map, callback) {
  if (!map) {
    return;
  }
  for (var i = 0; i < map.length; i++) {
    var attr = map[i];
    callback(attr.name, attr.value);
  }
}
/** @deprecated */
function setCheckboxState(eCheckbox, state) {
  if (typeof state === 'boolean') {
    eCheckbox.checked = state;
    eCheckbox.indeterminate = false;
  } else {
    // isNodeSelected returns back undefined if it's a group and the children
    // are a mix of selected and unselected
    eCheckbox.indeterminate = true;
  }
}
function addOrRemoveAttribute(element, name, value) {
  if (value == null) {
    element.removeAttribute(name);
  } else {
    element.setAttribute(name, value.toString());
  }
}
function nodeListForEach(nodeList, action) {
  if (nodeList == null) {
    return;
  }
  for (var i = 0; i < nodeList.length; i++) {
    action(nodeList[i]);
  }
}
var DomUtils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  addCssClass: addCssClass,
  removeCssClass: removeCssClass,
  addOrRemoveCssClass: addOrRemoveCssClass,
  radioCssClass: radioCssClass,
  containsClass: containsClass,
  isFocusableFormField: isFocusableFormField,
  setDisplayed: setDisplayed,
  setVisible: setVisible,
  setDisabled: setDisabled,
  isElementChildOfClass: isElementChildOfClass,
  getElementSize: getElementSize,
  getInnerHeight: getInnerHeight,
  getInnerWidth: getInnerWidth,
  getAbsoluteHeight: getAbsoluteHeight,
  getAbsoluteWidth: getAbsoluteWidth,
  isRtlNegativeScroll: isRtlNegativeScroll,
  getScrollLeft: getScrollLeft,
  setScrollLeft: setScrollLeft,
  clearElement: clearElement,
  removeElement: removeElement,
  removeFromParent: removeFromParent,
  isVisible: isVisible,
  loadTemplate: loadTemplate,
  appendHtml: appendHtml,
  getElementAttribute: getElementAttribute,
  offsetHeight: offsetHeight,
  offsetWidth: offsetWidth,
  ensureDomOrder: ensureDomOrder,
  setDomChildOrder: setDomChildOrder,
  insertWithDomOrder: insertWithDomOrder,
  prependDC: prependDC,
  addStylesToElement: addStylesToElement,
  isHorizontalScrollShowing: isHorizontalScrollShowing,
  isVerticalScrollShowing: isVerticalScrollShowing,
  setElementWidth: setElementWidth,
  setFixedWidth: setFixedWidth,
  setElementHeight: setElementHeight,
  setFixedHeight: setFixedHeight,
  formatSize: formatSize,
  isNode: isNode,
  isElement: isElement,
  isNodeOrElement: isNodeOrElement,
  copyNodeList: copyNodeList,
  iterateNamedNodeMap: iterateNamedNodeMap,
  setCheckboxState: setCheckboxState,
  addOrRemoveAttribute: addOrRemoveAttribute,
  nodeListForEach: nodeListForEach
});

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var TestHeadless = /** @class */function () {
  function TestHeadless() {}
  TestHeadless.prototype.doSomething = function (eDiv, gridOptions) {
    var headlessService = gridOptions.api.headlessService;
    var headerRows = headlessService.getHeaderRows();
    var rows = headlessService.getRows();
    clearElement(eDiv);
    var eTable = document.createElement('table');
    headerRows.forEach(function (headerRow) {
      var eTr = document.createElement('tr');
      eTable.appendChild(eTr);
      headerRow.columns.forEach(function (col) {
        var eTh = document.createElement('th');
        eTr.appendChild(eTh);
        if (col.name != null) {
          eTh.innerText = col.name;
        }
      });
    });
    rows.forEach(function (row) {
      var eTr = document.createElement('tr');
      eTable.appendChild(eTr);
      row.cells.forEach(function (cell) {
        var eTd = document.createElement('td');
        eTr.appendChild(eTd);
        if (cell.value != null) {
          eTd.innerText = cell.value.toString();
        }
      });
    });
    eDiv.append(eTable);
    console.warn('TestHeadless.doSomething');
  };
  return TestHeadless;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __spreadArrays =  false || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
};
/**
 * These keys are used for validating properties supplied on a gridOptions object, and for code generation.
 * If you change the properties on the gridOptions interface, you *must* update this file as well to be consistent.
 */
var PropertyKeys = /** @class */function () {
  function PropertyKeys() {}
  PropertyKeys.STRING_PROPERTIES = ['sortingOrder', 'rowClass', 'rowSelection', 'overlayLoadingTemplate', 'overlayNoRowsTemplate', 'quickFilterText', 'rowModelType', 'editType', 'domLayout', 'clipboardDeliminator', 'rowGroupPanelShow', 'multiSortKey', 'pivotColumnGroupTotals', 'pivotRowTotals', 'pivotPanelShow', 'fillHandleDirection', 'serverSideStoreType'];
  PropertyKeys.OBJECT_PROPERTIES = ['components', 'frameworkComponents', 'rowStyle', 'context', 'autoGroupColumnDef', 'localeText', 'icons', 'datasource', 'serverSideDatasource', 'viewportDatasource', 'groupRowRendererParams', 'aggFuncs', 'fullWidthCellRendererParams', 'defaultColGroupDef', 'defaultColDef', 'defaultExportParams', 'defaultCsvExportParams', 'defaultExcelExportParams', 'columnTypes', 'rowClassRules', 'detailGridOptions', 'detailCellRendererParams', 'loadingCellRendererParams', 'loadingOverlayComponentParams', 'noRowsOverlayComponentParams', 'popupParent', 'colResizeDefault', 'reduxStore', 'statusBar', 'sideBar', 'chartThemeOverrides', 'customChartThemes'];
  PropertyKeys.ARRAY_PROPERTIES = ['alignedGrids', 'rowData', 'columnDefs', 'excelStyles', 'pinnedTopRowData', 'pinnedBottomRowData', 'chartThemes'];
  PropertyKeys.NUMBER_PROPERTIES = ['rowHeight', 'detailRowHeight', 'rowBuffer', 'colWidth', 'headerHeight', 'groupHeaderHeight', 'floatingFiltersHeight', 'pivotHeaderHeight', 'pivotGroupHeaderHeight', 'groupDefaultExpanded', 'minColWidth', 'maxColWidth', 'viewportRowModelPageSize', 'viewportRowModelBufferSize', 'autoSizePadding', 'maxBlocksInCache', 'maxConcurrentDatasourceRequests', 'tooltipShowDelay', 'cacheOverflowSize', 'paginationPageSize', 'cacheBlockSize', 'infiniteInitialRowCount', 'scrollbarWidth', 'batchUpdateWaitMillis', 'asyncTransactionWaitMillis', 'blockLoadDebounceMillis', 'keepDetailRowsCount', 'undoRedoCellEditingLimit', 'cellFlashDelay', 'cellFadeDelay', 'tabIndex'];
  PropertyKeys.BOOLEAN_PROPERTIES = ['suppressMakeColumnVisibleAfterUnGroup', 'suppressRowClickSelection', 'suppressCellSelection', 'suppressHorizontalScroll', 'alwaysShowHorizontalScroll', 'alwaysShowVerticalScroll', 'debug', 'enableBrowserTooltips', 'enableCellExpressions', 'angularCompileRows', 'angularCompileFilters', 'groupSuppressAutoColumn', 'groupSelectsChildren', 'groupIncludeFooter', 'groupIncludeTotalFooter', 'groupUseEntireRow', 'groupSuppressBlankHeader', 'suppressMenuHide', 'suppressRowDeselection', 'unSortIcon', 'suppressMultiSort', 'singleClickEdit', 'suppressLoadingOverlay', 'suppressNoRowsOverlay', 'suppressAutoSize', 'skipHeaderOnAutoSize', 'suppressParentsInRowNodes', 'suppressColumnMoveAnimation', 'suppressMovableColumns', 'suppressFieldDotNotation', 'enableRangeSelection', 'enableRangeHandle', 'enableFillHandle', 'suppressClearOnFillReduction', 'deltaSort', 'suppressTouch', 'suppressAsyncEvents', 'allowContextMenuWithControlKey', 'suppressContextMenu', 'rememberGroupStateWhenNewData', 'enableCellChangeFlash', 'suppressDragLeaveHidesColumns', 'suppressMiddleClickScrolls', 'suppressPreventDefaultOnMouseWheel', 'suppressCopyRowsToClipboard', 'copyHeadersToClipboard', 'pivotMode', 'suppressAggFuncInHeader', 'suppressColumnVirtualisation', 'suppressAggAtRootLevel', 'suppressFocusAfterRefresh', 'functionsPassive', 'functionsReadOnly', 'animateRows', 'groupSelectsFiltered', 'groupRemoveSingleChildren', 'groupRemoveLowestSingleChildren', 'enableRtl', 'suppressClickEdit', 'rowDragManaged', 'suppressRowDrag', 'suppressMoveWhenRowDragging', 'enableMultiRowDragging', 'enableGroupEdit', 'embedFullWidthRows', 'deprecatedEmbedFullWidthRows', 'suppressPaginationPanel', 'floatingFilter', 'groupHideOpenParents', 'groupMultiAutoColumn', 'pagination', 'stopEditingWhenGridLosesFocus', 'paginationAutoPageSize', 'suppressScrollOnNewData', 'purgeClosedRowNodes', 'cacheQuickFilter', 'deltaRowDataMode', 'ensureDomOrder', 'accentedSort', 'suppressChangeDetection', 'valueCache', 'valueCacheNeverExpires', 'aggregateOnlyChangedColumns', 'suppressAnimationFrame', 'suppressExcelExport', 'suppressCsvExport', 'treeData', 'masterDetail', 'suppressMultiRangeSelection', 'enterMovesDownAfterEdit', 'enterMovesDown', 'suppressPropertyNamesCheck', 'rowMultiSelectWithClick', 'suppressEnterpriseResetOnNewColumns', 'enableOldSetFilterModel', 'suppressRowHoverHighlight', 'suppressRowTransform', 'suppressClipboardPaste', 'suppressLastEmptyLineOnPaste', 'serverSideSortingAlwaysResets', 'reactNext', 'suppressSetColumnStateEvents', 'suppressColumnStateEvents', 'enableCharts', 'deltaColumnMode', 'suppressMaintainUnsortedOrder', 'enableCellTextSelection', 'suppressBrowserResizeObserver', 'suppressMaxRenderedRowRestriction', 'excludeChildrenWhenTreeDataFiltering', 'tooltipMouseTrack', 'keepDetailRows', 'paginateChildRows', 'preventDefaultOnContextMenu', 'undoRedoCellEditing', 'allowDragFromColumnsToolPanel', 'immutableData', 'immutableColumns', 'pivotSuppressAutoColumn', 'suppressExpandablePivotGroups', 'applyColumnDefOrder', 'debounceVerticalScrollbar', 'detailRowAutoHeight', 'serverSideFilteringAlwaysResets', 'suppressAggFilteredOnly', 'showOpenedGroup', 'suppressClipboardApi', 'suppressModelUpdateAfterUpdateTransaction', 'stopEditingWhenCellsLoseFocus'];
  /** You do not need to include event callbacks in this list, as they are generated automatically. */
  PropertyKeys.FUNCTION_PROPERTIES = ['localeTextFunc', 'groupRowInnerRenderer', 'groupRowInnerRendererFramework', 'dateComponent', 'dateComponentFramework', 'groupRowRenderer', 'groupRowRendererFramework', 'isExternalFilterPresent', 'getRowHeight', 'doesExternalFilterPass', 'getRowClass', 'getRowStyle', 'getRowClassRules', 'traverseNode', 'getContextMenuItems', 'getMainMenuItems', 'processRowPostCreate', 'processCellForClipboard', 'groupRowAggNodes', 'getRowNodeId', 'isFullWidthCell', 'fullWidthCellRenderer', 'fullWidthCellRendererFramework', 'processSecondaryColDef', 'processSecondaryColGroupDef', 'getBusinessKeyForNode', 'sendToClipboard', 'navigateToNextHeader', 'tabToNextHeader', 'navigateToNextCell', 'tabToNextCell', 'getDetailRowData', 'processCellFromClipboard', 'getDocument', 'postProcessPopup', 'getChildCount', 'getDataPath', 'loadingCellRenderer', 'loadingCellRendererFramework', 'loadingOverlayComponent', 'loadingOverlayComponentFramework', 'noRowsOverlayComponent', 'noRowsOverlayComponentFramework', 'detailCellRenderer', 'detailCellRendererFramework', 'defaultGroupSortComparator', 'isRowMaster', 'isRowSelectable', 'postSort', 'processHeaderForClipboard', 'paginationNumberFormatter', 'processDataFromClipboard', 'getServerSideGroupKey', 'isServerSideGroup', 'suppressKeyboardEvent', 'createChartContainer', 'processChartOptions', 'getChartToolbarItems', 'fillOperation', 'isApplyServerSideTransaction', 'getServerSideStoreParams', 'isServerSideGroupOpenByDefault', 'isGroupOpenByDefault'];
  PropertyKeys.ALL_PROPERTIES = __spreadArrays(PropertyKeys.ARRAY_PROPERTIES, PropertyKeys.OBJECT_PROPERTIES, PropertyKeys.STRING_PROPERTIES, PropertyKeys.NUMBER_PROPERTIES, PropertyKeys.FUNCTION_PROPERTIES, PropertyKeys.BOOLEAN_PROPERTIES);
  /**
   * Used when performing property checks. This avoids noise caused when using frameworks, which can add their own
   * framework-specific properties to colDefs, gridOptions etc.
   */
  PropertyKeys.FRAMEWORK_PROPERTIES = ['__ob__', '__v_skip', '__metadata__', 'mappedColumnProperties', 'hasChildColumns', 'toColDef', 'createColDefFromGridColumn'];
  return PropertyKeys;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __assign =  false || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __spreadArrays$1 =  false || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
};
var ComponentUtil = /** @class */function () {
  function ComponentUtil() {}
  ComponentUtil.getEventCallbacks = function () {
    if (!ComponentUtil.EVENT_CALLBACKS) {
      ComponentUtil.EVENT_CALLBACKS = ComponentUtil.EVENTS.map(function (event) {
        return ComponentUtil.getCallbackForEvent(event);
      });
    }
    return ComponentUtil.EVENT_CALLBACKS;
  };
  ComponentUtil.copyAttributesToGridOptions = function (gridOptions, component, skipEventDeprecationCheck) {
    // create empty grid options if none were passed
    if (typeof gridOptions !== 'object') {
      gridOptions = {};
    }
    // to allow array style lookup in TypeScript, take type away from 'this' and 'gridOptions'
    var pGridOptions = gridOptions;
    var keyExists = function (key) {
      return typeof component[key] !== 'undefined';
    };
    // add in all the simple properties
    __spreadArrays$1(ComponentUtil.ARRAY_PROPERTIES, ComponentUtil.STRING_PROPERTIES, ComponentUtil.OBJECT_PROPERTIES, ComponentUtil.FUNCTION_PROPERTIES, ComponentUtil.getEventCallbacks()).filter(keyExists).forEach(function (key) {
      return pGridOptions[key] = component[key];
    });
    ComponentUtil.BOOLEAN_PROPERTIES.filter(keyExists).forEach(function (key) {
      return pGridOptions[key] = ComponentUtil.toBoolean(component[key]);
    });
    ComponentUtil.NUMBER_PROPERTIES.filter(keyExists).forEach(function (key) {
      return pGridOptions[key] = ComponentUtil.toNumber(component[key]);
    });
    return gridOptions;
  };
  ComponentUtil.getCallbackForEvent = function (eventName) {
    if (!eventName || eventName.length < 2) {
      return eventName;
    }
    return 'on' + eventName[0].toUpperCase() + eventName.substr(1);
  };
  ComponentUtil.processOnChange = function (changes, gridOptions, api, columnApi) {
    if (!changes) {
      return;
    }
    var changesToApply = __assign({}, changes);
    // to allow array style lookup in TypeScript, take type away from 'this' and 'gridOptions'
    var pGridOptions = gridOptions;
    var keyExists = function (key) {
      return changesToApply[key];
    };
    // check if any change for the simple types, and if so, then just copy in the new value
    __spreadArrays$1(ComponentUtil.ARRAY_PROPERTIES, ComponentUtil.OBJECT_PROPERTIES, ComponentUtil.STRING_PROPERTIES, ComponentUtil.getEventCallbacks()).filter(keyExists).forEach(function (key) {
      return pGridOptions[key] = changesToApply[key].currentValue;
    });
    ComponentUtil.BOOLEAN_PROPERTIES.filter(keyExists).forEach(function (key) {
      return pGridOptions[key] = ComponentUtil.toBoolean(changesToApply[key].currentValue);
    });
    ComponentUtil.NUMBER_PROPERTIES.filter(keyExists).forEach(function (key) {
      return pGridOptions[key] = ComponentUtil.toNumber(changesToApply[key].currentValue);
    });
    if (changesToApply.enableCellTextSelection) {
      api.setEnableCellTextSelection(ComponentUtil.toBoolean(changesToApply.enableCellTextSelection.currentValue));
      delete changesToApply.enableCellTextSelection;
    }
    if (changesToApply.quickFilterText) {
      api.setQuickFilter(changesToApply.quickFilterText.currentValue);
      delete changesToApply.quickFilterText;
    }
    if (changesToApply.autoGroupColumnDef) {
      api.setAutoGroupColumnDef(changesToApply.autoGroupColumnDef.currentValue, "gridOptionsChanged");
      delete changesToApply.autoGroupColumnDef;
    }
    if (changesToApply.columnDefs) {
      api.setColumnDefs(changesToApply.columnDefs.currentValue, "gridOptionsChanged");
      delete changesToApply.columnDefs;
    }
    if (changesToApply.paginationPageSize) {
      api.paginationSetPageSize(ComponentUtil.toNumber(changesToApply.paginationPageSize.currentValue));
      delete changesToApply.paginationPageSize;
    }
    if (changesToApply.pivotMode) {
      columnApi.setPivotMode(ComponentUtil.toBoolean(changesToApply.pivotMode.currentValue));
      delete changesToApply.pivotMode;
    }
    if (changesToApply.groupRemoveSingleChildren) {
      api.setGroupRemoveSingleChildren(ComponentUtil.toBoolean(changesToApply.groupRemoveSingleChildren.currentValue));
      delete changesToApply.groupRemoveSingleChildren;
    }
    if (changesToApply.suppressRowDrag) {
      api.setSuppressRowDrag(ComponentUtil.toBoolean(changesToApply.suppressRowDrag.currentValue));
      delete changesToApply.suppressRowDrag;
    }
    if (changesToApply.suppressMoveWhenRowDragging) {
      api.setSuppressMoveWhenRowDragging(ComponentUtil.toBoolean(changesToApply.suppressMoveWhenRowDragging.currentValue));
      delete changesToApply.suppressMoveWhenRowDragging;
    }
    if (changesToApply.suppressRowClickSelection) {
      api.setSuppressRowClickSelection(ComponentUtil.toBoolean(changesToApply.suppressRowClickSelection.currentValue));
      delete changesToApply.suppressRowClickSelection;
    }
    if (changesToApply.suppressClipboardPaste) {
      api.setSuppressClipboardPaste(ComponentUtil.toBoolean(changesToApply.suppressClipboardPaste.currentValue));
      delete changesToApply.suppressClipboardPaste;
    }
    if (changesToApply.headerHeight) {
      api.setHeaderHeight(ComponentUtil.toNumber(changesToApply.headerHeight.currentValue));
      delete changesToApply.headerHeight;
    }
    // any remaining properties can be set in a generic way
    // ie the setter takes the form of setXXX and the argument requires no formatting/translation first
    var dynamicApi = api;
    Object.keys(changesToApply).forEach(function (property) {
      var setterName = "set" + property.charAt(0).toUpperCase() + property.substring(1);
      if (dynamicApi[setterName]) {
        dynamicApi[setterName](changes[property].currentValue);
      }
    });
    // copy changes into an event for dispatch
    var event = {
      type: Events.EVENT_COMPONENT_STATE_CHANGED,
      api: gridOptions.api,
      columnApi: gridOptions.columnApi
    };
    iterateObject(changes, function (key, value) {
      event[key] = value;
    });
    api.dispatchEvent(event);
  };
  ComponentUtil.toBoolean = function (value) {
    if (typeof value === 'boolean') {
      return value;
    }
    if (typeof value === 'string') {
      // for boolean, compare to empty String to allow attributes appearing with
      // no value to be treated as 'true'
      return value.toUpperCase() === 'TRUE' || value == '';
    }
    return false;
  };
  ComponentUtil.toNumber = function (value) {
    if (typeof value === 'number') {
      return value;
    }
    if (typeof value === 'string') {
      return Number(value);
    }
  };
  // all the events are populated in here AFTER this class (at the bottom of the file).
  ComponentUtil.EVENTS = [];
  ComponentUtil.STRING_PROPERTIES = PropertyKeys.STRING_PROPERTIES;
  ComponentUtil.OBJECT_PROPERTIES = PropertyKeys.OBJECT_PROPERTIES;
  ComponentUtil.ARRAY_PROPERTIES = PropertyKeys.ARRAY_PROPERTIES;
  ComponentUtil.NUMBER_PROPERTIES = PropertyKeys.NUMBER_PROPERTIES;
  ComponentUtil.BOOLEAN_PROPERTIES = PropertyKeys.BOOLEAN_PROPERTIES;
  ComponentUtil.FUNCTION_PROPERTIES = PropertyKeys.FUNCTION_PROPERTIES;
  ComponentUtil.ALL_PROPERTIES = PropertyKeys.ALL_PROPERTIES;
  return ComponentUtil;
}();
ComponentUtil.EVENTS = values(Events);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __spreadArrays$2 =  false || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
};
var ColDefUtil = /** @class */function () {
  function ColDefUtil() {}
  ColDefUtil.STRING_PROPERTIES = ['headerName', 'columnGroupShow', 'headerClass', 'toolPanelClass', 'headerValueGetter', 'pivotKeys', 'groupId', 'colId', 'sort', 'initialSort', 'field', 'type', 'tooltipComponent', 'tooltipField', 'headerTooltip', 'cellClass', 'showRowGroup', 'template', 'templateUrl', 'filter', 'initialAggFunc', 'aggFunc', 'cellRenderer', 'cellEditor', 'pinned', 'initialPinned', 'chartDataType'];
  ColDefUtil.OBJECT_PROPERTIES = ['headerGroupComponent', 'headerGroupComponentFramework', 'headerGroupComponentParams', 'cellStyle', 'cellRendererParams', 'cellEditorFramework', 'cellEditorParams', 'pinnedRowCellRendererFramework', 'pinnedRowCellRendererParams', 'filterFramework', 'filterParams', 'pivotValueColumn', 'headerComponent', 'headerComponentFramework', 'headerComponentParams', 'floatingFilterComponent', 'floatingFilterComponentParams', 'floatingFilterComponentFramework', 'tooltipComponent', 'tooltipComponentParams', 'tooltipComponentFramework', 'refData', 'columnsMenuParams'];
  ColDefUtil.ARRAY_PROPERTIES = ['children', 'sortingOrder', 'allowedAggFuncs', 'menuTabs', 'pivotTotalColumnIds', 'cellClassRules', 'icons'];
  ColDefUtil.NUMBER_PROPERTIES = ['sortedAt', 'sortIndex', 'initialSortIndex', 'flex', 'initialFlex', 'width', 'initialWidth', 'minWidth', 'maxWidth', 'rowGroupIndex', 'initialRowGroupIndex', 'pivotIndex', 'initialPivotIndex'];
  ColDefUtil.BOOLEAN_PROPERTIES = ['suppressCellFlash', 'suppressColumnsToolPanel', 'suppressFiltersToolPanel', 'openByDefault', 'marryChildren', 'hide', 'initialHide', 'rowGroup', 'initialRowGroup', 'pivot', 'initialPivot', 'checkboxSelection', 'headerCheckboxSelection', 'headerCheckboxSelectionFilteredOnly', 'suppressMenu', 'suppressMovable', 'lockPosition', 'lockVisible', 'lockPinned', 'unSortIcon', 'suppressSizeToFit', 'suppressAutoSize', 'enableRowGroup', 'enablePivot', 'enableValue', 'editable', 'suppressPaste', 'suppressNavigable', 'enableCellChangeFlash', 'rowDrag', 'dndSource', 'autoHeight', 'wrapText', 'sortable', 'resizable', 'singleClickEdit', 'floatingFilter'];
  ColDefUtil.FUNCTION_PROPERTIES = ['dndSourceOnRowDrag', 'valueGetter', 'valueSetter', 'filterValueGetter', 'keyCreator', 'cellRenderer', 'cellRendererFramework', 'pinnedRowCellRenderer', 'valueFormatter', 'pinnedRowValueFormatter', 'valueParser', 'comparator', 'equals', 'pivotComparator', 'suppressKeyboardEvent', 'suppressHeaderKeyboardEvent', 'colSpan', 'rowSpan', 'getQuickFilterText', 'newValueHandler', 'onCellValueChanged', 'onCellClicked', 'onCellDoubleClicked', 'onCellContextMenu', 'rowDragText', 'tooltipValueGetter', 'tooltipComponent', 'tooltipComponentFramework', 'cellRendererSelector', 'cellEditorSelector'];
  ColDefUtil.ALL_PROPERTIES = __spreadArrays$2(ColDefUtil.ARRAY_PROPERTIES, ColDefUtil.OBJECT_PROPERTIES, ColDefUtil.STRING_PROPERTIES, ColDefUtil.NUMBER_PROPERTIES, ColDefUtil.FUNCTION_PROPERTIES, ColDefUtil.BOOLEAN_PROPERTIES);
  // used when doing property checks - this causes noise when using frameworks which can add their own fw specific
  // properties to colDefs, gridOptions etc
  ColDefUtil.FRAMEWORK_PROPERTIES = ['__ob__', '__v_skip', '__metadata__', 'mappedColumnProperties', 'hasChildColumns', 'toColDef', 'createColDefFromGridColumn'];
  return ColDefUtil;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var Color = /** @class */function () {
  /**
   * Every color component should be in the [0, 1] range.
   * Some easing functions (such as elastic easing) can overshoot the target value by some amount.
   * So, when animating colors, if the source or target color components are already near
   * or at the edge of the allowed [0, 1] range, it is possible for the intermediate color
   * component value to end up outside of that range mid-animation. For this reason the constructor
   * performs range checking/constraining.
   * @param r Red component.
   * @param g Green component.
   * @param b Blue component.
   * @param a Alpha (opacity) component.
   */
  function Color(r, g, b, a) {
    if (a === void 0) {
      a = 1;
    }
    // NaN is treated as 0.
    this.r = Math.min(1, Math.max(0, r || 0));
    this.g = Math.min(1, Math.max(0, g || 0));
    this.b = Math.min(1, Math.max(0, b || 0));
    this.a = Math.min(1, Math.max(0, a || 0));
  }
  /**
   * The given string can be in one of the following formats:
   * - #rgb
   * - #rrggbb
   * - rgb(r, g, b)
   * - rgba(r, g, b, a)
   * - CSS color name such as 'white', 'orange', 'cyan', etc.
   * @param str
   */
  Color.fromString = function (str) {
    // hexadecimal notation
    if (str.indexOf('#') >= 0) {
      // there can be some leading whitespace
      return Color.fromHexString(str);
    }
    // color name
    var hex = Color.nameToHex[str];
    if (hex) {
      return Color.fromHexString(hex);
    }
    // rgb(a) notation
    if (str.indexOf('rgb') >= 0) {
      return Color.fromRgbaString(str);
    }
    throw new Error("Invalid color string: '" + str + "'");
  };
  // Using separate RegExp for the short hex notation because strings like `#abcd`
  // are matched as ['#abcd', 'ab', 'c', 'd', undefined] when the `{1,2}` quantifier is used.
  Color.fromHexString = function (str) {
    var values = str.match(Color.hexRe);
    if (values) {
      var r = parseInt(values[1], 16);
      var g = parseInt(values[2], 16);
      var b = parseInt(values[3], 16);
      var a = values[4] !== undefined ? parseInt(values[4], 16) : 255;
      return new Color(r / 255, g / 255, b / 255, a / 255);
    }
    values = str.match(Color.shortHexRe);
    if (values) {
      var r = parseInt(values[1], 16);
      var g = parseInt(values[2], 16);
      var b = parseInt(values[3], 16);
      var a = values[4] !== undefined ? parseInt(values[4], 16) : 15;
      r += r * 16;
      g += g * 16;
      b += b * 16;
      a += a * 16;
      return new Color(r / 255, g / 255, b / 255, a / 255);
    }
    throw new Error("Malformed hexadecimal color string: '" + str + "'");
  };
  Color.fromRgbaString = function (str) {
    var values = str.match(Color.rgbRe);
    if (values) {
      return new Color(+values[1] / 255, +values[2] / 255, +values[3] / 255);
    }
    values = str.match(Color.rgbaRe);
    if (values) {
      return new Color(+values[1] / 255, +values[2] / 255, +values[3] / 255, +values[4]);
    }
    throw new Error("Malformed rgb/rgba color string: '" + str + "'");
  };
  Color.fromArray = function (arr) {
    if (arr.length === 4) {
      return new Color(arr[0], arr[1], arr[2], arr[3]);
    }
    if (arr.length === 3) {
      return new Color(arr[0], arr[1], arr[2]);
    }
    throw new Error('The given array should contain 3 or 4 color components (numbers).');
  };
  /**
   * Creates an instance of the Color class from the given HSB(A) components.
   * @param h Hue in the [0, 360) range.
   * @param s Saturation in the [0, 1] range.
   * @param b Brightness in the [0, 1] range.
   * @param alpha Opacity in the [0, 1] range. Defaults to 1 (completely opaque).
   */
  Color.fromHSB = function (h, s, b, alpha) {
    if (alpha === void 0) {
      alpha = 1;
    }
    var rgb = Color.HSBtoRGB(h, s, b);
    return new Color(rgb[0], rgb[1], rgb[2], alpha);
  };
  Color.padHex = function (str) {
    // Can't use `padStart(2, '0')` here because of IE.
    return str.length === 1 ? '0' + str : str;
  };
  Color.prototype.toHexString = function () {
    var hex = '#' + Color.padHex(Math.round(this.r * 255).toString(16)) + Color.padHex(Math.round(this.g * 255).toString(16)) + Color.padHex(Math.round(this.b * 255).toString(16));
    if (this.a < 1) {
      hex += Color.padHex(Math.round(this.a * 255).toString(16));
    }
    return hex;
  };
  Color.prototype.toRgbaString = function (fractionDigits) {
    if (fractionDigits === void 0) {
      fractionDigits = 3;
    }
    var components = [Math.round(this.r * 255), Math.round(this.g * 255), Math.round(this.b * 255)];
    var k = Math.pow(10, fractionDigits);
    if (this.a !== 1) {
      components.push(Math.round(this.a * k) / k);
      return "rgba(" + components.join(', ') + ")";
    }
    return "rgb(" + components.join(', ') + ")";
  };
  Color.prototype.toString = function () {
    if (this.a === 1) {
      return this.toHexString();
    }
    return this.toRgbaString();
  };
  Color.prototype.toHSB = function () {
    return Color.RGBtoHSB(this.r, this.g, this.b);
  };
  /**
   * Converts the given RGB triple to an array of HSB (HSV) components.
   * The hue component will be `NaN` for achromatic colors.
   */
  Color.RGBtoHSB = function (r, g, b) {
    var min = Math.min(r, g, b);
    var max = Math.max(r, g, b);
    var S = max !== 0 ? (max - min) / max : 0;
    var H = NaN;
    // min == max, means all components are the same
    // and the color is a shade of gray with no hue (H is NaN)
    if (min !== max) {
      var delta = max - min;
      var rc = (max - r) / delta;
      var gc = (max - g) / delta;
      var bc = (max - b) / delta;
      if (r === max) {
        H = bc - gc;
      } else if (g === max) {
        H = 2.0 + rc - bc;
      } else {
        H = 4.0 + gc - rc;
      }
      H /= 6.0;
      if (H < 0) {
        H = H + 1.0;
      }
    }
    return [H * 360, S, max];
  };
  /**
   * Converts the given HSB (HSV) triple to an array of RGB components.
   */
  Color.HSBtoRGB = function (H, S, B) {
    if (isNaN(H)) {
      H = 0;
    }
    H = (H % 360 + 360) % 360 / 360; // normalize hue to [0, 360] interval, then scale to [0, 1]
    var r = 0;
    var g = 0;
    var b = 0;
    if (S === 0) {
      r = g = b = B;
    } else {
      var h = (H - Math.floor(H)) * 6;
      var f = h - Math.floor(h);
      var p = B * (1 - S);
      var q = B * (1 - S * f);
      var t = B * (1 - S * (1 - f));
      switch (h >> 0) {
        // discard the floating point part of the number
        case 0:
          r = B;
          g = t;
          b = p;
          break;
        case 1:
          r = q;
          g = B;
          b = p;
          break;
        case 2:
          r = p;
          g = B;
          b = t;
          break;
        case 3:
          r = p;
          g = q;
          b = B;
          break;
        case 4:
          r = t;
          g = p;
          b = B;
          break;
        case 5:
          r = B;
          g = p;
          b = q;
          break;
      }
    }
    return [r, g, b];
  };
  Color.prototype.derive = function (hueShift, saturationFactor, brightnessFactor, opacityFactor) {
    var hsb = Color.RGBtoHSB(this.r, this.g, this.b);
    var b = hsb[2];
    if (b == 0 && brightnessFactor > 1.0) {
      b = 0.05;
    }
    var h = ((hsb[0] + hueShift) % 360 + 360) % 360;
    var s = Math.max(Math.min(hsb[1] * saturationFactor, 1.0), 0.0);
    b = Math.max(Math.min(b * brightnessFactor, 1.0), 0.0);
    var a = Math.max(Math.min(this.a * opacityFactor, 1.0), 0.0);
    var rgba = Color.HSBtoRGB(h, s, b);
    rgba.push(a);
    return Color.fromArray(rgba);
  };
  Color.prototype.brighter = function () {
    return this.derive(0, 1.0, 1.0 / 0.7, 1.0);
  };
  Color.prototype.darker = function () {
    return this.derive(0, 1.0, 0.7, 1.0);
  };
  // See https://drafts.csswg.org/css-color/#hex-notation
  Color.hexRe = /\s*#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})?\s*$/;
  Color.shortHexRe = /\s*#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])?\s*$/;
  Color.rgbRe = /\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)\s*/;
  Color.rgbaRe = /\s*rgba\((\d+),\s*(\d+),\s*(\d+),\s*([.\d]+)\)\s*/;
  /**
   * CSS Color Module Level 4:
   * https://drafts.csswg.org/css-color/#named-colors
   */
  Color.nameToHex = Object.freeze({
    aliceblue: '#F0F8FF',
    antiquewhite: '#FAEBD7',
    aqua: '#00FFFF',
    aquamarine: '#7FFFD4',
    azure: '#F0FFFF',
    beige: '#F5F5DC',
    bisque: '#FFE4C4',
    black: '#000000',
    blanchedalmond: '#FFEBCD',
    blue: '#0000FF',
    blueviolet: '#8A2BE2',
    brown: '#A52A2A',
    burlywood: '#DEB887',
    cadetblue: '#5F9EA0',
    chartreuse: '#7FFF00',
    chocolate: '#D2691E',
    coral: '#FF7F50',
    cornflowerblue: '#6495ED',
    cornsilk: '#FFF8DC',
    crimson: '#DC143C',
    cyan: '#00FFFF',
    darkblue: '#00008B',
    darkcyan: '#008B8B',
    darkgoldenrod: '#B8860B',
    darkgray: '#A9A9A9',
    darkgreen: '#006400',
    darkgrey: '#A9A9A9',
    darkkhaki: '#BDB76B',
    darkmagenta: '#8B008B',
    darkolivegreen: '#556B2F',
    darkorange: '#FF8C00',
    darkorchid: '#9932CC',
    darkred: '#8B0000',
    darksalmon: '#E9967A',
    darkseagreen: '#8FBC8F',
    darkslateblue: '#483D8B',
    darkslategray: '#2F4F4F',
    darkslategrey: '#2F4F4F',
    darkturquoise: '#00CED1',
    darkviolet: '#9400D3',
    deeppink: '#FF1493',
    deepskyblue: '#00BFFF',
    dimgray: '#696969',
    dimgrey: '#696969',
    dodgerblue: '#1E90FF',
    firebrick: '#B22222',
    floralwhite: '#FFFAF0',
    forestgreen: '#228B22',
    fuchsia: '#FF00FF',
    gainsboro: '#DCDCDC',
    ghostwhite: '#F8F8FF',
    gold: '#FFD700',
    goldenrod: '#DAA520',
    gray: '#808080',
    green: '#008000',
    greenyellow: '#ADFF2F',
    grey: '#808080',
    honeydew: '#F0FFF0',
    hotpink: '#FF69B4',
    indianred: '#CD5C5C',
    indigo: '#4B0082',
    ivory: '#FFFFF0',
    khaki: '#F0E68C',
    lavender: '#E6E6FA',
    lavenderblush: '#FFF0F5',
    lawngreen: '#7CFC00',
    lemonchiffon: '#FFFACD',
    lightblue: '#ADD8E6',
    lightcoral: '#F08080',
    lightcyan: '#E0FFFF',
    lightgoldenrodyellow: '#FAFAD2',
    lightgray: '#D3D3D3',
    lightgreen: '#90EE90',
    lightgrey: '#D3D3D3',
    lightpink: '#FFB6C1',
    lightsalmon: '#FFA07A',
    lightseagreen: '#20B2AA',
    lightskyblue: '#87CEFA',
    lightslategray: '#778899',
    lightslategrey: '#778899',
    lightsteelblue: '#B0C4DE',
    lightyellow: '#FFFFE0',
    lime: '#00FF00',
    limegreen: '#32CD32',
    linen: '#FAF0E6',
    magenta: '#FF00FF',
    maroon: '#800000',
    mediumaquamarine: '#66CDAA',
    mediumblue: '#0000CD',
    mediumorchid: '#BA55D3',
    mediumpurple: '#9370DB',
    mediumseagreen: '#3CB371',
    mediumslateblue: '#7B68EE',
    mediumspringgreen: '#00FA9A',
    mediumturquoise: '#48D1CC',
    mediumvioletred: '#C71585',
    midnightblue: '#191970',
    mintcream: '#F5FFFA',
    mistyrose: '#FFE4E1',
    moccasin: '#FFE4B5',
    navajowhite: '#FFDEAD',
    navy: '#000080',
    oldlace: '#FDF5E6',
    olive: '#808000',
    olivedrab: '#6B8E23',
    orange: '#FFA500',
    orangered: '#FF4500',
    orchid: '#DA70D6',
    palegoldenrod: '#EEE8AA',
    palegreen: '#98FB98',
    paleturquoise: '#AFEEEE',
    palevioletred: '#DB7093',
    papayawhip: '#FFEFD5',
    peachpuff: '#FFDAB9',
    peru: '#CD853F',
    pink: '#FFC0CB',
    plum: '#DDA0DD',
    powderblue: '#B0E0E6',
    purple: '#800080',
    rebeccapurple: '#663399',
    red: '#FF0000',
    rosybrown: '#BC8F8F',
    royalblue: '#4169E1',
    saddlebrown: '#8B4513',
    salmon: '#FA8072',
    sandybrown: '#F4A460',
    seagreen: '#2E8B57',
    seashell: '#FFF5EE',
    sienna: '#A0522D',
    silver: '#C0C0C0',
    skyblue: '#87CEEB',
    slateblue: '#6A5ACD',
    slategray: '#708090',
    slategrey: '#708090',
    snow: '#FFFAFA',
    springgreen: '#00FF7F',
    steelblue: '#4682B4',
    tan: '#D2B48C',
    teal: '#008080',
    thistle: '#D8BFD8',
    tomato: '#FF6347',
    turquoise: '#40E0D0',
    violet: '#EE82EE',
    wheat: '#F5DEB3',
    white: '#FFFFFF',
    whitesmoke: '#F5F5F5',
    yellow: '#FFFF00',
    yellowgreen: '#9ACD32'
  });
  return Color;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
// Based on https://stackoverflow.com/a/14991797
// This will parse a delimited string into an array of arrays.
function stringToArray(strData, delimiter) {
  if (delimiter === void 0) {
    delimiter = ',';
  }
  var data = [];
  var isNewline = function (char) {
    return char === '\r' || char === '\n';
  };
  var insideQuotedField = false;
  if (strData === '') {
    return [['']];
  }
  var _loop_1 = function (row, column, position) {
    var previousChar = strData[position - 1];
    var currentChar = strData[position];
    var nextChar = strData[position + 1];
    var ensureDataExists = function () {
      if (!data[row]) {
        // create row if it doesn't exist
        data[row] = [];
      }
      if (!data[row][column]) {
        // create column if it doesn't exist
        data[row][column] = '';
      }
    };
    ensureDataExists();
    if (currentChar === '"') {
      if (insideQuotedField) {
        if (nextChar === '"') {
          // unescape double quote
          data[row][column] += '"';
          position++;
        } else {
          // exit quoted field
          insideQuotedField = false;
        }
        return out_row_1 = row, out_column_1 = column, out_position_1 = position, "continue";
      } else if (previousChar === undefined || previousChar === delimiter || isNewline(previousChar)) {
        // enter quoted field
        insideQuotedField = true;
        return out_row_1 = row, out_column_1 = column, out_position_1 = position, "continue";
      }
    }
    if (!insideQuotedField) {
      if (currentChar === delimiter) {
        // move to next column
        column++;
        ensureDataExists();
        return out_row_1 = row, out_column_1 = column, out_position_1 = position, "continue";
      } else if (isNewline(currentChar)) {
        // move to next row
        column = 0;
        row++;
        ensureDataExists();
        if (currentChar === '\r' && nextChar === '\n') {
          // skip over second newline character if it exists
          position++;
        }
        return out_row_1 = row, out_column_1 = column, out_position_1 = position, "continue";
      }
    }
    // add current character to current column
    data[row][column] += currentChar;
    out_row_1 = row;
    out_column_1 = column;
    out_position_1 = position;
  };
  var out_row_1, out_column_1, out_position_1;
  // iterate over each character, keep track of current row and column (of the returned array)
  for (var row = 0, column = 0, position = 0; position < strData.length; position++) {
    _loop_1(row, column, position);
    row = out_row_1;
    column = out_column_1;
    position = out_position_1;
  }
  return data;
}
var CsvUtils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  stringToArray: stringToArray
});

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
/** @deprecated */
function getNameOfClass(theClass) {
  var funcNameRegex = /function (.{1,})\(/;
  var funcAsString = theClass.toString();
  var results = funcNameRegex.exec(funcAsString);
  return results && results.length > 1 ? results[1] : "";
}
function findLineByLeastSquares(values) {
  var len = values.length;
  var maxDecimals = 0;
  if (len <= 1) {
    return values;
  }
  for (var i = 0; i < values.length; i++) {
    var value = values[i];
    if (Math.floor(value) === value) {
      continue;
    }
    maxDecimals = Math.max(maxDecimals, value.toString().split('.')[1].length);
  }
  var sum_x = 0;
  var sum_y = 0;
  var sum_xy = 0;
  var sum_xx = 0;
  var y = 0;
  for (var x = 0; x < len; x++) {
    y = values[x];
    sum_x += x;
    sum_y += y;
    sum_xx += x * x;
    sum_xy += x * y;
  }
  var m = (len * sum_xy - sum_x * sum_y) / (len * sum_xx - sum_x * sum_x);
  var b = sum_y / len - m * sum_x / len;
  var result = [];
  for (var x = 0; x <= len; x++) {
    result.push(parseFloat((x * m + b).toFixed(maxDecimals)));
  }
  return result;
}
/**
 * Converts a CSS object into string
 * @param {Object} stylesToUse an object eg: {color: 'black', top: '25px'}
 * @return {string} A string like "color: black; top: 25px;" for html
 */
function cssStyleObjectToMarkup(stylesToUse) {
  if (!stylesToUse) {
    return '';
  }
  var resParts = [];
  iterateObject(stylesToUse, function (styleKey, styleValue) {
    var styleKeyDashed = camelCaseToHyphen(styleKey);
    resParts.push(styleKeyDashed + ": " + styleValue + ";");
  });
  return resParts.join(' ');
}
/**
 * Displays a message to the browser. this is useful in iPad, where you can't easily see the console.
 * so the javascript code can use this to give feedback. this is NOT intended to be called in production.
 * it is intended the AG Grid developer calls this to troubleshoot, but then takes out the calls before
 * checking in.
 * @param {string} msg
 */
function message(msg) {
  var eMessage = document.createElement('div');
  var eBox = document.querySelector('#__ag__message');
  eMessage.innerHTML = msg;
  if (!eBox) {
    var template = "<div id=\"__ag__message\" style=\"display: inline-block; position: absolute; top: 0px; left: 0px; color: white; background-color: black; z-index: 20; padding: 2px; border: 1px solid darkred; height: 200px; overflow-y: auto;\"></div>";
    eBox = loadTemplate(template);
    if (document.body) {
      document.body.appendChild(eBox);
    }
  }
  eBox.insertBefore(eMessage, eBox.children[0]);
}
/**
 * cell renderers are used in a few places. they bind to dom slightly differently to other cell renderes as they
 * can return back strings (instead of html elemnt) in the getGui() method. common code placed here to handle that.
 * @param {AgPromise<ICellRendererComp>} cellRendererPromise
 * @param {HTMLElement} eTarget
 */
function bindCellRendererToHtmlElement(cellRendererPromise, eTarget) {
  cellRendererPromise.then(function (cellRenderer) {
    var gui = cellRenderer.getGui();
    if (gui != null) {
      if (typeof gui === 'object') {
        eTarget.appendChild(gui);
      } else {
        eTarget.innerHTML = gui;
      }
    }
  });
}
var GeneralUtils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getNameOfClass: getNameOfClass,
  findLineByLeastSquares: findLineByLeastSquares,
  cssStyleObjectToMarkup: cssStyleObjectToMarkup,
  message: message,
  bindCellRendererToHtmlElement: bindCellRendererToHtmlElement
});

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
// ARIA HELPER FUNCTIONS
function setAriaAttribute(element, attribute, value) {
  element.setAttribute(ariaAttributeName(attribute), value.toString());
}
function removeAriaAttribute(element, attribute) {
  element.removeAttribute(ariaAttributeName(attribute));
}
function ariaAttributeName(attribute) {
  return "aria-" + attribute;
}
function getAriaSortState(column) {
  var sort;
  if (column.isSortAscending()) {
    sort = 'ascending';
  } else if (column.isSortDescending()) {
    sort = 'descending';
  } else {
    sort = 'none';
  }
  return sort;
}
// ARIA ATTRIBUTE GETTERS
function getAriaLevel(element) {
  return parseInt(element.getAttribute('aria-level'), 10);
}
function getAriaPosInSet(element) {
  return parseInt(element.getAttribute('aria-posinset'), 10);
}
function getAriaDescribedBy(element) {
  return element.getAttribute('aria-describedby') || '';
}
// ARIA ATTRIBUTE SETTERS
function setAriaLabel(element, label) {
  setAriaAttribute(element, 'label', label);
}
function setAriaLabelledBy(element, labelledBy) {
  setAriaAttribute(element, 'labelledby', labelledBy);
}
function setAriaDescribedBy(element, describedby) {
  setAriaAttribute(element, 'describedby', describedby);
}
function setAriaLevel(element, level) {
  setAriaAttribute(element, 'level', level);
}
function setAriaDisabled(element, disabled) {
  setAriaAttribute(element, 'disabled', disabled);
}
function setAriaExpanded(element, expanded) {
  setAriaAttribute(element, 'expanded', expanded);
}
function removeAriaExpanded(element) {
  removeAriaAttribute(element, 'expanded');
}
function setAriaSetSize(element, setsize) {
  setAriaAttribute(element, 'setsize', setsize);
}
function setAriaPosInSet(element, position) {
  setAriaAttribute(element, 'posinset', position);
}
function setAriaMultiSelectable(element, multiSelectable) {
  setAriaAttribute(element, 'multiselectable', multiSelectable);
}
function setAriaRowCount(element, rowCount) {
  setAriaAttribute(element, 'rowcount', rowCount);
}
function setAriaRowIndex(element, rowIndex) {
  setAriaAttribute(element, 'rowindex', rowIndex);
}
function setAriaColCount(element, colCount) {
  setAriaAttribute(element, 'colcount', colCount);
}
function setAriaColIndex(element, colIndex) {
  setAriaAttribute(element, 'colindex', colIndex);
}
function setAriaColSpan(element, colSpan) {
  setAriaAttribute(element, 'colspan', colSpan);
}
function setAriaSort(element, sort) {
  setAriaAttribute(element, 'sort', sort);
}
function removeAriaSort(element) {
  removeAriaAttribute(element, 'sort');
}
function setAriaSelected(element, selected) {
  var attributeName = 'selected';
  if (selected) {
    setAriaAttribute(element, attributeName, selected);
  } else {
    removeAriaAttribute(element, attributeName);
  }
}
function setAriaChecked(element, checked) {
  setAriaAttribute(element, 'checked', checked === undefined ? 'mixed' : checked);
}
var AriaUtils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getAriaSortState: getAriaSortState,
  getAriaLevel: getAriaLevel,
  getAriaPosInSet: getAriaPosInSet,
  getAriaDescribedBy: getAriaDescribedBy,
  setAriaLabel: setAriaLabel,
  setAriaLabelledBy: setAriaLabelledBy,
  setAriaDescribedBy: setAriaDescribedBy,
  setAriaLevel: setAriaLevel,
  setAriaDisabled: setAriaDisabled,
  setAriaExpanded: setAriaExpanded,
  removeAriaExpanded: removeAriaExpanded,
  setAriaSetSize: setAriaSetSize,
  setAriaPosInSet: setAriaPosInSet,
  setAriaMultiSelectable: setAriaMultiSelectable,
  setAriaRowCount: setAriaRowCount,
  setAriaRowIndex: setAriaRowIndex,
  setAriaColCount: setAriaColCount,
  setAriaColIndex: setAriaColIndex,
  setAriaColSpan: setAriaColSpan,
  setAriaSort: setAriaSort,
  removeAriaSort: removeAriaSort,
  setAriaSelected: setAriaSelected,
  setAriaChecked: setAriaChecked
});

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
/**
 * Serialises a Date to a string of format `yyyy-MM-dd HH:mm:ss`.
 * An alternative separator can be provided to be used instead of hyphens.
 * @param date The date to serialise
 * @param includeTime Whether to include the time in the serialised string
 * @param separator The separator to use between date parts
 */
function serialiseDate(date, includeTime, separator) {
  if (includeTime === void 0) {
    includeTime = true;
  }
  if (separator === void 0) {
    separator = '-';
  }
  if (!date) {
    return null;
  }
  var serialised = [date.getFullYear(), date.getMonth() + 1, date.getDate()].map(function (part) {
    return padStartWidthZeros(part, 2);
  }).join(separator);
  if (includeTime) {
    serialised += ' ' + [date.getHours(), date.getMinutes(), date.getSeconds()].map(function (part) {
      return padStartWidthZeros(part, 2);
    }).join(':');
  }
  return serialised;
}
/**
 * Parses a date and time from a string in the format `yyyy-MM-dd HH:mm:ss`
 */
function parseDateTimeFromString(value) {
  if (!value) {
    return null;
  }
  var _a = value.split(' '),
    dateStr = _a[0],
    timeStr = _a[1];
  if (!dateStr) {
    return null;
  }
  var fields = dateStr.split('-').map(function (f) {
    return parseInt(f, 10);
  });
  if (fields.filter(function (f) {
    return !isNaN(f);
  }).length !== 3) {
    return null;
  }
  var year = fields[0],
    month = fields[1],
    day = fields[2];
  var date = new Date(year, month - 1, day);
  if (date.getFullYear() !== year || date.getMonth() !== month - 1 || date.getDate() !== day) {
    // date was not parsed as expected so must have been invalid
    return null;
  }
  if (!timeStr || timeStr === '00:00:00') {
    return date;
  }
  var _b = timeStr.split(':').map(function (part) {
      return parseInt(part, 10);
    }),
    hours = _b[0],
    minutes = _b[1],
    seconds = _b[2];
  if (hours >= 0 && hours < 24) {
    date.setHours(hours);
  }
  if (minutes >= 0 && minutes < 60) {
    date.setMinutes(minutes);
  }
  if (seconds >= 0 && seconds < 60) {
    date.setSeconds(seconds);
  }
  return date;
}
var DateUtils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  serialiseDate: serialiseDate,
  parseDateTimeFromString: parseDateTimeFromString
});

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
function fuzzyCheckStrings(inputValues, validValues, allSuggestions) {
  var fuzzyMatches = {};
  var invalidInputs = inputValues.filter(function (inputValue) {
    return !validValues.some(function (validValue) {
      return validValue === inputValue;
    });
  });
  if (invalidInputs.length > 0) {
    invalidInputs.forEach(function (invalidInput) {
      return fuzzyMatches[invalidInput] = fuzzySuggestions(invalidInput, allSuggestions);
    });
  }
  return fuzzyMatches;
}
/**
 *
 * @param {String} inputValue The value to be compared against a list of strings
 * @param allSuggestions The list of strings to be compared against
 * @param hideIrrelevant By default, fuzzy suggestions will just sort the allSuggestions list, set this to true
 *        to filter out the irrelevant values
 * @param weighted Set this to true, to make letters matched in the order they were typed have priority in the results.
 */
function fuzzySuggestions(inputValue, allSuggestions, hideIrrelevant, weighted) {
  var search = weighted ? string_weighted_distances : string_distances;
  var thisSuggestions = allSuggestions.map(function (text) {
    return {
      value: text,
      relevance: search(inputValue.toLowerCase(), text.toLocaleLowerCase())
    };
  });
  thisSuggestions.sort(function (a, b) {
    return b.relevance - a.relevance;
  });
  if (hideIrrelevant) {
    thisSuggestions = thisSuggestions.filter(function (suggestion) {
      return suggestion.relevance !== 0;
    });
  }
  return thisSuggestions.map(function (suggestion) {
    return suggestion.value;
  });
}
/**
 * Algorithm to do fuzzy search
 * from https://stackoverflow.com/questions/23305000/javascript-fuzzy-search-that-makes-sense
 * @param {string} from
 * @return {[]}
 */
function get_bigrams(from) {
  var s = from.toLowerCase();
  var v = new Array(s.length - 1);
  var i;
  var j;
  var ref;
  for (i = j = 0, ref = v.length; j <= ref; i = j += 1) {
    v[i] = s.slice(i, i + 2);
  }
  return v;
}
function string_distances(str1, str2) {
  if (str1.length === 0 && str2.length === 0) {
    return 0;
  }
  var pairs1 = get_bigrams(str1);
  var pairs2 = get_bigrams(str2);
  var union = pairs1.length + pairs2.length;
  var hit_count = 0;
  var j;
  var len;
  for (j = 0, len = pairs1.length; j < len; j++) {
    var x = pairs1[j];
    var k = void 0;
    var len1 = void 0;
    for (k = 0, len1 = pairs2.length; k < len1; k++) {
      var y = pairs2[k];
      if (x === y) {
        hit_count++;
      }
    }
  }
  return hit_count > 0 ? 2 * hit_count / union : 0;
}
function string_weighted_distances(str1, str2) {
  var a = str1.replace(/\s/g, '');
  var b = str2.replace(/\s/g, '');
  var weight = 0;
  var lastIndex = 0;
  for (var i = 0; i < a.length; i++) {
    var idx = b.indexOf(a[i], lastIndex);
    if (idx === -1) {
      continue;
    }
    lastIndex = idx;
    weight += 100 - lastIndex * 100 / 10000 * 100;
  }
  return weight;
}
var FuzzyMatchUtils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  fuzzyCheckStrings: fuzzyCheckStrings,
  fuzzySuggestions: fuzzySuggestions,
  get_bigrams: get_bigrams,
  string_distances: string_distances,
  string_weighted_distances: string_weighted_distances
});

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
//
// IMPORTANT NOTE!
//
// If you change the list below, copy/paste the new content into the docs page javascript-grid-icons
//
var iconNameClassMap = {
  // header column group shown when expanded (click to contract)
  columnGroupOpened: 'expanded',
  // header column group shown when contracted (click to expand)
  columnGroupClosed: 'contracted',
  // tool panel column group contracted (click to expand)
  columnSelectClosed: 'tree-closed',
  // tool panel column group expanded (click to contract)
  columnSelectOpen: 'tree-open',
  // column tool panel header expand/collapse all button, shown when some children are expanded and
  //     others are collapsed
  columnSelectIndeterminate: 'tree-indeterminate',
  // shown on ghost icon while dragging column to the side of the grid to pin
  columnMovePin: 'pin',
  // shown on ghost icon while dragging over part of the page that is not a drop zone
  columnMoveHide: 'eye-slash',
  // shown on ghost icon while dragging columns to reorder
  columnMoveMove: 'arrows',
  // animating icon shown when dragging a column to the right of the grid causes horizontal scrolling
  columnMoveLeft: 'left',
  // animating icon shown when dragging a column to the left of the grid causes horizontal scrolling
  columnMoveRight: 'right',
  // shown on ghost icon while dragging over Row Groups drop zone
  columnMoveGroup: 'group',
  // shown on ghost icon while dragging over Values drop zone
  columnMoveValue: 'aggregation',
  // shown on ghost icon while dragging over pivot drop zone
  columnMovePivot: 'pivot',
  // shown on ghost icon while dragging over drop zone that doesn't support it, e.g.
  //     string column over aggregation drop zone
  dropNotAllowed: 'not-allowed',
  // shown on row group when contracted (click to expand)
  groupContracted: 'tree-closed',
  // shown on row group when expanded (click to contract)
  groupExpanded: 'tree-open',
  // context menu chart item
  chart: 'chart',
  // chart window title bar
  close: 'cross',
  // X (remove) on column 'pill' after adding it to a drop zone list
  cancel: 'cancel',
  // indicates the currently active pin state in the "Pin column" sub-menu of the column menu
  check: 'tick',
  // "go to first" button in pagination controls
  first: 'first',
  // "go to previous" button in pagination controls
  previous: 'previous',
  // "go to next" button in pagination controls
  next: 'next',
  // "go to last" button in pagination controls
  last: 'last',
  // shown on top right of chart when chart is linked to range data (click to unlink)
  linked: 'linked',
  // shown on top right of chart when chart is not linked to range data (click to link)
  unlinked: 'unlinked',
  // "Choose colour" button on chart settings tab
  colorPicker: 'color-picker',
  // rotating spinner shown by the loading cell renderer
  groupLoading: 'loading',
  // button to launch enterprise column menu
  menu: 'menu',
  // filter tool panel tab
  filter: 'filter',
  // column tool panel tab
  columns: 'columns',
  // button in chart regular size window title bar (click to maximise)
  maximize: 'maximize',
  // button in chart maximised window title bar (click to make regular size)
  minimize: 'minimize',
  // "Pin column" item in column header menu
  menuPin: 'pin',
  // "Value aggregation" column menu item (shown on numeric columns when grouping is active)"
  menuValue: 'aggregation',
  // "Group by {column-name}" item in column header menu
  menuAddRowGroup: 'group',
  // "Un-Group by {column-name}" item in column header menu
  menuRemoveRowGroup: 'group',
  // context menu copy item
  clipboardCopy: 'copy',
  // context menu paste item
  clipboardPaste: 'paste',
  // identifies the pivot drop zone
  pivotPanel: 'pivot',
  // "Row groups" drop zone in column tool panel
  rowGroupPanel: 'group',
  // columns tool panel Values drop zone
  valuePanel: 'aggregation',
  // drag handle used to pick up draggable columns
  columnDrag: 'grip',
  // drag handle used to pick up draggable rows
  rowDrag: 'grip',
  // context menu export item
  save: 'save',
  // csv export
  csvExport: 'csv',
  // excel export,
  excelExport: 'excel',
  // icon on dropdown editors
  smallDown: 'small-down',
  // version of small-right used in RTL mode
  smallLeft: 'small-left',
  // separater between column 'pills' when you add multiple columns to the header drop zone
  smallRight: 'small-right',
  smallUp: 'small-up',
  // show on column header when column is sorted ascending
  sortAscending: 'asc',
  // show on column header when column is sorted descending
  sortDescending: 'desc',
  // show on column header when column has no sort, only when enabled with gridOptions.unSortIcon=true
  sortUnSort: 'none'
};
/**
 * If icon provided, use this (either a string, or a function callback).
 * if not, then use the default icon from the theme
 * @param {string} iconName
 * @param {GridOptionsWrapper} gridOptionsWrapper
 * @param {Column | null} [column]
 * @returns {HTMLElement}
 */
function createIcon(iconName, gridOptionsWrapper, column) {
  var iconContents = createIconNoSpan(iconName, gridOptionsWrapper, column);
  if (iconContents && iconContents.className.indexOf('ag-icon') > -1) {
    return iconContents;
  }
  var eResult = document.createElement('span');
  eResult.appendChild(iconContents);
  return eResult;
}
function createIconNoSpan(iconName, gridOptionsWrapper, column, forceCreate) {
  var userProvidedIcon = null;
  // check col for icon first
  var icons = column && column.getColDef().icons;
  if (icons) {
    userProvidedIcon = icons[iconName];
  }
  // if not in col, try grid options
  if (gridOptionsWrapper && !userProvidedIcon) {
    var optionsIcons = gridOptionsWrapper.getIcons();
    if (optionsIcons) {
      userProvidedIcon = optionsIcons[iconName];
    }
  }
  // now if user provided, use it
  if (userProvidedIcon) {
    var rendererResult = void 0;
    if (typeof userProvidedIcon === 'function') {
      rendererResult = userProvidedIcon();
    } else if (typeof userProvidedIcon === 'string') {
      rendererResult = userProvidedIcon;
    } else {
      throw new Error('icon from grid options needs to be a string or a function');
    }
    if (typeof rendererResult === 'string') {
      return loadTemplate(rendererResult);
    }
    if (isNodeOrElement(rendererResult)) {
      return rendererResult;
    }
    console.warn('AG Grid: iconRenderer should return back a string or a dom object');
  } else {
    var span = document.createElement('span');
    var cssClass = iconNameClassMap[iconName];
    if (!cssClass) {
      if (!forceCreate) {
        console.warn("AG Grid: Did not find icon " + iconName);
        cssClass = '';
      } else {
        cssClass = iconName;
      }
    }
    span.setAttribute('class', "ag-icon ag-icon-" + cssClass);
    span.setAttribute('unselectable', 'on');
    span.setAttribute('role', 'presentation');
    return span;
  }
}
var IconUtils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  iconNameClassMap: iconNameClassMap,
  createIcon: createIcon,
  createIconNoSpan: createIconNoSpan
});

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var NUMPAD_DEL_NUMLOCK_ON_KEY = 'Del';
var NUMPAD_DEL_NUMLOCK_ON_CHARCODE = 46;
function isKeyPressed(event, keyToCheck) {
  return (event.which || event.keyCode) === keyToCheck;
}
function isEventFromPrintableCharacter(event) {
  // no allowed printable chars have alt or ctrl key combinations
  if (event.altKey || event.ctrlKey || event.metaKey) {
    return false;
  }
  // if key is length 1, eg if it is 'a' for the a key, or '2' for the '2' key.
  // non-printable characters have names, eg 'Enter' or 'Backspace'.
  var printableCharacter = event.key.length === 1;
  // IE11 & Edge treat the numpad del key differently - with numlock on we get "Del" for key,
  // so this addition checks if its IE11/Edge and handles that specific case the same was as all other browsers
  var numpadDelWithNumlockOnForEdgeOrIe = isNumpadDelWithNumlockOnForEdgeOrIe(event);
  return printableCharacter || numpadDelWithNumlockOnForEdgeOrIe;
}
/**
 * Allows user to tell the grid to skip specific keyboard events
 * @param {GridOptionsWrapper} gridOptionsWrapper
 * @param {KeyboardEvent} keyboardEvent
 * @param {RowNode} rowNode
 * @param {Column} column
 * @param {boolean} editing
 * @returns {boolean}
 */
function isUserSuppressingKeyboardEvent(gridOptionsWrapper, keyboardEvent, rowNode, column, editing) {
  var gridOptionsFunc = gridOptionsWrapper.getSuppressKeyboardEventFunc();
  var colDefFunc = column ? column.getColDef().suppressKeyboardEvent : undefined;
  // if no callbacks provided by user, then do nothing
  if (!gridOptionsFunc && !colDefFunc) {
    return false;
  }
  var params = {
    event: keyboardEvent,
    editing: editing,
    column: column,
    api: gridOptionsWrapper.getApi(),
    node: rowNode,
    data: rowNode.data,
    colDef: column.getColDef(),
    context: gridOptionsWrapper.getContext(),
    columnApi: gridOptionsWrapper.getColumnApi()
  };
  // colDef get first preference on suppressing events
  if (colDefFunc) {
    var colDefFuncResult = colDefFunc(params);
    // if colDef func suppressed, then return now, no need to call gridOption func
    if (colDefFuncResult) {
      return true;
    }
  }
  if (gridOptionsFunc) {
    // if gridOption func, return the result
    return gridOptionsFunc(params);
  }
  // otherwise return false, don't suppress, as colDef didn't suppress and no func on gridOptions
  return false;
}
function isUserSuppressingHeaderKeyboardEvent(gridOptionsWrapper, keyboardEvent, headerRowIndex, column) {
  var colDef = column.getDefinition();
  var colDefFunc = colDef && colDef.suppressHeaderKeyboardEvent;
  if (!exists(colDefFunc)) {
    return false;
  }
  var params = {
    api: gridOptionsWrapper.getApi(),
    columnApi: gridOptionsWrapper.getColumnApi(),
    context: gridOptionsWrapper.getContext(),
    colDef: colDef,
    column: column,
    headerRowIndex: headerRowIndex,
    event: keyboardEvent
  };
  return !!colDefFunc(params);
}
function isNumpadDelWithNumlockOnForEdgeOrIe(event) {
  return (isBrowserEdge() || isBrowserIE()) && event.key === NUMPAD_DEL_NUMLOCK_ON_KEY && event.charCode === NUMPAD_DEL_NUMLOCK_ON_CHARCODE;
}
var KeyboardUtils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  isKeyPressed: isKeyPressed,
  isEventFromPrintableCharacter: isEventFromPrintableCharacter,
  isUserSuppressingKeyboardEvent: isUserSuppressingKeyboardEvent,
  isUserSuppressingHeaderKeyboardEvent: isUserSuppressingHeaderKeyboardEvent
});

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
/**
 * @deprecated
 * Mouse wheel (and 2-finger trackpad) support on the web sucks.  It is
 * complicated, thus this doc is long and (hopefully) detailed enough to answer
 * your questions.
 *
 * If you need to react to the mouse wheel in a predictable way, this code is
 * like your bestest friend. * hugs *
 *
 * As of today, there are 4 DOM event types you can listen to:
 *
 *   'wheel'                -- Chrome(31+), FF(17+), IE(9+)
 *   'mousewheel'           -- Chrome, IE(6+), Opera, Safari
 *   'MozMousePixelScroll'  -- FF(3.5 only!) (2010-2013) -- don't bother!
 *   'DOMMouseScroll'       -- FF(0.9.7+) since 2003
 *
 * So what to do?  The is the best:
 *
 *   normalizeWheel.getEventType();
 *
 * In your event callback, use this code to get sane interpretation of the
 * deltas.  This code will return an object with properties:
 *
 *   spinX   -- normalized spin speed (use for zoom) - x plane
 *   spinY   -- " - y plane
 *   pixelX  -- normalized distance (to pixels) - x plane
 *   pixelY  -- " - y plane
 *
 * Wheel values are provided by the browser assuming you are using the wheel to
 * scroll a web page by a number of lines or pixels (or pages).  Values can vary
 * significantly on different platforms and browsers, forgetting that you can
 * scroll at different speeds.  Some devices (like trackpads) emit more events
 * at smaller increments with fine granularity, and some emit massive jumps with
 * linear speed or acceleration.
 *
 * This code does its best to normalize the deltas for you:
 *
 *   - spin is trying to normalize how far the wheel was spun (or trackpad
 *     dragged).  This is super useful for zoom support where you want to
 *     throw away the chunky scroll steps on the PC and make those equal to
 *     the slow and smooth tiny steps on the Mac. Key data: This code tries to
 *     resolve a single slow step on a wheel to 1.
 *
 *   - pixel is normalizing the desired scroll delta in pixel units.  You'll
 *     get the crazy differences between browsers, but at least it'll be in
 *     pixels!
 *
 *   - positive value indicates scrolling DOWN/RIGHT, negative UP/LEFT.  This
 *     should translate to positive value zooming IN, negative zooming OUT.
 *     This matches the newer 'wheel' event.
 *
 * Why are there spinX, spinY (or pixels)?
 *
 *   - spinX is a 2-finger side drag on the trackpad, and a shift + wheel turn
 *     with a mouse.  It results in side-scrolling in the browser by default.
 *
 *   - spinY is what you expect -- it's the classic axis of a mouse wheel.
 *
 *   - I dropped spinZ/pixelZ.  It is supported by the DOM 3 'wheel' event and
 *     probably is by browsers in conjunction with fancy 3D controllers .. but
 *     you know.
 *
 * Implementation info:
 *
 * Examples of 'wheel' event if you scroll slowly (down) by one step with an
 * average mouse:
 *
 *   OS X + Chrome  (mouse)     -    4   pixel delta  (wheelDelta -120)
 *   OS X + Safari  (mouse)     -  N/A   pixel delta  (wheelDelta  -12)
 *   OS X + Firefox (mouse)     -    0.1 line  delta  (wheelDelta  N/A)
 *   Win8 + Chrome  (mouse)     -  100   pixel delta  (wheelDelta -120)
 *   Win8 + Firefox (mouse)     -    3   line  delta  (wheelDelta -120)
 *
 * On the trackpad:
 *
 *   OS X + Chrome  (trackpad)  -    2   pixel delta  (wheelDelta   -6)
 *   OS X + Firefox (trackpad)  -    1   pixel delta  (wheelDelta  N/A)
 *
 * On other/older browsers.. it's more complicated as there can be multiple and
 * also missing delta values.
 *
 * The 'wheel' event is more standard:
 *
 * http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents
 *
 * The basics is that it includes a unit, deltaMode (pixels, lines, pages), and
 * deltaX, deltaY and deltaZ.  Some browsers provide other values to maintain
 * backward compatibility with older events.  Those other values help us
 * better normalize spin speed.  Example of what the browsers provide:
 *
 *                          | event.wheelDelta | event.detail
 *        ------------------+------------------+--------------
 *          Safari v5/OS X  |       -120       |       0
 *          Safari v5/Win7  |       -120       |       0
 *         Chrome v17/OS X  |       -120       |       0
 *         Chrome v17/Win7  |       -120       |       0
 *                IE9/Win7  |       -120       |   undefined
 *         Firefox v4/OS X  |     undefined    |       1
 *         Firefox v4/Win7  |     undefined    |       3
 *
 * from: https://github.com/facebook/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js
 * @param {any} event
 * @return {any}
 */
function normalizeWheel(event) {
  var PIXEL_STEP = 10;
  var LINE_HEIGHT = 40;
  var PAGE_HEIGHT = 800;
  // spinX, spinY
  var sX = 0;
  var sY = 0;
  // pixelX, pixelY
  var pX = 0;
  var pY = 0;
  // Legacy
  if ('detail' in event) {
    sY = event.detail;
  }
  if ('wheelDelta' in event) {
    sY = -event.wheelDelta / 120;
  }
  if ('wheelDeltaY' in event) {
    sY = -event.wheelDeltaY / 120;
  }
  if ('wheelDeltaX' in event) {
    sX = -event.wheelDeltaX / 120;
  }
  // side scrolling on FF with DOMMouseScroll
  if ('axis' in event && event.axis === event.HORIZONTAL_AXIS) {
    sX = sY;
    sY = 0;
  }
  pX = sX * PIXEL_STEP;
  pY = sY * PIXEL_STEP;
  if ('deltaY' in event) {
    pY = event.deltaY;
  }
  if ('deltaX' in event) {
    pX = event.deltaX;
  }
  if ((pX || pY) && event.deltaMode) {
    if (event.deltaMode == 1) {
      // delta in LINE units
      pX *= LINE_HEIGHT;
      pY *= LINE_HEIGHT;
    } else {
      // delta in PAGE units
      pX *= PAGE_HEIGHT;
      pY *= PAGE_HEIGHT;
    }
  }
  // Fall-back if spin cannot be determined
  if (pX && !sX) {
    sX = pX < 1 ? -1 : 1;
  }
  if (pY && !sY) {
    sY = pY < 1 ? -1 : 1;
  }
  return {
    spinX: sX,
    spinY: sY,
    pixelX: pX,
    pixelY: pY
  };
}
/**
 * @deprecated
 * Checks if event was issued by a left click
 * from https://stackoverflow.com/questions/3944122/detect-left-mouse-button-press
 * @param {MouseEvent} mouseEvent
 * @returns {boolean}
 */
function isLeftClick(mouseEvent) {
  if ('buttons' in mouseEvent) {
    return mouseEvent.buttons == 1;
  }
  var button = mouseEvent.which || mouseEvent.button;
  return button == 1;
}
/**
 * `True` if the event is close to the original event by X pixels either vertically or horizontally.
 * we only start dragging after X pixels so this allows us to know if we should start dragging yet.
 * @param {MouseEvent | TouchEvent} e1
 * @param {MouseEvent | TouchEvent} e2
 * @param {number} pixelCount
 * @returns {boolean}
 */
function areEventsNear(e1, e2, pixelCount) {
  // by default, we wait 4 pixels before starting the drag
  if (pixelCount === 0) {
    return false;
  }
  var diffX = Math.abs(e1.clientX - e2.clientX);
  var diffY = Math.abs(e1.clientY - e2.clientY);
  return Math.max(diffX, diffY) <= pixelCount;
}
var MouseUtils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  normalizeWheel: normalizeWheel,
  isLeftClick: isLeftClick,
  areEventsNear: areEventsNear
});

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
/**
 * Gets called by: a) ClientSideNodeManager and b) GroupStage to do sorting.
 * when in ClientSideNodeManager we always have indexes (as this sorts the items the
 * user provided) but when in GroupStage, the nodes can contain filler nodes that
 * don't have order id's
 * @param {RowNode[]} rowNodes
 * @param {Object} rowNodeOrder
 */
function sortRowNodesByOrder(rowNodes, rowNodeOrder) {
  if (!rowNodes) {
    return;
  }
  var comparator = function (nodeA, nodeB) {
    var positionA = rowNodeOrder[nodeA.id];
    var positionB = rowNodeOrder[nodeB.id];
    var aHasIndex = positionA !== undefined;
    var bHasIndex = positionB !== undefined;
    var bothNodesAreUserNodes = aHasIndex && bHasIndex;
    var bothNodesAreFillerNodes = !aHasIndex && !bHasIndex;
    if (bothNodesAreUserNodes) {
      // when comparing two nodes the user has provided, they always
      // have indexes
      return positionA - positionB;
    }
    if (bothNodesAreFillerNodes) {
      // when comparing two filler nodes, we have no index to compare them
      // against, however we want this sorting to be deterministic, so that
      // the rows don't jump around as the user does delta updates. so we
      // want the same sort result. so we use the __objectId - which doesn't make sense
      // from a sorting point of view, but does give consistent behaviour between
      // calls. otherwise groups jump around as delta updates are done.
      // note: previously here we used nodeId, however this gave a strange order
      // as string ordering of numbers is wrong, so using id based on creation order
      // as least gives better looking order.
      return nodeA.__objectId - nodeB.__objectId;
    }
    if (aHasIndex) {
      return 1;
    }
    return -1;
  };
  // check if the list first needs sorting
  var rowNodeA;
  var rowNodeB;
  var atLeastOneOutOfOrder = false;
  for (var i = 0; i < rowNodes.length - 1; i++) {
    rowNodeA = rowNodes[i];
    rowNodeB = rowNodes[i + 1];
    if (comparator(rowNodeA, rowNodeB) > 0) {
      atLeastOneOutOfOrder = true;
      break;
    }
  }
  if (atLeastOneOutOfOrder) {
    rowNodes.sort(comparator);
  }
}
function traverseNodesWithKey(nodes, callback) {
  var keyParts = [];
  recursiveSearchNodes(nodes);
  function recursiveSearchNodes(currentNodes) {
    if (!currentNodes) {
      return;
    }
    currentNodes.forEach(function (node) {
      // also checking for children for tree data
      if (node.group || node.hasChildren()) {
        keyParts.push(node.key);
        var key = keyParts.join('|');
        callback(node, key);
        recursiveSearchNodes(node.childrenAfterGroup);
        keyParts.pop();
      }
    });
  }
}
var RowNodeUtils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  sortRowNodesByOrder: sortRowNodesByOrder,
  traverseNodesWithKey: traverseNodesWithKey
});

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
function convertToSet(list) {
  var set = new Set();
  list.forEach(function (x) {
    return set.add(x);
  });
  return set;
}
var SetUtils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  convertToSet: convertToSet
});

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __assign$1 =  false || function () {
  __assign$1 = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$1.apply(this, arguments);
};
var utils = __assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1({}, GeneralUtils), AriaUtils), ArrayUtils), BrowserUtils), CsvUtils), DateUtils), DomUtils), EventUtils), FunctionUtils), FuzzyMatchUtils), GenericUtils), IconUtils), KeyboardUtils), MapUtils), MouseUtils), NumberUtils), ObjectUtils), RowNodeUtils), SetUtils), StringUtils);
var _ = utils;

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var NumberSequence = /** @class */function () {
  function NumberSequence(initValue, step) {
    if (initValue === void 0) {
      initValue = 0;
    }
    if (step === void 0) {
      step = 1;
    }
    this.nextValue = initValue;
    this.step = step;
  }
  NumberSequence.prototype.next = function () {
    var valToReturn = this.nextValue;
    this.nextValue += this.step;
    return valToReturn;
  };
  NumberSequence.prototype.peek = function () {
    return this.nextValue;
  };
  NumberSequence.prototype.skip = function (count) {
    this.nextValue += count;
  };
  return NumberSequence;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
(function (AgPromiseStatus) {
  AgPromiseStatus[AgPromiseStatus["IN_PROGRESS"] = 0] = "IN_PROGRESS";
  AgPromiseStatus[AgPromiseStatus["RESOLVED"] = 1] = "RESOLVED";
})(exports.AgPromiseStatus || (exports.AgPromiseStatus = {}));
var AgPromise = /** @class */function () {
  function AgPromise(callback) {
    var _this = this;
    this.status = exports.AgPromiseStatus.IN_PROGRESS;
    this.resolution = null;
    this.waiters = [];
    callback(function (value) {
      return _this.onDone(value);
    }, function (params) {
      return _this.onReject(params);
    });
  }
  AgPromise.all = function (promises) {
    return new AgPromise(function (resolve) {
      var remainingToResolve = promises.length;
      var combinedValues = new Array(remainingToResolve);
      forEach(promises, function (promise, index) {
        promise.then(function (value) {
          combinedValues[index] = value;
          remainingToResolve--;
          if (remainingToResolve === 0) {
            resolve(combinedValues);
          }
        });
      });
    });
  };
  AgPromise.resolve = function (value) {
    if (value === void 0) {
      value = null;
    }
    return new AgPromise(function (resolve) {
      return resolve(value);
    });
  };
  AgPromise.prototype.then = function (func) {
    var _this = this;
    return new AgPromise(function (resolve) {
      if (_this.status === exports.AgPromiseStatus.RESOLVED) {
        resolve(func(_this.resolution));
      } else {
        _this.waiters.push(function (value) {
          return resolve(func(value));
        });
      }
    });
  };
  AgPromise.prototype.resolveNow = function (ifNotResolvedValue, ifResolved) {
    return this.status === exports.AgPromiseStatus.RESOLVED ? ifResolved(this.resolution) : ifNotResolvedValue;
  };
  AgPromise.prototype.onDone = function (value) {
    this.status = exports.AgPromiseStatus.RESOLVED;
    this.resolution = value;
    forEach(this.waiters, function (waiter) {
      return waiter(value);
    });
  };
  AgPromise.prototype.onReject = function (params) {
    console.warn('TBI');
  };
  return AgPromise;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
/**
 * A Util Class only used when debugging for printing time to console
 */
var Timer = /** @class */function () {
  function Timer() {
    this.timestamp = new Date().getTime();
  }
  Timer.prototype.print = function (msg) {
    var duration = new Date().getTime() - this.timestamp;
    console.info(msg + " = " + duration);
    this.timestamp = new Date().getTime();
  };
  return Timer;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$5 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$2 =  false || function () {
  __assign$2 = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$2.apply(this, arguments);
};
var __decorate$9 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TooltipStates;
(function (TooltipStates) {
  TooltipStates[TooltipStates["NOTHING"] = 0] = "NOTHING";
  TooltipStates[TooltipStates["WAITING_TO_SHOW"] = 1] = "WAITING_TO_SHOW";
  TooltipStates[TooltipStates["SHOWING"] = 2] = "SHOWING";
})(TooltipStates || (TooltipStates = {}));
var TooltipFeature = /** @class */function (_super) {
  __extends$5(TooltipFeature, _super);
  function TooltipFeature(parentComp) {
    var _this = _super.call(this) || this;
    _this.DEFAULT_HIDE_TOOLTIP_TIMEOUT = 10000;
    _this.SHOW_QUICK_TOOLTIP_DIFF = 1000;
    _this.FADE_OUT_TOOLTIP_TIMEOUT = 1000;
    _this.state = TooltipStates.NOTHING;
    // when showing the tooltip, we need to make sure it's the most recent instance we request, as due to
    // async we could request two tooltips before the first instance returns, in which case we should
    // disregard the second instance.
    _this.tooltipInstanceCount = 0;
    _this.tooltipMouseTrack = false;
    _this.parentComp = parentComp;
    return _this;
  }
  TooltipFeature.prototype.postConstruct = function () {
    this.tooltipShowDelay = this.gridOptionsWrapper.getTooltipShowDelay() || 2000;
    this.tooltipMouseTrack = this.gridOptionsWrapper.isTooltipMouseTrack();
    var el = this.parentComp.getGui();
    this.addManagedListener(el, 'mouseenter', this.onMouseEnter.bind(this));
    this.addManagedListener(el, 'mouseleave', this.onMouseLeave.bind(this));
    this.addManagedListener(el, 'mousemove', this.onMouseMove.bind(this));
    this.addManagedListener(el, 'mousedown', this.onMouseDown.bind(this));
    this.addManagedListener(el, 'keydown', this.onKeyDown.bind(this));
  };
  TooltipFeature.prototype.destroy = function () {
    // if this component gets destroyed while tooltip is showing, need to make sure
    // we don't end with no mouseLeave event resulting in zombie tooltip
    this.setToDoNothing();
    _super.prototype.destroy.call(this);
  };
  TooltipFeature.prototype.onMouseEnter = function (e) {
    // every mouseenter should be following by a mouseleave, however for some unkonwn, it's possible for
    // mouseenter to be called twice in a row, which can happen if editing the cell. this was reported
    // in https://ag-grid.atlassian.net/browse/AG-4422. to get around this, we check the state, and if
    // state is !=nothing, then we know mouseenter was already received.
    if (this.state != TooltipStates.NOTHING) {
      return;
    }
    // if another tooltip was hidden very recently, we only wait 200ms to show, not the normal waiting time
    var delay = this.isLastTooltipHiddenRecently() ? 200 : this.tooltipShowDelay;
    this.showTooltipTimeoutId = window.setTimeout(this.showTooltip.bind(this), delay);
    this.lastMouseEvent = e;
    this.state = TooltipStates.WAITING_TO_SHOW;
  };
  TooltipFeature.prototype.onMouseLeave = function () {
    this.setToDoNothing();
  };
  TooltipFeature.prototype.onKeyDown = function () {
    this.setToDoNothing();
  };
  TooltipFeature.prototype.setToDoNothing = function () {
    if (this.state === TooltipStates.SHOWING) {
      this.hideTooltip();
    }
    this.clearTimeouts();
    this.state = TooltipStates.NOTHING;
  };
  TooltipFeature.prototype.onMouseMove = function (e) {
    // there is a delay from the time we mouseOver a component and the time the
    // tooltip is displayed, so we need to track mousemove to be able to correctly
    // position the tooltip when showTooltip is called.
    this.lastMouseEvent = e;
    if (this.tooltipMouseTrack && this.state === TooltipStates.SHOWING && this.tooltipComp) {
      this.positionTooltipUnderLastMouseEvent();
    }
  };
  TooltipFeature.prototype.onMouseDown = function () {
    this.setToDoNothing();
  };
  TooltipFeature.prototype.hideTooltip = function () {
    // check if comp exists - due to async, although we asked for
    // one, the instance may not be back yet
    if (this.tooltipComp) {
      this.destroyTooltipComp();
      TooltipFeature.lastTooltipHideTime = new Date().getTime();
    }
    this.state = TooltipStates.NOTHING;
  };
  TooltipFeature.prototype.destroyTooltipComp = function () {
    var _this = this;
    // add class to fade out the tooltip
    addCssClass(this.tooltipComp.getGui(), 'ag-tooltip-hiding');
    // make local copies of these variables, as we use them in the async function below,
    // and we clear then to 'undefined' later, so need to take a copy before they are undefined.
    var tooltipPopupDestroyFunc = this.tooltipPopupDestroyFunc;
    var tooltipComp = this.tooltipComp;
    window.setTimeout(function () {
      tooltipPopupDestroyFunc();
      _this.getContext().destroyBean(tooltipComp);
    }, this.FADE_OUT_TOOLTIP_TIMEOUT);
    this.tooltipPopupDestroyFunc = undefined;
    this.tooltipComp = undefined;
  };
  TooltipFeature.prototype.isLastTooltipHiddenRecently = function () {
    // return true if <1000ms since last time we hid a tooltip
    var now = new Date().getTime();
    var then = TooltipFeature.lastTooltipHideTime;
    return now - then < this.SHOW_QUICK_TOOLTIP_DIFF;
  };
  TooltipFeature.prototype.showTooltip = function () {
    var params = __assign$2({
      api: this.gridApi,
      columnApi: this.columnApi,
      context: this.gridOptionsWrapper.getContext()
    }, this.parentComp.getTooltipParams());
    if (!exists(params.value)) {
      this.setToDoNothing();
      return;
    }
    this.state = TooltipStates.SHOWING;
    this.tooltipInstanceCount++;
    // we pass in tooltipInstanceCount so the callback knows what the count was when
    // we requested the tooltip, so if another tooltip was requested in the mean time
    // we disregard it
    var callback = this.newTooltipComponentCallback.bind(this, this.tooltipInstanceCount);
    this.userComponentFactory.newTooltipComponent(params).then(callback);
  };
  TooltipFeature.prototype.newTooltipComponentCallback = function (tooltipInstanceCopy, tooltipComp) {
    var compNoLongerNeeded = this.state !== TooltipStates.SHOWING || this.tooltipInstanceCount !== tooltipInstanceCopy;
    if (compNoLongerNeeded) {
      this.getContext().destroyBean(tooltipComp);
      return;
    }
    var eGui = tooltipComp.getGui();
    this.tooltipComp = tooltipComp;
    if (!containsClass(eGui, 'ag-tooltip')) {
      addCssClass(eGui, 'ag-tooltip-custom');
    }
    var addPopupRes = this.popupService.addPopup({
      eChild: eGui
    });
    if (addPopupRes) {
      this.tooltipPopupDestroyFunc = addPopupRes.hideFunc;
    }
    // this.tooltipPopupDestroyFunc = this.popupService.addPopup(false, eGui, false);
    this.positionTooltipUnderLastMouseEvent();
    this.hideTooltipTimeoutId = window.setTimeout(this.hideTooltip.bind(this), this.DEFAULT_HIDE_TOOLTIP_TIMEOUT);
  };
  TooltipFeature.prototype.positionTooltipUnderLastMouseEvent = function () {
    this.popupService.positionPopupUnderMouseEvent({
      type: 'tooltip',
      mouseEvent: this.lastMouseEvent,
      ePopup: this.tooltipComp.getGui(),
      nudgeY: 18
    });
  };
  TooltipFeature.prototype.clearTimeouts = function () {
    if (this.showTooltipTimeoutId) {
      window.clearTimeout(this.showTooltipTimeoutId);
      this.showTooltipTimeoutId = undefined;
    }
    if (this.hideTooltipTimeoutId) {
      window.clearTimeout(this.hideTooltipTimeoutId);
      this.hideTooltipTimeoutId = undefined;
    }
  };
  __decorate$9([Autowired('popupService')], TooltipFeature.prototype, "popupService", void 0);
  __decorate$9([Autowired('userComponentFactory')], TooltipFeature.prototype, "userComponentFactory", void 0);
  __decorate$9([Autowired('columnApi')], TooltipFeature.prototype, "columnApi", void 0);
  __decorate$9([Autowired('gridApi')], TooltipFeature.prototype, "gridApi", void 0);
  __decorate$9([PostConstruct], TooltipFeature.prototype, "postConstruct", null);
  return TooltipFeature;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$6 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$a =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var compIdSequence = new NumberSequence();
var elementGettingCreated;
var Component = /** @class */function (_super) {
  __extends$6(Component, _super);
  function Component(template) {
    var _this = _super.call(this) || this;
    _this.annotatedGuiListeners = [];
    // if false, then CSS class "ag-hidden" is applied, which sets "display: none"
    _this.displayed = true;
    // if false, then CSS class "ag-invisible" is applied, which sets "visibility: hidden"
    _this.visible = true;
    // unique id for this row component. this is used for getting a reference to the HTML dom.
    // we cannot use the RowNode id as this is not unique (due to animation, old rows can be lying
    // around as we create a new rowComp instance for the same row node).
    _this.compId = compIdSequence.next();
    // to minimise DOM hits, we only apply CSS classes if they have changed. as addding a CSS class that is already
    // there, or removing one that wasn't present, all takes CPU.
    _this.cssClassStates = {};
    if (template) {
      _this.setTemplate(template);
    }
    return _this;
  }
  Component.prototype.preConstructOnComponent = function () {
    this.usingBrowserTooltips = this.gridOptionsWrapper.isEnableBrowserTooltips();
  };
  Component.prototype.getCompId = function () {
    return this.compId;
  };
  Component.prototype.getTooltipParams = function () {
    return {
      value: this.tooltipText,
      location: 'UNKNOWN'
    };
  };
  Component.prototype.setTooltip = function (newTooltipText) {
    var _this = this;
    var removeTooltip = function () {
      if (_this.usingBrowserTooltips) {
        _this.getGui().removeAttribute('title');
      } else {
        _this.tooltipFeature = _this.destroyBean(_this.tooltipFeature);
      }
    };
    var addTooltip = function () {
      if (_this.usingBrowserTooltips) {
        _this.getGui().setAttribute('title', _this.tooltipText);
      } else {
        _this.tooltipFeature = _this.createBean(new TooltipFeature(_this));
      }
    };
    if (this.tooltipText != newTooltipText) {
      if (this.tooltipText) {
        removeTooltip();
      }
      if (newTooltipText != null) {
        this.tooltipText = newTooltipText;
        if (this.tooltipText) {
          addTooltip();
        }
      }
    }
  };
  // for registered components only, eg creates AgCheckbox instance from ag-checkbox HTML tag
  Component.prototype.createChildComponentsFromTags = function (parentNode, paramsMap) {
    var _this = this;
    // we MUST take a copy of the list first, as the 'swapComponentForNode' adds comments into the DOM
    // which messes up the traversal order of the children.
    var childNodeList = copyNodeList(parentNode.childNodes);
    forEach(childNodeList, function (childNode) {
      if (!(childNode instanceof HTMLElement)) {
        return;
      }
      var childComp = _this.createComponentFromElement(childNode, function (comp) {
        // copy over all attributes, including css classes, so any attributes user put on the tag
        // wll be carried across
        _this.copyAttributesFromNode(childNode, comp.getGui());
      }, paramsMap);
      if (childComp) {
        if (childComp.addItems && childNode.children.length) {
          _this.createChildComponentsFromTags(childNode, paramsMap);
          // converting from HTMLCollection to Array
          var items = Array.prototype.slice.call(childNode.children);
          childComp.addItems(items);
        }
        // replace the tag (eg ag-checkbox) with the proper HTMLElement (eg 'div') in the dom
        _this.swapComponentForNode(childComp, parentNode, childNode);
      } else if (childNode.childNodes) {
        _this.createChildComponentsFromTags(childNode, paramsMap);
      }
    });
  };
  Component.prototype.createComponentFromElement = function (element, afterPreCreateCallback, paramsMap) {
    var key = element.nodeName;
    var componentParams = paramsMap ? paramsMap[element.getAttribute('ref')] : undefined;
    var ComponentClass = this.agStackComponentsRegistry.getComponentClass(key);
    if (ComponentClass) {
      elementGettingCreated = element;
      var newComponent = new ComponentClass(componentParams);
      newComponent.setParentComponent(this);
      this.createBean(newComponent, null, afterPreCreateCallback);
      return newComponent;
    }
    return null;
  };
  Component.prototype.copyAttributesFromNode = function (source, dest) {
    iterateNamedNodeMap(source.attributes, function (name, value) {
      return dest.setAttribute(name, value);
    });
  };
  Component.prototype.swapComponentForNode = function (newComponent, parentNode, childNode) {
    var eComponent = newComponent.getGui();
    parentNode.replaceChild(eComponent, childNode);
    parentNode.insertBefore(document.createComment(childNode.nodeName), eComponent);
    this.addDestroyFunc(this.destroyBean.bind(this, newComponent));
    this.swapInComponentForQuerySelectors(newComponent, childNode);
  };
  Component.prototype.swapInComponentForQuerySelectors = function (newComponent, childNode) {
    var thisNoType = this;
    this.iterateOverQuerySelectors(function (querySelector) {
      if (thisNoType[querySelector.attributeName] === childNode) {
        thisNoType[querySelector.attributeName] = newComponent;
      }
    });
  };
  Component.prototype.iterateOverQuerySelectors = function (action) {
    var thisPrototype = Object.getPrototypeOf(this);
    while (thisPrototype != null) {
      var metaData = thisPrototype.__agComponentMetaData;
      var currentProtoName = getFunctionName(thisPrototype.constructor);
      if (metaData && metaData[currentProtoName] && metaData[currentProtoName].querySelectors) {
        forEach(metaData[currentProtoName].querySelectors, function (querySelector) {
          return action(querySelector);
        });
      }
      thisPrototype = Object.getPrototypeOf(thisPrototype);
    }
  };
  Component.prototype.setTemplate = function (template, paramsMap) {
    var eGui = loadTemplate(template);
    this.setTemplateFromElement(eGui, paramsMap);
  };
  Component.prototype.setTemplateFromElement = function (element, paramsMap) {
    this.eGui = element;
    this.eGui.__agComponent = this;
    this.addAnnotatedGuiEventListeners();
    this.wireQuerySelectors();
    // context will not be available when user sets template in constructor
    if (!!this.getContext()) {
      this.createChildComponentsFromTags(this.getGui(), paramsMap);
    }
  };
  Component.prototype.createChildComponentsPreConstruct = function () {
    // ui exists if user sets template in constructor. when this happens, we have to wait for the context
    // to be autoWired first before we can create child components.
    if (!!this.getGui()) {
      this.createChildComponentsFromTags(this.getGui());
    }
  };
  Component.prototype.wireQuerySelectors = function () {
    var _this = this;
    if (!this.eGui) {
      return;
    }
    var thisNoType = this;
    this.iterateOverQuerySelectors(function (querySelector) {
      var setResult = function (result) {
        return thisNoType[querySelector.attributeName] = result;
      };
      // if it's a ref selector, and match is on top level component, we return
      // the element. otherwise no way of components putting ref=xxx on the top
      // level element as querySelector only looks at children.
      var topLevelRefMatch = querySelector.refSelector && _this.eGui.getAttribute('ref') === querySelector.refSelector;
      if (topLevelRefMatch) {
        setResult(_this.eGui);
      } else {
        // otherwise use querySelector, which looks at children
        var resultOfQuery = _this.eGui.querySelector(querySelector.querySelector);
        if (resultOfQuery) {
          setResult(resultOfQuery.__agComponent || resultOfQuery);
        }
      }
    });
  };
  Component.prototype.addAnnotatedGuiEventListeners = function () {
    var _this = this;
    this.removeAnnotatedGuiEventListeners();
    if (!this.eGui) {
      return;
    }
    var listenerMethods = this.getAgComponentMetaData('guiListenerMethods');
    if (!listenerMethods) {
      return;
    }
    if (!this.annotatedGuiListeners) {
      this.annotatedGuiListeners = [];
    }
    listenerMethods.forEach(function (meta) {
      var element = _this.getRefElement(meta.ref);
      if (!element) {
        return;
      }
      var listener = _this[meta.methodName].bind(_this);
      element.addEventListener(meta.eventName, listener);
      _this.annotatedGuiListeners.push({
        eventName: meta.eventName,
        listener: listener,
        element: element
      });
    });
  };
  Component.prototype.addAnnotatedGridEventListeners = function () {
    var _this = this;
    var listenerMetas = this.getAgComponentMetaData('gridListenerMethods');
    if (!listenerMetas) {
      return;
    }
    listenerMetas.forEach(function (meta) {
      var listener = _this[meta.methodName].bind(_this);
      _this.addManagedListener(_this.eventService, meta.eventName, listener);
    });
  };
  Component.prototype.getAgComponentMetaData = function (key) {
    var res = [];
    var thisProto = Object.getPrototypeOf(this);
    while (thisProto != null) {
      var metaData = thisProto.__agComponentMetaData;
      var currentProtoName = getFunctionName(thisProto.constructor);
      if (metaData && metaData[currentProtoName] && metaData[currentProtoName][key]) {
        res = res.concat(metaData[currentProtoName][key]);
      }
      thisProto = Object.getPrototypeOf(thisProto);
    }
    return res;
  };
  Component.prototype.removeAnnotatedGuiEventListeners = function () {
    if (!this.annotatedGuiListeners) {
      return;
    }
    forEach(this.annotatedGuiListeners, function (e) {
      e.element.removeEventListener(e.eventName, e.listener);
    });
    this.annotatedGuiListeners = [];
  };
  Component.prototype.getGui = function () {
    return this.eGui;
  };
  Component.prototype.getFocusableElement = function () {
    return this.eGui;
  };
  Component.prototype.setParentComponent = function (component) {
    this.parentComponent = component;
  };
  Component.prototype.getParentComponent = function () {
    return this.parentComponent;
  };
  // this method is for older code, that wants to provide the gui element,
  // it is not intended for this to be in ag-Stack
  Component.prototype.setGui = function (eGui) {
    this.eGui = eGui;
  };
  Component.prototype.queryForHtmlElement = function (cssSelector) {
    return this.eGui.querySelector(cssSelector);
  };
  Component.prototype.queryForHtmlInputElement = function (cssSelector) {
    return this.eGui.querySelector(cssSelector);
  };
  Component.prototype.appendChild = function (newChild, container) {
    if (!container) {
      container = this.eGui;
    }
    if (newChild == null) {
      return;
    }
    if (isNodeOrElement(newChild)) {
      container.appendChild(newChild);
    } else {
      var childComponent = newChild;
      container.appendChild(childComponent.getGui());
      this.addDestroyFunc(this.destroyBean.bind(this, childComponent));
    }
  };
  Component.prototype.isDisplayed = function () {
    return this.displayed;
  };
  Component.prototype.setVisible = function (visible) {
    if (visible !== this.visible) {
      this.visible = visible;
      setVisible(this.eGui, visible);
    }
  };
  Component.prototype.setDisplayed = function (displayed) {
    if (displayed !== this.displayed) {
      this.displayed = displayed;
      setDisplayed(this.eGui, displayed);
      var event_1 = {
        type: Component.EVENT_DISPLAYED_CHANGED,
        visible: this.displayed
      };
      this.dispatchEvent(event_1);
    }
  };
  Component.prototype.destroy = function () {
    this.removeAnnotatedGuiEventListeners();
    if (this.tooltipFeature) {
      this.tooltipFeature = this.destroyBean(this.tooltipFeature);
    }
    _super.prototype.destroy.call(this);
  };
  Component.prototype.addGuiEventListener = function (event, listener) {
    var _this = this;
    this.eGui.addEventListener(event, listener);
    this.addDestroyFunc(function () {
      return _this.eGui.removeEventListener(event, listener);
    });
  };
  Component.prototype.addCssClass = function (className) {
    var updateNeeded = this.cssClassStates[className] !== true;
    if (updateNeeded) {
      addCssClass(this.eGui, className);
      this.cssClassStates[className] = true;
    }
  };
  Component.prototype.removeCssClass = function (className) {
    var updateNeeded = this.cssClassStates[className] !== false;
    if (updateNeeded) {
      removeCssClass(this.eGui, className);
      this.cssClassStates[className] = false;
    }
  };
  Component.prototype.addOrRemoveCssClass = function (className, addOrRemove) {
    var updateNeeded = this.cssClassStates[className] !== addOrRemove;
    if (updateNeeded) {
      addOrRemoveCssClass(this.eGui, className, addOrRemove);
      this.cssClassStates[className] = addOrRemove;
    }
  };
  Component.prototype.getAttribute = function (key) {
    var eGui = this.eGui;
    return eGui ? eGui.getAttribute(key) : null;
  };
  Component.prototype.getRefElement = function (refName) {
    return this.queryForHtmlElement("[ref=\"" + refName + "\"]");
  };
  Component.EVENT_DISPLAYED_CHANGED = 'displayedChanged';
  __decorate$a([Autowired('agStackComponentsRegistry')], Component.prototype, "agStackComponentsRegistry", void 0);
  __decorate$a([PreConstruct], Component.prototype, "preConstructOnComponent", null);
  __decorate$a([PreConstruct], Component.prototype, "createChildComponentsPreConstruct", null);
  __decorate$a([PostConstruct], Component.prototype, "addAnnotatedGridEventListeners", null);
  return Component;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$7 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PopupComponent = /** @class */function (_super) {
  __extends$7(PopupComponent, _super);
  function PopupComponent() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  PopupComponent.prototype.isPopup = function () {
    return true;
  };
  PopupComponent.prototype.setParentComponent = function (container) {
    addCssClass(container.getGui(), 'ag-has-popup');
    _super.prototype.setParentComponent.call(this, container);
  };
  PopupComponent.prototype.destroy = function () {
    var parentComp = this.parentComponent;
    var hasParent = parentComp && parentComp.isAlive();
    if (hasParent) {
      removeCssClass(parentComp.getGui(), 'ag-has-popup');
    }
    _super.prototype.destroy.call(this);
  };
  return PopupComponent;
}(Component);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
function QuerySelector(selector) {
  return querySelectorFunc.bind(this, selector, undefined);
}
function RefSelector(ref) {
  return querySelectorFunc.bind(this, "[ref=" + ref + "]", ref);
}
function querySelectorFunc(selector, refSelector, classPrototype, methodOrAttributeName, index) {
  if (selector === null) {
    console.error('AG Grid: QuerySelector selector should not be null');
    return;
  }
  if (typeof index === 'number') {
    console.error('AG Grid: QuerySelector should be on an attribute');
    return;
  }
  addToObjectProps(classPrototype, 'querySelectors', {
    attributeName: methodOrAttributeName,
    querySelector: selector,
    refSelector: refSelector
  });
}
// think we should take this out, put property bindings on the
function GridListener(eventName) {
  return gridListenerFunc.bind(this, eventName);
}
function gridListenerFunc(eventName, target, methodName) {
  if (eventName == null) {
    console.error('AG Grid: GridListener eventName is missing');
    return;
  }
  addToObjectProps(target, 'gridListenerMethods', {
    methodName: methodName,
    eventName: eventName
  });
}
// think we should take this out, put property bindings on the
function GuiListener(ref, eventName) {
  return guiListenerFunc.bind(this, ref, eventName);
}
function guiListenerFunc(ref, eventName, target, methodName) {
  if (eventName == null) {
    console.error('AG Grid: GuiListener eventName is missing');
    return;
  }
  addToObjectProps(target, 'guiListenerMethods', {
    methodName: methodName,
    eventName: eventName,
    ref: ref
  });
}
// // think we should take this out, put property bindings on the
// export function Method(eventName?: string): Function {
//     return methodFunc.bind(this, eventName);
// }
//
// function methodFunc(alias: string, target: Object, methodName: string) {
//     if (alias === null) {
//         console.error("AG Grid: EventListener eventName should not be null");
//         return;
//     }
//
//     addToObjectProps(target, 'methods', {
//         methodName: methodName,
//         alias: alias
//     });
// }
function addToObjectProps(target, key, value) {
  // it's an attribute on the class
  var props = getOrCreateProps$1(target, getFunctionName(target.constructor));
  if (!props[key]) {
    props[key] = [];
  }
  props[key].push(value);
}
function getOrCreateProps$1(target, instanceName) {
  if (!target.__agComponentMetaData) {
    target.__agComponentMetaData = {};
  }
  if (!target.__agComponentMetaData[instanceName]) {
    target.__agComponentMetaData[instanceName] = {};
  }
  return target.__agComponentMetaData[instanceName];
}

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var KeyCode = /** @class */function () {
  function KeyCode() {}
  KeyCode.BACKSPACE = 8;
  KeyCode.TAB = 9;
  KeyCode.ENTER = 13;
  KeyCode.SHIFT = 16;
  KeyCode.ESCAPE = 27;
  KeyCode.SPACE = 32;
  KeyCode.LEFT = 37;
  KeyCode.UP = 38;
  KeyCode.RIGHT = 39;
  KeyCode.DOWN = 40;
  KeyCode.DELETE = 46;
  KeyCode.A = 65;
  KeyCode.C = 67;
  KeyCode.V = 86;
  KeyCode.D = 68;
  KeyCode.Z = 90;
  KeyCode.Y = 89;
  KeyCode.F2 = 113;
  KeyCode.PAGE_UP = 33;
  KeyCode.PAGE_DOWN = 34;
  KeyCode.PAGE_HOME = 36;
  KeyCode.PAGE_END = 35;
  return KeyCode;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$8 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$b =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TextCellEditor = /** @class */function (_super) {
  __extends$8(TextCellEditor, _super);
  function TextCellEditor() {
    return _super.call(this, TextCellEditor.TEMPLATE) || this;
  }
  TextCellEditor.prototype.init = function (params) {
    this.params = params;
    var eInput = this.eInput;
    var startValue;
    // cellStartedEdit is only false if we are doing fullRow editing
    if (params.cellStartedEdit) {
      this.focusAfterAttached = true;
      if (params.keyPress === KeyCode.BACKSPACE || params.keyPress === KeyCode.DELETE) {
        startValue = '';
      } else if (params.charPress) {
        startValue = params.charPress;
      } else {
        startValue = this.getStartValue(params);
        if (params.keyPress !== KeyCode.F2) {
          this.highlightAllOnFocus = true;
        }
      }
    } else {
      this.focusAfterAttached = false;
      startValue = this.getStartValue(params);
    }
    if (startValue != null) {
      eInput.setValue(startValue, true);
    }
    this.addManagedListener(eInput.getGui(), 'keydown', function (event) {
      var keyCode = event.keyCode;
      if (keyCode === KeyCode.PAGE_UP || keyCode === KeyCode.PAGE_DOWN) {
        event.preventDefault();
      }
    });
  };
  TextCellEditor.prototype.afterGuiAttached = function () {
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    var eInput = this.eInput;
    eInput.setInputAriaLabel(translate('ariaInputEditor', 'Input Editor'));
    if (!this.focusAfterAttached) {
      return;
    }
    // Added for AG-3238. We can't remove this explicit focus() because Chrome requires an input
    // to be focused before setSelectionRange will work. But it triggers a bug in Safari where
    // explicitly focusing then blurring an empty field will cause the parent container to scroll.
    if (!isBrowserSafari()) {
      eInput.getFocusableElement().focus();
    }
    var inputEl = eInput.getInputElement();
    if (this.highlightAllOnFocus) {
      inputEl.select();
    } else {
      // when we started editing, we want the caret at the end, not the start.
      // this comes into play in two scenarios: a) when user hits F2 and b)
      // when user hits a printable character, then on IE (and only IE) the caret
      // was placed after the first character, thus 'apply' would end up as 'pplea'
      var value = eInput.getValue();
      var len = exists(value) && value.length || 0;
      if (len) {
        inputEl.setSelectionRange(len, len);
      }
    }
  };
  // gets called when tabbing trough cells and in full row edit mode
  TextCellEditor.prototype.focusIn = function () {
    var eInput = this.eInput;
    var focusEl = eInput.getFocusableElement();
    var inputEl = eInput.getInputElement();
    focusEl.focus();
    inputEl.select();
  };
  TextCellEditor.prototype.focusOut = function () {
    var inputEl = this.eInput.getInputElement();
    if (isBrowserIE()) {
      inputEl.setSelectionRange(0, 0);
    }
  };
  TextCellEditor.prototype.getValue = function () {
    var eInput = this.eInput;
    return this.params.parseValue(eInput.getValue());
  };
  TextCellEditor.prototype.getStartValue = function (params) {
    var formatValue = params.useFormatter || params.column.getColDef().refData;
    return formatValue ? params.formatValue(params.value) : params.value;
  };
  TextCellEditor.prototype.isPopup = function () {
    return false;
  };
  TextCellEditor.TEMPLATE = '<div class="ag-cell-edit-wrapper"><ag-input-text-field class="ag-cell-editor" ref="eInput"></ag-input-text-field></div>';
  __decorate$b([RefSelector('eInput')], TextCellEditor.prototype, "eInput", void 0);
  return TextCellEditor;
}(PopupComponent);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
/** Provides sync access to async component. Date component can be lazy created - this class encapsulates
 * this by keeping value locally until DateComp has loaded, then passing DateComp the value. */
var DateCompWrapper = /** @class */function () {
  function DateCompWrapper(context, userComponentFactory, dateComponentParams, eParent) {
    var _this = this;
    this.alive = true;
    this.context = context;
    userComponentFactory.newDateComponent(dateComponentParams).then(function (dateComp) {
      // because async, check the filter still exists after component comes back
      if (!_this.alive) {
        context.destroyBean(dateComp);
        return;
      }
      _this.dateComp = dateComp;
      if (!dateComp) {
        return;
      }
      eParent.appendChild(dateComp.getGui());
      if (dateComp.afterGuiAttached) {
        dateComp.afterGuiAttached();
      }
      if (_this.tempValue) {
        dateComp.setDate(_this.tempValue);
      }
    });
  }
  DateCompWrapper.prototype.destroy = function () {
    this.alive = false;
    this.dateComp = this.context.destroyBean(this.dateComp);
  };
  DateCompWrapper.prototype.getDate = function () {
    return this.dateComp ? this.dateComp.getDate() : this.tempValue;
  };
  DateCompWrapper.prototype.setDate = function (value) {
    if (this.dateComp) {
      this.dateComp.setDate(value);
    } else {
      this.tempValue = value;
    }
  };
  DateCompWrapper.prototype.setInputPlaceholder = function (placeholder) {
    if (this.dateComp && this.dateComp.setInputPlaceholder) {
      this.dateComp.setInputPlaceholder(placeholder);
    }
  };
  DateCompWrapper.prototype.setInputAriaLabel = function (label) {
    if (this.dateComp && this.dateComp.setInputAriaLabel) {
      this.dateComp.setInputAriaLabel(label);
    }
  };
  DateCompWrapper.prototype.afterGuiAttached = function (params) {
    if (this.dateComp && typeof this.dateComp.afterGuiAttached === 'function') {
      this.dateComp.afterGuiAttached(params);
    }
  };
  return DateCompWrapper;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
/* Common logic for options, used by both filters and floating filters. */
var OptionsFactory = /** @class */function () {
  function OptionsFactory() {
    this.customFilterOptions = {};
  }
  OptionsFactory.prototype.init = function (params, defaultOptions) {
    this.filterOptions = params.filterOptions || defaultOptions;
    this.mapCustomOptions();
    this.selectDefaultItem(params);
  };
  OptionsFactory.prototype.getFilterOptions = function () {
    return this.filterOptions;
  };
  OptionsFactory.prototype.mapCustomOptions = function () {
    var _this = this;
    if (!this.filterOptions) {
      return;
    }
    this.filterOptions.forEach(function (filterOption) {
      if (typeof filterOption === 'string') {
        return;
      }
      var requiredProperties = ['displayKey', 'displayName', 'test'];
      if (every(requiredProperties, function (key) {
        if (!filterOption[key]) {
          console.warn("AG Grid: ignoring FilterOptionDef as it doesn't contain a '" + key + "'");
          return false;
        }
        return true;
      })) {
        _this.customFilterOptions[filterOption.displayKey] = filterOption;
      }
    });
  };
  OptionsFactory.prototype.selectDefaultItem = function (params) {
    if (params.defaultOption) {
      this.defaultOption = params.defaultOption;
    } else if (this.filterOptions.length >= 1) {
      var firstFilterOption = this.filterOptions[0];
      if (typeof firstFilterOption === 'string') {
        this.defaultOption = firstFilterOption;
      } else if (firstFilterOption.displayKey) {
        this.defaultOption = firstFilterOption.displayKey;
      } else {
        console.warn("AG Grid: invalid FilterOptionDef supplied as it doesn't contain a 'displayKey'");
      }
    } else {
      console.warn('AG Grid: no filter options for filter');
    }
  };
  OptionsFactory.prototype.getDefaultOption = function () {
    return this.defaultOption;
  };
  OptionsFactory.prototype.getCustomOption = function (name) {
    return this.customFilterOptions[name];
  };
  return OptionsFactory;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var DEFAULT_FILTER_LOCALE_TEXT = {
  applyFilter: 'Apply',
  clearFilter: 'Clear',
  resetFilter: 'Reset',
  cancelFilter: 'Cancel',
  textFilter: 'Text Filter',
  numberFilter: 'Number Filter',
  dateFilter: 'Date Filter',
  setFilter: 'Set Filter',
  filterOoo: 'Filter...',
  empty: 'Choose One',
  equals: 'Equals',
  notEqual: 'Not equal',
  lessThan: 'Less than',
  greaterThan: 'Greater than',
  inRange: 'In range',
  inRangeStart: 'From',
  inRangeEnd: 'To',
  lessThanOrEqual: 'Less than or equals',
  greaterThanOrEqual: 'Greater than or equals',
  contains: 'Contains',
  notContains: 'Not contains',
  startsWith: 'Starts with',
  endsWith: 'Ends with',
  andCondition: 'AND',
  orCondition: 'OR',
  dateFormatOoo: 'yyyy-mm-dd'
};

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$9 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$c =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * This provides logic to override the default browser focus logic.
 *
 * When the component gets focus, it uses the grid logic to find out what should be focused,
 * and then focuses that instead.
 *
 * This is how we ensure when user tabs into the relevant section, we focus the correct item.
 * For example GridCore extends ManagedFocusComponent, and it ensures when it receives focus
 * that focus goes to the first cell of the first header row.
 */
var ManagedFocusComponent = /** @class */function (_super) {
  __extends$9(ManagedFocusComponent, _super);
  /*
   * Set isFocusableContainer to true if this component will contain multiple focus-managed
   * elements within. When set to true, this component will add tabGuards that will be responsible
   * for receiving focus from outside and focusing an internal element using the focusInnerElementMethod
   */
  function ManagedFocusComponent(template, isFocusableContainer) {
    if (isFocusableContainer === void 0) {
      isFocusableContainer = false;
    }
    var _this = _super.call(this, template) || this;
    _this.isFocusableContainer = isFocusableContainer;
    _this.skipTabGuardFocus = false;
    return _this;
  }
  ManagedFocusComponent.prototype.postConstruct = function () {
    var _this = this;
    var focusableElement = this.getFocusableElement();
    if (!focusableElement) {
      return;
    }
    addCssClass(focusableElement, ManagedFocusComponent.FOCUS_MANAGED_CLASS);
    if (this.isFocusableContainer) {
      this.topTabGuard = this.createTabGuard('top');
      this.bottomTabGuard = this.createTabGuard('bottom');
      this.addTabGuards();
      this.activateTabGuards();
      this.forEachTabGuard(function (guard) {
        return _this.addManagedListener(guard, 'focus', _this.onFocus.bind(_this));
      });
    }
    this.addKeyDownListeners(focusableElement);
    this.addManagedListener(focusableElement, 'focusin', this.onFocusIn.bind(this));
    this.addManagedListener(focusableElement, 'focusout', this.onFocusOut.bind(this));
  };
  /*
   * Override this method if focusing the default element requires special logic.
   */
  ManagedFocusComponent.prototype.focusInnerElement = function (fromBottom) {
    if (fromBottom === void 0) {
      fromBottom = false;
    }
    var focusable = this.focusController.findFocusableElements(this.getFocusableElement());
    if (this.isFocusableContainer && this.tabGuardsAreActive()) {
      // remove tab guards from this component from list of focusable elements
      focusable.splice(0, 1);
      focusable.splice(focusable.length - 1, 1);
    }
    if (!focusable.length) {
      return;
    }
    focusable[fromBottom ? focusable.length - 1 : 0].focus();
  };
  /**
   * By default this will tab though the elements in the default order. Override if you require special logic.
   */
  ManagedFocusComponent.prototype.onTabKeyDown = function (e) {
    var _this = this;
    if (e.defaultPrevented) {
      return;
    }
    var tabGuardsAreActive = this.tabGuardsAreActive();
    if (this.isFocusableContainer && tabGuardsAreActive) {
      this.deactivateTabGuards();
    }
    var nextRoot = this.focusController.findNextFocusableElement(this.getFocusableElement(), false, e.shiftKey);
    if (this.isFocusableContainer && tabGuardsAreActive) {
      // ensure the tab guards are only re-instated once the event has finished processing, to avoid the browser
      // tabbing to the tab guard from inside the component
      setTimeout(function () {
        return _this.activateTabGuards();
      }, 0);
    }
    if (!nextRoot) {
      return;
    }
    nextRoot.focus();
    e.preventDefault();
  };
  ManagedFocusComponent.prototype.onFocusIn = function (e) {
    if (this.isFocusableContainer) {
      this.deactivateTabGuards();
    }
  };
  ManagedFocusComponent.prototype.onFocusOut = function (e) {
    if (this.isFocusableContainer && !this.getFocusableElement().contains(e.relatedTarget)) {
      this.activateTabGuards();
    }
  };
  ManagedFocusComponent.prototype.forceFocusOutOfContainer = function (up) {
    if (up === void 0) {
      up = false;
    }
    if (!this.isFocusableContainer) {
      return;
    }
    this.activateTabGuards();
    this.skipTabGuardFocus = true;
    var tabGuardToFocus = up ? this.topTabGuard : this.bottomTabGuard;
    if (tabGuardToFocus) {
      tabGuardToFocus.focus();
    }
  };
  ManagedFocusComponent.prototype.appendChild = function (newChild, container) {
    if (this.isFocusableContainer) {
      if (!isNodeOrElement(newChild)) {
        newChild = newChild.getGui();
      }
      var bottomTabGuard = this.bottomTabGuard;
      if (bottomTabGuard) {
        bottomTabGuard.insertAdjacentElement('beforebegin', newChild);
      } else {
        _super.prototype.appendChild.call(this, newChild, container);
      }
    } else {
      _super.prototype.appendChild.call(this, newChild, container);
    }
  };
  ManagedFocusComponent.prototype.createTabGuard = function (side) {
    var tabGuard = document.createElement('div');
    tabGuard.classList.add('ag-tab-guard');
    tabGuard.classList.add("ag-tab-guard-" + side);
    tabGuard.setAttribute('role', 'presentation');
    return tabGuard;
  };
  ManagedFocusComponent.prototype.addTabGuards = function () {
    var focusableEl = this.getFocusableElement();
    focusableEl.insertAdjacentElement('afterbegin', this.topTabGuard);
    focusableEl.insertAdjacentElement('beforeend', this.bottomTabGuard);
  };
  ManagedFocusComponent.prototype.forEachTabGuard = function (callback) {
    if (this.topTabGuard) {
      callback(this.topTabGuard);
    }
    if (this.bottomTabGuard) {
      callback(this.bottomTabGuard);
    }
  };
  ManagedFocusComponent.prototype.addKeyDownListeners = function (eGui) {
    var _this = this;
    this.addManagedListener(eGui, 'keydown', function (e) {
      if (e.defaultPrevented || isStopPropagationForAgGrid(e)) {
        return;
      }
      if (_this.shouldStopEventPropagation(e)) {
        stopPropagationForAgGrid(e);
        return;
      }
      if (e.keyCode === KeyCode.TAB) {
        _this.onTabKeyDown(e);
      } else if (_this.handleKeyDown) {
        _this.handleKeyDown(e);
      }
    });
  };
  ManagedFocusComponent.prototype.shouldStopEventPropagation = function (e) {
    return false;
  };
  ManagedFocusComponent.prototype.onFocus = function (e) {
    if (this.skipTabGuardFocus) {
      this.skipTabGuardFocus = false;
      return;
    }
    this.focusInnerElement(e.target === this.bottomTabGuard);
  };
  ManagedFocusComponent.prototype.activateTabGuards = function () {
    var _this = this;
    this.forEachTabGuard(function (guard) {
      return guard.setAttribute('tabIndex', _this.gridOptionsWrapper.getGridTabIndex());
    });
  };
  ManagedFocusComponent.prototype.deactivateTabGuards = function () {
    this.forEachTabGuard(function (guard) {
      return guard.removeAttribute('tabIndex');
    });
  };
  ManagedFocusComponent.prototype.tabGuardsAreActive = function () {
    return !!this.topTabGuard && this.topTabGuard.hasAttribute('tabIndex');
  };
  ManagedFocusComponent.prototype.clearGui = function () {
    var tabGuardsAreActive = this.tabGuardsAreActive();
    clearElement(this.getFocusableElement());
    if (this.isFocusableContainer) {
      this.addTabGuards();
      if (tabGuardsAreActive) {
        this.activateTabGuards();
      }
    }
  };
  ManagedFocusComponent.FOCUS_MANAGED_CLASS = 'ag-focus-managed';
  __decorate$c([Autowired('focusController')], ManagedFocusComponent.prototype, "focusController", void 0);
  __decorate$c([PostConstruct], ManagedFocusComponent.prototype, "postConstruct", null);
  return ManagedFocusComponent;
}(Component);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$a =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$d =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Contains common logic to all provided filters (apply button, clear button, etc).
 * All the filters that come with AG Grid extend this class. User filters do not
 * extend this class.
 */
var ProvidedFilter = /** @class */function (_super) {
  __extends$a(ProvidedFilter, _super);
  function ProvidedFilter(filterNameKey) {
    var _this = _super.call(this) || this;
    _this.filterNameKey = filterNameKey;
    _this.applyActive = false;
    _this.hidePopup = null;
    // after the user hits 'apply' the model gets copied to here. this is then the model that we use for
    // all filtering. so if user changes UI but doesn't hit apply, then the UI will be out of sync with this model.
    // this is what we want, as the UI should only become the 'active' filter once it's applied. when apply is
    // inactive, this model will be in sync (following the debounce ms). if the UI is not a valid filter
    // (eg the value is missing so nothing to filter on, or for set filter all checkboxes are checked so filter
    // not active) then this appliedModel will be null/undefined.
    _this.appliedModel = null;
    return _this;
  }
  ProvidedFilter.prototype.getFilterTitle = function () {
    return this.translate(this.filterNameKey);
  };
  /** @deprecated */
  ProvidedFilter.prototype.onFilterChanged = function () {
    console.warn("AG Grid: you should not call onFilterChanged() directly on the filter, please call\n        gridApi.onFilterChanged() instead. onFilterChanged is not part of the exposed filter interface (it was\n        a method that existed on an old version of the filters that was not intended for public use.");
    this.providedFilterParams.filterChangedCallback();
  };
  ProvidedFilter.prototype.isFilterActive = function () {
    // filter is active if we have a valid applied model
    return !!this.appliedModel;
  };
  ProvidedFilter.prototype.postConstruct = function () {
    this.resetTemplate(); // do this first to create the DOM
    _super.prototype.postConstruct.call(this);
  };
  ProvidedFilter.prototype.resetTemplate = function (paramsMap) {
    var templateString = /* html */"\n            <div class=\"ag-filter-wrapper\">\n                <div class=\"ag-filter-body-wrapper ag-" + this.getCssIdentifier() + "-body-wrapper\">\n                    " + this.createBodyTemplate() + "\n                </div>\n            </div>";
    this.setTemplate(templateString, paramsMap);
  };
  ProvidedFilter.prototype.init = function (params) {
    var _this = this;
    this.setParams(params);
    this.resetUiToDefaults(true).then(function () {
      _this.updateUiVisibility();
      _this.setupOnBtApplyDebounce();
    });
  };
  ProvidedFilter.prototype.setParams = function (params) {
    ProvidedFilter.checkForDeprecatedParams(params);
    this.providedFilterParams = params;
    if (params.newRowsAction === 'keep') {
      this.newRowsActionKeep = true;
    } else if (params.newRowsAction === 'clear') {
      this.newRowsActionKeep = false;
    } else {
      // the default for SSRM and IRM is 'keep', for CSRM and VRM the default is 'clear'
      var modelsForKeep = [Constants.ROW_MODEL_TYPE_SERVER_SIDE, Constants.ROW_MODEL_TYPE_INFINITE];
      this.newRowsActionKeep = modelsForKeep.indexOf(this.rowModel.getType()) >= 0;
    }
    this.applyActive = ProvidedFilter.isUseApplyButton(params);
    this.createButtonPanel();
  };
  ProvidedFilter.prototype.createButtonPanel = function () {
    var _this = this;
    var buttons = this.providedFilterParams.buttons;
    if (!buttons || buttons.length < 1) {
      return;
    }
    var eButtonsPanel = document.createElement('div');
    addCssClass(eButtonsPanel, 'ag-filter-apply-panel');
    var addButton = function (type) {
      var text;
      var clickListener;
      switch (type) {
        case 'apply':
          text = _this.translate('applyFilter');
          clickListener = function (e) {
            return _this.onBtApply(false, false, e);
          };
          break;
        case 'clear':
          text = _this.translate('clearFilter');
          clickListener = function () {
            return _this.onBtClear();
          };
          break;
        case 'reset':
          text = _this.translate('resetFilter');
          clickListener = function () {
            return _this.onBtReset();
          };
          break;
        case 'cancel':
          text = _this.translate('cancelFilter');
          clickListener = function (e) {
            _this.onBtCancel(e);
          };
          break;
        default:
          console.warn('Unknown button type specified');
          return;
      }
      var button = loadTemplate( /* html */
      "<button\n                    type=\"button\"\n                    ref=\"" + type + "FilterButton\"\n                    class=\"ag-standard-button ag-filter-apply-panel-button\"\n                >" + text + "\n                </button>");
      eButtonsPanel.appendChild(button);
      _this.addManagedListener(button, 'click', clickListener);
    };
    convertToSet(buttons).forEach(function (type) {
      return addButton(type);
    });
    this.getGui().appendChild(eButtonsPanel);
  };
  ProvidedFilter.checkForDeprecatedParams = function (params) {
    var buttons = params.buttons || [];
    if (buttons.length > 0) {
      return;
    }
    var applyButton = params.applyButton,
      resetButton = params.resetButton,
      clearButton = params.clearButton;
    if (clearButton) {
      console.warn('AG Grid: as of AG Grid v23.2, filterParams.clearButton is deprecated. Please use filterParams.buttons instead');
      buttons.push('clear');
    }
    if (resetButton) {
      console.warn('AG Grid: as of AG Grid v23.2, filterParams.resetButton is deprecated. Please use filterParams.buttons instead');
      buttons.push('reset');
    }
    if (applyButton) {
      console.warn('AG Grid: as of AG Grid v23.2, filterParams.applyButton is deprecated. Please use filterParams.buttons instead');
      buttons.push('apply');
    }
    if (params.apply) {
      console.warn('AG Grid: as of AG Grid v21, filterParams.apply is deprecated. Please use filterParams.buttons instead');
      buttons.push('apply');
    }
    params.buttons = buttons;
  };
  // subclasses can override this to provide alternative debounce defaults
  ProvidedFilter.prototype.getDefaultDebounceMs = function () {
    return 0;
  };
  ProvidedFilter.prototype.setupOnBtApplyDebounce = function () {
    var debounceMs = ProvidedFilter.getDebounceMs(this.providedFilterParams, this.getDefaultDebounceMs());
    this.onBtApplyDebounce = debounce(this.onBtApply.bind(this), debounceMs);
  };
  ProvidedFilter.prototype.getModel = function () {
    return this.appliedModel;
  };
  ProvidedFilter.prototype.setModel = function (model) {
    var _this = this;
    var promise = model ? this.setModelIntoUi(model) : this.resetUiToDefaults();
    return promise.then(function () {
      _this.updateUiVisibility();
      // we set the model from the GUI, rather than the provided model,
      // so the model is consistent, e.g. handling of null/undefined will be the same,
      // or if model is case insensitive, then casing is removed.
      _this.applyModel();
    });
  };
  ProvidedFilter.prototype.onBtCancel = function (e) {
    var _this = this;
    var currentModel = this.getModel();
    var afterAppliedFunc = function () {
      _this.onUiChanged(false, 'prevent');
      if (_this.providedFilterParams.closeOnApply) {
        _this.close(e);
      }
    };
    if (currentModel != null) {
      this.setModelIntoUi(currentModel).then(afterAppliedFunc);
    } else {
      this.resetUiToDefaults().then(afterAppliedFunc);
    }
  };
  ProvidedFilter.prototype.onBtClear = function () {
    var _this = this;
    this.resetUiToDefaults().then(function () {
      return _this.onUiChanged();
    });
  };
  ProvidedFilter.prototype.onBtReset = function () {
    this.onBtClear();
    this.onBtApply();
  };
  /**
   * Applies changes made in the UI to the filter, and returns true if the model has changed.
   */
  ProvidedFilter.prototype.applyModel = function () {
    var newModel = this.getModelFromUi();
    if (!this.isModelValid(newModel)) {
      return false;
    }
    var previousModel = this.appliedModel;
    this.appliedModel = newModel;
    // models can be same if user pasted same content into text field, or maybe just changed the case
    // and it's a case insensitive filter
    return !this.areModelsEqual(previousModel, newModel);
  };
  ProvidedFilter.prototype.isModelValid = function (model) {
    return true;
  };
  ProvidedFilter.prototype.onBtApply = function (afterFloatingFilter, afterDataChange, e) {
    if (afterFloatingFilter === void 0) {
      afterFloatingFilter = false;
    }
    if (afterDataChange === void 0) {
      afterDataChange = false;
    }
    if (this.applyModel()) {
      // the floating filter uses 'afterFloatingFilter' info, so it doesn't refresh after filter changed if change
      // came from floating filter
      this.providedFilterParams.filterChangedCallback({
        afterFloatingFilter: afterFloatingFilter,
        afterDataChange: afterDataChange
      });
    }
    var closeOnApply = this.providedFilterParams.closeOnApply;
    // only close if an apply button is visible, otherwise we'd be closing every time a change was made!
    if (closeOnApply && this.applyActive && !afterFloatingFilter && !afterDataChange) {
      this.close(e);
    }
  };
  ProvidedFilter.prototype.onNewRowsLoaded = function () {
    var _this = this;
    if (!this.newRowsActionKeep) {
      this.resetUiToDefaults().then(function () {
        return _this.appliedModel = null;
      });
    }
  };
  ProvidedFilter.prototype.close = function (e) {
    if (!this.hidePopup) {
      return;
    }
    var keyboardEvent = e;
    var key = keyboardEvent && keyboardEvent.key;
    var params;
    if (key === 'Enter' || key === 'Space') {
      params = {
        keyboardEvent: keyboardEvent
      };
    }
    this.hidePopup(params);
    this.hidePopup = null;
  };
  // called by set filter
  ProvidedFilter.prototype.isNewRowsActionKeep = function () {
    return this.newRowsActionKeep;
  };
  /**
   * By default, if the change came from a floating filter it will be applied immediately, otherwise if there is no
   * apply button it will be applied after a debounce, otherwise it will not be applied at all. This behaviour can
   * be adjusted by using the apply parameter.
   */
  ProvidedFilter.prototype.onUiChanged = function (fromFloatingFilter, apply) {
    if (fromFloatingFilter === void 0) {
      fromFloatingFilter = false;
    }
    this.updateUiVisibility();
    this.providedFilterParams.filterModifiedCallback();
    if (this.applyActive) {
      var isValid = this.isModelValid(this.getModelFromUi());
      setDisabled(this.getRefElement('applyFilterButton'), !isValid);
    }
    if (fromFloatingFilter && !apply || apply === 'immediately') {
      this.onBtApply(fromFloatingFilter);
    } else if (!this.applyActive && !apply || apply === 'debounce') {
      this.onBtApplyDebounce();
    }
  };
  ProvidedFilter.prototype.afterGuiAttached = function (params) {
    if (params == null) {
      return;
    }
    this.hidePopup = params.hidePopup;
  };
  // static, as used by floating filter also
  ProvidedFilter.getDebounceMs = function (params, debounceDefault) {
    if (ProvidedFilter.isUseApplyButton(params)) {
      if (params.debounceMs != null) {
        console.warn('AG Grid: debounceMs is ignored when apply button is present');
      }
      return 0;
    }
    return params.debounceMs != null ? params.debounceMs : debounceDefault;
  };
  // static, as used by floating filter also
  ProvidedFilter.isUseApplyButton = function (params) {
    ProvidedFilter.checkForDeprecatedParams(params);
    return !!params.buttons && params.buttons.indexOf('apply') >= 0;
  };
  ProvidedFilter.prototype.destroy = function () {
    this.hidePopup = null;
    _super.prototype.destroy.call(this);
  };
  ProvidedFilter.prototype.translate = function (key) {
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    return translate(key, DEFAULT_FILTER_LOCALE_TEXT[key]);
  };
  __decorate$d([Autowired('rowModel')], ProvidedFilter.prototype, "rowModel", void 0);
  __decorate$d([PostConstruct], ProvidedFilter.prototype, "postConstruct", null);
  return ProvidedFilter;
}(ManagedFocusComponent);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$b =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$e =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ConditionPosition;
(function (ConditionPosition) {
  ConditionPosition[ConditionPosition["One"] = 0] = "One";
  ConditionPosition[ConditionPosition["Two"] = 1] = "Two";
})(ConditionPosition || (ConditionPosition = {}));
/**
 * Every filter with a dropdown where the user can specify a comparing type against the filter values
 */
var SimpleFilter = /** @class */function (_super) {
  __extends$b(SimpleFilter, _super);
  function SimpleFilter() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  // returns true if this type requires a 'from' field, eg any filter that requires at least one text value
  SimpleFilter.prototype.showValueFrom = function (type) {
    return !this.doesFilterHaveHiddenInput(type) && type !== SimpleFilter.EMPTY;
  };
  // returns true if this type requires a 'to' field, currently only 'range' returns true
  SimpleFilter.prototype.showValueTo = function (type) {
    return type === SimpleFilter.IN_RANGE;
  };
  // floating filter calls this when user applies filter from floating filter
  SimpleFilter.prototype.onFloatingFilterChanged = function (type, value) {
    this.setTypeFromFloatingFilter(type);
    this.setValueFromFloatingFilter(value);
    this.onUiChanged(true);
  };
  SimpleFilter.prototype.setTypeFromFloatingFilter = function (type) {
    this.eType1.setValue(type);
    this.eType2.setValue(this.optionsFactory.getDefaultOption());
    (this.isDefaultOperator('AND') ? this.eJoinOperatorAnd : this.eJoinOperatorOr).setValue(true);
  };
  SimpleFilter.prototype.getModelFromUi = function () {
    if (!this.isConditionUiComplete(ConditionPosition.One)) {
      return null;
    }
    if (this.isAllowTwoConditions() && this.isConditionUiComplete(ConditionPosition.Two)) {
      return {
        filterType: this.getFilterType(),
        operator: this.getJoinOperator(),
        condition1: this.createCondition(ConditionPosition.One),
        condition2: this.createCondition(ConditionPosition.Two)
      };
    }
    return this.createCondition(ConditionPosition.One);
  };
  SimpleFilter.prototype.getCondition1Type = function () {
    return this.eType1.getValue();
  };
  SimpleFilter.prototype.getCondition2Type = function () {
    return this.eType2.getValue();
  };
  SimpleFilter.prototype.getJoinOperator = function () {
    return this.eJoinOperatorOr.getValue() === true ? 'OR' : 'AND';
  };
  SimpleFilter.prototype.areModelsEqual = function (a, b) {
    // both are missing
    if (!a && !b) {
      return true;
    }
    // one is missing, other present
    if (!a && b || a && !b) {
      return false;
    }
    // one is combined, the other is not
    var aIsSimple = !a.operator;
    var bIsSimple = !b.operator;
    var oneSimpleOneCombined = !aIsSimple && bIsSimple || aIsSimple && !bIsSimple;
    if (oneSimpleOneCombined) {
      return false;
    }
    var res;
    // otherwise both present, so compare
    if (aIsSimple) {
      var aSimple = a;
      var bSimple = b;
      res = this.areSimpleModelsEqual(aSimple, bSimple);
    } else {
      var aCombined = a;
      var bCombined = b;
      res = aCombined.operator === bCombined.operator && this.areSimpleModelsEqual(aCombined.condition1, bCombined.condition1) && this.areSimpleModelsEqual(aCombined.condition2, bCombined.condition2);
    }
    return res;
  };
  SimpleFilter.prototype.setModelIntoUi = function (model) {
    var isCombined = model.operator;
    if (isCombined) {
      var combinedModel = model;
      var orChecked = combinedModel.operator === 'OR';
      this.eJoinOperatorAnd.setValue(!orChecked);
      this.eJoinOperatorOr.setValue(orChecked);
      this.eType1.setValue(combinedModel.condition1.type);
      this.eType2.setValue(combinedModel.condition2.type);
      this.setConditionIntoUi(combinedModel.condition1, ConditionPosition.One);
      this.setConditionIntoUi(combinedModel.condition2, ConditionPosition.Two);
    } else {
      var simpleModel = model;
      this.eJoinOperatorAnd.setValue(this.isDefaultOperator('AND'));
      this.eJoinOperatorOr.setValue(this.isDefaultOperator('OR'));
      this.eType1.setValue(simpleModel.type);
      this.eType2.setValue(this.optionsFactory.getDefaultOption());
      this.setConditionIntoUi(simpleModel, ConditionPosition.One);
      this.setConditionIntoUi(null, ConditionPosition.Two);
    }
    return AgPromise.resolve();
  };
  SimpleFilter.prototype.doesFilterPass = function (params) {
    var _this = this;
    var model = this.getModel();
    if (model == null) {
      return true;
    }
    var operator = model.operator;
    var models = [];
    if (operator) {
      var combinedModel = model;
      models.push(combinedModel.condition1, combinedModel.condition2);
    } else {
      models.push(model);
    }
    var combineFunction = operator && operator === 'OR' ? some : every;
    return combineFunction(models, function (m) {
      return _this.individualConditionPasses(params, m);
    });
  };
  SimpleFilter.prototype.setParams = function (params) {
    _super.prototype.setParams.call(this, params);
    this.optionsFactory = new OptionsFactory();
    this.optionsFactory.init(params, this.getDefaultFilterOptions());
    this.allowTwoConditions = !params.suppressAndOrCondition;
    this.alwaysShowBothConditions = !!params.alwaysShowBothConditions;
    this.defaultJoinOperator = this.getDefaultJoinOperator(params.defaultJoinOperator);
    this.putOptionsIntoDropdown();
    this.addChangedListeners();
  };
  SimpleFilter.prototype.getDefaultJoinOperator = function (defaultJoinOperator) {
    return includes(['AND', 'OR'], defaultJoinOperator) ? defaultJoinOperator : 'AND';
  };
  SimpleFilter.prototype.putOptionsIntoDropdown = function () {
    var _this = this;
    var filterOptions = this.optionsFactory.getFilterOptions();
    forEach(filterOptions, function (option) {
      var value;
      var text;
      if (typeof option === 'string') {
        value = option;
        text = _this.translate(value);
      } else {
        value = option.displayKey;
        var customOption = _this.optionsFactory.getCustomOption(value);
        text = customOption ? _this.gridOptionsWrapper.getLocaleTextFunc()(customOption.displayKey, customOption.displayName) : _this.translate(value);
      }
      var createOption = function () {
        return {
          value: value,
          text: text
        };
      };
      _this.eType1.addOption(createOption());
      _this.eType2.addOption(createOption());
    });
    var readOnly = filterOptions.length <= 1;
    this.eType1.setDisabled(readOnly);
    this.eType2.setDisabled(readOnly);
  };
  SimpleFilter.prototype.isAllowTwoConditions = function () {
    return this.allowTwoConditions;
  };
  SimpleFilter.prototype.createBodyTemplate = function () {
    return (/* html */"\n            <ag-select class=\"ag-filter-select\" ref=\"eOptions1\"></ag-select>\n            " + this.createValueTemplate(ConditionPosition.One) + "\n            <div class=\"ag-filter-condition\" ref=\"eJoinOperatorPanel\">\n               <ag-radio-button ref=\"eJoinOperatorAnd\" class=\"ag-filter-condition-operator ag-filter-condition-operator-and\"></ag-radio-button>\n               <ag-radio-button ref=\"eJoinOperatorOr\" class=\"ag-filter-condition-operator ag-filter-condition-operator-or\"></ag-radio-button>\n            </div>\n            <ag-select class=\"ag-filter-select\" ref=\"eOptions2\"></ag-select>\n            " + this.createValueTemplate(ConditionPosition.Two)
    );
  };
  SimpleFilter.prototype.getCssIdentifier = function () {
    return 'simple-filter';
  };
  SimpleFilter.prototype.updateUiVisibility = function () {
    var isCondition2Enabled = this.isCondition2Enabled();
    if (this.alwaysShowBothConditions) {
      this.eJoinOperatorAnd.setDisabled(!isCondition2Enabled);
      this.eJoinOperatorOr.setDisabled(!isCondition2Enabled);
      this.eType2.setDisabled(!isCondition2Enabled);
      setDisabled(this.eCondition2Body, !isCondition2Enabled);
    } else {
      setDisplayed(this.eJoinOperatorPanel, isCondition2Enabled);
      setDisplayed(this.eType2.getGui(), isCondition2Enabled);
      setDisplayed(this.eCondition2Body, isCondition2Enabled);
    }
  };
  SimpleFilter.prototype.isCondition2Enabled = function () {
    return this.allowTwoConditions && this.isConditionUiComplete(ConditionPosition.One);
  };
  SimpleFilter.prototype.resetUiToDefaults = function (silent) {
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    var filteringLabel = translate('ariaFilteringOperator', 'Filtering operator');
    var uniqueGroupId = 'ag-simple-filter-and-or-' + this.getCompId();
    var defaultOption = this.optionsFactory.getDefaultOption();
    this.eType1.setValue(defaultOption, silent).setAriaLabel(filteringLabel);
    this.eType2.setValue(defaultOption, silent).setAriaLabel(filteringLabel);
    this.eJoinOperatorAnd.setValue(this.isDefaultOperator('AND'), silent).setName(uniqueGroupId).setLabel(this.translate('andCondition'));
    this.eJoinOperatorOr.setValue(this.isDefaultOperator('OR'), silent).setName(uniqueGroupId).setLabel(this.translate('orCondition'));
    return AgPromise.resolve();
  };
  SimpleFilter.prototype.isDefaultOperator = function (operator) {
    return operator === this.defaultJoinOperator;
  };
  SimpleFilter.prototype.addChangedListeners = function () {
    var _this = this;
    var listener = function () {
      return _this.onUiChanged();
    };
    this.eType1.onValueChange(listener);
    this.eType2.onValueChange(listener);
    this.eJoinOperatorOr.onValueChange(listener);
    this.eJoinOperatorAnd.onValueChange(listener);
  };
  SimpleFilter.prototype.doesFilterHaveHiddenInput = function (filterType) {
    var customFilterOption = this.optionsFactory.getCustomOption(filterType);
    return customFilterOption && customFilterOption.hideFilterInput;
  };
  SimpleFilter.EMPTY = 'empty';
  SimpleFilter.EQUALS = 'equals';
  SimpleFilter.NOT_EQUAL = 'notEqual';
  SimpleFilter.LESS_THAN = 'lessThan';
  SimpleFilter.LESS_THAN_OR_EQUAL = 'lessThanOrEqual';
  SimpleFilter.GREATER_THAN = 'greaterThan';
  SimpleFilter.GREATER_THAN_OR_EQUAL = 'greaterThanOrEqual';
  SimpleFilter.IN_RANGE = 'inRange';
  SimpleFilter.CONTAINS = 'contains';
  SimpleFilter.NOT_CONTAINS = 'notContains';
  SimpleFilter.STARTS_WITH = 'startsWith';
  SimpleFilter.ENDS_WITH = 'endsWith';
  __decorate$e([RefSelector('eOptions1')], SimpleFilter.prototype, "eType1", void 0);
  __decorate$e([RefSelector('eOptions2')], SimpleFilter.prototype, "eType2", void 0);
  __decorate$e([RefSelector('eJoinOperatorPanel')], SimpleFilter.prototype, "eJoinOperatorPanel", void 0);
  __decorate$e([RefSelector('eJoinOperatorAnd')], SimpleFilter.prototype, "eJoinOperatorAnd", void 0);
  __decorate$e([RefSelector('eJoinOperatorOr')], SimpleFilter.prototype, "eJoinOperatorOr", void 0);
  __decorate$e([RefSelector('eCondition1Body')], SimpleFilter.prototype, "eCondition1Body", void 0);
  __decorate$e([RefSelector('eCondition2Body')], SimpleFilter.prototype, "eCondition2Body", void 0);
  return SimpleFilter;
}(ProvidedFilter);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$c =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ScalarFilter = /** @class */function (_super) {
  __extends$c(ScalarFilter, _super);
  function ScalarFilter() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ScalarFilter.prototype.setParams = function (params) {
    _super.prototype.setParams.call(this, params);
    this.scalarFilterParams = params;
    this.checkDeprecatedParams();
  };
  ScalarFilter.prototype.checkDeprecatedParams = function () {
    if (this.scalarFilterParams.nullComparator) {
      console.warn('AG Grid: Since v21.0, the property filterParams.nullComparator is deprecated. ' + 'Please use filterParams.includeBlanksInEquals, filterParams.includeBlanksInLessThan and ' + 'filterParams.includeBlanksInGreaterThan instead.');
      this.scalarFilterParams.includeBlanksInEquals = this.scalarFilterParams.nullComparator.equals;
      this.scalarFilterParams.includeBlanksInLessThan = this.scalarFilterParams.nullComparator.lessThan;
      this.scalarFilterParams.includeBlanksInGreaterThan = this.scalarFilterParams.nullComparator.greaterThan;
    }
  };
  ScalarFilter.prototype.individualConditionPasses = function (params, filterModel) {
    var cellValue = this.scalarFilterParams.valueGetter(params.node);
    var range = this.mapRangeFromModel(filterModel);
    var filterValue = range.from;
    var filterValueTo = range.to;
    var filterType = filterModel.type;
    var customFilterOption = this.optionsFactory.getCustomOption(filterType);
    if (customFilterOption) {
      // only execute the custom filter if a value exists or a value isn't required, i.e. input is hidden
      if (filterValue != null || customFilterOption.hideFilterInput) {
        return customFilterOption.test(filterValue, cellValue);
      }
    }
    if (cellValue == null) {
      switch (filterType) {
        case ScalarFilter.EQUALS:
        case ScalarFilter.NOT_EQUAL:
          if (this.scalarFilterParams.includeBlanksInEquals) {
            return true;
          }
          break;
        case ScalarFilter.GREATER_THAN:
        case ScalarFilter.GREATER_THAN_OR_EQUAL:
          if (this.scalarFilterParams.includeBlanksInGreaterThan) {
            return true;
          }
          break;
        case ScalarFilter.LESS_THAN:
        case ScalarFilter.LESS_THAN_OR_EQUAL:
          if (this.scalarFilterParams.includeBlanksInLessThan) {
            return true;
          }
          break;
        case ScalarFilter.IN_RANGE:
          if (this.scalarFilterParams.includeBlanksInRange) {
            return true;
          }
          break;
      }
      return false;
    }
    var comparator = this.comparator();
    var compareResult = comparator(filterValue, cellValue);
    switch (filterType) {
      case ScalarFilter.EQUALS:
        return compareResult === 0;
      case ScalarFilter.NOT_EQUAL:
        return compareResult !== 0;
      case ScalarFilter.GREATER_THAN:
        return compareResult > 0;
      case ScalarFilter.GREATER_THAN_OR_EQUAL:
        return compareResult >= 0;
      case ScalarFilter.LESS_THAN:
        return compareResult < 0;
      case ScalarFilter.LESS_THAN_OR_EQUAL:
        return compareResult <= 0;
      case ScalarFilter.IN_RANGE:
        {
          var compareToResult = comparator(filterValueTo, cellValue);
          return this.scalarFilterParams.inRangeInclusive ? compareResult >= 0 && compareToResult <= 0 : compareResult > 0 && compareToResult < 0;
        }
      default:
        console.warn('AG Grid: Unexpected type of filter "' + filterType + '", it looks like the filter was configured with incorrect Filter Options');
        return true;
    }
  };
  return ScalarFilter;
}(SimpleFilter);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$d =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$f =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DateFilter = /** @class */function (_super) {
  __extends$d(DateFilter, _super);
  function DateFilter() {
    return _super.call(this, 'dateFilter') || this;
  }
  DateFilter.prototype.afterGuiAttached = function (params) {
    _super.prototype.afterGuiAttached.call(this, params);
    this.dateCondition1FromComp.afterGuiAttached(params);
  };
  DateFilter.prototype.mapRangeFromModel = function (filterModel) {
    // unlike the other filters, we do two things here:
    // 1) allow for different attribute names (same as done for other filters) (eg the 'from' and 'to'
    //    are in different locations in Date and Number filter models)
    // 2) convert the type (because Date filter uses Dates, however model is 'string')
    //
    // NOTE: The conversion of string to date also removes the timezone - i.e. when user picks
    //       a date from the UI, it will have timezone info in it. This is lost when creating
    //       the model. When we recreate the date again here, it's without a timezone.
    return {
      from: parseDateTimeFromString(filterModel.dateFrom),
      to: parseDateTimeFromString(filterModel.dateTo)
    };
  };
  DateFilter.prototype.setValueFromFloatingFilter = function (value) {
    this.dateCondition1FromComp.setDate(value == null ? null : parseDateTimeFromString(value));
    this.dateCondition1ToComp.setDate(null);
    this.dateCondition2FromComp.setDate(null);
    this.dateCondition2ToComp.setDate(null);
  };
  DateFilter.prototype.setConditionIntoUi = function (model, position) {
    var _a = model ? [parseDateTimeFromString(model.dateFrom), parseDateTimeFromString(model.dateTo)] : [null, null],
      dateFrom = _a[0],
      dateTo = _a[1];
    var _b = this.getFromToComponents(position),
      compFrom = _b[0],
      compTo = _b[1];
    compFrom.setDate(dateFrom);
    compTo.setDate(dateTo);
  };
  DateFilter.prototype.resetUiToDefaults = function (silent) {
    var _this = this;
    return _super.prototype.resetUiToDefaults.call(this, silent).then(function () {
      _this.dateCondition1FromComp.setDate(null);
      _this.dateCondition1ToComp.setDate(null);
      _this.dateCondition2FromComp.setDate(null);
      _this.dateCondition2ToComp.setDate(null);
    });
  };
  DateFilter.prototype.comparator = function () {
    return this.dateFilterParams.comparator ? this.dateFilterParams.comparator : this.defaultComparator.bind(this);
  };
  DateFilter.prototype.defaultComparator = function (filterDate, cellValue) {
    // The default comparator assumes that the cellValue is a date
    var cellAsDate = cellValue;
    if (cellValue == null || cellAsDate < filterDate) {
      return -1;
    }
    if (cellAsDate > filterDate) {
      return 1;
    }
    return 0;
  };
  DateFilter.prototype.setParams = function (params) {
    _super.prototype.setParams.call(this, params);
    this.dateFilterParams = params;
    this.createDateComponents();
  };
  DateFilter.prototype.createDateComponents = function () {
    var _this = this;
    var createDateCompWrapper = function (element) {
      return new DateCompWrapper(_this.getContext(), _this.userComponentFactory, {
        onDateChanged: function () {
          return _this.onUiChanged();
        },
        filterParams: _this.dateFilterParams
      }, element);
    };
    this.dateCondition1FromComp = createDateCompWrapper(this.eCondition1PanelFrom);
    this.dateCondition1ToComp = createDateCompWrapper(this.eCondition1PanelTo);
    this.dateCondition2FromComp = createDateCompWrapper(this.eCondition2PanelFrom);
    this.dateCondition2ToComp = createDateCompWrapper(this.eCondition2PanelTo);
    this.addDestroyFunc(function () {
      _this.dateCondition1FromComp.destroy();
      _this.dateCondition1ToComp.destroy();
      _this.dateCondition2FromComp.destroy();
      _this.dateCondition2ToComp.destroy();
    });
  };
  DateFilter.prototype.getDefaultFilterOptions = function () {
    return DateFilter.DEFAULT_FILTER_OPTIONS;
  };
  DateFilter.prototype.createValueTemplate = function (position) {
    var pos = position === ConditionPosition.One ? '1' : '2';
    return (/* html */"\n            <div class=\"ag-filter-body\" ref=\"eCondition" + pos + "Body\">\n                <div class=\"ag-filter-from ag-filter-date-from\" ref=\"eCondition" + pos + "PanelFrom\"></div>\n                <div class=\"ag-filter-to ag-filter-date-to\" ref=\"eCondition" + pos + "PanelTo\"></div>\n            </div>"
    );
  };
  DateFilter.prototype.isConditionUiComplete = function (position) {
    var positionOne = position === ConditionPosition.One;
    var option = positionOne ? this.getCondition1Type() : this.getCondition2Type();
    if (option === SimpleFilter.EMPTY) {
      return false;
    }
    if (this.doesFilterHaveHiddenInput(option)) {
      return true;
    }
    var _a = this.getFromToComponents(position),
      compFrom = _a[0],
      compTo = _a[1];
    var minValidYear = this.dateFilterParams.minValidYear == null ? 1000 : this.dateFilterParams.minValidYear;
    var isValidDate = function (value) {
      return value != null && value.getUTCFullYear() > minValidYear;
    };
    return isValidDate(compFrom.getDate()) && (!this.showValueTo(option) || isValidDate(compTo.getDate()));
  };
  DateFilter.prototype.areSimpleModelsEqual = function (aSimple, bSimple) {
    return aSimple.dateFrom === bSimple.dateFrom && aSimple.dateTo === bSimple.dateTo && aSimple.type === bSimple.type;
  };
  DateFilter.prototype.getFilterType = function () {
    return 'date';
  };
  DateFilter.prototype.createCondition = function (position) {
    var positionOne = position === ConditionPosition.One;
    var type = positionOne ? this.getCondition1Type() : this.getCondition2Type();
    var _a = this.getFromToComponents(position),
      compFrom = _a[0],
      compTo = _a[1];
    return {
      dateFrom: serialiseDate(compFrom.getDate()),
      dateTo: serialiseDate(compTo.getDate()),
      type: type,
      filterType: this.getFilterType()
    };
  };
  DateFilter.prototype.resetPlaceholder = function () {
    var globalTranslate = this.gridOptionsWrapper.getLocaleTextFunc();
    var placeholder = this.translate('dateFormatOoo');
    var ariaLabel = globalTranslate('ariaFilterValue', 'Filter Value');
    this.dateCondition1FromComp.setInputPlaceholder(placeholder);
    this.dateCondition1FromComp.setInputAriaLabel(ariaLabel);
    this.dateCondition1ToComp.setInputPlaceholder(placeholder);
    this.dateCondition1ToComp.setInputAriaLabel(ariaLabel);
    this.dateCondition2FromComp.setInputPlaceholder(placeholder);
    this.dateCondition2FromComp.setInputAriaLabel(ariaLabel);
    this.dateCondition2ToComp.setInputPlaceholder(placeholder);
    this.dateCondition2ToComp.setInputAriaLabel(ariaLabel);
  };
  DateFilter.prototype.updateUiVisibility = function () {
    _super.prototype.updateUiVisibility.call(this);
    this.resetPlaceholder();
    var condition1Type = this.getCondition1Type();
    setDisplayed(this.eCondition1PanelFrom, this.showValueFrom(condition1Type));
    setDisplayed(this.eCondition1PanelTo, this.showValueTo(condition1Type));
    var condition2Type = this.getCondition2Type();
    setDisplayed(this.eCondition2PanelFrom, this.showValueFrom(condition2Type));
    setDisplayed(this.eCondition2PanelTo, this.showValueTo(condition2Type));
  };
  DateFilter.prototype.getFromToComponents = function (position) {
    return position === ConditionPosition.One ? [this.dateCondition1FromComp, this.dateCondition1ToComp] : [this.dateCondition2FromComp, this.dateCondition2ToComp];
  };
  DateFilter.DEFAULT_FILTER_OPTIONS = [ScalarFilter.EQUALS, ScalarFilter.GREATER_THAN, ScalarFilter.LESS_THAN, ScalarFilter.NOT_EQUAL, ScalarFilter.IN_RANGE];
  __decorate$f([RefSelector('eCondition1PanelFrom')], DateFilter.prototype, "eCondition1PanelFrom", void 0);
  __decorate$f([RefSelector('eCondition1PanelTo')], DateFilter.prototype, "eCondition1PanelTo", void 0);
  __decorate$f([RefSelector('eCondition2PanelFrom')], DateFilter.prototype, "eCondition2PanelFrom", void 0);
  __decorate$f([RefSelector('eCondition2PanelTo')], DateFilter.prototype, "eCondition2PanelTo", void 0);
  __decorate$f([Autowired('userComponentFactory')], DateFilter.prototype, "userComponentFactory", void 0);
  return DateFilter;
}(ScalarFilter);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var TouchListener = /** @class */function () {
  function TouchListener(eElement, preventMouseClick) {
    var _this = this;
    if (preventMouseClick === void 0) {
      preventMouseClick = false;
    }
    this.destroyFuncs = [];
    this.touching = false;
    this.eventService = new EventService();
    this.eElement = eElement;
    this.preventMouseClick = preventMouseClick;
    var startListener = this.onTouchStart.bind(this);
    var moveListener = this.onTouchMove.bind(this);
    var endListener = this.onTouchEnd.bind(this);
    this.eElement.addEventListener("touchstart", startListener, {
      passive: true
    });
    this.eElement.addEventListener("touchmove", moveListener, {
      passive: true
    });
    // we set passive=false, as we want to prevent default on this event
    this.eElement.addEventListener("touchend", endListener, {
      passive: false
    });
    this.destroyFuncs.push(function () {
      _this.eElement.removeEventListener("touchstart", startListener, {
        passive: true
      });
      _this.eElement.removeEventListener("touchmove", moveListener, {
        passive: true
      });
      _this.eElement.removeEventListener("touchend", endListener, {
        passive: false
      });
    });
  }
  TouchListener.prototype.getActiveTouch = function (touchList) {
    for (var i = 0; i < touchList.length; i++) {
      var matches = touchList[i].identifier === this.touchStart.identifier;
      if (matches) {
        return touchList[i];
      }
    }
    return null;
  };
  TouchListener.prototype.addEventListener = function (eventType, listener) {
    this.eventService.addEventListener(eventType, listener);
  };
  TouchListener.prototype.removeEventListener = function (eventType, listener) {
    this.eventService.removeEventListener(eventType, listener);
  };
  TouchListener.prototype.onTouchStart = function (touchEvent) {
    var _this = this;
    // only looking at one touch point at any time
    if (this.touching) {
      return;
    }
    this.touchStart = touchEvent.touches[0];
    this.touching = true;
    this.moved = false;
    var touchStartCopy = this.touchStart;
    window.setTimeout(function () {
      var touchesMatch = _this.touchStart === touchStartCopy;
      if (_this.touching && touchesMatch && !_this.moved) {
        _this.moved = true;
        var event_1 = {
          type: TouchListener.EVENT_LONG_TAP,
          touchStart: _this.touchStart,
          touchEvent: touchEvent
        };
        _this.eventService.dispatchEvent(event_1);
      }
    }, 500);
  };
  TouchListener.prototype.onTouchMove = function (touchEvent) {
    if (!this.touching) {
      return;
    }
    var touch = this.getActiveTouch(touchEvent.touches);
    if (!touch) {
      return;
    }
    var eventIsFarAway = !areEventsNear(touch, this.touchStart, 4);
    if (eventIsFarAway) {
      this.moved = true;
    }
  };
  TouchListener.prototype.onTouchEnd = function (touchEvent) {
    if (!this.touching) {
      return;
    }
    if (!this.moved) {
      var event_2 = {
        type: TouchListener.EVENT_TAP,
        touchStart: this.touchStart
      };
      this.eventService.dispatchEvent(event_2);
      this.checkForDoubleTap();
    }
    // stops the tap from also been processed as a mouse click
    if (this.preventMouseClick) {
      touchEvent.preventDefault();
    }
    this.touching = false;
  };
  TouchListener.prototype.checkForDoubleTap = function () {
    var now = new Date().getTime();
    if (this.lastTapTime && this.lastTapTime > 0) {
      // if previous tap, see if duration is short enough to be considered double tap
      var interval = now - this.lastTapTime;
      if (interval > TouchListener.DOUBLE_TAP_MILLIS) {
        // dispatch double tap event
        var event_3 = {
          type: TouchListener.EVENT_DOUBLE_TAP,
          touchStart: this.touchStart
        };
        this.eventService.dispatchEvent(event_3);
        // this stops a tripple tap ending up as two double taps
        this.lastTapTime = null;
      } else {
        this.lastTapTime = now;
      }
    } else {
      this.lastTapTime = now;
    }
  };
  TouchListener.prototype.destroy = function () {
    this.destroyFuncs.forEach(function (func) {
      return func();
    });
  };
  TouchListener.EVENT_TAP = "tap";
  TouchListener.EVENT_DOUBLE_TAP = "doubleTap";
  TouchListener.EVENT_LONG_TAP = "longTap";
  TouchListener.DOUBLE_TAP_MILLIS = 500;
  return TouchListener;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$e =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$g =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HeaderComp = /** @class */function (_super) {
  __extends$e(HeaderComp, _super);
  function HeaderComp() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.lastMovingChanged = 0;
    return _this;
  }
  // this is a user component, and IComponent has "public destroy()" as part of the interface.
  // so we need to override destroy() just to make the method public.
  HeaderComp.prototype.destroy = function () {
    _super.prototype.destroy.call(this);
  };
  HeaderComp.prototype.refresh = function (params) {
    this.params = params;
    // if template changed, then recreate the whole comp, the code required to manage
    // a changing template is to difficult for what it's worth.
    if (this.workOutTemplate() != this.currentTemplate) {
      return false;
    }
    if (this.workOutShowMenu() != this.currentShowMenu) {
      return false;
    }
    if (this.workOutSort() != this.currentSort) {
      return false;
    }
    this.setDisplayName(params);
    return true;
  };
  HeaderComp.prototype.workOutTemplate = function () {
    var template = firstExistingValue(this.params.template, HeaderComp.TEMPLATE);
    // take account of any newlines & whitespace before/after the actual template
    template = template && template.trim ? template.trim() : template;
    return template;
  };
  HeaderComp.prototype.init = function (params) {
    this.params = params;
    this.currentTemplate = this.workOutTemplate();
    this.setTemplate(this.currentTemplate);
    this.setupTap();
    this.setupIcons(params.column);
    this.setMenu();
    this.setupSort();
    this.setupFilterIcon();
    this.setDisplayName(params);
  };
  HeaderComp.prototype.setDisplayName = function (params) {
    if (this.currentDisplayName != params.displayName) {
      this.currentDisplayName = params.displayName;
      var displayNameSanitised = escapeString(this.currentDisplayName);
      if (this.eText) {
        this.eText.innerHTML = displayNameSanitised;
      }
    }
  };
  HeaderComp.prototype.setupIcons = function (column) {
    this.addInIcon('sortAscending', this.eSortAsc, column);
    this.addInIcon('sortDescending', this.eSortDesc, column);
    this.addInIcon('sortUnSort', this.eSortNone, column);
    this.addInIcon('menu', this.eMenu, column);
    this.addInIcon('filter', this.eFilter, column);
  };
  HeaderComp.prototype.addInIcon = function (iconName, eParent, column) {
    if (eParent == null) {
      return;
    }
    var eIcon = createIconNoSpan(iconName, this.gridOptionsWrapper, column);
    if (eIcon) {
      eParent.appendChild(eIcon);
    }
  };
  HeaderComp.prototype.setupTap = function () {
    var _this = this;
    var options = this.gridOptionsWrapper;
    if (options.isSuppressTouch()) {
      return;
    }
    var touchListener = new TouchListener(this.getGui(), true);
    var suppressMenuHide = options.isSuppressMenuHide();
    var tapMenuButton = suppressMenuHide && exists(this.eMenu);
    var menuTouchListener = tapMenuButton ? new TouchListener(this.eMenu, true) : touchListener;
    if (this.params.enableMenu) {
      var eventType = tapMenuButton ? 'EVENT_TAP' : 'EVENT_LONG_TAP';
      var showMenuFn = function (event) {
        options.getApi().showColumnMenuAfterMouseClick(_this.params.column, event.touchStart);
      };
      this.addManagedListener(menuTouchListener, TouchListener[eventType], showMenuFn);
    }
    if (this.params.enableSorting) {
      var tapListener = function (event) {
        var target = event.touchStart.target;
        // When suppressMenuHide is true, a tap on the menu icon will bubble up
        // to the header container, in that case we should not sort
        if (suppressMenuHide && _this.eMenu.contains(target)) {
          return;
        }
        _this.sortController.progressSort(_this.params.column, false, "uiColumnSorted");
      };
      this.addManagedListener(touchListener, TouchListener.EVENT_TAP, tapListener);
    }
    // if tapMenuButton is true `touchListener` and `menuTouchListener` are different
    // so we need to make sure to destroy both listeners here
    this.addDestroyFunc(function () {
      return touchListener.destroy();
    });
    if (tapMenuButton) {
      this.addDestroyFunc(function () {
        return menuTouchListener.destroy();
      });
    }
  };
  HeaderComp.prototype.workOutShowMenu = function () {
    // we don't show the menu if on an iPad/iPhone, as the user cannot have a pointer device/
    // However if suppressMenuHide is set to true the menu will be displayed alwasys, so it's ok
    // to show it on iPad in this case (as hover isn't needed). If suppressMenuHide
    // is false (default) user will need to use longpress to display the menu.
    var menuHides = !this.gridOptionsWrapper.isSuppressMenuHide();
    var onIpadAndMenuHides = isIOSUserAgent() && menuHides;
    var showMenu = this.params.enableMenu && !onIpadAndMenuHides;
    return showMenu;
  };
  HeaderComp.prototype.setMenu = function () {
    var _this = this;
    // if no menu provided in template, do nothing
    if (!this.eMenu) {
      return;
    }
    this.currentShowMenu = this.workOutShowMenu();
    if (!this.currentShowMenu) {
      removeFromParent(this.eMenu);
      return;
    }
    var suppressMenuHide = this.gridOptionsWrapper.isSuppressMenuHide();
    this.addManagedListener(this.eMenu, 'click', function () {
      return _this.showMenu(_this.eMenu);
    });
    addOrRemoveCssClass(this.eMenu, 'ag-header-menu-always-show', suppressMenuHide);
  };
  HeaderComp.prototype.showMenu = function (eventSource) {
    if (!eventSource) {
      eventSource = this.eMenu;
    }
    this.menuFactory.showMenuAfterButtonClick(this.params.column, eventSource);
  };
  HeaderComp.prototype.removeSortIcons = function () {
    removeFromParent(this.eSortAsc);
    removeFromParent(this.eSortDesc);
    removeFromParent(this.eSortNone);
    removeFromParent(this.eSortOrder);
  };
  HeaderComp.prototype.workOutSort = function () {
    return this.params.enableSorting;
  };
  HeaderComp.prototype.setupSort = function () {
    var _this = this;
    this.currentSort = this.params.enableSorting;
    if (!this.currentSort) {
      this.removeSortIcons();
      return;
    }
    var sortUsingCtrl = this.gridOptionsWrapper.isMultiSortKeyCtrl();
    // keep track of last time the moving changed flag was set
    this.addManagedListener(this.params.column, Column.EVENT_MOVING_CHANGED, function () {
      _this.lastMovingChanged = new Date().getTime();
    });
    // add the event on the header, so when clicked, we do sorting
    if (this.eLabel) {
      this.addManagedListener(this.eLabel, 'click', function (event) {
        // sometimes when moving a column via dragging, this was also firing a clicked event.
        // here is issue raised by user: https://ag-grid.zendesk.com/agent/tickets/1076
        // this check stops sort if a) column is moving or b) column moved less than 200ms ago (so caters for race condition)
        var moving = _this.params.column.isMoving();
        var nowTime = new Date().getTime();
        // typically there is <2ms if moving flag was set recently, as it would be done in same VM turn
        var movedRecently = nowTime - _this.lastMovingChanged < 50;
        var columnMoving = moving || movedRecently;
        if (!columnMoving) {
          var multiSort = sortUsingCtrl ? event.ctrlKey || event.metaKey : event.shiftKey;
          _this.params.progressSort(multiSort);
        }
      });
    }
    this.addManagedListener(this.params.column, Column.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
    this.onSortChanged();
    this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.setMultiSortOrder.bind(this));
    this.setMultiSortOrder();
  };
  HeaderComp.prototype.onSortChanged = function () {
    addOrRemoveCssClass(this.getGui(), 'ag-header-cell-sorted-asc', this.params.column.isSortAscending());
    addOrRemoveCssClass(this.getGui(), 'ag-header-cell-sorted-desc', this.params.column.isSortDescending());
    addOrRemoveCssClass(this.getGui(), 'ag-header-cell-sorted-none', this.params.column.isSortNone());
    if (this.eSortAsc) {
      addOrRemoveCssClass(this.eSortAsc, 'ag-hidden', !this.params.column.isSortAscending());
    }
    if (this.eSortDesc) {
      addOrRemoveCssClass(this.eSortDesc, 'ag-hidden', !this.params.column.isSortDescending());
    }
    if (this.eSortNone) {
      var alwaysHideNoSort = !this.params.column.getColDef().unSortIcon && !this.gridOptionsWrapper.isUnSortIcon();
      addOrRemoveCssClass(this.eSortNone, 'ag-hidden', alwaysHideNoSort || !this.params.column.isSortNone());
    }
  };
  // we listen here for global sort events, NOT column sort events, as we want to do this
  // when sorting has been set on all column (if we listened just for our col (where we
  // set the asc / desc icons) then it's possible other cols are yet to get their sorting state.
  HeaderComp.prototype.setMultiSortOrder = function () {
    if (!this.eSortOrder) {
      return;
    }
    var col = this.params.column;
    var allColumnsWithSorting = this.sortController.getColumnsWithSortingOrdered();
    var indexThisCol = allColumnsWithSorting.indexOf(col);
    var moreThanOneColSorting = allColumnsWithSorting.length > 1;
    var showIndex = col.isSorting() && moreThanOneColSorting;
    setDisplayed(this.eSortOrder, showIndex);
    if (indexThisCol >= 0) {
      this.eSortOrder.innerHTML = (indexThisCol + 1).toString();
    } else {
      clearElement(this.eSortOrder);
    }
  };
  HeaderComp.prototype.setupFilterIcon = function () {
    if (!this.eFilter) {
      return;
    }
    this.addManagedListener(this.params.column, Column.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
    this.onFilterChanged();
  };
  HeaderComp.prototype.onFilterChanged = function () {
    var filterPresent = this.params.column.isFilterActive();
    addOrRemoveCssClass(this.eFilter, 'ag-hidden', !filterPresent);
  };
  HeaderComp.TEMPLATE = "<div class=\"ag-cell-label-container\" role=\"presentation\">\n            <span ref=\"eMenu\" class=\"ag-header-icon ag-header-cell-menu-button\" aria-hidden=\"true\"></span>\n            <div ref=\"eLabel\" class=\"ag-header-cell-label\" role=\"presentation\" unselectable=\"on\">\n                <span ref=\"eText\" class=\"ag-header-cell-text\" unselectable=\"on\"></span>\n                <span ref=\"eFilter\" class=\"ag-header-icon ag-header-label-icon ag-filter-icon\" aria-hidden=\"true\"></span>\n                <span ref=\"eSortOrder\" class=\"ag-header-icon ag-header-label-icon ag-sort-order\" aria-hidden=\"true\"></span>\n                <span ref=\"eSortAsc\" class=\"ag-header-icon ag-header-label-icon ag-sort-ascending-icon\" aria-hidden=\"true\"></span>\n                <span ref=\"eSortDesc\" class=\"ag-header-icon ag-header-label-icon ag-sort-descending-icon\" aria-hidden=\"true\"></span>\n                <span ref=\"eSortNone\" class=\"ag-header-icon ag-header-label-icon ag-sort-none-icon\" aria-hidden=\"true\"></span>\n            </div>\n        </div>";
  __decorate$g([Autowired('sortController')], HeaderComp.prototype, "sortController", void 0);
  __decorate$g([Autowired('menuFactory')], HeaderComp.prototype, "menuFactory", void 0);
  __decorate$g([RefSelector('eFilter')], HeaderComp.prototype, "eFilter", void 0);
  __decorate$g([RefSelector('eSortAsc')], HeaderComp.prototype, "eSortAsc", void 0);
  __decorate$g([RefSelector('eSortDesc')], HeaderComp.prototype, "eSortDesc", void 0);
  __decorate$g([RefSelector('eSortNone')], HeaderComp.prototype, "eSortNone", void 0);
  __decorate$g([RefSelector('eSortOrder')], HeaderComp.prototype, "eSortOrder", void 0);
  __decorate$g([RefSelector('eMenu')], HeaderComp.prototype, "eMenu", void 0);
  __decorate$g([RefSelector('eLabel')], HeaderComp.prototype, "eLabel", void 0);
  __decorate$g([RefSelector('eText')], HeaderComp.prototype, "eText", void 0);
  return HeaderComp;
}(Component);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$f =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$h =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HeaderGroupComp = /** @class */function (_super) {
  __extends$f(HeaderGroupComp, _super);
  function HeaderGroupComp() {
    return _super.call(this, HeaderGroupComp.TEMPLATE) || this;
  }
  // this is a user component, and IComponent has "public destroy()" as part of the interface.
  // so we need to override destroy() just to make the method public.
  HeaderGroupComp.prototype.destroy = function () {
    _super.prototype.destroy.call(this);
  };
  HeaderGroupComp.prototype.init = function (params) {
    this.params = params;
    this.checkWarnings();
    this.setupLabel();
    this.addGroupExpandIcon();
    this.setupExpandIcons();
  };
  HeaderGroupComp.prototype.checkWarnings = function () {
    var paramsAny = this.params;
    if (paramsAny.template) {
      var message_1 = "A template was provided for Header Group Comp - templates are only supported for Header Comps (not groups)";
      doOnce(function () {
        return console.warn(message_1);
      }, 'HeaderGroupComp.templateNotSupported');
    }
  };
  HeaderGroupComp.prototype.setupExpandIcons = function () {
    var _this = this;
    this.addInIcon("columnGroupOpened", "agOpened");
    this.addInIcon("columnGroupClosed", "agClosed");
    var expandAction = function (event) {
      if (isStopPropagationForAgGrid(event)) {
        return;
      }
      var newExpandedValue = !_this.params.columnGroup.isExpanded();
      _this.columnController.setColumnGroupOpened(_this.params.columnGroup.getOriginalColumnGroup(), newExpandedValue, "uiColumnExpanded");
    };
    this.addTouchAndClickListeners(this.eCloseIcon, expandAction);
    this.addTouchAndClickListeners(this.eOpenIcon, expandAction);
    var stopPropagationAction = function (event) {
      stopPropagationForAgGrid(event);
    };
    // adding stopPropagation to the double click for the icons prevents double click action happening
    // when the icons are clicked. if the icons are double clicked, then the groups should open and
    // then close again straight away. if we also listened to double click, then the group would open,
    // close, then open, which is not what we want. double click should only action if the user double
    // clicks outside of the icons.
    this.addManagedListener(this.eCloseIcon, "dblclick", stopPropagationAction);
    this.addManagedListener(this.eOpenIcon, "dblclick", stopPropagationAction);
    this.addManagedListener(this.getGui(), "dblclick", expandAction);
    this.updateIconVisibility();
    var originalColumnGroup = this.params.columnGroup.getOriginalColumnGroup();
    this.addManagedListener(originalColumnGroup, OriginalColumnGroup.EVENT_EXPANDED_CHANGED, this.updateIconVisibility.bind(this));
    this.addManagedListener(originalColumnGroup, OriginalColumnGroup.EVENT_EXPANDABLE_CHANGED, this.updateIconVisibility.bind(this));
  };
  HeaderGroupComp.prototype.addTouchAndClickListeners = function (eElement, action) {
    var touchListener = new TouchListener(eElement, true);
    this.addManagedListener(touchListener, TouchListener.EVENT_TAP, action);
    this.addDestroyFunc(function () {
      return touchListener.destroy();
    });
    this.addManagedListener(eElement, "click", action);
  };
  HeaderGroupComp.prototype.updateIconVisibility = function () {
    var columnGroup = this.params.columnGroup;
    if (columnGroup.isExpandable()) {
      var expanded = this.params.columnGroup.isExpanded();
      setDisplayed(this.eOpenIcon, expanded);
      setDisplayed(this.eCloseIcon, !expanded);
    } else {
      setDisplayed(this.eOpenIcon, false);
      setDisplayed(this.eCloseIcon, false);
    }
  };
  HeaderGroupComp.prototype.addInIcon = function (iconName, refName) {
    var eIcon = createIconNoSpan(iconName, this.gridOptionsWrapper, null);
    if (eIcon) {
      this.getRefElement(refName).appendChild(eIcon);
    }
  };
  HeaderGroupComp.prototype.addGroupExpandIcon = function () {
    if (!this.params.columnGroup.isExpandable()) {
      setDisplayed(this.eOpenIcon, false);
      setDisplayed(this.eCloseIcon, false);
      return;
    }
  };
  HeaderGroupComp.prototype.setupLabel = function () {
    // no renderer, default text render
    var displayName = this.params.displayName;
    if (exists(displayName)) {
      var displayNameSanitised = escapeString(displayName);
      this.getRefElement('agLabel').innerHTML = displayNameSanitised;
    }
  };
  HeaderGroupComp.TEMPLATE = "<div class=\"ag-header-group-cell-label\" ref=\"agContainer\" role=\"presentation\">\n            <span ref=\"agLabel\" class=\"ag-header-group-text\" role=\"presentation\"></span>\n            <span ref=\"agOpened\" class=\"ag-header-icon ag-header-expand-icon ag-header-expand-icon-expanded\"></span>\n            <span ref=\"agClosed\" class=\"ag-header-icon ag-header-expand-icon ag-header-expand-icon-collapsed\"></span>\n        </div>";
  __decorate$h([Autowired("columnController")], HeaderGroupComp.prototype, "columnController", void 0);
  __decorate$h([RefSelector("agOpened")], HeaderGroupComp.prototype, "eOpenIcon", void 0);
  __decorate$h([RefSelector("agClosed")], HeaderGroupComp.prototype, "eCloseIcon", void 0);
  return HeaderGroupComp;
}(Component);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __decorate$i =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RowNode = /** @class */function () {
  function RowNode() {
    /** The index of this node in the grid, only valid if node is displayed in the grid, otherwise it should be ignored as old index may be present */
    this.rowIndex = null;
    /** Groups only - The key for the group eg Ireland, UK, USA */
    this.key = null;
    /** Children mapped by the pivot columns */
    this.childrenMapped = {};
    /**
     * True if the RowNode is not filtered, or in a collapsed group.
     */
    this.displayed = false;
    /** The top pixel for this row */
    this.rowTop = null;
    /** The top pixel for this row last time, makes sense if data set was ordered or filtered,
     * it is used so new rows can animate in from their old position. */
    this.oldRowTop = null;
    /** True by default - can be overridden via gridOptions.isRowSelectable(rowNode) */
    this.selectable = true;
    /** Used by sorting service - to give deterministic sort to groups. Previously we
     * just id for this, however id is a string and had slower sorting compared to numbers. */
    this.__objectId = RowNode.OBJECT_ID_SEQUENCE++;
    /** True when nodes with the same id are being removed and added as part of the same batch transaction */
    this.alreadyRendered = false;
    this.highlighted = null;
    this.selected = false;
  }
  RowNode.prototype.setData = function (data) {
    this.setDataCommon(data, false);
  };
  // similar to setRowData, however it is expected that the data is the same data item. this
  // is intended to be used with Redux type stores, where the whole data can be changed. we are
  // guaranteed that the data is the same entity (so grid doesn't need to worry about the id of the
  // underlying data changing, hence doesn't need to worry about selection). the grid, upon receiving
  // dataChanged event, will refresh the cells rather than rip them all out (so user can show transitions).
  RowNode.prototype.updateData = function (data) {
    this.setDataCommon(data, true);
  };
  RowNode.prototype.setDataCommon = function (data, update) {
    var oldData = this.data;
    this.data = data;
    this.valueCache.onDataChanged();
    this.updateDataOnDetailNode();
    this.checkRowSelectable();
    var event = this.createDataChangedEvent(data, oldData, update);
    this.dispatchLocalEvent(event);
  };
  // when we are doing master / detail, the detail node is lazy created, but then kept around.
  // so if we show / hide the detail, the same detail rowNode is used. so we need to keep the data
  // in sync, otherwise expand/collapse of the detail would still show the old values.
  RowNode.prototype.updateDataOnDetailNode = function () {
    if (this.detailNode) {
      this.detailNode.data = this.data;
    }
  };
  RowNode.prototype.createDataChangedEvent = function (newData, oldData, update) {
    return {
      type: RowNode.EVENT_DATA_CHANGED,
      node: this,
      oldData: oldData,
      newData: newData,
      update: update
    };
  };
  RowNode.prototype.createLocalRowEvent = function (type) {
    return {
      type: type,
      node: this
    };
  };
  RowNode.prototype.getRowIndexString = function () {
    if (this.rowPinned === Constants.PINNED_TOP) {
      return 't-' + this.rowIndex;
    }
    if (this.rowPinned === Constants.PINNED_BOTTOM) {
      return 'b-' + this.rowIndex;
    }
    return this.rowIndex.toString();
  };
  RowNode.prototype.createDaemonNode = function () {
    var oldNode = new RowNode();
    this.context.createBean(oldNode);
    // just copy the id and data, this is enough for the node to be used
    // in the selection controller (the selection controller is the only
    // place where daemon nodes can live).
    oldNode.id = this.id;
    oldNode.data = this.data;
    oldNode.daemon = true;
    oldNode.selected = this.selected;
    oldNode.level = this.level;
    return oldNode;
  };
  RowNode.prototype.setDataAndId = function (data, id) {
    var oldNode = exists(this.id) ? this.createDaemonNode() : null;
    var oldData = this.data;
    this.data = data;
    this.updateDataOnDetailNode();
    this.setId(id);
    this.selectionController.syncInRowNode(this, oldNode);
    this.checkRowSelectable();
    var event = this.createDataChangedEvent(data, oldData, false);
    this.dispatchLocalEvent(event);
  };
  RowNode.prototype.checkRowSelectable = function () {
    var isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();
    this.setRowSelectable(isRowSelectableFunc ? isRowSelectableFunc(this) : true);
  };
  RowNode.prototype.setRowSelectable = function (newVal) {
    if (this.selectable !== newVal) {
      this.selectable = newVal;
      if (this.eventService) {
        this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_SELECTABLE_CHANGED));
      }
    }
  };
  RowNode.prototype.setId = function (id) {
    // see if user is providing the id's
    var getRowNodeId = this.gridOptionsWrapper.getRowNodeIdFunc();
    if (getRowNodeId) {
      // if user is providing the id's, then we set the id only after the data has been set.
      // this is important for virtual pagination and viewport, where empty rows exist.
      if (this.data) {
        this.id = getRowNodeId(this.data);
        // make sure id provided doesn't start with 'row-group-' as this is reserved. also check that
        // it has 'startsWith' in case the user provided a number.
        if (this.id && typeof this.id === 'string' && startsWith(this.id, RowNode.ID_PREFIX_ROW_GROUP)) {
          console.error("AG Grid: Row ID's cannot start with " + RowNode.ID_PREFIX_ROW_GROUP + ", this is a reserved prefix for AG Grid's row grouping feature.");
        }
      } else {
        // this can happen if user has set blank into the rowNode after the row previously
        // having data. this happens in virtual page row model, when data is delete and
        // the page is refreshed.
        this.id = undefined;
      }
    } else {
      this.id = id;
    }
  };
  RowNode.prototype.isPixelInRange = function (pixel) {
    if (!exists(this.rowTop) || !exists(this.rowHeight)) {
      return false;
    }
    return pixel >= this.rowTop && pixel < this.rowTop + this.rowHeight;
  };
  RowNode.prototype.setFirstChild = function (firstChild) {
    if (this.firstChild === firstChild) {
      return;
    }
    this.firstChild = firstChild;
    if (this.eventService) {
      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_FIRST_CHILD_CHANGED));
    }
  };
  RowNode.prototype.setLastChild = function (lastChild) {
    if (this.lastChild === lastChild) {
      return;
    }
    this.lastChild = lastChild;
    if (this.eventService) {
      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_LAST_CHILD_CHANGED));
    }
  };
  RowNode.prototype.setChildIndex = function (childIndex) {
    if (this.childIndex === childIndex) {
      return;
    }
    this.childIndex = childIndex;
    if (this.eventService) {
      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_CHILD_INDEX_CHANGED));
    }
  };
  RowNode.prototype.setRowTop = function (rowTop) {
    this.oldRowTop = this.rowTop;
    if (this.rowTop === rowTop) {
      return;
    }
    this.rowTop = rowTop;
    if (this.eventService) {
      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_TOP_CHANGED));
    }
    this.setDisplayed(rowTop !== null);
  };
  RowNode.prototype.clearRowTopAndRowIndex = function () {
    this.oldRowTop = null;
    this.setRowTop(null);
    this.setRowIndex(null);
  };
  RowNode.prototype.setDisplayed = function (displayed) {
    if (this.displayed === displayed) {
      return;
    }
    this.displayed = displayed;
    if (this.eventService) {
      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_DISPLAYED_CHANGED));
    }
  };
  RowNode.prototype.setDragging = function (dragging) {
    if (this.dragging === dragging) {
      return;
    }
    this.dragging = dragging;
    if (this.eventService) {
      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_DRAGGING_CHANGED));
    }
  };
  RowNode.prototype.setHighlighted = function (highlighted) {
    if (highlighted === this.highlighted) {
      return;
    }
    this.highlighted = highlighted;
    if (this.eventService) {
      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_HIGHLIGHT_CHANGED));
    }
  };
  RowNode.prototype.setAllChildrenCount = function (allChildrenCount) {
    if (this.allChildrenCount === allChildrenCount) {
      return;
    }
    this.allChildrenCount = allChildrenCount;
    if (this.eventService) {
      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED));
    }
  };
  RowNode.prototype.setMaster = function (master) {
    if (this.master === master) {
      return;
    }
    // if changing AWAY from master, then unexpand, otherwise
    // next time it's shown it is expanded again
    if (this.master && !master) {
      this.expanded = false;
    }
    this.master = master;
    if (this.eventService) {
      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_MASTER_CHANGED));
    }
  };
  RowNode.prototype.setRowHeight = function (rowHeight, estimated) {
    if (estimated === void 0) {
      estimated = false;
    }
    this.rowHeight = rowHeight;
    this.rowHeightEstimated = estimated;
    if (this.eventService) {
      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_HEIGHT_CHANGED));
    }
  };
  RowNode.prototype.setRowIndex = function (rowIndex) {
    if (this.rowIndex === rowIndex) {
      return;
    }
    this.rowIndex = rowIndex;
    if (this.eventService) {
      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_INDEX_CHANGED));
    }
  };
  RowNode.prototype.setUiLevel = function (uiLevel) {
    if (this.uiLevel === uiLevel) {
      return;
    }
    this.uiLevel = uiLevel;
    if (this.eventService) {
      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_UI_LEVEL_CHANGED));
    }
  };
  RowNode.prototype.setExpanded = function (expanded) {
    if (this.expanded === expanded) {
      return;
    }
    this.expanded = expanded;
    if (this.eventService) {
      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_EXPANDED_CHANGED));
    }
    var event = assign({}, this.createGlobalRowEvent(Events.EVENT_ROW_GROUP_OPENED), {
      expanded: expanded
    });
    this.mainEventService.dispatchEvent(event);
    // when using footers we need to refresh the group row, as the aggregation
    // values jump between group and footer
    if (this.gridOptionsWrapper.isGroupIncludeFooter()) {
      this.rowRenderer.refreshCells({
        rowNodes: [this]
      });
    }
  };
  RowNode.prototype.createGlobalRowEvent = function (type) {
    return {
      type: type,
      node: this,
      data: this.data,
      rowIndex: this.rowIndex,
      rowPinned: this.rowPinned,
      context: this.gridOptionsWrapper.getContext(),
      api: this.gridOptionsWrapper.getApi(),
      columnApi: this.gridOptionsWrapper.getColumnApi()
    };
  };
  RowNode.prototype.dispatchLocalEvent = function (event) {
    if (this.eventService) {
      this.eventService.dispatchEvent(event);
    }
  };
  // we also allow editing the value via the editors. when it is done via
  // the editors, no 'cell changed' event gets fired, as it's assumed that
  // the cell knows about the change given it's in charge of the editing.
  // this method is for the client to call, so the cell listens for the change
  // event, and also flashes the cell when the change occurs.
  RowNode.prototype.setDataValue = function (colKey, newValue) {
    var column = this.columnController.getPrimaryColumn(colKey);
    var oldValue = this.valueService.getValue(column, this);
    this.valueService.setValue(this, column, newValue);
    this.dispatchCellChangedEvent(column, newValue, oldValue);
  };
  RowNode.prototype.setGroupValue = function (colKey, newValue) {
    var column = this.columnController.getGridColumn(colKey);
    if (missing(this.groupData)) {
      this.groupData = {};
    }
    var columnId = column.getColId();
    var oldValue = this.groupData[columnId];
    if (oldValue === newValue) {
      return;
    }
    this.groupData[columnId] = newValue;
    this.dispatchCellChangedEvent(column, newValue, oldValue);
  };
  // sets the data for an aggregation
  RowNode.prototype.setAggData = function (newAggData) {
    var _this = this;
    // find out all keys that could potentially change
    var colIds = getAllKeysInObjects([this.aggData, newAggData]);
    var oldAggData = this.aggData;
    this.aggData = newAggData;
    // if no event service, nobody has registered for events, so no need fire event
    if (this.eventService) {
      colIds.forEach(function (colId) {
        var column = _this.columnController.getGridColumn(colId);
        var value = _this.aggData ? _this.aggData[colId] : undefined;
        var oldValue = oldAggData ? oldAggData[colId] : undefined;
        _this.dispatchCellChangedEvent(column, value, oldValue);
      });
    }
  };
  RowNode.prototype.updateHasChildren = function () {
    // we need to return true when this.group=true, as this is used by server side row model
    // (as children are lazy loaded and stored in a cache anyway). otherwise we return true
    // if children exist.
    var newValue = this.group && !this.footer || this.childrenAfterGroup && this.childrenAfterGroup.length > 0;
    if (newValue !== this.__hasChildren) {
      this.__hasChildren = !!newValue;
      if (this.eventService) {
        this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_HAS_CHILDREN_CHANGED));
      }
    }
  };
  RowNode.prototype.hasChildren = function () {
    if (this.__hasChildren == null) {
      this.updateHasChildren();
    }
    return this.__hasChildren;
  };
  RowNode.prototype.isEmptyRowGroupNode = function () {
    return this.group && missingOrEmpty(this.childrenAfterGroup);
  };
  RowNode.prototype.dispatchCellChangedEvent = function (column, newValue, oldValue) {
    var cellChangedEvent = {
      type: RowNode.EVENT_CELL_CHANGED,
      node: this,
      column: column,
      newValue: newValue,
      oldValue: oldValue
    };
    this.dispatchLocalEvent(cellChangedEvent);
  };
  RowNode.prototype.resetQuickFilterAggregateText = function () {
    this.quickFilterAggregateText = null;
  };
  RowNode.prototype.isExpandable = function () {
    return this.hasChildren() || this.master ? true : false;
  };
  RowNode.prototype.isSelected = function () {
    // for footers, we just return what our sibling selected state is, as cannot select a footer
    if (this.footer) {
      return this.sibling.isSelected();
    }
    return this.selected;
  };
  RowNode.prototype.depthFirstSearch = function (callback) {
    if (this.childrenAfterGroup) {
      this.childrenAfterGroup.forEach(function (child) {
        return child.depthFirstSearch(callback);
      });
    }
    callback(this);
  };
  // + rowController.updateGroupsInSelection()
  // + selectionController.calculatedSelectedForAllGroupNodes()
  RowNode.prototype.calculateSelectedFromChildren = function () {
    var atLeastOneSelected = false;
    var atLeastOneDeSelected = false;
    var atLeastOneMixed = false;
    var newSelectedValue;
    if (this.childrenAfterGroup) {
      for (var i = 0; i < this.childrenAfterGroup.length; i++) {
        var child = this.childrenAfterGroup[i];
        // skip non-selectable nodes to prevent inconsistent selection values
        if (!child.selectable) {
          continue;
        }
        var childState = child.isSelected();
        switch (childState) {
          case true:
            atLeastOneSelected = true;
            break;
          case false:
            atLeastOneDeSelected = true;
            break;
          default:
            atLeastOneMixed = true;
            break;
        }
      }
    }
    if (atLeastOneMixed) {
      newSelectedValue = undefined;
    } else if (atLeastOneSelected && !atLeastOneDeSelected) {
      newSelectedValue = true;
    } else if (!atLeastOneSelected && atLeastOneDeSelected) {
      newSelectedValue = false;
    } else {
      newSelectedValue = undefined;
    }
    this.selectThisNode(newSelectedValue);
  };
  RowNode.prototype.setSelectedInitialValue = function (selected) {
    this.selected = selected;
  };
  RowNode.prototype.setSelected = function (newValue, clearSelection, suppressFinishActions) {
    if (clearSelection === void 0) {
      clearSelection = false;
    }
    if (suppressFinishActions === void 0) {
      suppressFinishActions = false;
    }
    this.setSelectedParams({
      newValue: newValue,
      clearSelection: clearSelection,
      suppressFinishActions: suppressFinishActions,
      rangeSelect: false
    });
  };
  RowNode.prototype.isRowPinned = function () {
    return this.rowPinned === Constants.PINNED_TOP || this.rowPinned === Constants.PINNED_BOTTOM;
  };
  // to make calling code more readable, this is the same method as setSelected except it takes names parameters
  RowNode.prototype.setSelectedParams = function (params) {
    var groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
    var newValue = params.newValue === true;
    var clearSelection = params.clearSelection === true;
    var suppressFinishActions = params.suppressFinishActions === true;
    var rangeSelect = params.rangeSelect === true;
    // groupSelectsFiltered only makes sense when group selects children
    var groupSelectsFiltered = groupSelectsChildren && params.groupSelectsFiltered === true;
    if (this.id === undefined) {
      console.warn('AG Grid: cannot select node until id for node is known');
      return 0;
    }
    if (this.rowPinned) {
      console.warn('AG Grid: cannot select pinned rows');
      return 0;
    }
    // if we are a footer, we don't do selection, just pass the info
    // to the sibling (the parent of the group)
    if (this.footer) {
      return this.sibling.setSelectedParams(params);
    }
    if (rangeSelect && this.selectionController.getLastSelectedNode()) {
      var newRowClicked = this.selectionController.getLastSelectedNode() !== this;
      var allowMultiSelect = this.gridOptionsWrapper.isRowSelectionMulti();
      if (newRowClicked && allowMultiSelect) {
        var nodesChanged = this.doRowRangeSelection(params.newValue);
        this.selectionController.setLastSelectedNode(this);
        return nodesChanged;
      }
    }
    var updatedCount = 0;
    // when groupSelectsFiltered, then this node may end up intermediate despite
    // trying to set it to true / false. this group will be calculated further on
    // down when we call calculatedSelectedForAllGroupNodes(). we need to skip it
    // here, otherwise the updatedCount would include it.
    var skipThisNode = groupSelectsFiltered && this.group;
    if (!skipThisNode) {
      var thisNodeWasSelected = this.selectThisNode(newValue);
      if (thisNodeWasSelected) {
        updatedCount++;
      }
    }
    if (groupSelectsChildren && this.group) {
      updatedCount += this.selectChildNodes(newValue, groupSelectsFiltered);
    }
    // clear other nodes if not doing multi select
    if (!suppressFinishActions) {
      var clearOtherNodes = newValue && (clearSelection || !this.gridOptionsWrapper.isRowSelectionMulti());
      if (clearOtherNodes) {
        updatedCount += this.selectionController.clearOtherNodes(this);
      }
      // only if we selected something, then update groups and fire events
      if (updatedCount > 0) {
        this.selectionController.updateGroupsFromChildrenSelections();
        // this is the very end of the 'action node', so we are finished all the updates,
        // include any parent / child changes that this method caused
        var event_1 = {
          type: Events.EVENT_SELECTION_CHANGED,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        this.mainEventService.dispatchEvent(event_1);
      }
      // so if user next does shift-select, we know where to start the selection from
      if (newValue) {
        this.selectionController.setLastSelectedNode(this);
      }
    }
    return updatedCount;
  };
  // selects all rows between this node and the last selected node (or the top if this is the first selection).
  // not to be mixed up with 'cell range selection' where you drag the mouse, this is row range selection, by
  // holding down 'shift'.
  RowNode.prototype.doRowRangeSelection = function (value) {
    var _this = this;
    if (value === void 0) {
      value = true;
    }
    var groupsSelectChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
    var lastSelectedNode = this.selectionController.getLastSelectedNode();
    var nodesToSelect = this.rowModel.getNodesInRangeForSelection(this, lastSelectedNode);
    var updatedCount = 0;
    nodesToSelect.forEach(function (rowNode) {
      if (rowNode.group && groupsSelectChildren || value === false && _this === rowNode) {
        return;
      }
      var nodeWasSelected = rowNode.selectThisNode(value);
      if (nodeWasSelected) {
        updatedCount++;
      }
    });
    this.selectionController.updateGroupsFromChildrenSelections();
    var event = {
      type: Events.EVENT_SELECTION_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.mainEventService.dispatchEvent(event);
    return updatedCount;
  };
  RowNode.prototype.isParentOfNode = function (potentialParent) {
    var parentNode = this.parent;
    while (parentNode) {
      if (parentNode === potentialParent) {
        return true;
      }
      parentNode = parentNode.parent;
    }
    return false;
  };
  RowNode.prototype.selectThisNode = function (newValue) {
    // we only check selectable when newValue=true (ie selecting) to allow unselecting values,
    // as selectable is dynamic, need a way to unselect rows when selectable becomes false.
    var selectionNotAllowed = !this.selectable && newValue;
    var selectionNotChanged = this.selected === newValue;
    if (selectionNotAllowed || selectionNotChanged) {
      return false;
    }
    this.selected = newValue;
    if (this.eventService) {
      this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_SELECTED));
    }
    var event = this.createGlobalRowEvent(Events.EVENT_ROW_SELECTED);
    this.mainEventService.dispatchEvent(event);
    return true;
  };
  RowNode.prototype.selectChildNodes = function (newValue, groupSelectsFiltered) {
    var children = groupSelectsFiltered ? this.childrenAfterFilter : this.childrenAfterGroup;
    if (missing(children)) {
      return 0;
    }
    var updatedCount = 0;
    for (var i = 0; i < children.length; i++) {
      updatedCount += children[i].setSelectedParams({
        newValue: newValue,
        clearSelection: false,
        suppressFinishActions: true,
        groupSelectsFiltered: groupSelectsFiltered
      });
    }
    return updatedCount;
  };
  RowNode.prototype.addEventListener = function (eventType, listener) {
    if (!this.eventService) {
      this.eventService = new EventService();
    }
    this.eventService.addEventListener(eventType, listener);
  };
  RowNode.prototype.removeEventListener = function (eventType, listener) {
    if (!this.eventService) {
      return;
    }
    this.eventService.removeEventListener(eventType, listener);
    if (this.eventService.noRegisteredListenersExist()) {
      this.eventService = null;
    }
  };
  RowNode.prototype.onMouseEnter = function () {
    this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_ENTER));
  };
  RowNode.prototype.onMouseLeave = function () {
    this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_LEAVE));
  };
  RowNode.prototype.getFirstChildOfFirstChild = function (rowGroupColumn) {
    var currentRowNode = this;
    var isCandidate = true;
    var foundFirstChildPath = false;
    var nodeToSwapIn = null;
    // if we are hiding groups, then if we are the first child, of the first child,
    // all the way up to the column we are interested in, then we show the group cell.
    while (isCandidate && !foundFirstChildPath) {
      var parentRowNode = currentRowNode.parent;
      var firstChild = exists(parentRowNode) && currentRowNode.firstChild;
      if (firstChild) {
        if (parentRowNode.rowGroupColumn === rowGroupColumn) {
          foundFirstChildPath = true;
          nodeToSwapIn = parentRowNode;
        }
      } else {
        isCandidate = false;
      }
      currentRowNode = parentRowNode;
    }
    return foundFirstChildPath ? nodeToSwapIn : null;
  };
  RowNode.prototype.isFullWidthCell = function () {
    var isFullWidthCellFunc = this.gridOptionsWrapper.getIsFullWidthCellFunc();
    return isFullWidthCellFunc ? isFullWidthCellFunc(this) : false;
  };
  RowNode.prototype.getRoute = function () {
    if (this.key == null) {
      return;
    }
    var res = [];
    var pointer = this;
    while (pointer.key != null) {
      res.push(pointer.key);
      pointer = pointer.parent;
    }
    return res.reverse();
  };
  RowNode.ID_PREFIX_ROW_GROUP = 'row-group-';
  RowNode.ID_PREFIX_TOP_PINNED = 't-';
  RowNode.ID_PREFIX_BOTTOM_PINNED = 'b-';
  RowNode.OBJECT_ID_SEQUENCE = 0;
  RowNode.EVENT_ROW_SELECTED = 'rowSelected';
  RowNode.EVENT_DATA_CHANGED = 'dataChanged';
  RowNode.EVENT_CELL_CHANGED = 'cellChanged';
  RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED = 'allChildrenCountChanged';
  RowNode.EVENT_MASTER_CHANGED = 'masterChanged';
  RowNode.EVENT_MOUSE_ENTER = 'mouseEnter';
  RowNode.EVENT_MOUSE_LEAVE = 'mouseLeave';
  RowNode.EVENT_HEIGHT_CHANGED = 'heightChanged';
  RowNode.EVENT_TOP_CHANGED = 'topChanged';
  RowNode.EVENT_DISPLAYED_CHANGED = 'displayedChanged';
  RowNode.EVENT_FIRST_CHILD_CHANGED = 'firstChildChanged';
  RowNode.EVENT_LAST_CHILD_CHANGED = 'lastChildChanged';
  RowNode.EVENT_CHILD_INDEX_CHANGED = 'childIndexChanged';
  RowNode.EVENT_ROW_INDEX_CHANGED = 'rowIndexChanged';
  RowNode.EVENT_EXPANDED_CHANGED = 'expandedChanged';
  RowNode.EVENT_HAS_CHILDREN_CHANGED = 'hasChildrenChanged';
  RowNode.EVENT_SELECTABLE_CHANGED = 'selectableChanged';
  RowNode.EVENT_UI_LEVEL_CHANGED = 'uiLevelChanged';
  RowNode.EVENT_HIGHLIGHT_CHANGED = 'rowHighlightChanged';
  RowNode.EVENT_DRAGGING_CHANGED = 'draggingChanged';
  __decorate$i([Autowired('eventService')], RowNode.prototype, "mainEventService", void 0);
  __decorate$i([Autowired('rowRenderer')], RowNode.prototype, "rowRenderer", void 0);
  __decorate$i([Autowired('gridOptionsWrapper')], RowNode.prototype, "gridOptionsWrapper", void 0);
  __decorate$i([Autowired('selectionController')], RowNode.prototype, "selectionController", void 0);
  __decorate$i([Autowired('columnController')], RowNode.prototype, "columnController", void 0);
  __decorate$i([Autowired('valueService')], RowNode.prototype, "valueService", void 0);
  __decorate$i([Autowired('rowModel')], RowNode.prototype, "rowModel", void 0);
  __decorate$i([Autowired('context')], RowNode.prototype, "context", void 0);
  __decorate$i([Autowired('valueCache')], RowNode.prototype, "valueCache", void 0);
  __decorate$i([Autowired('columnApi')], RowNode.prototype, "columnApi", void 0);
  __decorate$i([Autowired('gridApi')], RowNode.prototype, "gridApi", void 0);
  return RowNode;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$g =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$j =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CheckboxSelectionComponent = /** @class */function (_super) {
  __extends$g(CheckboxSelectionComponent, _super);
  function CheckboxSelectionComponent() {
    return _super.call(this, /* html*/"\n            <div class=\"ag-selection-checkbox\" role=\"presentation\">\n                <ag-checkbox role=\"presentation\" ref=\"eCheckbox\"></ag-checkbox>\n            </div>") || this;
  }
  CheckboxSelectionComponent.prototype.postConstruct = function () {
    this.eCheckbox.setPassive(true);
  };
  CheckboxSelectionComponent.prototype.getCheckboxId = function () {
    return this.eCheckbox.getInputElement().id;
  };
  CheckboxSelectionComponent.prototype.onDataChanged = function () {
    // when rows are loaded for the second time, this can impact the selection, as a row
    // could be loaded as already selected (if user scrolls down, and then up again).
    this.onSelectionChanged();
  };
  CheckboxSelectionComponent.prototype.onSelectableChanged = function () {
    this.showOrHideSelect();
  };
  CheckboxSelectionComponent.prototype.onSelectionChanged = function () {
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    var state = this.rowNode.isSelected();
    var stateName = state === undefined ? translate('ariaIndeterminate', 'indeterminate') : state === true ? translate('ariaChecked', 'checked') : translate('ariaUnchecked', 'unchecked');
    var ariaLabel = translate('ariaRowToggleSelection', 'Press Space to toggle row selection');
    this.eCheckbox.setValue(state, true);
    this.eCheckbox.setInputAriaLabel(ariaLabel + " (" + stateName + ")");
  };
  CheckboxSelectionComponent.prototype.onCheckedClicked = function (event) {
    var groupSelectsFiltered = this.gridOptionsWrapper.isGroupSelectsFiltered();
    var updatedCount = this.rowNode.setSelectedParams({
      newValue: false,
      rangeSelect: event.shiftKey,
      groupSelectsFiltered: groupSelectsFiltered
    });
    return updatedCount;
  };
  CheckboxSelectionComponent.prototype.onUncheckedClicked = function (event) {
    var groupSelectsFiltered = this.gridOptionsWrapper.isGroupSelectsFiltered();
    var updatedCount = this.rowNode.setSelectedParams({
      newValue: true,
      rangeSelect: event.shiftKey,
      groupSelectsFiltered: groupSelectsFiltered
    });
    return updatedCount;
  };
  CheckboxSelectionComponent.prototype.init = function (params) {
    var _this = this;
    this.rowNode = params.rowNode;
    this.column = params.column;
    this.onSelectionChanged();
    // we don't want the row clicked event to fire when selecting the checkbox, otherwise the row
    // would possibly get selected twice
    this.addGuiEventListener('click', function (event) {
      return stopPropagationForAgGrid(event);
    });
    // likewise we don't want double click on this icon to open a group
    this.addGuiEventListener('dblclick', function (event) {
      return stopPropagationForAgGrid(event);
    });
    this.addManagedListener(this.eCheckbox.getInputElement(), 'click', function (event) {
      var isSelected = _this.eCheckbox.getValue();
      var previousValue = _this.eCheckbox.getPreviousValue();
      if (previousValue === undefined) {
        // indeterminate
        var result = _this.onUncheckedClicked(event || {});
        if (result === 0) {
          _this.onCheckedClicked(event);
        }
      } else if (isSelected) {
        _this.onCheckedClicked(event);
      } else {
        _this.onUncheckedClicked(event || {});
      }
    });
    this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_SELECTED, this.onSelectionChanged.bind(this));
    this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.onDataChanged.bind(this));
    this.addManagedListener(this.rowNode, RowNode.EVENT_SELECTABLE_CHANGED, this.onSelectableChanged.bind(this));
    var isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();
    var checkboxVisibleIsDynamic = isRowSelectableFunc || this.checkboxCallbackExists();
    if (checkboxVisibleIsDynamic) {
      var showOrHideSelectListener = this.showOrHideSelect.bind(this);
      this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, showOrHideSelectListener);
      this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, showOrHideSelectListener);
      this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, showOrHideSelectListener);
      this.showOrHideSelect();
    }
    this.eCheckbox.getInputElement().setAttribute('tabindex', '-1');
  };
  CheckboxSelectionComponent.prototype.showOrHideSelect = function () {
    // if the isRowSelectable() is not provided the row node is selectable by default
    var selectable = this.rowNode.selectable;
    // checkboxSelection callback is deemed a legacy solution however we will still consider it's result.
    // If selectable, then also check the colDef callback. if not selectable, this it short circuits - no need
    // to call the colDef callback.
    if (selectable && this.checkboxCallbackExists()) {
      selectable = this.column.isCellCheckboxSelection(this.rowNode);
    }
    // show checkbox if both conditions are true
    this.setVisible(selectable);
  };
  CheckboxSelectionComponent.prototype.checkboxCallbackExists = function () {
    // column will be missing if groupUseEntireRow=true
    var colDef = this.column ? this.column.getColDef() : null;
    return !!colDef && typeof colDef.checkboxSelection === 'function';
  };
  __decorate$j([RefSelector('eCheckbox')], CheckboxSelectionComponent.prototype, "eCheckbox", void 0);
  __decorate$j([PostConstruct], CheckboxSelectionComponent.prototype, "postConstruct", null);
  return CheckboxSelectionComponent;
}(Component);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var DateComponent = {
  propertyName: 'dateComponent',
  isCellRenderer: function () {
    return false;
  }
};
var HeaderComponent = {
  propertyName: 'headerComponent',
  isCellRenderer: function () {
    return false;
  }
};
var HeaderGroupComponent = {
  propertyName: 'headerGroupComponent',
  isCellRenderer: function () {
    return false;
  }
};
var CellRendererComponent = {
  propertyName: 'cellRenderer',
  isCellRenderer: function () {
    return true;
  }
};
var PinnedRowCellRendererComponent = {
  propertyName: 'pinnedRowCellRenderer',
  isCellRenderer: function () {
    return true;
  }
};
var CellEditorComponent = {
  propertyName: 'cellEditor',
  isCellRenderer: function () {
    return false;
  }
};
var InnerRendererComponent = {
  propertyName: 'innerRenderer',
  isCellRenderer: function () {
    return true;
  }
};
var LoadingOverlayComponent = {
  propertyName: 'loadingOverlayComponent',
  isCellRenderer: function () {
    return false;
  }
};
var NoRowsOverlayComponent = {
  propertyName: 'noRowsOverlayComponent',
  isCellRenderer: function () {
    return false;
  }
};
var TooltipComponent = {
  propertyName: 'tooltipComponent',
  isCellRenderer: function () {
    return false;
  }
};
var FilterComponent = {
  propertyName: 'filter',
  isCellRenderer: function () {
    return false;
  }
};
var FloatingFilterComponent = {
  propertyName: 'floatingFilterComponent',
  isCellRenderer: function () {
    return false;
  }
};
var ToolPanelComponent = {
  propertyName: 'toolPanel',
  isCellRenderer: function () {
    return false;
  }
};
var StatusPanelComponent = {
  propertyName: 'statusPanel',
  isCellRenderer: function () {
    return false;
  }
};

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$h =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$k =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ComponentSource;
(function (ComponentSource) {
  ComponentSource[ComponentSource["DEFAULT"] = 0] = "DEFAULT";
  ComponentSource[ComponentSource["REGISTERED_BY_NAME"] = 1] = "REGISTERED_BY_NAME";
  ComponentSource[ComponentSource["HARDCODED"] = 2] = "HARDCODED";
})(ComponentSource || (ComponentSource = {}));
var UserComponentFactory = /** @class */function (_super) {
  __extends$h(UserComponentFactory, _super);
  function UserComponentFactory() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  UserComponentFactory.prototype.newDateComponent = function (params) {
    return this.createAndInitUserComponent(this.gridOptions, params, DateComponent, 'agDateInput');
  };
  UserComponentFactory.prototype.newHeaderComponent = function (params) {
    return this.createAndInitUserComponent(params.column.getColDef(), params, HeaderComponent, 'agColumnHeader');
  };
  UserComponentFactory.prototype.newHeaderGroupComponent = function (params) {
    return this.createAndInitUserComponent(params.columnGroup.getColGroupDef(), params, HeaderGroupComponent, 'agColumnGroupHeader');
  };
  UserComponentFactory.prototype.newFullWidthGroupRowInnerCellRenderer = function (params) {
    return this.createAndInitUserComponent(this.gridOptions.groupRowRendererParams, params, InnerRendererComponent, null, true);
  };
  // this one is unusual, as it can be LoadingCellRenderer, DetailCellRenderer, FullWidthCellRenderer or GroupRowRenderer.
  // so we have to pass the type in.
  UserComponentFactory.prototype.newFullWidthCellRenderer = function (params, cellRendererType, cellRendererName) {
    return this.createAndInitUserComponent(null, params, {
      propertyName: cellRendererType,
      isCellRenderer: function () {
        return true;
      }
    }, cellRendererName);
  };
  UserComponentFactory.prototype.newCellRenderer = function (target, params, isPinned) {
    if (isPinned === void 0) {
      isPinned = false;
    }
    return this.createAndInitUserComponent(target, params, isPinned ? PinnedRowCellRendererComponent : CellRendererComponent, null, true);
  };
  UserComponentFactory.prototype.newCellEditor = function (colDef, params) {
    return this.createAndInitUserComponent(colDef, params, CellEditorComponent, 'agCellEditor');
  };
  UserComponentFactory.prototype.newInnerCellRenderer = function (target, params) {
    return this.createAndInitUserComponent(target, params, InnerRendererComponent, null);
  };
  UserComponentFactory.prototype.newLoadingOverlayComponent = function (params) {
    return this.createAndInitUserComponent(this.gridOptions, params, LoadingOverlayComponent, 'agLoadingOverlay');
  };
  UserComponentFactory.prototype.newNoRowsOverlayComponent = function (params) {
    return this.createAndInitUserComponent(this.gridOptions, params, NoRowsOverlayComponent, 'agNoRowsOverlay');
  };
  UserComponentFactory.prototype.newTooltipComponent = function (params) {
    return this.createAndInitUserComponent(params.colDef, params, TooltipComponent, 'agTooltipComponent');
  };
  UserComponentFactory.prototype.newFilterComponent = function (def, params, defaultFilter) {
    return this.createAndInitUserComponent(def, params, FilterComponent, defaultFilter, false);
  };
  UserComponentFactory.prototype.newSetFilterCellRenderer = function (target, params) {
    return this.createAndInitUserComponent(target, params, CellRendererComponent, null, true);
  };
  UserComponentFactory.prototype.newFloatingFilterComponent = function (def, params, defaultFloatingFilter) {
    return this.createAndInitUserComponent(def, params, FloatingFilterComponent, defaultFloatingFilter, true);
  };
  UserComponentFactory.prototype.newToolPanelComponent = function (toolPanelDef, params) {
    return this.createAndInitUserComponent(toolPanelDef, params, ToolPanelComponent);
  };
  UserComponentFactory.prototype.newStatusPanelComponent = function (def, params) {
    return this.createAndInitUserComponent(def, params, StatusPanelComponent);
  };
  /**
   * This method creates a component given everything needed to guess what sort of component needs to be instantiated
   * It takes
   *  @param definitionObject: This is the context for which this component needs to be created, it can be gridOptions
   *      (global) or columnDef mostly.
   *  @param paramsFromGrid: Params to be passed to the component and passed by AG Grid. This will get merged with any params
   *      specified by the user in the configuration
   *  @param propertyName: The name of the property used in ag-grid as a convention to refer to the component, it can be:
   *      'floatingFilter', 'cellRenderer', is used to find if the user is specifying a custom component
   *  @param defaultComponentName: The actual name of the component to instantiate, this is usually the same as propertyName, but in
   *      some cases is not, like floatingFilter, if it is the same is not necessary to specify
   *  @param optional: Handy method to tell if this should return a component ALWAYS. if that is the case, but there is no
   *      component found, it throws an error, by default all components are MANDATORY
   */
  UserComponentFactory.prototype.createAndInitUserComponent = function (definitionObject, paramsFromGrid, componentType, defaultComponentName,
  // optional items are: FloatingFilter, CellComp (for cellRenderer)
  optional) {
    if (optional === void 0) {
      optional = false;
    }
    if (!definitionObject) {
      definitionObject = this.gridOptions;
    }
    // Create the component instance
    var componentAndParams = this.createComponentInstance(definitionObject, componentType, paramsFromGrid, defaultComponentName, optional);
    if (!componentAndParams) {
      return null;
    }
    var componentInstance = componentAndParams.componentInstance;
    // Wire the component and call the init method with the correct params
    var params = this.createFinalParams(definitionObject, componentType.propertyName, paramsFromGrid, componentAndParams.paramsFromSelector);
    this.addReactHacks(params);
    var deferredInit = this.initComponent(componentInstance, params);
    if (deferredInit == null) {
      return AgPromise.resolve(componentInstance);
    }
    return deferredInit.then(function () {
      return componentInstance;
    });
  };
  UserComponentFactory.prototype.addReactHacks = function (params) {
    // a temporary fix for AG-1574
    // AG-1715 raised to do a wider ranging refactor to improve this
    var agGridReact = this.context.getBean('agGridReact');
    if (agGridReact) {
      params.agGridReact = cloneObject(agGridReact);
    }
    // AG-1716 - directly related to AG-1574 and AG-1715
    var frameworkComponentWrapper = this.context.getBean('frameworkComponentWrapper');
    if (frameworkComponentWrapper) {
      params.frameworkComponentWrapper = frameworkComponentWrapper;
    }
  };
  /**
   * This method creates a component given everything needed to guess what sort of component needs to be instantiated
   * It takes
   *  @param clazz: The class to instantiate,
   *  @param agGridParams: Params to be passed to the component and passed by AG Grid. This will get merged with any params
   *      specified by the user in the configuration
   *  @param modifyParamsCallback: A chance to customise the params passed to the init method. It receives what the current
   *  params are and the component that init is about to get called for
   */
  UserComponentFactory.prototype.createUserComponentFromConcreteClass = function (clazz, agGridParams) {
    var internalComponent = new clazz();
    this.initComponent(internalComponent, agGridParams);
    return internalComponent;
  };
  /**
   * This method returns the underlying representation of the component to be created. ie for Javascript the
   * underlying function where we should be calling new into. In case of the frameworks, the framework class
   * object that represents the component to be created.
   *
   * This method is handy for different reasons, for example if you want to check if a component has a particular
   * method implemented without having to create the component, just by inspecting the source component
   *
   * It takes
   *  @param definitionObject: This is the context for which this component needs to be created, it can be gridOptions
   *      (global) or columnDef mostly.
   *  @param propertyName: The name of the property used in ag-grid as a convention to refer to the component, it can be:
   *      'floatingFilter', 'cellRenderer', is used to find if the user is specifying a custom component
   *  @param params: Params to be passed to the dynamic component function in case it needs to be
   *      invoked
   *  @param defaultComponentName: The name of the component to load if there is no component specified
   */
  UserComponentFactory.prototype.lookupComponentClassDef = function (definitionObject, propertyName, params, defaultComponentName) {
    if (params === void 0) {
      params = null;
    }
    /**
     * There are five things that can happen when resolving a component.
     *  a) HardcodedFwComponent: That holder[propertyName]Framework has associated a Framework native component
     *  b) HardcodedJsComponent: That holder[propertyName] has associate a JS component
     *  c) hardcodedJsFunction: That holder[propertyName] has associate a JS function
     *  d) hardcodedNameComponent: That holder[propertyName] has associate a string that represents a component to load
     *  e) That none of the three previous are specified, then we need to use the DefaultRegisteredComponent
     */
    var hardcodedNameComponent = null;
    var HardcodedJsComponent = null;
    var hardcodedJsFunction = null;
    var HardcodedFwComponent = null;
    var componentSelectorFunc = null;
    if (definitionObject != null) {
      var componentPropertyValue = definitionObject[propertyName];
      // for filters only, we allow 'true' for the component, which means default filter to be used
      var usingDefaultComponent = componentPropertyValue === true;
      if (componentPropertyValue != null && !usingDefaultComponent) {
        if (typeof componentPropertyValue === 'string') {
          hardcodedNameComponent = componentPropertyValue;
        } else if (typeof componentPropertyValue === 'boolean') ;else if (this.agComponentUtils.doesImplementIComponent(componentPropertyValue)) {
          HardcodedJsComponent = componentPropertyValue;
        } else {
          hardcodedJsFunction = componentPropertyValue;
        }
      }
      HardcodedFwComponent = definitionObject[propertyName + "Framework"];
      componentSelectorFunc = definitionObject[propertyName + "Selector"];
    }
    /**
     * Since we allow many types of flavors for specifying the components, let's make sure this is not an illegal
     * combination
     */
    if (HardcodedJsComponent && HardcodedFwComponent || hardcodedNameComponent && HardcodedFwComponent || hardcodedJsFunction && HardcodedFwComponent) {
      throw Error("ag-grid: you are trying to specify: " + propertyName + " twice as a component.");
    }
    if (HardcodedFwComponent && !this.frameworkComponentWrapper) {
      throw Error("ag-grid: you are specifying a framework component but you are not using a framework version of ag-grid for : " + propertyName);
    }
    if (componentSelectorFunc && (hardcodedNameComponent || HardcodedJsComponent || hardcodedJsFunction || HardcodedFwComponent)) {
      throw Error("ag-grid: you can't specify both, the selector and the component of ag-grid for : " + propertyName);
    }
    /**
     * At this stage we are guaranteed to either have,
     * DEPRECATED
     * - A unique HardcodedFwComponent
     * - A unique HardcodedJsComponent
     * - A unique hardcodedJsFunction
     * BY NAME- FAVOURED APPROACH
     * - A unique hardcodedNameComponent
     * - None of the previous, hence we revert to: RegisteredComponent
     */
    if (HardcodedFwComponent) {
      // console.warn(`ag-grid: Since version 12.1.0 specifying a component directly is deprecated, you should register the component by name`);
      // console.warn(`${HardcodedFwComponent}`);
      return {
        componentFromFramework: true,
        component: HardcodedFwComponent,
        source: ComponentSource.HARDCODED,
        paramsFromSelector: null
      };
    }
    if (HardcodedJsComponent) {
      // console.warn(`ag-grid: Since version 12.1.0 specifying a component directly is deprecated, you should register the component by name`);
      // console.warn(`${HardcodedJsComponent}`);
      return {
        componentFromFramework: false,
        component: HardcodedJsComponent,
        source: ComponentSource.HARDCODED,
        paramsFromSelector: null
      };
    }
    if (hardcodedJsFunction) {
      // console.warn(`ag-grid: Since version 12.1.0 specifying a function directly is deprecated, you should register the component by name`);
      // console.warn(`${hardcodedJsFunction}`);
      return this.agComponentUtils.adaptFunction(propertyName, hardcodedJsFunction, false, ComponentSource.HARDCODED);
    }
    var selectorResult = componentSelectorFunc ? componentSelectorFunc(params) : null;
    var componentNameToUse;
    if (selectorResult && selectorResult.component) {
      componentNameToUse = selectorResult.component;
    } else if (hardcodedNameComponent) {
      componentNameToUse = hardcodedNameComponent;
    } else {
      componentNameToUse = defaultComponentName;
    }
    if (!componentNameToUse) {
      return null;
    }
    var registeredCompClassDef = this.lookupFromRegisteredComponents(propertyName, componentNameToUse);
    if (!registeredCompClassDef) {
      return null;
    }
    return {
      componentFromFramework: registeredCompClassDef.componentFromFramework,
      component: registeredCompClassDef.component,
      source: registeredCompClassDef.source,
      paramsFromSelector: selectorResult ? selectorResult.params : null
    };
  };
  UserComponentFactory.prototype.lookupFromRegisteredComponents = function (propertyName, componentNameOpt) {
    var componentName = componentNameOpt != null ? componentNameOpt : propertyName;
    var registeredComponent = this.userComponentRegistry.retrieve(componentName);
    if (registeredComponent == null) {
      return null;
    }
    //If it is a FW it has to be registered as a component
    if (registeredComponent.componentFromFramework) {
      return {
        component: registeredComponent.component,
        componentFromFramework: true,
        source: ComponentSource.REGISTERED_BY_NAME,
        paramsFromSelector: null
      };
    }
    //If it is JS it may be a function or a component
    if (this.agComponentUtils.doesImplementIComponent(registeredComponent.component)) {
      return {
        component: registeredComponent.component,
        componentFromFramework: false,
        source: registeredComponent.source == RegisteredComponentSource.REGISTERED ? ComponentSource.REGISTERED_BY_NAME : ComponentSource.DEFAULT,
        paramsFromSelector: null
      };
    }
    // This is a function
    return this.agComponentUtils.adaptFunction(propertyName, registeredComponent.component, registeredComponent.componentFromFramework, registeredComponent.source == RegisteredComponentSource.REGISTERED ? ComponentSource.REGISTERED_BY_NAME : ComponentSource.DEFAULT);
  };
  /**
   * Useful to check what would be the resultant params for a given object
   *  @param definitionObject: This is the context for which this component needs to be created, it can be gridOptions
   *      (global) or columnDef mostly.
   *  @param propertyName: The name of the property used in ag-grid as a convention to refer to the component, it can be:
   *      'floatingFilter', 'cellRenderer', is used to find if the user is specifying a custom component
   *  @param paramsFromGrid: Params to be passed to the component and passed by AG Grid. This will get merged with any params
   *      specified by the user in the configuration
   * @returns {TParams} It merges the user agGridParams with the actual params specified by the user.
   */
  UserComponentFactory.prototype.createFinalParams = function (definitionObject, propertyName, paramsFromGrid, paramsFromSelector) {
    if (paramsFromSelector === void 0) {
      paramsFromSelector = null;
    }
    var params = {};
    mergeDeep(params, paramsFromGrid);
    var userParams = definitionObject ? definitionObject[propertyName + "Params"] : null;
    if (userParams != null) {
      if (typeof userParams === 'function') {
        var userParamsFromFunc = userParams(paramsFromGrid);
        mergeDeep(params, userParamsFromFunc);
      } else if (typeof userParams === 'object') {
        mergeDeep(params, userParams);
      }
    }
    mergeDeep(params, paramsFromSelector);
    return params;
  };
  UserComponentFactory.prototype.createComponentInstance = function (holder, componentType, paramsForSelector, defaultComponentName, optional) {
    var propertyName = componentType.propertyName;
    var componentToUse = this.lookupComponentClassDef(holder, propertyName, paramsForSelector, defaultComponentName);
    var missing = !componentToUse || !componentToUse.component;
    if (missing) {
      // to help the user, we print out the name they are looking for, rather than the default name.
      // i don't know why the default name was originally printed out (that doesn't help the user)
      var overrideName = holder ? holder[propertyName] : defaultComponentName;
      var nameToReport = overrideName ? overrideName : defaultComponentName;
      if (!optional) {
        console.error("Could not find component " + nameToReport + ", did you forget to configure this component?");
      }
      return null;
    }
    var componentInstance;
    if (componentToUse.componentFromFramework) {
      // Using framework component
      var FrameworkComponentRaw = componentToUse.component;
      var thisComponentConfig = this.componentMetadataProvider.retrieve(propertyName);
      componentInstance = this.frameworkComponentWrapper.wrap(FrameworkComponentRaw, thisComponentConfig.mandatoryMethodList, thisComponentConfig.optionalMethodList, componentType, defaultComponentName);
    } else {
      // Using plain JavaScript component
      componentInstance = new componentToUse.component();
    }
    return {
      componentInstance: componentInstance,
      paramsFromSelector: componentToUse.paramsFromSelector
    };
  };
  UserComponentFactory.prototype.initComponent = function (component, params) {
    this.context.createBean(component);
    if (component.init == null) {
      return;
    }
    return component.init(params);
  };
  __decorate$k([Autowired('gridOptions')], UserComponentFactory.prototype, "gridOptions", void 0);
  __decorate$k([Autowired('agComponentUtils')], UserComponentFactory.prototype, "agComponentUtils", void 0);
  __decorate$k([Autowired('componentMetadataProvider')], UserComponentFactory.prototype, "componentMetadataProvider", void 0);
  __decorate$k([Autowired('userComponentRegistry')], UserComponentFactory.prototype, "userComponentRegistry", void 0);
  __decorate$k([Optional('frameworkComponentWrapper')], UserComponentFactory.prototype, "frameworkComponentWrapper", void 0);
  UserComponentFactory = __decorate$k([Bean('userComponentFactory')], UserComponentFactory);
  return UserComponentFactory;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$i =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$l =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
(function (DragSourceType) {
  DragSourceType[DragSourceType["ToolPanel"] = 0] = "ToolPanel";
  DragSourceType[DragSourceType["HeaderCell"] = 1] = "HeaderCell";
  DragSourceType[DragSourceType["RowDrag"] = 2] = "RowDrag";
  DragSourceType[DragSourceType["ChartPanel"] = 3] = "ChartPanel";
})(exports.DragSourceType || (exports.DragSourceType = {}));
(function (VerticalDirection) {
  VerticalDirection[VerticalDirection["Up"] = 0] = "Up";
  VerticalDirection[VerticalDirection["Down"] = 1] = "Down";
})(exports.VerticalDirection || (exports.VerticalDirection = {}));
(function (HorizontalDirection) {
  HorizontalDirection[HorizontalDirection["Left"] = 0] = "Left";
  HorizontalDirection[HorizontalDirection["Right"] = 1] = "Right";
})(exports.HorizontalDirection || (exports.HorizontalDirection = {}));
var DragAndDropService = /** @class */function (_super) {
  __extends$i(DragAndDropService, _super);
  function DragAndDropService() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.dragSourceAndParamsList = [];
    _this.dropTargets = [];
    return _this;
  }
  DragAndDropService_1 = DragAndDropService;
  DragAndDropService.prototype.init = function () {
    this.ePinnedIcon = createIcon('columnMovePin', this.gridOptionsWrapper, null);
    this.eHideIcon = createIcon('columnMoveHide', this.gridOptionsWrapper, null);
    this.eMoveIcon = createIcon('columnMoveMove', this.gridOptionsWrapper, null);
    this.eLeftIcon = createIcon('columnMoveLeft', this.gridOptionsWrapper, null);
    this.eRightIcon = createIcon('columnMoveRight', this.gridOptionsWrapper, null);
    this.eGroupIcon = createIcon('columnMoveGroup', this.gridOptionsWrapper, null);
    this.eAggregateIcon = createIcon('columnMoveValue', this.gridOptionsWrapper, null);
    this.ePivotIcon = createIcon('columnMovePivot', this.gridOptionsWrapper, null);
    this.eDropNotAllowedIcon = createIcon('dropNotAllowed', this.gridOptionsWrapper, null);
  };
  DragAndDropService.prototype.addDragSource = function (dragSource, allowTouch) {
    if (allowTouch === void 0) {
      allowTouch = false;
    }
    var params = {
      eElement: dragSource.eElement,
      dragStartPixels: dragSource.dragStartPixels,
      onDragStart: this.onDragStart.bind(this, dragSource),
      onDragStop: this.onDragStop.bind(this),
      onDragging: this.onDragging.bind(this)
    };
    this.dragSourceAndParamsList.push({
      params: params,
      dragSource: dragSource
    });
    this.dragService.addDragSource(params, allowTouch);
  };
  DragAndDropService.prototype.removeDragSource = function (dragSource) {
    var sourceAndParams = find(this.dragSourceAndParamsList, function (item) {
      return item.dragSource === dragSource;
    });
    if (sourceAndParams) {
      this.dragService.removeDragSource(sourceAndParams.params);
      removeFromArray(this.dragSourceAndParamsList, sourceAndParams);
    }
  };
  DragAndDropService.prototype.clearDragSourceParamsList = function () {
    var _this = this;
    this.dragSourceAndParamsList.forEach(function (sourceAndParams) {
      return _this.dragService.removeDragSource(sourceAndParams.params);
    });
    this.dragSourceAndParamsList.length = 0;
  };
  DragAndDropService.prototype.nudge = function () {
    if (this.dragging) {
      this.onDragging(this.eventLastTime, true);
    }
  };
  DragAndDropService.prototype.onDragStart = function (dragSource, mouseEvent) {
    this.dragging = true;
    this.dragSource = dragSource;
    this.eventLastTime = mouseEvent;
    this.dragItem = this.dragSource.getDragItem();
    this.lastDropTarget = this.dragSource.dragSourceDropTarget;
    if (this.dragSource.onDragStarted) {
      this.dragSource.onDragStarted();
    }
    this.createGhost();
  };
  DragAndDropService.prototype.onDragStop = function (mouseEvent) {
    this.eventLastTime = null;
    this.dragging = false;
    if (this.dragSource.onDragStopped) {
      this.dragSource.onDragStopped();
    }
    if (this.lastDropTarget && this.lastDropTarget.onDragStop) {
      var draggingEvent = this.createDropTargetEvent(this.lastDropTarget, mouseEvent, null, null, false);
      this.lastDropTarget.onDragStop(draggingEvent);
    }
    this.lastDropTarget = null;
    this.dragItem = null;
    this.removeGhost();
  };
  DragAndDropService.prototype.onDragging = function (mouseEvent, fromNudge) {
    var _this = this;
    var hDirection = this.getHorizontalDirection(mouseEvent);
    var vDirection = this.getVerticalDirection(mouseEvent);
    this.eventLastTime = mouseEvent;
    this.positionGhost(mouseEvent);
    // check if mouseEvent intersects with any of the drop targets
    var validDropTargets = this.dropTargets.filter(function (target) {
      return _this.isMouseOnDropTarget(mouseEvent, target);
    });
    var len = validDropTargets.length;
    var dropTarget = null;
    if (len > 0) {
      dropTarget = len === 1 ? validDropTargets[0]
      // the current mouse position could intersect with more than 1 element
      // if they are nested. In that case we need to get the most specific
      // container, which is the one that does not contain any other targets.
      : validDropTargets.reduce(function (prevTarget, currTarget) {
        if (!prevTarget) {
          return currTarget;
        }
        var prevContainer = prevTarget.getContainer();
        var currContainer = currTarget.getContainer();
        if (prevContainer.contains(currContainer)) {
          return currTarget;
        }
        return prevTarget;
      });
    }
    if (dropTarget !== this.lastDropTarget) {
      this.leaveLastTargetIfExists(mouseEvent, hDirection, vDirection, fromNudge);
      this.enterDragTargetIfExists(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
      this.lastDropTarget = dropTarget;
    } else if (dropTarget && dropTarget.onDragging) {
      var draggingEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
      dropTarget.onDragging(draggingEvent);
    }
  };
  DragAndDropService.prototype.enterDragTargetIfExists = function (dropTarget, mouseEvent, hDirection, vDirection, fromNudge) {
    if (!dropTarget) {
      return;
    }
    if (dropTarget.onDragEnter) {
      var dragEnterEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
      dropTarget.onDragEnter(dragEnterEvent);
    }
    this.setGhostIcon(dropTarget.getIconName ? dropTarget.getIconName() : null);
  };
  DragAndDropService.prototype.leaveLastTargetIfExists = function (mouseEvent, hDirection, vDirection, fromNudge) {
    if (!this.lastDropTarget) {
      return;
    }
    if (this.lastDropTarget.onDragLeave) {
      var dragLeaveEvent = this.createDropTargetEvent(this.lastDropTarget, mouseEvent, hDirection, vDirection, fromNudge);
      this.lastDropTarget.onDragLeave(dragLeaveEvent);
    }
    this.setGhostIcon(null);
  };
  DragAndDropService.prototype.getAllContainersFromDropTarget = function (dropTarget) {
    var containers = [dropTarget.getContainer()];
    var secondaryContainers = dropTarget.getSecondaryContainers ? dropTarget.getSecondaryContainers() : null;
    if (secondaryContainers) {
      containers = containers.concat(secondaryContainers);
    }
    return containers;
  };
  // checks if the mouse is on the drop target. it checks eContainer and eSecondaryContainers
  DragAndDropService.prototype.isMouseOnDropTarget = function (mouseEvent, dropTarget) {
    var mouseOverTarget = false;
    this.getAllContainersFromDropTarget(dropTarget).filter(function (eContainer) {
      return eContainer;
    }) // secondary can be missing
    .forEach(function (eContainer) {
      var rect = eContainer.getBoundingClientRect();
      // if element is not visible, then width and height are zero
      if (rect.width === 0 || rect.height === 0) {
        return;
      }
      var horizontalFit = mouseEvent.clientX >= rect.left && mouseEvent.clientX < rect.right;
      var verticalFit = mouseEvent.clientY >= rect.top && mouseEvent.clientY < rect.bottom;
      if (horizontalFit && verticalFit) {
        mouseOverTarget = true;
      }
    });
    return mouseOverTarget && dropTarget.isInterestedIn(this.dragSource.type);
  };
  DragAndDropService.prototype.addDropTarget = function (dropTarget) {
    this.dropTargets.push(dropTarget);
  };
  DragAndDropService.prototype.removeDropTarget = function (dropTarget) {
    this.dropTargets = this.dropTargets.filter(function (target) {
      return target.getContainer() !== dropTarget.getContainer();
    });
  };
  DragAndDropService.prototype.hasExternalDropZones = function () {
    return this.dropTargets.some(function (zones) {
      return zones.external;
    });
  };
  DragAndDropService.prototype.findExternalZone = function (params) {
    var externalTargets = this.dropTargets.filter(function (target) {
      return target.external;
    });
    return find(externalTargets, function (zone) {
      return zone.getContainer() === params.getContainer();
    });
  };
  DragAndDropService.prototype.getHorizontalDirection = function (event) {
    var clientX = this.eventLastTime && this.eventLastTime.clientX;
    var eClientX = event.clientX;
    if (clientX === eClientX) {
      return null;
    }
    return clientX > eClientX ? exports.HorizontalDirection.Left : exports.HorizontalDirection.Right;
  };
  DragAndDropService.prototype.getVerticalDirection = function (event) {
    var clientY = this.eventLastTime && this.eventLastTime.clientY;
    var eClientY = event.clientY;
    if (clientY === eClientY) {
      return null;
    }
    return clientY > eClientY ? exports.VerticalDirection.Up : exports.VerticalDirection.Down;
  };
  DragAndDropService.prototype.createDropTargetEvent = function (dropTarget, event, hDirection, vDirection, fromNudge) {
    // localise x and y to the target
    var dropZoneTarget = dropTarget.getContainer();
    var rect = dropZoneTarget.getBoundingClientRect();
    var _a = this,
      api = _a.gridApi,
      columnApi = _a.columnApi,
      dragItem = _a.dragItem,
      dragSource = _a.dragSource;
    var x = event.clientX - rect.left;
    var y = event.clientY - rect.top;
    return {
      event: event,
      x: x,
      y: y,
      vDirection: vDirection,
      hDirection: hDirection,
      dragSource: dragSource,
      fromNudge: fromNudge,
      dragItem: dragItem,
      api: api,
      columnApi: columnApi,
      dropZoneTarget: dropZoneTarget
    };
  };
  DragAndDropService.prototype.positionGhost = function (event) {
    var ghost = this.eGhost;
    if (!ghost) {
      return;
    }
    var ghostRect = ghost.getBoundingClientRect();
    var ghostHeight = ghostRect.height;
    // for some reason, without the '-2', it still overlapped by 1 or 2 pixels, which
    // then brought in scrollbars to the browser. no idea why, but putting in -2 here
    // works around it which is good enough for me.
    var browserWidth = getBodyWidth() - 2;
    var browserHeight = getBodyHeight() - 2;
    var top = event.pageY - ghostHeight / 2;
    var left = event.pageX - 10;
    var usrDocument = this.gridOptionsWrapper.getDocument();
    var windowScrollY = window.pageYOffset || usrDocument.documentElement.scrollTop;
    var windowScrollX = window.pageXOffset || usrDocument.documentElement.scrollLeft;
    // check ghost is not positioned outside of the browser
    if (browserWidth > 0 && left + ghost.clientWidth > browserWidth + windowScrollX) {
      left = browserWidth + windowScrollX - ghost.clientWidth;
    }
    if (left < 0) {
      left = 0;
    }
    if (browserHeight > 0 && top + ghost.clientHeight > browserHeight + windowScrollY) {
      top = browserHeight + windowScrollY - ghost.clientHeight;
    }
    if (top < 0) {
      top = 0;
    }
    ghost.style.left = left + "px";
    ghost.style.top = top + "px";
  };
  DragAndDropService.prototype.removeGhost = function () {
    if (this.eGhost && this.eGhostParent) {
      this.eGhostParent.removeChild(this.eGhost);
    }
    this.eGhost = null;
  };
  DragAndDropService.prototype.createGhost = function () {
    this.eGhost = loadTemplate(DragAndDropService_1.GHOST_TEMPLATE);
    var theme = this.environment.getTheme().theme;
    if (theme) {
      addCssClass(this.eGhost, theme);
    }
    this.eGhostIcon = this.eGhost.querySelector('.ag-dnd-ghost-icon');
    this.setGhostIcon(null);
    var eText = this.eGhost.querySelector('.ag-dnd-ghost-label');
    var dragItemName = this.dragSource.dragItemName;
    if (isFunction(dragItemName)) {
      dragItemName = dragItemName();
    }
    eText.innerHTML = escapeString(dragItemName) || '';
    this.eGhost.style.height = '25px';
    this.eGhost.style.top = '20px';
    this.eGhost.style.left = '20px';
    var usrDocument = this.gridOptionsWrapper.getDocument();
    var targetEl = usrDocument.fullscreenElement || usrDocument.querySelector('body');
    this.eGhostParent = targetEl;
    if (!this.eGhostParent) {
      console.warn('AG Grid: could not find document body, it is needed for dragging columns');
    } else {
      this.eGhostParent.appendChild(this.eGhost);
    }
  };
  DragAndDropService.prototype.setGhostIcon = function (iconName, shake) {
    if (shake === void 0) {
      shake = false;
    }
    clearElement(this.eGhostIcon);
    var eIcon = null;
    if (!iconName) {
      iconName = this.dragSource.defaultIconName || DragAndDropService_1.ICON_NOT_ALLOWED;
    }
    switch (iconName) {
      case DragAndDropService_1.ICON_PINNED:
        eIcon = this.ePinnedIcon;
        break;
      case DragAndDropService_1.ICON_MOVE:
        eIcon = this.eMoveIcon;
        break;
      case DragAndDropService_1.ICON_LEFT:
        eIcon = this.eLeftIcon;
        break;
      case DragAndDropService_1.ICON_RIGHT:
        eIcon = this.eRightIcon;
        break;
      case DragAndDropService_1.ICON_GROUP:
        eIcon = this.eGroupIcon;
        break;
      case DragAndDropService_1.ICON_AGGREGATE:
        eIcon = this.eAggregateIcon;
        break;
      case DragAndDropService_1.ICON_PIVOT:
        eIcon = this.ePivotIcon;
        break;
      case DragAndDropService_1.ICON_NOT_ALLOWED:
        eIcon = this.eDropNotAllowedIcon;
        break;
      case DragAndDropService_1.ICON_HIDE:
        eIcon = this.eHideIcon;
        break;
    }
    addOrRemoveCssClass(this.eGhostIcon, 'ag-shake-left-to-right', shake);
    if (eIcon === this.eHideIcon && this.gridOptionsWrapper.isSuppressDragLeaveHidesColumns()) {
      return;
    }
    if (eIcon) {
      this.eGhostIcon.appendChild(eIcon);
    }
  };
  var DragAndDropService_1;
  DragAndDropService.ICON_PINNED = 'pinned';
  DragAndDropService.ICON_MOVE = 'move';
  DragAndDropService.ICON_LEFT = 'left';
  DragAndDropService.ICON_RIGHT = 'right';
  DragAndDropService.ICON_GROUP = 'group';
  DragAndDropService.ICON_AGGREGATE = 'aggregate';
  DragAndDropService.ICON_PIVOT = 'pivot';
  DragAndDropService.ICON_NOT_ALLOWED = 'notAllowed';
  DragAndDropService.ICON_HIDE = 'hide';
  DragAndDropService.GHOST_TEMPLATE = "<div class=\"ag-dnd-ghost ag-unselectable\">\n            <span class=\"ag-dnd-ghost-icon ag-shake-left-to-right\"></span>\n            <div class=\"ag-dnd-ghost-label\"></div>\n        </div>";
  __decorate$l([Autowired('dragService')], DragAndDropService.prototype, "dragService", void 0);
  __decorate$l([Autowired('environment')], DragAndDropService.prototype, "environment", void 0);
  __decorate$l([Autowired('columnApi')], DragAndDropService.prototype, "columnApi", void 0);
  __decorate$l([Autowired('gridApi')], DragAndDropService.prototype, "gridApi", void 0);
  __decorate$l([PostConstruct], DragAndDropService.prototype, "init", null);
  __decorate$l([PreDestroy], DragAndDropService.prototype, "clearDragSourceParamsList", null);
  DragAndDropService = DragAndDropService_1 = __decorate$l([Bean('dragAndDropService')], DragAndDropService);
  return DragAndDropService;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$j =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$m =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RowDragComp = /** @class */function (_super) {
  __extends$j(RowDragComp, _super);
  function RowDragComp(cellValueFn, rowNode, column, customGui, dragStartPixels) {
    var _this = _super.call(this) || this;
    _this.cellValueFn = cellValueFn;
    _this.rowNode = rowNode;
    _this.column = column;
    _this.customGui = customGui;
    _this.dragStartPixels = dragStartPixels;
    _this.isCustomGui = false;
    _this.dragSource = null;
    return _this;
  }
  RowDragComp.prototype.postConstruct = function () {
    if (!this.customGui) {
      this.setTemplate( /* html */"<div class=\"ag-drag-handle ag-row-drag\" aria-hidden=\"true\"></div>");
      var eGui = this.getGui();
      eGui.appendChild(createIconNoSpan('rowDrag', this.beans.gridOptionsWrapper, null));
      this.addDragSource();
    } else {
      this.isCustomGui = true;
      this.setDragElement(this.customGui, this.dragStartPixels);
    }
    this.checkCompatibility();
    var strategy = this.beans.gridOptionsWrapper.isRowDragManaged() ? new ManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column) : new NonManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column);
    this.createManagedBean(strategy, this.beans.context);
  };
  RowDragComp.prototype.setDragElement = function (dragElement, dragStartPixels) {
    this.setTemplateFromElement(dragElement);
    this.addDragSource(dragStartPixels);
  };
  RowDragComp.prototype.getSelectedCount = function () {
    var multiRowEnabled = this.beans.gridOptionsWrapper.isEnableMultiRowDragging();
    if (!multiRowEnabled) {
      return 1;
    }
    var selection = this.beans.selectionController.getSelectedNodes();
    return selection.indexOf(this.rowNode) !== -1 ? selection.length : 1;
  };
  // returns true if all compatibility items work out
  RowDragComp.prototype.checkCompatibility = function () {
    var managed = this.beans.gridOptionsWrapper.isRowDragManaged();
    var treeData = this.beans.gridOptionsWrapper.isTreeData();
    if (treeData && managed) {
      doOnce(function () {
        return console.warn('AG Grid: If using row drag with tree data, you cannot have rowDragManaged=true');
      }, 'RowDragComp.managedAndTreeData');
    }
  };
  RowDragComp.prototype.addDragSource = function (dragStartPixels) {
    var _this = this;
    if (dragStartPixels === void 0) {
      dragStartPixels = 4;
    }
    // if this is changing the drag element, delete the previous dragSource
    if (this.dragSource) {
      this.removeDragSource();
    }
    var dragItem = {
      rowNode: this.rowNode,
      columns: this.column ? [this.column] : undefined,
      defaultTextValue: this.cellValueFn()
    };
    var rowDragText = this.column && this.column.getColDef().rowDragText;
    this.dragSource = {
      type: exports.DragSourceType.RowDrag,
      eElement: this.getGui(),
      dragItemName: function () {
        var dragItemCount = _this.getSelectedCount();
        if (rowDragText) {
          return rowDragText(dragItem, dragItemCount);
        }
        return dragItemCount === 1 ? _this.cellValueFn() : dragItemCount + " rows";
      },
      getDragItem: function () {
        return dragItem;
      },
      dragStartPixels: dragStartPixels,
      dragSourceDomDataKey: this.beans.gridOptionsWrapper.getDomDataKey()
    };
    this.beans.dragAndDropService.addDragSource(this.dragSource, true);
  };
  RowDragComp.prototype.removeDragSource = function () {
    if (this.dragSource) {
      this.beans.dragAndDropService.removeDragSource(this.dragSource);
    }
    this.dragSource = null;
  };
  __decorate$m([Autowired('beans')], RowDragComp.prototype, "beans", void 0);
  __decorate$m([PostConstruct], RowDragComp.prototype, "postConstruct", null);
  __decorate$m([PreDestroy], RowDragComp.prototype, "removeDragSource", null);
  return RowDragComp;
}(Component);
var VisibilityStrategy = /** @class */function (_super) {
  __extends$j(VisibilityStrategy, _super);
  function VisibilityStrategy(parent, rowNode, column) {
    var _this = _super.call(this) || this;
    _this.parent = parent;
    _this.column = column;
    _this.rowNode = rowNode;
    return _this;
  }
  VisibilityStrategy.prototype.setDisplayedOrVisible = function (neverDisplayed) {
    if (neverDisplayed) {
      this.parent.setDisplayed(false);
    } else {
      var shown = true;
      var isShownSometimes = false;
      if (this.column) {
        shown = this.column.isRowDrag(this.rowNode) || this.parent.isCustomGui;
        isShownSometimes = isFunction(this.column.getColDef().rowDrag);
      }
      // if shown sometimes, them some rows can have drag handle while other don't,
      // so we use setVisible to keep the handles horizontally aligned (as setVisible
      // keeps the empty space, whereas setDisplayed looses the space)
      if (isShownSometimes) {
        this.parent.setDisplayed(true);
        this.parent.setVisible(shown);
      } else {
        this.parent.setDisplayed(shown);
      }
    }
  };
  return VisibilityStrategy;
}(BeanStub);
// when non managed, the visibility depends on suppressRowDrag property only
var NonManagedVisibilityStrategy = /** @class */function (_super) {
  __extends$j(NonManagedVisibilityStrategy, _super);
  function NonManagedVisibilityStrategy(parent, beans, rowNode, column) {
    var _this = _super.call(this, parent, rowNode, column) || this;
    _this.beans = beans;
    return _this;
  }
  NonManagedVisibilityStrategy.prototype.postConstruct = function () {
    this.addManagedListener(this.beans.gridOptionsWrapper, 'suppressRowDrag', this.onSuppressRowDrag.bind(this));
    // in case data changes, then we need to update visibility of drag item
    this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));
    this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));
    this.workOutVisibility();
  };
  NonManagedVisibilityStrategy.prototype.onSuppressRowDrag = function () {
    this.workOutVisibility();
  };
  NonManagedVisibilityStrategy.prototype.workOutVisibility = function () {
    // only show the drag if both sort and filter are not present
    var neverDisplayed = this.beans.gridOptionsWrapper.isSuppressRowDrag();
    this.setDisplayedOrVisible(neverDisplayed);
  };
  __decorate$m([PostConstruct], NonManagedVisibilityStrategy.prototype, "postConstruct", null);
  return NonManagedVisibilityStrategy;
}(VisibilityStrategy);
// when managed, the visibility depends on sort, filter and row group, as well as suppressRowDrag property
var ManagedVisibilityStrategy = /** @class */function (_super) {
  __extends$j(ManagedVisibilityStrategy, _super);
  function ManagedVisibilityStrategy(parent, beans, rowNode, column) {
    var _this = _super.call(this, parent, rowNode, column) || this;
    _this.beans = beans;
    return _this;
  }
  ManagedVisibilityStrategy.prototype.postConstruct = function () {
    // we do not show the component if sort, filter or grouping is active
    this.addManagedListener(this.beans.eventService, Events.EVENT_SORT_CHANGED, this.workOutVisibility.bind(this));
    this.addManagedListener(this.beans.eventService, Events.EVENT_FILTER_CHANGED, this.workOutVisibility.bind(this));
    this.addManagedListener(this.beans.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.workOutVisibility.bind(this));
    // in case data changes, then we need to update visibility of drag item
    this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));
    this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));
    this.addManagedListener(this.beans.gridOptionsWrapper, 'suppressRowDrag', this.onSuppressRowDrag.bind(this));
    this.workOutVisibility();
  };
  ManagedVisibilityStrategy.prototype.onSuppressRowDrag = function () {
    this.workOutVisibility();
  };
  ManagedVisibilityStrategy.prototype.workOutVisibility = function () {
    // only show the drag if both sort and filter are not present
    var gridBodyCon = this.beans.controllersService.getGridBodyController();
    var rowDragFeature = gridBodyCon.getRowDragFeature();
    var shouldPreventRowMove = rowDragFeature && rowDragFeature.shouldPreventRowMove();
    var suppressRowDrag = this.beans.gridOptionsWrapper.isSuppressRowDrag();
    var hasExternalDropZones = this.beans.dragAndDropService.hasExternalDropZones();
    var neverDisplayed = shouldPreventRowMove && !hasExternalDropZones || suppressRowDrag;
    this.setDisplayedOrVisible(neverDisplayed);
  };
  __decorate$m([PostConstruct], ManagedVisibilityStrategy.prototype, "postConstruct", null);
  return ManagedVisibilityStrategy;
}(VisibilityStrategy);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$k =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$n =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var GroupCellRenderer = /** @class */function (_super) {
  __extends$k(GroupCellRenderer, _super);
  function GroupCellRenderer() {
    return _super.call(this, GroupCellRenderer.TEMPLATE) || this;
  }
  GroupCellRenderer.prototype.isTopLevelFooter = function () {
    if (!this.gridOptionsWrapper.isGroupIncludeTotalFooter()) {
      return false;
    }
    if (this.params.value != null || this.params.node.level != -1) {
      return false;
    }
    // at this point, we know it's the root node and there is no value present, so it's a footer cell.
    // the only thing to work out is if we are displaying groups  across multiple
    // columns (groupMultiAutoColumn=true), we only want 'total' to appear in the first column.
    var colDef = this.params.colDef;
    var doingFullWidth = colDef == null;
    if (doingFullWidth) {
      return true;
    }
    if (colDef.showRowGroup === true) {
      return true;
    }
    var rowGroupCols = this.columnController.getRowGroupColumns();
    // this is a sanity check, rowGroupCols should always be present
    if (!rowGroupCols || rowGroupCols.length === 0) {
      return true;
    }
    var firstRowGroupCol = rowGroupCols[0];
    return firstRowGroupCol.getId() === colDef.showRowGroup;
  };
  GroupCellRenderer.prototype.init = function (params) {
    this.params = params;
    var topLevelFooter = this.isTopLevelFooter();
    var embeddedRowMismatch = this.isEmbeddedRowMismatch();
    // This allows for empty strings to appear as groups since
    // it will only return for null or undefined.
    var nullValue = params.value == null;
    var skipCell = false;
    // if the groupCellRenderer is inside of a footer and groupHideOpenParents is true
    // we should only display the groupCellRenderer if the current column is the rowGroupedColumn
    if (this.gridOptionsWrapper.isGroupIncludeFooter() && this.gridOptionsWrapper.isGroupHideOpenParents()) {
      var node = params.node;
      if (node.footer) {
        var showRowGroup = params.colDef && params.colDef.showRowGroup;
        var rowGroupColumnId = node.rowGroupColumn && node.rowGroupColumn.getColId();
        skipCell = showRowGroup !== rowGroupColumnId;
      }
    }
    this.cellIsBlank = topLevelFooter ? false : embeddedRowMismatch || nullValue || skipCell;
    if (this.cellIsBlank) {
      return;
    }
    this.setupDragOpenParents();
    this.addFullWidthRowDraggerIfNeeded();
    this.addExpandAndContract();
    this.addCheckboxIfNeeded();
    this.addValueElement();
    this.setupIndent();
  };
  // if we are doing embedded full width rows, we only show the renderer when
  // in the body, or if pinning in the pinned section, or if pinning and RTL,
  // in the right section. otherwise we would have the cell repeated in each section.
  GroupCellRenderer.prototype.isEmbeddedRowMismatch = function () {
    if (!this.params.fullWidth || !this.gridOptionsWrapper.isEmbedFullWidthRows()) {
      return false;
    }
    var pinnedLeftCell = this.params.pinned === Constants.PINNED_LEFT;
    var pinnedRightCell = this.params.pinned === Constants.PINNED_RIGHT;
    var bodyCell = !pinnedLeftCell && !pinnedRightCell;
    if (this.gridOptionsWrapper.isEnableRtl()) {
      if (this.columnController.isPinningLeft()) {
        return !pinnedRightCell;
      }
      return !bodyCell;
    }
    if (this.columnController.isPinningLeft()) {
      return !pinnedLeftCell;
    }
    return !bodyCell;
  };
  GroupCellRenderer.prototype.setIndent = function () {
    if (this.gridOptionsWrapper.isGroupHideOpenParents()) {
      return;
    }
    var params = this.params;
    var rowNode = params.node;
    // if we are only showing one group column, we don't want to be indenting based on level
    var fullWithRow = !!params.colDef;
    var manyDimensionThisColumn = !fullWithRow || params.colDef.showRowGroup === true;
    var paddingCount = manyDimensionThisColumn ? rowNode.uiLevel : 0;
    var userProvidedPaddingPixelsTheDeprecatedWay = params.padding >= 0;
    if (userProvidedPaddingPixelsTheDeprecatedWay) {
      this.setPaddingDeprecatedWay(paddingCount, params.padding);
      return;
    }
    if (this.indentClass) {
      this.removeCssClass(this.indentClass);
    }
    this.indentClass = 'ag-row-group-indent-' + paddingCount;
    this.addCssClass(this.indentClass);
  };
  GroupCellRenderer.prototype.setPaddingDeprecatedWay = function (paddingCount, padding) {
    doOnce(function () {
      return console.warn('AG Grid: since v14.2, configuring padding for groupCellRenderer should be done with Sass variables and themes. Please see the AG Grid documentation page for Themes, in particular the property $row-group-indent-size.');
    }, 'groupCellRenderer->doDeprecatedWay');
    var paddingPx = paddingCount * padding;
    var eGui = this.getGui();
    var paddingSide = this.gridOptionsWrapper.isEnableRtl() ? 'paddingRight' : 'paddingLeft';
    eGui.style[paddingSide] = paddingPx + "px";
  };
  GroupCellRenderer.prototype.setupIndent = function () {
    // only do this if an indent - as this overwrites the padding that
    // the theme set, which will make things look 'not aligned' for the
    // first group level.
    var node = this.params.node;
    var suppressPadding = this.params.suppressPadding;
    if (!suppressPadding) {
      this.addManagedListener(node, RowNode.EVENT_UI_LEVEL_CHANGED, this.setIndent.bind(this));
      this.setIndent();
    }
  };
  GroupCellRenderer.prototype.addValueElement = function () {
    if (this.displayedGroup.footer) {
      this.addFooterValue();
    } else {
      this.addGroupValue();
      this.addChildCount();
    }
  };
  GroupCellRenderer.prototype.addFooterValue = function () {
    var footerValueGetter = this.params.footerValueGetter;
    var footerValue;
    if (footerValueGetter) {
      // params is same as we were given, except we set the value as the item to display
      var paramsClone = cloneObject(this.params);
      paramsClone.value = this.params.value;
      if (typeof footerValueGetter === 'function') {
        footerValue = footerValueGetter(paramsClone);
      } else if (typeof footerValueGetter === 'string') {
        footerValue = this.expressionService.evaluate(footerValueGetter, paramsClone);
      } else {
        console.warn('AG Grid: footerValueGetter should be either a function or a string (expression)');
      }
    } else {
      footerValue = 'Total ' + (this.params.value != null ? this.params.value : '');
    }
    this.eValue.innerHTML = footerValue;
  };
  GroupCellRenderer.prototype.addGroupValue = function () {
    var _this = this;
    var params = this.params;
    var rowGroupColumn = this.displayedGroup.rowGroupColumn;
    // we try and use the cellRenderer of the column used for the grouping if we can
    var columnToUse = rowGroupColumn ? rowGroupColumn : params.column;
    var groupName = this.params.value;
    var valueFormatted = columnToUse ? this.valueFormatterService.formatValue(columnToUse, params.node, params.scope, groupName) : null;
    params.valueFormatted = valueFormatted;
    var rendererPromise;
    rendererPromise = params.fullWidth ? this.useFullWidth(params) : this.useInnerRenderer(this.params.colDef.cellRendererParams, columnToUse.getColDef(), params);
    // retain a reference to the created renderer - we'll use this later for cleanup (in destroy)
    if (rendererPromise) {
      rendererPromise.then(function (value) {
        _this.innerCellRenderer = value;
      });
    }
  };
  GroupCellRenderer.prototype.useInnerRenderer = function (groupCellRendererParams, groupedColumnDef,
  // the column this group row is for, eg 'Country'
  params) {
    var _this = this;
    // when grouping, the normal case is we use the cell renderer of the grouped column. eg if grouping by country
    // and then rating, we will use the country cell renderer for each country group row and likewise the rating
    // cell renderer for each rating group row.
    //
    // however if the user has innerCellRenderer defined, this gets preference and we don't use cell renderers
    // of the grouped columns.
    //
    // so we check and use in the following order:
    //
    // 1) thisColDef.cellRendererParams.innerRenderer of the column showing the groups (eg auto group column)
    // 2) groupedColDef.cellRenderer of the grouped column
    // 3) groupedColDef.cellRendererParams.innerRenderer
    var cellRendererPromise = null;
    // we check if cell renderer provided for the group cell renderer, eg colDef.cellRendererParams.innerRenderer
    var groupInnerRendererClass = this.userComponentFactory.lookupComponentClassDef(groupCellRendererParams, "innerRenderer");
    if (groupInnerRendererClass && groupInnerRendererClass.component != null && groupInnerRendererClass.source != ComponentSource.DEFAULT) {
      // use the renderer defined in cellRendererParams.innerRenderer
      cellRendererPromise = this.userComponentFactory.newInnerCellRenderer(groupCellRendererParams, params);
    } else {
      // otherwise see if we can use the cellRenderer of the column we are grouping by
      var groupColumnRendererClass = this.userComponentFactory.lookupComponentClassDef(groupedColumnDef, "cellRenderer");
      if (groupColumnRendererClass && groupColumnRendererClass.source != ComponentSource.DEFAULT) {
        // Only if the original column is using a specific renderer, it it is a using a DEFAULT one ignore it
        cellRendererPromise = this.userComponentFactory.newCellRenderer(groupedColumnDef, params);
      } else if (groupColumnRendererClass && groupColumnRendererClass.source == ComponentSource.DEFAULT && get(groupedColumnDef, 'cellRendererParams.innerRenderer', null)) {
        // EDGE CASE - THIS COMES FROM A COLUMN WHICH HAS BEEN GROUPED DYNAMICALLY, THAT HAS AS RENDERER 'group'
        // AND HAS A INNER CELL RENDERER
        cellRendererPromise = this.userComponentFactory.newInnerCellRenderer(groupedColumnDef.cellRendererParams, params);
      } else {
        // This forces the retrieval of the default plain cellRenderer that just renders the values.
        cellRendererPromise = this.userComponentFactory.newCellRenderer({}, params);
      }
    }
    if (cellRendererPromise != null) {
      cellRendererPromise.then(function (rendererToUse) {
        if (rendererToUse == null) {
          _this.eValue.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
          return;
        }
        bindCellRendererToHtmlElement(cellRendererPromise, _this.eValue);
      });
    } else {
      this.eValue.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
    }
    return cellRendererPromise;
  };
  GroupCellRenderer.prototype.useFullWidth = function (params) {
    var cellRendererPromise = this.userComponentFactory.newFullWidthGroupRowInnerCellRenderer(params);
    if (cellRendererPromise != null) {
      bindCellRendererToHtmlElement(cellRendererPromise, this.eValue);
    } else {
      this.eValue.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
    }
    return cellRendererPromise;
  };
  GroupCellRenderer.prototype.addFullWidthRowDraggerIfNeeded = function () {
    var _this = this;
    if (!this.params.fullWidth || !this.params.rowDrag) {
      return;
    }
    var rowDragComp = new RowDragComp(function () {
      return _this.params.value;
    }, this.params.node);
    this.createManagedBean(rowDragComp, this.context);
    this.getGui().insertAdjacentElement('afterbegin', rowDragComp.getGui());
  };
  GroupCellRenderer.prototype.addChildCount = function () {
    // only include the child count if it's included, eg if user doing custom aggregation,
    // then this could be left out, or set to -1, ie no child count
    if (this.params.suppressCount) {
      return;
    }
    this.addManagedListener(this.displayedGroup, RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, this.updateChildCount.bind(this));
    // filtering changes the child count, so need to cater for it
    this.updateChildCount();
  };
  GroupCellRenderer.prototype.updateChildCount = function () {
    var allChildrenCount = this.displayedGroup.allChildrenCount;
    var showingGroupForThisNode = this.isShowRowGroupForThisRow();
    var showCount = showingGroupForThisNode && allChildrenCount != null && allChildrenCount >= 0;
    var countString = showCount ? "(" + allChildrenCount + ")" : "";
    this.eChildCount.innerHTML = countString;
  };
  GroupCellRenderer.prototype.isUserWantsSelected = function () {
    var paramsCheckbox = this.params.checkbox;
    if (typeof paramsCheckbox === 'function') {
      return paramsCheckbox(this.params);
    }
    return paramsCheckbox === true;
  };
  GroupCellRenderer.prototype.addCheckboxIfNeeded = function () {
    var _this = this;
    var rowNode = this.displayedGroup;
    var checkboxNeeded = this.isUserWantsSelected() &&
    // footers cannot be selected
    !rowNode.footer &&
    // pinned rows cannot be selected
    !rowNode.rowPinned &&
    // details cannot be selected
    !rowNode.detail;
    if (checkboxNeeded) {
      var cbSelectionComponent_1 = new CheckboxSelectionComponent();
      this.getContext().createBean(cbSelectionComponent_1);
      cbSelectionComponent_1.init({
        rowNode: rowNode,
        column: this.params.column
      });
      this.eCheckbox.appendChild(cbSelectionComponent_1.getGui());
      this.addDestroyFunc(function () {
        return _this.getContext().destroyBean(cbSelectionComponent_1);
      });
    }
    addOrRemoveCssClass(this.eCheckbox, 'ag-invisible', !checkboxNeeded);
  };
  GroupCellRenderer.prototype.addExpandAndContract = function () {
    var params = this.params;
    var eGroupCell = params.eGridCell;
    var eExpandedIcon = createIconNoSpan('groupExpanded', this.gridOptionsWrapper, null);
    var eContractedIcon = createIconNoSpan('groupContracted', this.gridOptionsWrapper, null);
    setAriaExpanded(eGroupCell, !!params.node.expanded);
    if (eExpandedIcon) {
      this.eExpanded.appendChild(eExpandedIcon);
    }
    if (eContractedIcon) {
      this.eContracted.appendChild(eContractedIcon);
    }
    this.addManagedListener(this.eExpanded, 'click', this.onExpandClicked.bind(this));
    this.addManagedListener(this.eContracted, 'click', this.onExpandClicked.bind(this));
    // expand / contract as the user hits enter
    this.addManagedListener(eGroupCell, 'keydown', this.onKeyDown.bind(this));
    this.addManagedListener(params.node, RowNode.EVENT_EXPANDED_CHANGED, this.showExpandAndContractIcons.bind(this));
    this.showExpandAndContractIcons();
    // because we don't show the expand / contract when there are no children, we need to check every time
    // the number of children change.
    var expandableChangedListener = this.onRowNodeIsExpandableChanged.bind(this);
    this.addManagedListener(this.displayedGroup, RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, expandableChangedListener);
    this.addManagedListener(this.displayedGroup, RowNode.EVENT_MASTER_CHANGED, expandableChangedListener);
    this.addManagedListener(this.displayedGroup, RowNode.EVENT_HAS_CHILDREN_CHANGED, expandableChangedListener);
    // if editing groups, then double click is to start editing
    if (!this.gridOptionsWrapper.isEnableGroupEdit() && this.isExpandable() && !params.suppressDoubleClickExpand) {
      this.addManagedListener(eGroupCell, 'dblclick', this.onCellDblClicked.bind(this));
    }
  };
  GroupCellRenderer.prototype.onRowNodeIsExpandableChanged = function () {
    // maybe if no children now, we should hide the expand / contract icons
    this.showExpandAndContractIcons();
    // if we have no children, this impacts the indent
    this.setIndent();
  };
  GroupCellRenderer.prototype.onKeyDown = function (event) {
    var enterKeyPressed = isKeyPressed(event, KeyCode.ENTER);
    if (!enterKeyPressed || this.params.suppressEnterExpand) {
      return;
    }
    var cellEditable = this.params.column && this.params.column.isCellEditable(this.params.node);
    if (cellEditable) {
      return;
    }
    this.onExpandOrContract();
  };
  GroupCellRenderer.prototype.setupDragOpenParents = function () {
    var column = this.params.column;
    var rowNode = this.params.node;
    if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {
      this.draggedFromHideOpenParents = false;
    } else if (!rowNode.hasChildren()) {
      // if we are here, and we are not a group, then we must of been dragged down,
      // as otherwise the cell would be blank, and if cell is blank, this method is never called.
      this.draggedFromHideOpenParents = true;
    } else {
      var rowGroupColumn = rowNode.rowGroupColumn;
      if (rowGroupColumn) {
        // if the displayGroup column for this col matches the rowGroupColumn we grouped by for this node,
        // then nothing was dragged down
        this.draggedFromHideOpenParents = !column.isRowGroupDisplayed(rowGroupColumn.getId());
      } else {
        // the only way we can end up here (no column, but a group) is if we are at the root node,
        // which only happens when 'groupIncludeTotalFooter' is true. here, we are never dragging
        this.draggedFromHideOpenParents = false;
      }
    }
    if (this.draggedFromHideOpenParents) {
      var pointer = rowNode.parent;
      while (true) {
        if (missing(pointer)) {
          break;
        }
        if (pointer.rowGroupColumn && column.isRowGroupDisplayed(pointer.rowGroupColumn.getId())) {
          this.displayedGroup = pointer;
          break;
        }
        pointer = pointer.parent;
      }
    }
    // if we didn't find a displayed group, set it to the row node
    if (missing(this.displayedGroup)) {
      this.displayedGroup = rowNode;
    }
  };
  GroupCellRenderer.prototype.onExpandClicked = function (mouseEvent) {
    if (isStopPropagationForAgGrid(mouseEvent)) {
      return;
    }
    // so if we expand a node, it does not also get selected.
    stopPropagationForAgGrid(mouseEvent);
    this.onExpandOrContract();
  };
  GroupCellRenderer.prototype.onCellDblClicked = function (mouseEvent) {
    if (isStopPropagationForAgGrid(mouseEvent)) {
      return;
    }
    // we want to avoid acting on double click events on the expand / contract icon,
    // as that icons already has expand / collapse functionality on it. otherwise if
    // the icon was double clicked, we would get 'click', 'click', 'dblclick' which
    // is open->close->open, however double click should be open->close only.
    var targetIsExpandIcon = isElementInEventPath(this.eExpanded, mouseEvent) || isElementInEventPath(this.eContracted, mouseEvent);
    if (!targetIsExpandIcon) {
      this.onExpandOrContract();
    }
  };
  GroupCellRenderer.prototype.onExpandOrContract = function () {
    // must use the displayedGroup, so if data was dragged down, we expand the parent, not this row
    var rowNode = this.displayedGroup;
    var params = this.params;
    var nextExpandState = !rowNode.expanded;
    rowNode.setExpanded(nextExpandState);
    setAriaExpanded(params.eGridCell, nextExpandState);
  };
  GroupCellRenderer.prototype.isShowRowGroupForThisRow = function () {
    if (this.gridOptionsWrapper.isTreeData()) {
      return true;
    }
    var rowGroupColumn = this.displayedGroup.rowGroupColumn;
    if (!rowGroupColumn) {
      return false;
    }
    // column is null for fullWidthRows
    var column = this.params.column;
    var thisColumnIsInterested = column == null || column.isRowGroupDisplayed(rowGroupColumn.getId());
    return thisColumnIsInterested;
  };
  GroupCellRenderer.prototype.isExpandable = function () {
    if (this.draggedFromHideOpenParents) {
      return true;
    }
    var rowNode = this.displayedGroup;
    var reducedLeafNode = this.columnController.isPivotMode() && rowNode.leafGroup;
    var expandableGroup = rowNode.isExpandable() && !rowNode.footer && !reducedLeafNode;
    if (!expandableGroup) {
      return false;
    }
    // column is null for fullWidthRows
    var column = this.params.column;
    var displayingForOneColumnOnly = column != null && typeof column.getColDef().showRowGroup === 'string';
    if (displayingForOneColumnOnly) {
      var showing = this.isShowRowGroupForThisRow();
      return showing;
    }
    return true;
  };
  GroupCellRenderer.prototype.showExpandAndContractIcons = function () {
    var _a = this,
      eContracted = _a.eContracted,
      eExpanded = _a.eExpanded,
      params = _a.params,
      displayedGroup = _a.displayedGroup,
      columnController = _a.columnController;
    var eGridCell = params.eGridCell,
      node = params.node;
    var isExpandable = this.isExpandable();
    if (isExpandable) {
      // if expandable, show one based on expand state.
      // if we were dragged down, means our parent is always expanded
      var expanded = this.draggedFromHideOpenParents ? true : node.expanded;
      setDisplayed(eContracted, !expanded);
      setDisplayed(eExpanded, expanded);
    } else {
      // it not expandable, show neither
      removeAriaExpanded(eGridCell);
      setDisplayed(eExpanded, false);
      setDisplayed(eContracted, false);
    }
    // compensation padding for leaf nodes, so there is blank space instead of the expand icon
    var pivotMode = columnController.isPivotMode();
    var pivotModeAndLeafGroup = pivotMode && displayedGroup.leafGroup;
    var addExpandableCss = isExpandable && !pivotModeAndLeafGroup;
    var isTotalFooterNode = node.footer && node.level === -1;
    this.addOrRemoveCssClass('ag-cell-expandable', addExpandableCss);
    this.addOrRemoveCssClass('ag-row-group', addExpandableCss);
    if (pivotMode) {
      this.addOrRemoveCssClass('ag-pivot-leaf-group', pivotModeAndLeafGroup);
    } else if (!isTotalFooterNode) {
      this.addOrRemoveCssClass('ag-row-group-leaf-indent', !addExpandableCss);
    }
  };
  // this is a user component, and IComponent has "public destroy()" as part of the interface.
  // so we need to have public here instead of private or protected
  GroupCellRenderer.prototype.destroy = function () {
    this.getContext().destroyBean(this.innerCellRenderer);
    _super.prototype.destroy.call(this);
  };
  GroupCellRenderer.prototype.refresh = function () {
    return false;
  };
  GroupCellRenderer.TEMPLATE = "<span class=\"ag-cell-wrapper\">\n            <span class=\"ag-group-expanded\" ref=\"eExpanded\"></span>\n            <span class=\"ag-group-contracted\" ref=\"eContracted\"></span>\n            <span class=\"ag-group-checkbox ag-invisible\" ref=\"eCheckbox\"></span>\n            <span class=\"ag-group-value\" ref=\"eValue\"></span>\n            <span class=\"ag-group-child-count\" ref=\"eChildCount\"></span>\n        </span>";
  __decorate$n([Autowired('rowRenderer')], GroupCellRenderer.prototype, "rowRenderer", void 0);
  __decorate$n([Autowired('expressionService')], GroupCellRenderer.prototype, "expressionService", void 0);
  __decorate$n([Autowired('valueFormatterService')], GroupCellRenderer.prototype, "valueFormatterService", void 0);
  __decorate$n([Autowired('columnController')], GroupCellRenderer.prototype, "columnController", void 0);
  __decorate$n([Autowired('userComponentFactory')], GroupCellRenderer.prototype, "userComponentFactory", void 0);
  __decorate$n([RefSelector('eExpanded')], GroupCellRenderer.prototype, "eExpanded", void 0);
  __decorate$n([RefSelector('eContracted')], GroupCellRenderer.prototype, "eContracted", void 0);
  __decorate$n([RefSelector('eCheckbox')], GroupCellRenderer.prototype, "eCheckbox", void 0);
  __decorate$n([RefSelector('eValue')], GroupCellRenderer.prototype, "eValue", void 0);
  __decorate$n([RefSelector('eChildCount')], GroupCellRenderer.prototype, "eChildCount", void 0);
  return GroupCellRenderer;
}(Component);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$l =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$o =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ARROW_UP = '\u2191';
var ARROW_DOWN = '\u2193';
var AnimateShowChangeCellRenderer = /** @class */function (_super) {
  __extends$l(AnimateShowChangeCellRenderer, _super);
  function AnimateShowChangeCellRenderer() {
    var _this = _super.call(this, AnimateShowChangeCellRenderer.TEMPLATE) || this;
    _this.refreshCount = 0;
    return _this;
  }
  AnimateShowChangeCellRenderer.prototype.init = function (params) {
    // this.params = params;
    this.eValue = this.queryForHtmlElement('.ag-value-change-value');
    this.eDelta = this.queryForHtmlElement('.ag-value-change-delta');
    this.refresh(params);
  };
  AnimateShowChangeCellRenderer.prototype.showDelta = function (params, delta) {
    var absDelta = Math.abs(delta);
    var valueFormatted = params.formatValue(absDelta);
    var valueToUse = exists(valueFormatted) ? valueFormatted : absDelta;
    var deltaUp = delta >= 0;
    if (deltaUp) {
      this.eDelta.innerHTML = ARROW_UP + valueToUse;
    } else {
      // because negative, use ABS to remove sign
      this.eDelta.innerHTML = ARROW_DOWN + valueToUse;
    }
    addOrRemoveCssClass(this.eDelta, 'ag-value-change-delta-up', deltaUp);
    addOrRemoveCssClass(this.eDelta, 'ag-value-change-delta-down', !deltaUp);
  };
  AnimateShowChangeCellRenderer.prototype.setTimerToRemoveDelta = function () {
    var _this = this;
    // the refreshCount makes sure that if the value updates again while
    // the below timer is waiting, then the below timer will realise it
    // is not the most recent and will not try to remove the delta value.
    this.refreshCount++;
    var refreshCountCopy = this.refreshCount;
    window.setTimeout(function () {
      if (refreshCountCopy === _this.refreshCount) {
        _this.hideDeltaValue();
      }
    }, 2000);
  };
  AnimateShowChangeCellRenderer.prototype.hideDeltaValue = function () {
    removeCssClass(this.eValue, 'ag-value-change-value-highlight');
    clearElement(this.eDelta);
  };
  AnimateShowChangeCellRenderer.prototype.refresh = function (params) {
    var value = params.value;
    if (value === this.lastValue) {
      return false;
    }
    if (exists(params.valueFormatted)) {
      this.eValue.innerHTML = params.valueFormatted;
    } else if (exists(params.value)) {
      this.eValue.innerHTML = value;
    } else {
      clearElement(this.eValue);
    }
    // we don't show the delta if we are in the middle of a filter. see comment on FilterManager
    // with regards processingFilterChange
    if (this.filterManager.isSuppressFlashingCellsBecauseFiltering()) {
      return false;
    }
    if (typeof value === 'number' && typeof this.lastValue === 'number') {
      var delta = value - this.lastValue;
      this.showDelta(params, delta);
    }
    // highlight the current value, but only if it's not new, otherwise it
    // would get highlighted first time the value is shown
    if (this.lastValue) {
      addCssClass(this.eValue, 'ag-value-change-value-highlight');
    }
    this.setTimerToRemoveDelta();
    this.lastValue = value;
    return true;
  };
  AnimateShowChangeCellRenderer.TEMPLATE = '<span>' + '<span class="ag-value-change-delta"></span>' + '<span class="ag-value-change-value"></span>' + '</span>';
  __decorate$o([Autowired('filterManager')], AnimateShowChangeCellRenderer.prototype, "filterManager", void 0);
  return AnimateShowChangeCellRenderer;
}(Component);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$m =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$p =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AnimateSlideCellRenderer = /** @class */function (_super) {
  __extends$m(AnimateSlideCellRenderer, _super);
  function AnimateSlideCellRenderer() {
    var _this = _super.call(this, AnimateSlideCellRenderer.TEMPLATE) || this;
    _this.refreshCount = 0;
    _this.eCurrent = _this.queryForHtmlElement('.ag-value-slide-current');
    return _this;
  }
  AnimateSlideCellRenderer.prototype.init = function (params) {
    this.refresh(params);
  };
  AnimateSlideCellRenderer.prototype.addSlideAnimation = function () {
    var _this = this;
    this.refreshCount++;
    // below we keep checking this, and stop working on the animation
    // if it no longer matches - this means another animation has started
    // and this one is stale.
    var refreshCountCopy = this.refreshCount;
    // if old animation, remove it
    if (this.ePrevious) {
      this.getGui().removeChild(this.ePrevious);
    }
    this.ePrevious = loadTemplate('<span class="ag-value-slide-previous ag-value-slide-out"></span>');
    this.ePrevious.innerHTML = this.eCurrent.innerHTML;
    this.getGui().insertBefore(this.ePrevious, this.eCurrent);
    // having timeout of 0 allows use to skip to the next css turn,
    // so we know the previous css classes have been applied. so the
    // complex set of setTimeout below creates the animation
    window.setTimeout(function () {
      if (refreshCountCopy !== _this.refreshCount) {
        return;
      }
      addCssClass(_this.ePrevious, 'ag-value-slide-out-end');
    }, 50);
    window.setTimeout(function () {
      if (refreshCountCopy !== _this.refreshCount) {
        return;
      }
      _this.getGui().removeChild(_this.ePrevious);
      _this.ePrevious = null;
    }, 3000);
  };
  AnimateSlideCellRenderer.prototype.refresh = function (params) {
    var value = params.value;
    if (missing(value)) {
      value = '';
    }
    if (value === this.lastValue) {
      return false;
    }
    // we don't show the delta if we are in the middle of a filter. see comment on FilterManager
    // with regards processingFilterChange
    if (this.filterManager.isSuppressFlashingCellsBecauseFiltering()) {
      return false;
    }
    this.addSlideAnimation();
    this.lastValue = value;
    if (exists(params.valueFormatted)) {
      this.eCurrent.innerHTML = params.valueFormatted;
    } else if (exists(params.value)) {
      this.eCurrent.innerHTML = value;
    } else {
      clearElement(this.eCurrent);
    }
    return true;
  };
  AnimateSlideCellRenderer.TEMPLATE = "<span>\n            <span class=\"ag-value-slide-current\"></span>\n        </span>";
  __decorate$p([Autowired('filterManager')], AnimateSlideCellRenderer.prototype, "filterManager", void 0);
  return AnimateSlideCellRenderer;
}(Component);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$n =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$q =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var LoadingCellRenderer = /** @class */function (_super) {
  __extends$n(LoadingCellRenderer, _super);
  function LoadingCellRenderer() {
    return _super.call(this, LoadingCellRenderer.TEMPLATE) || this;
  }
  LoadingCellRenderer.prototype.init = function (params) {
    params.node.failedLoad ? this.setupFailed() : this.setupLoading();
  };
  LoadingCellRenderer.prototype.setupFailed = function () {
    this.eLoadingText.innerText = 'ERR';
  };
  LoadingCellRenderer.prototype.setupLoading = function () {
    var eLoadingIcon = createIconNoSpan('groupLoading', this.gridOptionsWrapper, null);
    if (eLoadingIcon) {
      this.eLoadingIcon.appendChild(eLoadingIcon);
    }
    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
    this.eLoadingText.innerText = localeTextFunc('loadingOoo', 'Loading');
  };
  LoadingCellRenderer.prototype.refresh = function (params) {
    return false;
  };
  LoadingCellRenderer.TEMPLATE = "<div class=\"ag-loading\">\n            <span class=\"ag-loading-icon\" ref=\"eLoadingIcon\"></span>\n            <span class=\"ag-loading-text\" ref=\"eLoadingText\"></span>\n        </div>";
  __decorate$q([RefSelector('eLoadingIcon')], LoadingCellRenderer.prototype, "eLoadingIcon", void 0);
  __decorate$q([RefSelector('eLoadingText')], LoadingCellRenderer.prototype, "eLoadingText", void 0);
  return LoadingCellRenderer;
}(Component);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$o =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$r =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SelectCellEditor = /** @class */function (_super) {
  __extends$o(SelectCellEditor, _super);
  function SelectCellEditor() {
    var _this = _super.call(this, '<div class="ag-cell-edit-wrapper"><ag-select class="ag-cell-editor" ref="eSelect"></ag-select></div>') || this;
    _this.startedByEnter = false;
    return _this;
  }
  SelectCellEditor.prototype.init = function (params) {
    var _this = this;
    this.focusAfterAttached = params.cellStartedEdit;
    if (missing(params.values)) {
      console.warn('AG Grid: no values found for select cellEditor');
      return;
    }
    this.startedByEnter = params.keyPress === KeyCode.ENTER;
    var hasValue = false;
    params.values.forEach(function (value) {
      var option = {
        value: value
      };
      var valueFormatted = _this.valueFormatterService.formatValue(params.column, null, null, value);
      var valueFormattedExits = valueFormatted !== null && valueFormatted !== undefined;
      option.text = valueFormattedExits ? valueFormatted : value;
      _this.eSelect.addOption(option);
      hasValue = hasValue || params.value === value;
    });
    if (hasValue) {
      this.eSelect.setValue(params.value, true);
    } else if (params.values.length) {
      this.eSelect.setValue(params.values[0], true);
    }
    // we don't want to add this if full row editing, otherwise selecting will stop the
    // full row editing.
    if (!this.gridOptionsWrapper.isFullRowEdit()) {
      this.eSelect.onValueChange(function () {
        return params.stopEditing();
      });
    }
  };
  SelectCellEditor.prototype.afterGuiAttached = function () {
    if (this.focusAfterAttached) {
      this.eSelect.getFocusableElement().focus();
    }
    if (this.startedByEnter) {
      this.eSelect.showPicker();
    }
  };
  SelectCellEditor.prototype.focusIn = function () {
    this.eSelect.getFocusableElement().focus();
  };
  SelectCellEditor.prototype.getValue = function () {
    return this.eSelect.getValue();
  };
  SelectCellEditor.prototype.isPopup = function () {
    return false;
  };
  __decorate$r([Autowired('valueFormatterService')], SelectCellEditor.prototype, "valueFormatterService", void 0);
  __decorate$r([RefSelector('eSelect')], SelectCellEditor.prototype, "eSelect", void 0);
  return SelectCellEditor;
}(PopupComponent);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$p =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PopupTextCellEditor = /** @class */function (_super) {
  __extends$p(PopupTextCellEditor, _super);
  function PopupTextCellEditor() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  PopupTextCellEditor.prototype.isPopup = function () {
    return true;
  };
  return PopupTextCellEditor;
}(TextCellEditor);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$q =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PopupSelectCellEditor = /** @class */function (_super) {
  __extends$q(PopupSelectCellEditor, _super);
  function PopupSelectCellEditor() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  PopupSelectCellEditor.prototype.isPopup = function () {
    return true;
  };
  return PopupSelectCellEditor;
}(SelectCellEditor);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$r =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$s =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var LargeTextCellEditor = /** @class */function (_super) {
  __extends$r(LargeTextCellEditor, _super);
  function LargeTextCellEditor() {
    return _super.call(this, LargeTextCellEditor.TEMPLATE) || this;
  }
  LargeTextCellEditor.prototype.init = function (params) {
    this.params = params;
    this.focusAfterAttached = params.cellStartedEdit;
    this.eTextArea.setMaxLength(params.maxLength || 200).setCols(params.cols || 60).setRows(params.rows || 10);
    if (exists(params.value)) {
      this.eTextArea.setValue(params.value.toString(), true);
    }
    this.addGuiEventListener('keydown', this.onKeyDown.bind(this));
  };
  LargeTextCellEditor.prototype.onKeyDown = function (event) {
    var key = event.which || event.keyCode;
    if (key === KeyCode.LEFT || key === KeyCode.UP || key === KeyCode.RIGHT || key === KeyCode.DOWN || event.shiftKey && key === KeyCode.ENTER) {
      // shift+enter allows for newlines
      event.stopPropagation();
    }
  };
  LargeTextCellEditor.prototype.afterGuiAttached = function () {
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    this.eTextArea.setInputAriaLabel(translate('ariaInputEditor', 'Input Editor'));
    if (this.focusAfterAttached) {
      this.eTextArea.getFocusableElement().focus();
    }
  };
  LargeTextCellEditor.prototype.getValue = function () {
    return this.params.parseValue(this.eTextArea.getValue());
  };
  LargeTextCellEditor.TEMPLATE = "<div class=\"ag-large-text\" tabindex=\"0\">\n            <ag-input-text-area ref=\"eTextArea\" class=\"ag-large-text-input\"></ag-input-text-area>\n        </div>";
  __decorate$s([RefSelector("eTextArea")], LargeTextCellEditor.prototype, "eTextArea", void 0);
  return LargeTextCellEditor;
}(PopupComponent);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$s =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$t =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var NumberFilter = /** @class */function (_super) {
  __extends$s(NumberFilter, _super);
  function NumberFilter() {
    return _super.call(this, 'numberFilter') || this;
  }
  NumberFilter.prototype.mapRangeFromModel = function (filterModel) {
    return {
      from: filterModel.filter,
      to: filterModel.filterTo
    };
  };
  NumberFilter.prototype.getDefaultDebounceMs = function () {
    return 500;
  };
  NumberFilter.prototype.resetUiToDefaults = function (silent) {
    var _this = this;
    return _super.prototype.resetUiToDefaults.call(this, silent).then(function () {
      var fields = [_this.eValueFrom1, _this.eValueFrom2, _this.eValueTo1, _this.eValueTo2];
      fields.forEach(function (field) {
        return field.setValue(null, silent);
      });
      _this.resetPlaceholder();
    });
  };
  NumberFilter.prototype.setConditionIntoUi = function (model, position) {
    var positionOne = position === ConditionPosition.One;
    var eValueFrom = positionOne ? this.eValueFrom1 : this.eValueFrom2;
    var eValueTo = positionOne ? this.eValueTo1 : this.eValueTo2;
    eValueFrom.setValue(model ? '' + model.filter : null);
    eValueTo.setValue(model ? '' + model.filterTo : null);
  };
  NumberFilter.prototype.setValueFromFloatingFilter = function (value) {
    this.eValueFrom1.setValue(value);
    this.eValueTo1.setValue(null);
    this.eValueFrom2.setValue(null);
    this.eValueTo2.setValue(null);
  };
  NumberFilter.prototype.comparator = function () {
    return function (left, right) {
      if (left === right) {
        return 0;
      }
      return left < right ? 1 : -1;
    };
  };
  NumberFilter.prototype.setParams = function (params) {
    this.numberFilterParams = params;
    var allowedCharPattern = this.getAllowedCharPattern();
    if (allowedCharPattern) {
      var config = {
        allowedCharPattern: allowedCharPattern
      };
      this.resetTemplate({
        eValueFrom1: config,
        eValueTo1: config,
        eValueFrom2: config,
        eValueTo2: config
      });
    }
    _super.prototype.setParams.call(this, params);
    this.addValueChangedListeners();
  };
  NumberFilter.prototype.addValueChangedListeners = function () {
    var _this = this;
    var listener = function () {
      return _this.onUiChanged();
    };
    this.eValueFrom1.onValueChange(listener);
    this.eValueTo1.onValueChange(listener);
    this.eValueFrom2.onValueChange(listener);
    this.eValueTo2.onValueChange(listener);
  };
  NumberFilter.prototype.resetPlaceholder = function () {
    var globalTranslate = this.gridOptionsWrapper.getLocaleTextFunc();
    var isRange1 = this.showValueTo(this.getCondition1Type());
    var isRange2 = this.showValueTo(this.getCondition2Type());
    this.eValueFrom1.setInputPlaceholder(this.translate(isRange1 ? 'inRangeStart' : 'filterOoo'));
    this.eValueFrom1.setInputAriaLabel(isRange1 ? globalTranslate('ariaFilterFromValue', 'Filter from value') : globalTranslate('ariaFilterValue', 'Filter Value'));
    this.eValueTo1.setInputPlaceholder(this.translate('inRangeEnd'));
    this.eValueTo1.setInputAriaLabel(globalTranslate('ariaFilterToValue', 'Filter to Value'));
    this.eValueFrom2.setInputPlaceholder(this.translate(isRange2 ? 'inRangeStart' : 'filterOoo'));
    this.eValueFrom2.setInputAriaLabel(isRange2 ? globalTranslate('ariaFilterFromValue', 'Filter from value') : globalTranslate('ariaFilterValue', 'Filter Value'));
    this.eValueTo2.setInputPlaceholder(this.translate('inRangeEnd'));
    this.eValueTo2.setInputAriaLabel(globalTranslate('ariaFilterToValue', 'Filter to Value'));
  };
  NumberFilter.prototype.afterGuiAttached = function (params) {
    _super.prototype.afterGuiAttached.call(this, params);
    this.resetPlaceholder();
    if (!params || !params.suppressFocus) {
      this.eValueFrom1.getInputElement().focus();
    }
  };
  NumberFilter.prototype.getDefaultFilterOptions = function () {
    return NumberFilter.DEFAULT_FILTER_OPTIONS;
  };
  NumberFilter.prototype.createValueTemplate = function (position) {
    var pos = position === ConditionPosition.One ? '1' : '2';
    var allowedCharPattern = this.getAllowedCharPattern();
    var agElementTag = allowedCharPattern ? 'ag-input-text-field' : 'ag-input-number-field';
    return (/* html */"\n            <div class=\"ag-filter-body\" ref=\"eCondition" + pos + "Body\" role=\"presentation\">\n                <" + agElementTag + " class=\"ag-filter-from ag-filter-filter\" ref=\"eValueFrom" + pos + "\"></" + agElementTag + ">\n                <" + agElementTag + " class=\"ag-filter-to ag-filter-filter\" ref=\"eValueTo" + pos + "\"></" + agElementTag + ">\n            </div>"
    );
  };
  NumberFilter.prototype.isConditionUiComplete = function (position) {
    var positionOne = position === ConditionPosition.One;
    var option = positionOne ? this.getCondition1Type() : this.getCondition2Type();
    if (option === SimpleFilter.EMPTY) {
      return false;
    }
    if (this.doesFilterHaveHiddenInput(option)) {
      return true;
    }
    var eValue = positionOne ? this.eValueFrom1 : this.eValueFrom2;
    var eValueTo = positionOne ? this.eValueTo1 : this.eValueTo2;
    var value = this.stringToFloat(eValue.getValue());
    return value != null && (!this.showValueTo(option) || this.stringToFloat(eValueTo.getValue()) != null);
  };
  NumberFilter.prototype.areSimpleModelsEqual = function (aSimple, bSimple) {
    return aSimple.filter === bSimple.filter && aSimple.filterTo === bSimple.filterTo && aSimple.type === bSimple.type;
  };
  NumberFilter.prototype.getFilterType = function () {
    return 'number';
  };
  NumberFilter.prototype.stringToFloat = function (value) {
    if (typeof value === 'number') {
      return value;
    }
    var filterText = makeNull(value);
    if (filterText != null && filterText.trim() === '') {
      filterText = null;
    }
    if (this.numberFilterParams.numberParser) {
      return this.numberFilterParams.numberParser(filterText);
    }
    return filterText == null || filterText.trim() === '-' ? null : parseFloat(filterText);
  };
  NumberFilter.prototype.createCondition = function (position) {
    var positionOne = position === ConditionPosition.One;
    var type = positionOne ? this.getCondition1Type() : this.getCondition2Type();
    var eValue = positionOne ? this.eValueFrom1 : this.eValueFrom2;
    var value = this.stringToFloat(eValue.getValue());
    var model = {
      filterType: this.getFilterType(),
      type: type
    };
    if (!this.doesFilterHaveHiddenInput(type)) {
      model.filter = value;
      if (this.showValueTo(type)) {
        var eValueTo = positionOne ? this.eValueTo1 : this.eValueTo2;
        var valueTo = this.stringToFloat(eValueTo.getValue());
        model.filterTo = valueTo;
      }
    }
    return model;
  };
  NumberFilter.prototype.updateUiVisibility = function () {
    _super.prototype.updateUiVisibility.call(this);
    this.resetPlaceholder();
    var condition1Type = this.getCondition1Type();
    var condition2Type = this.getCondition2Type();
    setDisplayed(this.eValueFrom1.getGui(), this.showValueFrom(condition1Type));
    setDisplayed(this.eValueTo1.getGui(), this.showValueTo(condition1Type));
    setDisplayed(this.eValueFrom2.getGui(), this.showValueFrom(condition2Type));
    setDisplayed(this.eValueTo2.getGui(), this.showValueTo(condition2Type));
  };
  NumberFilter.prototype.getAllowedCharPattern = function () {
    var allowedCharPattern = (this.numberFilterParams || {}).allowedCharPattern;
    if (allowedCharPattern) {
      return allowedCharPattern;
    }
    if (!isBrowserChrome() && !isBrowserEdge()) {
      // only Chrome and Edge support the HTML5 number field, so for other browsers we provide an equivalent
      // constraint instead
      return '\\d\\-\\.';
    }
    return null;
  };
  NumberFilter.DEFAULT_FILTER_OPTIONS = [ScalarFilter.EQUALS, ScalarFilter.NOT_EQUAL, ScalarFilter.LESS_THAN, ScalarFilter.LESS_THAN_OR_EQUAL, ScalarFilter.GREATER_THAN, ScalarFilter.GREATER_THAN_OR_EQUAL, ScalarFilter.IN_RANGE];
  __decorate$t([RefSelector('eValueFrom1')], NumberFilter.prototype, "eValueFrom1", void 0);
  __decorate$t([RefSelector('eValueTo1')], NumberFilter.prototype, "eValueTo1", void 0);
  __decorate$t([RefSelector('eValueFrom2')], NumberFilter.prototype, "eValueFrom2", void 0);
  __decorate$t([RefSelector('eValueTo2')], NumberFilter.prototype, "eValueTo2", void 0);
  return NumberFilter;
}(ScalarFilter);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$t =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var LoadingOverlayComponent$1 = /** @class */function (_super) {
  __extends$t(LoadingOverlayComponent, _super);
  function LoadingOverlayComponent() {
    return _super.call(this) || this;
  }
  // this is a user component, and IComponent has "public destroy()" as part of the interface.
  // so we need to override destroy() just to make the method public.
  LoadingOverlayComponent.prototype.destroy = function () {
    _super.prototype.destroy.call(this);
  };
  LoadingOverlayComponent.prototype.init = function (params) {
    var template = this.gridOptionsWrapper.getOverlayLoadingTemplate() ? this.gridOptionsWrapper.getOverlayLoadingTemplate() : LoadingOverlayComponent.DEFAULT_LOADING_OVERLAY_TEMPLATE;
    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
    var localisedTemplate = template.replace('[LOADING...]', localeTextFunc('loadingOoo', 'Loading...'));
    this.setTemplate(localisedTemplate);
  };
  LoadingOverlayComponent.DEFAULT_LOADING_OVERLAY_TEMPLATE = '<span class="ag-overlay-loading-center">[LOADING...]</span>';
  return LoadingOverlayComponent;
}(Component);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$u =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var NoRowsOverlayComponent$1 = /** @class */function (_super) {
  __extends$u(NoRowsOverlayComponent, _super);
  function NoRowsOverlayComponent() {
    return _super.call(this) || this;
  }
  // this is a user component, and IComponent has "public destroy()" as part of the interface.
  // so we need to override destroy() just to make the method public.
  NoRowsOverlayComponent.prototype.destroy = function () {
    _super.prototype.destroy.call(this);
  };
  NoRowsOverlayComponent.prototype.init = function (params) {
    var template = this.gridOptionsWrapper.getOverlayNoRowsTemplate() ? this.gridOptionsWrapper.getOverlayNoRowsTemplate() : NoRowsOverlayComponent.DEFAULT_NO_ROWS_TEMPLATE;
    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
    var localisedTemplate = template.replace('[NO_ROWS_TO_SHOW]', localeTextFunc('noRowsToShow', 'No Rows To Show'));
    this.setTemplate(localisedTemplate);
  };
  NoRowsOverlayComponent.DEFAULT_NO_ROWS_TEMPLATE = '<span class="ag-overlay-no-rows-center">[NO_ROWS_TO_SHOW]</span>';
  return NoRowsOverlayComponent;
}(Component);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$v =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var TooltipComponent$1 = /** @class */function (_super) {
  __extends$v(TooltipComponent, _super);
  function TooltipComponent() {
    return _super.call(this, /* html */"<div class=\"ag-tooltip\"></div>") || this;
  }
  // will need to type params
  TooltipComponent.prototype.init = function (params) {
    var value = params.value;
    this.getGui().innerHTML = value;
  };
  return TooltipComponent;
}(PopupComponent);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$w =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$u =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DefaultDateComponent = /** @class */function (_super) {
  __extends$w(DefaultDateComponent, _super);
  function DefaultDateComponent() {
    return _super.call(this, /* html */"\n            <div class=\"ag-filter-filter\">\n                <ag-input-text-field class=\"ag-date-filter\" ref=\"eDateInput\"></ag-input-text-field>\n            </div>") || this;
  }
  // this is a user component, and IComponent has "public destroy()" as part of the interface.
  // so we need to override destroy() just to make the method public.
  DefaultDateComponent.prototype.destroy = function () {
    _super.prototype.destroy.call(this);
  };
  DefaultDateComponent.prototype.init = function (params) {
    var inputElement = this.eDateInput.getInputElement();
    if (this.shouldUseBrowserDatePicker(params)) {
      if (isBrowserIE()) {
        console.warn('ag-grid: browserDatePicker is specified to true, but it is not supported in IE 11; reverting to text date picker');
      } else {
        inputElement.type = 'date';
      }
    }
    // ensures that the input element is focussed when a clear button is clicked
    this.addManagedListener(inputElement, 'mousedown', function () {
      return inputElement.focus();
    });
    this.addManagedListener(this.eDateInput.getInputElement(), 'input', function (e) {
      if (e.target !== document.activeElement) {
        return;
      }
      params.onDateChanged();
    });
  };
  DefaultDateComponent.prototype.getDate = function () {
    return parseDateTimeFromString(this.eDateInput.getValue());
  };
  DefaultDateComponent.prototype.setDate = function (date) {
    this.eDateInput.setValue(serialiseDate(date, false));
  };
  DefaultDateComponent.prototype.setInputPlaceholder = function (placeholder) {
    this.eDateInput.setInputPlaceholder(placeholder);
  };
  DefaultDateComponent.prototype.afterGuiAttached = function (params) {
    if (!params || !params.suppressFocus) {
      this.eDateInput.getInputElement().focus();
    }
  };
  DefaultDateComponent.prototype.shouldUseBrowserDatePicker = function (params) {
    if (params.filterParams && params.filterParams.browserDatePicker != null) {
      return params.filterParams.browserDatePicker;
    }
    return isBrowserChrome() || isBrowserFirefox();
  };
  __decorate$u([RefSelector('eDateInput')], DefaultDateComponent.prototype, "eDateInput", void 0);
  return DefaultDateComponent;
}(Component);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$x =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var SimpleFloatingFilter = /** @class */function (_super) {
  __extends$x(SimpleFloatingFilter, _super);
  function SimpleFloatingFilter() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  SimpleFloatingFilter.prototype.getDefaultDebounceMs = function () {
    return 0;
  };
  // this is a user component, and IComponent has "public destroy()" as part of the interface.
  // so we need to override destroy() just to make the method public.
  SimpleFloatingFilter.prototype.destroy = function () {
    _super.prototype.destroy.call(this);
  };
  // used by:
  // 1) NumberFloatingFilter & TextFloatingFilter: Always, for both when editable and read only.
  // 2) DateFloatingFilter: Only when read only (as we show text rather than a date picker when read only)
  SimpleFloatingFilter.prototype.getTextFromModel = function (model) {
    if (!model) {
      return null;
    }
    var isCombined = model.operator;
    if (isCombined) {
      var combinedModel = model;
      var con1Str = this.conditionToString(combinedModel.condition1);
      var con2Str = this.conditionToString(combinedModel.condition2);
      return con1Str + " " + combinedModel.operator + " " + con2Str;
    } else {
      var condition = model;
      var customOption = this.optionsFactory.getCustomOption(condition.type);
      // For custom filter options we display the Name of the filter instead
      // of displaying the `from` value, as it wouldn't be relevant
      if (customOption && customOption.hideFilterInput) {
        this.gridOptionsWrapper.getLocaleTextFunc()(customOption.displayKey, customOption.displayName);
        return customOption.displayName;
      }
      return this.conditionToString(condition);
    }
  };
  SimpleFloatingFilter.prototype.isEventFromFloatingFilter = function (event) {
    return event && event.afterFloatingFilter;
  };
  SimpleFloatingFilter.prototype.getLastType = function () {
    return this.lastType;
  };
  SimpleFloatingFilter.prototype.setLastTypeFromModel = function (model) {
    // if no model provided by the parent filter use default
    if (!model) {
      this.lastType = this.optionsFactory.getDefaultOption();
      return;
    }
    var isCombined = model.operator;
    var condition;
    if (isCombined) {
      var combinedModel = model;
      condition = combinedModel.condition1;
    } else {
      condition = model;
    }
    this.lastType = condition.type;
  };
  SimpleFloatingFilter.prototype.canWeEditAfterModelFromParentFilter = function (model) {
    if (!model) {
      // if no model, then we can edit as long as the lastType is something we can edit, as this
      // is the type we will provide to the parent filter if the user decides to use the floating filter.
      return this.isTypeEditable(this.lastType);
    }
    // never allow editing if the filter is combined (ie has two parts)
    var isCombined = model.operator;
    if (isCombined) {
      return false;
    }
    var simpleModel = model;
    return this.isTypeEditable(simpleModel.type);
  };
  SimpleFloatingFilter.prototype.init = function (params) {
    this.optionsFactory = new OptionsFactory();
    this.optionsFactory.init(params.filterParams, this.getDefaultFilterOptions());
    this.lastType = this.optionsFactory.getDefaultOption();
    // we are editable if:
    // 1) there is a type (user has configured filter wrong if not type)
    //  AND
    // 2) the default type is not 'in range'
    var editable = this.isTypeEditable(this.lastType);
    this.setEditable(editable);
  };
  SimpleFloatingFilter.prototype.doesFilterHaveHiddenInput = function (filterType) {
    var customFilterOption = this.optionsFactory.getCustomOption(filterType);
    return customFilterOption && customFilterOption.hideFilterInput;
  };
  SimpleFloatingFilter.prototype.isTypeEditable = function (type) {
    return !!type && !this.doesFilterHaveHiddenInput(type) && type !== SimpleFilter.IN_RANGE && type !== SimpleFilter.EMPTY;
  };
  return SimpleFloatingFilter;
}(Component);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$y =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$v =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DateFloatingFilter = /** @class */function (_super) {
  __extends$y(DateFloatingFilter, _super);
  function DateFloatingFilter() {
    return _super.call(this, /* html */"\n            <div class=\"ag-floating-filter-input\" role=\"presentation\">\n                <ag-input-text-field ref=\"eReadOnlyText\"></ag-input-text-field>\n                <div ref=\"eDateWrapper\" style=\"display: flex;\"></div>\n            </div>") || this;
  }
  DateFloatingFilter.prototype.getDefaultFilterOptions = function () {
    return DateFilter.DEFAULT_FILTER_OPTIONS;
  };
  DateFloatingFilter.prototype.conditionToString = function (condition) {
    var type = condition.type;
    var dateFrom = parseDateTimeFromString(condition.dateFrom);
    if (type === SimpleFilter.IN_RANGE) {
      var dateTo = parseDateTimeFromString(condition.dateTo);
      return serialiseDate(dateFrom, false) + "-" + serialiseDate(dateTo, false);
    }
    // cater for when the type doesn't need a value
    return dateFrom == null ? "" + type : "" + serialiseDate(dateFrom, false);
  };
  DateFloatingFilter.prototype.init = function (params) {
    _super.prototype.init.call(this, params);
    this.params = params;
    this.createDateComponent();
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    this.eReadOnlyText.setDisabled(true).setInputAriaLabel(translate('ariaDateFilterInput', 'Date Filter Input'));
  };
  DateFloatingFilter.prototype.setEditable = function (editable) {
    setDisplayed(this.eDateWrapper, editable);
    setDisplayed(this.eReadOnlyText.getGui(), !editable);
  };
  DateFloatingFilter.prototype.onParentModelChanged = function (model, event) {
    // We don't want to update the floating filter if the floating filter caused the change,
    // because the UI is already in sync. if we didn't do this, the UI would behave strangely
    // as it would be updating as the user is typing
    if (this.isEventFromFloatingFilter(event)) {
      return;
    }
    _super.prototype.setLastTypeFromModel.call(this, model);
    var allowEditing = this.canWeEditAfterModelFromParentFilter(model);
    this.setEditable(allowEditing);
    if (allowEditing) {
      if (model) {
        var dateModel = model;
        this.dateComp.setDate(parseDateTimeFromString(dateModel.dateFrom));
      } else {
        this.dateComp.setDate(null);
      }
      this.eReadOnlyText.setValue('');
    } else {
      this.eReadOnlyText.setValue(this.getTextFromModel(model));
      this.dateComp.setDate(null);
    }
  };
  DateFloatingFilter.prototype.onDateChanged = function () {
    var _this = this;
    var filterValueDate = this.dateComp.getDate();
    var filterValueText = serialiseDate(filterValueDate);
    this.params.parentFilterInstance(function (filterInstance) {
      if (filterInstance) {
        var simpleFilter = filterInstance;
        simpleFilter.onFloatingFilterChanged(_this.getLastType(), filterValueText);
      }
    });
  };
  DateFloatingFilter.prototype.createDateComponent = function () {
    var _this = this;
    var debounceMs = ProvidedFilter.getDebounceMs(this.params.filterParams, this.getDefaultDebounceMs());
    var dateComponentParams = {
      onDateChanged: debounce(this.onDateChanged.bind(this), debounceMs),
      filterParams: this.params.column.getColDef().filterParams
    };
    this.dateComp = new DateCompWrapper(this.getContext(), this.userComponentFactory, dateComponentParams, this.eDateWrapper);
    this.addDestroyFunc(function () {
      return _this.dateComp.destroy();
    });
  };
  __decorate$v([Autowired('userComponentFactory')], DateFloatingFilter.prototype, "userComponentFactory", void 0);
  __decorate$v([RefSelector('eReadOnlyText')], DateFloatingFilter.prototype, "eReadOnlyText", void 0);
  __decorate$v([RefSelector('eDateWrapper')], DateFloatingFilter.prototype, "eDateWrapper", void 0);
  return DateFloatingFilter;
}(SimpleFloatingFilter);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$z =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$w =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TextFilter = /** @class */function (_super) {
  __extends$z(TextFilter, _super);
  function TextFilter() {
    return _super.call(this, 'textFilter') || this;
  }
  TextFilter.trimInput = function (value) {
    var trimmedInput = value && value.trim();
    // trim the input, unless it is all whitespace (this is consistent with Excel behaviour)
    return trimmedInput === '' ? value : trimmedInput;
  };
  TextFilter.prototype.getDefaultDebounceMs = function () {
    return 500;
  };
  TextFilter.prototype.getCleanValue = function (inputField) {
    var value = makeNull(inputField.getValue());
    return this.textFilterParams.trimInput ? TextFilter.trimInput(value) : value;
  };
  TextFilter.prototype.addValueChangedListeners = function () {
    var _this = this;
    var listener = function () {
      return _this.onUiChanged();
    };
    this.eValue1.onValueChange(listener);
    this.eValue2.onValueChange(listener);
  };
  TextFilter.prototype.setParams = function (params) {
    _super.prototype.setParams.call(this, params);
    this.textFilterParams = params;
    this.comparator = this.textFilterParams.textCustomComparator || TextFilter.DEFAULT_COMPARATOR;
    this.formatter = this.textFilterParams.textFormatter || (this.textFilterParams.caseSensitive ? TextFilter.DEFAULT_FORMATTER : TextFilter.DEFAULT_LOWERCASE_FORMATTER);
    this.addValueChangedListeners();
  };
  TextFilter.prototype.setConditionIntoUi = function (model, position) {
    var positionOne = position === ConditionPosition.One;
    var eValue = positionOne ? this.eValue1 : this.eValue2;
    eValue.setValue(model ? model.filter : null);
  };
  TextFilter.prototype.createCondition = function (position) {
    var positionOne = position === ConditionPosition.One;
    var type = positionOne ? this.getCondition1Type() : this.getCondition2Type();
    var eValue = positionOne ? this.eValue1 : this.eValue2;
    var value = this.getCleanValue(eValue);
    eValue.setValue(value, true); // ensure clean value is visible
    var model = {
      filterType: this.getFilterType(),
      type: type
    };
    if (!this.doesFilterHaveHiddenInput(type)) {
      model.filter = value;
    }
    return model;
  };
  TextFilter.prototype.getFilterType = function () {
    return 'text';
  };
  TextFilter.prototype.areSimpleModelsEqual = function (aSimple, bSimple) {
    return aSimple.filter === bSimple.filter && aSimple.type === bSimple.type;
  };
  TextFilter.prototype.resetUiToDefaults = function (silent) {
    var _this = this;
    return _super.prototype.resetUiToDefaults.call(this, silent).then(function () {
      _this.forEachInput(function (field) {
        return field.setValue(null, silent);
      });
      _this.resetPlaceholder();
    });
  };
  TextFilter.prototype.resetPlaceholder = function () {
    var globalTranslate = this.gridOptionsWrapper.getLocaleTextFunc();
    var placeholder = this.translate('filterOoo');
    this.forEachInput(function (field) {
      field.setInputPlaceholder(placeholder);
      field.setInputAriaLabel(globalTranslate('ariaFilterValue', 'Filter Value'));
    });
  };
  TextFilter.prototype.forEachInput = function (action) {
    forEach([this.eValue1, this.eValue2], action);
  };
  TextFilter.prototype.setValueFromFloatingFilter = function (value) {
    this.eValue1.setValue(value);
    this.eValue2.setValue(null);
  };
  TextFilter.prototype.getDefaultFilterOptions = function () {
    return TextFilter.DEFAULT_FILTER_OPTIONS;
  };
  TextFilter.prototype.createValueTemplate = function (position) {
    var pos = position === ConditionPosition.One ? '1' : '2';
    return (/* html */"\n            <div class=\"ag-filter-body\" ref=\"eCondition" + pos + "Body\" role=\"presentation\">\n                <ag-input-text-field class=\"ag-filter-filter\" ref=\"eValue" + pos + "\"></ag-input-text-field>\n            </div>"
    );
  };
  TextFilter.prototype.updateUiVisibility = function () {
    _super.prototype.updateUiVisibility.call(this);
    setDisplayed(this.eCondition1Body, this.showValueFrom(this.getCondition1Type()));
    setDisplayed(this.eCondition2Body, this.isCondition2Enabled() && this.showValueFrom(this.getCondition2Type()));
  };
  TextFilter.prototype.afterGuiAttached = function (params) {
    _super.prototype.afterGuiAttached.call(this, params);
    this.resetPlaceholder();
    if (!params || !params.suppressFocus) {
      this.eValue1.getInputElement().focus();
    }
  };
  TextFilter.prototype.isConditionUiComplete = function (position) {
    var positionOne = position === ConditionPosition.One;
    var option = positionOne ? this.getCondition1Type() : this.getCondition2Type();
    if (option === SimpleFilter.EMPTY) {
      return false;
    }
    if (this.doesFilterHaveHiddenInput(option)) {
      return true;
    }
    return this.getCleanValue(positionOne ? this.eValue1 : this.eValue2) != null;
  };
  TextFilter.prototype.individualConditionPasses = function (params, filterModel) {
    var filterText = filterModel.filter;
    var filterOption = filterModel.type;
    var cellValue = this.textFilterParams.valueGetter(params.node);
    var cellValueFormatted = this.formatter(cellValue);
    var customFilterOption = this.optionsFactory.getCustomOption(filterOption);
    if (customFilterOption) {
      // only execute the custom filter if a value exists or a value isn't required, i.e. input is hidden
      if (filterText != null || customFilterOption.hideFilterInput) {
        return customFilterOption.test(filterText, cellValueFormatted);
      }
    }
    if (cellValue == null) {
      return filterOption === SimpleFilter.NOT_EQUAL || filterOption === SimpleFilter.NOT_CONTAINS;
    }
    var filterTextFormatted = this.formatter(filterText);
    return this.comparator(filterOption, cellValueFormatted, filterTextFormatted);
  };
  TextFilter.DEFAULT_FILTER_OPTIONS = [SimpleFilter.CONTAINS, SimpleFilter.NOT_CONTAINS, SimpleFilter.EQUALS, SimpleFilter.NOT_EQUAL, SimpleFilter.STARTS_WITH, SimpleFilter.ENDS_WITH];
  TextFilter.DEFAULT_FORMATTER = function (from) {
    return from;
  };
  TextFilter.DEFAULT_LOWERCASE_FORMATTER = function (from) {
    return from == null ? null : from.toString().toLowerCase();
  };
  TextFilter.DEFAULT_COMPARATOR = function (filter, value, filterText) {
    switch (filter) {
      case TextFilter.CONTAINS:
        return value.indexOf(filterText) >= 0;
      case TextFilter.NOT_CONTAINS:
        return value.indexOf(filterText) < 0;
      case TextFilter.EQUALS:
        return value === filterText;
      case TextFilter.NOT_EQUAL:
        return value != filterText;
      case TextFilter.STARTS_WITH:
        return value.indexOf(filterText) === 0;
      case TextFilter.ENDS_WITH:
        var index = value.lastIndexOf(filterText);
        return index >= 0 && index === value.length - filterText.length;
      default:
        // should never happen
        console.warn('AG Grid: Unexpected type of filter "' + filter + '", it looks like the filter was configured with incorrect Filter Options');
        return false;
    }
  };
  __decorate$w([RefSelector('eValue1')], TextFilter.prototype, "eValue1", void 0);
  __decorate$w([RefSelector('eValue2')], TextFilter.prototype, "eValue2", void 0);
  return TextFilter;
}(SimpleFilter);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$A =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$x =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TextInputFloatingFilter = /** @class */function (_super) {
  __extends$A(TextInputFloatingFilter, _super);
  function TextInputFloatingFilter() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  TextInputFloatingFilter.prototype.postConstruct = function () {
    this.setTemplate( /* html */"\n            <div class=\"ag-floating-filter-input\" role=\"presentation\">\n                <ag-input-text-field ref=\"eFloatingFilterInput\"></ag-input-text-field>\n            </div>");
  };
  TextInputFloatingFilter.prototype.getDefaultDebounceMs = function () {
    return 500;
  };
  TextInputFloatingFilter.prototype.onParentModelChanged = function (model, event) {
    if (this.isEventFromFloatingFilter(event)) {
      // if the floating filter triggered the change, it is already in sync
      return;
    }
    this.setLastTypeFromModel(model);
    this.eFloatingFilterInput.setValue(this.getTextFromModel(model));
    this.setEditable(this.canWeEditAfterModelFromParentFilter(model));
  };
  TextInputFloatingFilter.prototype.init = function (params) {
    _super.prototype.init.call(this, params);
    this.params = params;
    this.applyActive = ProvidedFilter.isUseApplyButton(this.params.filterParams);
    var debounceMs = ProvidedFilter.getDebounceMs(this.params.filterParams, this.getDefaultDebounceMs());
    var toDebounce = debounce(this.syncUpWithParentFilter.bind(this), debounceMs);
    var filterGui = this.eFloatingFilterInput.getGui();
    this.addManagedListener(filterGui, 'input', toDebounce);
    this.addManagedListener(filterGui, 'keypress', toDebounce);
    this.addManagedListener(filterGui, 'keydown', toDebounce);
    var columnDef = params.column.getDefinition();
    if (columnDef.filterParams && columnDef.filterParams.filterOptions && columnDef.filterParams.filterOptions.length === 1 && columnDef.filterParams.filterOptions[0] === 'inRange') {
      this.eFloatingFilterInput.setDisabled(true);
    }
    var displayName = this.columnController.getDisplayNameForColumn(params.column, 'header', true);
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    this.eFloatingFilterInput.setInputAriaLabel(displayName + " " + translate('ariaFilterInput', 'Filter Input'));
  };
  TextInputFloatingFilter.prototype.syncUpWithParentFilter = function (e) {
    var _this = this;
    var enterKeyPressed = isKeyPressed(e, KeyCode.ENTER);
    if (this.applyActive && !enterKeyPressed) {
      return;
    }
    var value = this.eFloatingFilterInput.getValue();
    if (this.params.filterParams.trimInput) {
      value = TextFilter.trimInput(value);
      this.eFloatingFilterInput.setValue(value, true); // ensure visible value is trimmed
    }

    this.params.parentFilterInstance(function (filterInstance) {
      if (filterInstance) {
        var simpleFilter = filterInstance;
        simpleFilter.onFloatingFilterChanged(_this.getLastType(), value);
      }
    });
  };
  TextInputFloatingFilter.prototype.setEditable = function (editable) {
    this.eFloatingFilterInput.setDisabled(!editable);
  };
  __decorate$x([Autowired('columnController')], TextInputFloatingFilter.prototype, "columnController", void 0);
  __decorate$x([RefSelector('eFloatingFilterInput')], TextInputFloatingFilter.prototype, "eFloatingFilterInput", void 0);
  __decorate$x([PostConstruct], TextInputFloatingFilter.prototype, "postConstruct", null);
  return TextInputFloatingFilter;
}(SimpleFloatingFilter);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$B =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var NumberFloatingFilter = /** @class */function (_super) {
  __extends$B(NumberFloatingFilter, _super);
  function NumberFloatingFilter() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  NumberFloatingFilter.prototype.getDefaultFilterOptions = function () {
    return NumberFilter.DEFAULT_FILTER_OPTIONS;
  };
  NumberFloatingFilter.prototype.conditionToString = function (condition) {
    var isRange = condition.type == SimpleFilter.IN_RANGE;
    if (isRange) {
      return condition.filter + "-" + condition.filterTo;
    }
    // cater for when the type doesn't need a value
    if (condition.filter != null) {
      return "" + condition.filter;
    }
    return "" + condition.type;
  };
  return NumberFloatingFilter;
}(TextInputFloatingFilter);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$C =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var TextFloatingFilter = /** @class */function (_super) {
  __extends$C(TextFloatingFilter, _super);
  function TextFloatingFilter() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  TextFloatingFilter.prototype.conditionToString = function (condition) {
    // it's not possible to have 'in range' for string, so no need to check for it.
    // also cater for when the type doesn't need a value
    if (condition.filter != null) {
      return "" + condition.filter;
    } else {
      return "" + condition.type;
    }
  };
  TextFloatingFilter.prototype.getDefaultFilterOptions = function () {
    return TextFilter.DEFAULT_FILTER_OPTIONS;
  };
  return TextFloatingFilter;
}(TextInputFloatingFilter);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$D =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$y =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RegisteredComponentSource;
(function (RegisteredComponentSource) {
  RegisteredComponentSource[RegisteredComponentSource["DEFAULT"] = 0] = "DEFAULT";
  RegisteredComponentSource[RegisteredComponentSource["REGISTERED"] = 1] = "REGISTERED";
})(RegisteredComponentSource || (RegisteredComponentSource = {}));
var UserComponentRegistry = /** @class */function (_super) {
  __extends$D(UserComponentRegistry, _super);
  function UserComponentRegistry() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.agGridDefaults = {
      //date
      agDateInput: DefaultDateComponent,
      //header
      agColumnHeader: HeaderComp,
      agColumnGroupHeader: HeaderGroupComp,
      //floating filters
      agTextColumnFloatingFilter: TextFloatingFilter,
      agNumberColumnFloatingFilter: NumberFloatingFilter,
      agDateColumnFloatingFilter: DateFloatingFilter,
      // renderers
      agAnimateShowChangeCellRenderer: AnimateShowChangeCellRenderer,
      agAnimateSlideCellRenderer: AnimateSlideCellRenderer,
      agGroupCellRenderer: GroupCellRenderer,
      agGroupRowRenderer: GroupCellRenderer,
      agLoadingCellRenderer: LoadingCellRenderer,
      //editors
      agCellEditor: TextCellEditor,
      agTextCellEditor: TextCellEditor,
      agSelectCellEditor: SelectCellEditor,
      agPopupTextCellEditor: PopupTextCellEditor,
      agPopupSelectCellEditor: PopupSelectCellEditor,
      agLargeTextCellEditor: LargeTextCellEditor,
      //filter
      agTextColumnFilter: TextFilter,
      agNumberColumnFilter: NumberFilter,
      agDateColumnFilter: DateFilter,
      //overlays
      agLoadingOverlay: LoadingOverlayComponent$1,
      agNoRowsOverlay: NoRowsOverlayComponent$1,
      // tooltips
      agTooltipComponent: TooltipComponent$1
    };
    _this.agDeprecatedNames = {
      set: {
        newComponentName: 'agSetColumnFilter',
        propertyHolder: 'filter'
      },
      text: {
        newComponentName: 'agTextColumnFilter',
        propertyHolder: 'filter'
      },
      number: {
        newComponentName: 'agNumberColumnFilter',
        propertyHolder: 'filter'
      },
      date: {
        newComponentName: 'agDateColumnFilter',
        propertyHolder: 'filter'
      },
      group: {
        newComponentName: 'agGroupCellRenderer',
        propertyHolder: 'cellRenderer'
      },
      animateShowChange: {
        newComponentName: 'agAnimateShowChangeCellRenderer',
        propertyHolder: 'cellRenderer'
      },
      animateSlide: {
        newComponentName: 'agAnimateSlideCellRenderer',
        propertyHolder: 'cellRenderer'
      },
      select: {
        newComponentName: 'agSelectCellEditor',
        propertyHolder: 'cellEditor'
      },
      largeText: {
        newComponentName: 'agLargeTextCellEditor',
        propertyHolder: 'cellEditor'
      },
      popupSelect: {
        newComponentName: 'agPopupSelectCellEditor',
        propertyHolder: 'cellEditor'
      },
      popupText: {
        newComponentName: 'agPopupTextCellEditor',
        propertyHolder: 'cellEditor'
      },
      richSelect: {
        newComponentName: 'agRichSelectCellEditor',
        propertyHolder: 'cellEditor'
      },
      headerComponent: {
        newComponentName: 'agColumnHeader',
        propertyHolder: 'headerComponent'
      }
    };
    _this.jsComponents = {};
    _this.frameworkComponents = {};
    return _this;
  }
  UserComponentRegistry.prototype.init = function () {
    var _this = this;
    if (this.gridOptions.components != null) {
      iterateObject(this.gridOptions.components, function (key, component) {
        return _this.registerComponent(key, component);
      });
    }
    if (this.gridOptions.frameworkComponents != null) {
      iterateObject(this.gridOptions.frameworkComponents, function (key, component) {
        return _this.registerFwComponent(key, component);
      });
    }
  };
  UserComponentRegistry.prototype.registerDefaultComponent = function (rawName, component) {
    var name = this.translateIfDeprecated(rawName);
    if (this.agGridDefaults[name]) {
      console.error("Trying to overwrite a default component. You should call registerComponent");
      return;
    }
    this.agGridDefaults[name] = component;
  };
  UserComponentRegistry.prototype.registerComponent = function (rawName, component) {
    var name = this.translateIfDeprecated(rawName);
    if (this.frameworkComponents[name]) {
      console.error("Trying to register a component that you have already registered for frameworks: " + name);
      return;
    }
    this.jsComponents[name] = component;
  };
  /**
   * B the business interface (ie IHeader)
   * A the agGridComponent interface (ie IHeaderComp). The final object acceptable by ag-grid
   */
  UserComponentRegistry.prototype.registerFwComponent = function (rawName, component) {
    var name = this.translateIfDeprecated(rawName);
    if (this.jsComponents[name]) {
      console.error("Trying to register a component that you have already registered for plain javascript: " + name);
      return;
    }
    this.frameworkComponents[name] = component;
  };
  /**
   * B the business interface (ie IHeader)
   * A the agGridComponent interface (ie IHeaderComp). The final object acceptable by ag-grid
   */
  UserComponentRegistry.prototype.retrieve = function (rawName) {
    var name = this.translateIfDeprecated(rawName);
    var frameworkComponent = this.frameworkComponents[name];
    if (frameworkComponent) {
      return {
        componentFromFramework: true,
        component: frameworkComponent,
        source: RegisteredComponentSource.REGISTERED
      };
    }
    var jsComponent = this.jsComponents[name];
    if (jsComponent) {
      return {
        componentFromFramework: false,
        component: jsComponent,
        source: RegisteredComponentSource.REGISTERED
      };
    }
    var defaultComponent = this.agGridDefaults[name];
    if (defaultComponent) {
      return {
        componentFromFramework: false,
        component: defaultComponent,
        source: RegisteredComponentSource.DEFAULT
      };
    }
    if (Object.keys(this.agGridDefaults).indexOf(name) < 0) {
      console.warn("AG Grid: Looking for component [" + name + "] but it wasn't found.");
    }
    return null;
  };
  UserComponentRegistry.prototype.translateIfDeprecated = function (raw) {
    var deprecatedInfo = this.agDeprecatedNames[raw];
    if (deprecatedInfo != null) {
      doOnce(function () {
        console.warn("ag-grid. Since v15.0 component names have been renamed to be namespaced. You should rename " + deprecatedInfo.propertyHolder + ":" + raw + " to " + deprecatedInfo.propertyHolder + ":" + deprecatedInfo.newComponentName);
      }, 'DEPRECATE_COMPONENT_' + raw);
      return deprecatedInfo.newComponentName;
    }
    return raw;
  };
  __decorate$y([Autowired('gridOptions')], UserComponentRegistry.prototype, "gridOptions", void 0);
  __decorate$y([PostConstruct], UserComponentRegistry.prototype, "init", null);
  UserComponentRegistry = __decorate$y([Bean('userComponentRegistry')], UserComponentRegistry);
  return UserComponentRegistry;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var SideBarDefParser = /** @class */function () {
  function SideBarDefParser() {}
  SideBarDefParser.parse = function (toParse) {
    if (!toParse) {
      return null;
    }
    if (toParse === true) {
      return {
        toolPanels: [SideBarDefParser.DEFAULT_COLUMN_COMP, SideBarDefParser.DEFAULT_FILTER_COMP],
        defaultToolPanel: 'columns'
      };
    }
    if (typeof toParse === 'string') {
      return SideBarDefParser.parse([toParse]);
    }
    if (Array.isArray(toParse)) {
      var comps_1 = [];
      toParse.forEach(function (key) {
        var lookupResult = SideBarDefParser.DEFAULT_BY_KEY[key];
        if (!lookupResult) {
          console.warn("ag-grid: the key " + key + " is not a valid key for specifying a tool panel, valid keys are: " + Object.keys(SideBarDefParser.DEFAULT_BY_KEY).join(','));
          return;
        }
        comps_1.push(lookupResult);
      });
      if (comps_1.length === 0) {
        return null;
      }
      return {
        toolPanels: comps_1,
        defaultToolPanel: comps_1[0].id
      };
    }
    var result = {
      toolPanels: SideBarDefParser.parseComponents(toParse.toolPanels),
      defaultToolPanel: toParse.defaultToolPanel,
      hiddenByDefault: toParse.hiddenByDefault,
      position: toParse.position
    };
    return result;
  };
  SideBarDefParser.parseComponents = function (from) {
    var result = [];
    if (!from) {
      return result;
    }
    from.forEach(function (it) {
      var toAdd = null;
      if (typeof it === 'string') {
        var lookupResult = SideBarDefParser.DEFAULT_BY_KEY[it];
        if (!lookupResult) {
          console.warn("ag-grid: the key " + it + " is not a valid key for specifying a tool panel, valid keys are: " + Object.keys(SideBarDefParser.DEFAULT_BY_KEY).join(','));
          return;
        }
        toAdd = lookupResult;
      } else {
        toAdd = it;
      }
      result.push(toAdd);
    });
    return result;
  };
  SideBarDefParser.DEFAULT_COLUMN_COMP = {
    id: 'columns',
    labelDefault: 'Columns',
    labelKey: 'columns',
    iconKey: 'columns',
    toolPanel: 'agColumnsToolPanel'
  };
  SideBarDefParser.DEFAULT_FILTER_COMP = {
    id: 'filters',
    labelDefault: 'Filters',
    labelKey: 'filters',
    iconKey: 'filter',
    toolPanel: 'agFiltersToolPanel'
  };
  SideBarDefParser.DEFAULT_BY_KEY = {
    columns: SideBarDefParser.DEFAULT_COLUMN_COMP,
    filters: SideBarDefParser.DEFAULT_FILTER_COMP
  };
  return SideBarDefParser;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __decorate$z =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param$3 =  false || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};
var __spreadArrays$3 =  false || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
};
var DEFAULT_ROW_HEIGHT = 25;
var DEFAULT_DETAIL_ROW_HEIGHT = 300;
var DEFAULT_VIEWPORT_ROW_MODEL_PAGE_SIZE = 5;
var DEFAULT_VIEWPORT_ROW_MODEL_BUFFER_SIZE = 5;
var DEFAULT_KEEP_DETAIL_ROW_COUNT = 10;
function isTrue(value) {
  return value === true || value === 'true';
}
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (typeof value == 'string') {
    return parseInt(value, 10);
  }
}
function zeroOrGreater(value, defaultValue) {
  if (value >= 0) {
    return value;
  }
  // zero gets returned if number is missing or the wrong type
  return defaultValue;
}
function oneOrGreater(value, defaultValue) {
  var valueNumber = parseInt(value, 10);
  if (isNumeric(valueNumber) && valueNumber > 0) {
    return valueNumber;
  }
  return defaultValue;
}
var GridOptionsWrapper = /** @class */function () {
  function GridOptionsWrapper() {
    this.propertyEventService = new EventService();
    this.domDataKey = '__AG_' + Math.random().toString();
    this.destroyed = false;
  }
  GridOptionsWrapper_1 = GridOptionsWrapper;
  GridOptionsWrapper.prototype.agWire = function (gridApi, columnApi) {
    this.gridOptions.api = gridApi;
    this.gridOptions.columnApi = columnApi;
    this.checkForDeprecated();
    this.checkForViolations();
  };
  GridOptionsWrapper.prototype.destroy = function () {
    // need to remove these, as we don't own the lifecycle of the gridOptions, we need to
    // remove the references in case the user keeps the grid options, we want the rest
    // of the grid to be picked up by the garbage collector
    this.gridOptions.api = null;
    this.gridOptions.columnApi = null;
    this.removeEventListener(GridOptionsWrapper_1.PROP_DOM_LAYOUT, this.updateLayoutClassesListener);
    this.destroyed = true;
  };
  GridOptionsWrapper.prototype.init = function () {
    var _this = this;
    if (this.gridOptions.suppressPropertyNamesCheck !== true) {
      this.checkGridOptionsProperties();
      this.checkColumnDefProperties();
    }
    // parse side bar options into correct format
    if (this.gridOptions.sideBar != null) {
      this.gridOptions.sideBar = SideBarDefParser.parse(this.gridOptions.sideBar);
    }
    var async = this.useAsyncEvents();
    this.eventService.addGlobalListener(this.globalEventHandler.bind(this), async);
    if (this.isGroupSelectsChildren() && this.isSuppressParentsInRowNodes()) {
      console.warn("AG Grid: 'groupSelectsChildren' does not work with 'suppressParentsInRowNodes', this selection method needs the part in rowNode to work");
    }
    if (this.isGroupSelectsChildren()) {
      if (!this.isRowSelectionMulti()) {
        console.warn("AG Grid: rowSelection must be 'multiple' for groupSelectsChildren to make sense");
      }
      if (this.isRowModelServerSide()) {
        console.warn('AG Grid: group selects children is NOT support for Server Side Row Model. ' + 'This is because the rows are lazy loaded, so selecting a group is not possible as' + 'the grid has no way of knowing what the children are.');
      }
    }
    if (this.isGroupRemoveSingleChildren() && this.isGroupHideOpenParents()) {
      console.warn("AG Grid: groupRemoveSingleChildren and groupHideOpenParents do not work with each other, you need to pick one. And don't ask us how to us these together on our support forum either you will get the same answer!");
    }
    if (this.isRowModelServerSide()) {
      var msg = function (prop) {
        return "AG Grid: '" + prop + "' is not supported on the Server-Side Row Model";
      };
      if (exists(this.gridOptions.groupDefaultExpanded)) {
        console.warn(msg('groupDefaultExpanded'));
      }
      if (exists(this.gridOptions.groupDefaultExpanded)) {
        console.warn(msg('groupIncludeFooter'));
      }
      if (exists(this.gridOptions.groupDefaultExpanded)) {
        console.warn(msg('groupIncludeTotalFooter'));
      }
    }
    if (this.isEnableRangeSelection()) {
      ModuleRegistry.assertRegistered(exports.ModuleNames.RangeSelectionModule, 'enableRangeSelection');
    }
    if (!this.isEnableRangeSelection() && (this.isEnableRangeHandle() || this.isEnableFillHandle())) {
      console.warn("AG Grid: 'enableRangeHandle' and 'enableFillHandle' will not work unless 'enableRangeSelection' is set to true");
    }
    var warnOfDeprecaredIcon = function (name) {
      if (_this.gridOptions.icons && _this.gridOptions.icons[name]) {
        console.warn("gridOptions.icons." + name + " is no longer supported. For information on how to style checkboxes and radio buttons, see https://www.ag-grid.com/javascript-grid-icons/");
      }
    };
    warnOfDeprecaredIcon('radioButtonOff');
    warnOfDeprecaredIcon('radioButtonOn');
    warnOfDeprecaredIcon('checkboxChecked');
    warnOfDeprecaredIcon('checkboxUnchecked');
    warnOfDeprecaredIcon('checkboxIndeterminate');
    // sets an initial calculation for the scrollbar width
    this.getScrollbarWidth();
  };
  GridOptionsWrapper.prototype.checkColumnDefProperties = function () {
    var _this = this;
    if (this.gridOptions.columnDefs == null) {
      return;
    }
    this.gridOptions.columnDefs.forEach(function (colDef) {
      var userProperties = Object.getOwnPropertyNames(colDef);
      var validProperties = __spreadArrays$3(ColDefUtil.ALL_PROPERTIES, ColDefUtil.FRAMEWORK_PROPERTIES);
      _this.checkProperties(userProperties, validProperties, validProperties, 'colDef', 'https://www.ag-grid.com/javascript-grid-column-properties/');
    });
  };
  GridOptionsWrapper.prototype.checkGridOptionsProperties = function () {
    var userProperties = Object.getOwnPropertyNames(this.gridOptions);
    var validProperties = __spreadArrays$3(PropertyKeys.ALL_PROPERTIES, PropertyKeys.FRAMEWORK_PROPERTIES, values(Events).map(function (event) {
      return ComponentUtil.getCallbackForEvent(event);
    }));
    var validPropertiesAndExceptions = __spreadArrays$3(validProperties, ['api', 'columnApi']);
    this.checkProperties(userProperties, validPropertiesAndExceptions, validProperties, 'gridOptions', 'https://www.ag-grid.com/javascript-grid-properties/');
  };
  GridOptionsWrapper.prototype.checkProperties = function (userProperties, validPropertiesAndExceptions, validProperties, containerName, docsUrl) {
    var invalidProperties = fuzzyCheckStrings(userProperties, validPropertiesAndExceptions, validProperties);
    iterateObject(invalidProperties, function (key, value) {
      console.warn("ag-grid: invalid " + containerName + " property '" + key + "' did you mean any of these: " + value.slice(0, 8).join(", "));
    });
    if (Object.keys(invalidProperties).length > 0) {
      console.warn("ag-grid: to see all the valid " + containerName + " properties please check: " + docsUrl);
    }
  };
  GridOptionsWrapper.prototype.getDomDataKey = function () {
    return this.domDataKey;
  };
  // returns the dom data, or undefined if not found
  GridOptionsWrapper.prototype.getDomData = function (element, key) {
    var domData = element[this.getDomDataKey()];
    return domData ? domData[key] : undefined;
  };
  GridOptionsWrapper.prototype.setDomData = function (element, key, value) {
    var domDataKey = this.getDomDataKey();
    var domData = element[domDataKey];
    if (missing(domData)) {
      domData = {};
      element[domDataKey] = domData;
    }
    domData[key] = value;
  };
  GridOptionsWrapper.prototype.isRowSelection = function () {
    return this.gridOptions.rowSelection === 'single' || this.gridOptions.rowSelection === 'multiple';
  };
  GridOptionsWrapper.prototype.isSuppressRowDeselection = function () {
    return isTrue(this.gridOptions.suppressRowDeselection);
  };
  GridOptionsWrapper.prototype.isRowSelectionMulti = function () {
    return this.gridOptions.rowSelection === 'multiple';
  };
  GridOptionsWrapper.prototype.isRowMultiSelectWithClick = function () {
    return isTrue(this.gridOptions.rowMultiSelectWithClick);
  };
  GridOptionsWrapper.prototype.getContext = function () {
    return this.gridOptions.context;
  };
  GridOptionsWrapper.prototype.isPivotMode = function () {
    return isTrue(this.gridOptions.pivotMode);
  };
  GridOptionsWrapper.prototype.isSuppressExpandablePivotGroups = function () {
    return isTrue(this.gridOptions.suppressExpandablePivotGroups);
  };
  GridOptionsWrapper.prototype.getPivotColumnGroupTotals = function () {
    return this.gridOptions.pivotColumnGroupTotals;
  };
  GridOptionsWrapper.prototype.getPivotRowTotals = function () {
    return this.gridOptions.pivotRowTotals;
  };
  GridOptionsWrapper.prototype.isRowModelInfinite = function () {
    return this.gridOptions.rowModelType === Constants.ROW_MODEL_TYPE_INFINITE;
  };
  GridOptionsWrapper.prototype.isRowModelViewport = function () {
    return this.gridOptions.rowModelType === Constants.ROW_MODEL_TYPE_VIEWPORT;
  };
  GridOptionsWrapper.prototype.isRowModelServerSide = function () {
    return this.gridOptions.rowModelType === Constants.ROW_MODEL_TYPE_SERVER_SIDE;
  };
  GridOptionsWrapper.prototype.isRowModelDefault = function () {
    return missing(this.gridOptions.rowModelType) || this.gridOptions.rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
  };
  GridOptionsWrapper.prototype.isFullRowEdit = function () {
    return this.gridOptions.editType === 'fullRow';
  };
  GridOptionsWrapper.prototype.isSuppressFocusAfterRefresh = function () {
    return isTrue(this.gridOptions.suppressFocusAfterRefresh);
  };
  GridOptionsWrapper.prototype.isSuppressBrowserResizeObserver = function () {
    return isTrue(this.gridOptions.suppressBrowserResizeObserver);
  };
  GridOptionsWrapper.prototype.isSuppressMaintainUnsortedOrder = function () {
    return isTrue(this.gridOptions.suppressMaintainUnsortedOrder);
  };
  GridOptionsWrapper.prototype.isSuppressClearOnFillReduction = function () {
    return isTrue(this.gridOptions.suppressClearOnFillReduction);
  };
  GridOptionsWrapper.prototype.isShowToolPanel = function () {
    return isTrue(this.gridOptions.sideBar && Array.isArray(this.getSideBar().toolPanels));
  };
  GridOptionsWrapper.prototype.getSideBar = function () {
    return this.gridOptions.sideBar;
  };
  GridOptionsWrapper.prototype.isSuppressTouch = function () {
    return isTrue(this.gridOptions.suppressTouch);
  };
  GridOptionsWrapper.prototype.isApplyColumnDefOrder = function () {
    return isTrue(this.gridOptions.applyColumnDefOrder);
  };
  GridOptionsWrapper.prototype.isSuppressRowTransform = function () {
    return isTrue(this.gridOptions.suppressRowTransform);
  };
  GridOptionsWrapper.prototype.isSuppressColumnStateEvents = function () {
    return isTrue(this.gridOptions.suppressColumnStateEvents);
  };
  GridOptionsWrapper.prototype.isAllowDragFromColumnsToolPanel = function () {
    return isTrue(this.gridOptions.allowDragFromColumnsToolPanel);
  };
  GridOptionsWrapper.prototype.useAsyncEvents = function () {
    return !isTrue(this.gridOptions.suppressAsyncEvents);
  };
  GridOptionsWrapper.prototype.isEnableCellChangeFlash = function () {
    return isTrue(this.gridOptions.enableCellChangeFlash);
  };
  GridOptionsWrapper.prototype.getCellFlashDelay = function () {
    return this.gridOptions.cellFlashDelay || 500;
  };
  GridOptionsWrapper.prototype.getCellFadeDelay = function () {
    return this.gridOptions.cellFadeDelay || 1000;
  };
  GridOptionsWrapper.prototype.isGroupSelectsChildren = function () {
    var result = isTrue(this.gridOptions.groupSelectsChildren);
    if (result && this.isTreeData()) {
      console.warn('AG Grid: groupSelectsChildren does not work with tree data');
      return false;
    }
    return result;
  };
  GridOptionsWrapper.prototype.isSuppressRowHoverHighlight = function () {
    return isTrue(this.gridOptions.suppressRowHoverHighlight);
  };
  GridOptionsWrapper.prototype.isGroupSelectsFiltered = function () {
    return isTrue(this.gridOptions.groupSelectsFiltered);
  };
  GridOptionsWrapper.prototype.isGroupHideOpenParents = function () {
    return isTrue(this.gridOptions.groupHideOpenParents);
  };
  // if we are doing hideOpenParents, then we always have groupMultiAutoColumn, otherwise hideOpenParents would not work
  GridOptionsWrapper.prototype.isGroupMultiAutoColumn = function () {
    return isTrue(this.gridOptions.groupMultiAutoColumn) || isTrue(this.gridOptions.groupHideOpenParents);
  };
  GridOptionsWrapper.prototype.isGroupRemoveSingleChildren = function () {
    return isTrue(this.gridOptions.groupRemoveSingleChildren);
  };
  GridOptionsWrapper.prototype.isGroupRemoveLowestSingleChildren = function () {
    return isTrue(this.gridOptions.groupRemoveLowestSingleChildren);
  };
  GridOptionsWrapper.prototype.isGroupIncludeFooter = function () {
    return isTrue(this.gridOptions.groupIncludeFooter);
  };
  GridOptionsWrapper.prototype.isGroupIncludeTotalFooter = function () {
    return isTrue(this.gridOptions.groupIncludeTotalFooter);
  };
  GridOptionsWrapper.prototype.isGroupSuppressBlankHeader = function () {
    return isTrue(this.gridOptions.groupSuppressBlankHeader);
  };
  GridOptionsWrapper.prototype.isSuppressRowClickSelection = function () {
    return isTrue(this.gridOptions.suppressRowClickSelection);
  };
  GridOptionsWrapper.prototype.isSuppressCellSelection = function () {
    return isTrue(this.gridOptions.suppressCellSelection);
  };
  GridOptionsWrapper.prototype.isSuppressMultiSort = function () {
    return isTrue(this.gridOptions.suppressMultiSort);
  };
  GridOptionsWrapper.prototype.isMultiSortKeyCtrl = function () {
    return this.gridOptions.multiSortKey === 'ctrl';
  };
  GridOptionsWrapper.prototype.isGroupSuppressAutoColumn = function () {
    return isTrue(this.gridOptions.groupSuppressAutoColumn);
  };
  GridOptionsWrapper.prototype.isPivotSuppressAutoColumn = function () {
    return isTrue(this.gridOptions.pivotSuppressAutoColumn);
  };
  GridOptionsWrapper.prototype.isSuppressDragLeaveHidesColumns = function () {
    return isTrue(this.gridOptions.suppressDragLeaveHidesColumns);
  };
  GridOptionsWrapper.prototype.isSuppressScrollOnNewData = function () {
    return isTrue(this.gridOptions.suppressScrollOnNewData);
  };
  GridOptionsWrapper.prototype.isRowDragManaged = function () {
    return isTrue(this.gridOptions.rowDragManaged);
  };
  GridOptionsWrapper.prototype.isSuppressRowDrag = function () {
    return isTrue(this.gridOptions.suppressRowDrag);
  };
  GridOptionsWrapper.prototype.isSuppressMoveWhenRowDragging = function () {
    return isTrue(this.gridOptions.suppressMoveWhenRowDragging);
  };
  GridOptionsWrapper.prototype.isEnableMultiRowDragging = function () {
    return isTrue(this.gridOptions.enableMultiRowDragging);
  };
  // returns either 'print', 'autoHeight' or 'normal' (normal is the default)
  GridOptionsWrapper.prototype.getDomLayout = function () {
    var domLayout = this.gridOptions.domLayout || Constants.DOM_LAYOUT_NORMAL;
    var validLayouts = [Constants.DOM_LAYOUT_PRINT, Constants.DOM_LAYOUT_AUTO_HEIGHT, Constants.DOM_LAYOUT_NORMAL];
    if (validLayouts.indexOf(domLayout) === -1) {
      doOnce(function () {
        return console.warn("AG Grid: " + domLayout + " is not valid for DOM Layout, valid values are " + Constants.DOM_LAYOUT_NORMAL + ", " + Constants.DOM_LAYOUT_AUTO_HEIGHT + " and " + Constants.DOM_LAYOUT_PRINT);
      }, 'warn about dom layout values');
      return Constants.DOM_LAYOUT_NORMAL;
    }
    return domLayout;
  };
  GridOptionsWrapper.prototype.isSuppressHorizontalScroll = function () {
    return isTrue(this.gridOptions.suppressHorizontalScroll);
  };
  GridOptionsWrapper.prototype.isSuppressMaxRenderedRowRestriction = function () {
    return isTrue(this.gridOptions.suppressMaxRenderedRowRestriction);
  };
  GridOptionsWrapper.prototype.isExcludeChildrenWhenTreeDataFiltering = function () {
    return isTrue(this.gridOptions.excludeChildrenWhenTreeDataFiltering);
  };
  GridOptionsWrapper.prototype.isAlwaysShowHorizontalScroll = function () {
    return isTrue(this.gridOptions.alwaysShowHorizontalScroll);
  };
  GridOptionsWrapper.prototype.isAlwaysShowVerticalScroll = function () {
    return isTrue(this.gridOptions.alwaysShowVerticalScroll);
  };
  GridOptionsWrapper.prototype.isDebounceVerticalScrollbar = function () {
    return isTrue(this.gridOptions.debounceVerticalScrollbar);
  };
  GridOptionsWrapper.prototype.isSuppressLoadingOverlay = function () {
    return isTrue(this.gridOptions.suppressLoadingOverlay);
  };
  GridOptionsWrapper.prototype.isSuppressNoRowsOverlay = function () {
    return isTrue(this.gridOptions.suppressNoRowsOverlay);
  };
  GridOptionsWrapper.prototype.isSuppressFieldDotNotation = function () {
    return isTrue(this.gridOptions.suppressFieldDotNotation);
  };
  GridOptionsWrapper.prototype.getPinnedTopRowData = function () {
    return this.gridOptions.pinnedTopRowData;
  };
  GridOptionsWrapper.prototype.getPinnedBottomRowData = function () {
    return this.gridOptions.pinnedBottomRowData;
  };
  GridOptionsWrapper.prototype.isFunctionsPassive = function () {
    return isTrue(this.gridOptions.functionsPassive);
  };
  GridOptionsWrapper.prototype.isSuppressChangeDetection = function () {
    return isTrue(this.gridOptions.suppressChangeDetection);
  };
  GridOptionsWrapper.prototype.isSuppressAnimationFrame = function () {
    return isTrue(this.gridOptions.suppressAnimationFrame);
  };
  GridOptionsWrapper.prototype.getQuickFilterText = function () {
    return this.gridOptions.quickFilterText;
  };
  GridOptionsWrapper.prototype.isCacheQuickFilter = function () {
    return isTrue(this.gridOptions.cacheQuickFilter);
  };
  GridOptionsWrapper.prototype.isUnSortIcon = function () {
    return isTrue(this.gridOptions.unSortIcon);
  };
  GridOptionsWrapper.prototype.isSuppressMenuHide = function () {
    return isTrue(this.gridOptions.suppressMenuHide);
  };
  GridOptionsWrapper.prototype.isEnterMovesDownAfterEdit = function () {
    return isTrue(this.gridOptions.enterMovesDownAfterEdit);
  };
  GridOptionsWrapper.prototype.isEnterMovesDown = function () {
    return isTrue(this.gridOptions.enterMovesDown);
  };
  GridOptionsWrapper.prototype.isUndoRedoCellEditing = function () {
    return isTrue(this.gridOptions.undoRedoCellEditing);
  };
  GridOptionsWrapper.prototype.getUndoRedoCellEditingLimit = function () {
    return this.gridOptions.undoRedoCellEditingLimit;
  };
  GridOptionsWrapper.prototype.getRowStyle = function () {
    return this.gridOptions.rowStyle;
  };
  GridOptionsWrapper.prototype.getRowClass = function () {
    return this.gridOptions.rowClass;
  };
  GridOptionsWrapper.prototype.getRowStyleFunc = function () {
    return this.gridOptions.getRowStyle;
  };
  GridOptionsWrapper.prototype.getRowClassFunc = function () {
    return this.gridOptions.getRowClass;
  };
  GridOptionsWrapper.prototype.rowClassRules = function () {
    return this.gridOptions.rowClassRules;
  };
  GridOptionsWrapper.prototype.getServerSideStoreType = function () {
    return this.gridOptions.serverSideStoreType;
  };
  GridOptionsWrapper.prototype.getServerSideStoreParamsFunc = function () {
    return this.gridOptions.getServerSideStoreParams;
  };
  GridOptionsWrapper.prototype.getCreateChartContainerFunc = function () {
    return this.gridOptions.createChartContainer;
  };
  GridOptionsWrapper.prototype.getPopupParent = function () {
    return this.gridOptions.popupParent;
  };
  GridOptionsWrapper.prototype.getBlockLoadDebounceMillis = function () {
    return this.gridOptions.blockLoadDebounceMillis;
  };
  GridOptionsWrapper.prototype.getPostProcessPopupFunc = function () {
    return this.gridOptions.postProcessPopup;
  };
  GridOptionsWrapper.prototype.getPaginationNumberFormatterFunc = function () {
    return this.gridOptions.paginationNumberFormatter;
  };
  GridOptionsWrapper.prototype.getChildCountFunc = function () {
    return this.gridOptions.getChildCount;
  };
  GridOptionsWrapper.prototype.getIsApplyServerSideTransactionFunc = function () {
    return this.gridOptions.isApplyServerSideTransaction;
  };
  GridOptionsWrapper.prototype.getDefaultGroupSortComparator = function () {
    return this.gridOptions.defaultGroupSortComparator;
  };
  GridOptionsWrapper.prototype.getIsFullWidthCellFunc = function () {
    return this.gridOptions.isFullWidthCell;
  };
  GridOptionsWrapper.prototype.getFullWidthCellRendererParams = function () {
    return this.gridOptions.fullWidthCellRendererParams;
  };
  GridOptionsWrapper.prototype.isEmbedFullWidthRows = function () {
    return isTrue(this.gridOptions.embedFullWidthRows) || isTrue(this.gridOptions.deprecatedEmbedFullWidthRows);
  };
  GridOptionsWrapper.prototype.isDetailRowAutoHeight = function () {
    return isTrue(this.gridOptions.detailRowAutoHeight);
  };
  GridOptionsWrapper.prototype.getSuppressKeyboardEventFunc = function () {
    return this.gridOptions.suppressKeyboardEvent;
  };
  GridOptionsWrapper.prototype.getBusinessKeyForNodeFunc = function () {
    return this.gridOptions.getBusinessKeyForNode;
  };
  GridOptionsWrapper.prototype.getApi = function () {
    return this.gridOptions.api;
  };
  GridOptionsWrapper.prototype.getColumnApi = function () {
    return this.gridOptions.columnApi;
  };
  GridOptionsWrapper.prototype.isImmutableData = function () {
    return isTrue(this.gridOptions.immutableData);
  };
  GridOptionsWrapper.prototype.isEnsureDomOrder = function () {
    return isTrue(this.gridOptions.ensureDomOrder);
  };
  GridOptionsWrapper.prototype.isEnableCharts = function () {
    if (isTrue(this.gridOptions.enableCharts)) {
      return ModuleRegistry.assertRegistered(exports.ModuleNames.GridChartsModule, 'enableCharts');
    }
    return false;
  };
  GridOptionsWrapper.prototype.getColResizeDefault = function () {
    return this.gridOptions.colResizeDefault;
  };
  GridOptionsWrapper.prototype.isSingleClickEdit = function () {
    return isTrue(this.gridOptions.singleClickEdit);
  };
  GridOptionsWrapper.prototype.isSuppressClickEdit = function () {
    return isTrue(this.gridOptions.suppressClickEdit);
  };
  GridOptionsWrapper.prototype.isStopEditingWhenCellsLoseFocus = function () {
    return isTrue(this.gridOptions.stopEditingWhenCellsLoseFocus);
  };
  GridOptionsWrapper.prototype.getGroupDefaultExpanded = function () {
    return this.gridOptions.groupDefaultExpanded;
  };
  GridOptionsWrapper.prototype.getMaxConcurrentDatasourceRequests = function () {
    return this.gridOptions.maxConcurrentDatasourceRequests;
  };
  GridOptionsWrapper.prototype.getMaxBlocksInCache = function () {
    return this.gridOptions.maxBlocksInCache;
  };
  GridOptionsWrapper.prototype.getCacheOverflowSize = function () {
    return this.gridOptions.cacheOverflowSize;
  };
  GridOptionsWrapper.prototype.getPaginationPageSize = function () {
    return toNumber(this.gridOptions.paginationPageSize);
  };
  GridOptionsWrapper.prototype.isPaginateChildRows = function () {
    var shouldPaginate = this.isGroupRemoveSingleChildren() || this.isGroupRemoveLowestSingleChildren();
    if (shouldPaginate) {
      return true;
    }
    return isTrue(this.gridOptions.paginateChildRows);
  };
  GridOptionsWrapper.prototype.getCacheBlockSize = function () {
    return oneOrGreater(this.gridOptions.cacheBlockSize);
  };
  GridOptionsWrapper.prototype.getInfiniteInitialRowCount = function () {
    return this.gridOptions.infiniteInitialRowCount;
  };
  GridOptionsWrapper.prototype.isPurgeClosedRowNodes = function () {
    return isTrue(this.gridOptions.purgeClosedRowNodes);
  };
  GridOptionsWrapper.prototype.isSuppressPaginationPanel = function () {
    return isTrue(this.gridOptions.suppressPaginationPanel);
  };
  GridOptionsWrapper.prototype.getRowData = function () {
    return this.gridOptions.rowData;
  };
  // this property is different - we never allow groupUseEntireRow if in pivot mode,
  // as otherwise we don't see the pivot values.
  GridOptionsWrapper.prototype.isGroupUseEntireRow = function (pivotMode) {
    return pivotMode ? false : isTrue(this.gridOptions.groupUseEntireRow);
  };
  GridOptionsWrapper.prototype.isEnableRtl = function () {
    return isTrue(this.gridOptions.enableRtl);
  };
  GridOptionsWrapper.prototype.getAutoGroupColumnDef = function () {
    return this.gridOptions.autoGroupColumnDef;
  };
  GridOptionsWrapper.prototype.getRowGroupPanelShow = function () {
    return this.gridOptions.rowGroupPanelShow;
  };
  GridOptionsWrapper.prototype.getPivotPanelShow = function () {
    return this.gridOptions.pivotPanelShow;
  };
  GridOptionsWrapper.prototype.isAngularCompileRows = function () {
    return isTrue(this.gridOptions.angularCompileRows);
  };
  GridOptionsWrapper.prototype.isAngularCompileFilters = function () {
    return isTrue(this.gridOptions.angularCompileFilters);
  };
  GridOptionsWrapper.prototype.isDebug = function () {
    return isTrue(this.gridOptions.debug);
  };
  GridOptionsWrapper.prototype.getColumnDefs = function () {
    return this.gridOptions.columnDefs;
  };
  GridOptionsWrapper.prototype.getColumnTypes = function () {
    return this.gridOptions.columnTypes;
  };
  GridOptionsWrapper.prototype.getDatasource = function () {
    return this.gridOptions.datasource;
  };
  GridOptionsWrapper.prototype.getViewportDatasource = function () {
    return this.gridOptions.viewportDatasource;
  };
  GridOptionsWrapper.prototype.getServerSideDatasource = function () {
    return this.gridOptions.serverSideDatasource;
  };
  GridOptionsWrapper.prototype.isAccentedSort = function () {
    return isTrue(this.gridOptions.accentedSort);
  };
  GridOptionsWrapper.prototype.isEnableBrowserTooltips = function () {
    return isTrue(this.gridOptions.enableBrowserTooltips);
  };
  GridOptionsWrapper.prototype.isEnableCellExpressions = function () {
    return isTrue(this.gridOptions.enableCellExpressions);
  };
  GridOptionsWrapper.prototype.isEnableGroupEdit = function () {
    return isTrue(this.gridOptions.enableGroupEdit);
  };
  GridOptionsWrapper.prototype.isSuppressMiddleClickScrolls = function () {
    return isTrue(this.gridOptions.suppressMiddleClickScrolls);
  };
  GridOptionsWrapper.prototype.isPreventDefaultOnContextMenu = function () {
    return isTrue(this.gridOptions.preventDefaultOnContextMenu);
  };
  GridOptionsWrapper.prototype.isSuppressPreventDefaultOnMouseWheel = function () {
    return isTrue(this.gridOptions.suppressPreventDefaultOnMouseWheel);
  };
  GridOptionsWrapper.prototype.isSuppressColumnVirtualisation = function () {
    return isTrue(this.gridOptions.suppressColumnVirtualisation);
  };
  GridOptionsWrapper.prototype.isSuppressContextMenu = function () {
    return isTrue(this.gridOptions.suppressContextMenu);
  };
  GridOptionsWrapper.prototype.isAllowContextMenuWithControlKey = function () {
    return isTrue(this.gridOptions.allowContextMenuWithControlKey);
  };
  GridOptionsWrapper.prototype.isSuppressCopyRowsToClipboard = function () {
    return isTrue(this.gridOptions.suppressCopyRowsToClipboard);
  };
  GridOptionsWrapper.prototype.isCopyHeadersToClipboard = function () {
    return isTrue(this.gridOptions.copyHeadersToClipboard);
  };
  GridOptionsWrapper.prototype.isSuppressClipboardPaste = function () {
    return isTrue(this.gridOptions.suppressClipboardPaste);
  };
  GridOptionsWrapper.prototype.isSuppressLastEmptyLineOnPaste = function () {
    return isTrue(this.gridOptions.suppressLastEmptyLineOnPaste);
  };
  GridOptionsWrapper.prototype.isPagination = function () {
    return isTrue(this.gridOptions.pagination);
  };
  GridOptionsWrapper.prototype.isSuppressEnterpriseResetOnNewColumns = function () {
    return isTrue(this.gridOptions.suppressEnterpriseResetOnNewColumns);
  };
  GridOptionsWrapper.prototype.getProcessDataFromClipboardFunc = function () {
    return this.gridOptions.processDataFromClipboard;
  };
  GridOptionsWrapper.prototype.getAsyncTransactionWaitMillis = function () {
    return exists(this.gridOptions.asyncTransactionWaitMillis) ? this.gridOptions.asyncTransactionWaitMillis : Constants.BATCH_WAIT_MILLIS;
  };
  GridOptionsWrapper.prototype.isSuppressMovableColumns = function () {
    return isTrue(this.gridOptions.suppressMovableColumns);
  };
  GridOptionsWrapper.prototype.isAnimateRows = function () {
    // never allow animating if enforcing the row order
    if (this.isEnsureDomOrder()) {
      return false;
    }
    return isTrue(this.gridOptions.animateRows);
  };
  GridOptionsWrapper.prototype.isSuppressColumnMoveAnimation = function () {
    return isTrue(this.gridOptions.suppressColumnMoveAnimation);
  };
  GridOptionsWrapper.prototype.isSuppressAggFuncInHeader = function () {
    return isTrue(this.gridOptions.suppressAggFuncInHeader);
  };
  GridOptionsWrapper.prototype.isSuppressAggAtRootLevel = function () {
    return isTrue(this.gridOptions.suppressAggAtRootLevel);
  };
  GridOptionsWrapper.prototype.isSuppressAggFilteredOnly = function () {
    return isTrue(this.gridOptions.suppressAggFilteredOnly);
  };
  GridOptionsWrapper.prototype.isShowOpenedGroup = function () {
    return isTrue(this.gridOptions.showOpenedGroup);
  };
  GridOptionsWrapper.prototype.isEnableRangeSelection = function () {
    return ModuleRegistry.isRegistered(exports.ModuleNames.RangeSelectionModule) && isTrue(this.gridOptions.enableRangeSelection);
  };
  GridOptionsWrapper.prototype.isEnableRangeHandle = function () {
    return isTrue(this.gridOptions.enableRangeHandle);
  };
  GridOptionsWrapper.prototype.isEnableFillHandle = function () {
    return isTrue(this.gridOptions.enableFillHandle);
  };
  GridOptionsWrapper.prototype.getFillHandleDirection = function () {
    var direction = this.gridOptions.fillHandleDirection;
    if (!direction) {
      return 'xy';
    }
    if (direction !== 'x' && direction !== 'y' && direction !== 'xy') {
      doOnce(function () {
        return console.warn("AG Grid: valid values for fillHandleDirection are 'x', 'y' and 'xy'. Default to 'xy'.");
      }, 'warn invalid fill direction');
      return 'xy';
    }
    return direction;
  };
  GridOptionsWrapper.prototype.getFillOperation = function () {
    return this.gridOptions.fillOperation;
  };
  GridOptionsWrapper.prototype.isSuppressMultiRangeSelection = function () {
    return isTrue(this.gridOptions.suppressMultiRangeSelection);
  };
  GridOptionsWrapper.prototype.isPaginationAutoPageSize = function () {
    return isTrue(this.gridOptions.paginationAutoPageSize);
  };
  GridOptionsWrapper.prototype.isRememberGroupStateWhenNewData = function () {
    return isTrue(this.gridOptions.rememberGroupStateWhenNewData);
  };
  GridOptionsWrapper.prototype.getIcons = function () {
    return this.gridOptions.icons;
  };
  GridOptionsWrapper.prototype.getAggFuncs = function () {
    return this.gridOptions.aggFuncs;
  };
  GridOptionsWrapper.prototype.getSortingOrder = function () {
    return this.gridOptions.sortingOrder;
  };
  GridOptionsWrapper.prototype.getAlignedGrids = function () {
    return this.gridOptions.alignedGrids;
  };
  GridOptionsWrapper.prototype.isMasterDetail = function () {
    var masterDetail = isTrue(this.gridOptions.masterDetail);
    if (masterDetail) {
      return ModuleRegistry.assertRegistered(exports.ModuleNames.MasterDetailModule, 'masterDetail');
    } else {
      return false;
    }
  };
  GridOptionsWrapper.prototype.isKeepDetailRows = function () {
    return isTrue(this.gridOptions.keepDetailRows);
  };
  GridOptionsWrapper.prototype.getKeepDetailRowsCount = function () {
    var keepDetailRowsCount = this.gridOptions.keepDetailRowsCount;
    if (exists(keepDetailRowsCount) && keepDetailRowsCount > 0) {
      return this.gridOptions.keepDetailRowsCount;
    }
    return DEFAULT_KEEP_DETAIL_ROW_COUNT;
  };
  GridOptionsWrapper.prototype.getIsRowMasterFunc = function () {
    return this.gridOptions.isRowMaster;
  };
  GridOptionsWrapper.prototype.getIsRowSelectableFunc = function () {
    return this.gridOptions.isRowSelectable;
  };
  GridOptionsWrapper.prototype.getGroupRowRendererParams = function () {
    return this.gridOptions.groupRowRendererParams;
  };
  GridOptionsWrapper.prototype.getOverlayLoadingTemplate = function () {
    return this.gridOptions.overlayLoadingTemplate;
  };
  GridOptionsWrapper.prototype.getOverlayNoRowsTemplate = function () {
    return this.gridOptions.overlayNoRowsTemplate;
  };
  GridOptionsWrapper.prototype.isSuppressAutoSize = function () {
    return isTrue(this.gridOptions.suppressAutoSize);
  };
  GridOptionsWrapper.prototype.isEnableCellTextSelection = function () {
    return isTrue(this.gridOptions.enableCellTextSelection);
  };
  GridOptionsWrapper.prototype.isSuppressParentsInRowNodes = function () {
    return isTrue(this.gridOptions.suppressParentsInRowNodes);
  };
  GridOptionsWrapper.prototype.isSuppressClipboardApi = function () {
    return isTrue(this.gridOptions.suppressClipboardApi);
  };
  GridOptionsWrapper.prototype.isFunctionsReadOnly = function () {
    return isTrue(this.gridOptions.functionsReadOnly);
  };
  GridOptionsWrapper.prototype.isFloatingFilter = function () {
    return this.gridOptions.floatingFilter;
  };
  GridOptionsWrapper.prototype.isEnableCellTextSelect = function () {
    return isTrue(this.gridOptions.enableCellTextSelection);
  };
  GridOptionsWrapper.prototype.isEnableOldSetFilterModel = function () {
    return isTrue(this.gridOptions.enableOldSetFilterModel);
  };
  GridOptionsWrapper.prototype.getDefaultColDef = function () {
    return this.gridOptions.defaultColDef;
  };
  GridOptionsWrapper.prototype.getDefaultColGroupDef = function () {
    return this.gridOptions.defaultColGroupDef;
  };
  GridOptionsWrapper.prototype.getDefaultExportParams = function (type) {
    if (this.gridOptions.defaultExportParams) {
      console.warn("AG Grid: Since v25.2 `defaultExportParams`  has been replaced by `default" + capitalise(type) + "ExportParams`'");
      if (type === 'csv') {
        return this.gridOptions.defaultExportParams;
      }
      return this.gridOptions.defaultExportParams;
    }
    if (type === 'csv' && this.gridOptions.defaultCsvExportParams) {
      return this.gridOptions.defaultCsvExportParams;
    }
    if (type === 'excel' && this.gridOptions.defaultExcelExportParams) {
      return this.gridOptions.defaultExcelExportParams;
    }
  };
  GridOptionsWrapper.prototype.isSuppressCsvExport = function () {
    return isTrue(this.gridOptions.suppressCsvExport);
  };
  GridOptionsWrapper.prototype.isAllowShowChangeAfterFilter = function () {
    return isTrue(this.gridOptions.allowShowChangeAfterFilter);
  };
  GridOptionsWrapper.prototype.isSuppressExcelExport = function () {
    return isTrue(this.gridOptions.suppressExcelExport);
  };
  GridOptionsWrapper.prototype.isSuppressMakeColumnVisibleAfterUnGroup = function () {
    return isTrue(this.gridOptions.suppressMakeColumnVisibleAfterUnGroup);
  };
  GridOptionsWrapper.prototype.getDataPathFunc = function () {
    return this.gridOptions.getDataPath;
  };
  GridOptionsWrapper.prototype.getIsServerSideGroupFunc = function () {
    return this.gridOptions.isServerSideGroup;
  };
  GridOptionsWrapper.prototype.getIsServerSideGroupOpenByDefaultFunc = function () {
    return this.gridOptions.isServerSideGroupOpenByDefault;
  };
  GridOptionsWrapper.prototype.getIsGroupOpenByDefaultFunc = function () {
    return this.gridOptions.isGroupOpenByDefault;
  };
  GridOptionsWrapper.prototype.getServerSideGroupKeyFunc = function () {
    return this.gridOptions.getServerSideGroupKey;
  };
  GridOptionsWrapper.prototype.getGroupRowAggNodesFunc = function () {
    return this.gridOptions.groupRowAggNodes;
  };
  GridOptionsWrapper.prototype.getContextMenuItemsFunc = function () {
    return this.gridOptions.getContextMenuItems;
  };
  GridOptionsWrapper.prototype.getMainMenuItemsFunc = function () {
    return this.gridOptions.getMainMenuItems;
  };
  GridOptionsWrapper.prototype.getRowNodeIdFunc = function () {
    return this.gridOptions.getRowNodeId;
  };
  GridOptionsWrapper.prototype.getNavigateToNextHeaderFunc = function () {
    return this.gridOptions.navigateToNextHeader;
  };
  GridOptionsWrapper.prototype.getTabToNextHeaderFunc = function () {
    return this.gridOptions.tabToNextHeader;
  };
  GridOptionsWrapper.prototype.getNavigateToNextCellFunc = function () {
    return this.gridOptions.navigateToNextCell;
  };
  GridOptionsWrapper.prototype.getTabToNextCellFunc = function () {
    return this.gridOptions.tabToNextCell;
  };
  GridOptionsWrapper.prototype.getGridTabIndex = function () {
    return (this.gridOptions.tabIndex || 0).toString();
  };
  GridOptionsWrapper.prototype.isTreeData = function () {
    var usingTreeData = isTrue(this.gridOptions.treeData);
    if (usingTreeData) {
      return ModuleRegistry.assertRegistered(exports.ModuleNames.RowGroupingModule, 'Tree Data');
    }
    return false;
  };
  GridOptionsWrapper.prototype.isValueCache = function () {
    return isTrue(this.gridOptions.valueCache);
  };
  GridOptionsWrapper.prototype.isValueCacheNeverExpires = function () {
    return isTrue(this.gridOptions.valueCacheNeverExpires);
  };
  GridOptionsWrapper.prototype.isDeltaSort = function () {
    return isTrue(this.gridOptions.deltaSort);
  };
  GridOptionsWrapper.prototype.isAggregateOnlyChangedColumns = function () {
    return isTrue(this.gridOptions.aggregateOnlyChangedColumns);
  };
  GridOptionsWrapper.prototype.getProcessSecondaryColDefFunc = function () {
    return this.gridOptions.processSecondaryColDef;
  };
  GridOptionsWrapper.prototype.getProcessSecondaryColGroupDefFunc = function () {
    return this.gridOptions.processSecondaryColGroupDef;
  };
  GridOptionsWrapper.prototype.getSendToClipboardFunc = function () {
    return this.gridOptions.sendToClipboard;
  };
  GridOptionsWrapper.prototype.getProcessRowPostCreateFunc = function () {
    return this.gridOptions.processRowPostCreate;
  };
  GridOptionsWrapper.prototype.getProcessCellForClipboardFunc = function () {
    return this.gridOptions.processCellForClipboard;
  };
  GridOptionsWrapper.prototype.getProcessHeaderForClipboardFunc = function () {
    return this.gridOptions.processHeaderForClipboard;
  };
  GridOptionsWrapper.prototype.getProcessCellFromClipboardFunc = function () {
    return this.gridOptions.processCellFromClipboard;
  };
  GridOptionsWrapper.prototype.getViewportRowModelPageSize = function () {
    return oneOrGreater(this.gridOptions.viewportRowModelPageSize, DEFAULT_VIEWPORT_ROW_MODEL_PAGE_SIZE);
  };
  GridOptionsWrapper.prototype.getViewportRowModelBufferSize = function () {
    return zeroOrGreater(this.gridOptions.viewportRowModelBufferSize, DEFAULT_VIEWPORT_ROW_MODEL_BUFFER_SIZE);
  };
  GridOptionsWrapper.prototype.isServerSideSortingAlwaysResets = function () {
    return isTrue(this.gridOptions.serverSideSortingAlwaysResets);
  };
  GridOptionsWrapper.prototype.isServerSideFilteringAlwaysResets = function () {
    return isTrue(this.gridOptions.serverSideFilteringAlwaysResets);
  };
  GridOptionsWrapper.prototype.getPostSortFunc = function () {
    return this.gridOptions.postSort;
  };
  GridOptionsWrapper.prototype.getChartToolbarItemsFunc = function () {
    return this.gridOptions.getChartToolbarItems;
  };
  GridOptionsWrapper.prototype.getChartThemeOverrides = function () {
    return this.gridOptions.chartThemeOverrides;
  };
  GridOptionsWrapper.prototype.getCustomChartThemes = function () {
    return this.gridOptions.customChartThemes;
  };
  GridOptionsWrapper.prototype.getChartThemes = function () {
    // return default themes if user hasn't supplied any
    return this.gridOptions.chartThemes || ['ag-default', 'ag-material', 'ag-pastel', 'ag-vivid', 'ag-solar'];
  };
  GridOptionsWrapper.prototype.getProcessChartOptionsFunc = function () {
    return this.gridOptions.processChartOptions;
  };
  GridOptionsWrapper.prototype.getClipboardDeliminator = function () {
    return exists(this.gridOptions.clipboardDeliminator) ? this.gridOptions.clipboardDeliminator : '\t';
  };
  GridOptionsWrapper.prototype.setProperty = function (key, value, force) {
    if (force === void 0) {
      force = false;
    }
    var gridOptionsNoType = this.gridOptions;
    var previousValue = gridOptionsNoType[key];
    if (force || previousValue !== value) {
      gridOptionsNoType[key] = value;
      var event_1 = {
        type: key,
        currentValue: value,
        previousValue: previousValue
      };
      this.propertyEventService.dispatchEvent(event_1);
    }
  };
  GridOptionsWrapper.prototype.addEventListener = function (key, listener) {
    this.propertyEventService.addEventListener(key, listener);
  };
  GridOptionsWrapper.prototype.removeEventListener = function (key, listener) {
    this.propertyEventService.removeEventListener(key, listener);
  };
  GridOptionsWrapper.prototype.isSkipHeaderOnAutoSize = function () {
    return !!this.gridOptions.skipHeaderOnAutoSize;
  };
  GridOptionsWrapper.prototype.getAutoSizePadding = function () {
    var value = this.gridOptions.autoSizePadding;
    return value != null && value >= 0 ? value : 20;
  };
  // properties
  GridOptionsWrapper.prototype.getHeaderHeight = function () {
    if (typeof this.gridOptions.headerHeight === 'number') {
      return this.gridOptions.headerHeight;
    }
    return this.getFromTheme(25, 'headerHeight');
  };
  GridOptionsWrapper.prototype.getFloatingFiltersHeight = function () {
    if (typeof this.gridOptions.floatingFiltersHeight === 'number') {
      return this.gridOptions.floatingFiltersHeight;
    }
    return this.getFromTheme(25, 'headerHeight');
  };
  GridOptionsWrapper.prototype.getGroupHeaderHeight = function () {
    if (typeof this.gridOptions.groupHeaderHeight === 'number') {
      return this.gridOptions.groupHeaderHeight;
    }
    return this.getHeaderHeight();
  };
  GridOptionsWrapper.prototype.getPivotHeaderHeight = function () {
    if (typeof this.gridOptions.pivotHeaderHeight === 'number') {
      return this.gridOptions.pivotHeaderHeight;
    }
    return this.getHeaderHeight();
  };
  GridOptionsWrapper.prototype.getPivotGroupHeaderHeight = function () {
    if (typeof this.gridOptions.pivotGroupHeaderHeight === 'number') {
      return this.gridOptions.pivotGroupHeaderHeight;
    }
    return this.getGroupHeaderHeight();
  };
  GridOptionsWrapper.prototype.isExternalFilterPresent = function () {
    if (typeof this.gridOptions.isExternalFilterPresent === 'function') {
      return this.gridOptions.isExternalFilterPresent();
    }
    return false;
  };
  GridOptionsWrapper.prototype.doesExternalFilterPass = function (node) {
    if (typeof this.gridOptions.doesExternalFilterPass === 'function') {
      return this.gridOptions.doesExternalFilterPass(node);
    }
    return false;
  };
  GridOptionsWrapper.prototype.getTooltipShowDelay = function () {
    var tooltipShowDelay = this.gridOptions.tooltipShowDelay;
    if (exists(tooltipShowDelay)) {
      if (tooltipShowDelay < 0) {
        console.warn('ag-grid: tooltipShowDelay should not be lower than 0');
      }
      return Math.max(200, tooltipShowDelay);
    }
    return null;
  };
  GridOptionsWrapper.prototype.isTooltipMouseTrack = function () {
    return isTrue(this.gridOptions.tooltipMouseTrack);
  };
  GridOptionsWrapper.prototype.isSuppressModelUpdateAfterUpdateTransaction = function () {
    return isTrue(this.gridOptions.suppressModelUpdateAfterUpdateTransaction);
  };
  GridOptionsWrapper.prototype.getDocument = function () {
    // if user is providing document, we use the users one,
    // otherwise we use the document on the global namespace.
    var result = null;
    if (this.gridOptions.getDocument && exists(this.gridOptions.getDocument)) {
      result = this.gridOptions.getDocument();
    }
    if (result && exists(result)) {
      return result;
    }
    return document;
  };
  GridOptionsWrapper.prototype.getMinColWidth = function () {
    var minColWidth = this.gridOptions.minColWidth;
    if (exists(minColWidth) && minColWidth > GridOptionsWrapper_1.MIN_COL_WIDTH) {
      return this.gridOptions.minColWidth;
    }
    var measuredMin = this.getFromTheme(null, 'headerCellMinWidth');
    return exists(measuredMin) ? Math.max(measuredMin, GridOptionsWrapper_1.MIN_COL_WIDTH) : GridOptionsWrapper_1.MIN_COL_WIDTH;
  };
  GridOptionsWrapper.prototype.getMaxColWidth = function () {
    if (this.gridOptions.maxColWidth && this.gridOptions.maxColWidth > GridOptionsWrapper_1.MIN_COL_WIDTH) {
      return this.gridOptions.maxColWidth;
    }
    return null;
  };
  GridOptionsWrapper.prototype.getColWidth = function () {
    if (typeof this.gridOptions.colWidth !== 'number' || this.gridOptions.colWidth < GridOptionsWrapper_1.MIN_COL_WIDTH) {
      return 200;
    }
    return this.gridOptions.colWidth;
  };
  GridOptionsWrapper.prototype.getRowBuffer = function () {
    var rowBuffer = this.gridOptions.rowBuffer;
    if (typeof rowBuffer === 'number') {
      if (rowBuffer < 0) {
        doOnce(function () {
          return console.warn("AG Grid: rowBuffer should not be negative");
        }, 'warn rowBuffer negative');
        this.gridOptions.rowBuffer = rowBuffer = 0;
      }
    } else {
      rowBuffer = Constants.ROW_BUFFER_SIZE;
    }
    return rowBuffer;
  };
  GridOptionsWrapper.prototype.getRowBufferInPixels = function () {
    var rowsToBuffer = this.getRowBuffer();
    var defaultRowHeight = this.getRowHeightAsNumber();
    return rowsToBuffer * defaultRowHeight;
  };
  // the user might be using some non-standard scrollbar, eg a scrollbar that has zero
  // width and overlays (like the Safari scrollbar, but presented in Chrome). so we
  // allow the user to provide the scroll width before we work it out.
  GridOptionsWrapper.prototype.getScrollbarWidth = function () {
    if (this.scrollbarWidth == null) {
      var useGridOptions = typeof this.gridOptions.scrollbarWidth === 'number' && this.gridOptions.scrollbarWidth >= 0;
      var scrollbarWidth = useGridOptions ? this.gridOptions.scrollbarWidth : getScrollbarWidth();
      if (scrollbarWidth != null) {
        this.scrollbarWidth = scrollbarWidth;
        this.eventService.dispatchEvent({
          type: Events.EVENT_SCROLLBAR_WIDTH_CHANGED
        });
      }
    }
    return this.scrollbarWidth;
  };
  GridOptionsWrapper.prototype.checkForDeprecated = function () {
    // casting to generic object, so typescript compiles even though
    // we are looking for attributes that don't exist
    var options = this.gridOptions;
    if (options.deprecatedEmbedFullWidthRows) {
      console.warn("AG Grid: since v21.2, deprecatedEmbedFullWidthRows has been replaced with embedFullWidthRows.");
    }
    if (options.enableOldSetFilterModel) {
      console.warn('AG Grid: since v22.x, enableOldSetFilterModel is deprecated. Please move to the new Set Filter Model as the old one may not be supported in v23 onwards.');
    }
    if (options.floatingFilter) {
      console.warn('AG Grid: since v23.1, floatingFilter on the gridOptions is deprecated. Please use floatingFilter on the colDef instead.');
      if (!options.defaultColDef) {
        options.defaultColDef = {};
      }
      if (options.defaultColDef.floatingFilter == null) {
        options.defaultColDef.floatingFilter = true;
      }
    }
    if (options.rowDeselection) {
      console.warn('AG Grid: since v24.x, rowDeselection is deprecated and the behaviour is true by default. Please use `suppressRowDeselection` to prevent rows from being deselected.');
    }
    var checkRenamedProperty = function (oldProp, newProp, version) {
      if (options[oldProp] != null) {
        console.warn("ag-grid: since version " + version + ", '" + oldProp + "' is deprecated / renamed, please use the new property name '" + newProp + "' instead.");
        if (options[newProp] == null) {
          options[newProp] = options[oldProp];
        }
      }
    };
    checkRenamedProperty('batchUpdateWaitMillis', 'asyncTransactionWaitMillis', '23.1.x');
    checkRenamedProperty('deltaRowDataMode', 'immutableData', '23.1.x');
    if (options.immutableColumns || options.deltaColumnMode) {
      console.warn('AG Grid: since v24.0, immutableColumns and deltaColumnMode properties are gone. The grid now works like this as default. To keep column order maintained, set grid property applyColumnDefOrder=true');
    }
    checkRenamedProperty('suppressSetColumnStateEvents', 'suppressColumnStateEvents', '24.0.x');
    if (options.groupRowInnerRenderer || options.groupRowInnerRendererParams || options.groupRowInnerRendererFramework) {
      console.warn('AG Grid: since v24.0, grid properties groupRowInnerRenderer, groupRowInnerRendererFramework and groupRowInnerRendererParams are no longer used.');
      console.warn('  Instead use the grid properties groupRowRendererParams.innerRenderer, groupRowRendererParams.innerRendererFramework and groupRowRendererParams.innerRendererParams.');
      console.warn('  For example instead of this:');
      console.warn('    groupRowInnerRenderer: "myRenderer"');
      console.warn('    groupRowInnerRendererParams: {x: a}');
      console.warn('  Replace with this:');
      console.warn('    groupRowRendererParams: {');
      console.warn('      innerRenderer: "myRenderer",');
      console.warn('      innerRendererParams: {x: a}');
      console.warn('    }');
      console.warn('  We have copied the properties over for you. However to stop this error message, please change your application code.');
      if (!options.groupRowRendererParams) {
        options.groupRowRendererParams = {};
      }
      var params = options.groupRowRendererParams;
      if (options.groupRowInnerRenderer) {
        params.innerRenderer = options.groupRowInnerRenderer;
      }
      if (options.groupRowInnerRendererParams) {
        params.innerRendererParams = options.groupRowInnerRendererParams;
      }
      if (options.groupRowInnerRendererFramework) {
        params.innerRendererFramework = options.groupRowInnerRendererFramework;
      }
    }
    if (options.rememberGroupStateWhenNewData) {
      console.warn('AG Grid: since v24.0, grid property rememberGroupStateWhenNewData is deprecated. This feature was provided before Transaction Updates worked (which keep group state). Now that transaction updates are possible and they keep group state, this feature is no longer needed.');
    }
    if (options.detailCellRendererParams && options.detailCellRendererParams.autoHeight) {
      console.warn('AG Grid: since v24.1, grid property detailCellRendererParams.autoHeight is replaced with grid property detailRowAutoHeight. This allows this feature to work when you provide a custom DetailCellRenderer');
      options.detailRowAutoHeight = true;
    }
    if (options.suppressKeyboardEvent) {
      console.warn("AG Grid: since v24.1 suppressKeyboardEvent in the gridOptions has been deprecated and will be removed in\n                 future versions of AG Grid. If you need this to be set for every column use the defaultColDef property.");
    }
    if (options.suppressEnterpriseResetOnNewColumns) {
      console.warn('AG Grid: since v25, grid property suppressEnterpriseResetOnNewColumns is deprecated. This was a temporary property to allow changing columns in Server Side Row Model without triggering a reload. Now that it is possible to dynamically change columns in the grid, this is no longer needed.');
      options.detailRowAutoHeight = true;
    }
    if (options.suppressColumnStateEvents) {
      console.warn('AG Grid: since v25, grid property suppressColumnStateEvents no longer works due to a refactor that we did. It should be possible to achieve similar using event.source, which would be "api" if the event was due to setting column state via the API');
      options.detailRowAutoHeight = true;
    }
    if (options.defaultExportParams) {
      console.warn('AG Grid: since v25.2, the grid property `defaultExportParams` has been replaced by `defaultCsvExportParams` and `defaultExcelExportParams`.');
    }
    if (options.stopEditingWhenGridLosesFocus) {
      console.warn('AG Grid: since v25.2.2, the grid property `stopEditingWhenGridLosesFocus`.');
      options.stopEditingWhenCellsLoseFocus = true;
    }
  };
  GridOptionsWrapper.prototype.checkForViolations = function () {
    if (this.isTreeData()) {
      this.treeDataViolations();
    }
  };
  GridOptionsWrapper.prototype.treeDataViolations = function () {
    if (this.isRowModelDefault()) {
      if (missing(this.getDataPathFunc())) {
        console.warn('AG Grid: property usingTreeData=true with rowModel=clientSide, but you did not ' + 'provide getDataPath function, please provide getDataPath function if using tree data.');
      }
    }
    if (this.isRowModelServerSide()) {
      if (missing(this.getIsServerSideGroupFunc())) {
        console.warn('AG Grid: property usingTreeData=true with rowModel=serverSide, but you did not ' + 'provide isServerSideGroup function, please provide isServerSideGroup function if using tree data.');
      }
      if (missing(this.getServerSideGroupKeyFunc())) {
        console.warn('AG Grid: property usingTreeData=true with rowModel=serverSide, but you did not ' + 'provide getServerSideGroupKey function, please provide getServerSideGroupKey function if using tree data.');
      }
    }
  };
  GridOptionsWrapper.prototype.getLocaleTextFunc = function () {
    if (this.gridOptions.localeTextFunc) {
      return this.gridOptions.localeTextFunc;
    }
    var localeText = this.gridOptions.localeText;
    return function (key, defaultValue) {
      return localeText && localeText[key] ? localeText[key] : defaultValue;
    };
  };
  // responsible for calling the onXXX functions on gridOptions
  GridOptionsWrapper.prototype.globalEventHandler = function (eventName, event) {
    // prevent events from being fired _after_ the grid has been destroyed
    if (this.destroyed) {
      return;
    }
    var callbackMethodName = ComponentUtil.getCallbackForEvent(eventName);
    if (typeof this.gridOptions[callbackMethodName] === 'function') {
      this.gridOptions[callbackMethodName](event);
    }
  };
  // we don't allow dynamic row height for virtual paging
  GridOptionsWrapper.prototype.getRowHeightAsNumber = function () {
    if (!this.gridOptions.rowHeight || missing(this.gridOptions.rowHeight)) {
      return this.getDefaultRowHeight();
    }
    if (this.gridOptions.rowHeight && this.isNumeric(this.gridOptions.rowHeight)) {
      return this.gridOptions.rowHeight;
    }
    console.warn('AG Grid row height must be a number if not using standard row model');
    return this.getDefaultRowHeight();
  };
  GridOptionsWrapper.prototype.getRowHeightForNode = function (rowNode, allowEstimate) {
    // check the function first, in case use set both function and
    // number, when using virtual pagination then function can be
    // used for pinned rows and the number for the body rows.
    if (allowEstimate === void 0) {
      allowEstimate = false;
    }
    if (typeof this.gridOptions.getRowHeight === 'function') {
      if (allowEstimate) {
        return {
          height: this.getDefaultRowHeight(),
          estimated: true
        };
      }
      var params = {
        node: rowNode,
        data: rowNode.data,
        api: this.gridOptions.api,
        context: this.gridOptions.context
      };
      var height = this.gridOptions.getRowHeight(params);
      if (this.isNumeric(height)) {
        if (height === 0) {
          doOnce(function () {
            return console.warn('AG Grid: The return of `getRowHeight` cannot be zero. If the intention is to hide rows, use a filter instead.');
          }, 'invalidRowHeight');
        }
        return {
          height: Math.max(1, height),
          estimated: false
        };
      }
    }
    if (rowNode.detail && this.isMasterDetail()) {
      if (this.isNumeric(this.gridOptions.detailRowHeight)) {
        return {
          height: this.gridOptions.detailRowHeight,
          estimated: false
        };
      }
      return {
        height: DEFAULT_DETAIL_ROW_HEIGHT,
        estimated: false
      };
    }
    var defaultRowHeight = this.getDefaultRowHeight();
    var rowHeight = this.gridOptions.rowHeight && this.isNumeric(this.gridOptions.rowHeight) ? this.gridOptions.rowHeight : defaultRowHeight;
    var minRowHeight = exists(rowHeight) ? Math.min(defaultRowHeight, rowHeight) : defaultRowHeight;
    if (this.columnController.isAutoRowHeightActive()) {
      if (allowEstimate) {
        return {
          height: rowHeight,
          estimated: true
        };
      }
      var autoHeight = this.autoHeightCalculator.getPreferredHeightForRow(rowNode);
      // never return less than the default row height - covers when auto height
      // cells are blank.
      return {
        height: Math.max(autoHeight, minRowHeight),
        estimated: false
      };
    }
    return {
      height: rowHeight,
      estimated: false
    };
  };
  GridOptionsWrapper.prototype.isDynamicRowHeight = function () {
    return typeof this.gridOptions.getRowHeight === 'function';
  };
  GridOptionsWrapper.prototype.getListItemHeight = function () {
    return this.getFromTheme(20, 'listItemHeight');
  };
  GridOptionsWrapper.prototype.chartMenuPanelWidth = function () {
    return this.environment.chartMenuPanelWidth();
  };
  GridOptionsWrapper.prototype.isNumeric = function (value) {
    return !isNaN(value) && typeof value === 'number' && isFinite(value);
  };
  GridOptionsWrapper.prototype.getFromTheme = function (defaultValue, sassVariableName) {
    var theme = this.environment.getTheme().theme;
    if (theme && theme.indexOf('ag-theme') === 0) {
      return this.environment.getSassVariable(theme, sassVariableName);
    }
    return defaultValue;
  };
  GridOptionsWrapper.prototype.getDefaultRowHeight = function () {
    return this.getFromTheme(DEFAULT_ROW_HEIGHT, 'rowHeight');
  };
  var GridOptionsWrapper_1;
  GridOptionsWrapper.MIN_COL_WIDTH = 10;
  GridOptionsWrapper.PROP_HEADER_HEIGHT = 'headerHeight';
  GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN = 'groupRemoveSingleChildren';
  GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN = 'groupRemoveLowestSingleChildren';
  GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT = 'pivotHeaderHeight';
  GridOptionsWrapper.PROP_SUPPRESS_CLIPBOARD_PASTE = 'suppressClipboardPaste';
  GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT = 'groupHeaderHeight';
  GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT = 'pivotGroupHeaderHeight';
  GridOptionsWrapper.PROP_NAVIGATE_TO_NEXT_CELL = 'navigateToNextCell';
  GridOptionsWrapper.PROP_TAB_TO_NEXT_CELL = 'tabToNextCell';
  GridOptionsWrapper.PROP_NAVIGATE_TO_NEXT_HEADER = 'navigateToNextHeader';
  GridOptionsWrapper.PROP_TAB_TO_NEXT_HEADER = 'tabToNextHeader';
  GridOptionsWrapper.PROP_IS_EXTERNAL_FILTER_PRESENT = 'isExternalFilterPresentFunc';
  GridOptionsWrapper.PROP_DOES_EXTERNAL_FILTER_PASS = 'doesExternalFilterPass';
  GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT = 'floatingFiltersHeight';
  GridOptionsWrapper.PROP_SUPPRESS_ROW_CLICK_SELECTION = 'suppressRowClickSelection';
  GridOptionsWrapper.PROP_SUPPRESS_ROW_DRAG = 'suppressRowDrag';
  GridOptionsWrapper.PROP_SUPPRESS_MOVE_WHEN_ROW_DRAG = 'suppressMoveWhenRowDragging';
  GridOptionsWrapper.PROP_GET_ROW_CLASS = 'getRowClass';
  GridOptionsWrapper.PROP_GET_ROW_STYLE = 'getRowStyle';
  GridOptionsWrapper.PROP_GET_ROW_HEIGHT = 'getRowHeight';
  GridOptionsWrapper.PROP_POPUP_PARENT = 'popupParent';
  GridOptionsWrapper.PROP_DOM_LAYOUT = 'domLayout';
  GridOptionsWrapper.PROP_FILL_HANDLE_DIRECTION = 'fillHandleDirection';
  GridOptionsWrapper.PROP_GROUP_ROW_AGG_NODES = 'groupRowAggNodes';
  GridOptionsWrapper.PROP_GET_BUSINESS_KEY_FOR_NODE = 'getBusinessKeyForNode';
  GridOptionsWrapper.PROP_GET_CHILD_COUNT = 'getChildCount';
  GridOptionsWrapper.PROP_PROCESS_ROW_POST_CREATE = 'processRowPostCreate';
  GridOptionsWrapper.PROP_GET_ROW_NODE_ID = 'getRowNodeId';
  GridOptionsWrapper.PROP_IS_FULL_WIDTH_CELL = 'isFullWidthCell';
  GridOptionsWrapper.PROP_IS_ROW_SELECTABLE = 'isRowSelectable';
  GridOptionsWrapper.PROP_IS_ROW_MASTER = 'isRowMaster';
  GridOptionsWrapper.PROP_POST_SORT = 'postSort';
  GridOptionsWrapper.PROP_GET_DOCUMENT = 'getDocument';
  GridOptionsWrapper.PROP_POST_PROCESS_POPUP = 'postProcessPopup';
  GridOptionsWrapper.PROP_DEFAULT_GROUP_SORT_COMPARATOR = 'defaultGroupSortComparator';
  GridOptionsWrapper.PROP_PAGINATION_NUMBER_FORMATTER = 'paginationNumberFormatter';
  GridOptionsWrapper.PROP_GET_CONTEXT_MENU_ITEMS = 'getContextMenuItems';
  GridOptionsWrapper.PROP_GET_MAIN_MENU_ITEMS = 'getMainMenuItems';
  GridOptionsWrapper.PROP_PROCESS_CELL_FOR_CLIPBOARD = 'processCellForClipboard';
  GridOptionsWrapper.PROP_PROCESS_CELL_FROM_CLIPBOARD = 'processCellFromClipboard';
  GridOptionsWrapper.PROP_SEND_TO_CLIPBOARD = 'sendToClipboard';
  GridOptionsWrapper.PROP_PROCESS_TO_SECONDARY_COLDEF = 'processSecondaryColDef';
  GridOptionsWrapper.PROP_PROCESS_SECONDARY_COL_GROUP_DEF = 'processSecondaryColGroupDef';
  GridOptionsWrapper.PROP_PROCESS_CHART_OPTIONS = 'processChartOptions';
  GridOptionsWrapper.PROP_GET_CHART_TOOLBAR_ITEMS = 'getChartToolbarItems';
  GridOptionsWrapper.PROP_GET_SERVER_SIDE_STORE_PARAMS = 'getServerSideStoreParams';
  GridOptionsWrapper.PROP_IS_SERVER_SIDE_GROUPS_OPEN_BY_DEFAULT = 'isServerSideGroupOpenByDefault';
  GridOptionsWrapper.PROP_IS_APPLY_SERVER_SIDE_TRANSACTION = 'isApplyServerSideTransaction';
  GridOptionsWrapper.PROP_IS_SERVER_SIDE_GROUP = 'isServerSideGroup';
  GridOptionsWrapper.PROP_GET_SERVER_SIDE_GROUP_KEY = 'getServerSideGroupKey';
  __decorate$z([Autowired('gridOptions')], GridOptionsWrapper.prototype, "gridOptions", void 0);
  __decorate$z([Autowired('columnController')], GridOptionsWrapper.prototype, "columnController", void 0);
  __decorate$z([Autowired('eventService')], GridOptionsWrapper.prototype, "eventService", void 0);
  __decorate$z([Autowired('environment')], GridOptionsWrapper.prototype, "environment", void 0);
  __decorate$z([Autowired('autoHeightCalculator')], GridOptionsWrapper.prototype, "autoHeightCalculator", void 0);
  __decorate$z([__param$3(0, Qualifier('gridApi')), __param$3(1, Qualifier('columnApi'))], GridOptionsWrapper.prototype, "agWire", null);
  __decorate$z([PreDestroy], GridOptionsWrapper.prototype, "destroy", null);
  __decorate$z([PostConstruct], GridOptionsWrapper.prototype, "init", null);
  GridOptionsWrapper = GridOptionsWrapper_1 = __decorate$z([Bean('gridOptionsWrapper')], GridOptionsWrapper);
  return GridOptionsWrapper;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
// when doing transactions, or change detection, and grouping is present
// in the data, there is no need for the ClientSideRowModel to update each
// group after an update, ony parts that were impacted by the change.
// this class keeps track of all groups that were impacted by a transaction.
// the the different CSRM operations (filter, sort etc) use the forEach method
// to visit each group that was changed.
var ChangedPath = /** @class */function () {
  function ChangedPath(keepingColumns, rootNode) {
    // whether changed path is active of not. it is active when a) doing
    // a transaction update or b) doing change detection. if we are doing
    // a CSRM refresh for other reasons (after sort or filter, or user calling
    // setRowData() without delta mode) then we are not active. we are also
    // marked as not active if secondary columns change in pivot (as this impacts
    // aggregations)
    this.active = true;
    // for each node in the change path, we also store which columns need
    // to be re-aggregated.
    this.nodeIdsToColumns = {};
    // for quick lookup, all items in the change path are mapped by nodeId
    this.mapToItems = {};
    this.keepingColumns = keepingColumns;
    this.pathRoot = {
      rowNode: rootNode,
      children: null
    };
    this.mapToItems[rootNode.id] = this.pathRoot;
  }
  // can be set inactive by:
  // a) ClientSideRowModel, if no transactions or
  // b) PivotService, if secondary columns changed
  ChangedPath.prototype.setInactive = function () {
    this.active = false;
  };
  ChangedPath.prototype.isActive = function () {
    return this.active;
  };
  ChangedPath.prototype.depthFirstSearchChangedPath = function (pathItem, callback) {
    if (pathItem.children) {
      for (var i = 0; i < pathItem.children.length; i++) {
        this.depthFirstSearchChangedPath(pathItem.children[i], callback);
      }
    }
    callback(pathItem.rowNode);
  };
  ChangedPath.prototype.depthFirstSearchEverything = function (rowNode, callback, traverseEverything) {
    if (rowNode.childrenAfterGroup) {
      for (var i = 0; i < rowNode.childrenAfterGroup.length; i++) {
        var childNode = rowNode.childrenAfterGroup[i];
        if (childNode.childrenAfterGroup) {
          this.depthFirstSearchEverything(rowNode.childrenAfterGroup[i], callback, traverseEverything);
        } else if (traverseEverything) {
          callback(childNode);
        }
      }
    }
    callback(rowNode);
  };
  // traverseLeafNodes -> used when NOT doing changed path, ie traversing everything. the callback
  // will be called for child nodes in addition to parent nodes.
  ChangedPath.prototype.forEachChangedNodeDepthFirst = function (callback, traverseLeafNodes) {
    if (traverseLeafNodes === void 0) {
      traverseLeafNodes = false;
    }
    if (this.active) {
      // if we are active, then use the change path to callback
      // only for updated groups
      this.depthFirstSearchChangedPath(this.pathRoot, callback);
    } else {
      // we are not active, so callback for everything, walk the entire path
      this.depthFirstSearchEverything(this.pathRoot.rowNode, callback, traverseLeafNodes);
    }
  };
  ChangedPath.prototype.executeFromRootNode = function (callback) {
    callback(this.pathRoot.rowNode);
  };
  ChangedPath.prototype.createPathItems = function (rowNode) {
    var pointer = rowNode;
    var newEntryCount = 0;
    while (!this.mapToItems[pointer.id]) {
      var newEntry = {
        rowNode: pointer,
        children: null
      };
      this.mapToItems[pointer.id] = newEntry;
      newEntryCount++;
      pointer = pointer.parent;
    }
    return newEntryCount;
  };
  ChangedPath.prototype.populateColumnsMap = function (rowNode, columns) {
    var _this = this;
    if (!this.keepingColumns || !columns) {
      return;
    }
    var pointer = rowNode;
    while (pointer) {
      // if columns, add the columns in all the way to parent, merging
      // in any other columns that might be there already
      if (!this.nodeIdsToColumns[pointer.id]) {
        this.nodeIdsToColumns[pointer.id] = {};
      }
      columns.forEach(function (col) {
        return _this.nodeIdsToColumns[pointer.id][col.getId()] = true;
      });
      pointer = pointer.parent;
    }
  };
  ChangedPath.prototype.linkPathItems = function (rowNode, newEntryCount) {
    var pointer = rowNode;
    for (var i = 0; i < newEntryCount; i++) {
      var thisItem = this.mapToItems[pointer.id];
      var parentItem = this.mapToItems[pointer.parent.id];
      if (!parentItem.children) {
        parentItem.children = [];
      }
      parentItem.children.push(thisItem);
      pointer = pointer.parent;
    }
  };
  // called by
  // 1) change detection (provides cols) and
  // 2) groupStage if doing transaction update (doesn't provide cols)
  ChangedPath.prototype.addParentNode = function (rowNode, columns) {
    if (!rowNode || rowNode.isRowPinned()) {
      return;
    }
    // we cannot do  both steps below in the same loop as
    // the second loop has a dependency on the first loop.
    // ie the hierarchy cannot be stitched up yet because
    // we don't have it built yet
    // create the new PathItem objects.
    var newEntryCount = this.createPathItems(rowNode);
    // link in the node items
    this.linkPathItems(rowNode, newEntryCount);
    // update columns
    this.populateColumnsMap(rowNode, columns);
  };
  ChangedPath.prototype.canSkip = function (rowNode) {
    return this.active && !this.mapToItems[rowNode.id];
  };
  ChangedPath.prototype.getValueColumnsForNode = function (rowNode, valueColumns) {
    if (!this.keepingColumns) {
      return valueColumns;
    }
    var colsForThisNode = this.nodeIdsToColumns[rowNode.id];
    var result = valueColumns.filter(function (col) {
      return colsForThisNode[col.getId()];
    });
    return result;
  };
  ChangedPath.prototype.getNotValueColumnsForNode = function (rowNode, valueColumns) {
    if (!this.keepingColumns) {
      return null;
    }
    var colsForThisNode = this.nodeIdsToColumns[rowNode.id];
    var result = valueColumns.filter(function (col) {
      return !colsForThisNode[col.getId()];
    });
    return result;
  };
  return ChangedPath;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$E =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$A =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param$4 =  false || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};
var SelectionController = /** @class */function (_super) {
  __extends$E(SelectionController, _super);
  function SelectionController() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  SelectionController.prototype.setBeans = function (loggerFactory) {
    this.logger = loggerFactory.create('SelectionController');
    this.reset();
    if (this.gridOptionsWrapper.isRowModelDefault()) {
      this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_CHANGED, this.reset.bind(this));
    }
  };
  SelectionController.prototype.init = function () {
    this.groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
    this.addManagedListener(this.eventService, Events.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));
  };
  SelectionController.prototype.setLastSelectedNode = function (rowNode) {
    this.lastSelectedNode = rowNode;
  };
  SelectionController.prototype.getLastSelectedNode = function () {
    return this.lastSelectedNode;
  };
  SelectionController.prototype.getSelectedNodes = function () {
    var selectedNodes = [];
    iterateObject(this.selectedNodes, function (key, rowNode) {
      if (rowNode) {
        selectedNodes.push(rowNode);
      }
    });
    return selectedNodes;
  };
  SelectionController.prototype.getSelectedRows = function () {
    var selectedRows = [];
    iterateObject(this.selectedNodes, function (key, rowNode) {
      if (rowNode && rowNode.data) {
        selectedRows.push(rowNode.data);
      }
    });
    return selectedRows;
  };
  SelectionController.prototype.removeGroupsFromSelection = function () {
    var _this = this;
    iterateObject(this.selectedNodes, function (key, rowNode) {
      if (rowNode && rowNode.group) {
        _this.selectedNodes[rowNode.id] = undefined;
      }
    });
  };
  // should only be called if groupSelectsChildren=true
  SelectionController.prototype.updateGroupsFromChildrenSelections = function (changedPath) {
    // we only do this when group selection state depends on selected children
    if (!this.gridOptionsWrapper.isGroupSelectsChildren()) {
      return;
    }
    // also only do it if CSRM (code should never allow this anyway)
    if (this.rowModel.getType() !== Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
      return;
    }
    var clientSideRowModel = this.rowModel;
    var rootNode = clientSideRowModel.getRootNode();
    if (!changedPath) {
      changedPath = new ChangedPath(true, rootNode);
      changedPath.setInactive();
    }
    changedPath.forEachChangedNodeDepthFirst(function (rowNode) {
      if (rowNode !== rootNode) {
        rowNode.calculateSelectedFromChildren();
      }
    });
    // clientSideRowModel.getTopLevelNodes()!.forEach((rowNode: RowNode) => {
    //     rowNode.depthFirstSearch((node) => {
    //         if (node.group) {
    //         }
    //     });
    // });
  };

  SelectionController.prototype.getNodeForIdIfSelected = function (id) {
    return this.selectedNodes[id];
  };
  SelectionController.prototype.clearOtherNodes = function (rowNodeToKeepSelected) {
    var _this = this;
    var groupsToRefresh = {};
    var updatedCount = 0;
    iterateObject(this.selectedNodes, function (key, otherRowNode) {
      if (otherRowNode && otherRowNode.id !== rowNodeToKeepSelected.id) {
        var rowNode = _this.selectedNodes[otherRowNode.id];
        updatedCount += rowNode.setSelectedParams({
          newValue: false,
          clearSelection: false,
          suppressFinishActions: true
        });
        if (_this.groupSelectsChildren && otherRowNode.parent) {
          groupsToRefresh[otherRowNode.parent.id] = otherRowNode.parent;
        }
      }
    });
    iterateObject(groupsToRefresh, function (key, group) {
      group.calculateSelectedFromChildren();
    });
    return updatedCount;
  };
  SelectionController.prototype.onRowSelected = function (event) {
    var rowNode = event.node;
    // we do not store the group rows when the groups select children
    if (this.groupSelectsChildren && rowNode.group) {
      return;
    }
    if (rowNode.isSelected()) {
      this.selectedNodes[rowNode.id] = rowNode;
    } else {
      this.selectedNodes[rowNode.id] = undefined;
    }
  };
  SelectionController.prototype.syncInRowNode = function (rowNode, oldNode) {
    this.syncInOldRowNode(rowNode, oldNode);
    this.syncInNewRowNode(rowNode);
  };
  // if the id has changed for the node, then this means the rowNode
  // is getting used for a different data item, which breaks
  // our selectedNodes, as the node now is mapped by the old id
  // which is inconsistent. so to keep the old node as selected,
  // we swap in the clone (with the old id and old data). this means
  // the oldNode is effectively a daemon we keep a reference to,
  // so if client calls api.getSelectedNodes(), it gets the daemon
  // in the result. when the client un-selects, the reference to the
  // daemon is removed. the daemon, because it's an oldNode, is not
  // used by the grid for rendering, it's a copy of what the node used
  // to be like before the id was changed.
  SelectionController.prototype.syncInOldRowNode = function (rowNode, oldNode) {
    var oldNodeHasDifferentId = exists(oldNode) && rowNode.id !== oldNode.id;
    if (oldNodeHasDifferentId && oldNode) {
      var oldNodeSelected = exists(this.selectedNodes[oldNode.id]);
      if (oldNodeSelected) {
        this.selectedNodes[oldNode.id] = oldNode;
      }
    }
  };
  SelectionController.prototype.syncInNewRowNode = function (rowNode) {
    if (exists(this.selectedNodes[rowNode.id])) {
      rowNode.setSelectedInitialValue(true);
      this.selectedNodes[rowNode.id] = rowNode;
    } else {
      rowNode.setSelectedInitialValue(false);
    }
  };
  SelectionController.prototype.reset = function () {
    this.logger.log('reset');
    this.selectedNodes = {};
    this.lastSelectedNode = null;
  };
  // returns a list of all nodes at 'best cost' - a feature to be used
  // with groups / trees. if a group has all it's children selected,
  // then the group appears in the result, but not the children.
  // Designed for use with 'children' as the group selection type,
  // where groups don't actually appear in the selection normally.
  SelectionController.prototype.getBestCostNodeSelection = function () {
    if (this.rowModel.getType() !== Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
      console.warn('getBestCostNodeSelection is only available when using normal row model');
      return;
    }
    var clientSideRowModel = this.rowModel;
    var topLevelNodes = clientSideRowModel.getTopLevelNodes();
    if (topLevelNodes === null) {
      console.warn('selectAll not available doing rowModel=virtual');
      return;
    }
    var result = [];
    // recursive function, to find the selected nodes
    function traverse(nodes) {
      for (var i = 0, l = nodes.length; i < l; i++) {
        var node = nodes[i];
        if (node.isSelected()) {
          result.push(node);
        } else {
          // if not selected, then if it's a group, and the group
          // has children, continue to search for selections
          if (node.group && node.children) {
            traverse(node.children);
          }
        }
      }
    }
    traverse(topLevelNodes);
    return result;
  };
  SelectionController.prototype.setRowModel = function (rowModel) {
    this.rowModel = rowModel;
  };
  SelectionController.prototype.isEmpty = function () {
    var count = 0;
    iterateObject(this.selectedNodes, function (nodeId, rowNode) {
      if (rowNode) {
        count++;
      }
    });
    return count === 0;
  };
  SelectionController.prototype.deselectAllRowNodes = function (justFiltered) {
    if (justFiltered === void 0) {
      justFiltered = false;
    }
    var callback = function (rowNode) {
      return rowNode.selectThisNode(false);
    };
    var rowModelClientSide = this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
    if (justFiltered) {
      if (!rowModelClientSide) {
        console.error('AG Grid: selecting just filtered only works with In Memory Row Model');
        return;
      }
      var clientSideRowModel = this.rowModel;
      clientSideRowModel.forEachNodeAfterFilter(callback);
    } else {
      iterateObject(this.selectedNodes, function (id, rowNode) {
        // remember the reference can be to null, as we never 'delete' from the map
        if (rowNode) {
          callback(rowNode);
        }
      });
      // this clears down the map (whereas above only sets the items in map to 'undefined')
      this.reset();
    }
    // the above does not clean up the parent rows if they are selected
    if (rowModelClientSide && this.groupSelectsChildren) {
      this.updateGroupsFromChildrenSelections();
    }
    var event = {
      type: Events.EVENT_SELECTION_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(event);
  };
  SelectionController.prototype.selectAllRowNodes = function (justFiltered) {
    if (justFiltered === void 0) {
      justFiltered = false;
    }
    if (this.rowModel.getType() !== Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
      throw new Error("selectAll only available with normal row model, ie not " + this.rowModel.getType());
    }
    var clientSideRowModel = this.rowModel;
    var callback = function (rowNode) {
      return rowNode.selectThisNode(true);
    };
    if (justFiltered) {
      clientSideRowModel.forEachNodeAfterFilter(callback);
    } else {
      clientSideRowModel.forEachNode(callback);
    }
    // the above does not clean up the parent rows if they are selected
    if (this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE && this.groupSelectsChildren) {
      this.updateGroupsFromChildrenSelections();
    }
    var event = {
      type: Events.EVENT_SELECTION_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(event);
  };
  /**
   * @method
   * @deprecated
   */
  SelectionController.prototype.selectNode = function (rowNode, tryMulti) {
    if (rowNode) {
      rowNode.setSelectedParams({
        newValue: true,
        clearSelection: !tryMulti
      });
    }
  };
  /**
   * @method
   * @deprecated
   */
  SelectionController.prototype.deselectIndex = function (rowIndex) {
    var node = this.rowModel.getRow(rowIndex);
    this.deselectNode(node);
  };
  /**
   * @method
   * @deprecated
   */
  SelectionController.prototype.deselectNode = function (rowNode) {
    if (rowNode) {
      rowNode.setSelectedParams({
        newValue: false,
        clearSelection: false
      });
    }
  };
  /**
   * @method
   * @deprecated
   */
  SelectionController.prototype.selectIndex = function (index, tryMulti) {
    var node = this.rowModel.getRow(index);
    this.selectNode(node, tryMulti);
  };
  __decorate$A([Autowired('rowModel')], SelectionController.prototype, "rowModel", void 0);
  __decorate$A([Autowired('columnApi')], SelectionController.prototype, "columnApi", void 0);
  __decorate$A([Autowired('gridApi')], SelectionController.prototype, "gridApi", void 0);
  __decorate$A([__param$4(0, Qualifier('loggerFactory'))], SelectionController.prototype, "setBeans", null);
  __decorate$A([PostConstruct], SelectionController.prototype, "init", null);
  SelectionController = __decorate$A([Bean('selectionController')], SelectionController);
  return SelectionController;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __decorate$B =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ColumnApi = /** @class */function () {
  function ColumnApi() {}
  ColumnApi.prototype.sizeColumnsToFit = function (gridWidth) {
    // AG-3403 validate that gridWidth is provided because this method has the same name as
    // a method on the grid API that takes no arguments, and it's easy to confuse the two
    if (typeof gridWidth === "undefined") {
      console.error('AG Grid: missing parameter to columnApi.sizeColumnsToFit(gridWidth)');
    }
    this.columnController.sizeColumnsToFit(gridWidth, 'api');
  };
  ColumnApi.prototype.setColumnGroupOpened = function (group, newValue) {
    this.columnController.setColumnGroupOpened(group, newValue, 'api');
  };
  ColumnApi.prototype.getColumnGroup = function (name, instanceId) {
    return this.columnController.getColumnGroup(name, instanceId);
  };
  ColumnApi.prototype.getOriginalColumnGroup = function (name) {
    return this.columnController.getOriginalColumnGroup(name);
  };
  ColumnApi.prototype.getDisplayNameForColumn = function (column, location) {
    return this.columnController.getDisplayNameForColumn(column, location) || '';
  };
  ColumnApi.prototype.getDisplayNameForColumnGroup = function (columnGroup, location) {
    return this.columnController.getDisplayNameForColumnGroup(columnGroup, location) || '';
  };
  ColumnApi.prototype.getColumn = function (key) {
    return this.columnController.getPrimaryColumn(key);
  };
  ColumnApi.prototype.applyColumnState = function (params) {
    return this.columnController.applyColumnState(params, 'api');
  };
  ColumnApi.prototype.getColumnState = function () {
    return this.columnController.getColumnState();
  };
  ColumnApi.prototype.resetColumnState = function () {
    this.columnController.resetColumnState('api');
  };
  ColumnApi.prototype.getColumnGroupState = function () {
    return this.columnController.getColumnGroupState();
  };
  ColumnApi.prototype.setColumnGroupState = function (stateItems) {
    this.columnController.setColumnGroupState(stateItems, 'api');
  };
  ColumnApi.prototype.resetColumnGroupState = function () {
    this.columnController.resetColumnGroupState('api');
  };
  ColumnApi.prototype.isPinning = function () {
    return this.columnController.isPinningLeft() || this.columnController.isPinningRight();
  };
  ColumnApi.prototype.isPinningLeft = function () {
    return this.columnController.isPinningLeft();
  };
  ColumnApi.prototype.isPinningRight = function () {
    return this.columnController.isPinningRight();
  };
  ColumnApi.prototype.getDisplayedColAfter = function (col) {
    return this.columnController.getDisplayedColAfter(col);
  };
  ColumnApi.prototype.getDisplayedColBefore = function (col) {
    return this.columnController.getDisplayedColBefore(col);
  };
  ColumnApi.prototype.setColumnVisible = function (key, visible) {
    this.columnController.setColumnVisible(key, visible, 'api');
  };
  ColumnApi.prototype.setColumnsVisible = function (keys, visible) {
    this.columnController.setColumnsVisible(keys, visible, 'api');
  };
  ColumnApi.prototype.setColumnPinned = function (key, pinned) {
    this.columnController.setColumnPinned(key, pinned, 'api');
  };
  ColumnApi.prototype.setColumnsPinned = function (keys, pinned) {
    this.columnController.setColumnsPinned(keys, pinned, 'api');
  };
  ColumnApi.prototype.getAllColumns = function () {
    return this.columnController.getAllPrimaryColumns();
  };
  ColumnApi.prototype.getAllGridColumns = function () {
    return this.columnController.getAllGridColumns();
  };
  ColumnApi.prototype.getDisplayedLeftColumns = function () {
    return this.columnController.getDisplayedLeftColumns();
  };
  ColumnApi.prototype.getDisplayedCenterColumns = function () {
    return this.columnController.getDisplayedCenterColumns();
  };
  ColumnApi.prototype.getDisplayedRightColumns = function () {
    return this.columnController.getDisplayedRightColumns();
  };
  ColumnApi.prototype.getAllDisplayedColumns = function () {
    return this.columnController.getAllDisplayedColumns();
  };
  ColumnApi.prototype.getAllDisplayedVirtualColumns = function () {
    return this.columnController.getViewportColumns();
  };
  ColumnApi.prototype.moveColumn = function (key, toIndex) {
    if (typeof key === 'number') {
      // moveColumn used to take indexes, so this is advising user who hasn't moved to new method name
      console.warn('AG Grid: you are using moveColumn(fromIndex, toIndex) - moveColumn takes a column key and a destination index, not two indexes, to move with indexes use moveColumnByIndex(from,to) instead');
      this.columnController.moveColumnByIndex(key, toIndex, 'api');
    } else {
      this.columnController.moveColumn(key, toIndex, 'api');
    }
  };
  ColumnApi.prototype.moveColumnByIndex = function (fromIndex, toIndex) {
    this.columnController.moveColumnByIndex(fromIndex, toIndex, 'api');
  };
  ColumnApi.prototype.moveColumns = function (columnsToMoveKeys, toIndex) {
    this.columnController.moveColumns(columnsToMoveKeys, toIndex, 'api');
  };
  ColumnApi.prototype.moveRowGroupColumn = function (fromIndex, toIndex) {
    this.columnController.moveRowGroupColumn(fromIndex, toIndex);
  };
  ColumnApi.prototype.setColumnAggFunc = function (key, aggFunc) {
    this.columnController.setColumnAggFunc(key, aggFunc);
  };
  ColumnApi.prototype.setColumnWidth = function (key, newWidth, finished) {
    if (finished === void 0) {
      finished = true;
    }
    this.columnController.setColumnWidths([{
      key: key,
      newWidth: newWidth
    }], false, finished);
  };
  ColumnApi.prototype.setColumnWidths = function (columnWidths, finished) {
    if (finished === void 0) {
      finished = true;
    }
    this.columnController.setColumnWidths(columnWidths, false, finished);
  };
  ColumnApi.prototype.setPivotMode = function (pivotMode) {
    this.columnController.setPivotMode(pivotMode);
  };
  ColumnApi.prototype.isPivotMode = function () {
    return this.columnController.isPivotMode();
  };
  ColumnApi.prototype.getSecondaryPivotColumn = function (pivotKeys, valueColKey) {
    return this.columnController.getSecondaryPivotColumn(pivotKeys, valueColKey);
  };
  ColumnApi.prototype.setValueColumns = function (colKeys) {
    this.columnController.setValueColumns(colKeys, 'api');
  };
  ColumnApi.prototype.getValueColumns = function () {
    return this.columnController.getValueColumns();
  };
  ColumnApi.prototype.removeValueColumn = function (colKey) {
    this.columnController.removeValueColumn(colKey, 'api');
  };
  ColumnApi.prototype.removeValueColumns = function (colKeys) {
    this.columnController.removeValueColumns(colKeys, 'api');
  };
  ColumnApi.prototype.addValueColumn = function (colKey) {
    this.columnController.addValueColumn(colKey, 'api');
  };
  ColumnApi.prototype.addValueColumns = function (colKeys) {
    this.columnController.addValueColumns(colKeys, 'api');
  };
  ColumnApi.prototype.setRowGroupColumns = function (colKeys) {
    this.columnController.setRowGroupColumns(colKeys, 'api');
  };
  ColumnApi.prototype.removeRowGroupColumn = function (colKey) {
    this.columnController.removeRowGroupColumn(colKey, 'api');
  };
  ColumnApi.prototype.removeRowGroupColumns = function (colKeys) {
    this.columnController.removeRowGroupColumns(colKeys, 'api');
  };
  ColumnApi.prototype.addRowGroupColumn = function (colKey) {
    this.columnController.addRowGroupColumn(colKey, 'api');
  };
  ColumnApi.prototype.addRowGroupColumns = function (colKeys) {
    this.columnController.addRowGroupColumns(colKeys, 'api');
  };
  ColumnApi.prototype.getRowGroupColumns = function () {
    return this.columnController.getRowGroupColumns();
  };
  ColumnApi.prototype.setPivotColumns = function (colKeys) {
    this.columnController.setPivotColumns(colKeys, 'api');
  };
  ColumnApi.prototype.removePivotColumn = function (colKey) {
    this.columnController.removePivotColumn(colKey, 'api');
  };
  ColumnApi.prototype.removePivotColumns = function (colKeys) {
    this.columnController.removePivotColumns(colKeys, 'api');
  };
  ColumnApi.prototype.addPivotColumn = function (colKey) {
    this.columnController.addPivotColumn(colKey, 'api');
  };
  ColumnApi.prototype.addPivotColumns = function (colKeys) {
    this.columnController.addPivotColumns(colKeys, 'api');
  };
  ColumnApi.prototype.getPivotColumns = function () {
    return this.columnController.getPivotColumns();
  };
  ColumnApi.prototype.getLeftDisplayedColumnGroups = function () {
    return this.columnController.getDisplayedTreeLeft();
  };
  ColumnApi.prototype.getCenterDisplayedColumnGroups = function () {
    return this.columnController.getDisplayedTreeCentre();
  };
  ColumnApi.prototype.getRightDisplayedColumnGroups = function () {
    return this.columnController.getDisplayedTreeRight();
  };
  ColumnApi.prototype.getAllDisplayedColumnGroups = function () {
    return this.columnController.getAllDisplayedTrees();
  };
  ColumnApi.prototype.autoSizeColumn = function (key, skipHeader) {
    return this.columnController.autoSizeColumn(key, skipHeader, 'api');
  };
  ColumnApi.prototype.autoSizeColumns = function (keys, skipHeader) {
    return this.columnController.autoSizeColumns(keys, skipHeader, 'api');
  };
  ColumnApi.prototype.autoSizeAllColumns = function (skipHeader) {
    this.columnController.autoSizeAllColumns(skipHeader, 'api');
  };
  ColumnApi.prototype.setSecondaryColumns = function (colDefs) {
    this.columnController.setSecondaryColumns(colDefs, 'api');
  };
  ColumnApi.prototype.getSecondaryColumns = function () {
    return this.columnController.getSecondaryColumns();
  };
  ColumnApi.prototype.getPrimaryColumns = function () {
    return this.columnController.getAllPrimaryColumns();
  };
  ColumnApi.prototype.cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid = function () {
    // some users were raising support issues with regards memory leaks. the problem was the customers applications
    // were keeping references to the API. trying to educate them all would be difficult, easier to just remove
    // all references in teh API so at least the core grid can be garbage collected.
    //
    // wait about 100ms before clearing down the references, in case user has some cleanup to do,
    // and needs to deference the API first
    setTimeout(_.removeAllReferences.bind(window, this, 'Column API'), 100);
  };
  // below goes through deprecated items, prints message to user, then calls the new version of the same method
  // public getColumnDefs(): (ColDef | ColGroupDef)[] {
  //     this.setColumnGroupOpened(group, newValue);
  //     return null;
  // }
  ColumnApi.prototype.columnGroupOpened = function (group, newValue) {
    console.error('AG Grid: columnGroupOpened no longer exists, use setColumnGroupOpened');
    this.setColumnGroupOpened(group, newValue);
  };
  ColumnApi.prototype.hideColumns = function (colIds, hide) {
    console.error('AG Grid: hideColumns is deprecated, use setColumnsVisible');
    this.columnController.setColumnsVisible(colIds, !hide, 'api');
  };
  ColumnApi.prototype.hideColumn = function (colId, hide) {
    console.error('AG Grid: hideColumn is deprecated, use setColumnVisible');
    this.columnController.setColumnVisible(colId, !hide, 'api');
  };
  ColumnApi.prototype.setState = function (columnState) {
    console.error('AG Grid: setState is deprecated, use setColumnState');
    return this.setColumnState(columnState);
  };
  ColumnApi.prototype.getState = function () {
    console.error('AG Grid: getState is deprecated, use getColumnState');
    return this.getColumnState();
  };
  ColumnApi.prototype.resetState = function () {
    console.error('AG Grid: resetState is deprecated, use resetColumnState');
    this.resetColumnState();
  };
  ColumnApi.prototype.getAggregationColumns = function () {
    console.error('AG Grid: getAggregationColumns is deprecated, use getValueColumns');
    return this.columnController.getValueColumns();
  };
  ColumnApi.prototype.removeAggregationColumn = function (colKey) {
    console.error('AG Grid: removeAggregationColumn is deprecated, use removeValueColumn');
    this.columnController.removeValueColumn(colKey, 'api');
  };
  ColumnApi.prototype.removeAggregationColumns = function (colKeys) {
    console.error('AG Grid: removeAggregationColumns is deprecated, use removeValueColumns');
    this.columnController.removeValueColumns(colKeys, 'api');
  };
  ColumnApi.prototype.addAggregationColumn = function (colKey) {
    console.error('AG Grid: addAggregationColumn is deprecated, use addValueColumn');
    this.columnController.addValueColumn(colKey, 'api');
  };
  ColumnApi.prototype.addAggregationColumns = function (colKeys) {
    console.error('AG Grid: addAggregationColumns is deprecated, use addValueColumns');
    this.columnController.addValueColumns(colKeys, 'api');
  };
  ColumnApi.prototype.setColumnAggFunction = function (column, aggFunc) {
    console.error('AG Grid: setColumnAggFunction is deprecated, use setColumnAggFunc');
    this.columnController.setColumnAggFunc(column, aggFunc, 'api');
  };
  ColumnApi.prototype.getDisplayNameForCol = function (column) {
    console.error('AG Grid: getDisplayNameForCol is deprecated, use getDisplayNameForColumn');
    return this.getDisplayNameForColumn(column, null);
  };
  ColumnApi.prototype.setColumnState = function (columnState) {
    return this.columnController.applyColumnState({
      state: columnState,
      applyOrder: true
    }, 'api');
  };
  __decorate$B([Autowired('columnController')], ColumnApi.prototype, "columnController", void 0);
  __decorate$B([PreDestroy], ColumnApi.prototype, "cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid", null);
  ColumnApi = __decorate$B([Bean('columnApi')], ColumnApi);
  return ColumnApi;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __assign$3 =  false || function () {
  __assign$3 = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$3.apply(this, arguments);
};
var AngularRowUtils = /** @class */function () {
  function AngularRowUtils() {}
  AngularRowUtils.createChildScopeOrNull = function (rowNode, parentScope, gridOptionsWrapper) {
    var isAngularCompileRows = gridOptionsWrapper.isAngularCompileRows();
    if (!isAngularCompileRows) {
      return null;
    }
    var newChildScope = parentScope.$new();
    newChildScope.data = __assign$3({}, rowNode.data);
    newChildScope.rowNode = rowNode;
    newChildScope.context = gridOptionsWrapper.getContext();
    var destroyFunc = function () {
      newChildScope.$destroy();
      newChildScope.data = null;
      newChildScope.rowNode = null;
      newChildScope.context = null;
    };
    return {
      scope: newChildScope,
      scopeDestroyFunc: destroyFunc
    };
  };
  return AngularRowUtils;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$F =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var RowType;
(function (RowType) {
  RowType["Normal"] = "Normal";
  RowType["FullWidth"] = "FullWidth";
  RowType["FullWidthLoading"] = "FullWidthLoading";
  RowType["FullWidthGroup"] = "FullWidthGroup";
  RowType["FullWidthDetail"] = "FullWidthDetail";
})(RowType || (RowType = {}));
var FullWidthRenderers = convertToMap([[RowType.FullWidthLoading, 'agLoadingCellRenderer'], [RowType.FullWidthGroup, 'agGroupRowRenderer'], [RowType.FullWidthDetail, 'agDetailCellRenderer']]);
var FullWidthKeys = convertToMap([[RowType.FullWidth, 'fullWidthCellRenderer'], [RowType.FullWidthLoading, 'loadingCellRenderer'], [RowType.FullWidthGroup, 'groupRowRenderer'], [RowType.FullWidthDetail, 'detailCellRenderer']]);
var instanceIdSequence = 0;
var RowController = /** @class */function (_super) {
  __extends$F(RowController, _super);
  function RowController(parentScope, rowNode, beans, animateIn, useAnimationFrameForCreate, printLayout) {
    var _this = _super.call(this) || this;
    _this.instanceId = instanceIdSequence++;
    _this.allRowComps = [];
    _this.active = true;
    _this.centerCols = [];
    _this.leftCols = [];
    _this.rightCols = [];
    _this.lastMouseDownOnDragger = false;
    _this.updateColumnListsPending = false;
    _this.parentScope = parentScope;
    _this.beans = beans;
    _this.rowNode = rowNode;
    _this.rowIsEven = _this.rowNode.rowIndex % 2 === 0;
    _this.paginationPage = _this.beans.paginationProxy.getCurrentPage();
    _this.useAnimationFrameForCreate = useAnimationFrameForCreate;
    _this.printLayout = printLayout;
    _this.setAnimateFlags(animateIn);
    _this.rowFocused = _this.beans.focusController.isRowFocused(_this.rowNode.rowIndex, _this.rowNode.rowPinned);
    _this.setupAngular1Scope();
    _this.rowLevel = _this.beans.rowCssClassCalculator.calculateRowLevel(_this.rowNode);
    _this.setRowType();
    _this.updateColumnLists(!_this.useAnimationFrameForCreate);
    _this.addListeners();
    if (_this.slideRowIn) {
      executeNextVMTurn(_this.onTopChanged.bind(_this));
    }
    if (_this.fadeRowIn) {
      executeNextVMTurn(function () {
        _this.allRowComps.forEach(function (rowComp) {
          return removeCssClass(rowComp.getGui(), 'ag-opacity-zero');
        });
      });
    }
    return _this;
  }
  RowController.prototype.getInstanceId = function () {
    return this.instanceId;
  };
  RowController.prototype.setLeftRowComp = function (rowComp) {
    if (this.leftRowComp) {
      console.error('AG Grid - should not set leftRowComp twice');
    }
    this.leftRowComp = rowComp;
    this.allRowComps.push(rowComp);
  };
  RowController.prototype.setRightRowComp = function (rowComp) {
    if (this.rightRowComp) {
      console.error('AG Grid - should not set rightRowComp twice');
    }
    this.rightRowComp = rowComp;
    this.allRowComps.push(rowComp);
  };
  RowController.prototype.setCenterRowComp = function (rowComp) {
    if (this.centerRowComp) {
      console.error('AG Grid - should not set centerRowComp twice');
    }
    this.centerRowComp = rowComp;
    this.allRowComps.push(rowComp);
  };
  RowController.prototype.setFullWidthRowComp = function (rowComp) {
    if (this.fullWidthRowComp) {
      console.error('AG Grid - should not set fullWidthRowComp twice');
    }
    this.fullWidthRowComp = rowComp;
    this.allRowComps.push(rowComp);
  };
  RowController.prototype.getColsForRowComp = function (pinned) {
    switch (pinned) {
      case Constants.PINNED_RIGHT:
        return this.rightCols;
      case Constants.PINNED_LEFT:
        return this.leftCols;
      default:
        return this.centerCols;
    }
  };
  RowController.prototype.getScope = function () {
    return this.scope;
  };
  RowController.prototype.isPrintLayout = function () {
    return this.printLayout;
  };
  RowController.prototype.setupAngular1Scope = function () {
    var scopeResult = AngularRowUtils.createChildScopeOrNull(this.rowNode, this.parentScope, this.beans.gridOptionsWrapper);
    if (scopeResult) {
      this.scope = scopeResult.scope;
      this.addDestroyFunc(scopeResult.scopeDestroyFunc);
    }
  };
  RowController.prototype.getCellForCol = function (column) {
    var cellComp = this.getRenderedCellForColumn(column);
    return cellComp ? cellComp.getGui() : null;
  };
  RowController.prototype.executeProcessRowPostCreateFunc = function () {
    var func = this.beans.gridOptionsWrapper.getProcessRowPostCreateFunc();
    if (!func) {
      return;
    }
    var params = {
      eRow: this.centerRowComp ? this.centerRowComp.getGui() : undefined,
      ePinnedLeftRow: this.leftRowComp ? this.leftRowComp.getGui() : undefined,
      ePinnedRightRow: this.rightRowComp ? this.rightRowComp.getGui() : undefined,
      node: this.rowNode,
      api: this.beans.gridOptionsWrapper.getApi(),
      rowIndex: this.rowNode.rowIndex,
      addRenderedRowListener: this.addEventListener.bind(this),
      columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
      context: this.beans.gridOptionsWrapper.getContext()
    };
    func(params);
  };
  RowController.prototype.setRowType = function () {
    var isStub = this.rowNode.stub;
    var isFullWidthCell = this.rowNode.isFullWidthCell();
    var isDetailCell = this.beans.doingMasterDetail && this.rowNode.detail;
    var pivotMode = this.beans.columnController.isPivotMode();
    // we only use full width for groups, not footers. it wouldn't make sense to include footers if not looking
    // for totals. if users complain about this, then we should introduce a new property 'footerUseEntireRow'
    // so each can be set independently (as a customer complained about footers getting full width, hence
    // introducing this logic)
    var isGroupRow = !!this.rowNode.group && !this.rowNode.footer;
    var isFullWidthGroup = isGroupRow && this.beans.gridOptionsWrapper.isGroupUseEntireRow(pivotMode);
    if (isStub) {
      this.rowType = RowType.FullWidthLoading;
    } else if (isDetailCell) {
      this.rowType = RowType.FullWidthDetail;
    } else if (isFullWidthCell) {
      this.rowType = RowType.FullWidth;
    } else if (isFullWidthGroup) {
      this.rowType = RowType.FullWidthGroup;
    } else {
      this.rowType = RowType.Normal;
    }
  };
  RowController.prototype.updateColumnLists = function (suppressAnimationFrame) {
    var _this = this;
    if (suppressAnimationFrame === void 0) {
      suppressAnimationFrame = false;
    }
    if (this.isFullWidth()) {
      return;
    }
    var noAnimation = suppressAnimationFrame || this.beans.gridOptionsWrapper.isSuppressAnimationFrame() || this.printLayout;
    if (noAnimation) {
      this.updateColumnListsImpl();
      return;
    }
    if (this.updateColumnListsPending) {
      return;
    }
    this.beans.taskQueue.createTask(function () {
      if (!_this.active) {
        return;
      }
      _this.updateColumnListsImpl();
    }, this.rowNode.rowIndex, 'createTasksP1');
    this.updateColumnListsPending = true;
  };
  RowController.prototype.updateColumnListsImpl = function () {
    this.updateColumnListsPending = false;
    if (this.printLayout) {
      this.centerCols = this.beans.columnController.getAllDisplayedColumns();
      this.leftCols = [];
      this.rightCols = [];
    } else {
      this.centerCols = this.beans.columnController.getViewportCenterColumnsForRow(this.rowNode);
      this.leftCols = this.beans.columnController.getDisplayedLeftColumnsForRow(this.rowNode);
      this.rightCols = this.beans.columnController.getDisplayedRightColumnsForRow(this.rowNode);
    }
    this.allRowComps.forEach(function (rc) {
      return rc.onColumnChanged();
    });
  };
  RowController.prototype.setAnimateFlags = function (animateIn) {
    if (animateIn) {
      var oldRowTopExists = exists(this.rowNode.oldRowTop);
      // if the row had a previous position, we slide it in (animate row top)
      this.slideRowIn = oldRowTopExists;
      // if the row had no previous position, we fade it in (animate
      this.fadeRowIn = !oldRowTopExists;
    } else {
      this.slideRowIn = false;
      this.fadeRowIn = false;
    }
  };
  RowController.prototype.isEditing = function () {
    return this.editingRow;
  };
  RowController.prototype.stopRowEditing = function (cancel) {
    this.stopEditing(cancel);
  };
  RowController.prototype.isFullWidth = function () {
    return this.rowType !== RowType.Normal;
  };
  RowController.prototype.getRowType = function () {
    return this.rowType;
  };
  RowController.prototype.refreshFullWidth = function () {
    var _this = this;
    // returns 'true' if refresh succeeded
    var tryRefresh = function (rowComp, pinned) {
      if (!rowComp) {
        return true;
      } // no refresh needed
      var cellComp = rowComp.getFullWidthRowComp();
      if (!cellComp) {
        return true;
      } // no refresh needed
      // no refresh method present, so can't refresh, hard refresh needed
      if (!cellComp.refresh) {
        return false;
      }
      var params = _this.createFullWidthParams(rowComp.getGui(), pinned);
      var refreshSucceeded = cellComp.refresh(params);
      return refreshSucceeded;
    };
    var normalSuccess = tryRefresh(this.fullWidthRowComp, null);
    var bodySuccess = tryRefresh(this.centerRowComp, null);
    var leftSuccess = tryRefresh(this.leftRowComp, Constants.PINNED_LEFT);
    var rightSuccess = tryRefresh(this.rightRowComp, Constants.PINNED_RIGHT);
    var allFullWidthRowsRefreshed = normalSuccess && bodySuccess && leftSuccess && rightSuccess;
    return allFullWidthRowsRefreshed;
  };
  RowController.prototype.addListeners = function () {
    this.addManagedListener(this.rowNode, RowNode.EVENT_HEIGHT_CHANGED, this.onRowHeightChanged.bind(this));
    this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));
    this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_INDEX_CHANGED, this.onRowIndexChanged.bind(this));
    this.addManagedListener(this.rowNode, RowNode.EVENT_TOP_CHANGED, this.onTopChanged.bind(this));
    this.addManagedListener(this.rowNode, RowNode.EVENT_EXPANDED_CHANGED, this.updateExpandedCss.bind(this));
    this.addManagedListener(this.rowNode, RowNode.EVENT_HAS_CHILDREN_CHANGED, this.updateExpandedCss.bind(this));
    this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.onRowNodeDataChanged.bind(this));
    this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.onRowNodeCellChanged.bind(this));
    this.addManagedListener(this.rowNode, RowNode.EVENT_HIGHLIGHT_CHANGED, this.onRowNodeHighlightChanged.bind(this));
    this.addManagedListener(this.rowNode, RowNode.EVENT_DRAGGING_CHANGED, this.onRowNodeDraggingChanged.bind(this));
    this.addManagedListener(this.rowNode, RowNode.EVENT_UI_LEVEL_CHANGED, this.onUiLevelChanged.bind(this));
    var eventService = this.beans.eventService;
    this.addManagedListener(eventService, Events.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED, this.onPaginationPixelOffsetChanged.bind(this));
    this.addManagedListener(eventService, Events.EVENT_HEIGHT_SCALE_CHANGED, this.onTopChanged.bind(this));
    this.addManagedListener(eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
    this.addManagedListener(eventService, Events.EVENT_VIRTUAL_COLUMNS_CHANGED, this.onVirtualColumnsChanged.bind(this));
    this.addManagedListener(eventService, Events.EVENT_CELL_FOCUSED, this.onCellFocusChanged.bind(this));
    this.addManagedListener(eventService, Events.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));
    this.addManagedListener(eventService, Events.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));
    this.addManagedListener(eventService, Events.EVENT_COLUMN_MOVED, this.onColumnMoved.bind(this));
    this.addListenersForCellComps();
  };
  RowController.prototype.onColumnMoved = function () {
    this.updateColumnLists();
  };
  RowController.prototype.addListenersForCellComps = function () {
    var _this = this;
    this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_INDEX_CHANGED, function () {
      _this.forEachCellComp(function (cellComp) {
        return cellComp.onRowIndexChanged();
      });
    });
    this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, function (event) {
      _this.forEachCellComp(function (cellComp) {
        return cellComp.onCellChanged(event);
      });
    });
  };
  RowController.prototype.onRowNodeDataChanged = function (event) {
    // if this is an update, we want to refresh, as this will allow the user to put in a transition
    // into the cellRenderer refresh method. otherwise this might be completely new data, in which case
    // we will want to completely replace the cells
    this.forEachCellComp(function (cellComp) {
      return cellComp.refreshCell({
        suppressFlash: !event.update,
        newData: !event.update
      });
    });
    // check for selected also, as this could be after lazy loading of the row data, in which case
    // the id might of just gotten set inside the row and the row selected state may of changed
    // as a result. this is what happens when selected rows are loaded in virtual pagination.
    // - niall note - since moving to the stub component, this may no longer be true, as replacing
    // the stub component now replaces the entire row
    this.onRowSelected();
    // as data has changed, then the style and class needs to be recomputed
    this.postProcessCss();
  };
  RowController.prototype.onRowNodeCellChanged = function () {
    // as data has changed, then the style and class needs to be recomputed
    this.postProcessCss();
  };
  RowController.prototype.postProcessCss = function () {
    this.postProcessStylesFromGridOptions();
    this.postProcessClassesFromGridOptions();
    this.postProcessRowClassRules();
    this.postProcessRowDragging();
  };
  RowController.prototype.onRowNodeHighlightChanged = function () {
    var highlighted = this.rowNode.highlighted;
    this.allRowComps.forEach(function (rowComp) {
      var eGui = rowComp.getGui();
      removeCssClass(eGui, 'ag-row-highlight-above');
      removeCssClass(eGui, 'ag-row-highlight-below');
      if (highlighted) {
        addCssClass(eGui, 'ag-row-highlight-' + highlighted);
      }
    });
  };
  RowController.prototype.onRowNodeDraggingChanged = function () {
    this.postProcessRowDragging();
  };
  RowController.prototype.postProcessRowDragging = function () {
    var dragging = this.rowNode.dragging;
    this.allRowComps.forEach(function (rowComp) {
      return addOrRemoveCssClass(rowComp.getGui(), 'ag-row-dragging', dragging);
    });
  };
  RowController.prototype.updateExpandedCss = function () {
    var expandable = this.rowNode.isExpandable();
    var expanded = this.rowNode.expanded == true;
    this.allRowComps.forEach(function (rowComp) {
      var eRow = rowComp.getGui();
      addOrRemoveCssClass(eRow, 'ag-row-group', expandable);
      addOrRemoveCssClass(eRow, 'ag-row-group-expanded', expandable && expanded);
      addOrRemoveCssClass(eRow, 'ag-row-group-contracted', expandable && !expanded);
      setAriaExpanded(eRow, expandable && expanded);
    });
  };
  RowController.prototype.onDisplayedColumnsChanged = function () {
    // we skip animations for onDisplayedColumnChanged, as otherwise the client could remove columns and
    // then set data, and any old valueGetter's (ie from cols that were removed) would still get called.
    this.updateColumnLists(true);
  };
  RowController.prototype.onVirtualColumnsChanged = function () {
    this.updateColumnLists();
  };
  RowController.prototype.getRowPosition = function () {
    return {
      rowPinned: this.rowNode.rowPinned,
      rowIndex: this.rowNode.rowIndex
    };
  };
  RowController.prototype.onKeyboardNavigate = function (keyboardEvent) {
    var currentFullWidthComp = find(this.allRowComps, function (rowComp) {
      return rowComp.getGui().contains(keyboardEvent.target);
    });
    var currentFullWidthContainer = currentFullWidthComp ? currentFullWidthComp.getGui() : null;
    var isFullWidthContainerFocused = currentFullWidthContainer === keyboardEvent.target;
    if (!isFullWidthContainerFocused) {
      return;
    }
    var node = this.rowNode;
    var lastFocusedCell = this.beans.focusController.getFocusedCell();
    var cellPosition = {
      rowIndex: node.rowIndex,
      rowPinned: node.rowPinned,
      column: lastFocusedCell && lastFocusedCell.column
    };
    this.beans.rowRenderer.navigateToNextCell(keyboardEvent, keyboardEvent.keyCode, cellPosition, true);
    keyboardEvent.preventDefault();
  };
  RowController.prototype.onTabKeyDown = function (keyboardEvent) {
    if (keyboardEvent.defaultPrevented || isStopPropagationForAgGrid(keyboardEvent)) {
      return;
    }
    var currentFullWidthComp = find(this.allRowComps, function (rowComp) {
      return rowComp.getGui().contains(keyboardEvent.target);
    });
    var currentFullWidthContainer = currentFullWidthComp ? currentFullWidthComp.getGui() : null;
    var isFullWidthContainerFocused = currentFullWidthContainer === keyboardEvent.target;
    var nextEl = null;
    if (!isFullWidthContainerFocused) {
      nextEl = this.beans.focusController.findNextFocusableElement(currentFullWidthContainer, false, keyboardEvent.shiftKey);
    }
    if (this.isFullWidth() && isFullWidthContainerFocused || !nextEl) {
      this.beans.rowRenderer.onTabKeyDown(this, keyboardEvent);
    }
  };
  RowController.prototype.onFullWidthRowFocused = function (event) {
    var node = this.rowNode;
    var isFocused = this.isFullWidth() && event.rowIndex === node.rowIndex && event.rowPinned == node.rowPinned;
    var element = this.fullWidthRowComp ? this.fullWidthRowComp.getGui() : this.centerRowComp.getGui();
    addOrRemoveCssClass(element, 'ag-full-width-focus', isFocused);
    if (isFocused) {
      // we don't scroll normal rows into view when we focus them, so we don't want
      // to scroll Full Width rows either.
      element.focus({
        preventScroll: true
      });
    }
  };
  RowController.prototype.refreshCell = function (cellComp) {
    this.allRowComps.forEach(function (rc) {
      return rc.destroyCells([cellComp]);
    });
    this.updateColumnLists();
  };
  RowController.prototype.onMouseEvent = function (eventName, mouseEvent) {
    switch (eventName) {
      case 'dblclick':
        this.onRowDblClick(mouseEvent);
        break;
      case 'click':
        this.onRowClick(mouseEvent);
        break;
      case 'mousedown':
        this.onRowMouseDown(mouseEvent);
        break;
    }
  };
  RowController.prototype.createRowEvent = function (type, domEvent) {
    return {
      type: type,
      node: this.rowNode,
      data: this.rowNode.data,
      rowIndex: this.rowNode.rowIndex,
      rowPinned: this.rowNode.rowPinned,
      context: this.beans.gridOptionsWrapper.getContext(),
      api: this.beans.gridOptionsWrapper.getApi(),
      columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
      event: domEvent
    };
  };
  RowController.prototype.createRowEventWithSource = function (type, domEvent) {
    var event = this.createRowEvent(type, domEvent);
    // when first developing this, we included the rowComp in the event.
    // this seems very weird. so when introducing the event types, i left the 'source'
    // out of the type, and just include the source in the two places where this event
    // was fired (rowClicked and rowDoubleClicked). it doesn't make sense for any
    // users to be using this, as the rowComp isn't an object we expose, so would be
    // very surprising if a user was using it.
    event.source = this;
    return event;
  };
  RowController.prototype.onRowDblClick = function (mouseEvent) {
    if (isStopPropagationForAgGrid(mouseEvent)) {
      return;
    }
    var agEvent = this.createRowEventWithSource(Events.EVENT_ROW_DOUBLE_CLICKED, mouseEvent);
    this.beans.eventService.dispatchEvent(agEvent);
  };
  RowController.prototype.onRowMouseDown = function (mouseEvent) {
    this.lastMouseDownOnDragger = isElementChildOfClass(mouseEvent.target, 'ag-row-drag', 3);
    if (!this.isFullWidth()) {
      return;
    }
    var node = this.rowNode;
    var columnController = this.beans.columnController;
    this.beans.focusController.setFocusedCell(node.rowIndex, columnController.getAllDisplayedColumns()[0], node.rowPinned, true);
  };
  RowController.prototype.onRowClick = function (mouseEvent) {
    var stop = isStopPropagationForAgGrid(mouseEvent) || this.lastMouseDownOnDragger;
    if (stop) {
      return;
    }
    var agEvent = this.createRowEventWithSource(Events.EVENT_ROW_CLICKED, mouseEvent);
    this.beans.eventService.dispatchEvent(agEvent);
    // ctrlKey for windows, metaKey for Apple
    var multiSelectKeyPressed = mouseEvent.ctrlKey || mouseEvent.metaKey;
    var shiftKeyPressed = mouseEvent.shiftKey;
    // we do not allow selecting the group by clicking, when groupSelectChildren, as the logic to
    // handle this is broken. to observe, change the logic below and allow groups to be selected.
    // you will see the group gets selected, then all children get selected, then the grid unselects
    // the children (as the default behaviour when clicking is to unselect other rows) which results
    // in the group getting unselected (as all children are unselected). the correct thing would be
    // to change this, so that children of the selected group are not then subsequenly un-selected.
    var groupSelectsChildren = this.beans.gridOptionsWrapper.isGroupSelectsChildren();
    if (
    // we do not allow selecting groups by clicking (as the click here expands the group), or if it's a detail row,
    // so return if it's a group row
    groupSelectsChildren && this.rowNode.group ||
    // this is needed so we don't unselect other rows when we click this row, eg if this row is not selectable,
    // and we click it, the selection should not change (ie any currently selected row should stay selected)
    !this.rowNode.selectable ||
    // we also don't allow selection of pinned rows
    this.rowNode.rowPinned ||
    // if no selection method enabled, do nothing
    !this.beans.gridOptionsWrapper.isRowSelection() ||
    // if click selection suppressed, do nothing
    this.beans.gridOptionsWrapper.isSuppressRowClickSelection()) {
      return;
    }
    var multiSelectOnClick = this.beans.gridOptionsWrapper.isRowMultiSelectWithClick();
    var rowDeselectionWithCtrl = !this.beans.gridOptionsWrapper.isSuppressRowDeselection();
    if (this.rowNode.isSelected()) {
      if (multiSelectOnClick) {
        this.rowNode.setSelectedParams({
          newValue: false
        });
      } else if (multiSelectKeyPressed) {
        if (rowDeselectionWithCtrl) {
          this.rowNode.setSelectedParams({
            newValue: false
          });
        }
      } else {
        // selected with no multi key, must make sure anything else is unselected
        this.rowNode.setSelectedParams({
          newValue: !shiftKeyPressed,
          clearSelection: !shiftKeyPressed,
          rangeSelect: shiftKeyPressed
        });
      }
    } else {
      var clearSelection = multiSelectOnClick ? false : !multiSelectKeyPressed;
      this.rowNode.setSelectedParams({
        newValue: true,
        clearSelection: clearSelection,
        rangeSelect: shiftKeyPressed
      });
    }
  };
  RowController.prototype.setupDetailRowAutoHeight = function (eDetailGui) {
    var _this = this;
    if (!this.beans.gridOptionsWrapper.isDetailRowAutoHeight()) {
      return;
    }
    var checkRowSizeFunc = function () {
      var clientHeight = eDetailGui.clientHeight;
      // if the UI is not ready, the height can be 0, which we ignore, as otherwise a flicker will occur
      // as UI goes from the default height, to 0, then to the real height as UI becomes ready. this means
      // it's not possible for have 0 as auto-height, however this is an improbable use case, as even an
      // empty detail grid would still have some styling around it giving at least a few pixels.
      if (clientHeight != null && clientHeight > 0) {
        // we do the update in a timeout, to make sure we are not calling from inside the grid
        // doing another update
        var updateRowHeightFunc = function () {
          _this.rowNode.setRowHeight(clientHeight);
          if (_this.beans.clientSideRowModel) {
            _this.beans.clientSideRowModel.onRowHeightChanged();
          } else if (_this.beans.serverSideRowModel) {
            _this.beans.serverSideRowModel.onRowHeightChanged();
          }
        };
        _this.beans.frameworkOverrides.setTimeout(updateRowHeightFunc, 0);
      }
    };
    var resizeObserverDestroyFunc = this.beans.resizeObserverService.observeResize(eDetailGui, checkRowSizeFunc);
    this.addDestroyFunc(resizeObserverDestroyFunc);
    checkRowSizeFunc();
  };
  RowController.prototype.createFullWidthParams = function (eRow, pinned) {
    var _this = this;
    var params = {
      fullWidth: true,
      data: this.rowNode.data,
      node: this.rowNode,
      value: this.rowNode.key,
      valueFormatted: this.rowNode.key,
      $scope: this.scope ? this.scope : this.parentScope,
      $compile: this.beans.$compile,
      rowIndex: this.rowNode.rowIndex,
      api: this.beans.gridOptionsWrapper.getApi(),
      columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
      context: this.beans.gridOptionsWrapper.getContext(),
      // these need to be taken out, as part of 'afterAttached' now
      eGridCell: eRow,
      eParentOfValue: eRow,
      pinned: pinned,
      addRenderedRowListener: this.addEventListener.bind(this),
      registerRowDragger: function (rowDraggerElement, dragStartPixels, value) {
        return _this.addFullWidthRowDragging(rowDraggerElement, dragStartPixels, value);
      }
    };
    return params;
  };
  RowController.prototype.addFullWidthRowDragging = function (rowDraggerElement, dragStartPixels, value) {
    if (value === void 0) {
      value = '';
    }
    if (!this.isFullWidth()) {
      return;
    }
    var rowDragComp = new RowDragComp(function () {
      return value;
    }, this.rowNode, undefined, rowDraggerElement, dragStartPixels);
    this.createManagedBean(rowDragComp, this.beans.context);
  };
  RowController.prototype.onUiLevelChanged = function () {
    var newLevel = this.beans.rowCssClassCalculator.calculateRowLevel(this.rowNode);
    if (this.rowLevel != newLevel) {
      var classToAdd_1 = 'ag-row-level-' + newLevel;
      var classToRemove_1 = 'ag-row-level-' + this.rowLevel;
      this.allRowComps.forEach(function (rowComp) {
        var eGui = rowComp.getGui();
        addCssClass(eGui, classToAdd_1);
        removeCssClass(eGui, classToRemove_1);
      });
    }
    this.rowLevel = newLevel;
  };
  RowController.prototype.isFirstRowOnPage = function () {
    return this.rowNode.rowIndex === this.beans.paginationProxy.getPageFirstRow();
  };
  RowController.prototype.isLastRowOnPage = function () {
    return this.rowNode.rowIndex === this.beans.paginationProxy.getPageLastRow();
  };
  RowController.prototype.onModelUpdated = function () {
    var newFirst = this.isFirstRowOnPage();
    var newLast = this.isLastRowOnPage();
    if (this.firstRowOnPage !== newFirst) {
      this.firstRowOnPage = newFirst;
      this.allRowComps.forEach(function (rowComp) {
        return addOrRemoveCssClass(rowComp.getGui(), 'ag-row-first', newFirst);
      });
    }
    if (this.lastRowOnPage !== newLast) {
      this.lastRowOnPage = newLast;
      this.allRowComps.forEach(function (rowComp) {
        return addOrRemoveCssClass(rowComp.getGui(), 'ag-row-last', newLast);
      });
    }
  };
  RowController.prototype.stopEditing = function (cancel) {
    if (cancel === void 0) {
      cancel = false;
    }
    this.forEachCellComp(function (renderedCell) {
      renderedCell.stopEditing(cancel);
    });
    if (!this.editingRow) {
      return;
    }
    if (!cancel) {
      var event_1 = this.createRowEvent(Events.EVENT_ROW_VALUE_CHANGED);
      this.beans.eventService.dispatchEvent(event_1);
    }
    this.setEditingRow(false);
  };
  RowController.prototype.setEditingRow = function (value) {
    this.editingRow = value;
    this.allRowComps.forEach(function (rowComp) {
      return addOrRemoveCssClass(rowComp.getGui(), 'ag-row-editing', value);
    });
    var event = value ? this.createRowEvent(Events.EVENT_ROW_EDITING_STARTED) : this.createRowEvent(Events.EVENT_ROW_EDITING_STOPPED);
    this.beans.eventService.dispatchEvent(event);
  };
  RowController.prototype.startRowEditing = function (keyPress, charPress, sourceRenderedCell) {
    if (keyPress === void 0) {
      keyPress = null;
    }
    if (charPress === void 0) {
      charPress = null;
    }
    if (sourceRenderedCell === void 0) {
      sourceRenderedCell = null;
    }
    // don't do it if already editing
    if (this.editingRow) {
      return;
    }
    this.forEachCellComp(function (renderedCell) {
      var cellStartedEdit = renderedCell === sourceRenderedCell;
      if (cellStartedEdit) {
        renderedCell.startEditingIfEnabled(keyPress, charPress, cellStartedEdit);
      } else {
        renderedCell.startEditingIfEnabled(null, null, cellStartedEdit);
      }
    });
    this.setEditingRow(true);
  };
  RowController.prototype.forEachCellComp = function (callback) {
    this.allRowComps.forEach(function (rc) {
      return rc.forEachCellComp(callback);
    });
  };
  RowController.prototype.postProcessClassesFromGridOptions = function () {
    var _this = this;
    var cssClasses = this.beans.rowCssClassCalculator.processClassesFromGridOptions(this.rowNode, this.scope);
    if (!cssClasses || !cssClasses.length) {
      return;
    }
    cssClasses.forEach(function (classStr) {
      _this.allRowComps.forEach(function (rowComp) {
        return addCssClass(rowComp.getGui(), classStr);
      });
    });
  };
  RowController.prototype.postProcessRowClassRules = function () {
    var _this = this;
    this.beans.rowCssClassCalculator.processRowClassRules(this.rowNode, this.scope, function (className) {
      _this.allRowComps.forEach(function (rowComp) {
        return addCssClass(rowComp.getGui(), className);
      });
    }, function (className) {
      _this.allRowComps.forEach(function (rowComp) {
        return removeCssClass(rowComp.getGui(), className);
      });
    });
  };
  RowController.prototype.postProcessStylesFromGridOptions = function () {
    var rowStyles = this.processStylesFromGridOptions();
    this.allRowComps.forEach(function (rowComp) {
      return addStylesToElement(rowComp.getGui(), rowStyles);
    });
  };
  RowController.prototype.getInitialRowTopStyle = function () {
    // print layout uses normal flow layout for row positioning
    if (this.printLayout) {
      return '';
    }
    // if sliding in, we take the old row top. otherwise we just set the current row top.
    var pixels = this.slideRowIn ? this.roundRowTopToBounds(this.rowNode.oldRowTop) : this.rowNode.rowTop;
    var afterPaginationPixels = this.applyPaginationOffset(pixels);
    // we don't apply scaling if row is pinned
    var afterScalingPixels = this.rowNode.isRowPinned() ? afterPaginationPixels : this.beans.rowContainerHeightService.getRealPixelPosition(afterPaginationPixels);
    var isSuppressRowTransform = this.beans.gridOptionsWrapper.isSuppressRowTransform();
    return isSuppressRowTransform ? "top: " + afterScalingPixels + "px; " : "transform: translateY(" + afterScalingPixels + "px);";
  };
  RowController.prototype.getRowBusinessKey = function () {
    var businessKeyForNodeFunc = this.beans.gridOptionsWrapper.getBusinessKeyForNodeFunc();
    if (typeof businessKeyForNodeFunc !== 'function') {
      return;
    }
    return businessKeyForNodeFunc(this.rowNode);
  };
  RowController.prototype.getInitialRowClasses = function (pinned) {
    var params = {
      rowNode: this.rowNode,
      rowFocused: this.rowFocused,
      fadeRowIn: this.fadeRowIn,
      rowIsEven: this.rowIsEven,
      rowLevel: this.rowLevel,
      fullWidthRow: this.isFullWidth(),
      firstRowOnPage: this.isFirstRowOnPage(),
      lastRowOnPage: this.isLastRowOnPage(),
      printLayout: this.printLayout,
      expandable: this.rowNode.isExpandable(),
      scope: this.scope,
      pinned: pinned
    };
    return this.beans.rowCssClassCalculator.getInitialRowClasses(params);
  };
  RowController.prototype.preProcessStylesFromGridOptions = function () {
    var rowStyles = this.processStylesFromGridOptions();
    return cssStyleObjectToMarkup(rowStyles);
  };
  RowController.prototype.processStylesFromGridOptions = function () {
    // part 1 - rowStyle
    var rowStyle = this.beans.gridOptionsWrapper.getRowStyle();
    if (rowStyle && typeof rowStyle === 'function') {
      console.warn('AG Grid: rowStyle should be an object of key/value styles, not be a function, use getRowStyle() instead');
      return;
    }
    // part 1 - rowStyleFunc
    var rowStyleFunc = this.beans.gridOptionsWrapper.getRowStyleFunc();
    var rowStyleFuncResult;
    if (rowStyleFunc) {
      var params = {
        data: this.rowNode.data,
        node: this.rowNode,
        rowIndex: this.rowNode.rowIndex,
        $scope: this.scope,
        api: this.beans.gridOptionsWrapper.getApi(),
        columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
        context: this.beans.gridOptionsWrapper.getContext()
      };
      rowStyleFuncResult = rowStyleFunc(params);
    }
    return assign({}, rowStyle, rowStyleFuncResult);
  };
  RowController.prototype.onRowSelected = function () {
    var _this = this;
    var selected = this.rowNode.isSelected();
    this.allRowComps.forEach(function (rowComp) {
      var eGui = rowComp.getGui();
      setAriaSelected(eGui, selected);
      addOrRemoveCssClass(eGui, 'ag-row-selected', selected);
      _this.refreshAriaLabel(eGui, selected);
    });
  };
  RowController.prototype.refreshAriaLabel = function (node, selected) {
    if (selected && this.beans.gridOptionsWrapper.isSuppressRowDeselection()) {
      node.removeAttribute('aria-label');
      return;
    }
    var translate = this.beans.gridOptionsWrapper.getLocaleTextFunc();
    var label = translate(selected ? 'ariaRowDeselect' : 'ariaRowSelect', "Press SPACE to " + (selected ? 'deselect' : 'select') + " this row.");
    setAriaLabel(node, label);
  };
  RowController.prototype.isUseAnimationFrameForCreate = function () {
    return this.useAnimationFrameForCreate;
  };
  RowController.prototype.addHoverFunctionality = function (eRow) {
    var _this = this;
    // because we use animation frames to do this, it's possible the row no longer exists
    // by the time we get to add it
    if (!this.active) {
      return;
    }
    // because mouseenter and mouseleave do not propagate, we cannot listen on the gridPanel
    // like we do for all the other mouse events.
    // because of the pinning, we cannot simply add / remove the class based on the eRow. we
    // have to check all eRow's (body & pinned). so the trick is if any of the rows gets a
    // mouse hover, it sets such in the rowNode, and then all three reflect the change as
    // all are listening for event on the row node.
    // step 1 - add listener, to set flag on row node
    this.addManagedListener(eRow, 'mouseenter', function () {
      return _this.rowNode.onMouseEnter();
    });
    this.addManagedListener(eRow, 'mouseleave', function () {
      return _this.rowNode.onMouseLeave();
    });
    // step 2 - listen for changes on row node (which any eRow can trigger)
    this.addManagedListener(this.rowNode, RowNode.EVENT_MOUSE_ENTER, function () {
      // if hover turned off, we don't add the class. we do this here so that if the application
      // toggles this property mid way, we remove the hover form the last row, but we stop
      // adding hovers from that point onwards.
      if (!_this.beans.gridOptionsWrapper.isSuppressRowHoverHighlight()) {
        addCssClass(eRow, 'ag-row-hover');
      }
    });
    this.addManagedListener(this.rowNode, RowNode.EVENT_MOUSE_LEAVE, function () {
      removeCssClass(eRow, 'ag-row-hover');
    });
  };
  // for animation, we don't want to animate entry or exit to a very far away pixel,
  // otherwise the row would move so fast, it would appear to disappear. so this method
  // moves the row closer to the viewport if it is far away, so the row slide in / out
  // at a speed the user can see.
  RowController.prototype.roundRowTopToBounds = function (rowTop) {
    var gridBodyCon = this.beans.controllersService.getGridBodyController();
    var range = gridBodyCon.getScrollFeature().getVScrollPosition();
    var minPixel = this.applyPaginationOffset(range.top, true) - 100;
    var maxPixel = this.applyPaginationOffset(range.bottom, true) + 100;
    return Math.min(Math.max(minPixel, rowTop), maxPixel);
  };
  RowController.prototype.getFrameworkOverrides = function () {
    return this.beans.frameworkOverrides;
  };
  RowController.prototype.onRowHeightChanged = function () {
    // check for exists first - if the user is resetting the row height, then
    // it will be null (or undefined) momentarily until the next time the flatten
    // stage is called where the row will then update again with a new height
    if (exists(this.rowNode.rowHeight)) {
      var heightPx_1 = this.rowNode.rowHeight + "px";
      this.allRowComps.forEach(function (rowComp) {
        return rowComp.getGui().style.height = heightPx_1;
      });
    }
  };
  RowController.prototype.addEventListener = function (eventType, listener) {
    if (eventType === 'renderedRowRemoved' || eventType === 'rowRemoved') {
      eventType = Events.EVENT_VIRTUAL_ROW_REMOVED;
      console.warn('AG Grid: Since version 11, event renderedRowRemoved is now called ' + Events.EVENT_VIRTUAL_ROW_REMOVED);
    }
    _super.prototype.addEventListener.call(this, eventType, listener);
  };
  RowController.prototype.removeEventListener = function (eventType, listener) {
    if (eventType === 'renderedRowRemoved' || eventType === 'rowRemoved') {
      eventType = Events.EVENT_VIRTUAL_ROW_REMOVED;
      console.warn('AG Grid: Since version 11, event renderedRowRemoved and rowRemoved is now called ' + Events.EVENT_VIRTUAL_ROW_REMOVED);
    }
    _super.prototype.removeEventListener.call(this, eventType, listener);
  };
  // note - this is NOT called by context, as we don't wire / unwire the CellComp for performance reasons.
  RowController.prototype.destroyFirstPass = function () {
    this.active = false;
    // why do we have this method? shouldn't everything below be added as a destroy func beside
    // the corresponding create logic?
    this.setupRemoveAnimation();
    var event = this.createRowEvent(Events.EVENT_VIRTUAL_ROW_REMOVED);
    this.dispatchEvent(event);
    this.beans.eventService.dispatchEvent(event);
    _super.prototype.destroy.call(this);
  };
  RowController.prototype.setupRemoveAnimation = function () {
    var rowStillVisibleJustNotInViewport = this.rowNode.rowTop != null;
    if (rowStillVisibleJustNotInViewport) {
      // if the row is not rendered, but in viewport, it means it has moved,
      // so we animate the row out. if the new location is very far away,
      // the animation will be so fast the row will look like it's just disappeared,
      // so instead we animate to a position just outside the viewport.
      var rowTop = this.roundRowTopToBounds(this.rowNode.rowTop);
      this.setRowTop(rowTop);
    } else {
      this.allRowComps.forEach(function (rowComp) {
        addCssClass(rowComp.getGui(), 'ag-opacity-zero');
      });
    }
  };
  RowController.prototype.destroySecondPass = function () {
    this.allRowComps.forEach(function (c) {
      return c.destroy();
    });
    this.allRowComps.length = 0;
  };
  RowController.prototype.onCellFocusChanged = function () {
    var rowFocused = this.beans.focusController.isRowFocused(this.rowNode.rowIndex, this.rowNode.rowPinned);
    if (rowFocused !== this.rowFocused) {
      this.allRowComps.forEach(function (rowComp) {
        var eRow = rowComp.getGui();
        addOrRemoveCssClass(eRow, 'ag-row-focus', rowFocused);
        addOrRemoveCssClass(eRow, 'ag-row-no-focus', !rowFocused);
      });
      this.rowFocused = rowFocused;
    }
    // if we are editing, then moving the focus out of a row will stop editing
    if (!rowFocused && this.editingRow) {
      this.stopEditing(false);
    }
  };
  RowController.prototype.onPaginationChanged = function () {
    var currentPage = this.beans.paginationProxy.getCurrentPage();
    // it is possible this row is in the new page, but the page number has changed, which means
    // it needs to reposition itself relative to the new page
    if (this.paginationPage !== currentPage) {
      this.paginationPage = currentPage;
      this.onTopChanged();
    }
  };
  RowController.prototype.onTopChanged = function () {
    this.setRowTop(this.rowNode.rowTop);
  };
  RowController.prototype.onPaginationPixelOffsetChanged = function () {
    // the pixel offset is used when calculating rowTop to set on the row DIV
    this.onTopChanged();
  };
  // applies pagination offset, eg if on second page, and page height is 500px, then removes
  // 500px from the top position, so a row with rowTop 600px is displayed at location 100px.
  // reverse will take the offset away rather than add.
  RowController.prototype.applyPaginationOffset = function (topPx, reverse) {
    if (reverse === void 0) {
      reverse = false;
    }
    if (this.rowNode.isRowPinned()) {
      return topPx;
    }
    var pixelOffset = this.beans.paginationProxy.getPixelOffset();
    var multiplier = reverse ? 1 : -1;
    return topPx + pixelOffset * multiplier;
  };
  RowController.prototype.setRowTop = function (pixels) {
    // print layout uses normal flow layout for row positioning
    if (this.printLayout) {
      return;
    }
    // need to make sure rowTop is not null, as this can happen if the node was once
    // visible (ie parent group was expanded) but is now not visible
    if (exists(pixels)) {
      var afterPaginationPixels = this.applyPaginationOffset(pixels);
      var afterScalingPixels = this.rowNode.isRowPinned() ? afterPaginationPixels : this.beans.rowContainerHeightService.getRealPixelPosition(afterPaginationPixels);
      var topPx_1 = afterScalingPixels + "px";
      var suppressRowTransform_1 = this.beans.gridOptionsWrapper.isSuppressRowTransform();
      this.allRowComps.forEach(function (rowComp) {
        var eGui = rowComp.getGui();
        if (suppressRowTransform_1) {
          eGui.style.top = topPx_1;
        } else {
          eGui.style.transform = "translateY(" + topPx_1 + ")";
        }
      });
    }
  };
  RowController.prototype.getRowNode = function () {
    return this.rowNode;
  };
  RowController.prototype.getRenderedCellForColumn = function (column) {
    var cellComps = this.allRowComps.map(function (rc) {
      return rc.getCellComp(column.getColId());
    });
    var cellComp = find(cellComps, function (c) {
      return !!c;
    });
    if (cellComp) {
      return cellComp;
    }
    var spannedCellComps = this.allRowComps.map(function (rc) {
      return rc.getCellCompSpanned(column);
    });
    cellComp = find(spannedCellComps, function (c) {
      return !!c;
    });
    return cellComp || null;
  };
  RowController.prototype.onRowIndexChanged = function () {
    // we only bother updating if the rowIndex is present. if it is not present, it means this row
    // is child of a group node, and the group node was closed, it's the only way to have no row index.
    // when this happens, row is about to be de-rendered, so we don't care, rowComp is about to die!
    if (this.rowNode.rowIndex != null) {
      this.onCellFocusChanged();
      this.updateRowIndexes();
    }
  };
  RowController.prototype.updateRowIndexes = function () {
    var _this = this;
    var rowIndexStr = this.rowNode.getRowIndexString();
    var rowIsEven = this.rowNode.rowIndex % 2 === 0;
    var rowIsEvenChanged = this.rowIsEven !== rowIsEven;
    var headerRowCount = this.beans.headerNavigationService.getHeaderRowCount();
    if (rowIsEvenChanged) {
      this.rowIsEven = rowIsEven;
    }
    this.allRowComps.forEach(function (rowComp) {
      var eRow = rowComp.getGui();
      eRow.setAttribute('row-index', rowIndexStr);
      setAriaRowIndex(eRow, headerRowCount + _this.rowNode.rowIndex + 1);
      if (!rowIsEvenChanged) {
        return;
      }
      addOrRemoveCssClass(eRow, 'ag-row-even', rowIsEven);
      addOrRemoveCssClass(eRow, 'ag-row-odd', !rowIsEven);
    });
  };
  // returns the pinned left container, either the normal one, or the embedded full with one if exists
  RowController.prototype.getPinnedLeftRowElement = function () {
    return this.leftRowComp ? this.leftRowComp.getGui() : undefined;
  };
  // returns the pinned right container, either the normal one, or the embedded full with one if exists
  RowController.prototype.getPinnedRightRowElement = function () {
    return this.rightRowComp ? this.rightRowComp.getGui() : undefined;
  };
  // returns the body container, either the normal one, or the embedded full with one if exists
  RowController.prototype.getBodyRowElement = function () {
    return this.centerRowComp ? this.centerRowComp.getGui() : undefined;
  };
  // returns the full width container
  RowController.prototype.getFullWidthRowElement = function () {
    return this.fullWidthRowComp ? this.fullWidthRowComp.getGui() : undefined;
  };
  RowController.DOM_DATA_KEY_RENDERED_ROW = 'renderedRow';
  return RowController;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
(function (SelectionHandleType) {
  SelectionHandleType[SelectionHandleType["FILL"] = 0] = "FILL";
  SelectionHandleType[SelectionHandleType["RANGE"] = 1] = "RANGE";
})(exports.SelectionHandleType || (exports.SelectionHandleType = {}));
(function (CellRangeType) {
  CellRangeType[CellRangeType["VALUE"] = 0] = "VALUE";
  CellRangeType[CellRangeType["DIMENSION"] = 1] = "DIMENSION";
})(exports.CellRangeType || (exports.CellRangeType = {}));

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$G =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PopupEditorWrapper = /** @class */function (_super) {
  __extends$G(PopupEditorWrapper, _super);
  function PopupEditorWrapper(cellEditor) {
    var _this = _super.call(this, "<div class=\"ag-popup-editor\" tabindex=\"-1\"/>") || this;
    _this.getGuiCalledOnChild = false;
    _this.cellEditor = cellEditor;
    return _this;
  }
  PopupEditorWrapper.prototype.onKeyDown = function (event) {
    if (!isUserSuppressingKeyboardEvent(this.gridOptionsWrapper, event, this.params.node, this.params.column, true)) {
      this.params.onKeyDown(event);
    }
  };
  PopupEditorWrapper.prototype.getGui = function () {
    // we call getGui() on child here (rather than in the constructor)
    // as we should wait for 'init' to be called on child first.
    if (!this.getGuiCalledOnChild) {
      this.appendChild(this.cellEditor.getGui());
      this.getGuiCalledOnChild = true;
    }
    return _super.prototype.getGui.call(this);
  };
  PopupEditorWrapper.prototype.init = function (params) {
    var _this = this;
    this.params = params;
    this.gridOptionsWrapper.setDomData(this.getGui(), PopupEditorWrapper.DOM_KEY_POPUP_EDITOR_WRAPPER, true);
    this.addDestroyFunc(function () {
      return _this.destroyBean(_this.cellEditor);
    });
    this.addManagedListener(
    // this needs to be 'super' and not 'this' as if we call 'this',
    // it ends up called 'getGui()' on the child before 'init' was called,
    // which is not good
    _super.prototype.getGui.call(this), 'keydown', this.onKeyDown.bind(this));
  };
  PopupEditorWrapper.prototype.afterGuiAttached = function () {
    if (this.cellEditor.afterGuiAttached) {
      this.cellEditor.afterGuiAttached();
    }
  };
  PopupEditorWrapper.prototype.getValue = function () {
    return this.cellEditor.getValue();
  };
  PopupEditorWrapper.prototype.isCancelBeforeStart = function () {
    if (this.cellEditor.isCancelBeforeStart) {
      return this.cellEditor.isCancelBeforeStart();
    }
    return false;
  };
  PopupEditorWrapper.prototype.isCancelAfterEnd = function () {
    if (this.cellEditor.isCancelAfterEnd) {
      return this.cellEditor.isCancelAfterEnd();
    }
    return false;
  };
  PopupEditorWrapper.prototype.getPopupPosition = function () {
    if (this.cellEditor.getPopupPosition) {
      return this.cellEditor.getPopupPosition();
    }
  };
  PopupEditorWrapper.prototype.focusIn = function () {
    if (this.cellEditor.focusIn) {
      this.cellEditor.focusIn();
    }
  };
  PopupEditorWrapper.prototype.focusOut = function () {
    if (this.cellEditor.focusOut) {
      this.cellEditor.focusOut();
    }
  };
  PopupEditorWrapper.DOM_KEY_POPUP_EDITOR_WRAPPER = 'popupEditorWrapper';
  return PopupEditorWrapper;
}(PopupComponent);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$H =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$C =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DndSourceComp = /** @class */function (_super) {
  __extends$H(DndSourceComp, _super);
  function DndSourceComp(rowNode, column, beans, eCell) {
    var _this = _super.call(this, "<div class=\"ag-drag-handle ag-row-drag\" draggable=\"true\"></div>") || this;
    _this.rowNode = rowNode;
    _this.column = column;
    _this.beans = beans;
    _this.eCell = eCell;
    return _this;
  }
  DndSourceComp.prototype.postConstruct = function () {
    var eGui = this.getGui();
    eGui.appendChild(createIconNoSpan('rowDrag', this.beans.gridOptionsWrapper, null));
    // we need to stop the event propagation here to avoid starting a range selection while dragging
    this.addGuiEventListener('mousedown', function (e) {
      e.stopPropagation();
    });
    this.addDragSource();
    this.checkVisibility();
  };
  DndSourceComp.prototype.addDragSource = function () {
    this.addGuiEventListener('dragstart', this.onDragStart.bind(this));
  };
  DndSourceComp.prototype.onDragStart = function (dragEvent) {
    var _this = this;
    var providedOnRowDrag = this.column.getColDef().dndSourceOnRowDrag;
    var isIE = isBrowserIE();
    if (!isIE) {
      dragEvent.dataTransfer.setDragImage(this.eCell, 0, 0);
    }
    // default behaviour is to convert data to json and set into drag component
    var defaultOnRowDrag = function () {
      try {
        var jsonData = JSON.stringify(_this.rowNode.data);
        if (isIE) {
          dragEvent.dataTransfer.setData('text', jsonData);
        } else {
          dragEvent.dataTransfer.setData('application/json', jsonData);
          dragEvent.dataTransfer.setData('text/plain', jsonData);
        }
      } catch (e) {
        // if we cannot convert the data to json, then we do not set the type
      }
    };
    if (providedOnRowDrag) {
      providedOnRowDrag({
        rowNode: this.rowNode,
        dragEvent: dragEvent
      });
    } else {
      defaultOnRowDrag();
    }
  };
  DndSourceComp.prototype.checkVisibility = function () {
    var visible = this.column.isDndSource(this.rowNode);
    this.setDisplayed(visible);
  };
  __decorate$C([PostConstruct], DndSourceComp.prototype, "postConstruct", null);
  return DndSourceComp;
}(Component);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$I =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$4 =  false || function () {
  __assign$4 = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$4.apply(this, arguments);
};
var CSS_CELL = 'ag-cell';
var CSS_CELL_VALUE = 'ag-cell-value';
var CSS_AUTO_HEIGHT = 'ag-cell-auto-height';
var CSS_RANGE_TOP = 'ag-cell-range-top';
var CSS_RANGE_RIGHT = 'ag-cell-range-right';
var CSS_RANGE_BOTTOM = 'ag-cell-range-bottom';
var CSS_RANGE_LEFT = 'ag-cell-range-left';
var CSS_CELL_FOCUS = 'ag-cell-focus';
var CSS_FIRST_RIGHT_PINNED = 'ag-cell-first-right-pinned';
var CSS_LAST_LEFT_PINNED = 'ag-cell-last-left-pinned';
var CSS_NOT_INLINE_EDITING = 'ag-cell-not-inline-editing';
var CSS_INLINE_EDITING = 'ag-cell-inline-editing';
var CSS_POPUP_EDITING = 'ag-cell-popup-editing';
var CSS_RANGE_SELECTED = 'ag-cell-range-selected';
var CSS_COLUMN_HOVER = 'ag-column-hover';
var CSS_CELL_WRAP_TEXT = 'ag-cell-wrap-text';
var CSS_RANGE_CHART = 'ag-cell-range-chart';
var CSS_RANGE_SINGLE_CELL = 'ag-cell-range-single-cell';
var CSS_RANGE_CHART_CATEGORY = 'ag-cell-range-chart-category';
var CSS_RANGE_HANDLE = 'ag-cell-range-handle';
var CellComp = /** @class */function (_super) {
  __extends$I(CellComp, _super);
  function CellComp(scope, beans, column, rowNode, rowComp, autoHeightCell, printLayout, eRow, editingRow) {
    var _this = _super.call(this) || this;
    _this.hasChartRange = false;
    _this.editingCell = false;
    _this.suppressRefreshCell = false;
    _this.tooltipFeatureEnabled = false;
    _this.scope = null;
    // every time we go into edit mode, or back again, this gets incremented.
    // it's the components way of dealing with the async nature of framework components,
    // so if a framework component takes a while to be created, we know if the object
    // is still relevant when creating is finished. eg we could click edit / un-edit 20
    // times before the first React edit component comes back - we should discard
    // the first 19.
    _this.cellEditorVersion = 0;
    _this.cellRendererVersion = 0;
    _this.scope = scope;
    _this.beans = beans;
    _this.column = column;
    _this.rowNode = rowNode;
    _this.rowComp = rowComp;
    _this.autoHeightCell = autoHeightCell;
    _this.printLayout = printLayout;
    _this.eRow = eRow;
    _this.createGridCellVo();
    _this.rangeSelectionEnabled = _this.beans.rangeController && beans.gridOptionsWrapper.isEnableRangeSelection();
    _this.cellFocused = _this.beans.focusController.isCellFocused(_this.cellPosition);
    _this.firstRightPinned = _this.column.isFirstRightPinned();
    _this.lastLeftPinned = _this.column.isLastLeftPinned();
    if (_this.rangeSelectionEnabled && _this.beans.rangeController) {
      var rangeController = _this.beans.rangeController;
      _this.rangeCount = rangeController.getCellRangeCount(_this.cellPosition);
      _this.hasChartRange = _this.getHasChartRange();
    }
    _this.getValueAndFormat();
    _this.setUsingWrapper();
    _this.chooseCellRenderer();
    _this.setupColSpan();
    _this.rowSpan = _this.column.getRowSpan(_this.rowNode);
    _this.setTemplate(_this.getCreateTemplate());
    _this.afterAttached();
    // if we are editing the row, then the cell needs to turn
    // into edit mode
    if (editingRow) {
      _this.startEditingIfEnabled();
    }
    return _this;
  }
  CellComp.prototype.getCreateTemplate = function () {
    var unselectable = !this.beans.gridOptionsWrapper.isEnableCellTextSelection() ? ' unselectable="on"' : '';
    var templateParts = [];
    var col = this.column;
    var width = this.getCellWidth();
    var left = this.modifyLeftForPrintLayout(this.getCellLeft());
    var valueToRender = this.getInitialValueToRender();
    var valueSanitised = get(this.column, 'colDef.template', null) ? valueToRender : escapeString(valueToRender);
    this.tooltip = this.getToolTip();
    var tooltipSanitised = escapeString(this.tooltip);
    var colIdSanitised = escapeString(col.getId());
    var stylesFromColDef = this.preProcessStylesFromColDef();
    var cssClasses = this.getInitialCssClasses();
    var stylesForRowSpanning = this.getStylesForRowSpanning();
    var colIdxSanitised = escapeString(this.beans.columnController.getAriaColumnIndex(this.column).toString());
    templateParts.push("<div");
    templateParts.push(" tabindex=\"-1\"");
    templateParts.push("" + unselectable); // THIS IS FOR IE ONLY so text selection doesn't bubble outside of the grid
    templateParts.push(" role=\"gridcell\"");
    templateParts.push(" aria-colindex=\"" + colIdxSanitised + "\"");
    templateParts.push(" comp-id=\"" + this.getCompId() + "\" ");
    templateParts.push(" col-id=\"" + colIdSanitised + "\"");
    templateParts.push(" class=\"" + escapeString(cssClasses.join(' ')) + "\"");
    if (this.beans.gridOptionsWrapper.isEnableBrowserTooltips() && exists(tooltipSanitised)) {
      templateParts.push(" title=\"" + tooltipSanitised + "\"");
    }
    if (this.rangeSelectionEnabled) {
      templateParts.push(" aria-selected=\"" + (this.rangeCount ? 'true' : 'false') + "\"");
    }
    templateParts.push(" style=\"width: " + Number(width) + "px; left: " + Number(left) + "px; " + escapeString(stylesFromColDef) + " " + escapeString(stylesForRowSpanning) + "\">");
    if (this.usingWrapper) {
      templateParts.push(this.getCellWrapperString(valueSanitised));
    } else if (valueSanitised != null) {
      templateParts.push(valueSanitised);
    }
    templateParts.push("</div>");
    return templateParts.join('');
  };
  CellComp.prototype.getCellWrapperString = function (value) {
    if (value === void 0) {
      value = '';
    }
    var unselectable = !this.beans.gridOptionsWrapper.isEnableCellTextSelection() ? ' unselectable="on"' : '';
    var wrapper = /* html */"<div ref=\"eCellWrapper\" class=\"ag-cell-wrapper\" role=\"presentation\">\n            <span ref=\"eCellValue\" role=\"presentation\" class=\"" + CSS_CELL_VALUE + "\"" + unselectable + ">\n                " + (value != null ? value : '') + "\n            </span>\n        </div>";
    return wrapper;
  };
  CellComp.prototype.getStylesForRowSpanning = function () {
    if (this.rowSpan === 1) {
      return '';
    }
    var singleRowHeight = this.beans.gridOptionsWrapper.getRowHeightAsNumber();
    var totalRowHeight = singleRowHeight * this.rowSpan;
    return "height: " + totalRowHeight + "px; z-index: 1;";
  };
  CellComp.prototype.afterAttached = function () {
    // all of these have dependencies on the eGui, so only do them after eGui is set
    this.addDomData();
    this.populateTemplate();
    this.createCellRendererInstance(true);
    this.angular1Compile();
    this.refreshHandle();
    if (exists(this.tooltip)) {
      this.createTooltipFeatureIfNeeded();
    }
  };
  CellComp.prototype.createTooltipFeatureIfNeeded = function () {
    if (this.beans.gridOptionsWrapper.isEnableBrowserTooltips() || this.tooltipFeatureEnabled) {
      return;
    }
    this.createManagedBean(new TooltipFeature(this), this.beans.context);
    this.tooltipFeatureEnabled = true;
  };
  CellComp.prototype.onColumnHover = function () {
    var isHovered = this.beans.columnHoverService.isHovered(this.column);
    this.addOrRemoveCssClass(CSS_COLUMN_HOVER, isHovered);
  };
  CellComp.prototype.onCellChanged = function (event) {
    var eventImpactsThisCell = event.column === this.column;
    if (eventImpactsThisCell) {
      this.refreshCell({});
    }
  };
  CellComp.prototype.getCellLeft = function () {
    var mostLeftCol;
    if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) {
      mostLeftCol = last(this.colsSpanning);
    } else {
      mostLeftCol = this.column;
    }
    return mostLeftCol.getLeft();
  };
  CellComp.prototype.getCellWidth = function () {
    if (!this.colsSpanning) {
      return this.column.getActualWidth();
    }
    return this.colsSpanning.reduce(function (width, col) {
      return width + col.getActualWidth();
    }, 0);
  };
  CellComp.prototype.onFlashCells = function (event) {
    var cellId = this.beans.cellPositionUtils.createId(this.cellPosition);
    var shouldFlash = event.cells[cellId];
    if (shouldFlash) {
      this.animateCell('highlight');
    }
  };
  CellComp.prototype.setupColSpan = function () {
    // if no col span is active, then we don't set it up, as it would be wasteful of CPU
    if (missing(this.getComponentHolder().colSpan)) {
      return;
    }
    // because we are col spanning, a reorder of the cols can change what cols we are spanning over
    this.addManagedListener(this.beans.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayColumnsChanged.bind(this));
    // because we are spanning over multiple cols, we check for width any time any cols width changes.
    // this is expensive - really we should be explicitly checking only the cols we are spanning over
    // instead of every col, however it would be tricky code to track the cols we are spanning over, so
    // because hardly anyone will be using colSpan, am favouring this easier way for more maintainable code.
    this.addManagedListener(this.beans.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onWidthChanged.bind(this));
    this.colsSpanning = this.getColSpanningList();
  };
  CellComp.prototype.getColSpanningList = function () {
    var colSpan = this.column.getColSpan(this.rowNode);
    var colsSpanning = [];
    // if just one col, the col span is just the column we are in
    if (colSpan === 1) {
      colsSpanning.push(this.column);
    } else {
      var pointer = this.column;
      var pinned = this.column.getPinned();
      for (var i = 0; pointer && i < colSpan; i++) {
        colsSpanning.push(pointer);
        pointer = this.beans.columnController.getDisplayedColAfter(pointer);
        if (!pointer || missing(pointer)) {
          break;
        }
        // we do not allow col spanning to span outside of pinned areas
        if (pinned !== pointer.getPinned()) {
          break;
        }
      }
    }
    return colsSpanning;
  };
  CellComp.prototype.onDisplayColumnsChanged = function () {
    var colsSpanning = this.getColSpanningList();
    if (!areEqual(this.colsSpanning, colsSpanning)) {
      this.colsSpanning = colsSpanning;
      this.onWidthChanged();
      this.onLeftChanged(); // left changes when doing RTL
    }
  };

  CellComp.prototype.refreshAriaIndex = function () {
    var colIdx = this.beans.columnController.getAriaColumnIndex(this.column);
    setAriaColIndex(this.getGui(), colIdx);
  };
  CellComp.prototype.getInitialCssClasses = function () {
    var cssClasses = [CSS_CELL, CSS_NOT_INLINE_EDITING];
    // if we are putting the cell into a dummy container, to work out it's height,
    // then we don't put the height css in, as we want cell to fit height in that case.
    if (!this.autoHeightCell) {
      cssClasses.push(CSS_AUTO_HEIGHT);
    }
    var doingFocusCss = !this.beans.gridOptionsWrapper.isSuppressCellSelection();
    if (doingFocusCss && this.cellFocused) {
      // otherwise the class depends on the focus state
      cssClasses.push(CSS_CELL_FOCUS);
    }
    if (this.firstRightPinned) {
      cssClasses.push(CSS_FIRST_RIGHT_PINNED);
    }
    if (this.lastLeftPinned) {
      cssClasses.push(CSS_LAST_LEFT_PINNED);
    }
    if (this.beans.columnHoverService.isHovered(this.column)) {
      cssClasses.push(CSS_COLUMN_HOVER);
    }
    pushAll(cssClasses, this.preProcessClassesFromColDef());
    pushAll(cssClasses, this.preProcessCellClassRules());
    pushAll(cssClasses, this.getInitialRangeClasses());
    // if using the wrapper, this class goes on the wrapper instead
    if (!this.usingWrapper) {
      cssClasses.push(CSS_CELL_VALUE);
    }
    this.wrapText = this.column.getColDef().wrapText == true;
    if (this.wrapText) {
      cssClasses.push(CSS_CELL_WRAP_TEXT);
    }
    return cssClasses;
  };
  CellComp.prototype.getInitialValueToRender = function () {
    // if using a cellRenderer, then render the html from the cell renderer if it exists
    if (this.usingCellRenderer) {
      if (typeof this.cellRendererGui === 'string') {
        return this.cellRendererGui;
      }
      return '';
    }
    var colDef = this.getComponentHolder();
    if (colDef.template) {
      // template is really only used for angular 1 - as people using ng1 are used to providing templates with
      // bindings in it. in ng2, people will hopefully want to provide components, not templates.
      return colDef.template;
    }
    if (colDef.templateUrl) {
      // likewise for templateUrl - it's for ng1 really - when we move away from ng1, we can take these out.
      // niall was pro angular 1 when writing template and templateUrl, if writing from scratch now, would
      // not do these, but would follow a pattern that was friendly towards components, not templates.
      var template = this.beans.templateService.getTemplate(colDef.templateUrl, this.refreshCell.bind(this, true));
      return template || '';
    }
    return this.getValueToUse();
  };
  CellComp.prototype.getRenderedRow = function () {
    return this.rowComp;
  };
  CellComp.prototype.isSuppressNavigable = function () {
    return this.column.isSuppressNavigable(this.rowNode);
  };
  CellComp.prototype.getCellRenderer = function () {
    return this.cellRenderer;
  };
  CellComp.prototype.getCellEditor = function () {
    return this.cellEditor;
  };
  CellComp.prototype.onNewColumnsLoaded = function () {
    this.postProcessWrapText();
    this.postProcessCellClassRules();
  };
  CellComp.prototype.postProcessWrapText = function () {
    var newValue = this.column.getColDef().wrapText == true;
    if (newValue !== this.wrapText) {
      this.wrapText = newValue;
      this.addOrRemoveCssClass(CSS_CELL_WRAP_TEXT, this.wrapText);
    }
  };
  // + stop editing {forceRefresh: true, suppressFlash: true}
  // + event cellChanged {}
  // + cellRenderer.params.refresh() {} -> method passes 'as is' to the cellRenderer, so params could be anything
  // + rowComp: event dataChanged {animate: update, newData: !update}
  // + rowComp: api refreshCells() {animate: true/false}
  // + rowRenderer: api softRefreshView() {}
  CellComp.prototype.refreshCell = function (params) {
    // if we are in the middle of 'stopEditing', then we don't refresh here, as refresh gets called explicitly
    if (this.suppressRefreshCell || this.editingCell) {
      return;
    }
    var colDef = this.getComponentHolder();
    var newData = params && params.newData;
    var suppressFlash = params && params.suppressFlash || colDef.suppressCellFlash;
    // we always refresh if cell has no value - this can happen when user provides Cell Renderer and the
    // cell renderer doesn't rely on a value, instead it could be looking directly at the data, or maybe
    // printing the current time (which would be silly)???. Generally speaking
    // non of {field, valueGetter, showRowGroup} is bad in the users application, however for this edge case, it's
    // best always refresh and take the performance hit rather than never refresh and users complaining in support
    // that cells are not updating.
    var noValueProvided = colDef.field == null && colDef.valueGetter == null && colDef.showRowGroup == null;
    var forceRefresh = params && params.forceRefresh || noValueProvided || newData;
    var oldValue = this.value;
    // get latest value without invoking the value formatter as we may not be updating the cell
    this.value = this.getValue();
    // for simple values only (not objects), see if the value is the same, and if it is, skip the refresh.
    // when never allow skipping after an edit, as after editing, we need to put the GUI back to the way
    // if was before the edit.
    var valuesDifferent = !this.valuesAreEqual(oldValue, this.value);
    var dataNeedsUpdating = forceRefresh || valuesDifferent;
    if (dataNeedsUpdating) {
      // now invoke the value formatter as we are going to update cell
      this.valueFormatted = this.beans.valueFormatterService.formatValue(this.column, this.rowNode, this.scope, this.value);
      // if it's 'new data', then we don't refresh the cellRenderer, even if refresh method is available.
      // this is because if the whole data is new (ie we are showing stock price 'BBA' now and not 'SSD')
      // then we are not showing a movement in the stock price, rather we are showing different stock.
      var cellRendererRefreshed = newData ? false : this.attemptCellRendererRefresh();
      // we do the replace if not doing refresh, or if refresh was unsuccessful.
      // the refresh can be unsuccessful if we are using a framework (eg ng2 or react) and the framework
      // wrapper has the refresh method, but the underlying component doesn't
      if (!cellRendererRefreshed) {
        this.replaceContentsAfterRefresh();
      }
      // we don't want to flash the cells when processing a filter change, as otherwise the UI would
      // be to busy. see comment in FilterManager with regards processingFilterChange
      var processingFilterChange = this.beans.filterManager.isSuppressFlashingCellsBecauseFiltering();
      var flashCell = !suppressFlash && !processingFilterChange && (this.beans.gridOptionsWrapper.isEnableCellChangeFlash() || colDef.enableCellChangeFlash);
      if (flashCell) {
        this.flashCell();
      }
      // need to check rules. note, we ignore colDef classes and styles, these are assumed to be static
      this.postProcessStylesFromColDef();
      this.postProcessClassesFromColDef();
    }
    // we can't readily determine if the data in an angularjs template has changed, so here we just update
    // and recompile (if applicable)
    this.updateAngular1ScopeAndCompile();
    this.refreshToolTip();
    // we do cellClassRules even if the value has not changed, so that users who have rules that
    // look at other parts of the row (where the other part of the row might of changed) will work.
    this.postProcessCellClassRules();
  };
  // user can also call this via API
  CellComp.prototype.flashCell = function (delays) {
    var flashDelay = delays && delays.flashDelay;
    var fadeDelay = delays && delays.fadeDelay;
    this.animateCell('data-changed', flashDelay, fadeDelay);
  };
  CellComp.prototype.animateCell = function (cssName, flashDelay, fadeDelay) {
    var _this = this;
    var fullName = "ag-cell-" + cssName;
    var animationFullName = "ag-cell-" + cssName + "-animation";
    var element = this.getGui();
    var gridOptionsWrapper = this.beans.gridOptionsWrapper;
    if (!flashDelay) {
      flashDelay = gridOptionsWrapper.getCellFlashDelay();
    }
    if (!exists(fadeDelay)) {
      fadeDelay = gridOptionsWrapper.getCellFadeDelay();
    }
    // we want to highlight the cells, without any animation
    this.addCssClass(fullName);
    this.removeCssClass(animationFullName);
    // then once that is applied, we remove the highlight with animation
    window.setTimeout(function () {
      _this.removeCssClass(fullName);
      _this.addCssClass(animationFullName);
      element.style.transition = "background-color " + fadeDelay + "ms";
      window.setTimeout(function () {
        // and then to leave things as we got them, we remove the animation
        _this.removeCssClass(animationFullName);
        element.style.removeProperty('transition');
      }, fadeDelay);
    }, flashDelay);
  };
  CellComp.prototype.replaceContentsAfterRefresh = function () {
    this.setUsingWrapper();
    clearElement(this.eCellValue);
    // remove old renderer component if it exists
    this.cellRenderer = this.beans.context.destroyBean(this.cellRenderer);
    this.cellRendererGui = null;
    // populate
    this.putDataIntoCellAfterRefresh();
    this.updateAngular1ScopeAndCompile();
  };
  CellComp.prototype.updateAngular1ScopeAndCompile = function () {
    if (this.beans.gridOptionsWrapper.isAngularCompileRows() && this.scope) {
      this.scope.data = __assign$4({}, this.rowNode.data);
      this.angular1Compile();
    }
  };
  CellComp.prototype.angular1Compile = function () {
    // if angular compiling, then need to also compile the cell again (angular compiling sucks, please wait...)
    if (this.beans.gridOptionsWrapper.isAngularCompileRows()) {
      var eGui = this.getGui();
      // only compile the node if it hasn't already been done
      // this prevents "orphaned" node leaks
      if (!eGui.classList.contains('ng-scope') || eGui.childElementCount === 0) {
        var compiledElement_1 = this.beans.$compile(eGui)(this.scope);
        this.addDestroyFunc(function () {
          return compiledElement_1.remove();
        });
      }
    }
  };
  CellComp.prototype.postProcessStylesFromColDef = function () {
    var stylesToUse = this.processStylesFromColDef();
    if (stylesToUse) {
      addStylesToElement(this.getGui(), stylesToUse);
    }
  };
  CellComp.prototype.preProcessStylesFromColDef = function () {
    return cssStyleObjectToMarkup(this.processStylesFromColDef());
  };
  CellComp.prototype.processStylesFromColDef = function () {
    var colDef = this.getComponentHolder();
    if (colDef.cellStyle) {
      var cssToUse = void 0;
      if (typeof colDef.cellStyle === 'function') {
        var cellStyleParams = {
          column: this.column,
          value: this.value,
          colDef: colDef,
          data: this.rowNode.data,
          node: this.rowNode,
          rowIndex: this.rowNode.rowIndex,
          $scope: this.scope,
          api: this.beans.gridOptionsWrapper.getApi(),
          columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
          context: this.beans.gridOptionsWrapper.getContext()
        };
        var cellStyleFunc = colDef.cellStyle;
        cssToUse = cellStyleFunc(cellStyleParams);
      } else {
        cssToUse = colDef.cellStyle;
      }
      return cssToUse;
    }
  };
  CellComp.prototype.postProcessClassesFromColDef = function () {
    var _this = this;
    this.processClassesFromColDef(function (className) {
      return _this.addCssClass(className);
    });
  };
  CellComp.prototype.preProcessClassesFromColDef = function () {
    var res = [];
    this.processClassesFromColDef(function (className) {
      return res.push(className);
    });
    return res;
  };
  CellComp.prototype.processClassesFromColDef = function (onApplicableClass) {
    var colDef = this.getComponentHolder();
    var cellClassParams = {
      value: this.value,
      data: this.rowNode.data,
      node: this.rowNode,
      colDef: colDef,
      rowIndex: this.rowNode.rowIndex,
      $scope: this.scope,
      api: this.beans.gridOptionsWrapper.getApi(),
      columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
      context: this.beans.gridOptionsWrapper.getContext()
    };
    this.beans.stylingService.processStaticCellClasses(colDef, cellClassParams, onApplicableClass);
  };
  CellComp.prototype.putDataIntoCellAfterRefresh = function () {
    // template gets preference, then cellRenderer, then do it ourselves
    var colDef = this.getComponentHolder();
    if (colDef.template) {
      // template is really only used for angular 1 - as people using ng1 are used to providing templates with
      // bindings in it. in ng2, people will hopefully want to provide components, not templates.
      this.eCellValue.innerHTML = colDef.template;
    } else if (colDef.templateUrl) {
      // likewise for templateUrl - it's for ng1 really - when we move away from ng1, we can take these out.
      // niall was pro angular 1 when writing template and templateUrl, if writing from scratch now, would
      // not do these, but would follow a pattern that was friendly towards components, not templates.
      var template = this.beans.templateService.getTemplate(colDef.templateUrl, this.refreshCell.bind(this, true));
      if (template) {
        this.eCellValue.innerHTML = template;
      }
    } else {
      // we can switch from using a cell renderer back to the default if a user
      // is using cellRendererSelect
      this.chooseCellRenderer();
      if (this.usingCellRenderer) {
        this.createCellRendererInstance();
      } else {
        var valueToUse = this.getValueToUse();
        if (valueToUse != null) {
          this.eCellValue.innerHTML = escapeString(valueToUse) || '';
        }
      }
    }
  };
  CellComp.prototype.attemptCellRendererRefresh = function () {
    if (missing(this.cellRenderer) || !this.cellRenderer || missing(this.cellRenderer.refresh)) {
      return false;
    }
    // if the cell renderer has a refresh method, we call this instead of doing a refresh
    var params = this.createCellRendererParams();
    // take any custom params off of the user
    var finalParams = this.beans.userComponentFactory.createFinalParams(this.getComponentHolder(), this.cellRendererType, params);
    var result = this.cellRenderer.refresh(finalParams);
    // NOTE on undefined: previous version of the cellRenderer.refresh() interface
    // returned nothing, if the method existed, we assumed it refreshed. so for
    // backwards compatibility, we assume if method exists and returns nothing,
    // that it was successful.
    return result === true || result === undefined;
  };
  CellComp.prototype.refreshToolTip = function () {
    var newTooltip = this.getToolTip();
    if (this.tooltip === newTooltip) {
      return;
    }
    this.createTooltipFeatureIfNeeded();
    var hasNewTooltip = exists(newTooltip);
    if (hasNewTooltip && this.tooltip === newTooltip.toString()) {
      return;
    }
    this.tooltip = newTooltip;
    if (this.beans.gridOptionsWrapper.isEnableBrowserTooltips()) {
      if (hasNewTooltip) {
        this.eCellValue.setAttribute('title', this.tooltip);
      } else {
        this.eCellValue.removeAttribute('title');
      }
    }
  };
  CellComp.prototype.valuesAreEqual = function (val1, val2) {
    // if the user provided an equals method, use that, otherwise do simple comparison
    var colDef = this.getComponentHolder();
    var equalsMethod = colDef ? colDef.equals : null;
    return equalsMethod ? equalsMethod(val1, val2) : val1 === val2;
  };
  CellComp.prototype.getToolTip = function () {
    var colDef = this.getComponentHolder();
    var data = this.rowNode.data;
    if (colDef.tooltipField && exists(data)) {
      return getValueUsingField(data, colDef.tooltipField, this.column.isTooltipFieldContainsDots());
    }
    var valueGetter = colDef.tooltipValueGetter;
    if (valueGetter) {
      return valueGetter(__assign$4(__assign$4({
        api: this.beans.gridOptionsWrapper.getApi(),
        columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
        context: this.beans.gridOptionsWrapper.getContext()
      }, this.getTooltipParams()), {
        value: this.value
      }));
    }
    return null;
  };
  CellComp.prototype.getTooltipParams = function () {
    return {
      location: 'cell',
      colDef: this.getComponentHolder(),
      column: this.getColumn(),
      rowIndex: this.cellPosition.rowIndex,
      node: this.rowNode,
      data: this.rowNode.data,
      value: this.getTooltipText(),
      valueFormatted: this.valueFormatted
    };
  };
  CellComp.prototype.getTooltipText = function (escape) {
    if (escape === void 0) {
      escape = true;
    }
    return escape ? escapeString(this.tooltip) : this.tooltip;
  };
  CellComp.prototype.processCellClassRules = function (onApplicableClass, onNotApplicableClass) {
    var colDef = this.getComponentHolder();
    var cellClassParams = {
      value: this.value,
      data: this.rowNode.data,
      node: this.rowNode,
      colDef: colDef,
      rowIndex: this.cellPosition.rowIndex,
      api: this.beans.gridOptionsWrapper.getApi(),
      columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
      $scope: this.scope,
      context: this.beans.gridOptionsWrapper.getContext()
    };
    this.beans.stylingService.processClassRules(colDef.cellClassRules, cellClassParams, onApplicableClass, onNotApplicableClass);
  };
  CellComp.prototype.postProcessCellClassRules = function () {
    var _this = this;
    this.processCellClassRules(function (className) {
      return _this.addCssClass(className);
    }, function (className) {
      return _this.removeCssClass(className);
    });
  };
  CellComp.prototype.preProcessCellClassRules = function () {
    var res = [];
    this.processCellClassRules(function (className) {
      return res.push(className);
    }, function (_) {
      // not catered for, if creating, no need
      // to remove class as it was never there
    });
    return res;
  };
  // a wrapper is used when we are putting a selection checkbox in the cell with the value
  CellComp.prototype.setUsingWrapper = function () {
    var colDef = this.getComponentHolder();
    // never allow selection or dragging on pinned rows
    if (this.rowNode.rowPinned) {
      this.usingWrapper = false;
      this.includeSelectionComponent = false;
      this.includeRowDraggingComponent = false;
      this.includeDndSourceComponent = false;
      return;
    }
    var cbSelectionIsFunc = typeof colDef.checkboxSelection === 'function';
    var rowDraggableIsFunc = typeof colDef.rowDrag === 'function';
    var dndSourceIsFunc = typeof colDef.dndSource === 'function';
    this.includeSelectionComponent = cbSelectionIsFunc || colDef.checkboxSelection === true;
    this.includeRowDraggingComponent = rowDraggableIsFunc || colDef.rowDrag === true;
    this.includeDndSourceComponent = dndSourceIsFunc || colDef.dndSource === true;
    var enableTextSelection = this.beans.gridOptionsWrapper.isEnableCellTextSelection();
    this.usingWrapper = enableTextSelection || this.includeRowDraggingComponent || this.includeSelectionComponent || this.includeDndSourceComponent;
  };
  CellComp.prototype.chooseCellRenderer = function () {
    // template gets preference, then cellRenderer, then do it ourselves
    var colDef = this.getComponentHolder();
    // templates are for ng1, ideally we wouldn't have these, they are ng1 support
    // inside the core which is bad
    if (colDef.template || colDef.templateUrl) {
      this.usingCellRenderer = false;
      return;
    }
    var params = this.createCellRendererParams();
    if (this.rowNode.rowPinned && this.beans.userComponentFactory.lookupComponentClassDef(colDef, 'pinnedRowCellRenderer', params)) {
      this.cellRendererType = CellComp.CELL_RENDERER_TYPE_PINNED;
      this.usingCellRenderer = true;
    } else if (this.beans.userComponentFactory.lookupComponentClassDef(colDef, 'cellRenderer', params)) {
      this.cellRendererType = CellComp.CELL_RENDERER_TYPE_NORMAL;
      this.usingCellRenderer = true;
    } else {
      this.usingCellRenderer = false;
    }
  };
  CellComp.prototype.createCellRendererInstance = function (useTaskService) {
    var _this = this;
    if (useTaskService === void 0) {
      useTaskService = false;
    }
    if (!this.usingCellRenderer) {
      return;
    }
    // never use task service if angularCompileRows=true, as that assume the cell renderers
    // are finished when the row is created. also we never use it if animation frame service
    // is turned off.
    // and lastly we never use it if doing auto-height, as the auto-height service checks the
    // row height directly after the cell is created, it doesn't wait around for the tasks to complete
    var angularCompileRows = this.beans.gridOptionsWrapper.isAngularCompileRows();
    var suppressAnimationFrame = this.beans.gridOptionsWrapper.isSuppressAnimationFrame();
    if (angularCompileRows || suppressAnimationFrame || this.autoHeightCell) {
      useTaskService = false;
    }
    var params = this.createCellRendererParams();
    this.cellRendererVersion++;
    var callback = this.afterCellRendererCreated.bind(this, this.cellRendererVersion);
    var cellRendererTypeNormal = this.cellRendererType === CellComp.CELL_RENDERER_TYPE_NORMAL;
    this.createCellRendererFunc = function () {
      _this.createCellRendererFunc = null;
      // this can return null in the event that the user has switched from a renderer component to nothing, for example
      // when using a cellRendererSelect to return a component or null depending on row data etc
      var componentPromise = _this.beans.userComponentFactory.newCellRenderer(_this.getComponentHolder(), params, !cellRendererTypeNormal);
      if (componentPromise) {
        componentPromise.then(callback);
      }
    };
    if (useTaskService) {
      this.beans.taskQueue.createTask(this.createCellRendererFunc, this.rowNode.rowIndex, 'createTasksP2');
    } else {
      this.createCellRendererFunc();
    }
  };
  CellComp.prototype.afterCellRendererCreated = function (cellRendererVersion, cellRenderer) {
    var cellRendererNotRequired = !this.isAlive() || cellRendererVersion !== this.cellRendererVersion;
    if (cellRendererNotRequired) {
      this.beans.context.destroyBean(cellRenderer);
      return;
    }
    this.cellRenderer = cellRenderer;
    this.cellRendererGui = this.cellRenderer.getGui();
    if (missing(this.cellRendererGui)) {
      return;
    }
    // if async components, then it's possible the user started editing since this call was made
    if (!this.editingCell) {
      this.eCellValue.appendChild(this.cellRendererGui);
    }
  };
  CellComp.prototype.createCellRendererParams = function () {
    var _this = this;
    return {
      value: this.value,
      valueFormatted: this.valueFormatted,
      getValue: this.getValue.bind(this),
      setValue: function (value) {
        return _this.beans.valueService.setValue(_this.rowNode, _this.column, value);
      },
      formatValue: this.formatValue.bind(this),
      data: this.rowNode.data,
      node: this.rowNode,
      colDef: this.getComponentHolder(),
      column: this.column,
      $scope: this.scope,
      rowIndex: this.cellPosition.rowIndex,
      api: this.beans.gridOptionsWrapper.getApi(),
      columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
      context: this.beans.gridOptionsWrapper.getContext(),
      refreshCell: this.refreshCell.bind(this),
      eGridCell: this.getGui(),
      eParentOfValue: this.eCellValue,
      registerRowDragger: function (rowDraggerElement, dragStartPixels) {
        return _this.addRowDragging(rowDraggerElement, dragStartPixels);
      },
      // these bits are not documented anywhere, so we could drop them?
      // it was in the olden days to allow user to register for when rendered
      // row was removed (the row comp was removed), however now that the user
      // can provide components for cells, the destroy method gets call when this
      // happens so no longer need to fire event.
      addRowCompListener: this.rowComp ? this.rowComp.addEventListener.bind(this.rowComp) : null,
      addRenderedRowListener: function (eventType, listener) {
        console.warn('AG Grid: since AG Grid .v11, params.addRenderedRowListener() is now params.addRowCompListener()');
        if (_this.rowComp) {
          _this.rowComp.addEventListener(eventType, listener);
        }
      }
    };
  };
  CellComp.prototype.formatValue = function (value) {
    var valueFormatted = this.beans.valueFormatterService.formatValue(this.column, this.rowNode, this.scope, value);
    return valueFormatted != null ? valueFormatted : value;
  };
  CellComp.prototype.getValueToUse = function () {
    return this.valueFormatted != null ? this.valueFormatted : this.value;
  };
  CellComp.prototype.getValueAndFormat = function () {
    this.value = this.getValue();
    this.valueFormatted = this.beans.valueFormatterService.formatValue(this.column, this.rowNode, this.scope, this.value);
  };
  CellComp.prototype.getValue = function () {
    // if we don't check this, then the grid will render leaf groups as open even if we are not
    // allowing the user to open leaf groups. confused? remember for pivot mode we don't allow
    // opening leaf groups, so we have to force leafGroups to be closed in case the user expanded
    // them via the API, or user user expanded them in the UI before turning on pivot mode
    var lockedClosedGroup = this.rowNode.leafGroup && this.beans.columnController.isPivotMode();
    var isOpenGroup = this.rowNode.group && this.rowNode.expanded && !this.rowNode.footer && !lockedClosedGroup;
    // are we showing group footers
    var groupFootersEnabled = this.beans.gridOptionsWrapper.isGroupIncludeFooter();
    // if doing footers, we normally don't show agg data at group level when group is open
    var groupAlwaysShowAggData = this.beans.gridOptionsWrapper.isGroupSuppressBlankHeader();
    // if doing grouping and footers, we don't want to include the agg value
    // in the header when the group is open
    var ignoreAggData = isOpenGroup && groupFootersEnabled && !groupAlwaysShowAggData;
    var value = this.beans.valueService.getValue(this.column, this.rowNode, false, ignoreAggData);
    return value;
  };
  CellComp.prototype.onMouseEvent = function (eventName, mouseEvent) {
    if (isStopPropagationForAgGrid(mouseEvent)) {
      return;
    }
    switch (eventName) {
      case 'click':
        this.onCellClicked(mouseEvent);
        break;
      case 'mousedown':
        this.onMouseDown(mouseEvent);
        break;
      case 'dblclick':
        this.onCellDoubleClicked(mouseEvent);
        break;
      case 'mouseout':
        this.onMouseOut(mouseEvent);
        break;
      case 'mouseover':
        this.onMouseOver(mouseEvent);
        break;
    }
  };
  CellComp.prototype.dispatchCellContextMenuEvent = function (event) {
    var colDef = this.getComponentHolder();
    var cellContextMenuEvent = this.createEvent(event, Events.EVENT_CELL_CONTEXT_MENU);
    this.beans.eventService.dispatchEvent(cellContextMenuEvent);
    if (colDef.onCellContextMenu) {
      // to make the callback async, do in a timeout
      window.setTimeout(function () {
        return colDef.onCellContextMenu(cellContextMenuEvent);
      }, 0);
    }
  };
  CellComp.prototype.createEvent = function (domEvent, eventType) {
    var event = {
      type: eventType,
      node: this.rowNode,
      data: this.rowNode.data,
      value: this.value,
      column: this.column,
      colDef: this.getComponentHolder(),
      context: this.beans.gridOptionsWrapper.getContext(),
      api: this.beans.gridApi,
      columnApi: this.beans.columnApi,
      rowPinned: this.rowNode.rowPinned,
      event: domEvent,
      rowIndex: this.rowNode.rowIndex
    };
    // because we are hacking in $scope for angular 1, we have to de-reference
    if (this.scope) {
      event.$scope = this.scope;
    }
    return event;
  };
  CellComp.prototype.onMouseOut = function (mouseEvent) {
    var cellMouseOutEvent = this.createEvent(mouseEvent, Events.EVENT_CELL_MOUSE_OUT);
    this.beans.eventService.dispatchEvent(cellMouseOutEvent);
    this.beans.columnHoverService.clearMouseOver();
  };
  CellComp.prototype.onMouseOver = function (mouseEvent) {
    var cellMouseOverEvent = this.createEvent(mouseEvent, Events.EVENT_CELL_MOUSE_OVER);
    this.beans.eventService.dispatchEvent(cellMouseOverEvent);
    this.beans.columnHoverService.setMouseOver([this.column]);
  };
  CellComp.prototype.onCellDoubleClicked = function (mouseEvent) {
    var colDef = this.getComponentHolder();
    // always dispatch event to eventService
    var cellDoubleClickedEvent = this.createEvent(mouseEvent, Events.EVENT_CELL_DOUBLE_CLICKED);
    this.beans.eventService.dispatchEvent(cellDoubleClickedEvent);
    // check if colDef also wants to handle event
    if (typeof colDef.onCellDoubleClicked === 'function') {
      // to make the callback async, do in a timeout
      window.setTimeout(function () {
        return colDef.onCellDoubleClicked(cellDoubleClickedEvent);
      }, 0);
    }
    var editOnDoubleClick = !this.beans.gridOptionsWrapper.isSingleClickEdit() && !this.beans.gridOptionsWrapper.isSuppressClickEdit();
    if (editOnDoubleClick) {
      this.startRowOrCellEdit();
    }
  };
  // called by rowRenderer when user navigates via tab key
  CellComp.prototype.startRowOrCellEdit = function (keyPress, charPress) {
    if (this.beans.gridOptionsWrapper.isFullRowEdit()) {
      this.rowComp.startRowEditing(keyPress, charPress, this);
    } else {
      this.startEditingIfEnabled(keyPress, charPress, true);
    }
  };
  CellComp.prototype.isCellEditable = function () {
    return this.column.isCellEditable(this.rowNode);
  };
  // either called internally if single cell editing, or called by rowRenderer if row editing
  CellComp.prototype.startEditingIfEnabled = function (keyPress, charPress, cellStartedEdit) {
    if (keyPress === void 0) {
      keyPress = null;
    }
    if (charPress === void 0) {
      charPress = null;
    }
    if (cellStartedEdit === void 0) {
      cellStartedEdit = false;
    }
    // don't do it if not editable
    if (!this.isCellEditable()) {
      return;
    }
    // don't do it if already editing
    if (this.editingCell) {
      return;
    }
    this.editingCell = true;
    this.cellEditorVersion++;
    var callback = this.afterCellEditorCreated.bind(this, this.cellEditorVersion);
    var params = this.createCellEditorParams(keyPress, charPress, cellStartedEdit);
    this.createCellEditor(params).then(callback);
    // if we don't do this, and editor component is async, then there will be a period
    // when the component isn't present and keyboard navigation won't work - so example
    // of user hitting tab quickly (more quickly than renderers getting created) won't work
    var cellEditorAsync = missing(this.cellEditor);
    if (cellEditorAsync && cellStartedEdit) {
      this.focusCell(true);
    }
  };
  CellComp.prototype.createCellEditor = function (params) {
    var _this = this;
    var cellEditorPromise = this.beans.userComponentFactory.newCellEditor(this.column.getColDef(), params);
    return cellEditorPromise.then(function (cellEditor) {
      var cellEditorComp = cellEditor;
      var isPopup = cellEditorComp.isPopup && cellEditorComp.isPopup();
      if (!isPopup) {
        return cellEditorComp;
      }
      if (_this.beans.gridOptionsWrapper.isFullRowEdit()) {
        console.warn('AG Grid: popup cellEditor does not work with fullRowEdit - you cannot use them both ' + '- either turn off fullRowEdit, or stop using popup editors.');
      }
      // if a popup, then we wrap in a popup editor and return the popup
      var popupEditorWrapper = new PopupEditorWrapper(cellEditorComp);
      _this.beans.context.createBean(popupEditorWrapper);
      popupEditorWrapper.init(params);
      return popupEditorWrapper;
    });
  };
  CellComp.prototype.afterCellEditorCreated = function (cellEditorVersion, cellEditor) {
    // if editingCell=false, means user cancelled the editor before component was ready.
    // if versionMismatch, then user cancelled the edit, then started the edit again, and this
    //   is the first editor which is now stale.
    var versionMismatch = cellEditorVersion !== this.cellEditorVersion;
    var cellEditorNotNeeded = versionMismatch || !this.editingCell;
    if (cellEditorNotNeeded) {
      this.beans.context.destroyBean(cellEditor);
      return;
    }
    var editingCancelledByUserComp = cellEditor.isCancelBeforeStart && cellEditor.isCancelBeforeStart();
    if (editingCancelledByUserComp) {
      this.beans.context.destroyBean(cellEditor);
      this.editingCell = false;
      return;
    }
    if (!cellEditor.getGui) {
      console.warn("AG Grid: cellEditor for column " + this.column.getId() + " is missing getGui() method");
      // no getGui, for React guys, see if they attached a react component directly
      if (cellEditor.render) {
        console.warn("AG Grid: we found 'render' on the component, are you trying to set a React renderer but added it as colDef.cellEditor instead of colDef.cellEditorFmk?");
      }
      this.beans.context.destroyBean(cellEditor);
      this.editingCell = false;
      return;
    }
    this.cellEditor = cellEditor;
    this.cellEditorInPopup = cellEditor.isPopup !== undefined && cellEditor.isPopup();
    this.setInlineEditingClass();
    if (this.cellEditorInPopup) {
      this.addPopupCellEditor();
    } else {
      this.addInCellEditor();
    }
    if (cellEditor.afterGuiAttached) {
      cellEditor.afterGuiAttached();
    }
    var event = this.createEvent(null, Events.EVENT_CELL_EDITING_STARTED);
    this.beans.eventService.dispatchEvent(event);
  };
  CellComp.prototype.addInCellEditor = function () {
    var eGui = this.getGui();
    // if focus is inside the cell, we move focus to the cell itself
    // before removing it's contents, otherwise errors could be thrown.
    if (eGui.contains(document.activeElement)) {
      eGui.focus();
    }
    this.clearCellElement();
    if (this.cellEditor) {
      eGui.appendChild(this.cellEditor.getGui());
    }
    this.angular1Compile();
  };
  CellComp.prototype.addPopupCellEditor = function () {
    var _this = this;
    var ePopupGui = this.cellEditor && this.cellEditor.getGui();
    if (!ePopupGui) {
      return;
    }
    var popupService = this.beans.popupService;
    var useModelPopup = this.beans.gridOptionsWrapper.isStopEditingWhenCellsLoseFocus();
    var position = this.cellEditor && this.cellEditor.getPopupPosition ? this.cellEditor.getPopupPosition() : 'over';
    var params = {
      column: this.column,
      rowNode: this.rowNode,
      type: 'popupCellEditor',
      eventSource: this.getGui(),
      ePopup: ePopupGui,
      keepWithinBounds: true
    };
    var positionCallback = position === 'under' ? popupService.positionPopupUnderComponent.bind(popupService, params) : popupService.positionPopupOverComponent.bind(popupService, params);
    var addPopupRes = popupService.addPopup({
      modal: useModelPopup,
      eChild: ePopupGui,
      closeOnEsc: true,
      closedCallback: function () {
        _this.onPopupEditorClosed();
      },
      anchorToElement: this.getGui(),
      positionCallback: positionCallback
    });
    if (addPopupRes) {
      this.hideEditorPopup = addPopupRes.hideFunc;
    }
    this.angular1Compile();
  };
  CellComp.prototype.onPopupEditorClosed = function () {
    // we only call stopEditing if we are editing, as
    // it's possible the popup called 'stop editing'
    // before this, eg if 'enter key' was pressed on
    // the editor.
    if (!this.editingCell) {
      return;
    }
    // note: this only happens when use clicks outside of the grid. if use clicks on another
    // cell, then the editing will have already stopped on this cell
    this.stopRowOrCellEdit();
  };
  // if we are editing inline, then we don't have the padding in the cell (set in the themes)
  // to allow the text editor full access to the entire cell
  CellComp.prototype.setInlineEditingClass = function () {
    if (!this.isAlive()) {
      return;
    }
    // ag-cell-inline-editing - appears when user is inline editing
    // ag-cell-not-inline-editing - appears when user is no inline editing
    // ag-cell-popup-editing - appears when user is editing cell in popup (appears on the cell, not on the popup)
    // note: one of {ag-cell-inline-editing, ag-cell-not-inline-editing} is always present, they toggle.
    //       however {ag-cell-popup-editing} shows when popup, so you have both {ag-cell-popup-editing}
    //       and {ag-cell-not-inline-editing} showing at the same time.
    var editingInline = this.editingCell && !this.cellEditorInPopup;
    var popupEditorShowing = this.editingCell && this.cellEditorInPopup;
    this.addOrRemoveCssClass(CSS_INLINE_EDITING, editingInline);
    this.addOrRemoveCssClass(CSS_NOT_INLINE_EDITING, !editingInline);
    this.addOrRemoveCssClass(CSS_POPUP_EDITING, popupEditorShowing);
    addOrRemoveCssClass(this.getGui().parentNode, "ag-row-inline-editing", editingInline);
    addOrRemoveCssClass(this.getGui().parentNode, "ag-row-not-inline-editing", !editingInline);
  };
  CellComp.prototype.createCellEditorParams = function (keyPress, charPress, cellStartedEdit) {
    return {
      value: this.getValue(),
      keyPress: keyPress,
      charPress: charPress,
      column: this.column,
      colDef: this.column.getColDef(),
      rowIndex: this.cellPosition.rowIndex,
      node: this.rowNode,
      data: this.rowNode.data,
      api: this.beans.gridOptionsWrapper.getApi(),
      cellStartedEdit: cellStartedEdit,
      columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
      context: this.beans.gridOptionsWrapper.getContext(),
      $scope: this.scope,
      onKeyDown: this.onKeyDown.bind(this),
      stopEditing: this.stopEditingAndFocus.bind(this),
      eGridCell: this.getGui(),
      parseValue: this.parseValue.bind(this),
      formatValue: this.formatValue.bind(this)
    };
  };
  // cell editors call this, when they want to stop for reasons other
  // than what we pick up on. eg selecting from a dropdown ends editing.
  CellComp.prototype.stopEditingAndFocus = function (suppressNavigateAfterEdit) {
    if (suppressNavigateAfterEdit === void 0) {
      suppressNavigateAfterEdit = false;
    }
    this.stopRowOrCellEdit();
    this.focusCell(true);
    if (!suppressNavigateAfterEdit) {
      this.navigateAfterEdit();
    }
  };
  CellComp.prototype.parseValue = function (newValue) {
    var colDef = this.getComponentHolder();
    var params = {
      node: this.rowNode,
      data: this.rowNode.data,
      oldValue: this.value,
      newValue: newValue,
      colDef: colDef,
      column: this.column,
      api: this.beans.gridOptionsWrapper.getApi(),
      columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
      context: this.beans.gridOptionsWrapper.getContext()
    };
    var valueParser = colDef.valueParser;
    return exists(valueParser) ? this.beans.expressionService.evaluate(valueParser, params) : newValue;
  };
  CellComp.prototype.focusCell = function (forceBrowserFocus) {
    if (forceBrowserFocus === void 0) {
      forceBrowserFocus = false;
    }
    this.beans.focusController.setFocusedCell(this.cellPosition.rowIndex, this.column, this.rowNode.rowPinned, forceBrowserFocus);
  };
  CellComp.prototype.setFocusInOnEditor = function () {
    if (this.editingCell) {
      if (this.cellEditor && this.cellEditor.focusIn) {
        // if the editor is present, then we just focus it
        this.cellEditor.focusIn();
      } else {
        // if the editor is not present, it means async cell editor (eg React fibre)
        // and we are trying to set focus before the cell editor is present, so we
        // focus the cell instead
        this.focusCell(true);
      }
    }
  };
  CellComp.prototype.isEditing = function () {
    return this.editingCell;
  };
  CellComp.prototype.onKeyDown = function (event) {
    var key = event.which || event.keyCode;
    switch (key) {
      case KeyCode.ENTER:
        this.onEnterKeyDown(event);
        break;
      case KeyCode.F2:
        this.onF2KeyDown();
        break;
      case KeyCode.ESCAPE:
        this.onEscapeKeyDown();
        break;
      case KeyCode.TAB:
        this.onTabKeyDown(event);
        break;
      case KeyCode.BACKSPACE:
      case KeyCode.DELETE:
        this.onBackspaceOrDeleteKeyPressed(key);
        break;
      case KeyCode.DOWN:
      case KeyCode.UP:
      case KeyCode.RIGHT:
      case KeyCode.LEFT:
        this.onNavigationKeyPressed(event, key);
        break;
    }
  };
  CellComp.prototype.setFocusOutOnEditor = function () {
    if (this.editingCell && this.cellEditor && this.cellEditor.focusOut) {
      this.cellEditor.focusOut();
    }
  };
  CellComp.prototype.onNavigationKeyPressed = function (event, key) {
    if (this.editingCell) {
      return;
    }
    if (event.shiftKey && this.rangeSelectionEnabled) {
      this.onShiftRangeSelect(key);
    } else {
      this.beans.rowRenderer.navigateToNextCell(event, key, this.cellPosition, true);
    }
    // if we don't prevent default, the grid will scroll with the navigation keys
    event.preventDefault();
  };
  CellComp.prototype.onShiftRangeSelect = function (key) {
    if (!this.beans.rangeController) {
      return;
    }
    var endCell = this.beans.rangeController.extendLatestRangeInDirection(key);
    if (endCell) {
      this.beans.rowRenderer.ensureCellVisible(endCell);
    }
  };
  CellComp.prototype.onTabKeyDown = function (event) {
    this.beans.rowRenderer.onTabKeyDown(this, event);
  };
  CellComp.prototype.onBackspaceOrDeleteKeyPressed = function (key) {
    if (!this.editingCell) {
      this.startRowOrCellEdit(key);
    }
  };
  CellComp.prototype.onEnterKeyDown = function (e) {
    if (this.editingCell || this.rowComp.isEditing()) {
      this.stopEditingAndFocus();
    } else {
      if (this.beans.gridOptionsWrapper.isEnterMovesDown()) {
        this.beans.rowRenderer.navigateToNextCell(null, KeyCode.DOWN, this.cellPosition, false);
      } else {
        this.startRowOrCellEdit(KeyCode.ENTER);
        if (this.editingCell) {
          // if we started editing, then we need to prevent default, otherwise the Enter action can get
          // applied to the cell editor. this happened, for example, with largeTextCellEditor where not
          // preventing default results in a 'new line' character getting inserted in the text area
          // when the editing was started
          e.preventDefault();
        }
      }
    }
  };
  CellComp.prototype.navigateAfterEdit = function () {
    var fullRowEdit = this.beans.gridOptionsWrapper.isFullRowEdit();
    if (fullRowEdit) {
      return;
    }
    var enterMovesDownAfterEdit = this.beans.gridOptionsWrapper.isEnterMovesDownAfterEdit();
    if (enterMovesDownAfterEdit) {
      this.beans.rowRenderer.navigateToNextCell(null, KeyCode.DOWN, this.cellPosition, false);
    }
  };
  CellComp.prototype.onF2KeyDown = function () {
    if (!this.editingCell) {
      this.startRowOrCellEdit(KeyCode.F2);
    }
  };
  CellComp.prototype.onEscapeKeyDown = function () {
    if (this.editingCell) {
      this.stopRowOrCellEdit(true);
      this.focusCell(true);
    }
  };
  CellComp.prototype.onKeyPress = function (event) {
    // check this, in case focus is on a (for example) a text field inside the cell,
    // in which cse we should not be listening for these key pressed
    var eventTarget = getTarget(event);
    var eventOnChildComponent = eventTarget !== this.getGui();
    if (eventOnChildComponent || this.editingCell) {
      return;
    }
    var pressedChar = String.fromCharCode(event.charCode);
    if (pressedChar === ' ') {
      this.onSpaceKeyPressed(event);
    } else if (isEventFromPrintableCharacter(event)) {
      this.startRowOrCellEdit(null, pressedChar);
      // if we don't prevent default, then the keypress also gets applied to the text field
      // (at least when doing the default editor), but we need to allow the editor to decide
      // what it wants to do. we only do this IF editing was started - otherwise it messes
      // up when the use is not doing editing, but using rendering with text fields in cellRenderer
      // (as it would block the the user from typing into text fields).
      event.preventDefault();
    }
  };
  CellComp.prototype.onSpaceKeyPressed = function (event) {
    var gridOptionsWrapper = this.beans.gridOptionsWrapper;
    if (!this.editingCell && gridOptionsWrapper.isRowSelection()) {
      var currentSelection = this.rowNode.isSelected();
      var newSelection = !currentSelection;
      if (newSelection || !gridOptionsWrapper.isSuppressRowDeselection()) {
        var groupSelectsFiltered = this.beans.gridOptionsWrapper.isGroupSelectsFiltered();
        var updatedCount = this.rowNode.setSelectedParams({
          newValue: newSelection,
          rangeSelect: event.shiftKey,
          groupSelectsFiltered: groupSelectsFiltered
        });
        if (currentSelection === undefined && updatedCount === 0) {
          this.rowNode.setSelectedParams({
            newValue: false,
            rangeSelect: event.shiftKey,
            groupSelectsFiltered: groupSelectsFiltered
          });
        }
      }
    }
    // prevent default as space key, by default, moves browser scroll down
    event.preventDefault();
  };
  CellComp.prototype.onMouseDown = function (mouseEvent) {
    var ctrlKey = mouseEvent.ctrlKey,
      metaKey = mouseEvent.metaKey,
      shiftKey = mouseEvent.shiftKey;
    var target = mouseEvent.target;
    var _a = this.beans,
      eventService = _a.eventService,
      rangeController = _a.rangeController;
    // do not change the range for right-clicks inside an existing range
    if (this.isRightClickInExistingRange(mouseEvent)) {
      return;
    }
    if (!shiftKey || rangeController && !rangeController.getCellRanges().length) {
      // We only need to pass true to focusCell when the browser is IE/Edge and we are trying
      // to focus the cell itself. This should never be true if the mousedown was triggered
      // due to a click on a cell editor for example.
      var forceBrowserFocus = (isBrowserIE() || isBrowserEdge()) && !this.editingCell && !isFocusableFormField(target);
      this.focusCell(forceBrowserFocus);
    } else if (rangeController) {
      // if a range is being changed, we need to make sure the focused cell does not change.
      mouseEvent.preventDefault();
    }
    // if we are clicking on a checkbox, we need to make sure the cell wrapping that checkbox
    // is focused but we don't want to change the range selection, so return here.
    if (this.containsWidget(target)) {
      return;
    }
    if (rangeController) {
      var thisCell = this.cellPosition;
      if (shiftKey) {
        rangeController.extendLatestRangeToCell(thisCell);
      } else {
        var ctrlKeyPressed = ctrlKey || metaKey;
        rangeController.setRangeToCell(thisCell, ctrlKeyPressed);
      }
    }
    eventService.dispatchEvent(this.createEvent(mouseEvent, Events.EVENT_CELL_MOUSE_DOWN));
  };
  CellComp.prototype.isRightClickInExistingRange = function (mouseEvent) {
    var rangeController = this.beans.rangeController;
    if (rangeController) {
      var cellInRange = rangeController.isCellInAnyRange(this.getCellPosition());
      if (cellInRange && mouseEvent.button === 2) {
        return true;
      }
    }
    return false;
  };
  CellComp.prototype.containsWidget = function (target) {
    return isElementChildOfClass(target, 'ag-selection-checkbox', 3);
  };
  // returns true if on iPad and this is second 'click' event in 200ms
  CellComp.prototype.isDoubleClickOnIPad = function () {
    if (!isIOSUserAgent() || isEventSupported('dblclick')) {
      return false;
    }
    var nowMillis = new Date().getTime();
    var res = nowMillis - this.lastIPadMouseClickEvent < 200;
    this.lastIPadMouseClickEvent = nowMillis;
    return res;
  };
  CellComp.prototype.onCellClicked = function (mouseEvent) {
    // iPad doesn't have double click - so we need to mimic it to enable editing for iPad.
    if (this.isDoubleClickOnIPad()) {
      this.onCellDoubleClicked(mouseEvent);
      mouseEvent.preventDefault(); // if we don't do this, then iPad zooms in
      return;
    }
    var _a = this.beans,
      eventService = _a.eventService,
      gridOptionsWrapper = _a.gridOptionsWrapper;
    var cellClickedEvent = this.createEvent(mouseEvent, Events.EVENT_CELL_CLICKED);
    eventService.dispatchEvent(cellClickedEvent);
    var colDef = this.getComponentHolder();
    if (colDef.onCellClicked) {
      // to make callback async, do in a timeout
      window.setTimeout(function () {
        return colDef.onCellClicked(cellClickedEvent);
      }, 0);
    }
    var editOnSingleClick = (gridOptionsWrapper.isSingleClickEdit() || colDef.singleClickEdit) && !gridOptionsWrapper.isSuppressClickEdit();
    if (editOnSingleClick) {
      this.startRowOrCellEdit();
    }
  };
  CellComp.prototype.createGridCellVo = function () {
    this.cellPosition = {
      rowIndex: this.rowNode.rowIndex,
      rowPinned: this.rowNode.rowPinned,
      column: this.column
    };
  };
  CellComp.prototype.getRowPosition = function () {
    return {
      rowIndex: this.cellPosition.rowIndex,
      rowPinned: this.cellPosition.rowPinned
    };
  };
  CellComp.prototype.getCellPosition = function () {
    return this.cellPosition;
  };
  CellComp.prototype.getParentRow = function () {
    return this.eRow;
  };
  CellComp.prototype.setParentRow = function (eParentRow) {
    this.eRow = eParentRow;
  };
  CellComp.prototype.getColumn = function () {
    return this.column;
  };
  CellComp.prototype.getComponentHolder = function () {
    return this.column.getColDef();
  };
  CellComp.prototype.detach = function () {
    this.eRow.removeChild(this.getGui());
  };
  // if the row is also getting destroyed, then we don't need to remove from dom,
  // as the row will also get removed, so no need to take out the cells from the row
  // if the row is going (removing is an expensive operation, so only need to remove
  // the top part)
  //
  // note - this is NOT called by context, as we don't wire / unwire the CellComp for performance reasons.
  CellComp.prototype.destroy = function () {
    if (this.createCellRendererFunc) {
      this.beans.taskQueue.cancelTask(this.createCellRendererFunc);
    }
    this.stopEditing();
    this.cellRenderer = this.beans.context.destroyBean(this.cellRenderer);
    this.beans.context.destroyBean(this.selectionHandle);
    _super.prototype.destroy.call(this);
  };
  CellComp.prototype.onLeftChanged = function () {
    var left = this.modifyLeftForPrintLayout(this.getCellLeft());
    this.getGui().style.left = left + 'px';
    this.refreshAriaIndex();
  };
  CellComp.prototype.modifyLeftForPrintLayout = function (leftPosition) {
    if (!this.printLayout || this.column.getPinned() === Constants.PINNED_LEFT) {
      return leftPosition;
    }
    var leftWidth = this.beans.columnController.getDisplayedColumnsLeftWidth();
    if (this.column.getPinned() === Constants.PINNED_RIGHT) {
      var bodyWidth = this.beans.columnController.getBodyContainerWidth();
      return leftWidth + bodyWidth + (leftPosition || 0);
    }
    // is in body
    return leftWidth + (leftPosition || 0);
  };
  CellComp.prototype.onWidthChanged = function () {
    var width = this.getCellWidth();
    this.getGui().style.width = width + "px";
  };
  CellComp.prototype.getRangeBorders = function () {
    var _this = this;
    var isRtl = this.beans.gridOptionsWrapper.isEnableRtl();
    var top = false;
    var right = false;
    var bottom = false;
    var left = false;
    var thisCol = this.cellPosition.column;
    var _a = this.beans,
      rangeController = _a.rangeController,
      columnController = _a.columnController;
    var leftCol;
    var rightCol;
    if (isRtl) {
      leftCol = columnController.getDisplayedColAfter(thisCol);
      rightCol = columnController.getDisplayedColBefore(thisCol);
    } else {
      leftCol = columnController.getDisplayedColBefore(thisCol);
      rightCol = columnController.getDisplayedColAfter(thisCol);
    }
    var ranges = rangeController.getCellRanges().filter(function (range) {
      return rangeController.isCellInSpecificRange(_this.cellPosition, range);
    });
    // this means we are the first column in the grid
    if (!leftCol) {
      left = true;
    }
    // this means we are the last column in the grid
    if (!rightCol) {
      right = true;
    }
    for (var i = 0; i < ranges.length; i++) {
      if (top && right && bottom && left) {
        break;
      }
      var range = ranges[i];
      var startRow = rangeController.getRangeStartRow(range);
      var endRow = rangeController.getRangeEndRow(range);
      if (!top && this.beans.rowPositionUtils.sameRow(startRow, this.cellPosition)) {
        top = true;
      }
      if (!bottom && this.beans.rowPositionUtils.sameRow(endRow, this.cellPosition)) {
        bottom = true;
      }
      if (!left && leftCol && range.columns.indexOf(leftCol) < 0) {
        left = true;
      }
      if (!right && rightCol && range.columns.indexOf(rightCol) < 0) {
        right = true;
      }
    }
    return {
      top: top,
      right: right,
      bottom: bottom,
      left: left
    };
  };
  CellComp.prototype.getInitialRangeClasses = function () {
    var classes = [];
    if (!this.rangeSelectionEnabled || !this.rangeCount) {
      return classes;
    }
    classes.push(CSS_RANGE_SELECTED);
    if (this.hasChartRange) {
      classes.push(CSS_RANGE_CHART);
    }
    var count = Math.min(this.rangeCount, 4);
    classes.push(CSS_RANGE_SELECTED + "-" + count);
    if (this.isSingleCell()) {
      classes.push(CSS_RANGE_SINGLE_CELL);
    }
    if (this.rangeCount > 0) {
      var borders = this.getRangeBorders();
      if (borders.top) {
        classes.push(CSS_RANGE_TOP);
      }
      if (borders.right) {
        classes.push(CSS_RANGE_RIGHT);
      }
      if (borders.bottom) {
        classes.push(CSS_RANGE_BOTTOM);
      }
      if (borders.left) {
        classes.push(CSS_RANGE_LEFT);
      }
    }
    if (!!this.selectionHandle) {
      classes.push(CSS_RANGE_HANDLE);
    }
    return classes;
  };
  CellComp.prototype.onRowIndexChanged = function () {
    // when index changes, this influences items that need the index, so we update the
    // grid cell so they are working off the new index.
    this.createGridCellVo();
    // when the index of the row changes, ie means the cell may have lost or gained focus
    this.onCellFocused();
    // check range selection
    this.onRangeSelectionChanged();
  };
  CellComp.prototype.onRangeSelectionChanged = function () {
    var rangeController = this.beans.rangeController;
    if (!rangeController) {
      return;
    }
    var _a = this,
      cellPosition = _a.cellPosition,
      rangeCount = _a.rangeCount;
    var newRangeCount = rangeController.getCellRangeCount(cellPosition);
    var element = this.getGui();
    if (rangeCount !== newRangeCount) {
      this.addOrRemoveCssClass(CSS_RANGE_SELECTED, newRangeCount !== 0);
      this.addOrRemoveCssClass(CSS_RANGE_SELECTED + "-1", newRangeCount === 1);
      this.addOrRemoveCssClass(CSS_RANGE_SELECTED + "-2", newRangeCount === 2);
      this.addOrRemoveCssClass(CSS_RANGE_SELECTED + "-3", newRangeCount === 3);
      this.addOrRemoveCssClass(CSS_RANGE_SELECTED + "-4", newRangeCount >= 4);
      this.rangeCount = newRangeCount;
    }
    setAriaSelected(element, this.rangeCount > 0);
    var hasChartRange = this.getHasChartRange();
    if (hasChartRange !== this.hasChartRange) {
      this.hasChartRange = hasChartRange;
      this.addOrRemoveCssClass(CSS_RANGE_CHART, this.hasChartRange);
    }
    this.updateRangeBorders();
    this.addOrRemoveCssClass(CSS_RANGE_SINGLE_CELL, this.isSingleCell());
    this.refreshHandle();
  };
  CellComp.prototype.getHasChartRange = function () {
    var rangeController = this.beans.rangeController;
    if (!this.rangeCount || !rangeController) {
      return false;
    }
    var cellRanges = rangeController.getCellRanges();
    return cellRanges.length > 0 && cellRanges.every(function (range) {
      return includes([exports.CellRangeType.DIMENSION, exports.CellRangeType.VALUE], range.type);
    });
  };
  CellComp.prototype.shouldHaveSelectionHandle = function () {
    var _a = this.beans,
      gridOptionsWrapper = _a.gridOptionsWrapper,
      rangeController = _a.rangeController;
    var cellRanges = rangeController.getCellRanges();
    var rangesLen = cellRanges.length;
    if (this.rangeCount < 1 || rangesLen < 1) {
      return false;
    }
    var cellRange = last(cellRanges);
    var cellPosition = this.getCellPosition();
    var fillHandleIsAvailable = rangesLen === 1 && (gridOptionsWrapper.isEnableFillHandle() || gridOptionsWrapper.isEnableRangeHandle()) && !this.editingCell;
    if (this.hasChartRange) {
      var hasCategoryRange = cellRanges[0].type === exports.CellRangeType.DIMENSION;
      var isCategoryCell = hasCategoryRange && rangeController.isCellInSpecificRange(cellPosition, cellRanges[0]);
      this.addOrRemoveCssClass(CSS_RANGE_CHART_CATEGORY, isCategoryCell);
      fillHandleIsAvailable = cellRange.type === exports.CellRangeType.VALUE;
    }
    return fillHandleIsAvailable && cellRange.endRow != null && rangeController.isContiguousRange(cellRange) && rangeController.isBottomRightCell(cellRange, cellPosition);
  };
  CellComp.prototype.addSelectionHandle = function () {
    var _a = this.beans,
      gridOptionsWrapper = _a.gridOptionsWrapper,
      rangeController = _a.rangeController;
    var cellRangeType = last(rangeController.getCellRanges()).type;
    var selectionHandleFill = gridOptionsWrapper.isEnableFillHandle() && missing(cellRangeType);
    var type = selectionHandleFill ? exports.SelectionHandleType.FILL : exports.SelectionHandleType.RANGE;
    if (this.selectionHandle && this.selectionHandle.getType() !== type) {
      this.selectionHandle = this.beans.context.destroyBean(this.selectionHandle);
    }
    if (!this.selectionHandle) {
      this.selectionHandle = this.beans.selectionHandleFactory.createSelectionHandle(type);
    }
    this.selectionHandle.refresh(this);
  };
  CellComp.prototype.updateRangeBordersIfRangeCount = function () {
    // we only need to update range borders if we are in a range
    if (this.rangeCount > 0) {
      this.updateRangeBorders();
      this.refreshHandle();
    }
  };
  CellComp.prototype.refreshHandle = function () {
    if (!this.beans.rangeController) {
      return;
    }
    var shouldHaveSelectionHandle = this.shouldHaveSelectionHandle();
    if (this.selectionHandle && !shouldHaveSelectionHandle) {
      this.selectionHandle = this.beans.context.destroyBean(this.selectionHandle);
    }
    if (shouldHaveSelectionHandle) {
      this.addSelectionHandle();
    }
    this.addOrRemoveCssClass(CSS_RANGE_HANDLE, !!this.selectionHandle);
  };
  CellComp.prototype.updateRangeBorders = function () {
    var rangeBorders = this.getRangeBorders();
    var isSingleCell = this.isSingleCell();
    var isTop = !isSingleCell && rangeBorders.top;
    var isRight = !isSingleCell && rangeBorders.right;
    var isBottom = !isSingleCell && rangeBorders.bottom;
    var isLeft = !isSingleCell && rangeBorders.left;
    this.addOrRemoveCssClass(CSS_RANGE_TOP, isTop);
    this.addOrRemoveCssClass(CSS_RANGE_RIGHT, isRight);
    this.addOrRemoveCssClass(CSS_RANGE_BOTTOM, isBottom);
    this.addOrRemoveCssClass(CSS_RANGE_LEFT, isLeft);
  };
  CellComp.prototype.onFirstRightPinnedChanged = function () {
    var firstRightPinned = this.column.isFirstRightPinned();
    if (this.firstRightPinned !== firstRightPinned) {
      this.firstRightPinned = firstRightPinned;
      this.addOrRemoveCssClass(CSS_FIRST_RIGHT_PINNED, firstRightPinned);
    }
  };
  CellComp.prototype.onLastLeftPinnedChanged = function () {
    var lastLeftPinned = this.column.isLastLeftPinned();
    if (this.lastLeftPinned !== lastLeftPinned) {
      this.lastLeftPinned = lastLeftPinned;
      this.addOrRemoveCssClass(CSS_LAST_LEFT_PINNED, lastLeftPinned);
    }
  };
  CellComp.prototype.refreshShouldDestroy = function () {
    var isUsingWrapper = this.usingWrapper;
    var isIncludingRowDragging = this.includeRowDraggingComponent;
    var isIncludingDndSource = this.includeDndSourceComponent;
    var isIncludingSelection = this.includeSelectionComponent;
    this.setUsingWrapper();
    return isUsingWrapper !== this.usingWrapper || isIncludingRowDragging !== this.includeRowDraggingComponent || isIncludingDndSource !== this.includeDndSourceComponent || isIncludingSelection !== this.includeSelectionComponent;
  };
  CellComp.prototype.populateTemplate = function () {
    if (this.usingWrapper) {
      this.eCellValue = this.getRefElement('eCellValue');
      this.eCellWrapper = this.getRefElement('eCellWrapper');
      this.eCellValue.id = "cell-" + this.getCompId();
      var describedByIds = '';
      if (this.includeRowDraggingComponent) {
        this.addRowDragging();
      }
      if (this.includeDndSourceComponent) {
        this.addDndSource();
      }
      if (this.includeSelectionComponent) {
        describedByIds += this.addSelectionCheckbox().getCheckboxId();
      }
      setAriaDescribedBy(this.getGui(), (describedByIds + " " + this.eCellValue.id).trim());
    } else {
      this.eCellValue = this.getGui();
      this.eCellWrapper = this.eCellValue;
    }
  };
  CellComp.prototype.getFrameworkOverrides = function () {
    return this.beans.frameworkOverrides;
  };
  CellComp.prototype.addRowDragging = function (customElement, dragStartPixels) {
    var _this = this;
    var pagination = this.beans.gridOptionsWrapper.isPagination();
    var rowDragManaged = this.beans.gridOptionsWrapper.isRowDragManaged();
    var clientSideRowModelActive = this.beans.gridOptionsWrapper.isRowModelDefault();
    if (rowDragManaged) {
      // row dragging only available in default row model
      if (!clientSideRowModelActive) {
        doOnce(function () {
          return console.warn('AG Grid: managed row dragging is only allowed in the Client Side Row Model');
        }, 'CellComp.addRowDragging');
        return;
      }
      if (pagination) {
        doOnce(function () {
          return console.warn('AG Grid: managed row dragging is not possible when doing pagination');
        }, 'CellComp.addRowDragging');
        return;
      }
    }
    if (!this.rowDraggingComp) {
      this.rowDraggingComp = new RowDragComp(function () {
        return _this.value;
      }, this.rowNode, this.column, customElement, dragStartPixels);
      this.createManagedBean(this.rowDraggingComp, this.beans.context);
    } else if (customElement) {
      // if the rowDraggingComp is already present, means we should only set the drag element
      this.rowDraggingComp.setDragElement(customElement, dragStartPixels);
    }
    // If there is a custom element, the Cell Renderer is responsible for displaying it.
    if (!customElement) {
      // put the checkbox in before the value
      this.eCellWrapper.insertBefore(this.rowDraggingComp.getGui(), this.eCellValue);
    }
  };
  CellComp.prototype.addDndSource = function () {
    var dndSourceComp = new DndSourceComp(this.rowNode, this.column, this.beans, this.getGui());
    this.createManagedBean(dndSourceComp, this.beans.context);
    // put the checkbox in before the value
    this.eCellWrapper.insertBefore(dndSourceComp.getGui(), this.eCellValue);
  };
  CellComp.prototype.addSelectionCheckbox = function () {
    var _this = this;
    var cbSelectionComponent = new CheckboxSelectionComponent();
    this.beans.context.createBean(cbSelectionComponent);
    var visibleFunc = this.getComponentHolder().checkboxSelection;
    if (typeof visibleFunc !== 'function') {
      visibleFunc = undefined;
    }
    cbSelectionComponent.init({
      rowNode: this.rowNode,
      column: this.column
    });
    this.addDestroyFunc(function () {
      return _this.beans.context.destroyBean(cbSelectionComponent);
    });
    // put the checkbox in before the value
    this.eCellWrapper.insertBefore(cbSelectionComponent.getGui(), this.eCellValue);
    return cbSelectionComponent;
  };
  CellComp.prototype.addDomData = function () {
    var _this = this;
    var element = this.getGui();
    this.beans.gridOptionsWrapper.setDomData(element, CellComp.DOM_DATA_KEY_CELL_COMP, this);
    this.addDestroyFunc(function () {
      return _this.beans.gridOptionsWrapper.setDomData(element, CellComp.DOM_DATA_KEY_CELL_COMP, null);
    });
  };
  CellComp.prototype.isSingleCell = function () {
    var rangeController = this.beans.rangeController;
    return this.rangeCount === 1 && rangeController && !rangeController.isMoreThanOneCell();
  };
  CellComp.prototype.onCellFocused = function (event) {
    var cellFocused = this.beans.focusController.isCellFocused(this.cellPosition);
    // see if we need to change the classes on this cell
    if (cellFocused !== this.cellFocused) {
      // if we are not doing cell selection, then the focus class does not change
      var doingFocusCss = !this.beans.gridOptionsWrapper.isSuppressCellSelection();
      if (doingFocusCss) {
        this.addOrRemoveCssClass(CSS_CELL_FOCUS, cellFocused);
      }
      this.cellFocused = cellFocused;
    }
    // see if we need to force browser focus - this can happen if focus is programmatically set
    if (cellFocused && event && event.forceBrowserFocus) {
      var focusEl = this.getFocusableElement();
      focusEl.focus();
      // Fix for AG-3465 "IE11 - After editing cell's content, selection doesn't go one cell below on enter"
      // IE can fail to focus the cell after the first call to focus(), and needs a second call
      if (!document.activeElement || document.activeElement === document.body) {
        focusEl.focus();
      }
    }
    // if another cell was focused, and we are editing, then stop editing
    var fullRowEdit = this.beans.gridOptionsWrapper.isFullRowEdit();
    if (!cellFocused && !fullRowEdit && this.editingCell) {
      this.stopRowOrCellEdit();
    }
  };
  // pass in 'true' to cancel the editing.
  CellComp.prototype.stopRowOrCellEdit = function (cancel) {
    if (cancel === void 0) {
      cancel = false;
    }
    if (this.beans.gridOptionsWrapper.isFullRowEdit()) {
      this.rowComp.stopRowEditing(cancel);
    } else {
      this.stopEditing(cancel);
    }
  };
  CellComp.prototype.stopEditing = function (cancel) {
    if (cancel === void 0) {
      cancel = false;
    }
    if (!this.editingCell) {
      return;
    }
    // if no cell editor, this means due to async, that the cell editor never got initialised,
    // so we just carry on regardless as if the editing was never started.
    if (!this.cellEditor) {
      this.editingCell = false;
      return;
    }
    var oldValue = this.getValue();
    var newValueExists = false;
    var newValue;
    if (!cancel) {
      // also have another option here to cancel after editing, so for example user could have a popup editor and
      // it is closed by user clicking outside the editor. then the editor will close automatically (with false
      // passed above) and we need to see if the editor wants to accept the new value.
      var userWantsToCancel = this.cellEditor.isCancelAfterEnd && this.cellEditor.isCancelAfterEnd();
      if (!userWantsToCancel) {
        newValue = this.cellEditor.getValue();
        newValueExists = true;
      }
    }
    // it is important we set this after setValue() above, as otherwise the cell will flash
    // when editing stops. the 'refresh' method checks editing, and doesn't refresh editing cells.
    // thus it will skip the refresh on this cell until the end of this method where we call
    // refresh directly and we suppress the flash.
    this.editingCell = false;
    // important to clear this out - as parts of the code will check for
    // this to see if an async cellEditor has yet to be created
    this.beans.context.destroyBean(this.cellEditor);
    this.cellEditor = null;
    if (this.cellEditorInPopup && this.hideEditorPopup) {
      this.hideEditorPopup();
      this.hideEditorPopup = null;
    } else {
      this.clearCellElement();
      var eGui = this.getGui();
      // put the cell back the way it was before editing
      if (this.usingWrapper) {
        // if wrapper, then put the wrapper back
        eGui.appendChild(this.eCellWrapper);
      } else if (this.cellRenderer) {
        // if cellRenderer, then put the gui back in. if the renderer has
        // a refresh, it will be called. however if it doesn't, then later
        // the renderer will be destroyed and a new one will be created.
        // we know it's a dom element (not a string) because we converted
        // it after the gui was attached if it was a string.
        var eCell = this.cellRendererGui;
        // can be null if cell was previously null / contained empty string,
        // this will result in new value not being rendered.
        if (eCell) {
          eGui.appendChild(eCell);
        }
      }
    }
    this.setInlineEditingClass();
    this.refreshHandle();
    if (newValueExists && newValue !== oldValue) {
      // we suppressRefreshCell because the call to rowNode.setDataValue() results in change detection
      // getting triggered, which results in all cells getting refreshed. we do not want this refresh
      // to happen on this call as we want to call it explicitly below. otherwise refresh gets called twice.
      // if we only did this refresh (and not the one below) then the cell would flash and not be forced.
      this.suppressRefreshCell = true;
      this.rowNode.setDataValue(this.column, newValue);
      this.suppressRefreshCell = false;
    }
    // we suppress the flash, as it is not correct to flash the cell the user has finished editing,
    // the user doesn't need to flash as they were the one who did the edit, the flash is pointless
    // (as the flash is meant to draw the user to a change that they didn't manually do themselves).
    this.refreshCell({
      forceRefresh: true,
      suppressFlash: true
    });
    var editingStoppedEvent = __assign$4(__assign$4({}, this.createEvent(null, Events.EVENT_CELL_EDITING_STOPPED)), {
      oldValue: oldValue,
      newValue: newValue
    });
    this.beans.eventService.dispatchEvent(editingStoppedEvent);
  };
  CellComp.prototype.clearCellElement = function () {
    var eGui = this.getGui();
    // if focus is inside the cell, we move focus to the cell itself
    // before removing it's contents, otherwise errors could be thrown.
    if (eGui.contains(document.activeElement) && !isBrowserIE()) {
      eGui.focus({
        preventScroll: true
      });
    }
    clearElement(eGui);
  };
  CellComp.DOM_DATA_KEY_CELL_COMP = 'cellComp';
  CellComp.CELL_RENDERER_TYPE_NORMAL = 'cellRenderer';
  CellComp.CELL_RENDERER_TYPE_PINNED = 'pinnedRowCellRenderer';
  return CellComp;
}(Component);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$J =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$5 =  false || function () {
  __assign$5 = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$5.apply(this, arguments);
};
var __decorate$D =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param$5 =  false || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};
var __spreadArrays$4 =  false || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
};
var RowRenderer = /** @class */function (_super) {
  __extends$J(RowRenderer, _super);
  function RowRenderer() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.destroyFuncsForColumnListeners = [];
    // map of row ids to row objects. keeps track of which elements
    // are rendered for which rows in the dom.
    _this.rowConsByRowIndex = {};
    _this.zombieRowCons = {};
    _this.allRowCons = [];
    _this.topRowCons = [];
    _this.bottomRowCons = [];
    // we only allow one refresh at a time, otherwise the internal memory structure here
    // will get messed up. this can happen if the user has a cellRenderer, and inside the
    // renderer they call an API method that results in another pass of the refresh,
    // then it will be trying to draw rows in the middle of a refresh.
    _this.refreshInProgress = false;
    return _this;
  }
  RowRenderer.prototype.agWire = function (loggerFactory) {
    this.logger = loggerFactory.create("RowRenderer");
  };
  RowRenderer.prototype.postConstruct = function () {
    var _this = this;
    this.controllersService.whenReady(function () {
      _this.gridBodyCon = _this.controllersService.getGridBodyController();
      _this.initialise();
    });
  };
  RowRenderer.prototype.initialise = function () {
    this.addManagedListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, this.onPageLoaded.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_PINNED_ROW_DATA_CHANGED, this.onPinnedRowDataChanged.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, this.redrawAfterScroll.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, this.redrawAfterScroll.bind(this));
    this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, this.onDomLayoutChanged.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));
    this.registerCellEventListeners();
    this.printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
    this.embedFullWidthRows = this.printLayout || this.gridOptionsWrapper.isEmbedFullWidthRows();
    this.redrawAfterModelUpdate();
  };
  RowRenderer.prototype.getRowCons = function () {
    return this.allRowCons;
  };
  RowRenderer.prototype.updateAllRowCons = function () {
    this.allRowCons = __spreadArrays$4(getAllValuesInObject(this.rowConsByRowIndex), getAllValuesInObject(this.zombieRowCons));
  };
  // in a clean design, each cell would register for each of these events. however when scrolling, all the cells
  // registering and de-registering for events is a performance bottleneck. so we register here once and inform
  // all active cells.
  RowRenderer.prototype.registerCellEventListeners = function () {
    var _this = this;
    this.addManagedListener(this.eventService, Events.EVENT_CELL_FOCUSED, function (event) {
      _this.forEachCellComp(function (cellComp) {
        return cellComp.onCellFocused(event);
      });
      _this.forEachRowComp(function (key, rowComp) {
        if (rowComp.isFullWidth()) {
          rowComp.onFullWidthRowFocused(event);
        }
      });
    });
    this.addManagedListener(this.eventService, Events.EVENT_FLASH_CELLS, function (event) {
      _this.forEachCellComp(function (cellComp) {
        return cellComp.onFlashCells(event);
      });
    });
    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HOVER_CHANGED, function () {
      _this.forEachCellComp(function (cellComp) {
        return cellComp.onColumnHover();
      });
    });
    // only for printLayout - because we are rendering all the cells in the same row, regardless of pinned state,
    // then changing the width of the containers will impact left position. eg the center cols all have their
    // left position adjusted by the width of the left pinned column, so if the pinned left column width changes,
    // all the center cols need to be shifted to accommodate this. when in normal layout, the pinned cols are
    // in different containers so doesn't impact.
    this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, function () {
      if (_this.printLayout) {
        _this.forEachCellComp(function (cellComp) {
          return cellComp.onLeftChanged();
        });
      }
    });
    var rangeSelectionEnabled = this.gridOptionsWrapper.isEnableRangeSelection();
    if (rangeSelectionEnabled) {
      this.addManagedListener(this.eventService, Events.EVENT_RANGE_SELECTION_CHANGED, function () {
        _this.forEachCellComp(function (cellComp) {
          return cellComp.onRangeSelectionChanged();
        });
      });
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, function () {
        _this.forEachCellComp(function (cellComp) {
          return cellComp.updateRangeBordersIfRangeCount();
        });
      });
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, function () {
        _this.forEachCellComp(function (cellComp) {
          return cellComp.updateRangeBordersIfRangeCount();
        });
      });
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, function () {
        _this.forEachCellComp(function (cellComp) {
          return cellComp.updateRangeBordersIfRangeCount();
        });
      });
    }
    // add listeners to the grid columns
    this.refreshListenersToColumnsForCellComps();
    // if the grid columns change, then refresh the listeners again
    this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.refreshListenersToColumnsForCellComps.bind(this));
    this.addDestroyFunc(this.removeGridColumnListeners.bind(this));
  };
  // executes all functions in destroyFuncsForColumnListeners and then clears the list
  RowRenderer.prototype.removeGridColumnListeners = function () {
    this.destroyFuncsForColumnListeners.forEach(function (func) {
      return func();
    });
    this.destroyFuncsForColumnListeners.length = 0;
  };
  // this function adds listeners onto all the grid columns, which are the column that we could have cellComps for.
  // when the grid columns change, we add listeners again. in an ideal design, each CellComp would just register to
  // the column it belongs to on creation, however this was a bottleneck with the number of cells, so do it here
  // once instead.
  RowRenderer.prototype.refreshListenersToColumnsForCellComps = function () {
    var _this = this;
    this.removeGridColumnListeners();
    var cols = this.columnController.getAllGridColumns();
    if (!cols) {
      return;
    }
    cols.forEach(function (col) {
      var forEachCellWithThisCol = function (callback) {
        _this.forEachCellComp(function (cellComp) {
          if (cellComp.getColumn() === col) {
            callback(cellComp);
          }
        });
      };
      var leftChangedListener = function () {
        forEachCellWithThisCol(function (cellComp) {
          return cellComp.onLeftChanged();
        });
      };
      var widthChangedListener = function () {
        forEachCellWithThisCol(function (cellComp) {
          return cellComp.onWidthChanged();
        });
      };
      var firstRightPinnedChangedListener = function () {
        forEachCellWithThisCol(function (cellComp) {
          return cellComp.onFirstRightPinnedChanged();
        });
      };
      var lastLeftPinnedChangedListener = function () {
        forEachCellWithThisCol(function (cellComp) {
          return cellComp.onLastLeftPinnedChanged();
        });
      };
      col.addEventListener(Column.EVENT_LEFT_CHANGED, leftChangedListener);
      col.addEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);
      col.addEventListener(Column.EVENT_FIRST_RIGHT_PINNED_CHANGED, firstRightPinnedChangedListener);
      col.addEventListener(Column.EVENT_LAST_LEFT_PINNED_CHANGED, lastLeftPinnedChangedListener);
      _this.destroyFuncsForColumnListeners.push(function () {
        col.removeEventListener(Column.EVENT_LEFT_CHANGED, leftChangedListener);
        col.removeEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);
        col.removeEventListener(Column.EVENT_FIRST_RIGHT_PINNED_CHANGED, firstRightPinnedChangedListener);
        col.removeEventListener(Column.EVENT_LAST_LEFT_PINNED_CHANGED, lastLeftPinnedChangedListener);
      });
    });
  };
  RowRenderer.prototype.onDomLayoutChanged = function () {
    var printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
    var embedFullWidthRows = printLayout || this.gridOptionsWrapper.isEmbedFullWidthRows();
    // if moving towards or away from print layout, means we need to destroy all rows, as rows are not laid
    // out using absolute positioning when doing print layout
    var destroyRows = embedFullWidthRows !== this.embedFullWidthRows || this.printLayout !== printLayout;
    this.printLayout = printLayout;
    this.embedFullWidthRows = embedFullWidthRows;
    if (destroyRows) {
      this.redrawAfterModelUpdate();
    }
  };
  // for row models that have datasources, when we update the datasource, we need to force the rowRenderer
  // to redraw all rows. otherwise the old rows from the old datasource will stay displayed.
  RowRenderer.prototype.datasourceChanged = function () {
    this.firstRenderedRow = 0;
    this.lastRenderedRow = -1;
    var rowIndexesToRemove = Object.keys(this.rowConsByRowIndex);
    this.removeRowComps(rowIndexesToRemove);
  };
  RowRenderer.prototype.onPageLoaded = function (event) {
    var params = {
      recycleRows: event.keepRenderedRows,
      animate: event.animate,
      newData: event.newData,
      newPage: event.newPage,
      // because this is a model updated event (not pinned rows), we
      // can skip updating the pinned rows. this is needed so that if user
      // is doing transaction updates, the pinned rows are not getting constantly
      // trashed - or editing cells in pinned rows are not refreshed and put into read mode
      onlyBody: true
    };
    this.redrawAfterModelUpdate(params);
  };
  RowRenderer.prototype.getAllCellsForColumn = function (column) {
    var eCells = [];
    function callback(key, rowComp) {
      var eCell = rowComp.getCellForCol(column);
      if (eCell) {
        eCells.push(eCell);
      }
    }
    iterateObject(this.rowConsByRowIndex, callback);
    iterateObject(this.bottomRowCons, callback);
    iterateObject(this.topRowCons, callback);
    return eCells;
  };
  RowRenderer.prototype.refreshFloatingRowComps = function () {
    this.refreshFloatingRows(this.topRowCons, this.pinnedRowModel.getPinnedTopRowData());
    this.refreshFloatingRows(this.bottomRowCons, this.pinnedRowModel.getPinnedBottomRowData());
  };
  RowRenderer.prototype.getTopRowCons = function () {
    return this.topRowCons;
  };
  RowRenderer.prototype.getBottomRowCons = function () {
    return this.bottomRowCons;
  };
  RowRenderer.prototype.refreshFloatingRows = function (rowComps, rowNodes) {
    var _this = this;
    rowComps.forEach(function (row) {
      row.destroyFirstPass();
      row.destroySecondPass();
    });
    rowComps.length = 0;
    if (!rowNodes) {
      return;
    }
    rowNodes.forEach(function (rowNode) {
      var rowCon = new RowController(_this.$scope, rowNode, _this.beans, false, false, _this.printLayout);
      rowComps.push(rowCon);
    });
  };
  RowRenderer.prototype.onPinnedRowDataChanged = function () {
    // recycling rows in order to ensure cell editing is not cancelled
    var params = {
      recycleRows: true
    };
    this.redrawAfterModelUpdate(params);
  };
  // if the row nodes are not rendered, no index is returned
  RowRenderer.prototype.getRenderedIndexesForRowNodes = function (rowNodes) {
    var result = [];
    if (missing(rowNodes)) {
      return result;
    }
    iterateObject(this.rowConsByRowIndex, function (index, renderedRow) {
      var rowNode = renderedRow.getRowNode();
      if (rowNodes.indexOf(rowNode) >= 0) {
        result.push(index);
      }
    });
    return result;
  };
  RowRenderer.prototype.redrawRows = function (rowNodes) {
    // if no row nodes provided, then refresh everything
    var partialRefresh = rowNodes != null && rowNodes.length > 0;
    if (partialRefresh) {
      var indexesToRemove = this.getRenderedIndexesForRowNodes(rowNodes);
      // remove the rows
      this.removeRowComps(indexesToRemove);
    }
    // add draw them again
    this.redrawAfterModelUpdate({
      recycleRows: partialRefresh
    });
  };
  RowRenderer.prototype.getCellToRestoreFocusToAfterRefresh = function (params) {
    var focusedCell = params.suppressKeepFocus ? null : this.focusController.getFocusCellToUseAfterRefresh();
    if (missing(focusedCell)) {
      return null;
    }
    // if the dom is not actually focused on a cell, then we don't try to refocus. the problem this
    // solves is with editing - if the user is editing, eg focus is on a text field, and not on the
    // cell itself, then the cell can be registered as having focus, however it's the text field that
    // has the focus and not the cell div. therefore, when the refresh is finished, the grid will focus
    // the cell, and not the textfield. that means if the user is in a text field, and the grid refreshes,
    // the focus is lost from the text field. we do not want this.
    var activeElement = document.activeElement;
    var domData = this.gridOptionsWrapper.getDomData(activeElement, CellComp.DOM_DATA_KEY_CELL_COMP);
    var elementIsNotACellDev = missing(domData);
    return elementIsNotACellDev ? null : focusedCell;
  };
  // gets called from:
  // +) initialisation (in registerGridComp) params = null
  // +) onDomLayoutChanged, params = null
  // +) onPageLoaded, recycleRows, animate, newData, newPage from event, onlyBody=true
  // +) onPinnedRowDataChanged, recycleRows = true
  // +) redrawRows (from Grid API), recycleRows = true/false
  RowRenderer.prototype.redrawAfterModelUpdate = function (params) {
    if (params === void 0) {
      params = {};
    }
    this.getLockOnRefresh();
    var focusedCell = this.getCellToRestoreFocusToAfterRefresh(params);
    this.updateContainerHeights();
    this.scrollToTopIfNewData(params);
    // never recycle rows when print layout, we draw each row again from scratch. this is because print layout
    // uses normal dom layout to put cells into dom - it doesn't allow reordering rows.
    var recycleRows = !this.printLayout && !!params.recycleRows;
    var animate = params.animate && this.gridOptionsWrapper.isAnimateRows();
    // after modelUpdate, row indexes can change, so we clear out the rowsByIndex map,
    // however we can reuse the rows, so we keep them but index by rowNode.id
    var rowsToRecycle = recycleRows ? this.recycleRows() : null;
    if (!recycleRows) {
      this.removeAllRowComps();
    }
    var isFocusedCellGettingRecycled = function () {
      if (focusedCell == null || rowsToRecycle == null) {
        return false;
      }
      var res = false;
      iterateObject(rowsToRecycle, function (key, rowComp) {
        var rowNode = rowComp.getRowNode();
        var rowIndexEqual = rowNode.rowIndex == focusedCell.rowIndex;
        var pinnedEqual = rowNode.rowPinned == focusedCell.rowPinned;
        if (rowIndexEqual && pinnedEqual) {
          res = true;
        }
      });
      return res;
    };
    var focusedCellRecycled = isFocusedCellGettingRecycled();
    this.redraw(rowsToRecycle, animate);
    if (!params.onlyBody) {
      this.refreshFloatingRowComps();
    }
    this.dispatchDisplayedRowsChanged();
    // if we focus a cell that's already focused, then we get an unnecessary 'cellFocused' event fired.
    // this was happening when user clicked 'expand' on a rowGroup, then cellFocused was getting fired twice.
    if (!focusedCellRecycled) {
      this.restoreFocusedCell(focusedCell);
    }
    this.releaseLockOnRefresh();
  };
  RowRenderer.prototype.scrollToTopIfNewData = function (params) {
    var scrollToTop = params.newData || params.newPage;
    var suppressScrollToTop = this.gridOptionsWrapper.isSuppressScrollOnNewData();
    if (scrollToTop && !suppressScrollToTop) {
      this.gridBodyCon.getScrollFeature().scrollToTop();
    }
  };
  RowRenderer.prototype.updateContainerHeights = function () {
    // when doing print layout, we don't explicitly set height on the containers
    if (this.printLayout) {
      this.rowContainerHeightService.setModelHeight(null);
      return;
    }
    var containerHeight = this.paginationProxy.getCurrentPageHeight();
    // we need at least 1 pixel for the horizontal scroll to work. so if there are now rows,
    // we still want the scroll to be present, otherwise there would be no way to scroll the header
    // which might be needed us user wants to access columns
    // on the RHS - and if that was where the filter was that cause no rows to be presented, there
    // is no way to remove the filter.
    if (containerHeight === 0) {
      containerHeight = 1;
    }
    this.rowContainerHeightService.setModelHeight(containerHeight);
  };
  RowRenderer.prototype.getLockOnRefresh = function () {
    if (this.refreshInProgress) {
      throw new Error("AG Grid: cannot get grid to draw rows when it is in the middle of drawing rows. " + "Your code probably called a grid API method while the grid was in the render stage. To overcome " + "this, put the API call into a timeout, e.g. instead of api.refreshView(), " + "call setTimeout(function() { api.refreshView(); }, 0). To see what part of your code " + "that caused the refresh check this stacktrace.");
    }
    this.refreshInProgress = true;
  };
  RowRenderer.prototype.releaseLockOnRefresh = function () {
    this.refreshInProgress = false;
  };
  // sets the focus to the provided cell, if the cell is provided. this way, the user can call refresh without
  // worry about the focus been lost. this is important when the user is using keyboard navigation to do edits
  // and the cellEditor is calling 'refresh' to get other cells to update (as other cells might depend on the
  // edited cell).
  RowRenderer.prototype.restoreFocusedCell = function (cellPosition) {
    if (cellPosition) {
      this.focusController.setFocusedCell(cellPosition.rowIndex, cellPosition.column, cellPosition.rowPinned, true);
    }
  };
  RowRenderer.prototype.stopEditing = function (cancel) {
    if (cancel === void 0) {
      cancel = false;
    }
    this.forEachRowComp(function (key, rowComp) {
      rowComp.stopEditing(cancel);
    });
  };
  RowRenderer.prototype.onNewColumnsLoaded = function () {
    // we don't want each cellComp to register for events, as would increase rendering time.
    // so for newColumnsLoaded, we register once here (in rowRenderer) and then inform
    // each cell if / when event was fired.
    this.forEachCellComp(function (cellComp) {
      return cellComp.onNewColumnsLoaded();
    });
  };
  RowRenderer.prototype.forEachCellComp = function (callback) {
    this.forEachRowComp(function (key, rowComp) {
      return rowComp.forEachCellComp(callback);
    });
  };
  RowRenderer.prototype.forEachRowComp = function (callback) {
    iterateObject(this.rowConsByRowIndex, callback);
    iterateObject(this.topRowCons, callback);
    iterateObject(this.bottomRowCons, callback);
  };
  RowRenderer.prototype.addRenderedRowListener = function (eventName, rowIndex, callback) {
    var rowComp = this.rowConsByRowIndex[rowIndex];
    if (rowComp) {
      rowComp.addEventListener(eventName, callback);
    }
  };
  RowRenderer.prototype.flashCells = function (params) {
    if (params === void 0) {
      params = {};
    }
    var flashDelay = params.flashDelay,
      fadeDelay = params.fadeDelay;
    this.forEachCellCompFiltered(params.rowNodes, params.columns, function (cellComp) {
      return cellComp.flashCell({
        flashDelay: flashDelay,
        fadeDelay: fadeDelay
      });
    });
  };
  RowRenderer.prototype.refreshCells = function (params) {
    if (params === void 0) {
      params = {};
    }
    var refreshCellParams = {
      forceRefresh: params.force,
      newData: false,
      suppressFlash: params.suppressFlash
    };
    this.forEachCellCompFiltered(params.rowNodes, params.columns, function (cellComp) {
      if (cellComp.refreshShouldDestroy()) {
        var rowComp = cellComp.getRenderedRow();
        if (rowComp) {
          rowComp.refreshCell(cellComp);
        }
      } else {
        cellComp.refreshCell(refreshCellParams);
      }
    });
  };
  RowRenderer.prototype.getCellRendererInstances = function (params) {
    var res = [];
    this.forEachCellCompFiltered(params.rowNodes, params.columns, function (cellComp) {
      var cellRenderer = cellComp.getCellRenderer();
      if (cellRenderer) {
        res.push(cellRenderer);
      }
    });
    return res;
  };
  RowRenderer.prototype.getCellEditorInstances = function (params) {
    var res = [];
    this.forEachCellCompFiltered(params.rowNodes, params.columns, function (cellComp) {
      var cellEditor = cellComp.getCellEditor();
      if (cellEditor) {
        res.push(cellEditor);
      }
    });
    return res;
  };
  RowRenderer.prototype.getEditingCells = function () {
    var res = [];
    this.forEachCellComp(function (cellComp) {
      if (cellComp.isEditing()) {
        var cellPosition = cellComp.getCellPosition();
        res.push(cellPosition);
      }
    });
    return res;
  };
  // calls the callback for each cellComp that match the provided rowNodes and columns. eg if one row node
  // and two columns provided, that identifies 4 cells, so callback gets called 4 times, once for each cell.
  RowRenderer.prototype.forEachCellCompFiltered = function (rowNodes, columns, callback) {
    var _this = this;
    var rowIdsMap;
    if (exists(rowNodes)) {
      rowIdsMap = {
        top: {},
        bottom: {},
        normal: {}
      };
      rowNodes.forEach(function (rowNode) {
        var id = rowNode.id;
        if (rowNode.rowPinned === Constants.PINNED_TOP) {
          rowIdsMap.top[id] = true;
        } else if (rowNode.rowPinned === Constants.PINNED_BOTTOM) {
          rowIdsMap.bottom[id] = true;
        } else {
          rowIdsMap.normal[id] = true;
        }
      });
    }
    var colIdsMap;
    if (exists(columns)) {
      colIdsMap = {};
      columns.forEach(function (colKey) {
        var column = _this.columnController.getGridColumn(colKey);
        if (exists(column)) {
          colIdsMap[column.getId()] = true;
        }
      });
    }
    var processRow = function (rowComp) {
      var rowNode = rowComp.getRowNode();
      var id = rowNode.id;
      var floating = rowNode.rowPinned;
      // skip this row if it is missing from the provided list
      if (exists(rowIdsMap)) {
        if (floating === Constants.PINNED_BOTTOM) {
          if (!rowIdsMap.bottom[id]) {
            return;
          }
        } else if (floating === Constants.PINNED_TOP) {
          if (!rowIdsMap.top[id]) {
            return;
          }
        } else {
          if (!rowIdsMap.normal[id]) {
            return;
          }
        }
      }
      rowComp.forEachCellComp(function (cellComp) {
        var colId = cellComp.getColumn().getId();
        var excludeColFromRefresh = colIdsMap && !colIdsMap[colId];
        if (excludeColFromRefresh) {
          return;
        }
        if (callback) {
          callback(cellComp);
        }
      });
    };
    iterateObject(this.rowConsByRowIndex, function (index, rowComp) {
      processRow(rowComp);
    });
    if (this.topRowCons) {
      this.topRowCons.forEach(processRow);
    }
    if (this.bottomRowCons) {
      this.bottomRowCons.forEach(processRow);
    }
  };
  RowRenderer.prototype.destroy = function () {
    this.removeAllRowComps();
    _super.prototype.destroy.call(this);
  };
  RowRenderer.prototype.removeAllRowComps = function () {
    var rowIndexesToRemove = Object.keys(this.rowConsByRowIndex);
    this.removeRowComps(rowIndexesToRemove);
  };
  RowRenderer.prototype.recycleRows = function () {
    // remove all stub nodes, they can't be reused, as no rowNode id
    var stubNodeIndexes = [];
    iterateObject(this.rowConsByRowIndex, function (index, rowComp) {
      var stubNode = rowComp.getRowNode().id == null;
      if (stubNode) {
        stubNodeIndexes.push(index);
      }
    });
    this.removeRowComps(stubNodeIndexes);
    // then clear out rowCompsByIndex, but before that take a copy, but index by id, not rowIndex
    var nodesByIdMap = {};
    iterateObject(this.rowConsByRowIndex, function (index, rowComp) {
      var rowNode = rowComp.getRowNode();
      nodesByIdMap[rowNode.id] = rowComp;
    });
    this.rowConsByRowIndex = {};
    return nodesByIdMap;
  };
  // takes array of row indexes
  RowRenderer.prototype.removeRowComps = function (rowsToRemove) {
    var _this = this;
    // if no fromIndex then set to -1, which will refresh everything
    // let realFromIndex = -1;
    rowsToRemove.forEach(function (indexToRemove) {
      var rowComp = _this.rowConsByRowIndex[indexToRemove];
      if (rowComp) {
        rowComp.destroyFirstPass();
        rowComp.destroySecondPass();
      }
      delete _this.rowConsByRowIndex[indexToRemove];
    });
  };
  // gets called when rows don't change, but viewport does, so after:
  // 1) height of grid body changes, ie number of displayed rows has changed
  // 2) grid scrolled to new position
  // 3) ensure index visible (which is a scroll)
  RowRenderer.prototype.redrawAfterScroll = function () {
    this.getLockOnRefresh();
    this.redraw(null, false, true);
    this.releaseLockOnRefresh();
    this.dispatchDisplayedRowsChanged();
  };
  RowRenderer.prototype.removeRowCompsNotToDraw = function (indexesToDraw) {
    // for speedy lookup, dump into map
    var indexesToDrawMap = {};
    indexesToDraw.forEach(function (index) {
      return indexesToDrawMap[index] = true;
    });
    var existingIndexes = Object.keys(this.rowConsByRowIndex);
    var indexesNotToDraw = existingIndexes.filter(function (index) {
      return !indexesToDrawMap[index];
    });
    this.removeRowComps(indexesNotToDraw);
  };
  RowRenderer.prototype.calculateIndexesToDraw = function (rowsToRecycle) {
    var _this = this;
    // all in all indexes in the viewport
    var indexesToDraw = createArrayOfNumbers(this.firstRenderedRow, this.lastRenderedRow);
    var checkRowToDraw = function (indexStr, rowComp) {
      var index = rowComp.getRowNode().rowIndex;
      if (index == null) {
        return;
      }
      if (index < _this.firstRenderedRow || index > _this.lastRenderedRow) {
        if (_this.doNotUnVirtualiseRow(rowComp)) {
          indexesToDraw.push(index);
        }
      }
    };
    // if we are redrawing due to scrolling change, then old rows are in this.rowCompsByIndex
    iterateObject(this.rowConsByRowIndex, checkRowToDraw);
    // if we are redrawing due to model update, then old rows are in rowsToRecycle
    iterateObject(rowsToRecycle, checkRowToDraw);
    indexesToDraw.sort(function (a, b) {
      return a - b;
    });
    return indexesToDraw;
  };
  RowRenderer.prototype.redraw = function (rowsToRecycle, animate, afterScroll) {
    var _this = this;
    if (animate === void 0) {
      animate = false;
    }
    if (afterScroll === void 0) {
      afterScroll = false;
    }
    this.rowContainerHeightService.updateOffset();
    this.workOutFirstAndLastRowsToRender();
    // the row can already exist and be in the following:
    // rowsToRecycle -> if model change, then the index may be different, however row may
    //                         exist here from previous time (mapped by id).
    // this.rowCompsByIndex -> if just a scroll, then this will contain what is currently in the viewport
    // this is all the indexes we want, including those that already exist, so this method
    // will end up going through each index and drawing only if the row doesn't already exist
    var indexesToDraw = this.calculateIndexesToDraw(rowsToRecycle);
    this.removeRowCompsNotToDraw(indexesToDraw);
    // never animate when doing print layout - as we want to get things ready to print as quickly as possible,
    // otherwise we risk the printer printing a row that's half faded (half way through fading in)
    if (this.printLayout) {
      animate = false;
    }
    indexesToDraw.forEach(function (rowIndex) {
      var rowComp = _this.createOrUpdateRowCon(rowIndex, rowsToRecycle, animate, afterScroll);
      if (exists(rowComp)) ;
    });
    if (rowsToRecycle) {
      var useAnimationFrame = afterScroll && !this.gridOptionsWrapper.isSuppressAnimationFrame() && !this.printLayout;
      if (useAnimationFrame) {
        this.beans.taskQueue.addDestroyTask(function () {
          _this.destroyRowCons(rowsToRecycle, animate);
          _this.updateAllRowCons();
          _this.dispatchDisplayedRowsChanged();
        });
      } else {
        this.destroyRowCons(rowsToRecycle, animate);
      }
    }
    this.updateAllRowCons();
    this.checkAngularCompile();
    this.gridBodyCon.updateRowCount();
  };
  RowRenderer.prototype.dispatchDisplayedRowsChanged = function () {
    var event = {
      type: Events.EVENT_DISPLAYED_ROWS_CHANGED
    };
    this.eventService.dispatchEvent(event);
  };
  RowRenderer.prototype.onDisplayedColumnsChanged = function () {
    var pinningLeft = this.columnController.isPinningLeft();
    var pinningRight = this.columnController.isPinningRight();
    var atLeastOneChanged = this.pinningLeft !== pinningLeft || pinningRight !== this.pinningRight;
    if (atLeastOneChanged) {
      this.pinningLeft = pinningLeft;
      this.pinningRight = pinningRight;
      if (this.embedFullWidthRows) {
        this.redrawFullWidthEmbeddedRows();
      }
    }
  };
  // when embedding, what gets showed in each section depends on what is pinned. eg if embedding group expand / collapse,
  // then it should go into the pinned left area if pinning left, or the center area if not pinning.
  RowRenderer.prototype.redrawFullWidthEmbeddedRows = function () {
    // if either of the pinned panels has shown / hidden, then need to redraw the fullWidth bits when
    // embedded, as what appears in each section depends on whether we are pinned or not
    var rowsToRemove = [];
    iterateObject(this.rowConsByRowIndex, function (id, rowComp) {
      if (rowComp.isFullWidth()) {
        var rowIndex = rowComp.getRowNode().rowIndex;
        rowsToRemove.push(rowIndex.toString());
      }
    });
    this.refreshFloatingRowComps();
    this.removeRowComps(rowsToRemove);
    this.redrawAfterScroll();
  };
  RowRenderer.prototype.refreshFullWidthRows = function (rowNodesToRefresh) {
    var rowsToRemove = [];
    var selectivelyRefreshing = !!rowNodesToRefresh;
    var idsToRefresh = selectivelyRefreshing ? {} : undefined;
    if (selectivelyRefreshing && idsToRefresh) {
      rowNodesToRefresh.forEach(function (r) {
        return idsToRefresh[r.id] = true;
      });
    }
    iterateObject(this.rowConsByRowIndex, function (id, rowComp) {
      if (!rowComp.isFullWidth()) {
        return;
      }
      var rowNode = rowComp.getRowNode();
      if (selectivelyRefreshing && idsToRefresh) {
        // we refresh if a) this node is present or b) this parents nodes is present. checking parent
        // node is important for master/detail, as we want detail to refresh on changes to parent node.
        // it's also possible, if user is provider their own fullWidth, that details panels contain
        // some info on the parent, eg if in tree data and child row shows some data from parent row also.
        var parentId = rowNode.level > 0 && rowNode.parent ? rowNode.parent.id : undefined;
        var skipThisNode = !idsToRefresh[rowNode.id] && !idsToRefresh[parentId];
        if (skipThisNode) {
          return;
        }
      }
      var fullWidthRowsRefreshed = rowComp.refreshFullWidth();
      if (!fullWidthRowsRefreshed) {
        var rowIndex = rowComp.getRowNode().rowIndex;
        rowsToRemove.push(rowIndex.toString());
      }
    });
    this.removeRowComps(rowsToRemove);
    this.redrawAfterScroll();
  };
  RowRenderer.prototype.createOrUpdateRowCon = function (rowIndex, rowsToRecycle, animate, afterScroll) {
    var rowNode = null;
    var rowCon = this.rowConsByRowIndex[rowIndex];
    // if no row comp, see if we can get it from the previous rowComps
    if (!rowCon) {
      rowNode = this.paginationProxy.getRow(rowIndex);
      if (exists(rowNode) && exists(rowsToRecycle) && rowsToRecycle[rowNode.id] && rowNode.alreadyRendered) {
        rowCon = rowsToRecycle[rowNode.id];
        rowsToRecycle[rowNode.id] = null;
      }
    }
    var creatingNewRowCon = !rowCon;
    if (creatingNewRowCon) {
      // create a new one
      if (!rowNode) {
        rowNode = this.paginationProxy.getRow(rowIndex);
      }
      if (exists(rowNode)) {
        rowCon = this.createRowCon(rowNode, animate, afterScroll);
      } else {
        // this should never happen - if somehow we are trying to create
        // a row for a rowNode that does not exist.
        return;
      }
    }
    if (rowNode) {
      // set node as 'alreadyRendered' to ensure we only recycle rowComps that have been rendered, this ensures
      // we don't reuse rowComps that have been removed and then re-added in the same batch transaction.
      rowNode.alreadyRendered = true;
    }
    this.rowConsByRowIndex[rowIndex] = rowCon;
    return rowCon;
  };
  RowRenderer.prototype.destroyRowCons = function (rowConsMap, animate) {
    var _this = this;
    var executeInAWhileFuncs = [];
    iterateObject(rowConsMap, function (nodeId, rowCon) {
      // if row was used, then it's null
      if (!rowCon) {
        return;
      }
      rowCon.destroyFirstPass();
      if (animate) {
        _this.zombieRowCons[rowCon.getInstanceId()] = rowCon;
        executeInAWhileFuncs.push(function () {
          rowCon.destroySecondPass();
          delete _this.zombieRowCons[rowCon.getInstanceId()];
        });
      } else {
        rowCon.destroySecondPass();
      }
    });
    if (animate) {
      // this ensures we fire displayedRowsChanged AFTER all the 'executeInAWhileFuncs' get
      // executed, as we added it to the end of the list.
      executeInAWhileFuncs.push(function () {
        _this.updateAllRowCons();
        _this.dispatchDisplayedRowsChanged();
      });
      executeInAWhile(executeInAWhileFuncs);
    }
  };
  RowRenderer.prototype.checkAngularCompile = function () {
    var _this = this;
    // if we are doing angular compiling, then do digest the scope here
    if (this.gridOptionsWrapper.isAngularCompileRows()) {
      // we do it in a timeout, in case we are already in an apply
      window.setTimeout(function () {
        _this.$scope.$apply();
      }, 0);
    }
  };
  RowRenderer.prototype.workOutFirstAndLastRowsToRender = function () {
    var _this = this;
    var newFirst;
    var newLast;
    if (!this.paginationProxy.isRowsToRender()) {
      newFirst = 0;
      newLast = -1; // setting to -1 means nothing in range
    } else if (this.printLayout) {
      newFirst = this.paginationProxy.getPageFirstRow();
      newLast = this.paginationProxy.getPageLastRow();
    } else {
      var bufferPixels = this.gridOptionsWrapper.getRowBufferInPixels();
      var gridBodyCon = this.controllersService.getGridBodyController();
      var rowHeightsChanged = false;
      var firstPixel = void 0;
      var lastPixel = void 0;
      do {
        var paginationOffset = this.paginationProxy.getPixelOffset();
        var _a = this.paginationProxy.getCurrentPagePixelRange(),
          pageFirstPixel = _a.pageFirstPixel,
          pageLastPixel = _a.pageLastPixel;
        var divStretchOffset = this.rowContainerHeightService.getDivStretchOffset();
        var bodyVRange = gridBodyCon.getScrollFeature().getVScrollPosition();
        var bodyTopPixel = bodyVRange.top;
        var bodyBottomPixel = bodyVRange.bottom;
        firstPixel = Math.max(bodyTopPixel + paginationOffset - bufferPixels, pageFirstPixel) + divStretchOffset;
        lastPixel = Math.min(bodyBottomPixel + paginationOffset + bufferPixels, pageLastPixel) + divStretchOffset;
        // if the rows we are about to display get their heights changed, then that upsets the calcs from above.
        rowHeightsChanged = this.ensureAllRowsInRangeHaveHeightsCalculated(firstPixel, lastPixel);
      } while (rowHeightsChanged);
      var firstRowIndex = this.paginationProxy.getRowIndexAtPixel(firstPixel);
      var lastRowIndex = this.paginationProxy.getRowIndexAtPixel(lastPixel);
      var pageFirstRow = this.paginationProxy.getPageFirstRow();
      var pageLastRow = this.paginationProxy.getPageLastRow();
      // adjust, in case buffer extended actual size
      if (firstRowIndex < pageFirstRow) {
        firstRowIndex = pageFirstRow;
      }
      if (lastRowIndex > pageLastRow) {
        lastRowIndex = pageLastRow;
      }
      newFirst = firstRowIndex;
      newLast = lastRowIndex;
    }
    // sometimes user doesn't set CSS right and ends up with grid with no height and grid ends up
    // trying to render all the rows, eg 10,000+ rows. this will kill the browser. so instead of
    // killing the browser, we limit the number of rows. just in case some use case we didn't think
    // of, we also have a property to not do this operation.
    var rowLayoutNormal = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_NORMAL;
    var suppressRowCountRestriction = this.gridOptionsWrapper.isSuppressMaxRenderedRowRestriction();
    var rowBufferMaxSize = Math.max(this.gridOptionsWrapper.getRowBuffer(), 500);
    if (rowLayoutNormal && !suppressRowCountRestriction) {
      if (newLast - newFirst > rowBufferMaxSize) {
        newLast = newFirst + rowBufferMaxSize;
      }
    }
    var firstDiffers = newFirst !== this.firstRenderedRow;
    var lastDiffers = newLast !== this.lastRenderedRow;
    if (firstDiffers || lastDiffers) {
      this.firstRenderedRow = newFirst;
      this.lastRenderedRow = newLast;
      var event_1 = {
        type: Events.EVENT_VIEWPORT_CHANGED,
        firstRow: newFirst,
        lastRow: newLast,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(event_1);
    }
    // only dispatch firstDataRendered if we have actually rendered some data
    if (this.paginationProxy.isRowsToRender()) {
      var event_2 = {
        type: Events.EVENT_FIRST_DATA_RENDERED,
        firstRow: newFirst,
        lastRow: newLast,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      // added a small delay here because in some scenarios this can be fired
      // before the grid is actually rendered, causing component creation
      // on EVENT_FIRST_DATA_RENDERED to fail.
      window.setTimeout(function () {
        return _this.eventService.dispatchEventOnce(event_2);
      }, 50);
    }
  };
  RowRenderer.prototype.ensureAllRowsInRangeHaveHeightsCalculated = function (topPixel, bottomPixel) {
    // ensureRowHeightsVisible only works with CSRM, as it's the only row model that allows lazy row height calcs.
    // all the other row models just hard code so the method just returns back false
    var res = this.paginationProxy.ensureRowHeightsValid(topPixel, bottomPixel, -1, -1);
    if (res) {
      this.updateContainerHeights();
    }
    return res;
  };
  RowRenderer.prototype.getFirstVirtualRenderedRow = function () {
    return this.firstRenderedRow;
  };
  RowRenderer.prototype.getLastVirtualRenderedRow = function () {
    return this.lastRenderedRow;
  };
  // check that none of the rows to remove are editing or focused as:
  // a) if editing, we want to keep them, otherwise the user will loose the context of the edit,
  //    eg user starts editing, enters some text, then scrolls down and then up, next time row rendered
  //    the edit is reset - so we want to keep it rendered.
  // b) if focused, we want ot keep keyboard focus, so if user ctrl+c, it goes to clipboard,
  //    otherwise the user can range select and drag (with focus cell going out of the viewport)
  //    and then ctrl+c, nothing will happen if cell is removed from dom.
  // c) if detail record of master detail, as users complained that the context of detail rows
  //    was getting lost when detail row out of view. eg user expands to show detail row,
  //    then manipulates the detail panel (eg sorts the detail grid), then context is lost
  //    after detail panel is scrolled out of / into view.
  RowRenderer.prototype.doNotUnVirtualiseRow = function (rowComp) {
    var REMOVE_ROW = false;
    var KEEP_ROW = true;
    var rowNode = rowComp.getRowNode();
    var rowHasFocus = this.focusController.isRowNodeFocused(rowNode);
    var rowIsEditing = rowComp.isEditing();
    var rowIsDetail = rowNode.detail;
    var mightWantToKeepRow = rowHasFocus || rowIsEditing || rowIsDetail;
    // if we deffo don't want to keep it,
    if (!mightWantToKeepRow) {
      return REMOVE_ROW;
    }
    // editing row, only remove if it is no longer rendered, eg filtered out or new data set.
    // the reason we want to keep is if user is scrolling up and down, we don't want to loose
    // the context of the editing in process.
    var rowNodePresent = this.paginationProxy.isRowPresent(rowNode);
    return rowNodePresent ? KEEP_ROW : REMOVE_ROW;
  };
  RowRenderer.prototype.createRowCon = function (rowNode, animate, afterScroll) {
    var suppressAnimationFrame = this.gridOptionsWrapper.isSuppressAnimationFrame();
    // we don't use animations frames for printing, so the user can put the grid into print mode
    // and immediately print - otherwise the user would have to wait for the rows to draw in the background
    // (via the animation frames) which is awkward to do from code.
    // we only do the animation frames after scrolling, as this is where we want the smooth user experience.
    // having animation frames for other times makes the grid look 'jumpy'.
    var useAnimationFrameForCreate = afterScroll && !suppressAnimationFrame && !this.printLayout;
    var res = new RowController(this.$scope, rowNode, this.beans, animate, useAnimationFrameForCreate, this.printLayout);
    return res;
  };
  RowRenderer.prototype.getRenderedNodes = function () {
    var renderedRows = this.rowConsByRowIndex;
    return Object.keys(renderedRows).map(function (key) {
      return renderedRows[key].getRowNode();
    });
  };
  // we use index for rows, but column object for columns, as the next column (by index) might not
  // be visible (header grouping) so it's not reliable, so using the column object instead.
  RowRenderer.prototype.navigateToNextCell = function (event, key, currentCell, allowUserOverride) {
    // we keep searching for a next cell until we find one. this is how the group rows get skipped
    var nextCell = currentCell;
    var hitEdgeOfGrid = false;
    while (nextCell && (nextCell === currentCell || !this.isValidNavigateCell(nextCell))) {
      // if the current cell is spanning across multiple columns, we need to move
      // our current position to be the last cell on the right before finding the
      // the next target.
      if (this.gridOptionsWrapper.isEnableRtl()) {
        if (key === KeyCode.LEFT) {
          nextCell = this.getLastCellOfColSpan(nextCell);
        }
      } else if (key === KeyCode.RIGHT) {
        nextCell = this.getLastCellOfColSpan(nextCell);
      }
      nextCell = this.cellNavigationService.getNextCellToFocus(key, nextCell);
      // eg if going down, and nextCell=undefined, means we are gone past the last row
      hitEdgeOfGrid = missing(nextCell);
    }
    if (hitEdgeOfGrid && event && event.keyCode === KeyCode.UP) {
      nextCell = {
        rowIndex: -1,
        rowPinned: null,
        column: currentCell.column
      };
    }
    // allow user to override what cell to go to next. when doing normal cell navigation (with keys)
    // we allow this, however if processing 'enter after edit' we don't allow override
    if (allowUserOverride) {
      var userFunc = this.gridOptionsWrapper.getNavigateToNextCellFunc();
      if (exists(userFunc)) {
        var params = {
          key: key,
          previousCellPosition: currentCell,
          nextCellPosition: nextCell ? nextCell : null,
          event: event
        };
        var userCell = userFunc(params);
        if (exists(userCell)) {
          if (userCell.floating) {
            doOnce(function () {
              console.warn("AG Grid: tabToNextCellFunc return type should have attributes: rowIndex, rowPinned, column. However you had 'floating', maybe you meant 'rowPinned'?");
            }, 'no floating in userCell');
            userCell.rowPinned = userCell.floating;
          }
          nextCell = {
            rowPinned: userCell.rowPinned,
            rowIndex: userCell.rowIndex,
            column: userCell.column
          };
        } else {
          nextCell = null;
        }
      }
    }
    // no next cell means we have reached a grid boundary, eg left, right, top or bottom of grid
    if (!nextCell) {
      return;
    }
    if (nextCell.rowIndex < 0) {
      var headerLen = this.beans.headerNavigationService.getHeaderRowCount();
      this.focusController.focusHeaderPosition({
        headerRowIndex: headerLen + nextCell.rowIndex,
        column: currentCell.column
      });
      return;
    }
    // in case we have col spanning we get the cellComp and use it to get the
    // position. This was we always focus the first cell inside the spanning.
    var normalisedPosition = this.getNormalisedPosition(nextCell);
    if (normalisedPosition) {
      this.focusPosition(normalisedPosition);
    } else {
      this.tryToFocusFullWidthRow(nextCell);
    }
  };
  RowRenderer.prototype.getNormalisedPosition = function (cellPosition) {
    // ensureCellVisible first, to make sure cell at position is rendered.
    this.ensureCellVisible(cellPosition);
    var cellComp = this.getComponentForCell(cellPosition);
    // not guaranteed to have a cellComp when using the SSRM as blocks are loading.
    if (!cellComp) {
      return null;
    }
    cellPosition = cellComp.getCellPosition();
    // we call this again, as nextCell can be different to it's previous value due to Column Spanning
    // (ie if cursor moving from right to left, and cell is spanning columns, then nextCell was the
    // last column in the group, however now it's the first column in the group). if we didn't do
    // ensureCellVisible again, then we could only be showing the last portion (last column) of the
    // merged cells.
    this.ensureCellVisible(cellPosition);
    return cellPosition;
  };
  RowRenderer.prototype.tryToFocusFullWidthRow = function (position, backwards) {
    if (backwards === void 0) {
      backwards = false;
    }
    var displayedColumns = this.columnController.getAllDisplayedColumns();
    var rowComp = this.getRowConByPosition(position);
    if (!rowComp || !rowComp.isFullWidth()) {
      return false;
    }
    var cellPosition = {
      rowIndex: position.rowIndex,
      rowPinned: position.rowPinned,
      column: position.column || (backwards ? last(displayedColumns) : displayedColumns[0])
    };
    this.focusPosition(cellPosition);
    return true;
  };
  RowRenderer.prototype.focusPosition = function (cellPosition) {
    this.focusController.setFocusedCell(cellPosition.rowIndex, cellPosition.column, cellPosition.rowPinned, true);
    if (this.rangeController) {
      this.rangeController.setRangeToCell(cellPosition);
    }
  };
  RowRenderer.prototype.isValidNavigateCell = function (cell) {
    var rowNode = this.rowPositionUtils.getRowNode(cell);
    // we do not allow focusing on detail rows and full width rows
    return !!rowNode;
  };
  RowRenderer.prototype.getLastCellOfColSpan = function (cell) {
    var cellComp = this.getComponentForCell(cell);
    if (!cellComp) {
      return cell;
    }
    var colSpanningList = cellComp.getColSpanningList();
    if (colSpanningList.length === 1) {
      return cell;
    }
    return {
      rowIndex: cell.rowIndex,
      column: last(colSpanningList),
      rowPinned: cell.rowPinned
    };
  };
  RowRenderer.prototype.ensureCellVisible = function (gridCell) {
    // this scrolls the row into view
    if (missing(gridCell.rowPinned)) {
      this.gridBodyCon.getScrollFeature().ensureIndexVisible(gridCell.rowIndex);
    }
    if (!gridCell.column.isPinned()) {
      this.gridBodyCon.getScrollFeature().ensureColumnVisible(gridCell.column);
    }
    // need to nudge the scrolls for the floating items. otherwise when we set focus on a non-visible
    // floating cell, the scrolls get out of sync
    this.gridBodyCon.getScrollFeature().horizontallyScrollHeaderCenterAndFloatingCenter();
    // need to flush frames, to make sure the correct cells are rendered
    this.animationFrameService.flushAllFrames();
  };
  RowRenderer.prototype.startEditingCell = function (gridCell, keyPress, charPress) {
    var cell = this.getComponentForCell(gridCell);
    if (cell) {
      cell.startRowOrCellEdit(keyPress, charPress);
    }
  };
  RowRenderer.prototype.getRowConByPosition = function (rowPosition) {
    var rowComponent;
    switch (rowPosition.rowPinned) {
      case Constants.PINNED_TOP:
        rowComponent = this.topRowCons[rowPosition.rowIndex];
        break;
      case Constants.PINNED_BOTTOM:
        rowComponent = this.bottomRowCons[rowPosition.rowIndex];
        break;
      default:
        rowComponent = this.rowConsByRowIndex[rowPosition.rowIndex];
        break;
    }
    return rowComponent;
  };
  RowRenderer.prototype.getComponentForCell = function (cellPosition) {
    var rowComp = this.getRowConByPosition(cellPosition);
    if (!rowComp) {
      return null;
    }
    var cellComponent = rowComp.getRenderedCellForColumn(cellPosition.column);
    return cellComponent;
  };
  RowRenderer.prototype.getRowNode = function (gridRow) {
    switch (gridRow.rowPinned) {
      case Constants.PINNED_TOP:
        return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];
      case Constants.PINNED_BOTTOM:
        return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];
      default:
        return this.rowModel.getRow(gridRow.rowIndex);
    }
  };
  // result of keyboard event
  RowRenderer.prototype.onTabKeyDown = function (previousRenderedCell, keyboardEvent) {
    var backwards = keyboardEvent.shiftKey;
    var movedToNextCell = this.tabToNextCellCommon(previousRenderedCell, backwards);
    if (movedToNextCell) {
      // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default
      // to the normal tabbing so user can exit the grid.
      keyboardEvent.preventDefault();
      return;
    }
    // if we didn't move to next cell, then need to tab out of the cells, ie to the header (if going
    // backwards)
    if (backwards) {
      var _a = previousRenderedCell.getRowPosition(),
        rowIndex = _a.rowIndex,
        rowPinned = _a.rowPinned;
      var firstRow = rowPinned ? rowIndex === 0 : rowIndex === this.paginationProxy.getPageFirstRow();
      if (firstRow) {
        keyboardEvent.preventDefault();
        var headerRowIndex = this.beans.headerNavigationService.getHeaderRowCount() - 1;
        var column = last(this.columnController.getAllDisplayedColumns());
        this.focusController.focusHeaderPosition({
          headerRowIndex: headerRowIndex,
          column: column
        });
      }
    } else {
      // if the case it's a popup editor, the focus is on the editor and not the previous cell.
      // in order for the tab navigation to work, we need to focus the browser back onto the
      // previous cell.
      if (previousRenderedCell instanceof CellComp) {
        previousRenderedCell.focusCell(true);
      }
      if (this.focusController.focusNextGridCoreContainer(false)) {
        keyboardEvent.preventDefault();
      }
    }
  };
  // comes from API
  RowRenderer.prototype.tabToNextCell = function (backwards) {
    var focusedCell = this.focusController.getFocusedCell();
    // if no focus, then cannot navigate
    if (!focusedCell) {
      return false;
    }
    var cellOrRowComp = this.getComponentForCell(focusedCell);
    // if cell is not rendered, means user has scrolled away from the cell
    // or that the focusedCell is a Full Width Row
    if (!cellOrRowComp) {
      cellOrRowComp = this.getRowConByPosition(focusedCell);
      if (!cellOrRowComp || !cellOrRowComp.isFullWidth()) {
        return false;
      }
    }
    return this.tabToNextCellCommon(cellOrRowComp, backwards);
  };
  RowRenderer.prototype.tabToNextCellCommon = function (previousCellOrRow, backwards) {
    var editing = previousCellOrRow.isEditing();
    // if cell is not editing, there is still chance row is editing if it's Full Row Editing
    if (!editing && previousCellOrRow instanceof CellComp) {
      var cellComp = previousCellOrRow;
      var rowCon = cellComp.getRenderedRow();
      if (rowCon) {
        editing = rowCon.isEditing();
      }
    }
    var res;
    if (editing) {
      // if we are editing, we know it's not a Full Width Row (RowComp)
      if (this.gridOptionsWrapper.isFullRowEdit()) {
        res = this.moveToNextEditingRow(previousCellOrRow, backwards);
      } else {
        res = this.moveToNextEditingCell(previousCellOrRow, backwards);
      }
    } else {
      res = this.moveToNextCellNotEditing(previousCellOrRow, backwards);
    }
    // if a cell wasn't found, it's possible that focus was moved to the header
    return res || !!this.focusController.getFocusedHeader();
  };
  RowRenderer.prototype.moveToNextEditingCell = function (previousRenderedCell, backwards) {
    var gridCell = previousRenderedCell.getCellPosition();
    // need to do this before getting next cell to edit, in case the next cell
    // has editable function (eg colDef.editable=func() ) and it depends on the
    // result of this cell, so need to save updates from the first edit, in case
    // the value is referenced in the function.
    previousRenderedCell.stopEditing();
    // find the next cell to start editing
    var nextRenderedCell = this.findNextCellToFocusOn(gridCell, backwards, true);
    var foundCell = nextRenderedCell != null;
    // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default
    // to the normal tabbing so user can exit the grid.
    if (foundCell) {
      nextRenderedCell.startEditingIfEnabled(null, null, true);
      nextRenderedCell.focusCell(false);
    }
    return foundCell;
  };
  RowRenderer.prototype.moveToNextEditingRow = function (previousCellComp, backwards) {
    var cellPos = previousCellComp.getCellPosition();
    // find the next cell to start editing
    var nextCellComp = this.findNextCellToFocusOn(cellPos, backwards, true);
    if (nextCellComp == null) {
      return false;
    }
    var previousPos = previousCellComp.getCellPosition();
    var nextPos = nextCellComp.getCellPosition();
    var previousEditable = this.isCellEditable(previousPos);
    var nextEditable = this.isCellEditable(nextPos);
    var rowsMatch = nextPos && previousPos.rowIndex === nextPos.rowIndex && previousPos.rowPinned === nextPos.rowPinned;
    if (previousEditable) {
      previousCellComp.setFocusOutOnEditor();
    }
    if (!rowsMatch) {
      var pRow = previousCellComp.getRenderedRow();
      pRow.stopEditing();
      var nRow = nextCellComp.getRenderedRow();
      nRow.startRowEditing();
    }
    if (nextEditable) {
      nextCellComp.setFocusInOnEditor();
      nextCellComp.focusCell();
    } else {
      nextCellComp.focusCell(true);
    }
    return true;
  };
  RowRenderer.prototype.moveToNextCellNotEditing = function (previousRenderedCell, backwards) {
    var displayedColumns = this.columnController.getAllDisplayedColumns();
    var gridCell;
    if (previousRenderedCell instanceof RowController) {
      gridCell = __assign$5(__assign$5({}, previousRenderedCell.getRowPosition()), {
        column: backwards ? displayedColumns[0] : last(displayedColumns)
      });
    } else {
      gridCell = previousRenderedCell.getCellPosition();
    }
    // find the next cell to start editing
    var nextRenderedCell = this.findNextCellToFocusOn(gridCell, backwards, false);
    // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default
    // to the normal tabbing so user can exit the grid.
    if (nextRenderedCell instanceof CellComp) {
      nextRenderedCell.focusCell(true);
    } else if (nextRenderedCell) {
      return this.tryToFocusFullWidthRow(nextRenderedCell.getRowPosition(), backwards);
    }
    return exists(nextRenderedCell);
  };
  // called by the cell, when tab is pressed while editing.
  // @return: RenderedCell when navigation successful, otherwise null
  RowRenderer.prototype.findNextCellToFocusOn = function (gridCell, backwards, startEditing) {
    var nextCell = gridCell;
    while (true) {
      if (!backwards) {
        nextCell = this.getLastCellOfColSpan(nextCell);
      }
      nextCell = this.cellNavigationService.getNextTabbedCell(nextCell, backwards);
      // allow user to override what cell to go to next
      var userFunc = this.gridOptionsWrapper.getTabToNextCellFunc();
      if (exists(userFunc)) {
        var params = {
          backwards: backwards,
          editing: startEditing,
          previousCellPosition: gridCell,
          nextCellPosition: nextCell ? nextCell : null
        };
        var userCell = userFunc(params);
        if (exists(userCell)) {
          if (userCell.floating) {
            doOnce(function () {
              console.warn("AG Grid: tabToNextCellFunc return type should have attributes: rowIndex, rowPinned, column. However you had 'floating', maybe you meant 'rowPinned'?");
            }, 'no floating in userCell');
            userCell.rowPinned = userCell.floating;
          }
          nextCell = {
            rowIndex: userCell.rowIndex,
            column: userCell.column,
            rowPinned: userCell.rowPinned
          };
        } else {
          nextCell = null;
        }
      }
      // if no 'next cell', means we have got to last cell of grid, so nothing to move to,
      // so bottom right cell going forwards, or top left going backwards
      if (!nextCell) {
        return null;
      }
      if (nextCell.rowIndex < 0) {
        var headerLen = this.beans.headerNavigationService.getHeaderRowCount();
        this.focusController.focusHeaderPosition({
          headerRowIndex: headerLen + nextCell.rowIndex,
          column: nextCell.column
        });
        return null;
      }
      // if editing, but cell not editable, skip cell. we do this before we do all of
      // the 'ensure index visible' and 'flush all frames', otherwise if we are skipping
      // a bunch of cells (eg 10 rows) then all the work on ensuring cell visible is useless
      // (except for the last one) which causes grid to stall for a while.
      // note - for full row edit, we do focus non-editable cells, as the row stays in edit mode.
      var fullRowEdit = this.gridOptionsWrapper.isFullRowEdit();
      if (startEditing && !fullRowEdit) {
        var cellIsEditable = this.isCellEditable(nextCell);
        if (!cellIsEditable) {
          continue;
        }
      }
      this.ensureCellVisible(nextCell);
      // we have to call this after ensureColumnVisible - otherwise it could be a virtual column
      // or row that is not currently in view, hence the renderedCell would not exist
      var nextCellComp = this.getComponentForCell(nextCell);
      // if next cell is fullWidth row, then no rendered cell,
      // as fullWidth rows have no cells, so we skip it
      if (!nextCellComp) {
        var rowComp = this.getRowConByPosition(nextCell);
        if (!rowComp || !rowComp.isFullWidth()) {
          continue;
        } else {
          return rowComp;
        }
      }
      if (nextCellComp.isSuppressNavigable()) {
        continue;
      }
      // by default, when we click a cell, it gets selected into a range, so to keep keyboard navigation
      // consistent, we set into range here also.
      if (this.rangeController) {
        this.rangeController.setRangeToCell(nextCell);
      }
      // we successfully tabbed onto a grid cell, so return true
      return nextCellComp;
    }
  };
  RowRenderer.prototype.isCellEditable = function (cell) {
    var rowNode = this.lookupRowNodeForCell(cell);
    if (rowNode) {
      return cell.column.isCellEditable(rowNode);
    }
    return false;
  };
  RowRenderer.prototype.lookupRowNodeForCell = function (cell) {
    if (cell.rowPinned === Constants.PINNED_TOP) {
      return this.pinnedRowModel.getPinnedTopRow(cell.rowIndex);
    }
    if (cell.rowPinned === Constants.PINNED_BOTTOM) {
      return this.pinnedRowModel.getPinnedBottomRow(cell.rowIndex);
    }
    return this.paginationProxy.getRow(cell.rowIndex);
  };
  // returns true if any row between startIndex and endIndex is rendered. used by
  // SSRM or IRM, as they don't want to purge visible blocks from cache.
  RowRenderer.prototype.isRangeInRenderedViewport = function (startIndex, endIndex) {
    // parent closed means the parent node is not expanded, thus these blocks are not visible
    var parentClosed = startIndex == null || endIndex == null;
    if (parentClosed) {
      return false;
    }
    var blockAfterViewport = startIndex > this.lastRenderedRow;
    var blockBeforeViewport = endIndex < this.firstRenderedRow;
    var blockInsideViewport = !blockBeforeViewport && !blockAfterViewport;
    return blockInsideViewport;
  };
  __decorate$D([Autowired("paginationProxy")], RowRenderer.prototype, "paginationProxy", void 0);
  __decorate$D([Autowired("columnController")], RowRenderer.prototype, "columnController", void 0);
  __decorate$D([Autowired("$scope")], RowRenderer.prototype, "$scope", void 0);
  __decorate$D([Autowired("pinnedRowModel")], RowRenderer.prototype, "pinnedRowModel", void 0);
  __decorate$D([Autowired("rowModel")], RowRenderer.prototype, "rowModel", void 0);
  __decorate$D([Autowired("focusController")], RowRenderer.prototype, "focusController", void 0);
  __decorate$D([Autowired("cellNavigationService")], RowRenderer.prototype, "cellNavigationService", void 0);
  __decorate$D([Autowired("columnApi")], RowRenderer.prototype, "columnApi", void 0);
  __decorate$D([Autowired("gridApi")], RowRenderer.prototype, "gridApi", void 0);
  __decorate$D([Autowired("beans")], RowRenderer.prototype, "beans", void 0);
  __decorate$D([Autowired("rowContainerHeightService")], RowRenderer.prototype, "rowContainerHeightService", void 0);
  __decorate$D([Autowired("animationFrameService")], RowRenderer.prototype, "animationFrameService", void 0);
  __decorate$D([Autowired("rowPositionUtils")], RowRenderer.prototype, "rowPositionUtils", void 0);
  __decorate$D([Optional("rangeController")], RowRenderer.prototype, "rangeController", void 0);
  __decorate$D([Optional("controllersService")], RowRenderer.prototype, "controllersService", void 0);
  __decorate$D([__param$5(0, Qualifier("loggerFactory"))], RowRenderer.prototype, "agWire", null);
  __decorate$D([PostConstruct], RowRenderer.prototype, "postConstruct", null);
  RowRenderer = __decorate$D([Bean("rowRenderer")], RowRenderer);
  return RowRenderer;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var CssClassApplier = /** @class */function () {
  function CssClassApplier() {}
  CssClassApplier.addHeaderClassesFromColDef = function (abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup) {
    if (missing(abstractColDef)) {
      return;
    }
    this.addColumnClassesFromCollDef(abstractColDef.headerClass, abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup);
  };
  CssClassApplier.addToolPanelClassesFromColDef = function (abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup) {
    if (missing(abstractColDef)) {
      return;
    }
    this.addColumnClassesFromCollDef(abstractColDef.toolPanelClass, abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup);
  };
  CssClassApplier.addColumnClassesFromCollDef = function (classesOrFunc, abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup) {
    if (missing(classesOrFunc)) {
      return;
    }
    var classToUse;
    if (typeof classesOrFunc === 'function') {
      var params = {
        // bad naming, as colDef here can be a group or a column,
        // however most people won't appreciate the difference,
        // so keeping it as colDef to avoid confusion.
        colDef: abstractColDef,
        column: column,
        columnGroup: columnGroup,
        context: gridOptionsWrapper.getContext(),
        api: gridOptionsWrapper.getApi()
      };
      var headerClassFunc = classesOrFunc;
      classToUse = headerClassFunc(params);
    } else {
      classToUse = classesOrFunc;
    }
    if (typeof classToUse === 'string') {
      addCssClass(eHeaderCell, classToUse);
    } else if (Array.isArray(classToUse)) {
      classToUse.forEach(function (cssClassItem) {
        addCssClass(eHeaderCell, cssClassItem);
      });
    }
  };
  return CssClassApplier;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$K =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$E =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HoverFeature = /** @class */function (_super) {
  __extends$K(HoverFeature, _super);
  function HoverFeature(columns, element) {
    var _this = _super.call(this) || this;
    _this.columns = columns;
    _this.element = element;
    return _this;
  }
  HoverFeature.prototype.postConstruct = function () {
    this.addMouseHoverListeners();
  };
  HoverFeature.prototype.addMouseHoverListeners = function () {
    this.addManagedListener(this.element, 'mouseout', this.onMouseOut.bind(this));
    this.addManagedListener(this.element, 'mouseover', this.onMouseOver.bind(this));
  };
  HoverFeature.prototype.onMouseOut = function () {
    this.columnHoverService.clearMouseOver();
  };
  HoverFeature.prototype.onMouseOver = function () {
    this.columnHoverService.setMouseOver(this.columns);
  };
  __decorate$E([Autowired('columnHoverService')], HoverFeature.prototype, "columnHoverService", void 0);
  __decorate$E([PostConstruct], HoverFeature.prototype, "postConstruct", null);
  return HoverFeature;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$L =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$F =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SetLeftFeature = /** @class */function (_super) {
  __extends$L(SetLeftFeature, _super);
  function SetLeftFeature(columnOrGroup, eCell, beans, colsSpanning) {
    var _this = _super.call(this) || this;
    _this.columnOrGroup = columnOrGroup;
    _this.eCell = eCell;
    _this.ariaEl = _this.eCell.querySelector('[role=columnheader]') || _this.eCell;
    _this.colsSpanning = colsSpanning;
    _this.beans = beans;
    _this.printLayout = beans.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
    return _this;
  }
  SetLeftFeature.prototype.setColsSpanning = function (colsSpanning) {
    this.colsSpanning = colsSpanning;
    this.onLeftChanged();
  };
  SetLeftFeature.prototype.getColumnOrGroup = function () {
    if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) {
      return last(this.colsSpanning);
    }
    return this.columnOrGroup;
  };
  SetLeftFeature.prototype.postConstruct = function () {
    this.addManagedListener(this.columnOrGroup, Column.EVENT_LEFT_CHANGED, this.onLeftChanged.bind(this));
    this.setLeftFirstTime();
    // when in print layout, the left position is also dependent on the width of the pinned sections.
    // so additionally update left if any column width changes.
    if (this.printLayout) {
      this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onLeftChanged.bind(this));
    }
  };
  SetLeftFeature.prototype.setLeftFirstTime = function () {
    var suppressMoveAnimation = this.beans.gridOptionsWrapper.isSuppressColumnMoveAnimation();
    var oldLeftExists = exists(this.columnOrGroup.getOldLeft());
    var animateColumnMove = this.beans.columnAnimationService.isActive() && oldLeftExists && !suppressMoveAnimation;
    if (animateColumnMove) {
      this.animateInLeft();
    } else {
      this.onLeftChanged();
    }
  };
  SetLeftFeature.prototype.animateInLeft = function () {
    var _this = this;
    var colOrGroup = this.getColumnOrGroup();
    var left = colOrGroup.getLeft();
    var oldLeft = colOrGroup.getOldLeft();
    var oldActualLeft = this.modifyLeftForPrintLayout(colOrGroup, oldLeft);
    var actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left);
    this.setLeft(oldActualLeft);
    // we must keep track of the left we want to set to, as this would otherwise lead to a race
    // condition, if the user changed the left value many times in one VM turn, then we want to make
    // make sure the actualLeft we set in the timeout below (in the next VM turn) is the correct left
    // position. eg if user changes column position twice, then setLeft() below executes twice in next
    // VM turn, but only one (the correct one) should get applied.
    this.actualLeft = actualLeft;
    this.beans.columnAnimationService.executeNextVMTurn(function () {
      // test this left value is the latest one to be applied, and if not, do nothing
      if (_this.actualLeft === actualLeft) {
        _this.setLeft(actualLeft);
      }
    });
  };
  SetLeftFeature.prototype.onLeftChanged = function () {
    var colOrGroup = this.getColumnOrGroup();
    var left = colOrGroup.getLeft();
    this.actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left);
    this.setLeft(this.actualLeft);
  };
  SetLeftFeature.prototype.modifyLeftForPrintLayout = function (colOrGroup, leftPosition) {
    if (!this.printLayout) {
      return leftPosition;
    }
    if (colOrGroup.getPinned() === Constants.PINNED_LEFT) {
      return leftPosition;
    }
    var leftWidth = this.beans.columnController.getDisplayedColumnsLeftWidth();
    if (colOrGroup.getPinned() === Constants.PINNED_RIGHT) {
      var bodyWidth = this.beans.columnController.getBodyContainerWidth();
      return leftWidth + bodyWidth + leftPosition;
    }
    // is in body
    return leftWidth + leftPosition;
  };
  SetLeftFeature.prototype.setLeft = function (value) {
    // if the value is null, then that means the column is no longer
    // displayed. there is logic in the rendering to fade these columns
    // out, so we don't try and change their left positions.
    if (exists(value)) {
      this.eCell.style.left = value + "px";
    }
    var indexColumn;
    if (this.columnOrGroup instanceof Column) {
      indexColumn = this.columnOrGroup;
    } else {
      var columnGroup = this.columnOrGroup;
      var children = columnGroup.getLeafColumns();
      if (!children.length) {
        return;
      }
      if (children.length > 1) {
        setAriaColSpan(this.ariaEl, children.length);
      }
      indexColumn = children[0];
    }
    var index = this.beans.columnController.getAriaColumnIndex(indexColumn);
    setAriaColIndex(this.ariaEl, index);
  };
  __decorate$F([PostConstruct], SetLeftFeature.prototype, "postConstruct", null);
  return SetLeftFeature;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$M =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$G =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AgAbstractLabel = /** @class */function (_super) {
  __extends$M(AgAbstractLabel, _super);
  function AgAbstractLabel(config, template) {
    var _this = _super.call(this, template) || this;
    _this.labelSeparator = '';
    _this.labelAlignment = 'left';
    _this.label = '';
    _this.config = config || {};
    return _this;
  }
  AgAbstractLabel.prototype.postConstruct = function () {
    addCssClass(this.getGui(), 'ag-labeled');
    addCssClass(this.eLabel, 'ag-label');
    var _a = this.config,
      labelSeparator = _a.labelSeparator,
      label = _a.label,
      labelWidth = _a.labelWidth,
      labelAlignment = _a.labelAlignment;
    if (labelSeparator != null) {
      this.setLabelSeparator(labelSeparator);
    }
    if (label != null) {
      this.setLabel(label);
    }
    if (labelWidth != null) {
      this.setLabelWidth(labelWidth);
    }
    this.setLabelAlignment(labelAlignment || this.labelAlignment);
    this.refreshLabel();
  };
  AgAbstractLabel.prototype.refreshLabel = function () {
    clearElement(this.eLabel);
    if (typeof this.label === 'string') {
      this.eLabel.innerText = this.label + this.labelSeparator;
    } else if (this.label) {
      this.eLabel.appendChild(this.label);
    }
    if (this.label === '') {
      addCssClass(this.eLabel, 'ag-hidden');
      this.eLabel.setAttribute('role', 'presentation');
    } else {
      removeCssClass(this.eLabel, 'ag-hidden');
      this.eLabel.removeAttribute('role');
    }
  };
  AgAbstractLabel.prototype.setLabelSeparator = function (labelSeparator) {
    if (this.labelSeparator === labelSeparator) {
      return this;
    }
    this.labelSeparator = labelSeparator;
    if (this.label != null) {
      this.refreshLabel();
    }
    return this;
  };
  AgAbstractLabel.prototype.getLabelId = function () {
    this.eLabel.id = this.eLabel.id || "ag-" + this.getCompId() + "-label";
    return this.eLabel.id;
  };
  AgAbstractLabel.prototype.getLabel = function () {
    return this.label;
  };
  AgAbstractLabel.prototype.setLabel = function (label) {
    if (this.label === label) {
      return this;
    }
    this.label = label;
    this.refreshLabel();
    return this;
  };
  AgAbstractLabel.prototype.setLabelAlignment = function (alignment) {
    var eGui = this.getGui();
    addOrRemoveCssClass(eGui, 'ag-label-align-left', alignment === 'left');
    addOrRemoveCssClass(eGui, 'ag-label-align-right', alignment === 'right');
    addOrRemoveCssClass(eGui, 'ag-label-align-top', alignment === 'top');
    return this;
  };
  AgAbstractLabel.prototype.setLabelWidth = function (width) {
    if (this.label == null) {
      return this;
    }
    setElementWidth(this.eLabel, width);
    return this;
  };
  __decorate$G([PostConstruct], AgAbstractLabel.prototype, "postConstruct", null);
  return AgAbstractLabel;
}(Component);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$N =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AgAbstractField = /** @class */function (_super) {
  __extends$N(AgAbstractField, _super);
  function AgAbstractField(config, template, className) {
    var _this = _super.call(this, config, template) || this;
    _this.className = className;
    _this.disabled = false;
    return _this;
  }
  AgAbstractField.prototype.postConstruct = function () {
    _super.prototype.postConstruct.call(this);
    if (this.className) {
      addCssClass(this.getGui(), this.className);
    }
  };
  AgAbstractField.prototype.onValueChange = function (callbackFn) {
    var _this = this;
    this.addManagedListener(this, AgAbstractField.EVENT_CHANGED, function () {
      return callbackFn(_this.getValue());
    });
    return this;
  };
  AgAbstractField.prototype.getWidth = function () {
    return this.getGui().clientWidth;
  };
  AgAbstractField.prototype.setWidth = function (width) {
    setFixedWidth(this.getGui(), width);
    return this;
  };
  AgAbstractField.prototype.getPreviousValue = function () {
    return this.previousValue;
  };
  AgAbstractField.prototype.getValue = function () {
    return this.value;
  };
  AgAbstractField.prototype.setValue = function (value, silent) {
    if (this.value === value) {
      return this;
    }
    this.previousValue = this.value;
    this.value = value;
    if (!silent) {
      this.dispatchEvent({
        type: AgAbstractField.EVENT_CHANGED
      });
    }
    return this;
  };
  AgAbstractField.prototype.setDisabled = function (disabled) {
    disabled = !!disabled;
    var element = this.getGui();
    setDisabled(element, disabled);
    addOrRemoveCssClass(element, 'ag-disabled', disabled);
    this.disabled = disabled;
    return this;
  };
  AgAbstractField.prototype.isDisabled = function () {
    return !!this.disabled;
  };
  AgAbstractField.EVENT_CHANGED = 'valueChange';
  return AgAbstractField;
}(AgAbstractLabel);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$O =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$H =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AgAbstractInputField = /** @class */function (_super) {
  __extends$O(AgAbstractInputField, _super);
  function AgAbstractInputField(config, className, inputType, displayFieldTag) {
    if (inputType === void 0) {
      inputType = 'text';
    }
    if (displayFieldTag === void 0) {
      displayFieldTag = 'input';
    }
    var _this = _super.call(this, config, /* html */"\n            <div role=\"presentation\">\n                <div ref=\"eLabel\" class=\"ag-input-field-label\"></div>\n                <div ref=\"eWrapper\" class=\"ag-wrapper ag-input-wrapper\" role=\"presentation\">\n                    <" + displayFieldTag + " ref=\"eInput\" class=\"ag-input-field-input\"></" + displayFieldTag + ">\n                </div>\n            </div>", className) || this;
    _this.inputType = inputType;
    _this.displayFieldTag = displayFieldTag;
    return _this;
  }
  AgAbstractInputField.prototype.postConstruct = function () {
    _super.prototype.postConstruct.call(this);
    this.setInputType();
    addCssClass(this.eLabel, this.className + "-label");
    addCssClass(this.eWrapper, this.className + "-input-wrapper");
    addCssClass(this.eInput, this.className + "-input");
    addCssClass(this.getGui(), 'ag-input-field');
    this.eInput.id = this.eInput.id || "ag-" + this.getCompId() + "-input";
    var _a = this.config,
      width = _a.width,
      value = _a.value;
    if (width != null) {
      this.setWidth(width);
    }
    if (value != null) {
      this.setValue(value);
    }
    this.addInputListeners();
  };
  AgAbstractInputField.prototype.refreshLabel = function () {
    if (exists(this.getLabel())) {
      setAriaLabelledBy(this.eInput, this.getLabelId());
    } else {
      this.eInput.removeAttribute('aria-labelledby');
    }
    _super.prototype.refreshLabel.call(this);
  };
  AgAbstractInputField.prototype.addInputListeners = function () {
    var _this = this;
    this.addManagedListener(this.eInput, 'input', function (e) {
      return _this.setValue(e.target.value);
    });
  };
  AgAbstractInputField.prototype.setInputType = function () {
    if (this.displayFieldTag === 'input') {
      this.eInput.setAttribute('type', this.inputType);
    }
  };
  AgAbstractInputField.prototype.getInputElement = function () {
    return this.eInput;
  };
  AgAbstractInputField.prototype.setInputWidth = function (width) {
    setElementWidth(this.eWrapper, width);
    return this;
  };
  AgAbstractInputField.prototype.setInputName = function (name) {
    this.getInputElement().setAttribute('name', name);
    return this;
  };
  AgAbstractInputField.prototype.getFocusableElement = function () {
    return this.eInput;
  };
  AgAbstractInputField.prototype.setMaxLength = function (length) {
    var eInput = this.eInput;
    eInput.maxLength = length;
    return this;
  };
  AgAbstractInputField.prototype.setInputPlaceholder = function (placeholder) {
    addOrRemoveAttribute(this.eInput, 'placeholder', placeholder);
    return this;
  };
  AgAbstractInputField.prototype.setInputAriaLabel = function (label) {
    setAriaLabel(this.eInput, label);
    return this;
  };
  AgAbstractInputField.prototype.setDisabled = function (disabled) {
    setDisabled(this.eInput, disabled);
    return _super.prototype.setDisabled.call(this, disabled);
  };
  __decorate$H([RefSelector('eLabel')], AgAbstractInputField.prototype, "eLabel", void 0);
  __decorate$H([RefSelector('eWrapper')], AgAbstractInputField.prototype, "eWrapper", void 0);
  __decorate$H([RefSelector('eInput')], AgAbstractInputField.prototype, "eInput", void 0);
  return AgAbstractInputField;
}(AgAbstractField);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$P =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AgCheckbox = /** @class */function (_super) {
  __extends$P(AgCheckbox, _super);
  function AgCheckbox(config, className, inputType) {
    if (className === void 0) {
      className = 'ag-checkbox';
    }
    if (inputType === void 0) {
      inputType = 'checkbox';
    }
    var _this = _super.call(this, config, className, inputType) || this;
    _this.labelAlignment = 'right';
    _this.selected = false;
    _this.readOnly = false;
    _this.passive = false;
    return _this;
  }
  AgCheckbox.prototype.addInputListeners = function () {
    this.addManagedListener(this.eInput, 'click', this.onCheckboxClick.bind(this));
    this.addManagedListener(this.eLabel, 'click', this.toggle.bind(this));
  };
  AgCheckbox.prototype.getNextValue = function () {
    return this.selected === undefined ? true : !this.selected;
  };
  AgCheckbox.prototype.setPassive = function (passive) {
    this.passive = passive;
  };
  AgCheckbox.prototype.isReadOnly = function () {
    return this.readOnly;
  };
  AgCheckbox.prototype.setReadOnly = function (readOnly) {
    addOrRemoveCssClass(this.eWrapper, 'ag-disabled', readOnly);
    this.eInput.disabled = readOnly;
    this.readOnly = readOnly;
  };
  AgCheckbox.prototype.setDisabled = function (disabled) {
    addOrRemoveCssClass(this.eWrapper, 'ag-disabled', disabled);
    return _super.prototype.setDisabled.call(this, disabled);
  };
  AgCheckbox.prototype.toggle = function () {
    var previousValue = this.isSelected();
    var nextValue = this.getNextValue();
    if (this.passive) {
      this.dispatchChange(nextValue, previousValue);
    } else {
      this.setValue(nextValue);
    }
  };
  AgCheckbox.prototype.getValue = function () {
    return this.isSelected();
  };
  AgCheckbox.prototype.setValue = function (value, silent) {
    this.refreshSelectedClass(value);
    this.setSelected(value, silent);
    return this;
  };
  AgCheckbox.prototype.setName = function (name) {
    var input = this.getInputElement();
    input.name = name;
    return this;
  };
  AgCheckbox.prototype.isSelected = function () {
    return this.selected;
  };
  AgCheckbox.prototype.setSelected = function (selected, silent) {
    if (this.isSelected() === selected) {
      return;
    }
    this.previousValue = this.isSelected();
    selected = this.selected = typeof selected === 'boolean' ? selected : undefined;
    this.eInput.checked = selected;
    this.eInput.indeterminate = selected === undefined;
    if (!silent) {
      this.dispatchChange(this.selected, this.previousValue);
    }
  };
  AgCheckbox.prototype.dispatchChange = function (selected, previousValue, event) {
    this.dispatchEvent({
      type: AgCheckbox.EVENT_CHANGED,
      selected: selected,
      previousValue: previousValue,
      event: event
    });
    var input = this.getInputElement();
    var checkboxChangedEvent = {
      type: Events.EVENT_CHECKBOX_CHANGED,
      id: input.id,
      name: input.name,
      selected: selected,
      previousValue: previousValue
    };
    this.eventService.dispatchEvent(checkboxChangedEvent);
  };
  AgCheckbox.prototype.onCheckboxClick = function (e) {
    if (this.passive) {
      return;
    }
    var previousValue = this.isSelected();
    var selected = this.selected = e.target.checked;
    this.refreshSelectedClass(selected);
    this.dispatchChange(selected, previousValue, e);
  };
  AgCheckbox.prototype.refreshSelectedClass = function (value) {
    addOrRemoveCssClass(this.eWrapper, 'ag-checked', value === true);
    addOrRemoveCssClass(this.eWrapper, 'ag-indeterminate', value == null);
  };
  return AgCheckbox;
}(AgAbstractInputField);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$Q =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$I =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SelectAllFeature = /** @class */function (_super) {
  __extends$Q(SelectAllFeature, _super);
  function SelectAllFeature(cbSelectAll, column) {
    var _this = _super.call(this) || this;
    _this.cbSelectAllVisible = false;
    _this.processingEventFromCheckbox = false;
    _this.cbSelectAll = cbSelectAll;
    _this.column = column;
    var colDef = column.getColDef();
    _this.filteredOnly = colDef ? !!colDef.headerCheckboxSelectionFilteredOnly : false;
    return _this;
  }
  SelectAllFeature.prototype.postConstruct = function () {
    this.showOrHideSelectAll();
    this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.showOrHideSelectAll.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.showOrHideSelectAll.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_SELECTION_CHANGED, this.onSelectionChanged.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onModelChanged.bind(this));
    this.addManagedListener(this.cbSelectAll, AgCheckbox.EVENT_CHANGED, this.onCbSelectAll.bind(this));
    this.cbSelectAll.getInputElement().setAttribute('tabindex', '-1');
    this.refreshSelectAllLabel();
  };
  SelectAllFeature.prototype.showOrHideSelectAll = function () {
    this.cbSelectAllVisible = this.isCheckboxSelection();
    this.cbSelectAll.setDisplayed(this.cbSelectAllVisible);
    if (this.cbSelectAllVisible) {
      // in case user is trying this feature with the wrong model type
      this.checkRightRowModelType();
      // make sure checkbox is showing the right state
      this.updateStateOfCheckbox();
    }
    this.refreshHeaderAriaDescribedBy(this.cbSelectAllVisible);
  };
  SelectAllFeature.prototype.refreshHeaderAriaDescribedBy = function (isSelectAllVisible) {
    var parentHeader = this.cbSelectAll.getParentComponent();
    var parentHeaderGui = parentHeader && parentHeader.getGui();
    if (!parentHeaderGui || !isVisible(parentHeaderGui)) {
      return;
    }
    var describedByIds = '';
    if (parentHeaderGui) {
      describedByIds = getAriaDescribedBy(parentHeaderGui);
    }
    var cbSelectAllId = this.cbSelectAll.getInputElement().id;
    var describedByIdsHasSelectAllFeature = describedByIds.indexOf(cbSelectAllId) !== -1;
    if (isSelectAllVisible) {
      if (!describedByIdsHasSelectAllFeature) {
        setAriaDescribedBy(parentHeaderGui, cbSelectAllId + " " + describedByIds.trim());
      }
    } else if (describedByIdsHasSelectAllFeature) {
      setAriaDescribedBy(parentHeaderGui, describedByIds.trim().split(' ').filter(function (id) {
        return id === cbSelectAllId;
      }).join(' '));
    }
  };
  SelectAllFeature.prototype.onModelChanged = function () {
    if (!this.cbSelectAllVisible) {
      return;
    }
    this.updateStateOfCheckbox();
  };
  SelectAllFeature.prototype.onSelectionChanged = function () {
    if (!this.cbSelectAllVisible) {
      return;
    }
    this.updateStateOfCheckbox();
  };
  SelectAllFeature.prototype.getNextCheckboxState = function (selectionCount) {
    // if no rows, always have it unselected
    if (selectionCount.selected === 0 && selectionCount.notSelected === 0) {
      return false;
    }
    // if mix of selected and unselected, this is the tri-state
    if (selectionCount.selected > 0 && selectionCount.notSelected > 0) {
      return null;
    }
    // only selected
    if (selectionCount.selected > 0) {
      return true;
    }
    // nothing selected
    return false;
  };
  SelectAllFeature.prototype.updateStateOfCheckbox = function () {
    if (this.processingEventFromCheckbox) {
      return;
    }
    this.processingEventFromCheckbox = true;
    var selectionCount = this.getSelectionCount();
    var allSelected = this.getNextCheckboxState(selectionCount);
    this.cbSelectAll.setValue(allSelected);
    this.refreshSelectAllLabel();
    this.processingEventFromCheckbox = false;
  };
  SelectAllFeature.prototype.refreshSelectAllLabel = function () {
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    var checked = this.cbSelectAll.getValue();
    var ariaStatus = checked ? translate('ariaChecked', 'checked') : translate('ariaUnchecked', 'unchecked');
    var ariaLabel = translate('ariaRowSelectAll', 'Press Space to toggle all rows selection');
    this.cbSelectAll.setInputAriaLabel(ariaLabel + " (" + ariaStatus + ")");
  };
  SelectAllFeature.prototype.getSelectionCount = function () {
    var _this = this;
    var selectedCount = 0;
    var notSelectedCount = 0;
    var callback = function (node) {
      if (_this.gridOptionsWrapper.isGroupSelectsChildren() && node.group) {
        return;
      }
      if (node.isSelected()) {
        selectedCount++;
      } else if (!node.selectable) ;else {
        notSelectedCount++;
      }
    };
    if (this.filteredOnly) {
      this.gridApi.forEachNodeAfterFilter(callback);
    } else {
      this.gridApi.forEachNode(callback);
    }
    return {
      notSelected: notSelectedCount,
      selected: selectedCount
    };
  };
  SelectAllFeature.prototype.checkRightRowModelType = function () {
    var rowModelType = this.rowModel.getType();
    var rowModelMatches = rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
    if (!rowModelMatches) {
      console.warn("AG Grid: selectAllCheckbox is only available if using normal row model, you are using " + rowModelType);
    }
  };
  SelectAllFeature.prototype.onCbSelectAll = function () {
    if (this.processingEventFromCheckbox) {
      return;
    }
    if (!this.cbSelectAllVisible) {
      return;
    }
    var value = this.cbSelectAll.getValue();
    if (value) {
      this.selectionController.selectAllRowNodes(this.filteredOnly);
    } else {
      this.selectionController.deselectAllRowNodes(this.filteredOnly);
    }
  };
  SelectAllFeature.prototype.isCheckboxSelection = function () {
    var result = this.column.getColDef().headerCheckboxSelection;
    if (typeof result === 'function') {
      var func = result;
      result = func({
        column: this.column,
        colDef: this.column.getColDef(),
        columnApi: this.columnApi,
        api: this.gridApi
      });
    }
    if (result) {
      if (this.gridOptionsWrapper.isRowModelServerSide()) {
        console.warn('headerCheckboxSelection is not supported for Server Side Row Model');
        return false;
      }
      if (this.gridOptionsWrapper.isRowModelInfinite()) {
        console.warn('headerCheckboxSelection is not supported for Infinite Row Model');
        return false;
      }
      if (this.gridOptionsWrapper.isRowModelViewport()) {
        console.warn('headerCheckboxSelection is not supported for Viewport Row Model');
        return false;
      }
      // otherwise the row model is compatible, so return true
      return true;
    }
    return false;
  };
  __decorate$I([Autowired('gridApi')], SelectAllFeature.prototype, "gridApi", void 0);
  __decorate$I([Autowired('columnApi')], SelectAllFeature.prototype, "columnApi", void 0);
  __decorate$I([Autowired('rowModel')], SelectAllFeature.prototype, "rowModel", void 0);
  __decorate$I([Autowired('selectionController')], SelectAllFeature.prototype, "selectionController", void 0);
  __decorate$I([PostConstruct], SelectAllFeature.prototype, "postConstruct", null);
  return SelectAllFeature;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$R =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AbstractHeaderWrapper = /** @class */function (_super) {
  __extends$R(AbstractHeaderWrapper, _super);
  function AbstractHeaderWrapper() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  AbstractHeaderWrapper.prototype.shouldStopEventPropagation = function (e) {
    var _a = this.focusController.getFocusedHeader(),
      headerRowIndex = _a.headerRowIndex,
      column = _a.column;
    return isUserSuppressingHeaderKeyboardEvent(this.gridOptionsWrapper, e, headerRowIndex, column);
  };
  AbstractHeaderWrapper.prototype.getColumn = function () {
    return this.column;
  };
  AbstractHeaderWrapper.prototype.getPinned = function () {
    return this.pinned;
  };
  return AbstractHeaderWrapper;
}(ManagedFocusComponent);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$S =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$J =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HeaderWrapperComp = /** @class */function (_super) {
  __extends$S(HeaderWrapperComp, _super);
  function HeaderWrapperComp(column, pinned) {
    var _this = _super.call(this, HeaderWrapperComp.TEMPLATE) || this;
    _this.headerCompVersion = 0;
    _this.refreshFunctions = [];
    _this.column = column;
    _this.pinned = pinned;
    return _this;
  }
  HeaderWrapperComp.prototype.postConstruct = function () {
    _super.prototype.postConstruct.call(this);
    this.colDefVersion = this.columnController.getColDefVersion();
    this.updateState();
    this.setupWidth();
    this.setupMovingCss();
    this.setupTooltip();
    this.setupResize();
    this.setupMenuClass();
    this.setupSortableClass();
    this.addColumnHoverListener();
    this.addActiveHeaderMouseListeners();
    this.createManagedBean(new HoverFeature([this.column], this.getGui()));
    this.addManagedListener(this.column, Column.EVENT_FILTER_ACTIVE_CHANGED, this.onFilterChanged.bind(this));
    this.onFilterChanged();
    this.createManagedBean(new SelectAllFeature(this.cbSelectAll, this.column));
    this.cbSelectAll.setParentComponent(this);
    this.createManagedBean(new SetLeftFeature(this.column, this.getGui(), this.beans));
    this.addAttributes();
    CssClassApplier.addHeaderClassesFromColDef(this.column.getColDef(), this.getGui(), this.gridOptionsWrapper, this.column, null);
    this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, this.onColumnValueChanged.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onColumnRowGroupChanged.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, this.onColumnPivotChanged.bind(this));
    this.appendHeaderComp();
  };
  HeaderWrapperComp.prototype.onColumnRowGroupChanged = function () {
    this.checkDisplayName();
  };
  HeaderWrapperComp.prototype.onColumnPivotChanged = function () {
    this.checkDisplayName();
  };
  HeaderWrapperComp.prototype.onColumnValueChanged = function () {
    this.checkDisplayName();
  };
  HeaderWrapperComp.prototype.checkDisplayName = function () {
    // display name can change if aggFunc different, eg sum(Gold) is now max(Gold)
    if (this.displayName !== this.calculateDisplayName()) {
      this.refresh();
    }
  };
  HeaderWrapperComp.prototype.updateState = function () {
    var colDef = this.column.getColDef();
    this.sortable = colDef.sortable;
    this.displayName = this.calculateDisplayName();
    this.draggable = this.workOutDraggable();
  };
  HeaderWrapperComp.prototype.calculateDisplayName = function () {
    return this.columnController.getDisplayNameForColumn(this.column, 'header', true);
  };
  HeaderWrapperComp.prototype.onNewColumnsLoaded = function () {
    var colDefVersionNow = this.columnController.getColDefVersion();
    if (colDefVersionNow != this.colDefVersion) {
      this.colDefVersion = colDefVersionNow;
      this.refresh();
    }
  };
  HeaderWrapperComp.prototype.refresh = function () {
    this.updateState();
    this.refreshHeaderComp();
    this.refreshFunctions.forEach(function (f) {
      return f();
    });
  };
  HeaderWrapperComp.prototype.refreshHeaderComp = function () {
    // if no header comp created yet, it's cos of async creation, so first version is yet
    // to get here, in which case nothing to refresh
    if (!this.headerComp) {
      return;
    }
    var colDef = this.column.getColDef();
    var newHeaderCompConfigured = this.colDefHeaderComponent != colDef.headerComponent || this.colDefHeaderComponentFramework != colDef.headerComponentFramework;
    var headerCompRefreshed = newHeaderCompConfigured ? false : this.attemptHeaderCompRefresh();
    if (headerCompRefreshed) {
      var dragSourceIsMissing = this.draggable && !this.moveDragSource;
      var dragSourceNeedsRemoving = !this.draggable && this.moveDragSource;
      if (dragSourceIsMissing || dragSourceNeedsRemoving) {
        this.attachDraggingToHeaderComp();
      }
    } else {
      this.appendHeaderComp();
    }
  };
  HeaderWrapperComp.prototype.destroyHeaderComp = function () {
    if (this.headerComp) {
      this.getGui().removeChild(this.headerCompGui);
      this.headerComp = this.destroyBean(this.headerComp);
      this.headerCompGui = undefined;
    }
    this.removeMoveDragSource();
  };
  HeaderWrapperComp.prototype.removeMoveDragSource = function () {
    if (this.moveDragSource) {
      this.dragAndDropService.removeDragSource(this.moveDragSource);
      this.moveDragSource = undefined;
    }
  };
  HeaderWrapperComp.prototype.attemptHeaderCompRefresh = function () {
    // if no refresh method, then we want to replace the headerComp
    if (!this.headerComp.refresh) {
      return false;
    }
    // if the cell renderer has a refresh method, we call this instead of doing a refresh
    var params = this.createParams();
    // take any custom params off of the user
    var finalParams = this.userComponentFactory.createFinalParams(this.getComponentHolder(), 'headerComponent', params);
    var res = this.headerComp.refresh(finalParams);
    return res;
  };
  HeaderWrapperComp.prototype.addActiveHeaderMouseListeners = function () {
    var _this = this;
    var listener = function (e) {
      return _this.setActiveHeader(e.type === 'mouseenter');
    };
    this.addManagedListener(this.getGui(), 'mouseenter', listener);
    this.addManagedListener(this.getGui(), 'mouseleave', listener);
  };
  HeaderWrapperComp.prototype.setActiveHeader = function (active) {
    addOrRemoveCssClass(this.getGui(), 'ag-header-active', active);
  };
  HeaderWrapperComp.prototype.onFocusIn = function (e) {
    if (!this.getGui().contains(e.relatedTarget)) {
      var headerRow = this.getParentComponent();
      this.focusController.setFocusedHeader(headerRow.getRowIndex(), this.getColumn());
    }
    this.setActiveHeader(true);
  };
  HeaderWrapperComp.prototype.onFocusOut = function (e) {
    if (this.getGui().contains(e.relatedTarget)) {
      return;
    }
    this.setActiveHeader(false);
  };
  HeaderWrapperComp.prototype.handleKeyDown = function (e) {
    var headerComp = this.headerComp;
    if (!headerComp) {
      return;
    }
    if (e.keyCode === KeyCode.SPACE) {
      var checkbox = this.cbSelectAll;
      if (checkbox.isDisplayed() && !checkbox.getGui().contains(document.activeElement)) {
        e.preventDefault();
        checkbox.setValue(!checkbox.getValue());
      }
    }
    if (e.keyCode === KeyCode.ENTER) {
      if (e.ctrlKey || e.metaKey) {
        if (this.menuEnabled && headerComp.showMenu) {
          e.preventDefault();
          headerComp.showMenu();
        }
      } else if (this.sortable) {
        var multiSort = e.shiftKey;
        this.sortController.progressSort(this.column, multiSort, "uiColumnSorted");
      }
    }
  };
  HeaderWrapperComp.prototype.onTabKeyDown = function () {};
  HeaderWrapperComp.prototype.getComponentHolder = function () {
    return this.column.getColDef();
  };
  HeaderWrapperComp.prototype.addColumnHoverListener = function () {
    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HOVER_CHANGED, this.onColumnHover.bind(this));
    this.onColumnHover();
  };
  HeaderWrapperComp.prototype.onColumnHover = function () {
    var isHovered = this.columnHoverService.isHovered(this.column);
    addOrRemoveCssClass(this.getGui(), 'ag-column-hover', isHovered);
  };
  HeaderWrapperComp.prototype.setupSortableClass = function () {
    var _this = this;
    var eGui = this.getGui();
    var updateSortableCssClass = function () {
      addOrRemoveCssClass(eGui, 'ag-header-cell-sortable', !!_this.sortable);
    };
    var updateAriaSort = function () {
      if (_this.sortable) {
        setAriaSort(eGui, getAriaSortState(_this.column));
      } else {
        removeAriaSort(eGui);
      }
    };
    updateSortableCssClass();
    updateAriaSort();
    this.refreshFunctions.push(updateSortableCssClass);
    this.refreshFunctions.push(updateAriaSort);
    this.addManagedListener(this.column, Column.EVENT_SORT_CHANGED, updateAriaSort.bind(this));
  };
  HeaderWrapperComp.prototype.onFilterChanged = function () {
    var filterPresent = this.column.isFilterActive();
    addOrRemoveCssClass(this.getGui(), 'ag-header-cell-filtered', filterPresent);
  };
  HeaderWrapperComp.prototype.appendHeaderComp = function () {
    this.headerCompVersion++;
    var colDef = this.column.getColDef();
    this.colDefHeaderComponent = colDef.headerComponent;
    this.colDefHeaderComponentFramework = colDef.headerComponentFramework;
    var params = this.createParams();
    var callback = this.afterHeaderCompCreated.bind(this, this.headerCompVersion);
    this.userComponentFactory.newHeaderComponent(params).then(callback);
  };
  HeaderWrapperComp.prototype.createParams = function () {
    var _this = this;
    var colDef = this.column.getColDef();
    this.menuEnabled = this.menuFactory.isMenuEnabled(this.column) && !colDef.suppressMenu;
    var params = {
      column: this.column,
      displayName: this.displayName,
      enableSorting: colDef.sortable,
      enableMenu: this.menuEnabled,
      showColumnMenu: function (source) {
        _this.gridApi.showColumnMenuAfterButtonClick(_this.column, source);
      },
      progressSort: function (multiSort) {
        _this.sortController.progressSort(_this.column, !!multiSort, "uiColumnSorted");
      },
      setSort: function (sort, multiSort) {
        _this.sortController.setSortForColumn(_this.column, sort, !!multiSort, "uiColumnSorted");
      },
      api: this.gridApi,
      columnApi: this.columnApi,
      context: this.gridOptionsWrapper.getContext(),
      eGridHeader: this.getGui()
    };
    return params;
  };
  HeaderWrapperComp.prototype.afterHeaderCompCreated = function (version, headerComp) {
    if (version != this.headerCompVersion || !this.isAlive()) {
      this.destroyBean(headerComp);
      return;
    }
    this.destroyHeaderComp();
    this.headerComp = headerComp;
    this.headerCompGui = headerComp.getGui();
    this.getGui().appendChild(this.headerCompGui);
    this.attachDraggingToHeaderComp();
  };
  HeaderWrapperComp.prototype.onColumnMovingChanged = function () {
    // this function adds or removes the moving css, based on if the col is moving.
    // this is what makes the header go dark when it is been moved (gives impression to
    // user that the column was picked up).
    if (this.column.isMoving()) {
      addCssClass(this.getGui(), 'ag-header-cell-moving');
    } else {
      removeCssClass(this.getGui(), 'ag-header-cell-moving');
    }
  };
  HeaderWrapperComp.prototype.workOutDraggable = function () {
    var colDef = this.column.getColDef();
    var isSuppressMovableColumns = this.gridOptionsWrapper.isSuppressMovableColumns();
    var colCanMove = !isSuppressMovableColumns && !colDef.suppressMovable && !colDef.lockPosition;
    // we should still be allowed drag the column, even if it can't be moved, if the column
    // can be dragged to a rowGroup or pivot drop zone
    return !!colCanMove || !!colDef.enableRowGroup || !!colDef.enablePivot;
  };
  HeaderWrapperComp.prototype.attachDraggingToHeaderComp = function () {
    var _this = this;
    this.removeMoveDragSource();
    if (!this.draggable) {
      return;
    }
    this.moveDragSource = {
      type: exports.DragSourceType.HeaderCell,
      eElement: this.headerCompGui,
      defaultIconName: DragAndDropService.ICON_HIDE,
      getDragItem: function () {
        return _this.createDragItem();
      },
      dragItemName: this.displayName,
      onDragStarted: function () {
        return _this.column.setMoving(true, "uiColumnMoved");
      },
      onDragStopped: function () {
        return _this.column.setMoving(false, "uiColumnMoved");
      }
    };
    this.dragAndDropService.addDragSource(this.moveDragSource, true);
  };
  HeaderWrapperComp.prototype.createDragItem = function () {
    var visibleState = {};
    visibleState[this.column.getId()] = this.column.isVisible();
    return {
      columns: [this.column],
      visibleState: visibleState
    };
  };
  HeaderWrapperComp.prototype.setupResize = function () {
    var _this = this;
    var colDef = this.getComponentHolder();
    var destroyResizeFuncs = [];
    var canResize;
    var canAutosize;
    var addResize = function () {
      setDisplayed(_this.eResize, canResize);
      if (!canResize) {
        return;
      }
      var finishedWithResizeFunc = _this.horizontalResizeService.addResizeBar({
        eResizeBar: _this.eResize,
        onResizeStart: _this.onResizeStart.bind(_this),
        onResizing: _this.onResizing.bind(_this, false),
        onResizeEnd: _this.onResizing.bind(_this, true)
      });
      destroyResizeFuncs.push(finishedWithResizeFunc);
      if (canAutosize) {
        var skipHeaderOnAutoSize_1 = _this.gridOptionsWrapper.isSkipHeaderOnAutoSize();
        var autoSizeColListener_1 = function () {
          _this.columnController.autoSizeColumn(_this.column, skipHeaderOnAutoSize_1, "uiColumnResized");
        };
        _this.eResize.addEventListener('dblclick', autoSizeColListener_1);
        var touchListener_1 = new TouchListener(_this.eResize);
        touchListener_1.addEventListener(TouchListener.EVENT_DOUBLE_TAP, autoSizeColListener_1);
        _this.addDestroyFunc(function () {
          _this.eResize.removeEventListener('dblclick', autoSizeColListener_1);
          touchListener_1.removeEventListener(TouchListener.EVENT_DOUBLE_TAP, autoSizeColListener_1);
          touchListener_1.destroy();
        });
      }
    };
    var removeResize = function () {
      destroyResizeFuncs.forEach(function (f) {
        return f();
      });
      destroyResizeFuncs.length = 0;
    };
    var refresh = function () {
      var resize = _this.column.isResizable();
      var autoSize = !_this.gridOptionsWrapper.isSuppressAutoSize() && !colDef.suppressAutoSize;
      var propertyChange = resize !== canResize || autoSize !== canAutosize;
      if (propertyChange) {
        canResize = resize;
        canAutosize = autoSize;
        removeResize();
        addResize();
      }
    };
    refresh();
    this.addDestroyFunc(removeResize);
    this.refreshFunctions.push(refresh);
  };
  HeaderWrapperComp.prototype.onResizing = function (finished, resizeAmount) {
    var resizeAmountNormalised = this.normaliseResizeAmount(resizeAmount);
    var columnWidths = [{
      key: this.column,
      newWidth: this.resizeStartWidth + resizeAmountNormalised
    }];
    this.columnController.setColumnWidths(columnWidths, this.resizeWithShiftKey, finished, "uiColumnDragged");
    if (finished) {
      removeCssClass(this.getGui(), 'ag-column-resizing');
    }
  };
  HeaderWrapperComp.prototype.onResizeStart = function (shiftKey) {
    this.resizeStartWidth = this.column.getActualWidth();
    this.resizeWithShiftKey = shiftKey;
    addCssClass(this.getGui(), 'ag-column-resizing');
  };
  HeaderWrapperComp.prototype.getTooltipParams = function () {
    var res = _super.prototype.getTooltipParams.call(this);
    res.location = 'header';
    res.colDef = this.column.getColDef();
    return res;
  };
  HeaderWrapperComp.prototype.setupTooltip = function () {
    var _this = this;
    var refresh = function () {
      var newTooltipText = _this.column.getColDef().headerTooltip;
      _this.setTooltip(escapeString(newTooltipText));
    };
    refresh();
    this.refreshFunctions.push(refresh);
  };
  HeaderWrapperComp.prototype.setupMovingCss = function () {
    this.addManagedListener(this.column, Column.EVENT_MOVING_CHANGED, this.onColumnMovingChanged.bind(this));
    this.onColumnMovingChanged();
  };
  HeaderWrapperComp.prototype.addAttributes = function () {
    this.getGui().setAttribute("col-id", this.column.getColId());
  };
  HeaderWrapperComp.prototype.setupWidth = function () {
    this.addManagedListener(this.column, Column.EVENT_WIDTH_CHANGED, this.onColumnWidthChanged.bind(this));
    this.onColumnWidthChanged();
  };
  HeaderWrapperComp.prototype.setupMenuClass = function () {
    this.addManagedListener(this.column, Column.EVENT_MENU_VISIBLE_CHANGED, this.onMenuVisible.bind(this));
  };
  HeaderWrapperComp.prototype.onMenuVisible = function () {
    this.addOrRemoveCssClass('ag-column-menu-visible', this.column.isMenuVisible());
  };
  HeaderWrapperComp.prototype.onColumnWidthChanged = function () {
    this.getGui().style.width = this.column.getActualWidth() + 'px';
  };
  // optionally inverts the drag, depending on pinned and RTL
  // note - this method is duplicated in RenderedHeaderGroupCell - should refactor out?
  HeaderWrapperComp.prototype.normaliseResizeAmount = function (dragChange) {
    var result = dragChange;
    if (this.gridOptionsWrapper.isEnableRtl()) {
      // for RTL, dragging left makes the col bigger, except when pinning left
      if (this.pinned !== Constants.PINNED_LEFT) {
        result *= -1;
      }
    } else {
      // for LTR (ie normal), dragging left makes the col smaller, except when pinning right
      if (this.pinned === Constants.PINNED_RIGHT) {
        result *= -1;
      }
    }
    return result;
  };
  HeaderWrapperComp.TEMPLATE = "<div class=\"ag-header-cell\" role=\"columnheader\" unselectable=\"on\" tabindex=\"-1\">\n            <div ref=\"eResize\" class=\"ag-header-cell-resize\" role=\"presentation\"></div>\n            <ag-checkbox ref=\"cbSelectAll\" class=\"ag-header-select-all\" role=\"presentation\"></ag-checkbox>\n        </div>";
  __decorate$J([Autowired('dragAndDropService')], HeaderWrapperComp.prototype, "dragAndDropService", void 0);
  __decorate$J([Autowired('columnController')], HeaderWrapperComp.prototype, "columnController", void 0);
  __decorate$J([Autowired('horizontalResizeService')], HeaderWrapperComp.prototype, "horizontalResizeService", void 0);
  __decorate$J([Autowired('menuFactory')], HeaderWrapperComp.prototype, "menuFactory", void 0);
  __decorate$J([Autowired('gridApi')], HeaderWrapperComp.prototype, "gridApi", void 0);
  __decorate$J([Autowired('columnApi')], HeaderWrapperComp.prototype, "columnApi", void 0);
  __decorate$J([Autowired('sortController')], HeaderWrapperComp.prototype, "sortController", void 0);
  __decorate$J([Autowired('userComponentFactory')], HeaderWrapperComp.prototype, "userComponentFactory", void 0);
  __decorate$J([Autowired('columnHoverService')], HeaderWrapperComp.prototype, "columnHoverService", void 0);
  __decorate$J([Autowired('beans')], HeaderWrapperComp.prototype, "beans", void 0);
  __decorate$J([RefSelector('eResize')], HeaderWrapperComp.prototype, "eResize", void 0);
  __decorate$J([RefSelector('cbSelectAll')], HeaderWrapperComp.prototype, "cbSelectAll", void 0);
  __decorate$J([PreDestroy], HeaderWrapperComp.prototype, "destroyHeaderComp", null);
  return HeaderWrapperComp;
}(AbstractHeaderWrapper);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$T =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$K =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HeaderGroupWrapperComp = /** @class */function (_super) {
  __extends$T(HeaderGroupWrapperComp, _super);
  function HeaderGroupWrapperComp(columnGroup, pinned) {
    var _this = _super.call(this, HeaderGroupWrapperComp.TEMPLATE) || this;
    // the children can change, we keep destroy functions related to listening to the children here
    _this.removeChildListenersFuncs = [];
    _this.column = columnGroup;
    _this.pinned = pinned;
    return _this;
  }
  HeaderGroupWrapperComp.prototype.postConstruct = function () {
    _super.prototype.postConstruct.call(this);
    CssClassApplier.addHeaderClassesFromColDef(this.getComponentHolder(), this.getGui(), this.gridOptionsWrapper, null, this.column);
    var displayName = this.columnController.getDisplayNameForColumnGroup(this.column, 'header');
    this.appendHeaderGroupComp(displayName);
    this.setupResize();
    this.addClasses();
    this.setupWidth();
    this.addAttributes();
    this.setupMovingCss();
    this.setupTooltip();
    this.setupExpandable();
    this.createManagedBean(new HoverFeature(this.column.getOriginalColumnGroup().getLeafColumns(), this.getGui()));
    this.createManagedBean(new SetLeftFeature(this.column, this.getGui(), this.beans));
  };
  HeaderGroupWrapperComp.prototype.onFocusIn = function (e) {
    if (!this.getGui().contains(e.relatedTarget)) {
      var headerRow = this.getParentComponent();
      this.beans.focusController.setFocusedHeader(headerRow.getRowIndex(), this.getColumn());
    }
  };
  HeaderGroupWrapperComp.prototype.handleKeyDown = function (e) {
    var activeEl = document.activeElement;
    var eGui = this.getGui();
    var wrapperHasFocus = activeEl === eGui;
    if (!this.expandable || !wrapperHasFocus) {
      return;
    }
    if (e.keyCode === KeyCode.ENTER) {
      var column = this.getColumn();
      var newExpandedValue = !column.isExpanded();
      this.columnController.setColumnGroupOpened(column.getOriginalColumnGroup(), newExpandedValue, "uiColumnExpanded");
    }
  };
  HeaderGroupWrapperComp.prototype.onTabKeyDown = function () {};
  HeaderGroupWrapperComp.prototype.setupExpandable = function () {
    var column = this.getColumn();
    var originalColumnGroup = column.getOriginalColumnGroup();
    this.refreshExpanded();
    this.addManagedListener(originalColumnGroup, OriginalColumnGroup.EVENT_EXPANDABLE_CHANGED, this.refreshExpanded.bind(this));
    this.addManagedListener(originalColumnGroup, OriginalColumnGroup.EVENT_EXPANDED_CHANGED, this.refreshExpanded.bind(this));
  };
  HeaderGroupWrapperComp.prototype.refreshExpanded = function () {
    var column = this.getColumn();
    var eGui = this.getGui();
    var expandable = column.isExpandable();
    var expanded = column.isExpanded();
    this.expandable = expandable;
    if (!expandable) {
      eGui.removeAttribute('aria-expanded');
    } else {
      setAriaExpanded(eGui, expanded);
    }
  };
  HeaderGroupWrapperComp.prototype.setupMovingCss = function () {
    var _this = this;
    var originalColumnGroup = this.column.getOriginalColumnGroup();
    var leafColumns = originalColumnGroup.getLeafColumns();
    leafColumns.forEach(function (col) {
      _this.addManagedListener(col, Column.EVENT_MOVING_CHANGED, _this.onColumnMovingChanged.bind(_this));
    });
    this.onColumnMovingChanged();
  };
  HeaderGroupWrapperComp.prototype.getComponentHolder = function () {
    return this.column.getColGroupDef();
  };
  HeaderGroupWrapperComp.prototype.getTooltipParams = function () {
    var res = _super.prototype.getTooltipParams.call(this);
    res.location = 'headerGroup';
    // this is wrong, but leaving it as i don't want to change code,
    // but the ColumnGroup does not have a ColDef or a Column (although it does have GroupDef and ColumnGroup)
    res.colDef = this.getComponentHolder();
    res.column = this.getColumn();
    return res;
  };
  HeaderGroupWrapperComp.prototype.setupTooltip = function () {
    var colGroupDef = this.getComponentHolder();
    var tooltipText = colGroupDef && colGroupDef.headerTooltip;
    if (tooltipText != null) {
      this.setTooltip(escapeString(tooltipText));
    }
  };
  HeaderGroupWrapperComp.prototype.onColumnMovingChanged = function () {
    // this function adds or removes the moving css, based on if the col is moving.
    // this is what makes the header go dark when it is been moved (gives impression to
    // user that the column was picked up).
    addOrRemoveCssClass(this.getGui(), 'ag-header-cell-moving', this.column.isMoving());
  };
  HeaderGroupWrapperComp.prototype.addAttributes = function () {
    this.getGui().setAttribute("col-id", this.column.getUniqueId());
  };
  HeaderGroupWrapperComp.prototype.appendHeaderGroupComp = function (displayName) {
    var _this = this;
    var params = {
      displayName: displayName,
      columnGroup: this.column,
      setExpanded: function (expanded) {
        _this.columnController.setColumnGroupOpened(_this.column.getOriginalColumnGroup(), expanded, "gridInitializing");
      },
      api: this.gridApi,
      columnApi: this.columnApi,
      context: this.gridOptionsWrapper.getContext()
    };
    if (!displayName) {
      var columnGroup = this.column;
      var leafCols = columnGroup.getLeafColumns();
      // find the top most column group that represents the same columns. so if we are dragging a group, we also
      // want to visually show the parent groups dragging for the same column set. for example imaging 5 levels
      // of grouping, with each group only containing the next group, and the last group containing three columns,
      // then when you move any group (even the lowest level group) you are in-fact moving all the groups, as all
      // the groups represent the same column set.
      while (columnGroup.getParent() && columnGroup.getParent().getLeafColumns().length === leafCols.length) {
        columnGroup = columnGroup.getParent();
      }
      var colGroupDef = columnGroup.getColGroupDef();
      if (colGroupDef) {
        displayName = colGroupDef.headerName;
      }
      if (!displayName) {
        displayName = leafCols ? this.columnController.getDisplayNameForColumn(leafCols[0], 'header', true) : '';
      }
    }
    var callback = this.afterHeaderCompCreated.bind(this, displayName);
    this.userComponentFactory.newHeaderGroupComponent(params).then(callback);
  };
  HeaderGroupWrapperComp.prototype.afterHeaderCompCreated = function (displayName, headerGroupComp) {
    var _this = this;
    this.getGui().appendChild(headerGroupComp.getGui());
    this.addDestroyFunc(function () {
      _this.getContext().destroyBean(headerGroupComp);
    });
    this.setupMove(headerGroupComp.getGui(), displayName);
  };
  HeaderGroupWrapperComp.prototype.addClasses = function () {
    // having different classes below allows the style to not have a bottom border
    // on the group header, if no group is specified
    // columnGroup.getColGroupDef
    var style = this.column.isPadding() ? 'no' : 'with';
    this.addCssClass("ag-header-group-cell-" + style + "-group");
  };
  HeaderGroupWrapperComp.prototype.setupMove = function (eHeaderGroup, displayName) {
    var _this = this;
    if (!eHeaderGroup) {
      return;
    }
    if (this.isSuppressMoving()) {
      return;
    }
    var allLeafColumns = this.column.getOriginalColumnGroup().getLeafColumns();
    var dragSource = {
      type: exports.DragSourceType.HeaderCell,
      eElement: eHeaderGroup,
      defaultIconName: DragAndDropService.ICON_HIDE,
      dragItemName: displayName,
      // we add in the original group leaf columns, so we move both visible and non-visible items
      getDragItem: this.getDragItemForGroup.bind(this),
      onDragStarted: function () {
        return allLeafColumns.forEach(function (col) {
          return col.setMoving(true, "uiColumnDragged");
        });
      },
      onDragStopped: function () {
        return allLeafColumns.forEach(function (col) {
          return col.setMoving(false, "uiColumnDragged");
        });
      }
    };
    this.dragAndDropService.addDragSource(dragSource, true);
    this.addDestroyFunc(function () {
      return _this.dragAndDropService.removeDragSource(dragSource);
    });
  };
  // when moving the columns, we want to move all the columns (contained within the DragItem) in this group in one go,
  // and in the order they are currently in the screen.
  HeaderGroupWrapperComp.prototype.getDragItemForGroup = function () {
    var allColumnsOriginalOrder = this.column.getOriginalColumnGroup().getLeafColumns();
    // capture visible state, used when re-entering grid to dictate which columns should be visible
    var visibleState = {};
    allColumnsOriginalOrder.forEach(function (column) {
      return visibleState[column.getId()] = column.isVisible();
    });
    var allColumnsCurrentOrder = [];
    this.columnController.getAllDisplayedColumns().forEach(function (column) {
      if (allColumnsOriginalOrder.indexOf(column) >= 0) {
        allColumnsCurrentOrder.push(column);
        removeFromArray(allColumnsOriginalOrder, column);
      }
    });
    // we are left with non-visible columns, stick these in at the end
    allColumnsOriginalOrder.forEach(function (column) {
      return allColumnsCurrentOrder.push(column);
    });
    // create and return dragItem
    return {
      columns: allColumnsCurrentOrder,
      visibleState: visibleState
    };
  };
  HeaderGroupWrapperComp.prototype.isSuppressMoving = function () {
    // if any child is fixed, then don't allow moving
    var childSuppressesMoving = false;
    this.column.getLeafColumns().forEach(function (column) {
      if (column.getColDef().suppressMovable || column.getColDef().lockPosition) {
        childSuppressesMoving = true;
      }
    });
    var result = childSuppressesMoving || this.gridOptionsWrapper.isSuppressMovableColumns();
    return result;
  };
  HeaderGroupWrapperComp.prototype.setupWidth = function () {
    // we need to listen to changes in child columns, as they impact our width
    this.addListenersToChildrenColumns();
    // the children belonging to this group can change, so we need to add and remove listeners as they change
    this.addManagedListener(this.column, ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED, this.onDisplayedChildrenChanged.bind(this));
    this.onWidthChanged();
    // the child listeners are not tied to this components life-cycle, as children can get added and removed
    // to the group - hence they are on a different life-cycle. so we must make sure the existing children
    // listeners are removed when we finally get destroyed
    this.addDestroyFunc(this.removeListenersOnChildrenColumns.bind(this));
  };
  HeaderGroupWrapperComp.prototype.onDisplayedChildrenChanged = function () {
    this.addListenersToChildrenColumns();
    this.onWidthChanged();
  };
  HeaderGroupWrapperComp.prototype.addListenersToChildrenColumns = function () {
    var _this = this;
    // first destroy any old listeners
    this.removeListenersOnChildrenColumns();
    // now add new listeners to the new set of children
    var widthChangedListener = this.onWidthChanged.bind(this);
    this.column.getLeafColumns().forEach(function (column) {
      column.addEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);
      column.addEventListener(Column.EVENT_VISIBLE_CHANGED, widthChangedListener);
      _this.removeChildListenersFuncs.push(function () {
        column.removeEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);
        column.removeEventListener(Column.EVENT_VISIBLE_CHANGED, widthChangedListener);
      });
    });
  };
  HeaderGroupWrapperComp.prototype.removeListenersOnChildrenColumns = function () {
    this.removeChildListenersFuncs.forEach(function (func) {
      return func();
    });
    this.removeChildListenersFuncs = [];
  };
  HeaderGroupWrapperComp.prototype.onWidthChanged = function () {
    this.getGui().style.width = this.column.getActualWidth() + 'px';
  };
  HeaderGroupWrapperComp.prototype.setupResize = function () {
    var _this = this;
    this.eHeaderCellResize = this.getRefElement('agResize');
    if (!this.column.isResizable()) {
      removeFromParent(this.eHeaderCellResize);
      return;
    }
    var finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({
      eResizeBar: this.eHeaderCellResize,
      onResizeStart: this.onResizeStart.bind(this),
      onResizing: this.onResizing.bind(this, false),
      onResizeEnd: this.onResizing.bind(this, true)
    });
    this.addDestroyFunc(finishedWithResizeFunc);
    if (!this.gridOptionsWrapper.isSuppressAutoSize()) {
      var skipHeaderOnAutoSize_1 = this.gridOptionsWrapper.isSkipHeaderOnAutoSize();
      this.eHeaderCellResize.addEventListener('dblclick', function (event) {
        // get list of all the column keys we are responsible for
        var keys = [];
        _this.column.getDisplayedLeafColumns().forEach(function (column) {
          // not all cols in the group may be participating with auto-resize
          if (!column.getColDef().suppressAutoSize) {
            keys.push(column.getColId());
          }
        });
        if (keys.length > 0) {
          _this.columnController.autoSizeColumns(keys, skipHeaderOnAutoSize_1, "uiColumnResized");
        }
      });
    }
  };
  HeaderGroupWrapperComp.prototype.onResizeStart = function (shiftKey) {
    var _this = this;
    var leafCols = this.column.getDisplayedLeafColumns();
    this.resizeCols = leafCols.filter(function (col) {
      return col.isResizable();
    });
    this.resizeStartWidth = 0;
    this.resizeCols.forEach(function (col) {
      return _this.resizeStartWidth += col.getActualWidth();
    });
    this.resizeRatios = [];
    this.resizeCols.forEach(function (col) {
      return _this.resizeRatios.push(col.getActualWidth() / _this.resizeStartWidth);
    });
    var takeFromGroup = null;
    if (shiftKey) {
      takeFromGroup = this.columnController.getDisplayedGroupAfter(this.column);
    }
    if (takeFromGroup) {
      var takeFromLeafCols = takeFromGroup.getDisplayedLeafColumns();
      this.resizeTakeFromCols = takeFromLeafCols.filter(function (col) {
        return col.isResizable();
      });
      this.resizeTakeFromStartWidth = 0;
      this.resizeTakeFromCols.forEach(function (col) {
        return _this.resizeTakeFromStartWidth += col.getActualWidth();
      });
      this.resizeTakeFromRatios = [];
      this.resizeTakeFromCols.forEach(function (col) {
        return _this.resizeTakeFromRatios.push(col.getActualWidth() / _this.resizeTakeFromStartWidth);
      });
    } else {
      this.resizeTakeFromCols = null;
      this.resizeTakeFromStartWidth = null;
      this.resizeTakeFromRatios = null;
    }
    addCssClass(this.getGui(), 'ag-column-resizing');
  };
  HeaderGroupWrapperComp.prototype.onResizing = function (finished, resizeAmount) {
    var resizeSets = [];
    var resizeAmountNormalised = this.normaliseDragChange(resizeAmount);
    resizeSets.push({
      columns: this.resizeCols,
      ratios: this.resizeRatios,
      width: this.resizeStartWidth + resizeAmountNormalised
    });
    if (this.resizeTakeFromCols) {
      resizeSets.push({
        columns: this.resizeTakeFromCols,
        ratios: this.resizeTakeFromRatios,
        width: this.resizeTakeFromStartWidth - resizeAmountNormalised
      });
    }
    this.columnController.resizeColumnSets(resizeSets, finished, 'uiColumnDragged');
    if (finished) {
      removeCssClass(this.getGui(), 'ag-column-resizing');
    }
  };
  // optionally inverts the drag, depending on pinned and RTL
  // note - this method is duplicated in RenderedHeaderCell - should refactor out?
  HeaderGroupWrapperComp.prototype.normaliseDragChange = function (dragChange) {
    var result = dragChange;
    if (this.gridOptionsWrapper.isEnableRtl()) {
      // for RTL, dragging left makes the col bigger, except when pinning left
      if (this.pinned !== Constants.PINNED_LEFT) {
        result *= -1;
      }
    } else if (this.pinned === Constants.PINNED_RIGHT) {
      // for LTR (ie normal), dragging left makes the col smaller, except when pinning right
      result *= -1;
    }
    return result;
  };
  HeaderGroupWrapperComp.TEMPLATE = "<div class=\"ag-header-group-cell\" role=\"columnheader\" tabindex=\"-1\">\n            <div ref=\"agResize\" class=\"ag-header-cell-resize\" role=\"presentation\"></div>\n        </div>";
  __decorate$K([Autowired('columnController')], HeaderGroupWrapperComp.prototype, "columnController", void 0);
  __decorate$K([Autowired('horizontalResizeService')], HeaderGroupWrapperComp.prototype, "horizontalResizeService", void 0);
  __decorate$K([Autowired('dragAndDropService')], HeaderGroupWrapperComp.prototype, "dragAndDropService", void 0);
  __decorate$K([Autowired('userComponentFactory')], HeaderGroupWrapperComp.prototype, "userComponentFactory", void 0);
  __decorate$K([Autowired('beans')], HeaderGroupWrapperComp.prototype, "beans", void 0);
  __decorate$K([Autowired('gridApi')], HeaderGroupWrapperComp.prototype, "gridApi", void 0);
  __decorate$K([Autowired('columnApi')], HeaderGroupWrapperComp.prototype, "columnApi", void 0);
  return HeaderGroupWrapperComp;
}(AbstractHeaderWrapper);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$U =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$L =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
// optional floating filter for user provided filters - instead of providing a floating filter,
// they can provide a getModelAsString() method on the filter instead. this class just displays
// the string returned from getModelAsString()
var ReadOnlyFloatingFilter = /** @class */function (_super) {
  __extends$U(ReadOnlyFloatingFilter, _super);
  function ReadOnlyFloatingFilter() {
    return _super.call(this, /* html */"\n            <div class=\"ag-floating-filter-input\" role=\"presentation\">\n                <ag-input-text-field ref=\"eFloatingFilterText\"></ag-input-text-field>\n            </div>") || this;
  }
  // this is a user component, and IComponent has "public destroy()" as part of the interface.
  // so we need to override destroy() just to make the method public.
  ReadOnlyFloatingFilter.prototype.destroy = function () {
    _super.prototype.destroy.call(this);
  };
  ReadOnlyFloatingFilter.prototype.init = function (params) {
    this.params = params;
    var displayName = this.columnController.getDisplayNameForColumn(params.column, 'header', true);
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    this.eFloatingFilterText.setDisabled(true).setInputAriaLabel(displayName + " " + translate('ariaFilterInput', 'Filter Input'));
  };
  ReadOnlyFloatingFilter.prototype.onParentModelChanged = function (parentModel) {
    var _this = this;
    if (!parentModel) {
      this.eFloatingFilterText.setValue('');
      return;
    }
    this.params.parentFilterInstance(function (filterInstance) {
      // it would be nice to check if getModelAsString was present before creating this component,
      // however that is not possible, as React Hooks and VueJS don't attached the methods to the Filter until
      // AFTER the filter is created, not allowing inspection before this (we create floating filters as columns
      // are drawn, but the parent filters are only created when needed).
      if (filterInstance.getModelAsString) {
        var modelAsString = filterInstance.getModelAsString(parentModel);
        _this.eFloatingFilterText.setValue(modelAsString);
      }
    });
  };
  __decorate$L([RefSelector('eFloatingFilterText')], ReadOnlyFloatingFilter.prototype, "eFloatingFilterText", void 0);
  __decorate$L([Autowired('columnController')], ReadOnlyFloatingFilter.prototype, "columnController", void 0);
  return ReadOnlyFloatingFilter;
}(Component);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var FloatingFilterMapper = /** @class */function () {
  function FloatingFilterMapper() {}
  FloatingFilterMapper.getFloatingFilterType = function (filterType) {
    return this.filterToFloatingFilterMapping[filterType];
  };
  FloatingFilterMapper.filterToFloatingFilterMapping = {
    set: 'agSetColumnFloatingFilter',
    agSetColumnFilter: 'agSetColumnFloatingFilter',
    multi: 'agMultiColumnFloatingFilter',
    agMultiColumnFilter: 'agMultiColumnFloatingFilter',
    number: 'agNumberColumnFloatingFilter',
    agNumberColumnFilter: 'agNumberColumnFloatingFilter',
    date: 'agDateColumnFloatingFilter',
    agDateColumnFilter: 'agDateColumnFloatingFilter',
    text: 'agTextColumnFloatingFilter',
    agTextColumnFilter: 'agTextColumnFloatingFilter'
  };
  return FloatingFilterMapper;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$V =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$M =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FloatingFilterWrapper = /** @class */function (_super) {
  __extends$V(FloatingFilterWrapper, _super);
  function FloatingFilterWrapper(column, pinned) {
    var _this = _super.call(this, FloatingFilterWrapper.TEMPLATE) || this;
    _this.column = column;
    _this.pinned = pinned;
    return _this;
  }
  FloatingFilterWrapper.prototype.postConstruct = function () {
    _super.prototype.postConstruct.call(this);
    this.setupFloatingFilter();
    this.setupWidth();
    this.setupLeftPositioning();
    this.setupColumnHover();
    this.createManagedBean(new HoverFeature([this.column], this.getGui()));
    this.addManagedListener(this.eButtonShowMainFilter, 'click', this.showParentFilter.bind(this));
  };
  FloatingFilterWrapper.prototype.onTabKeyDown = function (e) {
    var activeEl = document.activeElement;
    var eGui = this.getGui();
    var wrapperHasFocus = activeEl === eGui;
    if (wrapperHasFocus) {
      return;
    }
    e.preventDefault();
    var nextFocusableEl = this.focusController.findNextFocusableElement(eGui, null, e.shiftKey);
    if (nextFocusableEl) {
      nextFocusableEl.focus();
    } else {
      eGui.focus();
    }
  };
  FloatingFilterWrapper.prototype.handleKeyDown = function (e) {
    var activeEl = document.activeElement;
    var eGui = this.getGui();
    var wrapperHasFocus = activeEl === eGui;
    switch (e.keyCode) {
      case KeyCode.UP:
      case KeyCode.DOWN:
        if (!wrapperHasFocus) {
          e.preventDefault();
        }
      case KeyCode.LEFT:
      case KeyCode.RIGHT:
        if (wrapperHasFocus) {
          return;
        }
        e.stopPropagation();
      case KeyCode.ENTER:
        if (wrapperHasFocus) {
          if (this.focusController.focusInto(eGui)) {
            e.preventDefault();
          }
        }
        break;
      case KeyCode.ESCAPE:
        if (!wrapperHasFocus) {
          this.getGui().focus();
        }
    }
  };
  FloatingFilterWrapper.prototype.onFocusIn = function (e) {
    var eGui = this.getGui();
    if (!eGui.contains(e.relatedTarget)) {
      var headerRow = this.getParentComponent();
      this.beans.focusController.setFocusedHeader(headerRow.getRowIndex(), this.getColumn());
    }
  };
  FloatingFilterWrapper.prototype.setupFloatingFilter = function () {
    var _this = this;
    var colDef = this.column.getColDef();
    if (!colDef.filter || !colDef.floatingFilter) {
      return;
    }
    this.floatingFilterCompPromise = this.getFloatingFilterInstance();
    if (!this.floatingFilterCompPromise) {
      return;
    }
    this.floatingFilterCompPromise.then(function (compInstance) {
      if (compInstance) {
        _this.setupWithFloatingFilter(compInstance);
        _this.setupSyncWithFilter();
      }
    });
  };
  FloatingFilterWrapper.prototype.setupLeftPositioning = function () {
    var setLeftFeature = new SetLeftFeature(this.column, this.getGui(), this.beans);
    this.createManagedBean(setLeftFeature);
  };
  FloatingFilterWrapper.prototype.setupSyncWithFilter = function () {
    var _this = this;
    var syncWithFilter = function (filterChangedEvent) {
      _this.onParentModelChanged(_this.currentParentModel(), filterChangedEvent);
    };
    this.addManagedListener(this.column, Column.EVENT_FILTER_CHANGED, syncWithFilter);
    if (this.filterManager.isFilterActive(this.column)) {
      syncWithFilter(null);
    }
  };
  // linked to event listener in template
  FloatingFilterWrapper.prototype.showParentFilter = function () {
    var eventSource = this.suppressFilterButton ? this.eFloatingFilterBody : this.eButtonShowMainFilter;
    this.menuFactory.showMenuAfterButtonClick(this.column, eventSource, 'filterMenuTab', ['filterMenuTab']);
  };
  FloatingFilterWrapper.prototype.setupColumnHover = function () {
    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HOVER_CHANGED, this.onColumnHover.bind(this));
    this.onColumnHover();
  };
  FloatingFilterWrapper.prototype.onColumnHover = function () {
    addOrRemoveCssClass(this.getGui(), 'ag-column-hover', this.columnHoverService.isHovered(this.column));
  };
  FloatingFilterWrapper.prototype.setupWidth = function () {
    this.addManagedListener(this.column, Column.EVENT_WIDTH_CHANGED, this.onColumnWidthChanged.bind(this));
    this.onColumnWidthChanged();
  };
  FloatingFilterWrapper.prototype.onColumnWidthChanged = function () {
    this.getGui().style.width = this.column.getActualWidth() + "px";
  };
  FloatingFilterWrapper.prototype.setupWithFloatingFilter = function (floatingFilterComp) {
    var _this = this;
    var disposeFunc = function () {
      _this.getContext().destroyBean(floatingFilterComp);
    };
    if (!this.isAlive()) {
      disposeFunc();
      return;
    }
    this.addDestroyFunc(disposeFunc);
    var floatingFilterCompUi = floatingFilterComp.getGui();
    addOrRemoveCssClass(this.eFloatingFilterBody, 'ag-floating-filter-full-body', this.suppressFilterButton);
    addOrRemoveCssClass(this.eFloatingFilterBody, 'ag-floating-filter-body', !this.suppressFilterButton);
    setDisplayed(this.eButtonWrapper, !this.suppressFilterButton);
    var eIcon = createIconNoSpan('filter', this.gridOptionsWrapper, this.column);
    this.eButtonShowMainFilter.appendChild(eIcon);
    this.eFloatingFilterBody.appendChild(floatingFilterCompUi);
    if (floatingFilterComp.afterGuiAttached) {
      floatingFilterComp.afterGuiAttached();
    }
  };
  FloatingFilterWrapper.prototype.parentFilterInstance = function (callback) {
    var filterComponent = this.getFilterComponent();
    if (filterComponent) {
      filterComponent.then(callback);
    }
  };
  FloatingFilterWrapper.prototype.getFilterComponent = function (createIfDoesNotExist) {
    if (createIfDoesNotExist === void 0) {
      createIfDoesNotExist = true;
    }
    return this.filterManager.getFilterComponent(this.column, 'NO_UI', createIfDoesNotExist);
  };
  FloatingFilterWrapper.getDefaultFloatingFilterType = function (def) {
    if (def == null) {
      return null;
    }
    var defaultFloatingFilterType = null;
    if (typeof def.filter === 'string') {
      // will be undefined if not in the map
      defaultFloatingFilterType = FloatingFilterMapper.getFloatingFilterType(def.filter);
    } else if (def.filterFramework) ;else if (def.filter === true) {
      var setFilterModuleLoaded = ModuleRegistry.isRegistered(exports.ModuleNames.SetFilterModule);
      defaultFloatingFilterType = setFilterModuleLoaded ? 'agSetColumnFloatingFilter' : 'agTextColumnFloatingFilter';
    }
    return defaultFloatingFilterType;
  };
  FloatingFilterWrapper.prototype.getFloatingFilterInstance = function () {
    var colDef = this.column.getColDef();
    var defaultFloatingFilterType = FloatingFilterWrapper.getDefaultFloatingFilterType(colDef);
    var filterParams = this.filterManager.createFilterParams(this.column, colDef);
    var finalFilterParams = this.userComponentFactory.createFinalParams(colDef, 'filter', filterParams);
    var params = {
      api: this.gridApi,
      column: this.column,
      filterParams: finalFilterParams,
      currentParentModel: this.currentParentModel.bind(this),
      parentFilterInstance: this.parentFilterInstance.bind(this),
      showParentFilter: this.showParentFilter.bind(this),
      onFloatingFilterChanged: this.onFloatingFilterChanged.bind(this),
      suppressFilterButton: false // This one might be overridden from the colDef
    };
    // this is unusual - we need a params value OUTSIDE the component the params are for.
    // the params are for the floating filter component, but this property is actually for the wrapper.
    this.suppressFilterButton = colDef.floatingFilterComponentParams ? !!colDef.floatingFilterComponentParams.suppressFilterButton : false;
    var promise = this.userComponentFactory.newFloatingFilterComponent(colDef, params, defaultFloatingFilterType);
    if (!promise) {
      var compInstance = this.userComponentFactory.createUserComponentFromConcreteClass(ReadOnlyFloatingFilter, params);
      promise = AgPromise.resolve(compInstance);
    }
    return promise;
  };
  FloatingFilterWrapper.prototype.currentParentModel = function () {
    var filterComponent = this.getFilterComponent(false);
    return filterComponent ? filterComponent.resolveNow(null, function (filter) {
      return filter && filter.getModel();
    }) : null;
  };
  FloatingFilterWrapper.prototype.onParentModelChanged = function (model, filterChangedEvent) {
    if (!this.floatingFilterCompPromise) {
      return;
    }
    this.floatingFilterCompPromise.then(function (comp) {
      return comp && comp.onParentModelChanged(model, filterChangedEvent);
    });
  };
  FloatingFilterWrapper.prototype.onFloatingFilterChanged = function () {
    console.warn('AG Grid: since version 21.x, how floating filters are implemented has changed. ' + 'Instead of calling params.onFloatingFilterChanged(), get a reference to the main filter via ' + 'params.parentFilterInstance() and then set a value on the parent filter directly.');
  };
  FloatingFilterWrapper.TEMPLATE = "<div class=\"ag-header-cell\" role=\"gridcell\" tabindex=\"-1\">\n            <div class=\"ag-floating-filter-full-body\" ref=\"eFloatingFilterBody\" role=\"presentation\"></div>\n            <div class=\"ag-floating-filter-button ag-hidden\" ref=\"eButtonWrapper\" role=\"presentation\">\n                <button type=\"button\" aria-label=\"Open Filter Menu\" class=\"ag-floating-filter-button-button\" ref=\"eButtonShowMainFilter\" tabindex=\"-1\"></button>\n            </div>\n        </div>";
  __decorate$M([Autowired('columnHoverService')], FloatingFilterWrapper.prototype, "columnHoverService", void 0);
  __decorate$M([Autowired('userComponentFactory')], FloatingFilterWrapper.prototype, "userComponentFactory", void 0);
  __decorate$M([Autowired('gridApi')], FloatingFilterWrapper.prototype, "gridApi", void 0);
  __decorate$M([Autowired('columnApi')], FloatingFilterWrapper.prototype, "columnApi", void 0);
  __decorate$M([Autowired('filterManager')], FloatingFilterWrapper.prototype, "filterManager", void 0);
  __decorate$M([Autowired('menuFactory')], FloatingFilterWrapper.prototype, "menuFactory", void 0);
  __decorate$M([Autowired('beans')], FloatingFilterWrapper.prototype, "beans", void 0);
  __decorate$M([RefSelector('eFloatingFilterBody')], FloatingFilterWrapper.prototype, "eFloatingFilterBody", void 0);
  __decorate$M([RefSelector('eButtonWrapper')], FloatingFilterWrapper.prototype, "eButtonWrapper", void 0);
  __decorate$M([RefSelector('eButtonShowMainFilter')], FloatingFilterWrapper.prototype, "eButtonShowMainFilter", void 0);
  return FloatingFilterWrapper;
}(AbstractHeaderWrapper);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$W =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$N =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HeaderRowType;
(function (HeaderRowType) {
  HeaderRowType[HeaderRowType["COLUMN_GROUP"] = 0] = "COLUMN_GROUP";
  HeaderRowType[HeaderRowType["COLUMN"] = 1] = "COLUMN";
  HeaderRowType[HeaderRowType["FLOATING_FILTER"] = 2] = "FLOATING_FILTER";
})(HeaderRowType || (HeaderRowType = {}));
var HeaderRowComp = /** @class */function (_super) {
  __extends$W(HeaderRowComp, _super);
  function HeaderRowComp(dept, type, pinned) {
    var _this = _super.call(this, /* html */"<div class=\"ag-header-row\" role=\"row\"></div>") || this;
    _this.headerComps = {};
    _this.setRowIndex(dept);
    _this.type = type;
    _this.pinned = pinned;
    var niceClassName = HeaderRowType[type].toLowerCase().replace(/_/g, '-');
    _this.addCssClass("ag-header-row-" + niceClassName);
    if (isBrowserSafari()) {
      // fix for a Safari rendering bug that caused the header to flicker above chart panels
      // as you move the mouse over the header
      _this.getGui().style.transform = 'translateZ(0)';
    }
    return _this;
  }
  HeaderRowComp.prototype.forEachHeaderElement = function (callback) {
    var _this = this;
    Object.keys(this.headerComps).forEach(function (key) {
      callback(_this.headerComps[key]);
    });
  };
  HeaderRowComp.prototype.setRowIndex = function (rowIndex) {
    this.dept = rowIndex;
    setAriaRowIndex(this.getGui(), rowIndex + 1);
  };
  HeaderRowComp.prototype.getRowIndex = function () {
    return this.dept;
  };
  HeaderRowComp.prototype.getType = function () {
    return this.type;
  };
  HeaderRowComp.prototype.destroyAllChildComponents = function () {
    var idsOfAllChildren = Object.keys(this.headerComps);
    this.destroyChildComponents(idsOfAllChildren);
  };
  HeaderRowComp.prototype.destroyChildComponents = function (idsToDestroy) {
    var _this = this;
    idsToDestroy.forEach(function (id) {
      var childHeaderWrapper = _this.headerComps[id];
      _this.getGui().removeChild(childHeaderWrapper.getGui());
      _this.destroyBean(childHeaderWrapper);
      delete _this.headerComps[id];
    });
  };
  HeaderRowComp.prototype.onRowHeightChanged = function () {
    var headerRowCount = this.columnController.getHeaderRowCount();
    var sizes = [];
    var numberOfFloating = 0;
    var groupHeight;
    var headerHeight;
    if (this.columnController.isPivotMode()) {
      groupHeight = this.gridOptionsWrapper.getPivotGroupHeaderHeight();
      headerHeight = this.gridOptionsWrapper.getPivotHeaderHeight();
    } else {
      if (this.columnController.hasFloatingFilters()) {
        headerRowCount++;
        numberOfFloating = 1;
      }
      groupHeight = this.gridOptionsWrapper.getGroupHeaderHeight();
      headerHeight = this.gridOptionsWrapper.getHeaderHeight();
    }
    var numberOfNonGroups = 1 + numberOfFloating;
    var numberOfGroups = headerRowCount - numberOfNonGroups;
    for (var i = 0; i < numberOfGroups; i++) {
      sizes.push(groupHeight);
    }
    sizes.push(headerHeight);
    for (var i = 0; i < numberOfFloating; i++) {
      sizes.push(this.gridOptionsWrapper.getFloatingFiltersHeight());
    }
    var rowHeight = 0;
    for (var i = 0; i < this.dept; i++) {
      rowHeight += sizes[i];
    }
    this.getGui().style.top = rowHeight + 'px';
    this.getGui().style.height = sizes[this.dept] + 'px';
  };
  //noinspection JSUnusedLocalSymbols
  HeaderRowComp.prototype.init = function () {
    this.onRowHeightChanged();
    this.onVirtualColumnsChanged();
    this.setWidth();
    this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
    this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
    this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
    this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
    this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, this.onRowHeightChanged.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_VIRTUAL_COLUMNS_CHANGED, this.onVirtualColumnsChanged.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));
    // this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
  };

  HeaderRowComp.prototype.onColumnResized = function () {
    this.setWidth();
  };
  HeaderRowComp.prototype.setWidth = function () {
    var width = this.getWidthForRow();
    this.getGui().style.width = width + 'px';
  };
  HeaderRowComp.prototype.getWidthForRow = function () {
    var printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
    if (printLayout) {
      var centerRow = missing(this.pinned);
      if (centerRow) {
        return this.columnController.getContainerWidth(Constants.PINNED_RIGHT) + this.columnController.getContainerWidth(Constants.PINNED_LEFT) + this.columnController.getContainerWidth(null);
      }
      return 0;
    }
    // if not printing, just return the width as normal
    return this.columnController.getContainerWidth(this.pinned);
  };
  HeaderRowComp.prototype.onDisplayedColumnsChanged = function () {
    this.onVirtualColumnsChanged();
    this.setWidth();
  };
  HeaderRowComp.prototype.getColumnsInViewport = function () {
    var printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
    return printLayout ? this.getColumnsInViewportPrintLayout() : this.getColumnsInViewportNormalLayout();
  };
  HeaderRowComp.prototype.getColumnsInViewportPrintLayout = function () {
    var _this = this;
    // for print layout, we add all columns into the center
    if (this.pinned != null) {
      return [];
    }
    var viewportColumns = [];
    var actualDepth = this.getActualDepth();
    [Constants.PINNED_LEFT, null, Constants.PINNED_RIGHT].forEach(function (pinned) {
      var items = _this.columnController.getVirtualHeaderGroupRow(pinned, actualDepth);
      viewportColumns = viewportColumns.concat(items);
    });
    return viewportColumns;
  };
  HeaderRowComp.prototype.getActualDepth = function () {
    return this.type == HeaderRowType.FLOATING_FILTER ? this.dept - 1 : this.dept;
  };
  HeaderRowComp.prototype.getColumnsInViewportNormalLayout = function () {
    // when in normal layout, we add the columns for that container only
    return this.columnController.getVirtualHeaderGroupRow(this.pinned, this.getActualDepth());
  };
  HeaderRowComp.prototype.onVirtualColumnsChanged = function () {
    var _this = this;
    var compIdsToRemove = Object.keys(this.headerComps);
    var compIdsWanted = [];
    var columns = this.getColumnsInViewport();
    columns.forEach(function (child) {
      // skip groups that have no displayed children. this can happen when the group is broken,
      // and this section happens to have nothing to display for the open / closed state.
      // (a broken group is one that is split, ie columns in the group have a non-group column
      // in between them)
      if (child.isEmptyGroup()) {
        return;
      }
      var idOfChild = child.getUniqueId();
      var eParentContainer = _this.getGui();
      // if we already have this cell rendered, do nothing
      var previousComp = _this.headerComps[idOfChild];
      // it's possible there is a new Column with the same ID, but it's for a different Column.
      // this is common with pivoting, where the pivot cols change, but the id's are still pivot_0,
      // pivot_1 etc. so if new col but same ID, need to remove the old col here first as we are
      // about to replace it in the this.headerComps map.
      var previousCompForOldColumn = previousComp && previousComp.getColumn() != child;
      if (previousCompForOldColumn) {
        _this.destroyChildComponents([idOfChild]);
        removeFromArray(compIdsToRemove, idOfChild);
        previousComp = undefined;
      }
      if (previousComp) {
        // already have comp for this column, so do nothing
        removeFromArray(compIdsToRemove, idOfChild);
      } else {
        // don't have comp, need to create one
        var headerComp = _this.createHeaderComp(child);
        _this.headerComps[idOfChild] = headerComp;
        eParentContainer.appendChild(headerComp.getGui());
      }
      compIdsWanted.push(idOfChild);
    });
    // we want to keep columns that are focused, otherwise keyboard navigation breaks
    var isFocusedAndDisplayed = function (colId) {
      var wrapper = _this.headerComps[colId];
      var isFocused = _this.focusController.isHeaderWrapperFocused(wrapper);
      if (!isFocused) {
        return false;
      }
      var isDisplayed = _this.columnController.isDisplayed(wrapper.getColumn());
      return isDisplayed;
    };
    var focusedAndDisplayedComps = compIdsToRemove.filter(isFocusedAndDisplayed);
    focusedAndDisplayedComps.forEach(function (colId) {
      removeFromArray(compIdsToRemove, colId);
      compIdsWanted.push(colId);
    });
    // at this point, anything left in currentChildIds is an element that is no longer in the viewport
    this.destroyChildComponents(compIdsToRemove);
    var ensureDomOrder = this.gridOptionsWrapper.isEnsureDomOrder();
    if (ensureDomOrder) {
      var correctChildOrder = compIdsWanted.map(function (id) {
        return _this.headerComps[id].getGui();
      });
      setDomChildOrder(this.getGui(), correctChildOrder);
    }
  };
  HeaderRowComp.prototype.createHeaderComp = function (columnGroupChild) {
    var result;
    switch (this.type) {
      case HeaderRowType.COLUMN_GROUP:
        result = new HeaderGroupWrapperComp(columnGroupChild, this.pinned);
        break;
      case HeaderRowType.FLOATING_FILTER:
        result = new FloatingFilterWrapper(columnGroupChild, this.pinned);
        break;
      default:
        result = new HeaderWrapperComp(columnGroupChild, this.pinned);
        break;
    }
    this.createBean(result);
    result.setParentComponent(this);
    return result;
  };
  HeaderRowComp.prototype.getHeaderComps = function () {
    return this.headerComps;
  };
  __decorate$N([Autowired('columnController')], HeaderRowComp.prototype, "columnController", void 0);
  __decorate$N([Autowired('focusController')], HeaderRowComp.prototype, "focusController", void 0);
  __decorate$N([PreDestroy], HeaderRowComp.prototype, "destroyAllChildComponents", null);
  __decorate$N([PostConstruct], HeaderRowComp.prototype, "init", null);
  return HeaderRowComp;
}(Component);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __decorate$O =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var MoveColumnController = /** @class */function () {
  function MoveColumnController(pinned, eContainer) {
    this.needToMoveLeft = false;
    this.needToMoveRight = false;
    this.pinned = pinned;
    this.eContainer = eContainer;
    this.centerContainer = !exists(pinned);
  }
  MoveColumnController.prototype.init = function () {
    var _this = this;
    this.logger = this.loggerFactory.create('MoveColumnController');
    this.controllersService.whenReady(function () {
      _this.gridBodyCon = _this.controllersService.getGridBodyController();
    });
  };
  MoveColumnController.prototype.getIconName = function () {
    return this.pinned ? DragAndDropService.ICON_PINNED : DragAndDropService.ICON_MOVE;
  };
  MoveColumnController.prototype.onDragEnter = function (draggingEvent) {
    // we do dummy drag, so make sure column appears in the right location when first placed
    var columns = draggingEvent.dragItem.columns;
    var dragCameFromToolPanel = draggingEvent.dragSource.type === exports.DragSourceType.ToolPanel;
    if (dragCameFromToolPanel) {
      // the if statement doesn't work if drag leaves grid, then enters again
      this.setColumnsVisible(columns, true, "uiColumnDragged");
    } else {
      // restore previous state of visible columns upon re-entering. this means if the user drags
      // a group out, and then drags the group back in, only columns that were originally visible
      // will be visible again. otherwise a group with three columns (but only two visible) could
      // be dragged out, then when it's dragged in again, all three are visible. this stops that.
      var visibleState_1 = draggingEvent.dragItem.visibleState;
      var visibleColumns = (columns || []).filter(function (column) {
        return visibleState_1[column.getId()];
      });
      this.setColumnsVisible(visibleColumns, true, "uiColumnDragged");
    }
    this.setColumnsPinned(columns, this.pinned, "uiColumnDragged");
    this.onDragging(draggingEvent, true);
  };
  MoveColumnController.prototype.onDragLeave = function (draggingEvent) {
    var hideColumnOnExit = !this.gridOptionsWrapper.isSuppressDragLeaveHidesColumns() && !draggingEvent.fromNudge;
    if (hideColumnOnExit) {
      var dragItem = draggingEvent.dragSource.getDragItem();
      var columns = dragItem.columns;
      this.setColumnsVisible(columns, false, "uiColumnDragged");
    }
    this.ensureIntervalCleared();
  };
  MoveColumnController.prototype.setColumnsVisible = function (columns, visible, source) {
    if (source === void 0) {
      source = "api";
    }
    if (columns) {
      var allowedCols = columns.filter(function (c) {
        return !c.getColDef().lockVisible;
      });
      this.columnController.setColumnsVisible(allowedCols, visible, source);
    }
  };
  MoveColumnController.prototype.setColumnsPinned = function (columns, pinned, source) {
    if (source === void 0) {
      source = "api";
    }
    if (columns) {
      var allowedCols = columns.filter(function (c) {
        return !c.getColDef().lockPinned;
      });
      this.columnController.setColumnsPinned(allowedCols, pinned, source);
    }
  };
  MoveColumnController.prototype.onDragStop = function () {
    this.ensureIntervalCleared();
  };
  MoveColumnController.prototype.normaliseX = function (x) {
    // flip the coordinate if doing RTL
    if (this.gridOptionsWrapper.isEnableRtl()) {
      var clientWidth = this.eContainer.clientWidth;
      x = clientWidth - x;
    }
    // adjust for scroll only if centre container (the pinned containers don't scroll)
    if (this.centerContainer) {
      x += this.controllersService.getCenterRowContainerCon().getCenterViewportScrollLeft();
    }
    return x;
  };
  MoveColumnController.prototype.checkCenterForScrolling = function (xAdjustedForScroll) {
    if (this.centerContainer) {
      // scroll if the mouse has gone outside the grid (or just outside the scrollable part if pinning)
      // putting in 50 buffer, so even if user gets to edge of grid, a scroll will happen
      var firstVisiblePixel = this.controllersService.getCenterRowContainerCon().getCenterViewportScrollLeft();
      var lastVisiblePixel = firstVisiblePixel + this.controllersService.getCenterRowContainerCon().getCenterWidth();
      if (this.gridOptionsWrapper.isEnableRtl()) {
        this.needToMoveRight = xAdjustedForScroll < firstVisiblePixel + 50;
        this.needToMoveLeft = xAdjustedForScroll > lastVisiblePixel - 50;
      } else {
        this.needToMoveLeft = xAdjustedForScroll < firstVisiblePixel + 50;
        this.needToMoveRight = xAdjustedForScroll > lastVisiblePixel - 50;
      }
      if (this.needToMoveLeft || this.needToMoveRight) {
        this.ensureIntervalStarted();
      } else {
        this.ensureIntervalCleared();
      }
    }
  };
  MoveColumnController.prototype.onDragging = function (draggingEvent, fromEnter) {
    var _this = this;
    if (fromEnter === void 0) {
      fromEnter = false;
    }
    this.lastDraggingEvent = draggingEvent;
    // if moving up or down (ie not left or right) then do nothing
    if (missing(draggingEvent.hDirection)) {
      return;
    }
    var mouseXNormalised = this.normaliseX(draggingEvent.x);
    // if the user is dragging into the panel, ie coming from the side panel into the main grid,
    // we don't want to scroll the grid this time, it would appear like the table is jumping
    // each time a column is dragged in.
    if (!fromEnter) {
      this.checkCenterForScrolling(mouseXNormalised);
    }
    var hDirectionNormalised = this.normaliseDirection(draggingEvent.hDirection);
    var dragSourceType = draggingEvent.dragSource.type;
    var columnsToMove = draggingEvent.dragSource.getDragItem().columns;
    columnsToMove = columnsToMove.filter(function (col) {
      if (col.getColDef().lockPinned) {
        // if locked return true only if both col and container are same pin type.
        // double equals (==) here on purpose so that null==undefined is true (for not pinned options)
        return col.getPinned() == _this.pinned;
      }
      // if not pin locked, then always allowed to be in this container
      return true;
    });
    this.attemptMoveColumns(dragSourceType, columnsToMove, hDirectionNormalised, mouseXNormalised, fromEnter);
  };
  MoveColumnController.prototype.normaliseDirection = function (hDirection) {
    if (this.gridOptionsWrapper.isEnableRtl()) {
      switch (hDirection) {
        case exports.HorizontalDirection.Left:
          return exports.HorizontalDirection.Right;
        case exports.HorizontalDirection.Right:
          return exports.HorizontalDirection.Left;
        default:
          console.error("AG Grid: Unknown direction " + hDirection);
      }
    } else {
      return hDirection;
    }
  };
  // returns the index of the first column in the list ONLY if the cols are all beside
  // each other. if the cols are not beside each other, then returns null
  MoveColumnController.prototype.calculateOldIndex = function (movingCols) {
    var gridCols = this.columnController.getAllGridColumns();
    var indexes = sortNumerically(movingCols.map(function (col) {
      return gridCols.indexOf(col);
    }));
    var firstIndex = indexes[0];
    var lastIndex = last(indexes);
    var spread = lastIndex - firstIndex;
    var gapsExist = spread !== indexes.length - 1;
    return gapsExist ? null : firstIndex;
  };
  MoveColumnController.prototype.attemptMoveColumns = function (dragSourceType, allMovingColumns, hDirection, mouseX, fromEnter) {
    var draggingLeft = hDirection === exports.HorizontalDirection.Left;
    var draggingRight = hDirection === exports.HorizontalDirection.Right;
    // it is important to sort the moving columns as they are in grid columns, as the list of moving columns
    // could themselves be part of 'married children' groups, which means we need to maintain the order within
    // the moving list.
    var allMovingColumnsOrdered = allMovingColumns.slice();
    this.columnController.sortColumnsLikeGridColumns(allMovingColumnsOrdered);
    var validMoves = this.calculateValidMoves(allMovingColumnsOrdered, draggingRight, mouseX);
    // if cols are not adjacent, then this returns null. when moving, we constrain the direction of the move
    // (ie left or right) to the mouse direction. however
    var oldIndex = this.calculateOldIndex(allMovingColumnsOrdered);
    if (validMoves.length === 0) {
      return;
    }
    var firstValidMove = validMoves[0];
    // the two check below stop an error when the user grabs a group my a middle column, then
    // it is possible the mouse pointer is to the right of a column while been dragged left.
    // so we need to make sure that the mouse pointer is actually left of the left most column
    // if moving left, and right of the right most column if moving right
    // we check 'fromEnter' below so we move the column to the new spot if the mouse is coming from
    // outside the grid, eg if the column is moving from side panel, mouse is moving left, then we should
    // place the column to the RHS even if the mouse is moving left and the column is already on
    // the LHS. otherwise we stick to the rule described above.
    var constrainDirection = oldIndex !== null && !fromEnter;
    // don't consider 'fromEnter' when dragging header cells, otherwise group can jump to opposite direction of drag
    if (dragSourceType == exports.DragSourceType.HeaderCell) {
      constrainDirection = oldIndex !== null;
    }
    if (constrainDirection) {
      // only allow left drag if this column is moving left
      if (draggingLeft && firstValidMove >= oldIndex) {
        return;
      }
      // only allow right drag if this column is moving right
      if (draggingRight && firstValidMove <= oldIndex) {
        return;
      }
    }
    for (var i = 0; i < validMoves.length; i++) {
      var move = validMoves[i];
      if (!this.columnController.doesMovePassRules(allMovingColumnsOrdered, move)) {
        continue;
      }
      this.columnController.moveColumns(allMovingColumnsOrdered, move, "uiColumnDragged");
      // important to return here, so once we do the first valid move, we don't try do any more
      return;
    }
  };
  MoveColumnController.prototype.calculateValidMoves = function (movingCols, draggingRight, mouseX) {
    var isMoveBlocked = this.gridOptionsWrapper.isSuppressMovableColumns() || movingCols.some(function (col) {
      return col.getColDef().suppressMovable;
    });
    if (isMoveBlocked) {
      return [];
    }
    // this is the list of cols on the screen, so it's these we use when comparing the x mouse position
    var allDisplayedCols = this.columnController.getDisplayedColumns(this.pinned);
    // but this list is the list of all cols, when we move a col it's the index within this list that gets used,
    // so the result we return has to be and index location for this list
    var allGridCols = this.columnController.getAllGridColumns();
    var movingDisplayedCols = allDisplayedCols.filter(function (col) {
      return includes(movingCols, col);
    });
    var otherDisplayedCols = allDisplayedCols.filter(function (col) {
      return !includes(movingCols, col);
    });
    var otherGridCols = allGridCols.filter(function (col) {
      return !includes(movingCols, col);
    });
    // work out how many DISPLAYED columns fit before the 'x' position. this gives us the displayIndex.
    // for example, if cols are a,b,c,d and we find a,b fit before 'x', then we want to place the moving
    // col between b and c (so that it is under the mouse position).
    var displayIndex = 0;
    var availableWidth = mouseX;
    // if we are dragging right, then the columns will be to the left of the mouse, so we also want to
    // include the width of the moving columns
    if (draggingRight) {
      var widthOfMovingDisplayedCols_1 = 0;
      movingDisplayedCols.forEach(function (col) {
        return widthOfMovingDisplayedCols_1 += col.getActualWidth();
      });
      availableWidth -= widthOfMovingDisplayedCols_1;
    }
    if (availableWidth > 0) {
      // now count how many of the displayed columns will fit to the left
      for (var i = 0; i < otherDisplayedCols.length; i++) {
        var col = otherDisplayedCols[i];
        availableWidth -= col.getActualWidth();
        if (availableWidth < 0) {
          break;
        }
        displayIndex++;
      }
      // trial and error, if going right, we adjust by one, i didn't manage to quantify why, but it works
      if (draggingRight) {
        displayIndex++;
      }
    }
    // the display index is with respect to all the showing columns, however when we move, it's with
    // respect to all grid columns, so we need to translate from display index to grid index
    var firstValidMove;
    if (displayIndex > 0) {
      var leftColumn = otherDisplayedCols[displayIndex - 1];
      firstValidMove = otherGridCols.indexOf(leftColumn) + 1;
    } else {
      firstValidMove = otherGridCols.indexOf(otherDisplayedCols[0]);
      if (firstValidMove === -1) {
        firstValidMove = 0;
      }
    }
    var validMoves = [firstValidMove];
    var numberComparator = function (a, b) {
      return a - b;
    };
    // add in other valid moves due to hidden columns and married children. for example, a particular
    // move might break a group that has married children (so move isn't valid), however there could
    // be hidden columns (not displayed) that we could jump over to make the move valid. because
    // they are hidden, user doesn't see any different, however it allows moves that would otherwise
    // not work. for example imagine a group with 9 columns and all columns are hidden except the
    // middle one (so 4 hidden to left, 4 hidden to right), then when moving 'firstValidMove' will
    // be relative to the not-shown column, however we need to consider the move jumping over all the
    // hidden children. if we didn't do this, then if the group just described was at the end (RHS) of the
    // grid, there would be no way to put a column after it (as the grid would only consider beside the
    // visible column, which would fail valid move rules).
    if (draggingRight) {
      // if dragging right, then we add all the additional moves to the right. so in other words
      // if the next move is not valid, find the next move to the right that is valid.
      var pointer = firstValidMove + 1;
      var lastIndex = allGridCols.length - 1;
      while (pointer <= lastIndex) {
        validMoves.push(pointer);
        pointer++;
      }
      // adding columns here means the order is now messed up
      validMoves.sort(numberComparator);
    } else {
      // if dragging left we do the reverse of dragging right, we add in all the valid moves to the
      // left. however we also have to consider moves to the right for all hidden columns first.
      // (this logic is hard to reason with, it was worked out with trial and error,
      // more observation rather than science).
      // add moves to the right
      var pointer = firstValidMove;
      var lastIndex = allGridCols.length - 1;
      var displacedCol = allGridCols[pointer];
      while (pointer <= lastIndex && this.isColumnHidden(allDisplayedCols, displacedCol)) {
        pointer++;
        validMoves.push(pointer);
        displacedCol = allGridCols[pointer];
      }
      // add moves to the left
      pointer = firstValidMove - 1;
      var firstDisplayIndex = 0;
      while (pointer >= firstDisplayIndex) {
        validMoves.push(pointer);
        pointer--;
      }
      // adding columns here means the order is now messed up
      validMoves.sort(numberComparator).reverse();
    }
    return validMoves;
  };
  // isHidden takes into account visible=false and group=closed, ie it is not displayed
  MoveColumnController.prototype.isColumnHidden = function (displayedColumns, col) {
    return displayedColumns.indexOf(col) < 0;
  };
  MoveColumnController.prototype.ensureIntervalStarted = function () {
    if (!this.movingIntervalId) {
      this.intervalCount = 0;
      this.failedMoveAttempts = 0;
      this.movingIntervalId = window.setInterval(this.moveInterval.bind(this), 100);
      if (this.needToMoveLeft) {
        this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_LEFT, true);
      } else {
        this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_RIGHT, true);
      }
    }
  };
  MoveColumnController.prototype.ensureIntervalCleared = function () {
    if (this.movingIntervalId) {
      window.clearInterval(this.movingIntervalId);
      this.movingIntervalId = null;
      this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_MOVE);
    }
  };
  MoveColumnController.prototype.moveInterval = function () {
    // the amounts we move get bigger at each interval, so the speed accelerates, starting a bit slow
    // and getting faster. this is to give smoother user experience. we max at 100px to limit the speed.
    var pixelsToMove;
    this.intervalCount++;
    pixelsToMove = 10 + this.intervalCount * 5;
    if (pixelsToMove > 100) {
      pixelsToMove = 100;
    }
    var pixelsMoved = null;
    var scrollFeature = this.gridBodyCon.getScrollFeature();
    if (this.needToMoveLeft) {
      pixelsMoved = scrollFeature.scrollHorizontally(-pixelsToMove);
    } else if (this.needToMoveRight) {
      pixelsMoved = scrollFeature.scrollHorizontally(pixelsToMove);
    }
    if (pixelsMoved !== 0) {
      this.onDragging(this.lastDraggingEvent);
      this.failedMoveAttempts = 0;
    } else {
      // we count the failed move attempts. if we fail to move 7 times, then we pin the column.
      // this is how we achieve pining by dragging the column to the edge of the grid.
      this.failedMoveAttempts++;
      var columns = this.lastDraggingEvent.dragItem.columns;
      var columnsThatCanPin = columns.filter(function (c) {
        return !c.getColDef().lockPinned;
      });
      if (columnsThatCanPin.length > 0) {
        this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_PINNED);
        if (this.failedMoveAttempts > 7) {
          var pinType = this.needToMoveLeft ? Constants.PINNED_LEFT : Constants.PINNED_RIGHT;
          this.setColumnsPinned(columnsThatCanPin, pinType, "uiColumnDragged");
          this.dragAndDropService.nudge();
        }
      }
    }
  };
  __decorate$O([Autowired('loggerFactory')], MoveColumnController.prototype, "loggerFactory", void 0);
  __decorate$O([Autowired('columnController')], MoveColumnController.prototype, "columnController", void 0);
  __decorate$O([Autowired('dragAndDropService')], MoveColumnController.prototype, "dragAndDropService", void 0);
  __decorate$O([Autowired('gridOptionsWrapper')], MoveColumnController.prototype, "gridOptionsWrapper", void 0);
  __decorate$O([Autowired('controllersService')], MoveColumnController.prototype, "controllersService", void 0);
  __decorate$O([PostConstruct], MoveColumnController.prototype, "init", null);
  return MoveColumnController;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __decorate$P =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var BodyDropPivotTarget = /** @class */function () {
  function BodyDropPivotTarget(pinned) {
    this.columnsToAggregate = [];
    this.columnsToGroup = [];
    this.columnsToPivot = [];
    this.pinned = pinned;
  }
  /** Callback for when drag enters */
  BodyDropPivotTarget.prototype.onDragEnter = function (draggingEvent) {
    var _this = this;
    this.clearColumnsList();
    // in pivot mode, we don't accept any drops if functions are read only
    if (this.gridOptionsWrapper.isFunctionsReadOnly()) {
      return;
    }
    var dragColumns = draggingEvent.dragItem.columns;
    if (!dragColumns) {
      return;
    }
    dragColumns.forEach(function (column) {
      // we don't allow adding secondary columns
      if (!column.isPrimary()) {
        return;
      }
      if (column.isAnyFunctionActive()) {
        return;
      }
      if (column.isAllowValue()) {
        _this.columnsToAggregate.push(column);
      } else if (column.isAllowRowGroup()) {
        _this.columnsToGroup.push(column);
      } else if (column.isAllowPivot()) {
        _this.columnsToPivot.push(column);
      }
    });
  };
  BodyDropPivotTarget.prototype.getIconName = function () {
    var totalColumns = this.columnsToAggregate.length + this.columnsToGroup.length + this.columnsToPivot.length;
    if (totalColumns > 0) {
      return this.pinned ? DragAndDropService.ICON_PINNED : DragAndDropService.ICON_MOVE;
    }
    return null;
  };
  /** Callback for when drag leaves */
  BodyDropPivotTarget.prototype.onDragLeave = function (draggingEvent) {
    // if we are taking columns out of the center, then we remove them from the report
    this.clearColumnsList();
  };
  BodyDropPivotTarget.prototype.clearColumnsList = function () {
    this.columnsToAggregate.length = 0;
    this.columnsToGroup.length = 0;
    this.columnsToPivot.length = 0;
  };
  /** Callback for when dragging */
  BodyDropPivotTarget.prototype.onDragging = function (draggingEvent) {};
  /** Callback for when drag stops */
  BodyDropPivotTarget.prototype.onDragStop = function (draggingEvent) {
    if (this.columnsToAggregate.length > 0) {
      this.columnController.addValueColumns(this.columnsToAggregate, "toolPanelDragAndDrop");
    }
    if (this.columnsToGroup.length > 0) {
      this.columnController.addRowGroupColumns(this.columnsToGroup, "toolPanelDragAndDrop");
    }
    if (this.columnsToPivot.length > 0) {
      this.columnController.addPivotColumns(this.columnsToPivot, "toolPanelDragAndDrop");
    }
  };
  __decorate$P([Autowired('columnController')], BodyDropPivotTarget.prototype, "columnController", void 0);
  __decorate$P([Autowired('gridOptionsWrapper')], BodyDropPivotTarget.prototype, "gridOptionsWrapper", void 0);
  return BodyDropPivotTarget;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$X =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$Q =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DropType;
(function (DropType) {
  DropType[DropType["ColumnMove"] = 0] = "ColumnMove";
  DropType[DropType["Pivot"] = 1] = "Pivot";
})(DropType || (DropType = {}));
var BodyDropTarget = /** @class */function (_super) {
  __extends$X(BodyDropTarget, _super);
  function BodyDropTarget(pinned, eContainer) {
    var _this = _super.call(this) || this;
    _this.dropListeners = {};
    _this.pinned = pinned;
    _this.eContainer = eContainer;
    return _this;
  }
  BodyDropTarget.prototype.postConstruct = function () {
    var _this = this;
    this.controllersService.whenReady(function (p) {
      var containers;
      switch (_this.pinned) {
        case Constants.PINNED_LEFT:
          containers = [p.leftRowContainerCon, p.bottomLeftRowContainerCon, p.topLeftRowContainerCon];
          break;
        case Constants.PINNED_RIGHT:
          containers = [p.rightRowContainerCon, p.bottomRightRowContainerCon, p.topRightRowContainerCon];
          break;
        default:
          containers = [p.centerRowContainerCon, p.bottomCenterRowContainerCon, p.topCenterRowContainerCon];
          break;
      }
      _this.eSecondaryContainers = containers.map(function (c) {
        return c.getContainerElement();
      });
    });
  };
  BodyDropTarget.prototype.isInterestedIn = function (type) {
    return type === exports.DragSourceType.HeaderCell || type === exports.DragSourceType.ToolPanel && this.gridOptionsWrapper.isAllowDragFromColumnsToolPanel();
  };
  BodyDropTarget.prototype.getSecondaryContainers = function () {
    return this.eSecondaryContainers;
  };
  BodyDropTarget.prototype.getContainer = function () {
    return this.eContainer;
  };
  BodyDropTarget.prototype.init = function () {
    this.moveColumnController = this.createBean(new MoveColumnController(this.pinned, this.eContainer));
    var bodyDropPivotTarget = new BodyDropPivotTarget(this.pinned);
    this.createBean(bodyDropPivotTarget);
    this.dropListeners[DropType.ColumnMove] = this.moveColumnController;
    this.dropListeners[DropType.Pivot] = bodyDropPivotTarget;
    this.dragAndDropService.addDropTarget(this);
  };
  BodyDropTarget.prototype.getIconName = function () {
    return this.currentDropListener.getIconName();
  };
  // we want to use the bodyPivotTarget if the user is dragging columns in from the toolPanel
  // and we are in pivot mode, as it has to logic to set pivot/value/group on the columns when
  // dropped into the grid's body.
  BodyDropTarget.prototype.getDropType = function (draggingEvent) {
    if (this.columnController.isPivotMode()) {
      // in pivot mode, then if moving a column (ie didn't come from toolpanel) then it's
      // a standard column move, however if it came from the toolpanel, then we are introducing
      // dimensions or values to the grid
      if (draggingEvent.dragSource.type === exports.DragSourceType.ToolPanel) {
        return DropType.Pivot;
      }
      return DropType.ColumnMove;
    }
    // it's a column, and not pivot mode, so always moving
    return DropType.ColumnMove;
  };
  BodyDropTarget.prototype.onDragEnter = function (draggingEvent) {
    // we pick the drop listener depending on whether we are in pivot mode are not. if we are
    // in pivot mode, then dropping cols changes the row group, pivot, value stats. otherwise
    // we change visibility state and position.
    // if (this.columnController.isPivotMode()) {
    var dropType = this.getDropType(draggingEvent);
    this.currentDropListener = this.dropListeners[dropType];
    this.currentDropListener.onDragEnter(draggingEvent);
  };
  BodyDropTarget.prototype.onDragLeave = function (params) {
    this.currentDropListener.onDragLeave(params);
  };
  BodyDropTarget.prototype.onDragging = function (params) {
    this.currentDropListener.onDragging(params);
  };
  BodyDropTarget.prototype.onDragStop = function (params) {
    this.currentDropListener.onDragStop(params);
  };
  __decorate$Q([Autowired('dragAndDropService')], BodyDropTarget.prototype, "dragAndDropService", void 0);
  __decorate$Q([Autowired('columnController')], BodyDropTarget.prototype, "columnController", void 0);
  __decorate$Q([Autowired('controllersService')], BodyDropTarget.prototype, "controllersService", void 0);
  __decorate$Q([PostConstruct], BodyDropTarget.prototype, "postConstruct", null);
  __decorate$Q([PostConstruct], BodyDropTarget.prototype, "init", null);
  return BodyDropTarget;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$Y =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$R =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HeaderContainer = /** @class */function (_super) {
  __extends$Y(HeaderContainer, _super);
  function HeaderContainer(eContainer, eViewport, pinned) {
    var _this = _super.call(this) || this;
    _this.groupsRowComps = [];
    _this.eContainer = eContainer;
    _this.pinned = pinned;
    _this.eViewport = eViewport;
    return _this;
  }
  HeaderContainer.prototype.forEachHeaderElement = function (callback) {
    if (this.groupsRowComps) {
      this.groupsRowComps.forEach(function (c) {
        return c.forEachHeaderElement(callback);
      });
    }
    if (this.columnsRowComp) {
      this.columnsRowComp.forEachHeaderElement(callback);
    }
    if (this.filtersRowComp) {
      this.filtersRowComp.forEachHeaderElement(callback);
    }
  };
  HeaderContainer.prototype.init = function () {
    // if value changes, then if not pivoting, we at least need to change the label eg from sum() to avg(),
    // if pivoting, then the columns have changed
    this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_SCROLLBAR_WIDTH_CHANGED, this.onScrollbarWidthChanged.bind(this));
    this.setupDragAndDrop();
  };
  HeaderContainer.prototype.onColumnResized = function () {
    this.setWidthOfPinnedContainer();
  };
  HeaderContainer.prototype.onDisplayedColumnsChanged = function () {
    this.setWidthOfPinnedContainer();
  };
  HeaderContainer.prototype.onScrollVisibilityChanged = function () {
    this.setWidthOfPinnedContainer();
  };
  HeaderContainer.prototype.onScrollbarWidthChanged = function () {
    this.setWidthOfPinnedContainer();
  };
  HeaderContainer.prototype.setWidthOfPinnedContainer = function () {
    var pinningLeft = this.pinned === Constants.PINNED_LEFT;
    var pinningRight = this.pinned === Constants.PINNED_RIGHT;
    var controller = this.columnController;
    var isRtl = this.gridOptionsWrapper.isEnableRtl();
    var scrollbarWidth = this.gridOptionsWrapper.getScrollbarWidth();
    if (pinningLeft || pinningRight) {
      // size to fit all columns
      var width = controller[pinningLeft ? 'getDisplayedColumnsLeftWidth' : 'getDisplayedColumnsRightWidth']();
      // if there is a scroll showing (and taking up space, so Windows, and not iOS)
      // in the body, then we add extra space to keep header aligned with the body,
      // as body width fits the cols and the scrollbar
      var addPaddingForScrollbar = this.scrollVisibleService.isVerticalScrollShowing() && (isRtl && pinningLeft || !isRtl && pinningRight);
      if (addPaddingForScrollbar) {
        width += scrollbarWidth;
      }
      setFixedWidth(this.eContainer, width);
    }
  };
  HeaderContainer.prototype.getRowComps = function () {
    var res = [];
    if (this.groupsRowComps) {
      res = res.concat(this.groupsRowComps);
    }
    if (this.columnsRowComp) {
      res.push(this.columnsRowComp);
    }
    if (this.filtersRowComp) {
      res.push(this.filtersRowComp);
    }
    return res;
  };
  // grid cols have changed - this also means the number of rows in the header can have
  // changed. so we remove all the old rows and insert new ones for a complete refresh
  HeaderContainer.prototype.onGridColumnsChanged = function () {
    this.refresh(true);
  };
  // we expose this for gridOptions.api.refreshHeader() to call
  HeaderContainer.prototype.refresh = function (keepColumns) {
    if (keepColumns === void 0) {
      keepColumns = false;
    }
    this.refreshRowComps(keepColumns);
  };
  HeaderContainer.prototype.setupDragAndDrop = function () {
    // center section has viewport, but pinned sections do not
    var dropContainer = this.eViewport ? this.eViewport : this.eContainer;
    var bodyDropTarget = new BodyDropTarget(this.pinned, dropContainer);
    this.createManagedBean(bodyDropTarget);
  };
  HeaderContainer.prototype.destroyRowComps = function (keepColumns) {
    if (keepColumns === void 0) {
      keepColumns = false;
    }
    this.groupsRowComps.forEach(this.destroyRowComp.bind(this));
    this.groupsRowComps = [];
    this.destroyRowComp(this.filtersRowComp);
    this.filtersRowComp = undefined;
    if (!keepColumns) {
      this.destroyRowComp(this.columnsRowComp);
      this.columnsRowComp = undefined;
    }
  };
  HeaderContainer.prototype.destroyRowComp = function (rowComp) {
    if (rowComp) {
      this.destroyBean(rowComp);
      this.eContainer.removeChild(rowComp.getGui());
    }
  };
  HeaderContainer.prototype.refreshRowComps = function (keepColumns) {
    var _this = this;
    if (keepColumns === void 0) {
      keepColumns = false;
    }
    var sequence = new NumberSequence();
    var refreshColumnGroups = function () {
      var groupRowCount = _this.columnController.getHeaderRowCount() - 1;
      _this.groupsRowComps.forEach(_this.destroyRowComp.bind(_this));
      _this.groupsRowComps = [];
      for (var i = 0; i < groupRowCount; i++) {
        var rowComp = _this.createBean(new HeaderRowComp(sequence.next(), HeaderRowType.COLUMN_GROUP, _this.pinned));
        _this.groupsRowComps.push(rowComp);
      }
    };
    var refreshColumns = function () {
      var rowIndex = sequence.next();
      if (_this.columnsRowComp) {
        var rowIndexMismatch = _this.columnsRowComp.getRowIndex() !== rowIndex;
        if (!keepColumns || rowIndexMismatch) {
          _this.destroyRowComp(_this.columnsRowComp);
          _this.columnsRowComp = undefined;
        }
      }
      if (!_this.columnsRowComp) {
        _this.columnsRowComp = _this.createBean(new HeaderRowComp(rowIndex, HeaderRowType.COLUMN, _this.pinned));
      }
    };
    var refreshFilters = function () {
      var includeFloatingFilter = !_this.columnController.isPivotMode() && _this.columnController.hasFloatingFilters();
      var destroyPreviousComp = function () {
        _this.destroyRowComp(_this.filtersRowComp);
        _this.filtersRowComp = undefined;
      };
      if (!includeFloatingFilter) {
        destroyPreviousComp();
        return;
      }
      var rowIndex = sequence.next();
      if (_this.filtersRowComp) {
        var rowIndexMismatch = _this.filtersRowComp.getRowIndex() !== rowIndex;
        if (!keepColumns || rowIndexMismatch) {
          destroyPreviousComp();
        }
      }
      if (!_this.filtersRowComp) {
        _this.filtersRowComp = _this.createBean(new HeaderRowComp(rowIndex, HeaderRowType.FLOATING_FILTER, _this.pinned));
      }
    };
    refreshColumnGroups();
    refreshColumns();
    refreshFilters();
    // this re-adds the this.columnsRowComp, which is fine, it just means the DOM will rearrange then,
    // taking it out of the last position and re-inserting relative to the other rows.
    this.getRowComps().forEach(function (rowComp) {
      return _this.eContainer.appendChild(rowComp.getGui());
    });
  };
  __decorate$R([Autowired('columnController')], HeaderContainer.prototype, "columnController", void 0);
  __decorate$R([Autowired('scrollVisibleService')], HeaderContainer.prototype, "scrollVisibleService", void 0);
  __decorate$R([PostConstruct], HeaderContainer.prototype, "init", null);
  __decorate$R([PreDestroy], HeaderContainer.prototype, "destroyRowComps", null);
  return HeaderContainer;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$Z =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$S =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
(function (HeaderNavigationDirection) {
  HeaderNavigationDirection[HeaderNavigationDirection["UP"] = 0] = "UP";
  HeaderNavigationDirection[HeaderNavigationDirection["DOWN"] = 1] = "DOWN";
  HeaderNavigationDirection[HeaderNavigationDirection["LEFT"] = 2] = "LEFT";
  HeaderNavigationDirection[HeaderNavigationDirection["RIGHT"] = 3] = "RIGHT";
})(exports.HeaderNavigationDirection || (exports.HeaderNavigationDirection = {}));
var HeaderNavigationService = /** @class */function (_super) {
  __extends$Z(HeaderNavigationService, _super);
  function HeaderNavigationService() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  HeaderNavigationService.prototype.postConstruct = function () {
    var _this = this;
    this.controllersService.whenReady(function (p) {
      _this.gridBodyCon = p.gridBodyCon;
    });
  };
  HeaderNavigationService.prototype.registerHeaderRoot = function (headerRoot) {
    this.headerRoot = headerRoot;
  };
  HeaderNavigationService.prototype.getHeaderRowCount = function () {
    var headerContainers = this.headerRoot.getHeaderContainers();
    return headerContainers.size === 0 ? 0 : this.getHeaderContainer().getRowComps().length;
  };
  HeaderNavigationService.prototype.getHeaderRowType = function (idx) {
    if (this.getHeaderRowCount()) {
      return this.getHeaderContainer().getRowComps()[idx].getType();
    }
  };
  HeaderNavigationService.prototype.getHeaderContainer = function (position) {
    if (position === void 0) {
      position = 'center';
    }
    if (position === null) {
      position = 'center';
    }
    return this.headerRoot.getHeaderContainers().get(position);
  };
  /*
   * This method navigates grid header vertically
   * @return {boolean} true to preventDefault on the event that caused this navigation.
   */
  HeaderNavigationService.prototype.navigateVertically = function (direction, fromHeader, event) {
    if (!fromHeader) {
      fromHeader = this.focusController.getFocusedHeader();
    }
    if (!fromHeader) {
      return false;
    }
    var headerRowIndex = fromHeader.headerRowIndex,
      column = fromHeader.column;
    var rowLen = this.getHeaderRowCount();
    var isUp = direction === exports.HeaderNavigationDirection.UP;
    var nextRow = isUp ? headerRowIndex - 1 : headerRowIndex + 1;
    var nextFocusColumn = null;
    var skipColumn = false;
    if (nextRow < 0) {
      nextRow = 0;
      nextFocusColumn = column;
      skipColumn = true;
    }
    if (nextRow >= rowLen) {
      nextRow = -1; // -1 indicates the focus should move to grid rows.
    }

    var currentRowType = this.getHeaderRowType(headerRowIndex);
    if (!skipColumn) {
      if (currentRowType === HeaderRowType.COLUMN_GROUP) {
        var currentColumn = column;
        nextFocusColumn = isUp ? column.getParent() : currentColumn.getDisplayedChildren()[0];
      } else if (currentRowType === HeaderRowType.FLOATING_FILTER) {
        nextFocusColumn = column;
      } else {
        var currentColumn = column;
        nextFocusColumn = isUp ? currentColumn.getParent() : currentColumn;
      }
      if (!nextFocusColumn) {
        return false;
      }
    }
    return this.focusController.focusHeaderPosition({
      headerRowIndex: nextRow,
      column: nextFocusColumn
    }, undefined, false, true, event);
  };
  /*
   * This method navigates grid header horizontally
   * @return {boolean} true to preventDefault on the event that caused this navigation.
   */
  HeaderNavigationService.prototype.navigateHorizontally = function (direction, fromTab, event) {
    if (fromTab === void 0) {
      fromTab = false;
    }
    var focusedHeader = this.focusController.getFocusedHeader();
    var isLeft = direction === exports.HeaderNavigationDirection.LEFT;
    var isRtl = this.gridOptionsWrapper.isEnableRtl();
    var nextHeader;
    var normalisedDirection;
    // either navigating to the left or isRtl (cannot be both)
    if (isLeft !== isRtl) {
      normalisedDirection = 'Before';
      nextHeader = this.headerPositionUtils.findHeader(focusedHeader, normalisedDirection);
    } else {
      normalisedDirection = 'After';
      nextHeader = this.headerPositionUtils.findHeader(focusedHeader, normalisedDirection);
    }
    if (nextHeader) {
      return this.focusController.focusHeaderPosition(nextHeader, normalisedDirection, fromTab, true, event);
    }
    if (!fromTab) {
      return true;
    }
    return this.focusNextHeaderRow(focusedHeader, normalisedDirection, event);
  };
  HeaderNavigationService.prototype.focusNextHeaderRow = function (focusedHeader, direction, event) {
    var currentIndex = focusedHeader.headerRowIndex;
    var nextPosition = null;
    var nextRowIndex;
    if (direction === 'Before') {
      if (currentIndex > 0) {
        nextRowIndex = currentIndex - 1;
        nextPosition = this.headerPositionUtils.findColAtEdgeForHeaderRow(nextRowIndex, 'end');
      }
    } else {
      nextRowIndex = currentIndex + 1;
      nextPosition = this.headerPositionUtils.findColAtEdgeForHeaderRow(nextRowIndex, 'start');
    }
    return this.focusController.focusHeaderPosition(nextPosition, direction, true, true, event);
  };
  HeaderNavigationService.prototype.scrollToColumn = function (column, direction) {
    if (direction === void 0) {
      direction = 'After';
    }
    if (column.getPinned()) {
      return;
    }
    var columnToScrollTo;
    if (column instanceof ColumnGroup) {
      var columns = column.getDisplayedLeafColumns();
      columnToScrollTo = direction === 'Before' ? last(columns) : columns[0];
    } else {
      columnToScrollTo = column;
    }
    this.gridBodyCon.getScrollFeature().ensureColumnVisible(columnToScrollTo);
    // need to nudge the scrolls for the floating items. otherwise when we set focus on a non-visible
    // floating cell, the scrolls get out of sync
    this.gridBodyCon.getScrollFeature().horizontallyScrollHeaderCenterAndFloatingCenter();
    // need to flush frames, to make sure the correct cells are rendered
    this.animationFrameService.flushAllFrames();
  };
  __decorate$S([Autowired('focusController')], HeaderNavigationService.prototype, "focusController", void 0);
  __decorate$S([Autowired('headerPositionUtils')], HeaderNavigationService.prototype, "headerPositionUtils", void 0);
  __decorate$S([Autowired('animationFrameService')], HeaderNavigationService.prototype, "animationFrameService", void 0);
  __decorate$S([Autowired('controllersService')], HeaderNavigationService.prototype, "controllersService", void 0);
  __decorate$S([PostConstruct], HeaderNavigationService.prototype, "postConstruct", null);
  HeaderNavigationService = __decorate$S([Bean('headerNavigationService')], HeaderNavigationService);
  return HeaderNavigationService;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var KeyName = /** @class */function () {
  function KeyName() {}
  KeyName.BACKSPACE = 'Backspace';
  KeyName.TAB = 'Tab';
  KeyName.ENTER = 'Enter';
  KeyName.SHIFT = 'Shift';
  KeyName.ESCAPE = 'Escape';
  KeyName.SPACE = ' ';
  KeyName.LEFT = 'ArrowLeft';
  KeyName.UP = 'ArrowUp';
  KeyName.RIGHT = 'ArrowRight';
  KeyName.DOWN = 'ArrowDown';
  KeyName.DELETE = 'Delete';
  // IE11 & Edge treat the numpad del key differently - with numlock on we get "Del" for key
  KeyName.NUM_PAD_DELETE = 'Del';
  KeyName.A = 'a';
  KeyName.C = 'c';
  KeyName.V = 'v';
  KeyName.D = 'd';
  KeyName.Z = 'z';
  KeyName.Y = 'y';
  KeyName.F2 = 'F2';
  KeyName.PAGE_UP = 'PageUp';
  KeyName.PAGE_DOWN = 'PageDown';
  KeyName.PAGE_HOME = 'Home';
  KeyName.PAGE_END = 'End';
  return KeyName;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$_ =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$T =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CenterWidthFeature = /** @class */function (_super) {
  __extends$_(CenterWidthFeature, _super);
  function CenterWidthFeature(callback) {
    var _this = _super.call(this) || this;
    _this.callback = callback;
    return _this;
  }
  CenterWidthFeature.prototype.postConstruct = function () {
    var listener = this.setWidth.bind(this);
    this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, listener);
    this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);
    this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, listener);
    this.setWidth();
  };
  CenterWidthFeature.prototype.setWidth = function () {
    var columnController = this.columnController;
    var printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
    var centerWidth = columnController.getBodyContainerWidth();
    var leftWidth = columnController.getDisplayedColumnsLeftWidth();
    var rightWidth = columnController.getDisplayedColumnsRightWidth();
    var totalWidth = printLayout ? centerWidth + leftWidth + rightWidth : centerWidth;
    this.callback(totalWidth);
  };
  __decorate$T([Autowired('columnController')], CenterWidthFeature.prototype, "columnController", void 0);
  __decorate$T([PostConstruct], CenterWidthFeature.prototype, "postConstruct", null);
  return CenterWidthFeature;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$$ =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$U =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HeaderRootComp = /** @class */function (_super) {
  __extends$$(HeaderRootComp, _super);
  function HeaderRootComp() {
    var _this = _super.call(this, HeaderRootComp.TEMPLATE) || this;
    _this.headerContainers = new Map();
    return _this;
  }
  HeaderRootComp.prototype.postConstruct = function () {
    var _this = this;
    _super.prototype.postConstruct.call(this);
    this.printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
    this.gridApi.registerHeaderRootComp(this);
    this.autoWidthCalculator.registerHeaderRootComp(this);
    this.registerHeaderContainer(new HeaderContainer(this.eHeaderContainer, this.eHeaderViewport, null), 'center');
    this.registerHeaderContainer(new HeaderContainer(this.ePinnedLeftHeader, null, Constants.PINNED_LEFT), 'left');
    this.registerHeaderContainer(new HeaderContainer(this.ePinnedRightHeader, null, Constants.PINNED_RIGHT), 'right');
    this.headerContainers.forEach(function (container) {
      return _this.createManagedBean(container);
    });
    this.headerNavigationService.registerHeaderRoot(this);
    // shotgun way to get labels to change, eg from sum(amount) to avg(amount)
    this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, this.onDomLayoutChanged.bind(this));
    // for setting ag-pivot-on / ag-pivot-off CSS classes
    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onPivotModeChanged.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_LEFT_PINNED_WIDTH_CHANGED, this.onPinnedLeftWidthChanged.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED, this.onPinnedRightWidthChanged.bind(this));
    this.onPivotModeChanged();
    this.addPreventHeaderScroll();
    this.createManagedBean(new CenterWidthFeature(function (width) {
      return _this.eHeaderContainer.style.width = width + "px";
    }));
    if (this.columnController.isReady()) {
      this.refreshHeader();
    }
    this.setupHeaderHeight();
    this.controllersService.registerHeaderRootComp(this);
  };
  HeaderRootComp.prototype.setupHeaderHeight = function () {
    var listener = this.setHeaderHeight.bind(this);
    listener();
    this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_HEADER_HEIGHT, listener);
    this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, listener);
    this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, listener);
    this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, listener);
    this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, listener);
    this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);
  };
  HeaderRootComp.prototype.registerHeaderContainer = function (headerContainer, type) {
    this.headerContainers.set(type, headerContainer);
  };
  HeaderRootComp.prototype.onTabKeyDown = function (e) {
    var isRtl = this.gridOptionsWrapper.isEnableRtl();
    var direction = e.shiftKey !== isRtl ? exports.HeaderNavigationDirection.LEFT : exports.HeaderNavigationDirection.RIGHT;
    if (this.headerNavigationService.navigateHorizontally(direction, true, e) || this.focusController.focusNextGridCoreContainer(e.shiftKey)) {
      e.preventDefault();
    }
  };
  HeaderRootComp.prototype.handleKeyDown = function (e) {
    var direction = null;
    switch (e.key) {
      case KeyName.LEFT:
        direction = exports.HeaderNavigationDirection.LEFT;
      case KeyName.RIGHT:
        if (!exists(direction)) {
          direction = exports.HeaderNavigationDirection.RIGHT;
        }
        this.headerNavigationService.navigateHorizontally(direction, false, e);
        break;
      case KeyName.UP:
        direction = exports.HeaderNavigationDirection.UP;
      case KeyName.DOWN:
        if (!exists(direction)) {
          direction = exports.HeaderNavigationDirection.DOWN;
        }
        if (this.headerNavigationService.navigateVertically(direction, null, e)) {
          e.preventDefault();
        }
        break;
      default:
        return;
    }
  };
  HeaderRootComp.prototype.onFocusOut = function (e) {
    var relatedTarget = e.relatedTarget;
    var eGui = this.getGui();
    if (!relatedTarget && eGui.contains(document.activeElement)) {
      return;
    }
    if (!eGui.contains(relatedTarget)) {
      this.focusController.clearFocusedHeader();
    }
  };
  HeaderRootComp.prototype.onDomLayoutChanged = function () {
    var newValue = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
    if (this.printLayout !== newValue) {
      this.printLayout = newValue;
      this.refreshHeader();
    }
  };
  HeaderRootComp.prototype.setHorizontalScroll = function (offset) {
    this.eHeaderContainer.style.transform = "translateX(" + offset + "px)";
  };
  HeaderRootComp.prototype.forEachHeaderElement = function (callback) {
    this.headerContainers.forEach(function (childContainer) {
      return childContainer.forEachHeaderElement(callback);
    });
  };
  HeaderRootComp.prototype.refreshHeader = function () {
    this.headerContainers.forEach(function (container) {
      return container.refresh();
    });
  };
  HeaderRootComp.prototype.onPivotModeChanged = function () {
    var pivotMode = this.columnController.isPivotMode();
    addOrRemoveCssClass(this.getGui(), 'ag-pivot-on', pivotMode);
    addOrRemoveCssClass(this.getGui(), 'ag-pivot-off', !pivotMode);
  };
  HeaderRootComp.prototype.setHeaderHeight = function () {
    var _a = this,
      columnController = _a.columnController,
      gridOptionsWrapper = _a.gridOptionsWrapper;
    var numberOfFloating = 0;
    var headerRowCount = columnController.getHeaderRowCount();
    var totalHeaderHeight;
    var groupHeight;
    var headerHeight;
    if (columnController.isPivotMode()) {
      groupHeight = gridOptionsWrapper.getPivotGroupHeaderHeight();
      headerHeight = gridOptionsWrapper.getPivotHeaderHeight();
    } else {
      var hasFloatingFilters = columnController.hasFloatingFilters();
      if (hasFloatingFilters) {
        headerRowCount++;
        numberOfFloating = 1;
      }
      groupHeight = gridOptionsWrapper.getGroupHeaderHeight();
      headerHeight = gridOptionsWrapper.getHeaderHeight();
    }
    var numberOfNonGroups = 1 + numberOfFloating;
    var numberOfGroups = headerRowCount - numberOfNonGroups;
    totalHeaderHeight = numberOfFloating * gridOptionsWrapper.getFloatingFiltersHeight();
    totalHeaderHeight += numberOfGroups * groupHeight;
    totalHeaderHeight += headerHeight;
    // one extra pixel is needed here to account for the
    // height of the border
    var px = totalHeaderHeight + 1 + "px";
    this.getGui().style.height = px;
    this.getGui().style.minHeight = px;
  };
  // if the user is in floating filter and hits tab a few times, the header can
  // end up scrolling to show items off the screen, leaving the grid and header
  // and the grid columns no longer in sync.
  HeaderRootComp.prototype.addPreventHeaderScroll = function () {
    var _this = this;
    this.addManagedListener(this.eHeaderViewport, 'scroll', function () {
      // if the header scrolls, the header will be out of sync. so we reset the
      // header scroll, and then scroll the body, which will in turn set the offset
      // on the header, giving the impression that the header scrolled as expected.
      var scrollLeft = _this.eHeaderViewport.scrollLeft;
      if (scrollLeft !== 0) {
        var gridBodyCon = _this.controllersService.getGridBodyController();
        gridBodyCon.getScrollFeature().scrollHorizontally(scrollLeft);
        _this.eHeaderViewport.scrollLeft = 0;
      }
    });
  };
  HeaderRootComp.prototype.getHeaderContainers = function () {
    return this.headerContainers;
  };
  HeaderRootComp.prototype.onPinnedLeftWidthChanged = function () {
    var displayed = this.pinnedWidthService.getPinnedLeftWidth() > 0;
    setDisplayed(this.ePinnedLeftHeader, displayed);
  };
  HeaderRootComp.prototype.onPinnedRightWidthChanged = function () {
    var displayed = this.pinnedWidthService.getPinnedRightWidth() > 0;
    setDisplayed(this.ePinnedRightHeader, displayed);
  };
  HeaderRootComp.TEMPLATE = "<div class=\"ag-header\" role=\"presentation\">\n            <div class=\"ag-pinned-left-header\" ref=\"ePinnedLeftHeader\" role=\"presentation\"></div>\n            <div class=\"ag-header-viewport\" ref=\"eHeaderViewport\" role=\"presentation\">\n                <div class=\"ag-header-container\" ref=\"eHeaderContainer\" role=\"rowgroup\"></div>\n            </div>\n            <div class=\"ag-pinned-right-header\" ref=\"ePinnedRightHeader\" role=\"presentation\"></div>\n        </div>";
  __decorate$U([RefSelector('ePinnedLeftHeader')], HeaderRootComp.prototype, "ePinnedLeftHeader", void 0);
  __decorate$U([RefSelector('ePinnedRightHeader')], HeaderRootComp.prototype, "ePinnedRightHeader", void 0);
  __decorate$U([RefSelector('eHeaderContainer')], HeaderRootComp.prototype, "eHeaderContainer", void 0);
  __decorate$U([RefSelector('eHeaderViewport')], HeaderRootComp.prototype, "eHeaderViewport", void 0);
  __decorate$U([Autowired('columnController')], HeaderRootComp.prototype, "columnController", void 0);
  __decorate$U([Autowired('gridApi')], HeaderRootComp.prototype, "gridApi", void 0);
  __decorate$U([Autowired('autoWidthCalculator')], HeaderRootComp.prototype, "autoWidthCalculator", void 0);
  __decorate$U([Autowired('headerNavigationService')], HeaderRootComp.prototype, "headerNavigationService", void 0);
  __decorate$U([Autowired('pinnedWidthService')], HeaderRootComp.prototype, "pinnedWidthService", void 0);
  __decorate$U([Autowired('controllersService')], HeaderRootComp.prototype, "controllersService", void 0);
  return HeaderRootComp;
}(ManagedFocusComponent);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$10 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$6 =  false || function () {
  __assign$6 = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$6.apply(this, arguments);
};
var __decorate$V =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FilterManager = /** @class */function (_super) {
  __extends$10(FilterManager, _super);
  function FilterManager() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.allAdvancedFilters = new Map();
    _this.activeAdvancedFilters = [];
    _this.quickFilter = null;
    _this.quickFilterParts = null;
    // this is true when the grid is processing the filter change. this is used by the cell comps, so that they
    // don't flash when data changes due to filter changes. there is no need to flash when filter changes as the
    // user is in control, so doesn't make sense to show flashing changes. for example, go to main demo where
    // this feature is turned off (hack code to always return false for isSuppressFlashingCellsBecauseFiltering(), put in)
    // 100,000 rows and group by country. then do some filtering. all the cells flash, which is silly.
    _this.processingFilterChange = false;
    return _this;
  }
  FilterManager_1 = FilterManager;
  FilterManager.prototype.init = function () {
    this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_CHANGED, this.onNewRowsLoaded.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));
    this.quickFilter = this.parseQuickFilter(this.gridOptionsWrapper.getQuickFilterText());
    this.setQuickFilterParts();
    this.allowShowChangeAfterFilter = this.gridOptionsWrapper.isAllowShowChangeAfterFilter();
  };
  FilterManager.prototype.setQuickFilterParts = function () {
    this.quickFilterParts = this.quickFilter ? this.quickFilter.split(' ') : null;
  };
  FilterManager.prototype.setFilterModel = function (model) {
    var _this = this;
    var allPromises = [];
    if (model) {
      // mark the filters as we set them, so any active filters left over we stop
      var modelKeys_1 = convertToSet(Object.keys(model));
      this.allAdvancedFilters.forEach(function (filterWrapper, colId) {
        var newModel = model[colId];
        allPromises.push(_this.setModelOnFilterWrapper(filterWrapper.filterPromise, newModel));
        modelKeys_1.delete(colId);
      });
      // at this point, processedFields contains data for which we don't have a filter working yet
      modelKeys_1.forEach(function (colId) {
        var column = _this.columnController.getPrimaryColumn(colId);
        if (!column) {
          console.warn('Warning ag-grid setFilterModel - no column found for colId ' + colId);
          return;
        }
        var filterWrapper = _this.getOrCreateFilterWrapper(column, 'NO_UI');
        allPromises.push(_this.setModelOnFilterWrapper(filterWrapper.filterPromise, model[colId]));
      });
    } else {
      this.allAdvancedFilters.forEach(function (filterWrapper) {
        allPromises.push(_this.setModelOnFilterWrapper(filterWrapper.filterPromise, null));
      });
    }
    AgPromise.all(allPromises).then(function () {
      return _this.onFilterChanged();
    });
  };
  FilterManager.prototype.setModelOnFilterWrapper = function (filterPromise, newModel) {
    return new AgPromise(function (resolve) {
      filterPromise.then(function (filter) {
        if (typeof filter.setModel !== 'function') {
          console.warn('Warning ag-grid - filter missing setModel method, which is needed for setFilterModel');
          resolve();
        }
        (filter.setModel(newModel) || AgPromise.resolve()).then(function () {
          return resolve();
        });
      });
    });
  };
  FilterManager.prototype.getFilterModel = function () {
    var result = {};
    this.allAdvancedFilters.forEach(function (filterWrapper, key) {
      // because user can provide filters, we provide useful error checking and messages
      var filterPromise = filterWrapper.filterPromise;
      var filter = filterPromise.resolveNow(null, function (promiseFilter) {
        return promiseFilter;
      });
      if (filter == null) {
        return null;
      }
      if (typeof filter.getModel !== 'function') {
        console.warn('Warning ag-grid - filter API missing getModel method, which is needed for getFilterModel');
        return;
      }
      var model = filter.getModel();
      if (exists(model)) {
        result[key] = model;
      }
    });
    return result;
  };
  // returns true if any advanced filter (ie not quick filter) active
  FilterManager.prototype.isAdvancedFilterPresent = function () {
    return this.activeAdvancedFilters.length > 0;
  };
  // called by:
  // 1) onFilterChanged()
  // 2) onNewRowsLoaded()
  FilterManager.prototype.updateActiveFilters = function () {
    var _this = this;
    this.activeAdvancedFilters.length = 0;
    this.allAdvancedFilters.forEach(function (filterWrapper) {
      if (filterWrapper.filterPromise.resolveNow(false, function (filter) {
        return filter.isFilterActive();
      })) {
        var resolvedPromise = filterWrapper.filterPromise.resolveNow(null, function (filter) {
          return filter;
        });
        _this.activeAdvancedFilters.push(resolvedPromise);
      }
    });
  };
  FilterManager.prototype.updateFilterFlagInColumns = function (source, additionalEventAttributes) {
    this.allAdvancedFilters.forEach(function (filterWrapper) {
      var isFilterActive = filterWrapper.filterPromise.resolveNow(false, function (filter) {
        return filter.isFilterActive();
      });
      filterWrapper.column.setFilterActive(isFilterActive, source, additionalEventAttributes);
    });
  };
  FilterManager.prototype.isAnyFilterPresent = function () {
    return this.isQuickFilterPresent() || this.isAdvancedFilterPresent() || this.gridOptionsWrapper.isExternalFilterPresent();
  };
  FilterManager.prototype.doAdvancedFiltersPass = function (node, filterToSkip) {
    var data = node.data;
    for (var i = 0; i < this.activeAdvancedFilters.length; i++) {
      var filter = this.activeAdvancedFilters[i];
      if (filter == null || filter === filterToSkip) {
        continue;
      }
      if (typeof filter.doesFilterPass !== 'function') {
        // because users can do custom filters, give nice error message
        throw new Error('Filter is missing method doesFilterPass');
      }
      if (!filter.doesFilterPass({
        node: node,
        data: data
      })) {
        return false;
      }
    }
    return true;
  };
  FilterManager.prototype.parseQuickFilter = function (newFilter) {
    if (!exists(newFilter)) {
      return null;
    }
    if (!this.gridOptionsWrapper.isRowModelDefault()) {
      console.warn('ag-grid: quick filtering only works with the Client-Side Row Model');
      return null;
    }
    return newFilter.toUpperCase();
  };
  FilterManager.prototype.setQuickFilter = function (newFilter) {
    var parsedFilter = this.parseQuickFilter(newFilter);
    if (this.quickFilter !== parsedFilter) {
      this.quickFilter = parsedFilter;
      this.setQuickFilterParts();
      this.onFilterChanged();
    }
  };
  FilterManager.prototype.onFilterChanged = function (filterInstance, additionalEventAttributes) {
    this.updateActiveFilters();
    this.updateFilterFlagInColumns('filterChanged', additionalEventAttributes);
    this.allAdvancedFilters.forEach(function (filterWrapper) {
      filterWrapper.filterPromise.then(function (filter) {
        if (filter !== filterInstance && filter.onAnyFilterChanged) {
          filter.onAnyFilterChanged();
        }
      });
    });
    var filterChangedEvent = {
      type: Events.EVENT_FILTER_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    if (additionalEventAttributes) {
      mergeDeep(filterChangedEvent, additionalEventAttributes);
    }
    // because internal events are not async in ag-grid, when the dispatchEvent
    // method comes back, we know all listeners have finished executing.
    this.processingFilterChange = true;
    this.eventService.dispatchEvent(filterChangedEvent);
    this.processingFilterChange = false;
  };
  FilterManager.prototype.isSuppressFlashingCellsBecauseFiltering = function () {
    // if user has elected to always flash cell changes, then always return false, otherwise we suppress flashing
    // changes when filtering
    return !this.allowShowChangeAfterFilter && this.processingFilterChange;
  };
  FilterManager.prototype.isQuickFilterPresent = function () {
    return this.quickFilter !== null;
  };
  FilterManager.prototype.doesRowPassOtherFilters = function (filterToSkip, node) {
    return this.doesRowPassFilter({
      rowNode: node,
      filterInstanceToSkip: filterToSkip
    });
  };
  FilterManager.prototype.doesRowPassQuickFilterNoCache = function (node, filterPart) {
    var _this = this;
    var columns = this.columnController.getAllColumnsForQuickFilter();
    return some(columns, function (column) {
      var part = _this.getQuickFilterTextForColumn(column, node);
      return exists(part) && part.indexOf(filterPart) >= 0;
    });
  };
  FilterManager.prototype.doesRowPassQuickFilterCache = function (node, filterPart) {
    if (!node.quickFilterAggregateText) {
      this.aggregateRowForQuickFilter(node);
    }
    return node.quickFilterAggregateText.indexOf(filterPart) >= 0;
  };
  FilterManager.prototype.doesRowPassQuickFilter = function (node) {
    var _this = this;
    var usingCache = this.gridOptionsWrapper.isCacheQuickFilter();
    // each part must pass, if any fails, then the whole filter fails
    return every(this.quickFilterParts, function (part) {
      return usingCache ? _this.doesRowPassQuickFilterCache(node, part) : _this.doesRowPassQuickFilterNoCache(node, part);
    });
  };
  FilterManager.prototype.doesRowPassFilter = function (params) {
    // the row must pass ALL of the filters, so if any of them fail,
    // we return true. that means if a row passes the quick filter,
    // but fails the column filter, it fails overall
    // first up, check quick filter
    if (this.isQuickFilterPresent() && !this.doesRowPassQuickFilter(params.rowNode)) {
      return false;
    }
    // secondly, give the client a chance to reject this row
    if (this.gridOptionsWrapper.isExternalFilterPresent() && !this.gridOptionsWrapper.doesExternalFilterPass(params.rowNode)) {
      return false;
    }
    // lastly, check our internal advanced filter
    if (this.isAdvancedFilterPresent() && !this.doAdvancedFiltersPass(params.rowNode, params.filterInstanceToSkip)) {
      return false;
    }
    // got this far, all filters pass
    return true;
  };
  FilterManager.prototype.getQuickFilterTextForColumn = function (column, node) {
    var value = this.valueService.getValue(column, node, true);
    var colDef = column.getColDef();
    if (colDef.getQuickFilterText) {
      var params = {
        value: value,
        node: node,
        data: node.data,
        column: column,
        colDef: colDef,
        context: this.gridOptionsWrapper.getContext()
      };
      value = colDef.getQuickFilterText(params);
    }
    return exists(value) ? value.toString().toUpperCase() : null;
  };
  FilterManager.prototype.aggregateRowForQuickFilter = function (node) {
    var _this = this;
    var stringParts = [];
    var columns = this.columnController.getAllColumnsForQuickFilter();
    forEach(columns, function (column) {
      var part = _this.getQuickFilterTextForColumn(column, node);
      if (exists(part)) {
        stringParts.push(part);
      }
    });
    node.quickFilterAggregateText = stringParts.join(FilterManager_1.QUICK_FILTER_SEPARATOR);
  };
  FilterManager.prototype.onNewRowsLoaded = function (source) {
    this.allAdvancedFilters.forEach(function (filterWrapper) {
      filterWrapper.filterPromise.then(function (filter) {
        if (filter.onNewRowsLoaded) {
          filter.onNewRowsLoaded();
        }
      });
    });
    this.updateFilterFlagInColumns(source);
    this.updateActiveFilters();
  };
  FilterManager.prototype.createValueGetter = function (column) {
    var _this = this;
    return function (node) {
      return _this.valueService.getValue(column, node, true);
    };
  };
  FilterManager.prototype.getFilterComponent = function (column, source, createIfDoesNotExist) {
    if (createIfDoesNotExist === void 0) {
      createIfDoesNotExist = true;
    }
    if (createIfDoesNotExist) {
      return this.getOrCreateFilterWrapper(column, source).filterPromise;
    }
    var filterWrapper = this.cachedFilter(column);
    return filterWrapper ? filterWrapper.filterPromise : null;
  };
  FilterManager.prototype.isFilterActive = function (column) {
    var filterWrapper = this.cachedFilter(column);
    return !!filterWrapper && filterWrapper.filterPromise.resolveNow(false, function (filter) {
      return filter.isFilterActive();
    });
  };
  FilterManager.prototype.getOrCreateFilterWrapper = function (column, source) {
    var filterWrapper = this.cachedFilter(column);
    if (!filterWrapper) {
      filterWrapper = this.createFilterWrapper(column, source);
      this.allAdvancedFilters.set(column.getColId(), filterWrapper);
    } else if (source !== 'NO_UI') {
      this.putIntoGui(filterWrapper, source);
    }
    return filterWrapper;
  };
  FilterManager.prototype.cachedFilter = function (column) {
    return this.allAdvancedFilters.get(column.getColId());
  };
  FilterManager.prototype.createFilterInstance = function (column, $scope) {
    var _this = this;
    var defaultFilter = ModuleRegistry.isRegistered(exports.ModuleNames.SetFilterModule) ? 'agSetColumnFilter' : 'agTextColumnFilter';
    var colDef = column.getColDef();
    var filterInstance;
    var params = __assign$6(__assign$6({}, this.createFilterParams(column, colDef, $scope)), {
      filterModifiedCallback: function () {
        var event = {
          type: Events.EVENT_FILTER_MODIFIED,
          api: _this.gridApi,
          columnApi: _this.columnApi,
          column: column,
          filterInstance: filterInstance
        };
        _this.eventService.dispatchEvent(event);
      },
      filterChangedCallback: function (additionalEventAttributes) {
        return _this.onFilterChanged(filterInstance, additionalEventAttributes);
      },
      doesRowPassOtherFilter: function (node) {
        return _this.doesRowPassOtherFilters(filterInstance, node);
      }
    });
    var res = this.userComponentFactory.newFilterComponent(colDef, params, defaultFilter);
    if (res) {
      res.then(function (r) {
        return filterInstance = r;
      });
    }
    return res;
  };
  FilterManager.prototype.createFilterParams = function (column, colDef, $scope) {
    if ($scope === void 0) {
      $scope = null;
    }
    var params = {
      api: this.gridOptionsWrapper.getApi(),
      column: column,
      colDef: cloneObject(colDef),
      rowModel: this.rowModel,
      filterChangedCallback: function () {},
      filterModifiedCallback: function () {},
      valueGetter: this.createValueGetter(column),
      context: this.gridOptionsWrapper.getContext(),
      doesRowPassOtherFilter: function () {
        return true;
      }
    };
    // hack in scope if using AngularJS
    if ($scope) {
      params.$scope = $scope;
    }
    return params;
  };
  FilterManager.prototype.createFilterWrapper = function (column, source) {
    var filterWrapper = {
      column: column,
      filterPromise: null,
      scope: null,
      compiledElement: null,
      guiPromise: AgPromise.resolve(null)
    };
    filterWrapper.scope = this.gridOptionsWrapper.isAngularCompileFilters() ? this.$scope.$new() : null;
    filterWrapper.filterPromise = this.createFilterInstance(column, filterWrapper.scope);
    if (filterWrapper.filterPromise) {
      this.putIntoGui(filterWrapper, source);
    }
    return filterWrapper;
  };
  FilterManager.prototype.putIntoGui = function (filterWrapper, source) {
    var _this = this;
    var eFilterGui = document.createElement('div');
    eFilterGui.className = 'ag-filter';
    filterWrapper.guiPromise = new AgPromise(function (resolve) {
      filterWrapper.filterPromise.then(function (filter) {
        var guiFromFilter = filter.getGui();
        if (!exists(guiFromFilter)) {
          console.warn("getGui method from filter returned " + guiFromFilter + ", it should be a DOM element or an HTML template string.");
        }
        // for backwards compatibility with Angular 1 - we
        // used to allow providing back HTML from getGui().
        // once we move away from supporting Angular 1
        // directly, we can change this.
        if (typeof guiFromFilter === 'string') {
          guiFromFilter = loadTemplate(guiFromFilter);
        }
        eFilterGui.appendChild(guiFromFilter);
        if (filterWrapper.scope) {
          var compiledElement = _this.$compile(eFilterGui)(filterWrapper.scope);
          filterWrapper.compiledElement = compiledElement;
          window.setTimeout(function () {
            return filterWrapper.scope.$apply();
          }, 0);
        }
        resolve(eFilterGui);
        _this.eventService.dispatchEvent({
          type: Events.EVENT_FILTER_OPENED,
          column: filterWrapper.column,
          source: source,
          eGui: eFilterGui,
          api: _this.gridApi,
          columnApi: _this.columnApi
        });
      });
    });
  };
  FilterManager.prototype.onNewColumnsLoaded = function () {
    var _this = this;
    var atLeastOneFilterGone = false;
    this.allAdvancedFilters.forEach(function (filterWrapper) {
      var oldColumn = !_this.columnController.getPrimaryColumn(filterWrapper.column);
      if (oldColumn) {
        atLeastOneFilterGone = true;
        _this.disposeFilterWrapper(filterWrapper, 'filterDestroyed');
      }
    });
    if (atLeastOneFilterGone) {
      this.onFilterChanged();
    }
  };
  // destroys the filter, so it not longer takes part
  FilterManager.prototype.destroyFilter = function (column, source) {
    if (source === void 0) {
      source = 'api';
    }
    var filterWrapper = this.allAdvancedFilters.get(column.getColId());
    if (filterWrapper) {
      this.disposeFilterWrapper(filterWrapper, source);
      this.onFilterChanged();
    }
  };
  FilterManager.prototype.disposeFilterWrapper = function (filterWrapper, source) {
    var _this = this;
    filterWrapper.filterPromise.then(function (filter) {
      (filter.setModel(null) || AgPromise.resolve()).then(function () {
        _this.getContext().destroyBean(filter);
        filterWrapper.column.setFilterActive(false, source);
        if (filterWrapper.scope) {
          if (filterWrapper.compiledElement) {
            filterWrapper.compiledElement.remove();
          }
          filterWrapper.scope.$destroy();
        }
        _this.allAdvancedFilters.delete(filterWrapper.column.getColId());
      });
    });
  };
  FilterManager.prototype.destroy = function () {
    var _this = this;
    _super.prototype.destroy.call(this);
    this.allAdvancedFilters.forEach(function (filterWrapper) {
      return _this.disposeFilterWrapper(filterWrapper, 'filterDestroyed');
    });
  };
  var FilterManager_1;
  FilterManager.QUICK_FILTER_SEPARATOR = '\n';
  __decorate$V([Autowired('$compile')], FilterManager.prototype, "$compile", void 0);
  __decorate$V([Autowired('$scope')], FilterManager.prototype, "$scope", void 0);
  __decorate$V([Autowired('valueService')], FilterManager.prototype, "valueService", void 0);
  __decorate$V([Autowired('columnController')], FilterManager.prototype, "columnController", void 0);
  __decorate$V([Autowired('rowModel')], FilterManager.prototype, "rowModel", void 0);
  __decorate$V([Autowired('columnApi')], FilterManager.prototype, "columnApi", void 0);
  __decorate$V([Autowired('gridApi')], FilterManager.prototype, "gridApi", void 0);
  __decorate$V([Autowired('userComponentFactory')], FilterManager.prototype, "userComponentFactory", void 0);
  __decorate$V([PostConstruct], FilterManager.prototype, "init", null);
  __decorate$V([PreDestroy], FilterManager.prototype, "destroy", null);
  FilterManager = FilterManager_1 = __decorate$V([Bean('filterManager')], FilterManager);
  return FilterManager;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$11 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$W =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ValueService = /** @class */function (_super) {
  __extends$11(ValueService, _super);
  function ValueService() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.initialised = false;
    return _this;
  }
  ValueService.prototype.init = function () {
    this.cellExpressions = this.gridOptionsWrapper.isEnableCellExpressions();
    this.initialised = true;
  };
  ValueService.prototype.getValue = function (column, rowNode, forFilter, ignoreAggData) {
    if (forFilter === void 0) {
      forFilter = false;
    }
    if (ignoreAggData === void 0) {
      ignoreAggData = false;
    }
    // hack - the grid is getting refreshed before this bean gets initialised, race condition.
    // really should have a way so they get initialised in the right order???
    if (!this.initialised) {
      this.init();
    }
    if (!rowNode) {
      return;
    }
    // pull these out to make code below easier to read
    var colDef = column.getColDef();
    var field = colDef.field;
    var colId = column.getId();
    var data = rowNode.data;
    var result;
    // if there is a value getter, this gets precedence over a field
    var groupDataExists = rowNode.groupData && rowNode.groupData[colId] !== undefined;
    var aggDataExists = !ignoreAggData && rowNode.aggData && rowNode.aggData[colId] !== undefined;
    if (forFilter && colDef.filterValueGetter) {
      result = this.executeFilterValueGetter(colDef.filterValueGetter, data, column, rowNode);
    } else if (this.gridOptionsWrapper.isTreeData() && aggDataExists) {
      result = rowNode.aggData[colId];
    } else if (this.gridOptionsWrapper.isTreeData() && colDef.valueGetter) {
      result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);
    } else if (this.gridOptionsWrapper.isTreeData() && field && data) {
      result = getValueUsingField(data, field, column.isFieldContainsDots());
    } else if (groupDataExists) {
      result = rowNode.groupData[colId];
    } else if (aggDataExists) {
      result = rowNode.aggData[colId];
    } else if (colDef.valueGetter) {
      result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);
    } else if (field && data) {
      result = getValueUsingField(data, field, column.isFieldContainsDots());
    }
    // the result could be an expression itself, if we are allowing cell values to be expressions
    if (this.cellExpressions && typeof result === 'string' && result.indexOf('=') === 0) {
      var cellValueGetter = result.substring(1);
      result = this.executeValueGetter(cellValueGetter, data, column, rowNode);
    }
    if (result == null) {
      var openedGroup = this.getOpenedGroup(rowNode, column);
      if (openedGroup != null) {
        return openedGroup;
      }
    }
    return result;
  };
  ValueService.prototype.getOpenedGroup = function (rowNode, column) {
    if (!this.gridOptionsWrapper.isShowOpenedGroup()) {
      return;
    }
    var colDef = column.getColDef();
    if (!colDef.showRowGroup) {
      return;
    }
    var showRowGroup = column.getColDef().showRowGroup;
    var pointer = rowNode.parent;
    while (pointer != null) {
      if (pointer.rowGroupColumn && (showRowGroup === true || showRowGroup === pointer.rowGroupColumn.getId())) {
        return pointer.key;
      }
      pointer = pointer.parent;
    }
    return undefined;
  };
  ValueService.prototype.setValue = function (rowNode, colKey, newValue, eventSource) {
    var column = this.columnController.getPrimaryColumn(colKey);
    if (!rowNode || !column) {
      return;
    }
    // this will only happen if user is trying to paste into a group row, which doesn't make sense
    // the user should not be trying to paste into group rows
    if (missing(rowNode.data)) {
      rowNode.data = {};
    }
    // for backwards compatibility we are also retrieving the newValueHandler as well as the valueSetter
    var _a = column.getColDef(),
      field = _a.field,
      newValueHandler = _a.newValueHandler,
      valueSetter = _a.valueSetter;
    // need either a field or a newValueHandler for this to work
    if (missing(field) && missing(newValueHandler) && missing(valueSetter)) {
      // we don't tell user about newValueHandler, as that is deprecated
      console.warn("AG Grid: you need either field or valueSetter set on colDef for editing to work");
      return;
    }
    var params = {
      node: rowNode,
      data: rowNode.data,
      oldValue: this.getValue(column, rowNode),
      newValue: newValue,
      colDef: column.getColDef(),
      column: column,
      api: this.gridOptionsWrapper.getApi(),
      columnApi: this.gridOptionsWrapper.getColumnApi(),
      context: this.gridOptionsWrapper.getContext()
    };
    params.newValue = newValue;
    var valueWasDifferent;
    if (newValueHandler && exists(newValueHandler)) {
      valueWasDifferent = newValueHandler(params);
    } else if (exists(valueSetter)) {
      valueWasDifferent = this.expressionService.evaluate(valueSetter, params);
    } else {
      valueWasDifferent = this.setValueUsingField(rowNode.data, field, newValue, column.isFieldContainsDots());
    }
    // in case user forgot to return something (possible if they are not using TypeScript
    // and just forgot, or using an old newValueHandler we didn't always expect a return
    // value here), we default the return value to true, so we always refresh.
    if (valueWasDifferent === undefined) {
      valueWasDifferent = true;
    }
    // if no change to the value, then no need to do the updating, or notifying via events.
    // otherwise the user could be tabbing around the grid, and cellValueChange would get called
    // all the time.
    if (!valueWasDifferent) {
      return;
    }
    // reset quick filter on this row
    rowNode.resetQuickFilterAggregateText();
    this.valueCache.onDataChanged();
    params.newValue = this.getValue(column, rowNode);
    var onCellValueChanged = column.getColDef().onCellValueChanged;
    if (typeof onCellValueChanged === 'function') {
      // to make callback async, do in a timeout
      setTimeout(function () {
        return onCellValueChanged(params);
      }, 0);
    }
    var event = {
      type: Events.EVENT_CELL_VALUE_CHANGED,
      event: null,
      rowIndex: rowNode.rowIndex,
      rowPinned: rowNode.rowPinned,
      column: params.column,
      api: params.api,
      columnApi: params.columnApi,
      colDef: params.colDef,
      context: params.context,
      data: rowNode.data,
      node: rowNode,
      oldValue: params.oldValue,
      newValue: params.newValue,
      value: params.newValue,
      source: eventSource
    };
    this.eventService.dispatchEvent(event);
  };
  ValueService.prototype.setValueUsingField = function (data, field, newValue, isFieldContainsDots) {
    if (!field) {
      return false;
    }
    // if no '.', then it's not a deep value
    var valuesAreSame = false;
    if (!isFieldContainsDots) {
      data[field] = newValue;
    } else {
      // otherwise it is a deep value, so need to dig for it
      var fieldPieces = field.split('.');
      var currentObject = data;
      while (fieldPieces.length > 0 && currentObject) {
        var fieldPiece = fieldPieces.shift();
        if (fieldPieces.length === 0) {
          currentObject[fieldPiece] = newValue;
        } else {
          currentObject = currentObject[fieldPiece];
        }
      }
    }
    return !valuesAreSame;
  };
  ValueService.prototype.executeFilterValueGetter = function (valueGetter, data, column, rowNode) {
    var params = {
      data: data,
      node: rowNode,
      column: column,
      colDef: column.getColDef(),
      api: this.gridOptionsWrapper.getApi(),
      columnApi: this.gridOptionsWrapper.getColumnApi(),
      context: this.gridOptionsWrapper.getContext(),
      getValue: this.getValueCallback.bind(this, rowNode)
    };
    return this.expressionService.evaluate(valueGetter, params);
  };
  ValueService.prototype.executeValueGetter = function (valueGetter, data, column, rowNode) {
    var colId = column.getId();
    // if inside the same turn, just return back the value we got last time
    var valueFromCache = this.valueCache.getValue(rowNode, colId);
    if (valueFromCache !== undefined) {
      return valueFromCache;
    }
    var params = {
      data: data,
      node: rowNode,
      column: column,
      colDef: column.getColDef(),
      api: this.gridOptionsWrapper.getApi(),
      columnApi: this.gridOptionsWrapper.getColumnApi(),
      context: this.gridOptionsWrapper.getContext(),
      getValue: this.getValueCallback.bind(this, rowNode)
    };
    var result = this.expressionService.evaluate(valueGetter, params);
    // if a turn is active, store the value in case the grid asks for it again
    this.valueCache.setValue(rowNode, colId, result);
    return result;
  };
  ValueService.prototype.getValueCallback = function (node, field) {
    var otherColumn = this.columnController.getPrimaryColumn(field);
    if (otherColumn) {
      return this.getValue(otherColumn, node);
    }
    return null;
  };
  // used by row grouping and pivot, to get key for a row. col can be a pivot col or a row grouping col
  ValueService.prototype.getKeyForNode = function (col, rowNode) {
    var value = this.getValue(col, rowNode);
    var keyCreator = col.getColDef().keyCreator;
    var result = keyCreator ? keyCreator({
      value: value
    }) : value;
    // if already a string, or missing, just return it
    if (typeof result === 'string' || result == null) {
      return result;
    }
    result = String(result);
    if (result === '[object Object]') {
      doOnce(function () {
        console.warn('AG Grid: a column you are grouping or pivoting by has objects as values. If you want to group by complex objects then either a) use a colDef.keyCreator (se AG Grid docs) or b) to toString() on the object to return a key');
      }, 'getKeyForNode - warn about [object,object]');
    }
    return result;
  };
  __decorate$W([Autowired('expressionService')], ValueService.prototype, "expressionService", void 0);
  __decorate$W([Autowired('columnController')], ValueService.prototype, "columnController", void 0);
  __decorate$W([Autowired('valueCache')], ValueService.prototype, "valueCache", void 0);
  __decorate$W([PostConstruct], ValueService.prototype, "init", null);
  ValueService = __decorate$W([Bean('valueService')], ValueService);
  return ValueService;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$12 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$X =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
(function (LayoutCssClasses) {
  LayoutCssClasses["AUTO_HEIGHT"] = "ag-layout-auto-height";
  LayoutCssClasses["NORMAL"] = "ag-layout-normal";
  LayoutCssClasses["PRINT"] = "ag-layout-print";
})(exports.LayoutCssClasses || (exports.LayoutCssClasses = {}));
var LayoutFeature = /** @class */function (_super) {
  __extends$12(LayoutFeature, _super);
  function LayoutFeature(view) {
    var _this = _super.call(this) || this;
    _this.view = view;
    return _this;
  }
  LayoutFeature.prototype.postConstruct = function () {
    this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, this.updateLayoutClasses.bind(this));
    this.updateLayoutClasses();
  };
  LayoutFeature.prototype.updateLayoutClasses = function () {
    var domLayout = this.gridOptionsWrapper.getDomLayout();
    this.view.updateLayoutClasses({
      autoHeight: domLayout === Constants.DOM_LAYOUT_AUTO_HEIGHT,
      normal: domLayout === Constants.DOM_LAYOUT_NORMAL,
      print: domLayout === Constants.DOM_LAYOUT_PRINT
    });
  };
  __decorate$X([Autowired('gridOptionsWrapper')], LayoutFeature.prototype, "gridOptionsWrapper", void 0);
  __decorate$X([PostConstruct], LayoutFeature.prototype, "postConstruct", null);
  return LayoutFeature;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$13 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$Y =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var GridBodyScrollFeature = /** @class */function (_super) {
  __extends$13(GridBodyScrollFeature, _super);
  function GridBodyScrollFeature(eBodyViewport) {
    var _this = _super.call(this) || this;
    _this.scrollLeft = -1;
    _this.nextScrollTop = -1;
    _this.scrollTop = -1;
    _this.eBodyViewport = eBodyViewport;
    _this.resetLastHorizontalScrollElementDebounced = debounce(_this.resetLastHorizontalScrollElement.bind(_this), 500);
    return _this;
  }
  GridBodyScrollFeature.prototype.postConstruct = function () {
    var _this = this;
    this.enableRtl = this.gridOptionsWrapper.isEnableRtl();
    this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onDisplayedColumnsWidthChanged.bind(this));
    this.controllersService.whenReady(function (p) {
      _this.centerRowContainerCon = p.centerRowContainerCon;
      _this.onDisplayedColumnsWidthChanged();
      _this.addScrollListener();
    });
  };
  GridBodyScrollFeature.prototype.addScrollListener = function () {
    var fakeHScroll = this.controllersService.getFakeHScrollCon();
    this.addManagedListener(this.centerRowContainerCon.getViewportElement(), 'scroll', this.onCenterViewportScroll.bind(this));
    this.addManagedListener(fakeHScroll.getViewport(), 'scroll', this.onFakeHorizontalScroll.bind(this));
    var onVerticalScroll = this.gridOptionsWrapper.isDebounceVerticalScrollbar() ? debounce(this.onVerticalScroll.bind(this), 100) : this.onVerticalScroll.bind(this);
    this.addManagedListener(this.eBodyViewport, 'scroll', onVerticalScroll);
  };
  GridBodyScrollFeature.prototype.onDisplayedColumnsWidthChanged = function () {
    if (this.enableRtl) {
      // because RTL is all backwards, a change in the width of the row
      // can cause a change in the scroll position, without a scroll event,
      // because the scroll position in RTL is a function that depends on
      // the width. to be convinced of this, take out this line, enable RTL,
      // scroll all the way to the left and then resize a column
      this.horizontallyScrollHeaderCenterAndFloatingCenter();
    }
  };
  GridBodyScrollFeature.prototype.horizontallyScrollHeaderCenterAndFloatingCenter = function (scrollLeft) {
    if (scrollLeft === undefined) {
      scrollLeft = this.centerRowContainerCon.getCenterViewportScrollLeft();
    }
    var offset = this.enableRtl ? scrollLeft : -scrollLeft;
    var topCenterContainer = this.controllersService.getTopCenterRowContainerCon();
    var bottomCenterContainer = this.controllersService.getBottomCenterRowContainerCon();
    var headerRootComp = this.controllersService.getHeaderRootComp();
    var fakeHScroll = this.controllersService.getFakeHScrollCon();
    headerRootComp.setHorizontalScroll(offset);
    bottomCenterContainer.setContainerTranslateX(offset);
    topCenterContainer.setContainerTranslateX(offset);
    var partner = this.lastHorizontalScrollElement === this.centerRowContainerCon.getViewportElement() ? fakeHScroll.getViewport() : this.centerRowContainerCon.getViewportElement();
    setScrollLeft(partner, Math.abs(scrollLeft), this.enableRtl);
  };
  GridBodyScrollFeature.prototype.isControllingScroll = function (eDiv) {
    if (!this.lastHorizontalScrollElement) {
      this.lastHorizontalScrollElement = eDiv;
      return true;
    }
    return eDiv === this.lastHorizontalScrollElement;
  };
  GridBodyScrollFeature.prototype.onFakeHorizontalScroll = function () {
    var fakeHScrollViewport = this.controllersService.getFakeHScrollCon().getViewport();
    if (!this.isControllingScroll(fakeHScrollViewport)) {
      return;
    }
    this.onBodyHorizontalScroll(fakeHScrollViewport);
  };
  GridBodyScrollFeature.prototype.onCenterViewportScroll = function () {
    var centerContainerViewport = this.centerRowContainerCon.getViewportElement();
    if (!this.isControllingScroll(centerContainerViewport)) {
      return;
    }
    this.onBodyHorizontalScroll(centerContainerViewport);
  };
  GridBodyScrollFeature.prototype.onBodyHorizontalScroll = function (eSource) {
    var centerContainerViewport = this.centerRowContainerCon.getViewportElement();
    var scrollLeft = centerContainerViewport.scrollLeft;
    if (this.shouldBlockScrollUpdate('horizontal', scrollLeft, true)) {
      return;
    }
    // we do Math.round() rather than Math.floor(), to mirror how scroll values are applied.
    // eg if a scale is applied (ie user has zoomed the browser), then applying scroll=200
    // could result in 199.88, which then floor(199.88) = 199, however round(199.88) = 200.
    // initially Math.floor() was used, however this caused (almost) infinite loop with aligned grids,
    // as the scroll would move 1px at at time bouncing from one grid to the next (eg one grid would cause
    // scroll to 200px, the next to 199px, then the first back to 198px and so on).
    this.doHorizontalScroll(Math.round(getScrollLeft(eSource, this.enableRtl)));
    this.resetLastHorizontalScrollElementDebounced();
  };
  GridBodyScrollFeature.prototype.onVerticalScroll = function () {
    var scrollTop = this.eBodyViewport.scrollTop;
    if (this.shouldBlockScrollUpdate('vertical', scrollTop, true)) {
      return;
    }
    this.animationFrameService.setScrollTop(scrollTop);
    this.nextScrollTop = scrollTop;
    if (this.gridOptionsWrapper.isSuppressAnimationFrame()) {
      this.scrollTop = this.nextScrollTop;
      this.redrawRowsAfterScroll();
    } else {
      this.animationFrameService.schedule();
    }
  };
  GridBodyScrollFeature.prototype.resetLastHorizontalScrollElement = function () {
    this.lastHorizontalScrollElement = null;
  };
  GridBodyScrollFeature.prototype.doHorizontalScroll = function (scrollLeft) {
    this.scrollLeft = scrollLeft;
    var event = {
      type: Events.EVENT_BODY_SCROLL,
      api: this.gridApi,
      columnApi: this.columnApi,
      direction: 'horizontal',
      left: this.scrollLeft,
      top: this.scrollTop
    };
    this.eventService.dispatchEvent(event);
    this.horizontallyScrollHeaderCenterAndFloatingCenter(scrollLeft);
    this.onHorizontalViewportChanged();
  };
  GridBodyScrollFeature.prototype.shouldBlockScrollUpdate = function (direction, scrollTo, touchOnly) {
    // touch devices allow elastic scroll - which temporally scrolls the panel outside of the viewport
    // (eg user uses touch to go to the left of the grid, but drags past the left, the rows will actually
    // scroll past the left until the user releases the mouse). when this happens, we want ignore the scroll,
    // as otherwise it was causing the rows and header to flicker.
    if (touchOnly === void 0) {
      touchOnly = false;
    }
    // sometimes when scrolling, we got values that extended the maximum scroll allowed. we used to
    // ignore these scrolls. problem is the max scroll position could be skipped (eg the previous scroll event
    // could be 10px before the max position, and then current scroll event could be 20px after the max position).
    // if we just ignored the last event, we would be setting the scroll to 10px before the max position, when in
    // actual fact the user has exceeded the max scroll and thus scroll should be set to the max.
    if (touchOnly && !isIOSUserAgent()) {
      return false;
    }
    if (direction === 'vertical') {
      var clientHeight = getInnerHeight(this.eBodyViewport);
      var scrollHeight = this.eBodyViewport.scrollHeight;
      if (scrollTo < 0 || scrollTo + clientHeight > scrollHeight) {
        return true;
      }
    }
    if (direction === 'horizontal') {
      var clientWidth = this.centerRowContainerCon.getCenterWidth();
      var scrollWidth = this.centerRowContainerCon.getViewportElement().scrollWidth;
      if (this.enableRtl && isRtlNegativeScroll()) {
        if (scrollTo > 0) {
          return true;
        }
      } else if (scrollTo < 0) {
        return true;
      }
      if (Math.abs(scrollTo) + clientWidth > scrollWidth) {
        return true;
      }
    }
    return false;
  };
  GridBodyScrollFeature.prototype.redrawRowsAfterScroll = function () {
    var event = {
      type: Events.EVENT_BODY_SCROLL,
      direction: 'vertical',
      api: this.gridApi,
      columnApi: this.columnApi,
      left: this.scrollLeft,
      top: this.scrollTop
    };
    this.eventService.dispatchEvent(event);
  };
  GridBodyScrollFeature.prototype.onHorizontalViewportChanged = function () {
    this.centerRowContainerCon.onHorizontalViewportChanged();
  };
  // this is to cater for AG-3274, where grid is removed from the dom and then inserted back in again.
  // (which happens with some implementations of tabbing). this can result in horizontal scroll getting
  // reset back to the left, however no scroll event is fired. so we need to get header to also scroll
  // back to the left to be kept in sync.
  // adding and removing the grid from the DOM both resets the scroll position and
  // triggers a resize event, so notify listeners if the scroll position has changed
  GridBodyScrollFeature.prototype.checkScrollLeft = function () {
    if (this.scrollLeft !== this.centerRowContainerCon.getCenterViewportScrollLeft()) {
      this.onBodyHorizontalScroll(this.centerRowContainerCon.getViewportElement());
    }
  };
  GridBodyScrollFeature.prototype.executeAnimationFrameScroll = function () {
    var frameNeeded = this.scrollTop != this.nextScrollTop;
    if (frameNeeded) {
      this.scrollTop = this.nextScrollTop;
      this.redrawRowsAfterScroll();
    }
    return frameNeeded;
  };
  // called by scrollHorizontally method and alignedGridsService
  GridBodyScrollFeature.prototype.setHorizontalScrollPosition = function (hScrollPosition) {
    var minScrollLeft = 0;
    var maxScrollLeft = this.centerRowContainerCon.getViewportElement().scrollWidth - this.centerRowContainerCon.getCenterWidth();
    if (this.shouldBlockScrollUpdate('horizontal', hScrollPosition)) {
      if (this.enableRtl && isRtlNegativeScroll()) {
        hScrollPosition = hScrollPosition > 0 ? 0 : maxScrollLeft;
      } else {
        hScrollPosition = Math.min(Math.max(hScrollPosition, minScrollLeft), maxScrollLeft);
      }
    }
    setScrollLeft(this.centerRowContainerCon.getViewportElement(), Math.abs(hScrollPosition), this.enableRtl);
    // we need to manually do the event handling (rather than wait for the event)
    // for the alignedGridsService, as if we don't, the aligned grid service gets
    // notified async, and then it's 'consuming' flag doesn't get used right, and
    // we can end up with an infinite loop
    this.doHorizontalScroll(hScrollPosition);
  };
  GridBodyScrollFeature.prototype.setVerticalScrollPosition = function (vScrollPosition) {
    this.eBodyViewport.scrollTop = vScrollPosition;
  };
  GridBodyScrollFeature.prototype.getVScrollPosition = function () {
    var result = {
      top: this.eBodyViewport.scrollTop,
      bottom: this.eBodyViewport.scrollTop + this.eBodyViewport.offsetHeight
    };
    return result;
  };
  GridBodyScrollFeature.prototype.getHScrollPosition = function () {
    return this.centerRowContainerCon.getHScrollPosition();
  };
  GridBodyScrollFeature.prototype.isHorizontalScrollShowing = function () {
    return this.centerRowContainerCon.isHorizontalScrollShowing();
  };
  // called by the headerRootComp and moveColumnController
  GridBodyScrollFeature.prototype.scrollHorizontally = function (pixels) {
    var oldScrollPosition = this.centerRowContainerCon.getViewportElement().scrollLeft;
    this.setHorizontalScrollPosition(oldScrollPosition + pixels);
    return this.centerRowContainerCon.getViewportElement().scrollLeft - oldScrollPosition;
  };
  // gets called by rowRenderer when new data loaded, as it will want to scroll to the top
  GridBodyScrollFeature.prototype.scrollToTop = function () {
    this.eBodyViewport.scrollTop = 0;
  };
  // Valid values for position are bottom, middle and top
  GridBodyScrollFeature.prototype.ensureNodeVisible = function (comparator, position) {
    if (position === void 0) {
      position = null;
    }
    // look for the node index we want to display
    var rowCount = this.rowModel.getRowCount();
    var comparatorIsAFunction = typeof comparator === 'function';
    var indexToSelect = -1;
    // go through all the nodes, find the one we want to show
    for (var i = 0; i < rowCount; i++) {
      var node = this.rowModel.getRow(i);
      if (comparatorIsAFunction) {
        if (comparator(node)) {
          indexToSelect = i;
          break;
        }
      } else {
        // check object equality against node and data
        if (comparator === node || comparator === node.data) {
          indexToSelect = i;
          break;
        }
      }
    }
    if (indexToSelect >= 0) {
      this.ensureIndexVisible(indexToSelect, position);
    }
  };
  // Valid values for position are bottom, middle and top
  // position should be {'top','middle','bottom', or undefined/null}.
  // if undefined/null, then the grid will to the minimal amount of scrolling,
  // eg if grid needs to scroll up, it scrolls until row is on top,
  //    if grid needs to scroll down, it scrolls until row is on bottom,
  //    if row is already in view, grid does not scroll
  GridBodyScrollFeature.prototype.ensureIndexVisible = function (index, position) {
    // if for print or auto height, everything is always visible
    if (this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT) {
      return;
    }
    var rowCount = this.paginationProxy.getRowCount();
    if (typeof index !== 'number' || index < 0 || index >= rowCount) {
      console.warn('invalid row index for ensureIndexVisible: ' + index);
      return;
    }
    var isPaging = this.gridOptionsWrapper.isPagination();
    var paginationPanelEnabled = isPaging && !this.gridOptionsWrapper.isSuppressPaginationPanel();
    if (!paginationPanelEnabled) {
      this.paginationProxy.goToPageWithIndex(index);
    }
    var rowNode = this.paginationProxy.getRow(index);
    var rowGotShiftedDuringOperation;
    do {
      var startingRowTop = rowNode.rowTop;
      var startingRowHeight = rowNode.rowHeight;
      var paginationOffset = this.paginationProxy.getPixelOffset();
      var rowTopPixel = rowNode.rowTop - paginationOffset;
      var rowBottomPixel = rowTopPixel + rowNode.rowHeight;
      var scrollPosition = this.getVScrollPosition();
      var heightOffset = this.heightScaler.getDivStretchOffset();
      var vScrollTop = scrollPosition.top + heightOffset;
      var vScrollBottom = scrollPosition.bottom + heightOffset;
      var viewportHeight = vScrollBottom - vScrollTop;
      // work out the pixels for top, middle and bottom up front,
      // make the if/else below easier to read
      var pxTop = this.heightScaler.getScrollPositionForPixel(rowTopPixel);
      var pxBottom = this.heightScaler.getScrollPositionForPixel(rowBottomPixel - viewportHeight);
      // make sure if middle, the row is not outside the top of the grid
      var pxMiddle = Math.min((pxTop + pxBottom) / 2, rowTopPixel);
      var rowBelowViewport = vScrollTop > rowTopPixel;
      var rowAboveViewport = vScrollBottom < rowBottomPixel;
      var newScrollPosition = null;
      if (position === 'top') {
        newScrollPosition = pxTop;
      } else if (position === 'bottom') {
        newScrollPosition = pxBottom;
      } else if (position === 'middle') {
        newScrollPosition = pxMiddle;
      } else if (rowBelowViewport) {
        // if row is before, scroll up with row at top
        newScrollPosition = pxTop;
      } else if (rowAboveViewport) {
        // if row is below, scroll down with row at bottom
        newScrollPosition = pxBottom;
      }
      if (newScrollPosition !== null) {
        this.eBodyViewport.scrollTop = newScrollPosition;
        this.rowRenderer.redrawAfterScroll();
      }
      // the row can get shifted if during the rendering (during rowRenderer.redrawAfterScroll()),
      // the height of a row changes due to lazy calculation of row heights when using
      // colDef.autoHeight or gridOptions.getRowHeight.
      // if row was shifted, then the position we scrolled to is incorrect.
      rowGotShiftedDuringOperation = startingRowTop !== rowNode.rowTop || startingRowHeight !== rowNode.rowHeight;
    } while (rowGotShiftedDuringOperation);
    // so when we return back to user, the cells have rendered
    this.animationFrameService.flushAllFrames();
  };
  GridBodyScrollFeature.prototype.ensureColumnVisible = function (key) {
    var column = this.columnController.getGridColumn(key);
    if (!column) {
      return;
    }
    if (column.isPinned()) {
      console.warn('calling ensureIndexVisible on a ' + column.getPinned() + ' pinned column doesn\'t make sense for column ' + column.getColId());
      return;
    }
    if (!this.columnController.isColumnDisplayed(column)) {
      console.warn('column is not currently visible');
      return;
    }
    var colLeftPixel = column.getLeft();
    var colRightPixel = colLeftPixel + column.getActualWidth();
    var viewportWidth = this.centerRowContainerCon.getCenterWidth();
    var scrollPosition = this.centerRowContainerCon.getCenterViewportScrollLeft();
    var bodyWidth = this.columnController.getBodyContainerWidth();
    var viewportLeftPixel;
    var viewportRightPixel;
    // the logic of working out left and right viewport px is both here and in the ColumnController,
    // need to refactor it out to one place
    if (this.enableRtl) {
      viewportLeftPixel = bodyWidth - scrollPosition - viewportWidth;
      viewportRightPixel = bodyWidth - scrollPosition;
    } else {
      viewportLeftPixel = scrollPosition;
      viewportRightPixel = viewportWidth + scrollPosition;
    }
    var viewportScrolledPastCol = viewportLeftPixel > colLeftPixel;
    var viewportScrolledBeforeCol = viewportRightPixel < colRightPixel;
    var colToSmallForViewport = viewportWidth < column.getActualWidth();
    var alignColToLeft = viewportScrolledPastCol || colToSmallForViewport;
    var alignColToRight = viewportScrolledBeforeCol;
    if (alignColToLeft || alignColToRight) {
      var newScrollPosition = void 0;
      if (this.enableRtl) {
        newScrollPosition = alignColToLeft ? bodyWidth - viewportWidth - colLeftPixel : bodyWidth - colRightPixel;
      } else {
        newScrollPosition = alignColToLeft ? colLeftPixel : colRightPixel - viewportWidth;
      }
      this.centerRowContainerCon.setCenterViewportScrollLeft(newScrollPosition);
    }
    // this will happen anyway, as the move will cause a 'scroll' event on the body, however
    // it is possible that the ensureColumnVisible method is called from within AG Grid and
    // the caller will need to have the columns rendered to continue, which will be before
    // the event has been worked on (which is the case for cell navigation).
    this.centerRowContainerCon.onHorizontalViewportChanged();
    // so when we return back to user, the cells have rendered
    this.animationFrameService.flushAllFrames();
  };
  __decorate$Y([Autowired('controllersService')], GridBodyScrollFeature.prototype, "controllersService", void 0);
  __decorate$Y([Autowired('animationFrameService')], GridBodyScrollFeature.prototype, "animationFrameService", void 0);
  __decorate$Y([Autowired('columnApi')], GridBodyScrollFeature.prototype, "columnApi", void 0);
  __decorate$Y([Autowired('gridApi')], GridBodyScrollFeature.prototype, "gridApi", void 0);
  __decorate$Y([Autowired('paginationProxy')], GridBodyScrollFeature.prototype, "paginationProxy", void 0);
  __decorate$Y([Autowired('rowModel')], GridBodyScrollFeature.prototype, "rowModel", void 0);
  __decorate$Y([Autowired('rowContainerHeightService')], GridBodyScrollFeature.prototype, "heightScaler", void 0);
  __decorate$Y([Autowired('rowRenderer')], GridBodyScrollFeature.prototype, "rowRenderer", void 0);
  __decorate$Y([Autowired('columnController')], GridBodyScrollFeature.prototype, "columnController", void 0);
  __decorate$Y([PostConstruct], GridBodyScrollFeature.prototype, "postConstruct", null);
  return GridBodyScrollFeature;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$14 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$7 =  false || function () {
  __assign$7 = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$7.apply(this, arguments);
};
var __decorate$Z =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __spreadArrays$5 =  false || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
};
var RowDragFeature = /** @class */function (_super) {
  __extends$14(RowDragFeature, _super);
  function RowDragFeature(eContainer) {
    var _this = _super.call(this) || this;
    _this.isMultiRowDrag = false;
    _this.isGridSorted = false;
    _this.isGridFiltered = false;
    _this.isRowGroupActive = false;
    _this.eContainer = eContainer;
    return _this;
  }
  RowDragFeature.prototype.postConstruct = function () {
    if (this.gridOptionsWrapper.isRowModelDefault()) {
      this.clientSideRowModel = this.rowModel;
    }
    this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onRowGroupChanged.bind(this));
    this.onSortChanged();
    this.onFilterChanged();
    this.onRowGroupChanged();
  };
  RowDragFeature.prototype.onSortChanged = function () {
    this.isGridSorted = this.sortController.isSortActive();
  };
  RowDragFeature.prototype.onFilterChanged = function () {
    this.isGridFiltered = this.filterManager.isAnyFilterPresent();
  };
  RowDragFeature.prototype.onRowGroupChanged = function () {
    var rowGroups = this.columnController.getRowGroupColumns();
    this.isRowGroupActive = !missingOrEmpty(rowGroups);
  };
  RowDragFeature.prototype.getContainer = function () {
    return this.eContainer;
  };
  RowDragFeature.prototype.isInterestedIn = function (type) {
    return type === exports.DragSourceType.RowDrag;
  };
  RowDragFeature.prototype.getIconName = function () {
    var managedDrag = this.gridOptionsWrapper.isRowDragManaged();
    if (managedDrag && this.shouldPreventRowMove()) {
      return DragAndDropService.ICON_NOT_ALLOWED;
    }
    return DragAndDropService.ICON_MOVE;
  };
  RowDragFeature.prototype.shouldPreventRowMove = function () {
    return this.isGridSorted || this.isGridFiltered || this.isRowGroupActive;
  };
  RowDragFeature.prototype.getRowNodes = function (draggingEvent) {
    if (!this.isFromThisGrid(draggingEvent)) {
      return draggingEvent.dragItem.rowNodes || [];
    }
    var enableMultiRowDragging = this.gridOptionsWrapper.isEnableMultiRowDragging();
    var selectedNodes = this.selectionController.getSelectedNodes();
    var currentNode = draggingEvent.dragItem.rowNode;
    if (enableMultiRowDragging && selectedNodes.indexOf(currentNode) !== -1) {
      this.isMultiRowDrag = true;
      return __spreadArrays$5(selectedNodes);
    }
    this.isMultiRowDrag = false;
    return [currentNode];
  };
  RowDragFeature.prototype.onDragEnter = function (draggingEvent) {
    // when entering, we fire the enter event, then in onEnterOrDragging,
    // we also fire the move event. so we get both events when entering.
    this.dispatchGridEvent(Events.EVENT_ROW_DRAG_ENTER, draggingEvent);
    this.getRowNodes(draggingEvent).forEach(function (rowNode) {
      rowNode.setDragging(true);
    });
    this.onEnterOrDragging(draggingEvent);
  };
  RowDragFeature.prototype.onDragging = function (draggingEvent) {
    this.onEnterOrDragging(draggingEvent);
  };
  RowDragFeature.prototype.isFromThisGrid = function (draggingEvent) {
    var dragSourceDomDataKey = draggingEvent.dragSource.dragSourceDomDataKey;
    return dragSourceDomDataKey === this.gridOptionsWrapper.getDomDataKey();
  };
  RowDragFeature.prototype.isDropZoneWithinThisGrid = function (draggingEvent) {
    var gridBodyCon = this.controllersService.getGridBodyController();
    var gridGui = gridBodyCon.getGui();
    var dropZoneTarget = draggingEvent.dropZoneTarget;
    return !gridGui.contains(dropZoneTarget);
  };
  RowDragFeature.prototype.onEnterOrDragging = function (draggingEvent) {
    // this event is fired for enter and move
    this.dispatchGridEvent(Events.EVENT_ROW_DRAG_MOVE, draggingEvent);
    this.lastDraggingEvent = draggingEvent;
    var pixel = this.mouseEventService.getNormalisedPosition(draggingEvent).y;
    var managedDrag = this.gridOptionsWrapper.isRowDragManaged();
    if (managedDrag) {
      this.doManagedDrag(draggingEvent, pixel);
    }
    this.checkCenterForScrolling(pixel);
  };
  RowDragFeature.prototype.doManagedDrag = function (draggingEvent, pixel) {
    var _this = this;
    var rowNodes;
    var isFromThisGrid = this.isFromThisGrid(draggingEvent);
    if (isFromThisGrid) {
      rowNodes = [draggingEvent.dragItem.rowNode];
      if (this.isMultiRowDrag) {
        rowNodes = __spreadArrays$5(this.selectionController.getSelectedNodes()).sort(function (a, b) {
          return _this.getRowIndexNumber(a) - _this.getRowIndexNumber(b);
        });
      }
      draggingEvent.dragItem.rowNodes = rowNodes;
    } else {
      rowNodes = draggingEvent.dragItem.rowNodes;
    }
    var managedDrag = this.gridOptionsWrapper.isRowDragManaged();
    if (managedDrag && this.shouldPreventRowMove()) {
      return;
    }
    if (this.gridOptionsWrapper.isSuppressMoveWhenRowDragging() || !isFromThisGrid) {
      if (!this.isDropZoneWithinThisGrid(draggingEvent)) {
        this.clientSideRowModel.highlightRowAtPixel(rowNodes[0], pixel);
      }
    } else {
      this.moveRows(rowNodes, pixel);
    }
  };
  RowDragFeature.prototype.getRowIndexNumber = function (rowNode) {
    return parseInt(last(rowNode.getRowIndexString().split('-')), 10);
  };
  RowDragFeature.prototype.moveRowAndClearHighlight = function (draggingEvent) {
    var _this = this;
    var lastHighlightedRowNode = this.clientSideRowModel.getLastHighlightedRowNode();
    var isBelow = lastHighlightedRowNode && lastHighlightedRowNode.highlighted === 'below';
    var pixel = this.mouseEventService.getNormalisedPosition(draggingEvent).y;
    var rowNodes = draggingEvent.dragItem.rowNodes;
    var increment = isBelow ? 1 : 0;
    if (this.isFromThisGrid(draggingEvent)) {
      rowNodes.forEach(function (rowNode) {
        if (rowNode.rowTop < pixel) {
          increment -= 1;
        }
      });
      this.moveRows(rowNodes, pixel, increment);
    } else {
      var getRowNodeId_1 = this.gridOptionsWrapper.getRowNodeIdFunc();
      var addIndex = this.clientSideRowModel.getRowIndexAtPixel(pixel) + 1;
      if (this.clientSideRowModel.getHighlightPosition(pixel) === 'above') {
        addIndex--;
      }
      this.clientSideRowModel.updateRowData({
        add: rowNodes.map(function (node) {
          return node.data;
        }).filter(function (data) {
          return !_this.clientSideRowModel.getRowNode(getRowNodeId_1 ? getRowNodeId_1(data) : data.id);
        }),
        addIndex: addIndex
      });
    }
    this.clearRowHighlight();
  };
  RowDragFeature.prototype.clearRowHighlight = function () {
    this.clientSideRowModel.highlightRowAtPixel(null);
  };
  RowDragFeature.prototype.moveRows = function (rowNodes, pixel, increment) {
    if (increment === void 0) {
      increment = 0;
    }
    var rowWasMoved = this.clientSideRowModel.ensureRowsAtPixel(rowNodes, pixel, increment);
    if (rowWasMoved) {
      this.focusController.clearFocusedCell();
      if (this.rangeController) {
        this.rangeController.removeAllCellRanges();
      }
    }
  };
  RowDragFeature.prototype.checkCenterForScrolling = function (pixel) {
    // scroll if the mouse is within 50px of the grid edge
    var gridBodyCon = this.controllersService.getGridBodyController();
    var pixelRange = gridBodyCon.getScrollFeature().getVScrollPosition();
    // console.log(`pixelRange = (${pixelRange.top}, ${pixelRange.bottom})`);
    this.needToMoveUp = pixel < pixelRange.top + 50;
    this.needToMoveDown = pixel > pixelRange.bottom - 50;
    // console.log(`needToMoveUp = ${this.needToMoveUp} = pixel < (pixelRange.top + 50) = ${pixel} < (${pixelRange.top} + 50)`);
    // console.log(`needToMoveDown = ${this.needToMoveDown} = pixel < (pixelRange.top + 50) = ${pixel} < (${pixelRange.top} + 50)`);
    if (this.needToMoveUp || this.needToMoveDown) {
      this.ensureIntervalStarted();
    } else {
      this.ensureIntervalCleared();
    }
  };
  RowDragFeature.prototype.ensureIntervalStarted = function () {
    if (this.movingIntervalId) {
      return;
    }
    this.intervalCount = 0;
    this.movingIntervalId = window.setInterval(this.moveInterval.bind(this), 100);
  };
  RowDragFeature.prototype.ensureIntervalCleared = function () {
    if (!exists(this.movingIntervalId)) {
      return;
    }
    window.clearInterval(this.movingIntervalId);
    this.movingIntervalId = null;
  };
  RowDragFeature.prototype.moveInterval = function () {
    // the amounts we move get bigger at each interval, so the speed accelerates, starting a bit slow
    // and getting faster. this is to give smoother user experience. we max at 100px to limit the speed.
    var pixelsToMove;
    this.intervalCount++;
    pixelsToMove = 10 + this.intervalCount * 5;
    if (pixelsToMove > 100) {
      pixelsToMove = 100;
    }
    var pixelsMoved = null;
    var gridBodyCon = this.controllersService.getGridBodyController();
    if (this.needToMoveDown) {
      pixelsMoved = gridBodyCon.scrollVertically(pixelsToMove);
    } else if (this.needToMoveUp) {
      pixelsMoved = gridBodyCon.scrollVertically(-pixelsToMove);
    }
    if (pixelsMoved !== 0) {
      this.onDragging(this.lastDraggingEvent);
    }
  };
  RowDragFeature.prototype.addRowDropZone = function (params) {
    var _this = this;
    if (!params.getContainer()) {
      doOnce(function () {
        return console.warn('AG Grid: addRowDropZone - A container target needs to be provided');
      }, 'add-drop-zone-empty-target');
      return;
    }
    if (this.dragAndDropService.findExternalZone(params)) {
      console.warn('AG Grid: addRowDropZone - target already exists in the list of DropZones. Use `removeRowDropZone` before adding it again.');
      return;
    }
    var processedParams = {
      getContainer: params.getContainer
    };
    if (params.fromGrid) {
      params.fromGrid = undefined;
      processedParams = params;
    } else {
      if (params.onDragEnter) {
        processedParams.onDragEnter = function (e) {
          params.onDragEnter(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_ENTER, e));
        };
      }
      if (params.onDragLeave) {
        processedParams.onDragLeave = function (e) {
          params.onDragLeave(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_LEAVE, e));
        };
      }
      if (params.onDragging) {
        processedParams.onDragging = function (e) {
          params.onDragging(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_MOVE, e));
        };
      }
      if (params.onDragStop) {
        processedParams.onDragStop = function (e) {
          params.onDragStop(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_END, e));
        };
      }
    }
    this.dragAndDropService.addDropTarget(__assign$7({
      isInterestedIn: function (type) {
        return type === exports.DragSourceType.RowDrag;
      },
      getIconName: function () {
        return DragAndDropService.ICON_MOVE;
      },
      external: true
    }, processedParams));
  };
  RowDragFeature.prototype.getRowDropZone = function (events) {
    var _this = this;
    var getContainer = this.getContainer.bind(this);
    var onDragEnter = this.onDragEnter.bind(this);
    var onDragLeave = this.onDragLeave.bind(this);
    var onDragging = this.onDragging.bind(this);
    var onDragStop = this.onDragStop.bind(this);
    if (!events) {
      return {
        getContainer: getContainer,
        onDragEnter: onDragEnter,
        onDragLeave: onDragLeave,
        onDragging: onDragging,
        onDragStop: onDragStop,
        /* @private */fromGrid: true
      };
    }
    return {
      getContainer: getContainer,
      onDragEnter: events.onDragEnter ? function (e) {
        onDragEnter(e);
        events.onDragEnter(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_ENTER, e));
      } : onDragEnter,
      onDragLeave: events.onDragLeave ? function (e) {
        onDragLeave(e);
        events.onDragLeave(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_LEAVE, e));
      } : onDragLeave,
      onDragging: events.onDragging ? function (e) {
        onDragging(e);
        events.onDragging(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_MOVE, e));
      } : onDragging,
      onDragStop: events.onDragStop ? function (e) {
        onDragStop(e);
        events.onDragStop(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_END, e));
      } : onDragStop,
      fromGrid: true /* @private */
    };
  };

  RowDragFeature.prototype.draggingToRowDragEvent = function (type, draggingEvent) {
    var yNormalised = this.mouseEventService.getNormalisedPosition(draggingEvent).y;
    var mouseIsPastLastRow = yNormalised > this.paginationProxy.getCurrentPageHeight();
    var overIndex = -1;
    var overNode = null;
    if (!mouseIsPastLastRow) {
      overIndex = this.rowModel.getRowIndexAtPixel(yNormalised);
      overNode = this.rowModel.getRow(overIndex);
    }
    var vDirectionString;
    switch (draggingEvent.vDirection) {
      case exports.VerticalDirection.Down:
        vDirectionString = 'down';
        break;
      case exports.VerticalDirection.Up:
        vDirectionString = 'up';
        break;
      default:
        vDirectionString = null;
        break;
    }
    var event = {
      type: type,
      api: this.gridOptionsWrapper.getApi(),
      columnApi: this.gridOptionsWrapper.getColumnApi(),
      event: draggingEvent.event,
      node: draggingEvent.dragItem.rowNode,
      nodes: draggingEvent.dragItem.rowNodes,
      overIndex: overIndex,
      overNode: overNode,
      y: yNormalised,
      vDirection: vDirectionString
    };
    return event;
  };
  RowDragFeature.prototype.dispatchGridEvent = function (type, draggingEvent) {
    var event = this.draggingToRowDragEvent(type, draggingEvent);
    this.eventService.dispatchEvent(event);
  };
  RowDragFeature.prototype.onDragLeave = function (draggingEvent) {
    this.dispatchGridEvent(Events.EVENT_ROW_DRAG_LEAVE, draggingEvent);
    this.stopDragging(draggingEvent);
    if (this.gridOptionsWrapper.isRowDragManaged()) {
      this.clearRowHighlight();
    }
    if (this.isFromThisGrid(draggingEvent)) {
      this.isMultiRowDrag = false;
    }
  };
  RowDragFeature.prototype.onDragStop = function (draggingEvent) {
    this.dispatchGridEvent(Events.EVENT_ROW_DRAG_END, draggingEvent);
    this.stopDragging(draggingEvent);
    if (this.gridOptionsWrapper.isRowDragManaged() && (this.gridOptionsWrapper.isSuppressMoveWhenRowDragging() || !this.isFromThisGrid(draggingEvent)) && !this.isDropZoneWithinThisGrid(draggingEvent)) {
      this.moveRowAndClearHighlight(draggingEvent);
    }
  };
  RowDragFeature.prototype.stopDragging = function (draggingEvent) {
    this.ensureIntervalCleared();
    this.getRowNodes(draggingEvent).forEach(function (rowNode) {
      rowNode.setDragging(false);
    });
  };
  __decorate$Z([Autowired('dragAndDropService')], RowDragFeature.prototype, "dragAndDropService", void 0);
  __decorate$Z([Autowired('rowModel')], RowDragFeature.prototype, "rowModel", void 0);
  __decorate$Z([Autowired('paginationProxy')], RowDragFeature.prototype, "paginationProxy", void 0);
  __decorate$Z([Autowired('columnController')], RowDragFeature.prototype, "columnController", void 0);
  __decorate$Z([Autowired('focusController')], RowDragFeature.prototype, "focusController", void 0);
  __decorate$Z([Autowired('sortController')], RowDragFeature.prototype, "sortController", void 0);
  __decorate$Z([Autowired('filterManager')], RowDragFeature.prototype, "filterManager", void 0);
  __decorate$Z([Autowired('selectionController')], RowDragFeature.prototype, "selectionController", void 0);
  __decorate$Z([Optional('rangeController')], RowDragFeature.prototype, "rangeController", void 0);
  __decorate$Z([Autowired('mouseEventService')], RowDragFeature.prototype, "mouseEventService", void 0);
  __decorate$Z([Autowired('controllersService')], RowDragFeature.prototype, "controllersService", void 0);
  __decorate$Z([PostConstruct], RowDragFeature.prototype, "postConstruct", null);
  return RowDragFeature;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$15 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$_ =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RowAnimationCssClasses;
(function (RowAnimationCssClasses) {
  RowAnimationCssClasses["ANIMATION_ON"] = "ag-row-animation";
  RowAnimationCssClasses["ANIMATION_OFF"] = "ag-row-no-animation";
})(RowAnimationCssClasses || (RowAnimationCssClasses = {}));
var CSS_CLASS_CELL_SELECTABLE = 'ag-selectable';
var CSS_CLASS_FORCE_VERTICAL_SCROLL = 'ag-force-vertical-scroll';
var CSS_CLASS_COLUMN_MOVING = 'ag-column-moving';
var GridBodyController = /** @class */function (_super) {
  __extends$15(GridBodyController, _super);
  function GridBodyController() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  GridBodyController.prototype.getScrollFeature = function () {
    return this.bodyScrollFeature;
  };
  GridBodyController.prototype.getBodyViewportElement = function () {
    return this.eBodyViewport;
  };
  GridBodyController.prototype.setView = function (view, eGridBody, eBodyViewport, eTop, eBottom) {
    this.view = view;
    this.eGridBody = eGridBody;
    this.eBodyViewport = eBodyViewport;
    this.eTop = eTop;
    this.eBottom = eBottom;
    this.setCellTextSelection(this.gridOptionsWrapper.isEnableCellTextSelect());
    this.createManagedBean(new LayoutFeature(this.view));
    this.bodyScrollFeature = this.createManagedBean(new GridBodyScrollFeature(this.eBodyViewport));
    this.addRowDragListener();
    this.setupRowAnimationCssClass();
    this.controllersService.registerGridBodyController(this);
    this.addEventListeners();
    this.onGridColumnsChanged();
    this.addBodyViewportListener();
    this.setFloatingHeights();
    this.disableBrowserDragging();
    this.addStopEditingWhenGridLosesFocus();
  };
  GridBodyController.prototype.addEventListeners = function () {
    this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_PINNED_ROW_DATA_CHANGED, this.setFloatingHeights.bind(this));
  };
  // used by ColumnAnimationService
  GridBodyController.prototype.setColumnMovingCss = function (moving) {
    this.view.setColumnMovingCss(moving);
  };
  GridBodyController.prototype.setCellTextSelection = function (selectable) {
    if (selectable === void 0) {
      selectable = false;
    }
    this.view.setCellSelectableCss(selectable);
  };
  GridBodyController.prototype.onScrollVisibilityChanged = function () {
    var show = this.scrollVisibleService.isVerticalScrollShowing();
    this.view.setVerticalScrollPaddingVisible(show);
  };
  GridBodyController.prototype.onGridColumnsChanged = function () {
    var columns = this.columnController.getAllGridColumns();
    this.view.setColumnCount(columns ? columns.length : 0);
  };
  // if we do not do this, then the user can select a pic in the grid (eg an image in a custom cell renderer)
  // and then that will start the browser native drag n' drop, which messes up with our own drag and drop.
  GridBodyController.prototype.disableBrowserDragging = function () {
    this.addManagedListener(this.eGridBody, 'dragstart', function (event) {
      if (event.target instanceof HTMLImageElement) {
        event.preventDefault();
        return false;
      }
    });
  };
  GridBodyController.prototype.addStopEditingWhenGridLosesFocus = function () {
    var _this = this;
    if (!this.gridOptionsWrapper.isStopEditingWhenCellsLoseFocus()) {
      return;
    }
    var focusOutListener = function (event) {
      // this is the element the focus is moving to
      var elementWithFocus = event.relatedTarget;
      if (getTabIndex(elementWithFocus) === null) {
        _this.rowRenderer.stopEditing();
        return;
      }
      var clickInsideGrid =
      // see if click came from inside the viewports
      viewports.some(function (viewport) {
        return viewport.contains(elementWithFocus);
      })
      // and also that it's not from a detail grid
      && _this.mouseEventService.isElementInThisGrid(elementWithFocus);
      if (!clickInsideGrid) {
        var popupService = _this.popupService;
        clickInsideGrid = popupService.getActivePopups().some(function (popup) {
          return popup.contains(elementWithFocus);
        }) || popupService.isElementWithinCustomPopup(elementWithFocus);
      }
      if (!clickInsideGrid) {
        _this.rowRenderer.stopEditing();
      }
    };
    var viewports = [this.eBodyViewport, this.eBottom, this.eTop];
    viewports.forEach(function (viewport) {
      return _this.addManagedListener(viewport, 'focusout', focusOutListener);
    });
  };
  GridBodyController.prototype.updateRowCount = function () {
    var headerCount = this.headerNavigationService.getHeaderRowCount();
    var modelType = this.paginationProxy.getType();
    var rowCount = -1;
    if (modelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
      rowCount = 0;
      this.paginationProxy.forEachNode(function (node) {
        if (!node.group) {
          rowCount++;
        }
      });
    }
    var total = rowCount === -1 ? -1 : headerCount + rowCount;
    this.view.setRowCount(total);
  };
  GridBodyController.prototype.registerBodyViewportResizeListener = function (listener) {
    this.view.registerBodyViewportResizeListener(listener);
  };
  GridBodyController.prototype.setVerticalScrollPaddingVisible = function (visible) {
    this.view.setVerticalScrollPaddingVisible(visible);
  };
  GridBodyController.prototype.isVerticalScrollShowing = function () {
    var isAlwaysShowVerticalScroll = this.gridOptionsWrapper.isAlwaysShowVerticalScroll();
    this.view.setAlwaysVerticalScrollClass(isAlwaysShowVerticalScroll);
    return isAlwaysShowVerticalScroll || isVerticalScrollShowing(this.eBodyViewport);
  };
  GridBodyController.prototype.setupRowAnimationCssClass = function () {
    var _this = this;
    var listener = function () {
      // we don't want to use row animation if scaling, as rows jump strangely as you scroll,
      // when scaling and doing row animation.
      var animateRows = _this.gridOptionsWrapper.isAnimateRows() && !_this.rowContainerHeightService.isStretching();
      _this.view.setRowAnimationCssOnBodyViewport(animateRows);
    };
    listener();
    this.addManagedListener(this.eventService, Events.EVENT_HEIGHT_SCALE_CHANGED, listener);
  };
  GridBodyController.prototype.getGridBodyElement = function () {
    return this.eGridBody;
  };
  GridBodyController.prototype.addBodyViewportListener = function () {
    var _this = this;
    // we want to listen for clicks directly on the eBodyViewport, so the user has a way of showing
    // the context menu if no rows or columns are displayed, or user simply clicks outside of a cell
    var listener = function (mouseEvent) {
      var target = getTarget(mouseEvent);
      if (target === _this.eBodyViewport || target === _this.controllersService.getCenterRowContainerCon().getViewportElement()) {
        // show it
        if (_this.contextMenuFactory) {
          _this.contextMenuFactory.onContextMenu(mouseEvent, null, null, null, null, _this.eGridBody);
        }
      }
    };
    this.addManagedListener(this.eBodyViewport, 'contextmenu', listener);
  };
  GridBodyController.prototype.getGui = function () {
    return this.eGridBody;
  };
  // called by rowDragFeature
  GridBodyController.prototype.scrollVertically = function (pixels) {
    var oldScrollPosition = this.eBodyViewport.scrollTop;
    this.bodyScrollFeature.setVerticalScrollPosition(oldScrollPosition + pixels);
    return this.eBodyViewport.scrollTop - oldScrollPosition;
  };
  // + rangeController - used to know when to scroll when user is dragging outside the
  // main viewport while doing a range selection
  GridBodyController.prototype.getBodyClientRect = function () {
    if (!this.eBodyViewport) {
      return;
    }
    return this.eBodyViewport.getBoundingClientRect();
  };
  GridBodyController.prototype.addRowDragListener = function () {
    this.rowDragFeature = this.createManagedBean(new RowDragFeature(this.eBodyViewport));
    this.dragAndDropService.addDropTarget(this.rowDragFeature);
  };
  GridBodyController.prototype.getRowDragFeature = function () {
    return this.rowDragFeature;
  };
  GridBodyController.prototype.setFloatingHeights = function () {
    var pinnedRowModel = this.pinnedRowModel;
    var floatingTopHeight = pinnedRowModel.getPinnedTopTotalHeight();
    if (floatingTopHeight) {
      // adding 1px for cell bottom border
      floatingTopHeight += 1;
    }
    var floatingBottomHeight = pinnedRowModel.getPinnedBottomTotalHeight();
    if (floatingBottomHeight) {
      // adding 1px for cell bottom border
      floatingBottomHeight += 1;
    }
    this.view.setTopHeight(floatingTopHeight);
    this.view.setBottomHeight(floatingBottomHeight);
    this.view.setTopDisplay(floatingTopHeight ? 'inherit' : 'none');
    this.view.setBottomDisplay(floatingBottomHeight ? 'inherit' : 'none');
  };
  // method will call itself if no available width. this covers if the grid
  // isn't visible, but is just about to be visible.
  GridBodyController.prototype.sizeColumnsToFit = function (nextTimeout) {
    var _this = this;
    // IE is different to the other browsers, it already removes the scroll width
    // while calling window.getComputedStyle() (which is called by getInnerWidth())
    var removeScrollWidth = this.isVerticalScrollShowing() && !isBrowserIE();
    var scrollWidthToRemove = removeScrollWidth ? this.gridOptionsWrapper.getScrollbarWidth() : 0;
    var bodyViewportWidth = getInnerWidth(this.eBodyViewport);
    var availableWidth = bodyViewportWidth - scrollWidthToRemove;
    if (availableWidth > 0) {
      this.columnController.sizeColumnsToFit(availableWidth, "sizeColumnsToFit");
      return;
    }
    if (nextTimeout === undefined) {
      window.setTimeout(function () {
        _this.sizeColumnsToFit(100);
      }, 0);
    } else if (nextTimeout === 100) {
      window.setTimeout(function () {
        _this.sizeColumnsToFit(500);
      }, 100);
    } else if (nextTimeout === 500) {
      window.setTimeout(function () {
        _this.sizeColumnsToFit(-1);
      }, 500);
    } else {
      console.warn('AG Grid: tried to call sizeColumnsToFit() but the grid is coming back with ' + 'zero width, maybe the grid is not visible yet on the screen?');
    }
  };
  __decorate$_([Autowired('rowContainerHeightService')], GridBodyController.prototype, "rowContainerHeightService", void 0);
  __decorate$_([Autowired('controllersService')], GridBodyController.prototype, "controllersService", void 0);
  __decorate$_([Autowired('columnController')], GridBodyController.prototype, "columnController", void 0);
  __decorate$_([Autowired('scrollVisibleService')], GridBodyController.prototype, "scrollVisibleService", void 0);
  __decorate$_([Optional('contextMenuFactory')], GridBodyController.prototype, "contextMenuFactory", void 0);
  __decorate$_([Autowired('headerNavigationService')], GridBodyController.prototype, "headerNavigationService", void 0);
  __decorate$_([Autowired('paginationProxy')], GridBodyController.prototype, "paginationProxy", void 0);
  __decorate$_([Autowired('dragAndDropService')], GridBodyController.prototype, "dragAndDropService", void 0);
  __decorate$_([Autowired('pinnedRowModel')], GridBodyController.prototype, "pinnedRowModel", void 0);
  __decorate$_([Autowired('rowRenderer')], GridBodyController.prototype, "rowRenderer", void 0);
  __decorate$_([Autowired('popupService')], GridBodyController.prototype, "popupService", void 0);
  __decorate$_([Autowired('mouseEventService')], GridBodyController.prototype, "mouseEventService", void 0);
  return GridBodyController;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$16 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$$ =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RowContainerEventsFeature = /** @class */function (_super) {
  __extends$16(RowContainerEventsFeature, _super);
  function RowContainerEventsFeature(element) {
    var _this = _super.call(this) || this;
    _this.element = element;
    return _this;
  }
  RowContainerEventsFeature.prototype.postConstruct = function () {
    this.addMouseListeners();
    this.mockContextMenuForIPad();
    this.addKeyboardEvents();
  };
  RowContainerEventsFeature.prototype.addKeyboardEvents = function () {
    var _this = this;
    var eventNames = ['keydown', 'keypress'];
    eventNames.forEach(function (eventName) {
      var listener = _this.processKeyboardEvent.bind(_this, eventName);
      _this.addManagedListener(_this.element, eventName, listener);
    });
  };
  RowContainerEventsFeature.prototype.addMouseListeners = function () {
    var _this = this;
    var eventNames = ['dblclick', 'contextmenu', 'mouseover', 'mouseout', 'click', 'mousedown'];
    eventNames.forEach(function (eventName) {
      var listener = _this.processMouseEvent.bind(_this, eventName);
      _this.addManagedListener(_this.element, eventName, listener);
    });
  };
  RowContainerEventsFeature.prototype.processMouseEvent = function (eventName, mouseEvent) {
    if (!this.mouseEventService.isEventFromThisGrid(mouseEvent) || isStopPropagationForAgGrid(mouseEvent)) {
      return;
    }
    var rowComp = this.getRowForEvent(mouseEvent);
    var cellComp = this.mouseEventService.getRenderedCellForEvent(mouseEvent);
    if (eventName === "contextmenu") {
      this.handleContextMenuMouseEvent(mouseEvent, null, rowComp, cellComp);
    } else {
      if (cellComp) {
        cellComp.onMouseEvent(eventName, mouseEvent);
      }
      if (rowComp) {
        rowComp.onMouseEvent(eventName, mouseEvent);
      }
    }
  };
  RowContainerEventsFeature.prototype.mockContextMenuForIPad = function () {
    var _this = this;
    // we do NOT want this when not in iPad, otherwise we will be doing
    if (!isIOSUserAgent()) {
      return;
    }
    var touchListener = new TouchListener(this.element);
    var longTapListener = function (event) {
      var rowComp = _this.getRowForEvent(event.touchEvent);
      var cellComp = _this.mouseEventService.getRenderedCellForEvent(event.touchEvent);
      _this.handleContextMenuMouseEvent(null, event.touchEvent, rowComp, cellComp);
    };
    this.addManagedListener(touchListener, TouchListener.EVENT_LONG_TAP, longTapListener);
    this.addDestroyFunc(function () {
      return touchListener.destroy();
    });
  };
  RowContainerEventsFeature.prototype.getRowForEvent = function (event) {
    var sourceElement = getTarget(event);
    while (sourceElement) {
      var rowCon = this.gridOptionsWrapper.getDomData(sourceElement, RowController.DOM_DATA_KEY_RENDERED_ROW);
      if (rowCon) {
        return rowCon;
      }
      sourceElement = sourceElement.parentElement;
    }
    return null;
  };
  RowContainerEventsFeature.prototype.handleContextMenuMouseEvent = function (mouseEvent, touchEvent, rowComp, cellComp) {
    var rowNode = rowComp ? rowComp.getRowNode() : null;
    var column = cellComp ? cellComp.getColumn() : null;
    var value = null;
    if (column) {
      var event_1 = mouseEvent ? mouseEvent : touchEvent;
      cellComp.dispatchCellContextMenuEvent(event_1);
      value = this.valueService.getValue(column, rowNode);
    }
    // if user clicked on a cell, anchor to that cell, otherwise anchor to the grid panel
    var gridBodyCon = this.controllersService.getGridBodyController();
    var anchorToElement = cellComp ? cellComp.getGui() : gridBodyCon.getGridBodyElement();
    if (this.contextMenuFactory) {
      this.contextMenuFactory.onContextMenu(mouseEvent, touchEvent, rowNode, column, value, anchorToElement);
    }
  };
  RowContainerEventsFeature.prototype.processKeyboardEvent = function (eventName, keyboardEvent) {
    var cellComp = getComponentForEvent(this.gridOptionsWrapper, keyboardEvent, 'cellComp');
    var rowComp = getComponentForEvent(this.gridOptionsWrapper, keyboardEvent, 'renderedRow');
    if (keyboardEvent.defaultPrevented) {
      return;
    }
    if (cellComp) {
      this.processCellKeyboardEvent(cellComp, eventName, keyboardEvent);
    } else if (rowComp && rowComp.isFullWidth()) {
      this.processFullWidthRowKeyboardEvent(rowComp, eventName, keyboardEvent);
    }
  };
  RowContainerEventsFeature.prototype.processCellKeyboardEvent = function (cellComp, eventName, keyboardEvent) {
    var rowNode = cellComp.getRenderedRow().getRowNode();
    var column = cellComp.getColumn();
    var editing = cellComp.isEditing();
    var gridProcessingAllowed = !isUserSuppressingKeyboardEvent(this.gridOptionsWrapper, keyboardEvent, rowNode, column, editing);
    if (gridProcessingAllowed) {
      switch (eventName) {
        case 'keydown':
          // first see if it's a scroll key, page up / down, home / end etc
          var wasScrollKey = !editing && this.navigationService.handlePageScrollingKey(keyboardEvent);
          // if not a scroll key, then we pass onto cell
          if (!wasScrollKey) {
            cellComp.onKeyDown(keyboardEvent);
          }
          // perform clipboard and undo / redo operations
          this.doGridOperations(keyboardEvent, cellComp);
          break;
        case 'keypress':
          cellComp.onKeyPress(keyboardEvent);
          break;
      }
    }
    if (eventName === 'keydown') {
      var cellKeyDownEvent = cellComp.createEvent(keyboardEvent, Events.EVENT_CELL_KEY_DOWN);
      this.eventService.dispatchEvent(cellKeyDownEvent);
    }
    if (eventName === 'keypress') {
      var cellKeyPressEvent = cellComp.createEvent(keyboardEvent, Events.EVENT_CELL_KEY_PRESS);
      this.eventService.dispatchEvent(cellKeyPressEvent);
    }
  };
  RowContainerEventsFeature.prototype.processFullWidthRowKeyboardEvent = function (rowComp, eventName, keyboardEvent) {
    var rowNode = rowComp.getRowNode();
    var focusedCell = this.focusController.getFocusedCell();
    var column = focusedCell && focusedCell.column;
    var gridProcessingAllowed = !isUserSuppressingKeyboardEvent(this.gridOptionsWrapper, keyboardEvent, rowNode, column, false);
    if (gridProcessingAllowed) {
      var key = keyboardEvent.key;
      if (eventName === 'keydown') {
        switch (key) {
          case KeyName.UP:
          case KeyName.DOWN:
            rowComp.onKeyboardNavigate(keyboardEvent);
            break;
          case KeyName.TAB:
            rowComp.onTabKeyDown(keyboardEvent);
        }
      }
    }
    if (eventName === 'keydown') {
      var cellKeyDownEvent = rowComp.createRowEvent(Events.EVENT_CELL_KEY_DOWN, keyboardEvent);
      this.eventService.dispatchEvent(cellKeyDownEvent);
    }
    if (eventName === 'keypress') {
      var cellKeyPressEvent = rowComp.createRowEvent(Events.EVENT_CELL_KEY_PRESS, keyboardEvent);
      this.eventService.dispatchEvent(cellKeyPressEvent);
    }
  };
  RowContainerEventsFeature.prototype.doGridOperations = function (keyboardEvent, cellComp) {
    // check if ctrl or meta key pressed
    if (!keyboardEvent.ctrlKey && !keyboardEvent.metaKey) {
      return;
    }
    // if the cell the event came from is editing, then we do not
    // want to do the default shortcut keys, otherwise the editor
    // (eg a text field) would not be able to do the normal cut/copy/paste
    if (cellComp.isEditing()) {
      return;
    }
    // for copy / paste, we don't want to execute when the event
    // was from a child grid (happens in master detail)
    if (!this.mouseEventService.isEventFromThisGrid(keyboardEvent)) {
      return;
    }
    switch (keyboardEvent.which) {
      case KeyCode.A:
        return this.onCtrlAndA(keyboardEvent);
      case KeyCode.C:
        return this.onCtrlAndC(keyboardEvent);
      case KeyCode.V:
        return this.onCtrlAndV();
      case KeyCode.D:
        return this.onCtrlAndD(keyboardEvent);
      case KeyCode.Z:
        return keyboardEvent.shiftKey ? this.undoRedoService.redo() : this.undoRedoService.undo();
      case KeyCode.Y:
        return this.undoRedoService.redo();
    }
  };
  RowContainerEventsFeature.prototype.onCtrlAndA = function (event) {
    var _a = this,
      pinnedRowModel = _a.pinnedRowModel,
      paginationProxy = _a.paginationProxy,
      rangeController = _a.rangeController;
    var PINNED_BOTTOM = Constants.PINNED_BOTTOM,
      PINNED_TOP = Constants.PINNED_TOP;
    if (rangeController && paginationProxy.isRowsToRender()) {
      var _b = [pinnedRowModel.isEmpty(PINNED_TOP), pinnedRowModel.isEmpty(PINNED_BOTTOM)],
        isEmptyPinnedTop = _b[0],
        isEmptyPinnedBottom = _b[1];
      var floatingStart = isEmptyPinnedTop ? null : PINNED_TOP;
      var floatingEnd = void 0;
      var rowEnd = void 0;
      if (isEmptyPinnedBottom) {
        floatingEnd = null;
        rowEnd = this.paginationProxy.getRowCount() - 1;
      } else {
        floatingEnd = PINNED_BOTTOM;
        rowEnd = pinnedRowModel.getPinnedBottomRowData().length - 1;
      }
      var allDisplayedColumns = this.columnController.getAllDisplayedColumns();
      if (missingOrEmpty(allDisplayedColumns)) {
        return;
      }
      rangeController.setCellRange({
        rowStartIndex: 0,
        rowStartPinned: floatingStart,
        rowEndIndex: rowEnd,
        rowEndPinned: floatingEnd,
        columnStart: allDisplayedColumns[0],
        columnEnd: last(allDisplayedColumns)
      });
    }
    event.preventDefault();
  };
  RowContainerEventsFeature.prototype.onCtrlAndC = function (event) {
    if (!this.clipboardService || this.gridOptionsWrapper.isEnableCellTextSelection()) {
      return;
    }
    this.clipboardService.copyToClipboard();
    event.preventDefault();
  };
  RowContainerEventsFeature.prototype.onCtrlAndV = function () {
    if (ModuleRegistry.isRegistered(exports.ModuleNames.ClipboardModule) && !this.gridOptionsWrapper.isSuppressClipboardPaste()) {
      this.clipboardService.pasteFromClipboard();
    }
  };
  RowContainerEventsFeature.prototype.onCtrlAndD = function (event) {
    if (ModuleRegistry.isRegistered(exports.ModuleNames.ClipboardModule) && !this.gridOptionsWrapper.isSuppressClipboardPaste()) {
      this.clipboardService.copyRangeDown();
    }
    event.preventDefault();
  };
  __decorate$$([Autowired('mouseEventService')], RowContainerEventsFeature.prototype, "mouseEventService", void 0);
  __decorate$$([Autowired('valueService')], RowContainerEventsFeature.prototype, "valueService", void 0);
  __decorate$$([Optional('contextMenuFactory')], RowContainerEventsFeature.prototype, "contextMenuFactory", void 0);
  __decorate$$([Autowired('controllersService')], RowContainerEventsFeature.prototype, "controllersService", void 0);
  __decorate$$([Autowired('navigationService')], RowContainerEventsFeature.prototype, "navigationService", void 0);
  __decorate$$([Autowired('focusController')], RowContainerEventsFeature.prototype, "focusController", void 0);
  __decorate$$([Autowired('undoRedoService')], RowContainerEventsFeature.prototype, "undoRedoService", void 0);
  __decorate$$([Autowired('columnController')], RowContainerEventsFeature.prototype, "columnController", void 0);
  __decorate$$([Autowired('paginationProxy')], RowContainerEventsFeature.prototype, "paginationProxy", void 0);
  __decorate$$([Autowired('pinnedRowModel')], RowContainerEventsFeature.prototype, "pinnedRowModel", void 0);
  __decorate$$([Optional('rangeController')], RowContainerEventsFeature.prototype, "rangeController", void 0);
  __decorate$$([Optional('clipboardService')], RowContainerEventsFeature.prototype, "clipboardService", void 0);
  __decorate$$([PostConstruct], RowContainerEventsFeature.prototype, "postConstruct", null);
  return RowContainerEventsFeature;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$17 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$10 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
// listens to changes in the center viewport size, for column and row virtualisation,
// and adjusts grid as necessary. there are two viewports, one for horizontal and one for
// vertical scrolling.
var ViewportSizeFeature = /** @class */function (_super) {
  __extends$17(ViewportSizeFeature, _super);
  function ViewportSizeFeature(centerContainer) {
    var _this = _super.call(this) || this;
    _this.centerContainerCon = centerContainer;
    return _this;
  }
  ViewportSizeFeature.prototype.postConstruct = function () {
    var _this = this;
    this.controllersService.whenReady(function () {
      _this.gridBodyCon = _this.controllersService.getGridBodyController();
      _this.listenForResize();
    });
    this.addManagedListener(this.eventService, Events.EVENT_SCROLLBAR_WIDTH_CHANGED, this.onScrollbarWidthChanged.bind(this));
  };
  ViewportSizeFeature.prototype.listenForResize = function () {
    var listener = this.onCenterViewportResized.bind(this);
    // centerContainer gets horizontal resizes
    this.centerContainerCon.registerViewportResizeListener(listener);
    // eBodyViewport gets vertical resizes
    this.gridBodyCon.registerBodyViewportResizeListener(listener);
  };
  ViewportSizeFeature.prototype.onScrollbarWidthChanged = function () {
    this.checkViewportAndScrolls();
  };
  ViewportSizeFeature.prototype.onCenterViewportResized = function () {
    if (this.centerContainerCon.isViewportVisible()) {
      this.checkViewportAndScrolls();
      var newWidth = this.centerContainerCon.getCenterWidth();
      if (newWidth !== this.centerWidth) {
        this.centerWidth = newWidth;
        this.columnController.refreshFlexedColumns({
          viewportWidth: this.centerWidth,
          updateBodyWidths: true,
          fireResizedEvent: true
        });
      }
    } else {
      this.bodyHeight = 0;
    }
  };
  // gets called every time the viewport size changes. we use this to check visibility of scrollbars
  // in the grid panel, and also to check size and position of viewport for row and column virtualisation.
  ViewportSizeFeature.prototype.checkViewportAndScrolls = function () {
    // results in updating anything that depends on scroll showing
    this.updateScrollVisibleService();
    // fires event if height changes, used by PaginationService, HeightScalerService, RowRenderer
    this.checkBodyHeight();
    // check for virtual columns for ColumnController
    this.onHorizontalViewportChanged();
    this.gridBodyCon.getScrollFeature().checkScrollLeft();
  };
  ViewportSizeFeature.prototype.getBodyHeight = function () {
    return this.bodyHeight;
  };
  ViewportSizeFeature.prototype.checkBodyHeight = function () {
    var eBodyViewport = this.gridBodyCon.getBodyViewportElement();
    var bodyHeight = getInnerHeight(eBodyViewport);
    if (this.bodyHeight !== bodyHeight) {
      this.bodyHeight = bodyHeight;
      var event_1 = {
        type: Events.EVENT_BODY_HEIGHT_CHANGED,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(event_1);
    }
  };
  ViewportSizeFeature.prototype.updateScrollVisibleService = function () {
    // because of column animation (which takes 200ms), we have to do this twice.
    // eg if user removes cols anywhere except at the RHS, then the cols on the RHS
    // will animate to the left to fill the gap. this animation means just after
    // the cols are removed, the remaining cols are still in the original location
    // at the start of the animation, so pre animation the H scrollbar is still needed,
    // but post animation it is not.
    this.updateScrollVisibleServiceImpl();
    setTimeout(this.updateScrollVisibleServiceImpl.bind(this), 500);
  };
  ViewportSizeFeature.prototype.updateScrollVisibleServiceImpl = function () {
    var params = {
      horizontalScrollShowing: this.isHorizontalScrollShowing(),
      verticalScrollShowing: this.gridBodyCon.isVerticalScrollShowing()
    };
    this.scrollVisibleService.setScrollsVisible(params);
    // fix - gridComp should just listen to event from above
    this.gridBodyCon.setVerticalScrollPaddingVisible(params.verticalScrollShowing);
  };
  ViewportSizeFeature.prototype.isHorizontalScrollShowing = function () {
    var isAlwaysShowHorizontalScroll = this.gridOptionsWrapper.isAlwaysShowHorizontalScroll();
    return isAlwaysShowHorizontalScroll || this.centerContainerCon.isViewportHScrollShowing();
  };
  // this gets called whenever a change in the viewport, so we can inform column controller it has to work
  // out the virtual columns again. gets called from following locations:
  // + ensureColVisible, scroll, init, layoutChanged, displayedColumnsChanged, API (doLayout)
  ViewportSizeFeature.prototype.onHorizontalViewportChanged = function () {
    var scrollWidth = this.centerContainerCon.getCenterWidth();
    var scrollPosition = this.centerContainerCon.getViewportScrollLeft();
    this.columnController.setViewportPosition(scrollWidth, scrollPosition);
  };
  __decorate$10([Autowired('controllersService')], ViewportSizeFeature.prototype, "controllersService", void 0);
  __decorate$10([Autowired('columnController')], ViewportSizeFeature.prototype, "columnController", void 0);
  __decorate$10([Autowired('scrollVisibleService')], ViewportSizeFeature.prototype, "scrollVisibleService", void 0);
  __decorate$10([Autowired('columnApi')], ViewportSizeFeature.prototype, "columnApi", void 0);
  __decorate$10([Autowired('gridApi')], ViewportSizeFeature.prototype, "gridApi", void 0);
  __decorate$10([PostConstruct], ViewportSizeFeature.prototype, "postConstruct", null);
  return ViewportSizeFeature;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$18 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$11 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SetPinnedLeftWidthFeature = /** @class */function (_super) {
  __extends$18(SetPinnedLeftWidthFeature, _super);
  function SetPinnedLeftWidthFeature(element) {
    var _this = _super.call(this) || this;
    _this.element = element;
    return _this;
  }
  SetPinnedLeftWidthFeature.prototype.postConstruct = function () {
    this.addManagedListener(this.eventService, Events.EVENT_LEFT_PINNED_WIDTH_CHANGED, this.onPinnedLeftWidthChanged.bind(this));
  };
  SetPinnedLeftWidthFeature.prototype.onPinnedLeftWidthChanged = function () {
    var leftWidth = this.pinnedWidthService.getPinnedLeftWidth();
    var displayed = leftWidth > 0;
    setDisplayed(this.element, displayed);
    if (displayed) {
      setFixedWidth(this.element, leftWidth);
    }
  };
  __decorate$11([Autowired('pinnedWidthService')], SetPinnedLeftWidthFeature.prototype, "pinnedWidthService", void 0);
  __decorate$11([PostConstruct], SetPinnedLeftWidthFeature.prototype, "postConstruct", null);
  return SetPinnedLeftWidthFeature;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$19 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$12 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SetPinnedRightWidthFeature = /** @class */function (_super) {
  __extends$19(SetPinnedRightWidthFeature, _super);
  function SetPinnedRightWidthFeature(element) {
    var _this = _super.call(this) || this;
    _this.element = element;
    return _this;
  }
  SetPinnedRightWidthFeature.prototype.postConstruct = function () {
    this.addManagedListener(this.eventService, Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED, this.onPinnedRightWidthChanged.bind(this));
  };
  SetPinnedRightWidthFeature.prototype.onPinnedRightWidthChanged = function () {
    var rightWidth = this.pinnedWidthService.getPinnedRightWidth();
    var displayed = rightWidth > 0;
    setDisplayed(this.element, displayed);
    if (displayed) {
      setFixedWidth(this.element, rightWidth);
    }
  };
  __decorate$12([Autowired('pinnedWidthService')], SetPinnedRightWidthFeature.prototype, "pinnedWidthService", void 0);
  __decorate$12([PostConstruct], SetPinnedRightWidthFeature.prototype, "postConstruct", null);
  return SetPinnedRightWidthFeature;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1a =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$13 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SetHeightFeature = /** @class */function (_super) {
  __extends$1a(SetHeightFeature, _super);
  function SetHeightFeature(eContainer, eWrapper) {
    var _this = _super.call(this) || this;
    _this.eContainer = eContainer;
    _this.eWrapper = eWrapper;
    return _this;
  }
  SetHeightFeature.prototype.postConstruct = function () {
    this.addManagedListener(this.eventService, Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED, this.onHeightChanged.bind(this));
  };
  SetHeightFeature.prototype.onHeightChanged = function () {
    var height = this.maxDivHeightScaler.getUiContainerHeight();
    var heightString = height != null ? height + "px" : "";
    this.eContainer.style.height = heightString;
    if (this.eWrapper) {
      this.eWrapper.style.height = heightString;
    }
  };
  __decorate$13([Autowired("rowContainerHeightService")], SetHeightFeature.prototype, "maxDivHeightScaler", void 0);
  __decorate$13([PostConstruct], SetHeightFeature.prototype, "postConstruct", null);
  return SetHeightFeature;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1b =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$14 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DragListenerFeature = /** @class */function (_super) {
  __extends$1b(DragListenerFeature, _super);
  function DragListenerFeature(eContainer) {
    var _this = _super.call(this) || this;
    _this.eContainer = eContainer;
    return _this;
  }
  DragListenerFeature.prototype.postConstruct = function () {
    var _this = this;
    if (!this.gridOptionsWrapper.isEnableRangeSelection() ||
    // no range selection if no property
    missing(this.rangeController) // no range selection if not enterprise version
    ) {
      return;
    }
    var params = {
      eElement: this.eContainer,
      onDragStart: this.rangeController.onDragStart.bind(this.rangeController),
      onDragStop: this.rangeController.onDragStop.bind(this.rangeController),
      onDragging: this.rangeController.onDragging.bind(this.rangeController)
    };
    this.dragService.addDragSource(params);
    this.addDestroyFunc(function () {
      return _this.dragService.removeDragSource(params);
    });
  };
  __decorate$14([Optional('rangeController')], DragListenerFeature.prototype, "rangeController", void 0);
  __decorate$14([Autowired('dragService')], DragListenerFeature.prototype, "dragService", void 0);
  __decorate$14([PostConstruct], DragListenerFeature.prototype, "postConstruct", null);
  return DragListenerFeature;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1c =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$15 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __spreadArrays$6 =  false || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
};
var RowContainerNames;
(function (RowContainerNames) {
  RowContainerNames["LEFT"] = "left";
  RowContainerNames["RIGHT"] = "right";
  RowContainerNames["CENTER"] = "center";
  RowContainerNames["FULL_WIDTH"] = "fullWidth";
  RowContainerNames["TOP_LEFT"] = "topLeft";
  RowContainerNames["TOP_RIGHT"] = "topRight";
  RowContainerNames["TOP_CENTER"] = "topCenter";
  RowContainerNames["TOP_FULL_WITH"] = "topFullWidth";
  RowContainerNames["BOTTOM_LEFT"] = "bottomLeft";
  RowContainerNames["BOTTOM_RIGHT"] = "bottomRight";
  RowContainerNames["BOTTOM_CENTER"] = "bottomCenter";
  RowContainerNames["BOTTOM_FULL_WITH"] = "bottomFullWidth";
})(RowContainerNames || (RowContainerNames = {}));
var ContainerCssClasses = convertToMap([[RowContainerNames.CENTER, 'ag-center-cols-container'], [RowContainerNames.LEFT, 'ag-pinned-left-cols-container'], [RowContainerNames.RIGHT, 'ag-pinned-right-cols-container'], [RowContainerNames.FULL_WIDTH, 'ag-full-width-container'], [RowContainerNames.TOP_CENTER, 'ag-floating-top-container'], [RowContainerNames.TOP_LEFT, 'ag-pinned-left-floating-top'], [RowContainerNames.TOP_RIGHT, 'ag-pinned-right-floating-top'], [RowContainerNames.TOP_FULL_WITH, 'ag-floating-top-full-width-container'], [RowContainerNames.BOTTOM_CENTER, 'ag-floating-bottom-container'], [RowContainerNames.BOTTOM_LEFT, 'ag-pinned-left-floating-bottom'], [RowContainerNames.BOTTOM_RIGHT, 'ag-pinned-right-floating-bottom'], [RowContainerNames.BOTTOM_FULL_WITH, 'ag-floating-bottom-full-width-container']]);
var ViewportCssClasses = convertToMap([[RowContainerNames.CENTER, 'ag-center-cols-viewport'], [RowContainerNames.TOP_CENTER, 'ag-floating-top-viewport'], [RowContainerNames.BOTTOM_CENTER, 'ag-floating-bottom-viewport']]);
var WrapperCssClasses = convertToMap([[RowContainerNames.CENTER, 'ag-center-cols-clipper']]);
var RowContainerController = /** @class */function (_super) {
  __extends$1c(RowContainerController, _super);
  function RowContainerController(name) {
    var _this = _super.call(this) || this;
    _this.name = name;
    return _this;
  }
  RowContainerController.prototype.postConstruct = function () {
    var _this = this;
    this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
    this.enableRtl = this.gridOptionsWrapper.isEnableRtl();
    this.forContainers([RowContainerNames.CENTER], function () {
      return _this.viewportSizeFeature = _this.createManagedBean(new ViewportSizeFeature(_this));
    });
    this.registerWithControllersService();
    this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onDisplayedColumnsWidthChanged.bind(this));
  };
  RowContainerController.prototype.registerWithControllersService = function () {
    switch (this.name) {
      case RowContainerNames.CENTER:
        this.controllersService.registerCenterRowContainerCon(this);
        break;
      case RowContainerNames.LEFT:
        this.controllersService.registerLeftRowContainerCon(this);
        break;
      case RowContainerNames.RIGHT:
        this.controllersService.registerRightRowContainerCon(this);
        break;
      case RowContainerNames.TOP_CENTER:
        this.controllersService.registerTopCenterRowContainerCon(this);
        break;
      case RowContainerNames.TOP_LEFT:
        this.controllersService.registerTopLeftRowContainerCon(this);
        break;
      case RowContainerNames.TOP_RIGHT:
        this.controllersService.registerTopRightRowContainerCon(this);
        break;
      case RowContainerNames.BOTTOM_CENTER:
        this.controllersService.registerBottomCenterRowContainerCon(this);
        break;
      case RowContainerNames.BOTTOM_LEFT:
        this.controllersService.registerBottomLeftRowContainerCon(this);
        break;
      case RowContainerNames.BOTTOM_RIGHT:
        this.controllersService.registerBottomRightRowContainerCon(this);
        break;
    }
  };
  RowContainerController.prototype.forContainers = function (names, callback) {
    if (names.indexOf(this.name) >= 0) {
      callback();
    }
  };
  RowContainerController.prototype.getContainerElement = function () {
    return this.eContainer;
  };
  RowContainerController.prototype.getViewportSizeFeature = function () {
    return this.viewportSizeFeature;
  };
  RowContainerController.prototype.setView = function (view, eContainer, eViewport, eWrapper) {
    var _this = this;
    this.view = view;
    this.eContainer = eContainer;
    this.eViewport = eViewport;
    this.eWrapper = eWrapper;
    this.createManagedBean(new RowContainerEventsFeature(this.eContainer));
    this.addPreventScrollWhileDragging();
    var allTopNoFW = [RowContainerNames.TOP_CENTER, RowContainerNames.TOP_LEFT, RowContainerNames.TOP_RIGHT];
    var allBottomNoFW = [RowContainerNames.BOTTOM_CENTER, RowContainerNames.BOTTOM_LEFT, RowContainerNames.BOTTOM_RIGHT];
    var allMiddleNoFW = [RowContainerNames.CENTER, RowContainerNames.LEFT, RowContainerNames.RIGHT];
    var allNoFW = __spreadArrays$6(allTopNoFW, allBottomNoFW, allMiddleNoFW);
    var allMiddle = [RowContainerNames.CENTER, RowContainerNames.LEFT, RowContainerNames.RIGHT, RowContainerNames.FULL_WIDTH];
    var allCenter = [RowContainerNames.CENTER, RowContainerNames.TOP_CENTER, RowContainerNames.BOTTOM_CENTER];
    var allLeft = [RowContainerNames.LEFT, RowContainerNames.BOTTOM_LEFT, RowContainerNames.TOP_LEFT];
    var allRight = [RowContainerNames.RIGHT, RowContainerNames.BOTTOM_RIGHT, RowContainerNames.TOP_RIGHT];
    this.forContainers(allLeft, function () {
      return _this.createManagedBean(new SetPinnedLeftWidthFeature(_this.eContainer));
    });
    this.forContainers(allRight, function () {
      return _this.createManagedBean(new SetPinnedRightWidthFeature(_this.eContainer));
    });
    this.forContainers(allMiddle, function () {
      return _this.createManagedBean(new SetHeightFeature(_this.eContainer, _this.eWrapper));
    });
    this.forContainers(allNoFW, function () {
      return _this.createManagedBean(new DragListenerFeature(_this.eContainer));
    });
    this.forContainers(allCenter, function () {
      return _this.createManagedBean(new CenterWidthFeature(function (width) {
        return _this.eContainer.style.width = width + "px";
      }));
    });
  };
  RowContainerController.prototype.onDisplayedColumnsChanged = function () {
    var _this = this;
    this.forContainers([RowContainerNames.CENTER], function () {
      return _this.onHorizontalViewportChanged();
    });
  };
  RowContainerController.prototype.onDisplayedColumnsWidthChanged = function () {
    var _this = this;
    this.forContainers([RowContainerNames.CENTER], function () {
      return _this.onHorizontalViewportChanged();
    });
  };
  RowContainerController.prototype.onScrollVisibilityChanged = function () {
    if (this.name !== RowContainerNames.CENTER) {
      return;
    }
    var visible = this.scrollVisibleService.isHorizontalScrollShowing();
    var scrollbarWidth = visible ? this.gridOptionsWrapper.getScrollbarWidth() || 0 : 0;
    var height = scrollbarWidth == 0 ? '100%' : "calc(100% + " + scrollbarWidth + "px)";
    this.view.setViewportHeight(height);
  };
  // this methods prevents the grid views from being scrolled while the dragService is being used
  // eg. the view should not scroll up and down while dragging rows using the rowDragComp.
  RowContainerController.prototype.addPreventScrollWhileDragging = function () {
    var _this = this;
    var preventScroll = function (e) {
      if (_this.dragService.isDragging()) {
        if (e.cancelable) {
          e.preventDefault();
        }
      }
    };
    this.eContainer.addEventListener('touchmove', preventScroll, {
      passive: false
    });
    this.addDestroyFunc(function () {
      return _this.eContainer.removeEventListener('touchmove', preventScroll);
    });
  };
  // this gets called whenever a change in the viewport, so we can inform column controller it has to work
  // out the virtual columns again. gets called from following locations:
  // + ensureColVisible, scroll, init, layoutChanged, displayedColumnsChanged, API (doLayout)
  RowContainerController.prototype.onHorizontalViewportChanged = function () {
    var scrollWidth = this.getCenterWidth();
    var scrollPosition = this.getCenterViewportScrollLeft();
    this.columnController.setViewportPosition(scrollWidth, scrollPosition);
  };
  RowContainerController.prototype.getCenterWidth = function () {
    return getInnerWidth(this.eViewport);
  };
  RowContainerController.prototype.getCenterViewportScrollLeft = function () {
    // we defer to a util, as how you calculated scrollLeft when doing RTL depends on the browser
    return getScrollLeft(this.eViewport, this.enableRtl);
  };
  RowContainerController.prototype.registerViewportResizeListener = function (listener) {
    var unsubscribeFromResize = this.resizeObserverService.observeResize(this.eViewport, listener);
    this.addDestroyFunc(function () {
      return unsubscribeFromResize();
    });
  };
  RowContainerController.prototype.isViewportVisible = function () {
    return isVisible(this.eViewport);
  };
  RowContainerController.prototype.isViewportHScrollShowing = function () {
    return isHorizontalScrollShowing(this.eViewport);
  };
  RowContainerController.prototype.getViewportScrollLeft = function () {
    return getScrollLeft(this.eViewport, this.enableRtl);
  };
  RowContainerController.prototype.isHorizontalScrollShowing = function () {
    var isAlwaysShowHorizontalScroll = this.gridOptionsWrapper.isAlwaysShowHorizontalScroll();
    return isAlwaysShowHorizontalScroll || isHorizontalScrollShowing(this.eViewport);
  };
  RowContainerController.prototype.getViewportElement = function () {
    return this.eViewport;
  };
  RowContainerController.prototype.setContainerTranslateX = function (amount) {
    this.eContainer.style.transform = "translateX(" + amount + "px)";
  };
  RowContainerController.prototype.getHScrollPosition = function () {
    var res = {
      left: this.eViewport.scrollLeft,
      right: this.eViewport.scrollLeft + this.eViewport.offsetWidth
    };
    return res;
  };
  RowContainerController.prototype.setCenterViewportScrollLeft = function (value) {
    // we defer to a util, as how you calculated scrollLeft when doing RTL depends on the browser
    setScrollLeft(this.eViewport, value, this.enableRtl);
  };
  __decorate$15([Autowired('scrollVisibleService')], RowContainerController.prototype, "scrollVisibleService", void 0);
  __decorate$15([Autowired('dragService')], RowContainerController.prototype, "dragService", void 0);
  __decorate$15([Autowired('controllersService')], RowContainerController.prototype, "controllersService", void 0);
  __decorate$15([Autowired('columnController')], RowContainerController.prototype, "columnController", void 0);
  __decorate$15([Autowired('resizeObserverService')], RowContainerController.prototype, "resizeObserverService", void 0);
  __decorate$15([PostConstruct], RowContainerController.prototype, "postConstruct", null);
  return RowContainerController;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1d =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$16 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var GRID_BODY_TEMPLATE = /* html */"<div class=\"ag-root ag-unselectable\" role=\"grid\" unselectable=\"on\">\n        <ag-header-root ref=\"headerRoot\" unselectable=\"on\"></ag-header-root>\n        <div class=\"ag-floating-top\" ref=\"eTop\" role=\"presentation\" unselectable=\"on\">\n            <ag-row-container ref=\"topLeftContainer\" name=\"" + RowContainerNames.TOP_LEFT + "\"></ag-row-container>\n            <ag-row-container ref=\"topCenterContainer\" name=\"" + RowContainerNames.TOP_CENTER + "\"></ag-row-container>\n            <ag-row-container ref=\"topRightContainer\" name=\"" + RowContainerNames.TOP_RIGHT + "\"></ag-row-container>\n            <ag-row-container ref=\"topFullWidthContainer\" name=\"" + RowContainerNames.TOP_FULL_WITH + "\"></ag-row-container>\n        </div>\n        <div class=\"ag-body-viewport\" ref=\"eBodyViewport\" role=\"presentation\">\n            <ag-row-container ref=\"leftContainer\" name=\"" + RowContainerNames.LEFT + "\"></ag-row-container>\n            <ag-row-container ref=\"centerContainer\" name=\"" + RowContainerNames.CENTER + "\"></ag-row-container>\n            <ag-row-container ref=\"rightContainer\" name=\"" + RowContainerNames.RIGHT + "\"></ag-row-container>\n            <ag-row-container ref=\"fullWidthContainer\" name=\"" + RowContainerNames.FULL_WIDTH + "\"></ag-row-container>\n        </div>\n        <div class=\"ag-floating-bottom\" ref=\"eBottom\" role=\"presentation\" unselectable=\"on\">\n            <ag-row-container ref=\"bottomLeftContainer\" name=\"" + RowContainerNames.BOTTOM_LEFT + "\"></ag-row-container>\n            <ag-row-container ref=\"bottomCenterContainer\" name=\"" + RowContainerNames.BOTTOM_CENTER + "\"></ag-row-container>\n            <ag-row-container ref=\"bottomRightContainer\" name=\"" + RowContainerNames.BOTTOM_RIGHT + "\"></ag-row-container>\n            <ag-row-container ref=\"bottomFullWidthContainer\" name=\"" + RowContainerNames.BOTTOM_FULL_WITH + "\"></ag-row-container>\n        </div>\n        <ag-fake-horizontal-scroll></ag-fake-horizontal-scroll>\n        <ag-overlay-wrapper></ag-overlay-wrapper>\n    </div>";
var GridBodyComp = /** @class */function (_super) {
  __extends$1d(GridBodyComp, _super);
  function GridBodyComp() {
    return _super.call(this, GRID_BODY_TEMPLATE) || this;
  }
  GridBodyComp.prototype.init = function () {
    var _this = this;
    var setHeight = function (height, element) {
      var heightString = height + "px";
      element.style.minHeight = heightString;
      element.style.height = heightString;
    };
    var view = {
      setRowAnimationCssOnBodyViewport: this.setRowAnimationCssOnBodyViewport.bind(this),
      setColumnCount: function (count) {
        return setAriaColCount(_this.getGui(), count);
      },
      setRowCount: function (count) {
        return setAriaRowCount(_this.getGui(), count);
      },
      setTopHeight: function (height) {
        return setHeight(height, _this.eTop);
      },
      setBottomHeight: function (height) {
        return setHeight(height, _this.eBottom);
      },
      setTopDisplay: function (display) {
        return _this.eTop.style.display = display;
      },
      setBottomDisplay: function (display) {
        return _this.eBottom.style.display = display;
      },
      setColumnMovingCss: function (moving) {
        return _this.addOrRemoveCssClass(CSS_CLASS_COLUMN_MOVING, moving);
      },
      updateLayoutClasses: function (params) {
        addOrRemoveCssClass(_this.eBodyViewport, exports.LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);
        addOrRemoveCssClass(_this.eBodyViewport, exports.LayoutCssClasses.NORMAL, params.normal);
        addOrRemoveCssClass(_this.eBodyViewport, exports.LayoutCssClasses.PRINT, params.print);
        _this.addOrRemoveCssClass(exports.LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);
        _this.addOrRemoveCssClass(exports.LayoutCssClasses.NORMAL, params.normal);
        _this.addOrRemoveCssClass(exports.LayoutCssClasses.PRINT, params.print);
      },
      setAlwaysVerticalScrollClass: function (on) {
        return addOrRemoveCssClass(_this.eBodyViewport, CSS_CLASS_FORCE_VERTICAL_SCROLL, on);
      },
      registerBodyViewportResizeListener: function (listener) {
        var unsubscribeFromResize = _this.resizeObserverService.observeResize(_this.eBodyViewport, listener);
        _this.addDestroyFunc(function () {
          return unsubscribeFromResize();
        });
      },
      setVerticalScrollPaddingVisible: function (show) {
        var scroller = show ? 'scroll' : 'hidden';
        _this.eTop.style.overflowY = _this.eBottom.style.overflowY = scroller;
      },
      setCellSelectableCss: function (selectable) {
        [_this.eTop, _this.eBodyViewport, _this.eBottom].forEach(function (ct) {
          return addOrRemoveCssClass(ct, CSS_CLASS_CELL_SELECTABLE, selectable);
        });
      }
    };
    this.controller = this.createManagedBean(new GridBodyController());
    this.controller.setView(view, this.getGui(), this.eBodyViewport, this.eTop, this.eBottom);
    if (this.$scope) {
      this.addAngularApplyCheck();
    }
    this.gridApi.registerGridComp(this);
    this.beans.registerGridComp(this);
    if (this.contextMenuFactory) {
      this.contextMenuFactory.registerGridComp(this);
    }
    if (this.menuFactory) {
      this.menuFactory.registerGridComp(this);
    }
    if (this.rangeController || this.gridOptionsWrapper.isRowSelectionMulti()) {
      setAriaMultiSelectable(this.getGui(), true);
      if (this.rangeController) {
        this.rangeController.registerGridComp(this);
      }
    }
    [this.eTop, this.eBodyViewport, this.eBottom].forEach(function (element) {
      _this.addManagedListener(element, 'focusin', function () {
        addCssClass(element, 'ag-has-focus');
      });
      _this.addManagedListener(element, 'focusout', function (e) {
        if (!element.contains(e.relatedTarget)) {
          removeCssClass(element, 'ag-has-focus');
        }
      });
    });
  };
  GridBodyComp.prototype.setRowAnimationCssOnBodyViewport = function (animateRows) {
    addOrRemoveCssClass(this.eBodyViewport, RowAnimationCssClasses.ANIMATION_ON, animateRows);
    addOrRemoveCssClass(this.eBodyViewport, RowAnimationCssClasses.ANIMATION_OFF, !animateRows);
  };
  GridBodyComp.prototype.addAngularApplyCheck = function () {
    var _this = this;
    // this makes sure if we queue up requests, we only execute oe
    var applyTriggered = false;
    var listener = function () {
      // only need to do one apply at a time
      if (applyTriggered) {
        return;
      }
      applyTriggered = true; // mark 'need apply' to true
      window.setTimeout(function () {
        applyTriggered = false;
        _this.$scope.$apply();
      }, 0);
    };
    // these are the events we need to do an apply after - these are the ones that can end up
    // with columns added or removed
    this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);
    this.addManagedListener(this.eventService, Events.EVENT_VIRTUAL_COLUMNS_CHANGED, listener);
  };
  GridBodyComp.prototype.getFloatingTopBottom = function () {
    return [this.eTop, this.eBottom];
  };
  // + rangeController
  GridBodyComp.prototype.addScrollEventListener = function (listener) {
    this.eBodyViewport.addEventListener('scroll', listener);
  };
  // + rangeController
  GridBodyComp.prototype.removeScrollEventListener = function (listener) {
    this.eBodyViewport.removeEventListener('scroll', listener);
  };
  __decorate$16([Autowired('beans')], GridBodyComp.prototype, "beans", void 0);
  __decorate$16([Autowired('gridApi')], GridBodyComp.prototype, "gridApi", void 0);
  __decorate$16([Autowired('$scope')], GridBodyComp.prototype, "$scope", void 0);
  __decorate$16([Autowired('resizeObserverService')], GridBodyComp.prototype, "resizeObserverService", void 0);
  __decorate$16([Optional('rangeController')], GridBodyComp.prototype, "rangeController", void 0);
  __decorate$16([Optional('contextMenuFactory')], GridBodyComp.prototype, "contextMenuFactory", void 0);
  __decorate$16([Optional('menuFactory')], GridBodyComp.prototype, "menuFactory", void 0);
  __decorate$16([RefSelector('eBodyViewport')], GridBodyComp.prototype, "eBodyViewport", void 0);
  __decorate$16([RefSelector('eTop')], GridBodyComp.prototype, "eTop", void 0);
  __decorate$16([RefSelector('eBottom')], GridBodyComp.prototype, "eBottom", void 0);
  __decorate$16([RefSelector('headerRoot')], GridBodyComp.prototype, "headerRootComp", void 0);
  __decorate$16([PostConstruct], GridBodyComp.prototype, "init", null);
  return GridBodyComp;
}(Component);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
(function (ExcelFactoryMode) {
  ExcelFactoryMode[ExcelFactoryMode["SINGLE_SHEET"] = 0] = "SINGLE_SHEET";
  ExcelFactoryMode[ExcelFactoryMode["MULTI_SHEET"] = 1] = "MULTI_SHEET";
})(exports.ExcelFactoryMode || (exports.ExcelFactoryMode = {}));

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
(function (ClientSideRowModelSteps) {
  ClientSideRowModelSteps["EVERYTHING"] = "group";
  ClientSideRowModelSteps["FILTER"] = "filter";
  ClientSideRowModelSteps["SORT"] = "sort";
  ClientSideRowModelSteps["MAP"] = "map";
  ClientSideRowModelSteps["AGGREGATE"] = "aggregate";
  ClientSideRowModelSteps["PIVOT"] = "pivot";
  ClientSideRowModelSteps["NOTHING"] = "nothing";
})(exports.ClientSideRowModelSteps || (exports.ClientSideRowModelSteps = {}));

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __decorate$17 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var GridApi = /** @class */function () {
  function GridApi() {
    this.detailGridInfoMap = {};
    this.destroyCalled = false;
  }
  GridApi.prototype.registerGridComp = function (gridBodyComp) {
    this.gridBodyComp = gridBodyComp;
  };
  GridApi.prototype.registerOverlayWrapperComp = function (overlayWrapperComp) {
    this.overlayWrapperComp = overlayWrapperComp;
  };
  GridApi.prototype.registerGridCompController = function (gridCompController) {
    this.gridCompController = gridCompController;
  };
  GridApi.prototype.registerHeaderRootComp = function (headerRootComp) {
    this.headerRootComp = headerRootComp;
  };
  GridApi.prototype.registerSideBarComp = function (sideBarComp) {
    this.sideBarComp = sideBarComp;
  };
  GridApi.prototype.init = function () {
    var _this = this;
    switch (this.rowModel.getType()) {
      case Constants.ROW_MODEL_TYPE_CLIENT_SIDE:
        this.clientSideRowModel = this.rowModel;
        break;
      case Constants.ROW_MODEL_TYPE_INFINITE:
        this.infiniteRowModel = this.rowModel;
        break;
      case Constants.ROW_MODEL_TYPE_SERVER_SIDE:
        this.serverSideRowModel = this.rowModel;
        break;
    }
    this.controllersService.whenReady(function () {
      _this.gridBodyCon = _this.controllersService.getGridBodyController();
    });
  };
  /** Used internally by grid. Not intended to be used by the client. Interface may change between releases. */
  GridApi.prototype.__getAlignedGridService = function () {
    return this.alignedGridsService;
  };
  GridApi.prototype.addDetailGridInfo = function (id, gridInfo) {
    this.detailGridInfoMap[id] = gridInfo;
  };
  GridApi.prototype.removeDetailGridInfo = function (id) {
    this.detailGridInfoMap[id] = undefined;
  };
  GridApi.prototype.getDetailGridInfo = function (id) {
    return this.detailGridInfoMap[id];
  };
  GridApi.prototype.forEachDetailGridInfo = function (callback) {
    var index = 0;
    iterateObject(this.detailGridInfoMap, function (id, gridInfo) {
      // check for undefined, as old references will still be lying around
      if (exists(gridInfo)) {
        callback(gridInfo, index);
        index++;
      }
    });
  };
  GridApi.prototype.getDataAsCsv = function (params) {
    if (ModuleRegistry.assertRegistered(exports.ModuleNames.CsvExportModule, 'api.getDataAsCsv')) {
      return this.csvCreator.getDataAsCsv(params);
    }
  };
  GridApi.prototype.exportDataAsCsv = function (params) {
    if (ModuleRegistry.assertRegistered(exports.ModuleNames.CsvExportModule, 'api.exportDataAsCSv')) {
      this.csvCreator.exportDataAsCsv(params);
    }
  };
  GridApi.prototype.getDataAsExcel = function (params) {
    if (ModuleRegistry.assertRegistered(exports.ModuleNames.ExcelExportModule, 'api.getDataAsExcel')) {
      var exportMode = params && params.exportMode || 'xlsx';
      if (this.excelCreator.getFactoryMode(exportMode) === exports.ExcelFactoryMode.MULTI_SHEET) {
        console.warn('AG Grid: The Excel Exporter is currently on Multi Sheet mode. End that operation by calling `api.getMultipleSheetAsExcel()` or `api.exportMultipleSheetsAsExcel()`');
        return;
      }
      return this.excelCreator.getDataAsExcel(params);
    }
  };
  GridApi.prototype.exportDataAsExcel = function (params) {
    if (ModuleRegistry.assertRegistered(exports.ModuleNames.ExcelExportModule, 'api.exportDataAsExcel')) {
      var exportMode = params && params.exportMode || 'xlsx';
      if (this.excelCreator.getFactoryMode(exportMode) === exports.ExcelFactoryMode.MULTI_SHEET) {
        console.warn('AG Grid: The Excel Exporter is currently on Multi Sheet mode. End that operation by calling `api.getMultipleSheetAsExcel()` or `api.exportMultipleSheetsAsExcel()`');
        return;
      }
      this.excelCreator.exportDataAsExcel(params);
    }
  };
  GridApi.prototype.getSheetDataForExcel = function (params) {
    if (ModuleRegistry.assertRegistered(exports.ModuleNames.ExcelExportModule, 'api.getSheetDataForExcel')) {
      var exportMode = params && params.exportMode || 'xlsx';
      this.excelCreator.setFactoryMode(exports.ExcelFactoryMode.MULTI_SHEET, exportMode);
      return this.excelCreator.getSheetDataForExcel(params);
    }
  };
  GridApi.prototype.getMultipleSheetsAsExcel = function (params) {
    if (ModuleRegistry.assertRegistered(exports.ModuleNames.ExcelExportModule, 'api.getMultipleSheetsAsExcel')) {
      return this.excelCreator.getMultipleSheetsAsExcel(params);
    }
  };
  GridApi.prototype.exportMultipleSheetsAsExcel = function (params) {
    if (ModuleRegistry.assertRegistered(exports.ModuleNames.ExcelExportModule, 'api.exportMultipleSheetsAsExcel')) {
      return this.excelCreator.exportMultipleSheetsAsExcel(params);
    }
  };
  /** @deprecated */
  GridApi.prototype.setEnterpriseDatasource = function (datasource) {
    console.warn("ag-grid: since version 18.x, api.setEnterpriseDatasource() should be replaced with api.setServerSideDatasource()");
    this.setServerSideDatasource(datasource);
  };
  GridApi.prototype.setGridAriaProperty = function (property, value) {
    if (!property) {
      return;
    }
    var eGrid = this.gridBodyComp.getGui();
    var ariaProperty = "aria-" + property;
    if (value === null) {
      eGrid.removeAttribute(ariaProperty);
    } else {
      eGrid.setAttribute(ariaProperty, value);
    }
  };
  GridApi.prototype.setServerSideDatasource = function (datasource) {
    if (this.serverSideRowModel) {
      // should really have an IEnterpriseRowModel interface, so we are not casting to any
      this.serverSideRowModel.setDatasource(datasource);
    } else {
      console.warn("AG Grid: you can only use an enterprise datasource when gridOptions.rowModelType is '" + Constants.ROW_MODEL_TYPE_SERVER_SIDE + "'");
    }
  };
  GridApi.prototype.setDatasource = function (datasource) {
    if (this.gridOptionsWrapper.isRowModelInfinite()) {
      this.rowModel.setDatasource(datasource);
    } else {
      console.warn("AG Grid: you can only use a datasource when gridOptions.rowModelType is '" + Constants.ROW_MODEL_TYPE_INFINITE + "'");
    }
  };
  GridApi.prototype.setViewportDatasource = function (viewportDatasource) {
    if (this.gridOptionsWrapper.isRowModelViewport()) {
      // this is bad coding, because it's using an interface that's exposed in the enterprise.
      // really we should create an interface in the core for viewportDatasource and let
      // the enterprise implement it, rather than casting to 'any' here
      this.rowModel.setViewportDatasource(viewportDatasource);
    } else {
      console.warn("AG Grid: you can only use a viewport datasource when gridOptions.rowModelType is '" + Constants.ROW_MODEL_TYPE_VIEWPORT + "'");
    }
  };
  GridApi.prototype.setRowData = function (rowData) {
    if (this.gridOptionsWrapper.isRowModelDefault()) {
      if (this.gridOptionsWrapper.isImmutableData()) {
        var transactionAndMap = this.immutableService.createTransactionForRowData(rowData);
        if (!transactionAndMap) {
          return;
        }
        var transaction = transactionAndMap[0],
          orderIdMap = transactionAndMap[1];
        var nodeTransaction = this.clientSideRowModel.updateRowData(transaction, orderIdMap);
        // need to force updating of full width rows - note this wouldn't be necessary the full width cell comp listened
        // to the data change event on the row node and refreshed itself.
        if (nodeTransaction) {
          this.rowRenderer.refreshFullWidthRows(nodeTransaction.update);
        }
      } else {
        this.selectionController.reset();
        this.clientSideRowModel.setRowData(rowData);
      }
    } else {
      console.warn('cannot call setRowData unless using normal row model');
    }
  };
  /** @deprecated */
  GridApi.prototype.setFloatingTopRowData = function (rows) {
    console.warn('AG Grid: since v12, api.setFloatingTopRowData() is now api.setPinnedTopRowData()');
    this.setPinnedTopRowData(rows);
  };
  /** @deprecated */
  GridApi.prototype.setFloatingBottomRowData = function (rows) {
    console.warn('AG Grid: since v12, api.setFloatingBottomRowData() is now api.setPinnedBottomRowData()');
    this.setPinnedBottomRowData(rows);
  };
  /** @deprecated */
  GridApi.prototype.getFloatingTopRowCount = function () {
    console.warn('AG Grid: since v12, api.getFloatingTopRowCount() is now api.getPinnedTopRowCount()');
    return this.getPinnedTopRowCount();
  };
  /** @deprecated */
  GridApi.prototype.getFloatingBottomRowCount = function () {
    console.warn('AG Grid: since v12, api.getFloatingBottomRowCount() is now api.getPinnedBottomRowCount()');
    return this.getPinnedBottomRowCount();
  };
  /** @deprecated */
  GridApi.prototype.getFloatingTopRow = function (index) {
    console.warn('AG Grid: since v12, api.getFloatingTopRow() is now api.getPinnedTopRow()');
    return this.getPinnedTopRow(index);
  };
  /** @deprecated */
  GridApi.prototype.getFloatingBottomRow = function (index) {
    console.warn('AG Grid: since v12, api.getFloatingBottomRow() is now api.getPinnedBottomRow()');
    return this.getPinnedBottomRow(index);
  };
  GridApi.prototype.setPinnedTopRowData = function (rows) {
    this.pinnedRowModel.setPinnedTopRowData(rows);
  };
  GridApi.prototype.setPinnedBottomRowData = function (rows) {
    this.pinnedRowModel.setPinnedBottomRowData(rows);
  };
  GridApi.prototype.getPinnedTopRowCount = function () {
    return this.pinnedRowModel.getPinnedTopRowCount();
  };
  GridApi.prototype.getPinnedBottomRowCount = function () {
    return this.pinnedRowModel.getPinnedBottomRowCount();
  };
  GridApi.prototype.getPinnedTopRow = function (index) {
    return this.pinnedRowModel.getPinnedTopRow(index);
  };
  GridApi.prototype.getPinnedBottomRow = function (index) {
    return this.pinnedRowModel.getPinnedBottomRow(index);
  };
  GridApi.prototype.setColumnDefs = function (colDefs, source) {
    if (source === void 0) {
      source = "api";
    }
    this.columnController.setColumnDefs(colDefs, source);
  };
  GridApi.prototype.setAutoGroupColumnDef = function (colDef, source) {
    this.gridOptionsWrapper.setProperty('autoGroupColumnDef', colDef, true);
  };
  GridApi.prototype.expireValueCache = function () {
    this.valueCache.expire();
  };
  GridApi.prototype.getVerticalPixelRange = function () {
    return this.gridBodyCon.getScrollFeature().getVScrollPosition();
  };
  GridApi.prototype.getHorizontalPixelRange = function () {
    return this.gridBodyCon.getScrollFeature().getHScrollPosition();
  };
  GridApi.prototype.setAlwaysShowHorizontalScroll = function (show) {
    this.gridOptionsWrapper.setProperty('alwaysShowHorizontalScroll', show);
  };
  GridApi.prototype.setAlwaysShowVerticalScroll = function (show) {
    this.gridOptionsWrapper.setProperty('alwaysShowVerticalScroll', show);
  };
  GridApi.prototype.refreshToolPanel = function () {
    if (!this.sideBarComp) {
      return;
    }
    this.sideBarComp.refresh();
  };
  GridApi.prototype.refreshCells = function (params) {
    if (params === void 0) {
      params = {};
    }
    if (Array.isArray(params)) {
      // the old version of refreshCells() took an array of rowNodes for the first argument
      console.warn('since AG Grid v11.1, refreshCells() now takes parameters, please see the documentation.');
      return;
    }
    this.rowRenderer.refreshCells(params);
  };
  GridApi.prototype.flashCells = function (params) {
    if (params === void 0) {
      params = {};
    }
    this.rowRenderer.flashCells(params);
  };
  GridApi.prototype.redrawRows = function (params) {
    if (params === void 0) {
      params = {};
    }
    var rowNodes = params ? params.rowNodes : undefined;
    this.rowRenderer.redrawRows(rowNodes);
  };
  /** @deprecated */
  GridApi.prototype.refreshView = function () {
    console.warn('AG Grid: since v11.1, refreshView() is deprecated, please call refreshCells() or redrawRows() instead');
    this.redrawRows();
  };
  /** @deprecated */
  GridApi.prototype.refreshRows = function (rowNodes) {
    console.warn('since AG Grid v11.1, refreshRows() is deprecated, please use refreshCells({rowNodes: rows}) or redrawRows({rowNodes: rows}) instead');
    this.refreshCells({
      rowNodes: rowNodes
    });
  };
  /** @deprecated */
  GridApi.prototype.rowDataChanged = function (rows) {
    console.warn('AG Grid: rowDataChanged is deprecated, either call refreshView() to refresh everything, or call rowNode.setRowData(newData) to set value on a particular node');
    this.redrawRows();
  };
  /** @deprecated */
  GridApi.prototype.softRefreshView = function () {
    console.error('AG Grid: since v16, softRefreshView() is no longer supported. Please check the documentation on how to refresh.');
  };
  /** @deprecated */
  GridApi.prototype.refreshGroupRows = function () {
    console.warn('AG Grid: since v11.1, refreshGroupRows() is no longer supported, call refreshCells() instead. ' + 'Because refreshCells() now does dirty checking, it will only refresh cells that have changed, so it should ' + 'not be necessary to only refresh the group rows.');
    this.refreshCells();
  };
  GridApi.prototype.setFunctionsReadOnly = function (readOnly) {
    this.gridOptionsWrapper.setProperty('functionsReadOnly', readOnly);
  };
  GridApi.prototype.refreshHeader = function () {
    this.headerRootComp.refreshHeader();
  };
  GridApi.prototype.isAnyFilterPresent = function () {
    return this.filterManager.isAnyFilterPresent();
  };
  /** @deprecated */
  GridApi.prototype.isAdvancedFilterPresent = function () {
    console.warn('AG Grid: isAdvancedFilterPresent() is deprecated, please use isColumnFilterPresent()');
    return this.isColumnFilterPresent();
  };
  GridApi.prototype.isColumnFilterPresent = function () {
    return this.filterManager.isAdvancedFilterPresent();
  };
  GridApi.prototype.isQuickFilterPresent = function () {
    return this.filterManager.isQuickFilterPresent();
  };
  GridApi.prototype.getModel = function () {
    return this.rowModel;
  };
  GridApi.prototype.setRowNodeExpanded = function (rowNode, expanded) {
    if (rowNode) {
      rowNode.setExpanded(expanded);
    }
  };
  GridApi.prototype.onGroupExpandedOrCollapsed = function (deprecated_refreshFromIndex) {
    if (missing(this.clientSideRowModel)) {
      console.warn('AG Grid: cannot call onGroupExpandedOrCollapsed unless using normal row model');
    }
    if (exists(deprecated_refreshFromIndex)) {
      console.warn('AG Grid: api.onGroupExpandedOrCollapsed - refreshFromIndex parameter is no longer used, the grid will refresh all rows');
    }
    // we don't really want the user calling this if only one rowNode was expanded, instead they should be
    // calling rowNode.setExpanded(boolean) - this way we do a 'keepRenderedRows=false' so that the whole
    // grid gets refreshed again - otherwise the row with the rowNodes that were changed won't get updated,
    // and thus the expand icon in the group cell won't get 'opened' or 'closed'.
    this.clientSideRowModel.refreshModel({
      step: exports.ClientSideRowModelSteps.MAP
    });
  };
  GridApi.prototype.refreshInMemoryRowModel = function (step) {
    console.warn("ag-grid: since version 18.x, api.refreshInMemoryRowModel() should be replaced with api.refreshClientSideRowModel()");
    this.refreshClientSideRowModel(step);
  };
  GridApi.prototype.refreshClientSideRowModel = function (step) {
    if (missing(this.clientSideRowModel)) {
      console.warn('cannot call refreshClientSideRowModel unless using normal row model');
    }
    var paramsStep = exports.ClientSideRowModelSteps.EVERYTHING;
    var stepsMapped = {
      group: exports.ClientSideRowModelSteps.EVERYTHING,
      filter: exports.ClientSideRowModelSteps.FILTER,
      map: exports.ClientSideRowModelSteps.MAP,
      aggregate: exports.ClientSideRowModelSteps.AGGREGATE,
      sort: exports.ClientSideRowModelSteps.SORT,
      pivot: exports.ClientSideRowModelSteps.PIVOT
    };
    if (exists(step)) {
      paramsStep = stepsMapped[step];
    }
    if (missing(paramsStep)) {
      console.error("AG Grid: invalid step " + step + ", available steps are " + Object.keys(stepsMapped).join(', '));
      return;
    }
    var modelParams = {
      step: paramsStep,
      keepRenderedRows: true,
      animate: true,
      keepEditingRows: true
    };
    this.clientSideRowModel.refreshModel(modelParams);
  };
  GridApi.prototype.isAnimationFrameQueueEmpty = function () {
    return this.animationFrameService.isQueueEmpty();
  };
  GridApi.prototype.getRowNode = function (id) {
    return this.rowModel.getRowNode(id);
  };
  GridApi.prototype.getSizesForCurrentTheme = function () {
    return {
      rowHeight: this.gridOptionsWrapper.getRowHeightAsNumber(),
      headerHeight: this.gridOptionsWrapper.getHeaderHeight()
    };
  };
  GridApi.prototype.expandAll = function () {
    if (this.clientSideRowModel) {
      this.clientSideRowModel.expandOrCollapseAll(true);
    } else if (this.serverSideRowModel) {
      this.serverSideRowModel.expandAll(true);
    } else {
      console.warn('AG Grid: expandAll only works with Client Side Row Model and Server Side Row Model');
    }
  };
  GridApi.prototype.collapseAll = function () {
    if (this.clientSideRowModel) {
      this.clientSideRowModel.expandOrCollapseAll(false);
    } else if (this.serverSideRowModel) {
      this.serverSideRowModel.expandAll(false);
    } else {
      console.warn('AG Grid: collapseAll only works with Client Side Row Model and Server Side Row Model');
    }
  };
  GridApi.prototype.getToolPanelInstance = function (id) {
    if (!this.sideBarComp) {
      console.warn('AG Grid: toolPanel is only available in AG Grid Enterprise');
      return;
    }
    return this.sideBarComp.getToolPanelInstance(id);
  };
  GridApi.prototype.addVirtualRowListener = function (eventName, rowIndex, callback) {
    if (typeof eventName !== 'string') {
      console.warn('AG Grid: addVirtualRowListener is deprecated, please use addRenderedRowListener.');
    }
    this.addRenderedRowListener(eventName, rowIndex, callback);
  };
  GridApi.prototype.addRenderedRowListener = function (eventName, rowIndex, callback) {
    if (eventName === 'virtualRowSelected') {
      console.warn("AG Grid: event virtualRowSelected is deprecated, to register for individual row\n                selection events, add a listener directly to the row node.");
    }
    this.rowRenderer.addRenderedRowListener(eventName, rowIndex, callback);
  };
  GridApi.prototype.setQuickFilter = function (newFilter) {
    this.filterManager.setQuickFilter(newFilter);
  };
  GridApi.prototype.selectIndex = function (index, tryMulti, suppressEvents) {
    console.warn('AG Grid: do not use api for selection, call node.setSelected(value) instead');
    if (suppressEvents) {
      console.warn('AG Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');
    }
    this.selectionController.selectIndex(index, tryMulti);
  };
  GridApi.prototype.deselectIndex = function (index, suppressEvents) {
    if (suppressEvents === void 0) {
      suppressEvents = false;
    }
    console.warn('AG Grid: do not use api for selection, call node.setSelected(value) instead');
    if (suppressEvents) {
      console.warn('AG Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');
    }
    this.selectionController.deselectIndex(index);
  };
  GridApi.prototype.selectNode = function (node, tryMulti, suppressEvents) {
    if (tryMulti === void 0) {
      tryMulti = false;
    }
    if (suppressEvents === void 0) {
      suppressEvents = false;
    }
    console.warn('AG Grid: API for selection is deprecated, call node.setSelected(value) instead');
    if (suppressEvents) {
      console.warn('AG Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');
    }
    node.setSelectedParams({
      newValue: true,
      clearSelection: !tryMulti
    });
  };
  GridApi.prototype.deselectNode = function (node, suppressEvents) {
    if (suppressEvents === void 0) {
      suppressEvents = false;
    }
    console.warn('AG Grid: API for selection is deprecated, call node.setSelected(value) instead');
    if (suppressEvents) {
      console.warn('AG Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');
    }
    node.setSelectedParams({
      newValue: false
    });
  };
  GridApi.prototype.selectAll = function () {
    this.selectionController.selectAllRowNodes();
  };
  GridApi.prototype.deselectAll = function () {
    this.selectionController.deselectAllRowNodes();
  };
  GridApi.prototype.selectAllFiltered = function () {
    this.selectionController.selectAllRowNodes(true);
  };
  GridApi.prototype.deselectAllFiltered = function () {
    this.selectionController.deselectAllRowNodes(true);
  };
  GridApi.prototype.recomputeAggregates = function () {
    if (missing(this.clientSideRowModel)) {
      console.warn('cannot call recomputeAggregates unless using normal row model');
    }
    console.warn("recomputeAggregates is deprecated, please call api.refreshClientSideRowModel('aggregate') instead");
    this.clientSideRowModel.refreshModel({
      step: exports.ClientSideRowModelSteps.AGGREGATE
    });
  };
  GridApi.prototype.sizeColumnsToFit = function () {
    this.gridBodyCon.sizeColumnsToFit();
  };
  GridApi.prototype.showLoadingOverlay = function () {
    this.overlayWrapperComp.showLoadingOverlay();
  };
  GridApi.prototype.showNoRowsOverlay = function () {
    this.overlayWrapperComp.showNoRowsOverlay();
  };
  GridApi.prototype.hideOverlay = function () {
    this.overlayWrapperComp.hideOverlay();
  };
  GridApi.prototype.isNodeSelected = function (node) {
    console.warn('AG Grid: no need to call api.isNodeSelected(), just call node.isSelected() instead');
    return node.isSelected();
  };
  GridApi.prototype.getSelectedNodesById = function () {
    console.error('AG Grid: since version 3.4, getSelectedNodesById no longer exists, use getSelectedNodes() instead');
    return null;
  };
  GridApi.prototype.getSelectedNodes = function () {
    return this.selectionController.getSelectedNodes();
  };
  GridApi.prototype.getSelectedRows = function () {
    return this.selectionController.getSelectedRows();
  };
  GridApi.prototype.getBestCostNodeSelection = function () {
    return this.selectionController.getBestCostNodeSelection();
  };
  GridApi.prototype.getRenderedNodes = function () {
    return this.rowRenderer.getRenderedNodes();
  };
  GridApi.prototype.ensureColIndexVisible = function (index) {
    console.warn('AG Grid: ensureColIndexVisible(index) no longer supported, use ensureColumnVisible(colKey) instead.');
  };
  GridApi.prototype.ensureColumnVisible = function (key) {
    this.gridBodyCon.getScrollFeature().ensureColumnVisible(key);
  };
  // Valid values for position are bottom, middle and top
  GridApi.prototype.ensureIndexVisible = function (index, position) {
    this.gridBodyCon.getScrollFeature().ensureIndexVisible(index, position);
  };
  // Valid values for position are bottom, middle and top
  GridApi.prototype.ensureNodeVisible = function (comparator, position) {
    if (position === void 0) {
      position = null;
    }
    this.gridBodyCon.getScrollFeature().ensureNodeVisible(comparator, position);
  };
  GridApi.prototype.forEachLeafNode = function (callback) {
    if (missing(this.clientSideRowModel)) {
      console.warn('cannot call forEachNode unless using normal row model');
    }
    this.clientSideRowModel.forEachLeafNode(callback);
  };
  GridApi.prototype.forEachNode = function (callback) {
    this.rowModel.forEachNode(callback);
  };
  GridApi.prototype.forEachNodeAfterFilter = function (callback) {
    if (missing(this.clientSideRowModel)) {
      console.warn('cannot call forEachNodeAfterFilter unless using normal row model');
    }
    this.clientSideRowModel.forEachNodeAfterFilter(callback);
  };
  GridApi.prototype.forEachNodeAfterFilterAndSort = function (callback) {
    if (missing(this.clientSideRowModel)) {
      console.warn('cannot call forEachNodeAfterFilterAndSort unless using normal row model');
    }
    this.clientSideRowModel.forEachNodeAfterFilterAndSort(callback);
  };
  GridApi.prototype.getFilterApiForColDef = function (colDef) {
    console.warn('ag-grid API method getFilterApiForColDef deprecated, use getFilterInstance instead');
    return this.getFilterInstance(colDef);
  };
  GridApi.prototype.getFilterInstance = function (key, callback) {
    var column = this.columnController.getPrimaryColumn(key);
    if (column) {
      var filterPromise = this.filterManager.getFilterComponent(column, 'NO_UI');
      var currentValue = filterPromise && filterPromise.resolveNow(null, function (filterComp) {
        return filterComp;
      });
      if (callback) {
        if (currentValue) {
          setTimeout(callback, 0, currentValue);
        } else if (filterPromise) {
          filterPromise.then(callback);
        }
      }
      return currentValue;
    }
  };
  GridApi.prototype.getFilterApi = function (key) {
    console.warn('AG Grid: getFilterApi is deprecated, use getFilterInstance instead');
    return this.getFilterInstance(key);
  };
  GridApi.prototype.destroyFilter = function (key) {
    var column = this.columnController.getPrimaryColumn(key);
    if (column) {
      return this.filterManager.destroyFilter(column, "filterDestroyed");
    }
  };
  GridApi.prototype.getStatusPanel = function (key) {
    if (this.statusBarService) {
      return this.statusBarService.getStatusPanel(key);
    }
  };
  GridApi.prototype.getColumnDef = function (key) {
    var column = this.columnController.getPrimaryColumn(key);
    if (column) {
      return column.getColDef();
    }
    return null;
  };
  GridApi.prototype.getColumnDefs = function () {
    return this.columnController.getColumnDefs();
  };
  GridApi.prototype.onFilterChanged = function () {
    this.filterManager.onFilterChanged();
  };
  GridApi.prototype.onSortChanged = function () {
    this.sortController.onSortChanged();
  };
  GridApi.prototype.setSortModel = function (sortModel, source) {
    console.warn('AG Grid: as of version 24.0.0, setSortModel() is deprecated, sort information is now part of Column State. Please use columnApi.applyColumnState() instead.');
    var columnState = [];
    if (sortModel) {
      sortModel.forEach(function (item, index) {
        columnState.push({
          colId: item.colId,
          sort: item.sort,
          sortIndex: index
        });
      });
    }
    this.columnController.applyColumnState({
      state: columnState,
      defaultState: {
        sort: null
      }
    });
  };
  GridApi.prototype.getSortModel = function () {
    console.warn('AG Grid: as of version 24.0.0, getSortModel() is deprecated, sort information is now part of Column State. Please use columnApi.getColumnState() instead.');
    var columnState = this.columnController.getColumnState();
    var filteredStates = columnState.filter(function (item) {
      return item.sort != null;
    });
    var indexes = {};
    filteredStates.forEach(function (state) {
      var id = state.colId;
      var sortIndex = state.sortIndex;
      indexes[id] = sortIndex;
    });
    var res = filteredStates.map(function (s) {
      return {
        colId: s.colId,
        sort: s.sort
      };
    });
    res.sort(function (a, b) {
      return indexes[a.colId] - indexes[b.colId];
    });
    return res;
  };
  GridApi.prototype.setFilterModel = function (model) {
    this.filterManager.setFilterModel(model);
  };
  GridApi.prototype.getFilterModel = function () {
    return this.filterManager.getFilterModel();
  };
  GridApi.prototype.getFocusedCell = function () {
    return this.focusController.getFocusedCell();
  };
  GridApi.prototype.clearFocusedCell = function () {
    return this.focusController.clearFocusedCell();
  };
  GridApi.prototype.setFocusedCell = function (rowIndex, colKey, floating) {
    this.focusController.setFocusedCell(rowIndex, colKey, floating, true);
  };
  GridApi.prototype.setSuppressRowDrag = function (value) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_ROW_DRAG, value);
  };
  GridApi.prototype.setSuppressMoveWhenRowDragging = function (value) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_MOVE_WHEN_ROW_DRAG, value);
  };
  GridApi.prototype.setSuppressRowClickSelection = function (value) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_ROW_CLICK_SELECTION, value);
  };
  GridApi.prototype.addRowDropZone = function (params) {
    this.gridBodyCon.getRowDragFeature().addRowDropZone(params);
  };
  GridApi.prototype.removeRowDropZone = function (params) {
    var activeDropTarget = this.dragAndDropService.findExternalZone(params);
    if (activeDropTarget) {
      this.dragAndDropService.removeDropTarget(activeDropTarget);
    }
  };
  GridApi.prototype.getRowDropZoneParams = function (events) {
    return this.gridBodyCon.getRowDragFeature().getRowDropZone(events);
  };
  GridApi.prototype.setHeaderHeight = function (headerHeight) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_HEADER_HEIGHT, headerHeight);
  };
  GridApi.prototype.setDomLayout = function (domLayout) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_DOM_LAYOUT, domLayout);
  };
  GridApi.prototype.setEnableCellTextSelection = function (selectable) {
    this.gridBodyCon.setCellTextSelection(selectable);
  };
  GridApi.prototype.setFillHandleDirection = function (direction) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_FILL_HANDLE_DIRECTION, direction);
  };
  GridApi.prototype.setGroupHeaderHeight = function (headerHeight) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, headerHeight);
  };
  GridApi.prototype.setFloatingFiltersHeight = function (headerHeight) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, headerHeight);
  };
  GridApi.prototype.setPivotGroupHeaderHeight = function (headerHeight) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, headerHeight);
  };
  GridApi.prototype.setIsExternalFilterPresent = function (isExternalFilterPresentFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_EXTERNAL_FILTER_PRESENT, isExternalFilterPresentFunc);
  };
  GridApi.prototype.setDoesExternalFilterPass = function (doesExternalFilterPassFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_DOES_EXTERNAL_FILTER_PASS, doesExternalFilterPassFunc);
  };
  GridApi.prototype.setNavigateToNextCell = function (navigateToNextCellFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_NAVIGATE_TO_NEXT_CELL, navigateToNextCellFunc);
  };
  GridApi.prototype.setTabToNextCell = function (tabToNextCellFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_TAB_TO_NEXT_CELL, tabToNextCellFunc);
  };
  GridApi.prototype.setTabToNextHeader = function (tabToNextHeaderFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_TAB_TO_NEXT_HEADER, tabToNextHeaderFunc);
  };
  GridApi.prototype.setNavigateToNextHeader = function (navigateToNextHeaderFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_NAVIGATE_TO_NEXT_HEADER, navigateToNextHeaderFunc);
  };
  GridApi.prototype.setGroupRowAggNodes = function (groupRowAggNodesFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_ROW_AGG_NODES, groupRowAggNodesFunc);
  };
  GridApi.prototype.setGetBusinessKeyForNode = function (getBusinessKeyForNodeFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_BUSINESS_KEY_FOR_NODE, getBusinessKeyForNodeFunc);
  };
  GridApi.prototype.setGetChildCount = function (getChildCountFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_CHILD_COUNT, getChildCountFunc);
  };
  GridApi.prototype.setProcessRowPostCreate = function (processRowPostCreateFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_ROW_POST_CREATE, processRowPostCreateFunc);
  };
  GridApi.prototype.setGetRowNodeId = function (getRowNodeIdFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_ROW_NODE_ID, getRowNodeIdFunc);
  };
  GridApi.prototype.setGetRowClass = function (rowClassFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_ROW_CLASS, rowClassFunc);
  };
  GridApi.prototype.setIsFullWidthCell = function (isFullWidthCellFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_FULL_WIDTH_CELL, isFullWidthCellFunc);
  };
  GridApi.prototype.setIsRowSelectable = function (isRowSelectableFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_ROW_SELECTABLE, isRowSelectableFunc);
  };
  GridApi.prototype.setIsRowMaster = function (isRowMasterFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_ROW_MASTER, isRowMasterFunc);
  };
  GridApi.prototype.setPostSort = function (postSortFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_POST_SORT, postSortFunc);
  };
  GridApi.prototype.setGetDocument = function (getDocumentFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_DOCUMENT, getDocumentFunc);
  };
  GridApi.prototype.setGetContextMenuItems = function (getContextMenuItemsFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_CONTEXT_MENU_ITEMS, getContextMenuItemsFunc);
  };
  GridApi.prototype.setGetMainMenuItems = function (getMainMenuItemsFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_MAIN_MENU_ITEMS, getMainMenuItemsFunc);
  };
  GridApi.prototype.setProcessCellForClipboard = function (processCellForClipboardFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_CELL_FOR_CLIPBOARD, processCellForClipboardFunc);
  };
  GridApi.prototype.setSendToClipboard = function (sendToClipboardFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SEND_TO_CLIPBOARD, sendToClipboardFunc);
  };
  GridApi.prototype.setProcessCellFromClipboard = function (processCellFromClipboardFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_CELL_FROM_CLIPBOARD, processCellFromClipboardFunc);
  };
  GridApi.prototype.setProcessSecondaryColDef = function (processSecondaryColDefFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_TO_SECONDARY_COLDEF, processSecondaryColDefFunc);
  };
  GridApi.prototype.setProcessSecondaryColGroupDef = function (processSecondaryColGroupDefFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_SECONDARY_COL_GROUP_DEF, processSecondaryColGroupDefFunc);
  };
  GridApi.prototype.setPostProcessPopup = function (postProcessPopupFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_POST_PROCESS_POPUP, postProcessPopupFunc);
  };
  GridApi.prototype.setDefaultGroupSortComparator = function (defaultGroupSortComparatorFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_DEFAULT_GROUP_SORT_COMPARATOR, defaultGroupSortComparatorFunc);
  };
  GridApi.prototype.setProcessChartOptions = function (processChartOptionsFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_CHART_OPTIONS, processChartOptionsFunc);
  };
  GridApi.prototype.setGetChartToolbarItems = function (getChartToolbarItemsFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_CHART_TOOLBAR_ITEMS, getChartToolbarItemsFunc);
  };
  GridApi.prototype.setPaginationNumberFormatter = function (paginationNumberFormatterFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PAGINATION_NUMBER_FORMATTER, paginationNumberFormatterFunc);
  };
  GridApi.prototype.setGetServerSideStoreParams = function (getServerSideStoreParamsFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_SERVER_SIDE_STORE_PARAMS, getServerSideStoreParamsFunc);
  };
  GridApi.prototype.setIsServerSideGroupOpenByDefault = function (isServerSideGroupOpenByDefaultFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_SERVER_SIDE_GROUPS_OPEN_BY_DEFAULT, isServerSideGroupOpenByDefaultFunc);
  };
  GridApi.prototype.setIsApplyServerSideTransaction = function (isApplyServerSideTransactionFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_APPLY_SERVER_SIDE_TRANSACTION, isApplyServerSideTransactionFunc);
  };
  GridApi.prototype.setIsServerSideGroup = function (isServerSideGroupFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_SERVER_SIDE_GROUP, isServerSideGroupFunc);
  };
  GridApi.prototype.setGetServerSideGroupKey = function (getServerSideGroupKeyFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_SERVER_SIDE_GROUP_KEY, getServerSideGroupKeyFunc);
  };
  GridApi.prototype.setGetRowStyle = function (rowStyleFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_ROW_STYLE, rowStyleFunc);
  };
  GridApi.prototype.setGetRowHeight = function (rowHeightFunc) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_ROW_HEIGHT, rowHeightFunc);
  };
  GridApi.prototype.setPivotHeaderHeight = function (headerHeight) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, headerHeight);
  };
  GridApi.prototype.isSideBarVisible = function () {
    return this.sideBarComp ? this.sideBarComp.isDisplayed() : false;
  };
  GridApi.prototype.setSideBarVisible = function (show) {
    if (!this.sideBarComp) {
      if (show) {
        console.warn('AG Grid: sideBar is not loaded');
      }
      return;
    }
    this.sideBarComp.setDisplayed(show);
  };
  GridApi.prototype.setSideBarPosition = function (position) {
    if (!this.sideBarComp) {
      console.warn('AG Grid: sideBar is not loaded');
      return;
    }
    this.sideBarComp.setSideBarPosition(position);
  };
  GridApi.prototype.openToolPanel = function (key) {
    if (!this.sideBarComp) {
      console.warn('AG Grid: toolPanel is only available in AG Grid Enterprise');
      return;
    }
    this.sideBarComp.openToolPanel(key);
  };
  GridApi.prototype.closeToolPanel = function () {
    if (!this.sideBarComp) {
      console.warn('AG Grid: toolPanel is only available in AG Grid Enterprise');
      return;
    }
    this.sideBarComp.close();
  };
  GridApi.prototype.getOpenedToolPanel = function () {
    return this.sideBarComp ? this.sideBarComp.openedItem() : null;
  };
  GridApi.prototype.getSideBar = function () {
    return this.gridOptionsWrapper.getSideBar();
  };
  GridApi.prototype.setSideBar = function (def) {
    this.gridOptionsWrapper.setProperty('sideBar', SideBarDefParser.parse(def));
  };
  GridApi.prototype.setSuppressClipboardPaste = function (value) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_CLIPBOARD_PASTE, value);
  };
  GridApi.prototype.isToolPanelShowing = function () {
    return this.sideBarComp.isToolPanelShowing();
  };
  GridApi.prototype.doLayout = function () {
    var message = "AG Grid - since version 25.1, doLayout was taken out, as it's not needed. The grid responds to grid size changes automatically";
    doOnce(function () {
      return console.warn(message);
    }, 'doLayoutDeprecated');
  };
  GridApi.prototype.resetRowHeights = function () {
    if (exists(this.clientSideRowModel)) {
      this.clientSideRowModel.resetRowHeights();
    }
  };
  GridApi.prototype.setGroupRemoveSingleChildren = function (value) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, value);
  };
  GridApi.prototype.setGroupRemoveLowestSingleChildren = function (value) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, value);
  };
  GridApi.prototype.onRowHeightChanged = function () {
    if (this.clientSideRowModel) {
      this.clientSideRowModel.onRowHeightChanged();
    } else if (this.serverSideRowModel) {
      this.serverSideRowModel.onRowHeightChanged();
    }
  };
  GridApi.prototype.getValue = function (colKey, rowNode) {
    var column = this.columnController.getPrimaryColumn(colKey);
    if (missing(column)) {
      column = this.columnController.getGridColumn(colKey);
    }
    if (missing(column)) {
      return null;
    }
    return this.valueService.getValue(column, rowNode);
  };
  GridApi.prototype.addEventListener = function (eventType, listener) {
    var async = this.gridOptionsWrapper.useAsyncEvents();
    this.eventService.addEventListener(eventType, listener, async);
  };
  GridApi.prototype.addGlobalListener = function (listener) {
    var async = this.gridOptionsWrapper.useAsyncEvents();
    this.eventService.addGlobalListener(listener, async);
  };
  GridApi.prototype.removeEventListener = function (eventType, listener) {
    var async = this.gridOptionsWrapper.useAsyncEvents();
    this.eventService.removeEventListener(eventType, listener, async);
  };
  GridApi.prototype.removeGlobalListener = function (listener) {
    var async = this.gridOptionsWrapper.useAsyncEvents();
    this.eventService.removeGlobalListener(listener, async);
  };
  GridApi.prototype.dispatchEvent = function (event) {
    this.eventService.dispatchEvent(event);
  };
  GridApi.prototype.destroy = function () {
    // this is needed as GridAPI is a bean, and GridAPI.destroy() is called as part
    // of context.destroy(). so we need to stop the infinite loop.
    if (this.destroyCalled) {
      return;
    }
    this.destroyCalled = true;
    // destroy the UI first (as they use the services)
    this.gridCompController.destroyGridUi();
    // destroy the services
    this.context.destroy();
  };
  GridApi.prototype.cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid = function () {
    // some users were raising support issues with regards memory leaks. the problem was the customers applications
    // were keeping references to the API. trying to educate them all would be difficult, easier to just remove
    // all references in teh API so at least the core grid can be garbage collected.
    //
    // wait about 100ms before clearing down the references, in case user has some cleanup to do,
    // and needs to deference the API first
    setTimeout(removeAllReferences.bind(window, this, 'Grid API'), 100);
  };
  GridApi.prototype.warnIfDestroyed = function (methodName) {
    if (this.destroyCalled) {
      console.warn("AG Grid: Grid API method " + methodName + " was called on a grid that was destroyed.");
    }
    return this.destroyCalled;
  };
  GridApi.prototype.resetQuickFilter = function () {
    if (this.warnIfDestroyed('resetQuickFilter')) {
      return;
    }
    this.rowModel.forEachNode(function (node) {
      return node.quickFilterAggregateText = null;
    });
  };
  GridApi.prototype.getRangeSelections = function () {
    console.warn("AG Grid: in v20.1.x, api.getRangeSelections() is gone, please use getCellRanges() instead.\n        We had to change how cell selections works a small bit to allow charting to integrate. The return type of\n        getCellRanges() is a bit different, please check the AG Grid documentation.");
    return null;
  };
  GridApi.prototype.getCellRanges = function () {
    if (this.rangeController) {
      return this.rangeController.getCellRanges();
    }
    console.warn('AG Grid: cell range selection is only available in AG Grid Enterprise');
    return null;
  };
  GridApi.prototype.camelCaseToHumanReadable = function (camelCase) {
    return camelCaseToHumanText(camelCase);
  };
  GridApi.prototype.addRangeSelection = function (deprecatedNoLongerUsed) {
    console.warn('AG Grid: As of version 21.x, range selection changed slightly to allow charting integration. Please call api.addCellRange() instead of api.addRangeSelection()');
  };
  GridApi.prototype.addCellRange = function (params) {
    if (!this.rangeController) {
      console.warn('AG Grid: cell range selection is only available in AG Grid Enterprise');
    }
    this.rangeController.addCellRange(params);
  };
  GridApi.prototype.clearRangeSelection = function () {
    if (!this.rangeController) {
      console.warn('AG Grid: cell range selection is only available in AG Grid Enterprise');
    }
    this.rangeController.removeAllCellRanges();
  };
  GridApi.prototype.undoCellEditing = function () {
    this.undoRedoService.undo();
  };
  GridApi.prototype.redoCellEditing = function () {
    this.undoRedoService.redo();
  };
  GridApi.prototype.getCurrentUndoSize = function () {
    return this.undoRedoService.getCurrentUndoStackSize();
  };
  GridApi.prototype.getCurrentRedoSize = function () {
    return this.undoRedoService.getCurrentRedoStackSize();
  };
  GridApi.prototype.getChartModels = function () {
    if (ModuleRegistry.assertRegistered(exports.ModuleNames.RangeSelectionModule, 'api.getChartModels') && ModuleRegistry.assertRegistered(exports.ModuleNames.GridChartsModule, 'api.getChartModels')) {
      return this.chartService.getChartModels();
    }
  };
  GridApi.prototype.createRangeChart = function (params) {
    if (ModuleRegistry.assertRegistered(exports.ModuleNames.RangeSelectionModule, 'api.createRangeChart') && ModuleRegistry.assertRegistered(exports.ModuleNames.GridChartsModule, 'api.createRangeChart')) {
      return this.chartService.createRangeChart(params);
    }
  };
  GridApi.prototype.createCrossFilterChart = function (params) {
    if (ModuleRegistry.assertRegistered(exports.ModuleNames.RangeSelectionModule, 'api.createCrossFilterChart') && ModuleRegistry.assertRegistered(exports.ModuleNames.GridChartsModule, 'api.createCrossFilterChart')) {
      return this.chartService.createCrossFilterChart(params);
    }
  };
  GridApi.prototype.restoreChart = function (chartModel, chartContainer) {
    if (ModuleRegistry.assertRegistered(exports.ModuleNames.RangeSelectionModule, 'api.restoreChart') && ModuleRegistry.assertRegistered(exports.ModuleNames.GridChartsModule, 'api.restoreChart')) {
      return this.chartService.restoreChart(chartModel, chartContainer);
    }
  };
  GridApi.prototype.createPivotChart = function (params) {
    if (ModuleRegistry.assertRegistered(exports.ModuleNames.RangeSelectionModule, 'api.createPivotChart') && ModuleRegistry.assertRegistered(exports.ModuleNames.GridChartsModule, 'api.createPivotChart')) {
      return this.chartService.createPivotChart(params);
    }
  };
  GridApi.prototype.copySelectedRowsToClipboard = function (includeHeader, columnKeys) {
    if (!this.clipboardService) {
      console.warn('AG Grid: clipboard is only available in AG Grid Enterprise');
    }
    this.clipboardService.copySelectedRowsToClipboard(includeHeader, columnKeys);
  };
  GridApi.prototype.copySelectedRangeToClipboard = function (includeHeader) {
    if (!this.clipboardService) {
      console.warn('AG Grid: clipboard is only available in AG Grid Enterprise');
    }
    this.clipboardService.copySelectedRangeToClipboard(includeHeader);
  };
  GridApi.prototype.copySelectedRangeDown = function () {
    if (!this.clipboardService) {
      console.warn('AG Grid: clipboard is only available in AG Grid Enterprise');
    }
    this.clipboardService.copyRangeDown();
  };
  GridApi.prototype.showColumnMenuAfterButtonClick = function (colKey, buttonElement) {
    // use grid column so works with pivot mode
    var column = this.columnController.getGridColumn(colKey);
    this.menuFactory.showMenuAfterButtonClick(column, buttonElement);
  };
  GridApi.prototype.showColumnMenuAfterMouseClick = function (colKey, mouseEvent) {
    // use grid column so works with pivot mode
    var column = this.columnController.getGridColumn(colKey);
    if (!column) {
      column = this.columnController.getPrimaryColumn(colKey);
    }
    if (!column) {
      console.error("AG Grid: column '" + colKey + "' not found");
      return;
    }
    this.menuFactory.showMenuAfterMouseEvent(column, mouseEvent);
  };
  GridApi.prototype.hidePopupMenu = function () {
    // hide the context menu if in enterprise
    if (this.contextMenuFactory) {
      this.contextMenuFactory.hideActiveMenu();
    }
    // and hide the column menu always
    this.menuFactory.hideActiveMenu();
  };
  GridApi.prototype.setPopupParent = function (ePopupParent) {
    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_POPUP_PARENT, ePopupParent);
  };
  GridApi.prototype.tabToNextCell = function () {
    return this.rowRenderer.tabToNextCell(false);
  };
  GridApi.prototype.tabToPreviousCell = function () {
    return this.rowRenderer.tabToNextCell(true);
  };
  GridApi.prototype.getCellRendererInstances = function (params) {
    if (params === void 0) {
      params = {};
    }
    return this.rowRenderer.getCellRendererInstances(params);
  };
  GridApi.prototype.getCellEditorInstances = function (params) {
    if (params === void 0) {
      params = {};
    }
    return this.rowRenderer.getCellEditorInstances(params);
  };
  GridApi.prototype.getEditingCells = function () {
    return this.rowRenderer.getEditingCells();
  };
  GridApi.prototype.stopEditing = function (cancel) {
    if (cancel === void 0) {
      cancel = false;
    }
    this.rowRenderer.stopEditing(cancel);
  };
  GridApi.prototype.startEditingCell = function (params) {
    var column = this.columnController.getGridColumn(params.colKey);
    if (!column) {
      console.warn("AG Grid: no column found for " + params.colKey);
      return;
    }
    var cellPosition = {
      rowIndex: params.rowIndex,
      rowPinned: params.rowPinned || null,
      column: column
    };
    var notPinned = missing(params.rowPinned);
    if (notPinned) {
      this.gridBodyCon.getScrollFeature().ensureIndexVisible(params.rowIndex);
    }
    this.rowRenderer.startEditingCell(cellPosition, params.keyPress, params.charPress);
  };
  GridApi.prototype.addAggFunc = function (key, aggFunc) {
    if (this.aggFuncService) {
      this.aggFuncService.addAggFunc(key, aggFunc);
    }
  };
  GridApi.prototype.addAggFuncs = function (aggFuncs) {
    if (this.aggFuncService) {
      this.aggFuncService.addAggFuncs(aggFuncs);
    }
  };
  GridApi.prototype.clearAggFuncs = function () {
    if (this.aggFuncService) {
      this.aggFuncService.clear();
    }
  };
  GridApi.prototype.applyServerSideTransaction = function (transaction) {
    if (!this.serverSideTransactionManager) {
      console.warn('AG Grid: Cannot apply Server Side Transaction if not using the Server Side Row Model.');
      return;
    }
    return this.serverSideTransactionManager.applyTransaction(transaction);
  };
  GridApi.prototype.applyServerSideTransactionAsync = function (transaction, callback) {
    if (!this.serverSideTransactionManager) {
      console.warn('AG Grid: Cannot apply Server Side Transaction if not using the Server Side Row Model.');
      return;
    }
    return this.serverSideTransactionManager.applyTransactionAsync(transaction, callback);
  };
  GridApi.prototype.retryServerSideLoads = function () {
    if (!this.serverSideRowModel) {
      console.warn('AG Grid: API retryServerSideLoads() can only be used when using Server-Side Row Model.');
      return;
    }
    this.serverSideRowModel.retryLoads();
  };
  GridApi.prototype.flushServerSideAsyncTransactions = function () {
    if (!this.serverSideTransactionManager) {
      console.warn('AG Grid: Cannot flush Server Side Transaction if not using the Server Side Row Model.');
      return;
    }
    return this.serverSideTransactionManager.flushAsyncTransactions();
  };
  GridApi.prototype.applyTransaction = function (rowDataTransaction) {
    if (!this.clientSideRowModel) {
      console.error('AG Grid: updateRowData() only works with ClientSideRowModel. Working with InfiniteRowModel was deprecated in v23.1 and removed in v24.1');
      return;
    }
    var res = this.clientSideRowModel.updateRowData(rowDataTransaction);
    // refresh all the full width rows
    this.rowRenderer.refreshFullWidthRows(res.update);
    // do change detection for all present cells
    if (!this.gridOptionsWrapper.isSuppressChangeDetection()) {
      this.rowRenderer.refreshCells();
    }
    return res;
  };
  /** @deprecated */
  GridApi.prototype.updateRowData = function (rowDataTransaction) {
    var message = 'AG Grid: as of v23.1, grid API updateRowData(transaction) is now called applyTransaction(transaction). updateRowData is deprecated and will be removed in a future major release.';
    doOnce(function () {
      return console.warn(message);
    }, 'updateRowData deprecated');
    return this.applyTransaction(rowDataTransaction);
  };
  GridApi.prototype.applyTransactionAsync = function (rowDataTransaction, callback) {
    if (!this.clientSideRowModel) {
      console.error('AG Grid: api.applyTransactionAsync() only works with ClientSideRowModel.');
      return;
    }
    this.clientSideRowModel.batchUpdateRowData(rowDataTransaction, callback);
  };
  GridApi.prototype.flushAsyncTransactions = function () {
    if (!this.clientSideRowModel) {
      console.error('AG Grid: api.applyTransactionAsync() only works with ClientSideRowModel.');
      return;
    }
    this.clientSideRowModel.flushAsyncTransactions();
  };
  /** @deprecated */
  GridApi.prototype.batchUpdateRowData = function (rowDataTransaction, callback) {
    var message = 'AG Grid: as of v23.1, grid API batchUpdateRowData(transaction, callback) is now called applyTransactionAsync(transaction, callback). batchUpdateRowData is deprecated and will be removed in a future major release.';
    doOnce(function () {
      return console.warn(message);
    }, 'batchUpdateRowData deprecated');
    this.applyTransactionAsync(rowDataTransaction, callback);
  };
  GridApi.prototype.insertItemsAtIndex = function (index, items, skipRefresh) {
    console.warn('AG Grid: insertItemsAtIndex() is deprecated, use updateRowData(transaction) instead.');
    this.updateRowData({
      add: items,
      addIndex: index,
      update: null,
      remove: null
    });
  };
  GridApi.prototype.removeItems = function (rowNodes, skipRefresh) {
    console.warn('AG Grid: removeItems() is deprecated, use updateRowData(transaction) instead.');
    var dataToRemove = rowNodes.map(function (rowNode) {
      return rowNode.data;
    });
    this.updateRowData({
      add: null,
      addIndex: null,
      update: null,
      remove: dataToRemove
    });
  };
  GridApi.prototype.addItems = function (items, skipRefresh) {
    console.warn('AG Grid: addItems() is deprecated, use updateRowData(transaction) instead.');
    this.updateRowData({
      add: items,
      addIndex: null,
      update: null,
      remove: null
    });
  };
  GridApi.prototype.refreshVirtualPageCache = function () {
    console.warn('AG Grid: refreshVirtualPageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead');
    this.refreshInfiniteCache();
  };
  GridApi.prototype.refreshInfinitePageCache = function () {
    console.warn('AG Grid: refreshInfinitePageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead');
    this.refreshInfiniteCache();
  };
  GridApi.prototype.refreshInfiniteCache = function () {
    if (this.infiniteRowModel) {
      this.infiniteRowModel.refreshCache();
    } else {
      console.warn("AG Grid: api.refreshInfiniteCache is only available when rowModelType='infinite'.");
    }
  };
  GridApi.prototype.purgeVirtualPageCache = function () {
    console.warn('AG Grid: purgeVirtualPageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead');
    this.purgeInfinitePageCache();
  };
  GridApi.prototype.purgeInfinitePageCache = function () {
    console.warn('AG Grid: purgeInfinitePageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead');
    this.purgeInfiniteCache();
  };
  GridApi.prototype.purgeInfiniteCache = function () {
    if (this.infiniteRowModel) {
      this.infiniteRowModel.purgeCache();
    } else {
      console.warn("AG Grid: api.purgeInfiniteCache is only available when rowModelType='infinite'.");
    }
  };
  /** @deprecated */
  GridApi.prototype.purgeEnterpriseCache = function (route) {
    console.warn("ag-grid: since version 18.x, api.purgeEnterpriseCache() should be replaced with api.purgeServerSideCache()");
    this.purgeServerSideCache(route);
  };
  /** @deprecated */
  GridApi.prototype.purgeServerSideCache = function (route) {
    if (route === void 0) {
      route = [];
    }
    if (this.serverSideRowModel) {
      console.warn("AG Grid: since v25.0, api.purgeServerSideCache is deprecated. Please use api.refreshServerSideStore({purge: true}) instead.");
      this.refreshServerSideStore({
        route: route,
        purge: true
      });
    } else {
      console.warn("AG Grid: api.purgeServerSideCache is only available when rowModelType='serverSide'.");
    }
  };
  GridApi.prototype.refreshServerSideStore = function (params) {
    if (this.serverSideRowModel) {
      this.serverSideRowModel.refreshStore(params);
    } else {
      console.warn("AG Grid: api.refreshServerSideStore is only available when rowModelType='serverSide'.");
    }
  };
  GridApi.prototype.getServerSideStoreState = function () {
    if (this.serverSideRowModel) {
      return this.serverSideRowModel.getStoreState();
    } else {
      console.warn("AG Grid: api.getServerSideStoreState is only available when rowModelType='serverSide'.");
      return [];
    }
  };
  GridApi.prototype.getVirtualRowCount = function () {
    console.warn('AG Grid: getVirtualRowCount() is now called getInfiniteRowCount(), please call getInfiniteRowCount() instead');
    return this.getInfiniteRowCount();
  };
  GridApi.prototype.getInfiniteRowCount = function () {
    if (this.infiniteRowModel) {
      return this.infiniteRowModel.getRowCount();
    } else {
      console.warn("AG Grid: api.getVirtualRowCount is only available when rowModelType='virtual'.");
    }
  };
  GridApi.prototype.isMaxRowFound = function () {
    console.warn("AG Grid: api.isLastRowIndexKnown is deprecated, please use api.isLastRowIndexKnown()");
    return this.isLastRowIndexKnown();
  };
  GridApi.prototype.isLastRowIndexKnown = function () {
    if (this.infiniteRowModel) {
      return this.infiniteRowModel.isLastRowIndexKnown();
    } else {
      console.warn("AG Grid: api.isMaxRowFound is only available when rowModelType='virtual'.");
    }
  };
  GridApi.prototype.setVirtualRowCount = function (rowCount, maxRowFound) {
    console.warn('AG Grid: setVirtualRowCount() is now called setInfiniteRowCount(), please call setInfiniteRowCount() instead');
    this.setRowCount(rowCount, maxRowFound);
  };
  GridApi.prototype.setInfiniteRowCount = function (rowCount, maxRowFound) {
    console.warn('AG Grid: setInfiniteRowCount() is now called setRowCount(), please call setRowCount() instead');
    this.setRowCount(rowCount, maxRowFound);
  };
  GridApi.prototype.setRowCount = function (rowCount, maxRowFound) {
    if (this.infiniteRowModel) {
      this.infiniteRowModel.setRowCount(rowCount, maxRowFound);
    } else {
      console.warn("AG Grid: api.setRowCount is only available for Infinite Row Model.");
    }
  };
  GridApi.prototype.getVirtualPageState = function () {
    console.warn('AG Grid: getVirtualPageState() is now called getCacheBlockState(), please call getCacheBlockState() instead');
    return this.getCacheBlockState();
  };
  GridApi.prototype.getInfinitePageState = function () {
    console.warn('AG Grid: getInfinitePageState() is now called getCacheBlockState(), please call getCacheBlockState() instead');
    return this.getCacheBlockState();
  };
  GridApi.prototype.getCacheBlockState = function () {
    return this.rowNodeBlockLoader.getBlockState();
  };
  GridApi.prototype.checkGridSize = function () {
    console.warn("in AG Grid v25.2.0, checkGridSize() was removed, as it was legacy and didn't do anything uesful.");
  };
  GridApi.prototype.getFirstRenderedRow = function () {
    console.warn('in AG Grid v12, getFirstRenderedRow() was renamed to getFirstDisplayedRow()');
    return this.getFirstDisplayedRow();
  };
  GridApi.prototype.getFirstDisplayedRow = function () {
    return this.rowRenderer.getFirstVirtualRenderedRow();
  };
  GridApi.prototype.getLastRenderedRow = function () {
    console.warn('in AG Grid v12, getLastRenderedRow() was renamed to getLastDisplayedRow()');
    return this.getLastDisplayedRow();
  };
  GridApi.prototype.getLastDisplayedRow = function () {
    return this.rowRenderer.getLastVirtualRenderedRow();
  };
  GridApi.prototype.getDisplayedRowAtIndex = function (index) {
    return this.rowModel.getRow(index);
  };
  GridApi.prototype.getDisplayedRowCount = function () {
    return this.rowModel.getRowCount();
  };
  GridApi.prototype.paginationIsLastPageFound = function () {
    return this.paginationProxy.isLastPageFound();
  };
  GridApi.prototype.paginationGetPageSize = function () {
    return this.paginationProxy.getPageSize();
  };
  GridApi.prototype.paginationSetPageSize = function (size) {
    this.gridOptionsWrapper.setProperty('paginationPageSize', size);
  };
  GridApi.prototype.paginationGetCurrentPage = function () {
    return this.paginationProxy.getCurrentPage();
  };
  GridApi.prototype.paginationGetTotalPages = function () {
    return this.paginationProxy.getTotalPages();
  };
  GridApi.prototype.paginationGetRowCount = function () {
    return this.paginationProxy.getMasterRowCount();
  };
  GridApi.prototype.paginationGoToNextPage = function () {
    this.paginationProxy.goToNextPage();
  };
  GridApi.prototype.paginationGoToPreviousPage = function () {
    this.paginationProxy.goToPreviousPage();
  };
  GridApi.prototype.paginationGoToFirstPage = function () {
    this.paginationProxy.goToFirstPage();
  };
  GridApi.prototype.paginationGoToLastPage = function () {
    this.paginationProxy.goToLastPage();
  };
  GridApi.prototype.paginationGoToPage = function (page) {
    this.paginationProxy.goToPage(page);
  };
  __decorate$17([Optional('immutableService')], GridApi.prototype, "immutableService", void 0);
  __decorate$17([Optional('csvCreator')], GridApi.prototype, "csvCreator", void 0);
  __decorate$17([Optional('excelCreator')], GridApi.prototype, "excelCreator", void 0);
  __decorate$17([Autowired('rowRenderer')], GridApi.prototype, "rowRenderer", void 0);
  __decorate$17([Autowired('filterManager')], GridApi.prototype, "filterManager", void 0);
  __decorate$17([Autowired('columnController')], GridApi.prototype, "columnController", void 0);
  __decorate$17([Autowired('selectionController')], GridApi.prototype, "selectionController", void 0);
  __decorate$17([Autowired('gridOptionsWrapper')], GridApi.prototype, "gridOptionsWrapper", void 0);
  __decorate$17([Autowired('valueService')], GridApi.prototype, "valueService", void 0);
  __decorate$17([Autowired('alignedGridsService')], GridApi.prototype, "alignedGridsService", void 0);
  __decorate$17([Autowired('eventService')], GridApi.prototype, "eventService", void 0);
  __decorate$17([Autowired('pinnedRowModel')], GridApi.prototype, "pinnedRowModel", void 0);
  __decorate$17([Autowired('context')], GridApi.prototype, "context", void 0);
  __decorate$17([Autowired('rowModel')], GridApi.prototype, "rowModel", void 0);
  __decorate$17([Autowired('sortController')], GridApi.prototype, "sortController", void 0);
  __decorate$17([Autowired('paginationProxy')], GridApi.prototype, "paginationProxy", void 0);
  __decorate$17([Autowired('focusController')], GridApi.prototype, "focusController", void 0);
  __decorate$17([Autowired('dragAndDropService')], GridApi.prototype, "dragAndDropService", void 0);
  __decorate$17([Optional('rangeController')], GridApi.prototype, "rangeController", void 0);
  __decorate$17([Optional('clipboardService')], GridApi.prototype, "clipboardService", void 0);
  __decorate$17([Optional('aggFuncService')], GridApi.prototype, "aggFuncService", void 0);
  __decorate$17([Autowired('menuFactory')], GridApi.prototype, "menuFactory", void 0);
  __decorate$17([Optional('contextMenuFactory')], GridApi.prototype, "contextMenuFactory", void 0);
  __decorate$17([Autowired('valueCache')], GridApi.prototype, "valueCache", void 0);
  __decorate$17([Autowired('animationFrameService')], GridApi.prototype, "animationFrameService", void 0);
  __decorate$17([Optional('statusBarService')], GridApi.prototype, "statusBarService", void 0);
  __decorate$17([Optional('chartService')], GridApi.prototype, "chartService", void 0);
  __decorate$17([Optional('undoRedoService')], GridApi.prototype, "undoRedoService", void 0);
  __decorate$17([Optional('headlessService')], GridApi.prototype, "headlessService", void 0);
  __decorate$17([Optional('rowNodeBlockLoader')], GridApi.prototype, "rowNodeBlockLoader", void 0);
  __decorate$17([Optional('ssrmTransactionManager')], GridApi.prototype, "serverSideTransactionManager", void 0);
  __decorate$17([Optional('controllersService')], GridApi.prototype, "controllersService", void 0);
  __decorate$17([PostConstruct], GridApi.prototype, "init", null);
  __decorate$17([PreDestroy], GridApi.prototype, "cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid", null);
  GridApi = __decorate$17([Bean('gridApi')], GridApi);
  return GridApi;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1e =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$18 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param$6 =  false || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};
var ExpressionService = /** @class */function (_super) {
  __extends$1e(ExpressionService, _super);
  function ExpressionService() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.expressionToFunctionCache = {};
    return _this;
  }
  ExpressionService.prototype.setBeans = function (loggerFactory) {
    this.logger = loggerFactory.create('ExpressionService');
  };
  ExpressionService.prototype.evaluate = function (expressionOrFunc, params) {
    if (typeof expressionOrFunc === 'function') {
      // valueGetter is a function, so just call it
      var func = expressionOrFunc;
      return func(params);
    } else if (typeof expressionOrFunc === 'string') {
      // valueGetter is an expression, so execute the expression
      var expression = expressionOrFunc;
      return this.evaluateExpression(expression, params);
    } else {
      console.error('AG Grid: value should be either a string or a function', expressionOrFunc);
    }
  };
  ExpressionService.prototype.evaluateExpression = function (expression, params) {
    try {
      var javaScriptFunction = this.createExpressionFunction(expression);
      // the params don't have all these values, rather we add every possible
      // value a params can have, which makes whatever is in the params available.
      var result = javaScriptFunction(params.value, params.context, params.oldValue, params.newValue, params.value, params.node, params.data, params.colDef, params.rowIndex, params.api, params.columnApi, params.getValue, params.column, params.columnGroup);
      return result;
    } catch (e) {
      // the expression failed, which can happen, as it's the client that
      // provides the expression. so print a nice message
      // tslint:disable-next-line
      console.log('Processing of the expression failed');
      // tslint:disable-next-line
      console.log('Expression = ' + expression);
      // tslint:disable-next-line
      console.log('Params =', params);
      // tslint:disable-next-line
      console.log('Exception = ' + e);
      return null;
    }
  };
  ExpressionService.prototype.createExpressionFunction = function (expression) {
    // check cache first
    if (this.expressionToFunctionCache[expression]) {
      return this.expressionToFunctionCache[expression];
    }
    // if not found in cache, return the function
    var functionBody = this.createFunctionBody(expression);
    var theFunction = new Function('x, ctx, oldValue, newValue, value, node, data, colDef, rowIndex, api, columnApi, getValue, column, columnGroup', functionBody);
    // store in cache
    this.expressionToFunctionCache[expression] = theFunction;
    return theFunction;
  };
  ExpressionService.prototype.createFunctionBody = function (expression) {
    // if the expression has the 'return' word in it, then use as is,
    // if not, then wrap it with return and ';' to make a function
    if (expression.indexOf('return') >= 0) {
      return expression;
    } else {
      return 'return ' + expression + ';';
    }
  };
  __decorate$18([__param$6(0, Qualifier('loggerFactory'))], ExpressionService.prototype, "setBeans", null);
  ExpressionService = __decorate$18([Bean('expressionService')], ExpressionService);
  return ExpressionService;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1f =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$19 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TemplateService = /** @class */function (_super) {
  __extends$1f(TemplateService, _super);
  function TemplateService() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.templateCache = {};
    _this.waitingCallbacks = {};
    return _this;
  }
  // returns the template if it is loaded, or null if it is not loaded
  // but will call the callback when it is loaded
  TemplateService.prototype.getTemplate = function (url, callback) {
    var templateFromCache = this.templateCache[url];
    if (templateFromCache) {
      return templateFromCache;
    }
    var callbackList = this.waitingCallbacks[url];
    var that = this;
    if (!callbackList) {
      // first time this was called, so need a new list for callbacks
      callbackList = [];
      this.waitingCallbacks[url] = callbackList;
      // and also need to do the http request
      var client = new XMLHttpRequest();
      client.onload = function () {
        that.handleHttpResult(this, url);
      };
      client.open("GET", url);
      client.send();
    }
    // add this callback
    if (callback) {
      callbackList.push(callback);
    }
    // caller needs to wait for template to load, so return null
    return null;
  };
  TemplateService.prototype.handleHttpResult = function (httpResult, url) {
    if (httpResult.status !== 200 || httpResult.response === null) {
      console.warn("Unable to get template error " + httpResult.status + " - " + url);
      return;
    }
    // response success, so process it
    // in IE9 the response is in - responseText
    this.templateCache[url] = httpResult.response || httpResult.responseText;
    // inform all listeners that this is now in the cache
    var callbacks = this.waitingCallbacks[url];
    for (var i = 0; i < callbacks.length; i++) {
      var callback = callbacks[i];
      // we could pass the callback the response, however we know the client of this code
      // is the cell renderer, and it passes the 'cellRefresh' method in as the callback
      // which doesn't take any parameters.
      callback();
    }
    if (this.$scope) {
      var that_1 = this;
      window.setTimeout(function () {
        that_1.$scope.$apply();
      }, 0);
    }
  };
  __decorate$19([Autowired('$scope')], TemplateService.prototype, "$scope", void 0);
  TemplateService = __decorate$19([Bean('templateService')], TemplateService);
  return TemplateService;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1g =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1a =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __spreadArrays$7 =  false || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
};
var FocusController = /** @class */function (_super) {
  __extends$1g(FocusController, _super);
  function FocusController() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  FocusController_1 = FocusController;
  /**
   * Adds a gridCore to the list of the gridCores monitoring Keyboard Mode
   * in a specific HTMLDocument.
   *
   * @param doc {Document} - The Document containing the gridCore.
   * @param gridCore {GridComp} - The GridCore to be monitored.
   */
  FocusController.addKeyboardModeEvents = function (doc, controller) {
    var docControllers = FocusController_1.instancesMonitored.get(doc);
    if (docControllers && docControllers.length > 0) {
      if (docControllers.indexOf(controller) === -1) {
        docControllers.push(controller);
      }
    } else {
      FocusController_1.instancesMonitored.set(doc, [controller]);
      doc.addEventListener('keydown', FocusController_1.toggleKeyboardMode);
      doc.addEventListener('mousedown', FocusController_1.toggleKeyboardMode);
    }
  };
  /**
   * Removes a gridCore from the list of the gridCores monitoring Keyboard Mode
   * in a specific HTMLDocument.
   *
   * @param doc {Document} - The Document containing the gridCore.
   * @param gridCore {GridComp} - The GridCore to be removed.
   */
  FocusController.removeKeyboardModeEvents = function (doc, controller) {
    var docControllers = FocusController_1.instancesMonitored.get(doc);
    var newControllers = [];
    if (docControllers && docControllers.length) {
      newControllers = __spreadArrays$7(docControllers).filter(function (currentGridCore) {
        return currentGridCore !== controller;
      });
      FocusController_1.instancesMonitored.set(doc, newControllers);
    }
    if (newControllers.length === 0) {
      doc.removeEventListener('keydown', FocusController_1.toggleKeyboardMode);
      doc.removeEventListener('mousedown', FocusController_1.toggleKeyboardMode);
    }
  };
  /**
   * This method will be called by `keydown` and `mousedown` events on all Documents monitoring
   * KeyboardMode. It will then fire a KEYBOARD_FOCUS, MOUSE_FOCUS on each gridCore present in
   * the Document allowing each gridCore to maintain a state for KeyboardMode.
   *
   * @param event {KeyboardEvent | MouseEvent | TouchEvent} - The event triggered.
   */
  FocusController.toggleKeyboardMode = function (event) {
    var isKeyboardActive = FocusController_1.keyboardModeActive;
    var isKeyboardEvent = event.type === 'keydown';
    if (isKeyboardEvent) {
      // the following keys should not toggle keyboard mode.
      if (event.ctrlKey || event.metaKey || event.altKey) {
        return;
      }
    }
    if (isKeyboardActive && isKeyboardEvent || !isKeyboardActive && !isKeyboardEvent) {
      return;
    }
    FocusController_1.keyboardModeActive = isKeyboardEvent;
    var doc = event.target.ownerDocument;
    if (!doc) {
      return;
    }
    var controllersForDoc = FocusController_1.instancesMonitored.get(doc);
    if (controllersForDoc) {
      controllersForDoc.forEach(function (controller) {
        controller.dispatchEvent({
          type: isKeyboardEvent ? Events.EVENT_KEYBOARD_FOCUS : Events.EVENT_MOUSE_FOCUS
        });
      });
    }
  };
  FocusController.prototype.init = function () {
    var clearFocusedCellListener = this.clearFocusedCell.bind(this);
    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, clearFocusedCellListener);
    this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onColumnEverythingChanged.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, clearFocusedCellListener);
    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, clearFocusedCellListener);
  };
  FocusController.prototype.registerGridCompController = function (gridCompController) {
    var _this = this;
    this.gridCompController = gridCompController;
    var doc = this.gridOptionsWrapper.getDocument();
    FocusController_1.addKeyboardModeEvents(doc, gridCompController);
    this.addDestroyFunc(function () {
      return _this.unregisterGridCompController(gridCompController);
    });
  };
  FocusController.prototype.unregisterGridCompController = function (gridCompController) {
    var doc = this.gridOptionsWrapper.getDocument();
    FocusController_1.removeKeyboardModeEvents(doc, gridCompController);
  };
  FocusController.prototype.onColumnEverythingChanged = function () {
    // if the columns change, check and see if this column still exists. if it does, then
    // we can keep the focused cell. if it doesn't, then we need to drop the focused cell.
    if (!this.focusedCellPosition) {
      return;
    }
    var col = this.focusedCellPosition.column;
    var colFromColumnController = this.columnController.getGridColumn(col.getId());
    if (col !== colFromColumnController) {
      this.clearFocusedCell();
    }
  };
  FocusController.prototype.isKeyboardMode = function () {
    return FocusController_1.keyboardModeActive;
  };
  // we check if the browser is focusing something, and if it is, and
  // it's the cell we think is focused, then return the cell. so this
  // methods returns the cell if a) we think it has focus and b) the
  // browser thinks it has focus. this then returns nothing if we
  // first focus a cell, then second click outside the grid, as then the
  // grid cell will still be focused as far as the grid is concerned,
  // however the browser focus will have moved somewhere else.
  FocusController.prototype.getFocusCellToUseAfterRefresh = function () {
    if (this.gridOptionsWrapper.isSuppressFocusAfterRefresh() || !this.focusedCellPosition) {
      return null;
    }
    // we check that the browser is actually focusing on the grid, if it is not, then
    // we have nothing to worry about
    if (!this.getGridCellForDomElement(document.activeElement)) {
      return null;
    }
    return this.focusedCellPosition;
  };
  FocusController.prototype.getGridCellForDomElement = function (eBrowserCell) {
    var ePointer = eBrowserCell;
    while (ePointer) {
      var cellComp = this.gridOptionsWrapper.getDomData(ePointer, CellComp.DOM_DATA_KEY_CELL_COMP);
      if (cellComp) {
        return cellComp.getCellPosition();
      }
      ePointer = ePointer.parentNode;
    }
    return null;
  };
  FocusController.prototype.clearFocusedCell = function () {
    this.focusedCellPosition = null;
    this.onCellFocused(false);
  };
  FocusController.prototype.getFocusedCell = function () {
    return this.focusedCellPosition;
  };
  FocusController.prototype.setFocusedCell = function (rowIndex, colKey, floating, forceBrowserFocus) {
    if (forceBrowserFocus === void 0) {
      forceBrowserFocus = false;
    }
    var gridColumn = this.columnController.getGridColumn(colKey);
    // if column doesn't exist, then blank the focused cell and return. this can happen when user sets new columns,
    // and the focused cell is in a column that no longer exists. after columns change, the grid refreshes and tries
    // to re-focus the focused cell.
    if (!gridColumn) {
      this.focusedCellPosition = null;
      return;
    }
    this.focusedCellPosition = gridColumn ? {
      rowIndex: rowIndex,
      rowPinned: makeNull(floating),
      column: gridColumn
    } : null;
    this.onCellFocused(forceBrowserFocus);
  };
  FocusController.prototype.isCellFocused = function (cellPosition) {
    if (this.focusedCellPosition == null) {
      return false;
    }
    return this.focusedCellPosition.column === cellPosition.column && this.isRowFocused(cellPosition.rowIndex, cellPosition.rowPinned);
  };
  FocusController.prototype.isRowNodeFocused = function (rowNode) {
    return this.isRowFocused(rowNode.rowIndex, rowNode.rowPinned);
  };
  FocusController.prototype.isHeaderWrapperFocused = function (headerWrapper) {
    if (this.focusedHeaderPosition == null) {
      return false;
    }
    var column = headerWrapper.getColumn();
    var headerRowIndex = headerWrapper.getParentComponent().getRowIndex();
    var pinned = headerWrapper.getPinned();
    var _a = this.focusedHeaderPosition,
      focusedColumn = _a.column,
      focusedHeaderRowIndex = _a.headerRowIndex;
    return column === focusedColumn && headerRowIndex === focusedHeaderRowIndex && pinned == focusedColumn.getPinned();
  };
  FocusController.prototype.clearFocusedHeader = function () {
    this.focusedHeaderPosition = null;
  };
  FocusController.prototype.getFocusedHeader = function () {
    return this.focusedHeaderPosition;
  };
  FocusController.prototype.setFocusedHeader = function (headerRowIndex, column) {
    this.focusedHeaderPosition = {
      headerRowIndex: headerRowIndex,
      column: column
    };
  };
  FocusController.prototype.focusHeaderPosition = function (headerPosition, direction, fromTab, allowUserOverride, event) {
    if (direction === void 0) {
      direction = null;
    }
    if (fromTab === void 0) {
      fromTab = false;
    }
    if (allowUserOverride === void 0) {
      allowUserOverride = false;
    }
    if (allowUserOverride) {
      var gridOptionsWrapper = this.gridOptionsWrapper;
      var currentPosition = this.getFocusedHeader();
      var headerRowCount = this.headerNavigationService.getHeaderRowCount();
      if (fromTab) {
        var userFunc = gridOptionsWrapper.getTabToNextHeaderFunc();
        if (userFunc) {
          var params = {
            backwards: direction === 'Before',
            previousHeaderPosition: currentPosition,
            nextHeaderPosition: headerPosition,
            headerRowCount: headerRowCount
          };
          headerPosition = userFunc(params);
        }
      } else {
        var userFunc = gridOptionsWrapper.getNavigateToNextHeaderFunc();
        if (userFunc && event) {
          var params = {
            key: event.key,
            previousHeaderPosition: currentPosition,
            nextHeaderPosition: headerPosition,
            headerRowCount: headerRowCount,
            event: event
          };
          headerPosition = userFunc(params);
        }
      }
    }
    if (!headerPosition) {
      return false;
    }
    if (headerPosition.headerRowIndex === -1) {
      return this.focusGridView(headerPosition.column);
    }
    this.headerNavigationService.scrollToColumn(headerPosition.column, direction);
    var childContainer = this.headerNavigationService.getHeaderContainer(headerPosition.column.getPinned());
    var rowComps = childContainer.getRowComps();
    var nextRowComp = rowComps[headerPosition.headerRowIndex];
    var headerComps = nextRowComp.getHeaderComps();
    var nextHeader = headerComps[headerPosition.column.getUniqueId()];
    if (nextHeader) {
      // this will automatically call the setFocusedHeader method above
      nextHeader.getFocusableElement().focus();
      return true;
    }
    return false;
  };
  FocusController.prototype.isAnyCellFocused = function () {
    return !!this.focusedCellPosition;
  };
  FocusController.prototype.isRowFocused = function (rowIndex, floating) {
    if (this.focusedCellPosition == null) {
      return false;
    }
    return this.focusedCellPosition.rowIndex === rowIndex && this.focusedCellPosition.rowPinned === makeNull(floating);
  };
  FocusController.prototype.findFocusableElements = function (rootNode, exclude, onlyUnmanaged) {
    if (onlyUnmanaged === void 0) {
      onlyUnmanaged = false;
    }
    var focusableString = Constants.FOCUSABLE_SELECTOR;
    var excludeString = Constants.FOCUSABLE_EXCLUDE;
    if (exclude) {
      excludeString += ', ' + exclude;
    }
    if (onlyUnmanaged) {
      excludeString += ', [tabindex="-1"]';
    }
    var nodes = Array.prototype.slice.apply(rootNode.querySelectorAll(focusableString));
    var excludeNodes = Array.prototype.slice.apply(rootNode.querySelectorAll(excludeString));
    if (!excludeNodes.length) {
      return nodes;
    }
    var diff = function (a, b) {
      return a.filter(function (element) {
        return b.indexOf(element) === -1;
      });
    };
    return diff(nodes, excludeNodes);
  };
  FocusController.prototype.focusInto = function (rootNode, up, onlyUnmanaged) {
    if (up === void 0) {
      up = false;
    }
    if (onlyUnmanaged === void 0) {
      onlyUnmanaged = false;
    }
    var focusableElements = this.findFocusableElements(rootNode, null, onlyUnmanaged);
    var toFocus = up ? last(focusableElements) : focusableElements[0];
    if (toFocus) {
      toFocus.focus();
      return true;
    }
    return false;
  };
  FocusController.prototype.findNextFocusableElement = function (rootNode, onlyManaged, backwards) {
    var focusable = this.findFocusableElements(rootNode, onlyManaged ? ':not([tabindex="-1"])' : null);
    var currentIndex;
    if (onlyManaged) {
      currentIndex = findIndex(focusable, function (el) {
        return el.contains(document.activeElement);
      });
    } else {
      currentIndex = focusable.indexOf(document.activeElement);
    }
    var nextIndex = currentIndex + (backwards ? -1 : 1);
    if (nextIndex < 0 || nextIndex >= focusable.length) {
      return null;
    }
    return focusable[nextIndex];
  };
  FocusController.prototype.isFocusUnderManagedComponent = function (rootNode) {
    var managedContainers = rootNode.querySelectorAll("." + ManagedFocusComponent.FOCUS_MANAGED_CLASS);
    if (!managedContainers.length) {
      return false;
    }
    for (var i = 0; i < managedContainers.length; i++) {
      if (managedContainers[i].contains(document.activeElement)) {
        return true;
      }
    }
    return false;
  };
  FocusController.prototype.findTabbableParent = function (node, limit) {
    if (limit === void 0) {
      limit = 5;
    }
    var counter = 0;
    while (node && getTabIndex(node) === null && ++counter <= limit) {
      node = node.parentElement;
    }
    if (getTabIndex(node) === null) {
      return null;
    }
    return node;
  };
  FocusController.prototype.onCellFocused = function (forceBrowserFocus) {
    var event = {
      type: Events.EVENT_CELL_FOCUSED,
      forceBrowserFocus: forceBrowserFocus,
      rowIndex: null,
      column: null,
      floating: null,
      api: this.gridApi,
      columnApi: this.columnApi,
      rowPinned: null,
      isFullWidthCell: false
    };
    if (this.focusedCellPosition) {
      var rowIndex = event.rowIndex = this.focusedCellPosition.rowIndex;
      var rowPinned = event.rowPinned = this.focusedCellPosition.rowPinned;
      event.column = this.focusedCellPosition.column;
      var rowCon = this.rowRenderer.getRowConByPosition({
        rowIndex: rowIndex,
        rowPinned: rowPinned
      });
      if (rowCon) {
        event.isFullWidthCell = rowCon.isFullWidth();
      }
    }
    this.eventService.dispatchEvent(event);
  };
  FocusController.prototype.focusGridView = function (column, backwards) {
    var nextRow = backwards ? this.rowPositionUtils.getLastRow() : this.rowPositionUtils.getFirstRow();
    if (!nextRow) {
      return false;
    }
    var rowIndex = nextRow.rowIndex,
      rowPinned = nextRow.rowPinned;
    var focusedHeader = this.getFocusedHeader();
    if (!column && focusedHeader) {
      column = focusedHeader.column;
    }
    if (rowIndex == null || !column) {
      return false;
    }
    this.rowRenderer.ensureCellVisible({
      rowIndex: rowIndex,
      column: column,
      rowPinned: rowPinned
    });
    this.setFocusedCell(rowIndex, column, makeNull(rowPinned), true);
    if (this.rangeController) {
      var cellPosition = {
        rowIndex: rowIndex,
        rowPinned: rowPinned,
        column: column
      };
      this.rangeController.setRangeToCell(cellPosition);
    }
    return true;
  };
  FocusController.prototype.focusNextGridCoreContainer = function (backwards) {
    if (this.gridCompController.focusNextInnerContainer(backwards)) {
      return true;
    }
    if (!backwards) {
      this.gridCompController.forceFocusOutOfContainer();
    }
    return false;
  };
  var FocusController_1;
  FocusController.AG_KEYBOARD_FOCUS = 'ag-keyboard-focus';
  FocusController.keyboardModeActive = false;
  FocusController.instancesMonitored = new Map();
  __decorate$1a([Autowired('columnController')], FocusController.prototype, "columnController", void 0);
  __decorate$1a([Autowired('headerNavigationService')], FocusController.prototype, "headerNavigationService", void 0);
  __decorate$1a([Autowired('columnApi')], FocusController.prototype, "columnApi", void 0);
  __decorate$1a([Autowired('gridApi')], FocusController.prototype, "gridApi", void 0);
  __decorate$1a([Autowired('rowRenderer')], FocusController.prototype, "rowRenderer", void 0);
  __decorate$1a([Autowired('rowPositionUtils')], FocusController.prototype, "rowPositionUtils", void 0);
  __decorate$1a([Optional('rangeController')], FocusController.prototype, "rangeController", void 0);
  __decorate$1a([PostConstruct], FocusController.prototype, "init", null);
  FocusController = FocusController_1 = __decorate$1a([Bean('focusController')], FocusController);
  return FocusController;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1h =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1b =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PopupService = /** @class */function (_super) {
  __extends$1h(PopupService, _super);
  function PopupService() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.popupList = [];
    return _this;
  }
  PopupService.prototype.registerGridCompController = function (gridCompController) {
    var _this = this;
    this.gridCompController = gridCompController;
    this.addManagedListener(this.gridCompController, Events.EVENT_KEYBOARD_FOCUS, function () {
      forEach(_this.popupList, function (popup) {
        return addCssClass(popup.element, FocusController.AG_KEYBOARD_FOCUS);
      });
    });
    this.addManagedListener(this.gridCompController, Events.EVENT_MOUSE_FOCUS, function () {
      forEach(_this.popupList, function (popup) {
        return removeCssClass(popup.element, FocusController.AG_KEYBOARD_FOCUS);
      });
    });
  };
  PopupService.prototype.getPopupParent = function () {
    var ePopupParent = this.gridOptionsWrapper.getPopupParent();
    if (ePopupParent) {
      return ePopupParent;
    }
    return this.gridCompController.getGui();
  };
  PopupService.prototype.positionPopupForMenu = function (params) {
    var sourceRect = params.eventSource.getBoundingClientRect();
    var parentRect = this.getParentRect();
    var y = this.keepYWithinBounds(params, sourceRect.top - parentRect.top);
    var minWidth = params.ePopup.clientWidth > 0 ? params.ePopup.clientWidth : 200;
    params.ePopup.style.minWidth = minWidth + "px";
    var widthOfParent = parentRect.right - parentRect.left;
    var maxX = widthOfParent - minWidth;
    // the x position of the popup depends on RTL or LTR. for normal cases, LTR, we put the child popup
    // to the right, unless it doesn't fit and we then put it to the left. for RTL it's the other way around,
    // we try place it first to the left, and then if not to the right.
    var x;
    if (this.gridOptionsWrapper.isEnableRtl()) {
      // for RTL, try left first
      x = xLeftPosition();
      if (x < 0) {
        x = xRightPosition();
      }
      if (x > maxX) {
        x = 0;
      }
    } else {
      // for LTR, try right first
      x = xRightPosition();
      if (x > maxX) {
        x = xLeftPosition();
      }
      if (x < 0) {
        x = 0;
      }
    }
    params.ePopup.style.left = x + "px";
    params.ePopup.style.top = y + "px";
    function xRightPosition() {
      return sourceRect.right - parentRect.left - 2;
    }
    function xLeftPosition() {
      return sourceRect.left - parentRect.left - minWidth;
    }
  };
  PopupService.prototype.positionPopupUnderMouseEvent = function (params) {
    var _a = this.calculatePointerAlign(params.mouseEvent),
      x = _a.x,
      y = _a.y;
    var ePopup = params.ePopup,
      nudgeX = params.nudgeX,
      nudgeY = params.nudgeY;
    this.positionPopup({
      ePopup: ePopup,
      x: x,
      y: y,
      nudgeX: nudgeX,
      nudgeY: nudgeY,
      keepWithinBounds: true
    });
    this.callPostProcessPopup(params.type, params.ePopup, null, params.mouseEvent, params.column, params.rowNode);
  };
  PopupService.prototype.calculatePointerAlign = function (e) {
    var parentRect = this.getParentRect();
    return {
      x: e.clientX - parentRect.left,
      y: e.clientY - parentRect.top
    };
  };
  PopupService.prototype.positionPopupUnderComponent = function (params) {
    var sourceRect = params.eventSource.getBoundingClientRect();
    var alignSide = params.alignSide || 'left';
    var parentRect = this.getParentRect();
    var x = sourceRect.left - parentRect.left;
    if (alignSide === 'right') {
      x -= params.ePopup.offsetWidth - sourceRect.width;
    }
    this.positionPopup({
      ePopup: params.ePopup,
      minWidth: params.minWidth,
      minHeight: params.minHeight,
      nudgeX: params.nudgeX,
      nudgeY: params.nudgeY,
      x: x,
      y: sourceRect.top - parentRect.top + sourceRect.height,
      keepWithinBounds: params.keepWithinBounds
    });
    this.callPostProcessPopup(params.type, params.ePopup, params.eventSource, null, params.column, params.rowNode);
  };
  PopupService.prototype.positionPopupOverComponent = function (params) {
    var sourceRect = params.eventSource.getBoundingClientRect();
    var parentRect = this.getParentRect();
    this.positionPopup({
      ePopup: params.ePopup,
      minWidth: params.minWidth,
      nudgeX: params.nudgeX,
      nudgeY: params.nudgeY,
      x: sourceRect.left - parentRect.left,
      y: sourceRect.top - parentRect.top,
      keepWithinBounds: params.keepWithinBounds
    });
    this.callPostProcessPopup(params.type, params.ePopup, params.eventSource, null, params.column, params.rowNode);
  };
  PopupService.prototype.callPostProcessPopup = function (type, ePopup, eventSource, mouseEvent, column, rowNode) {
    var callback = this.gridOptionsWrapper.getPostProcessPopupFunc();
    if (callback) {
      var params = {
        column: column,
        rowNode: rowNode,
        ePopup: ePopup,
        type: type,
        eventSource: eventSource,
        mouseEvent: mouseEvent
      };
      callback(params);
    }
  };
  PopupService.prototype.positionPopup = function (params) {
    var x = params.x;
    var y = params.y;
    if (params.nudgeX) {
      x += params.nudgeX;
    }
    if (params.nudgeY) {
      y += params.nudgeY;
    }
    // if popup is overflowing to the bottom, move it up
    if (params.keepWithinBounds) {
      x = this.keepXWithinBounds(params, x);
      y = this.keepYWithinBounds(params, y);
    }
    params.ePopup.style.left = x + "px";
    params.ePopup.style.top = y + "px";
  };
  PopupService.prototype.getActivePopups = function () {
    return this.popupList.map(function (popup) {
      return popup.element;
    });
  };
  PopupService.prototype.getParentRect = function () {
    // subtract the popup parent borders, because popupParent.getBoundingClientRect
    // returns the rect outside the borders, but the 0,0 coordinate for absolute
    // positioning is inside the border, leading the popup to be off by the width
    // of the border
    var popupParent = this.getPopupParent();
    var eDocument = this.gridOptionsWrapper.getDocument();
    if (popupParent === eDocument.body) {
      popupParent = eDocument.documentElement;
    }
    var style = getComputedStyle(popupParent);
    var bounds = popupParent.getBoundingClientRect();
    return {
      top: bounds.top + parseFloat(style.borderTopWidth) || 0,
      left: bounds.left + parseFloat(style.borderLeftWidth) || 0,
      right: bounds.right + parseFloat(style.borderRightWidth) || 0,
      bottom: bounds.bottom + parseFloat(style.borderBottomWidth) || 0
    };
  };
  PopupService.prototype.keepYWithinBounds = function (params, y) {
    var eDocument = this.gridOptionsWrapper.getDocument();
    var docElement = eDocument.documentElement;
    var popupParent = this.getPopupParent();
    var parentRect = popupParent.getBoundingClientRect();
    var documentRect = eDocument.documentElement.getBoundingClientRect();
    var isBody = popupParent === eDocument.body;
    var minHeight = Math.min(200, parentRect.height);
    var diff = 0;
    if (params.minHeight && params.minHeight < minHeight) {
      minHeight = params.minHeight;
    } else if (params.ePopup.offsetHeight > 0) {
      minHeight = params.ePopup.clientHeight;
      diff = getAbsoluteHeight(params.ePopup) - minHeight;
    }
    var heightOfParent = isBody ? getAbsoluteHeight(docElement) + docElement.scrollTop : parentRect.height;
    if (isBody) {
      heightOfParent -= Math.abs(documentRect.top - parentRect.top);
    }
    var maxY = heightOfParent - minHeight - diff;
    return Math.min(Math.max(y, 0), Math.abs(maxY));
  };
  PopupService.prototype.keepXWithinBounds = function (params, x) {
    var eDocument = this.gridOptionsWrapper.getDocument();
    var docElement = eDocument.documentElement;
    var popupParent = this.getPopupParent();
    var parentRect = popupParent.getBoundingClientRect();
    var documentRect = eDocument.documentElement.getBoundingClientRect();
    var isBody = popupParent === eDocument.body;
    var ePopup = params.ePopup;
    var minWidth = Math.min(200, parentRect.width);
    var diff = 0;
    if (params.minWidth && params.minWidth < minWidth) {
      minWidth = params.minWidth;
    } else if (ePopup.offsetWidth > 0) {
      minWidth = ePopup.offsetWidth;
      ePopup.style.minWidth = minWidth + "px";
      diff = getAbsoluteWidth(ePopup) - minWidth;
    }
    var widthOfParent = isBody ? getAbsoluteWidth(docElement) + docElement.scrollLeft : parentRect.width;
    if (isBody) {
      widthOfParent -= Math.abs(documentRect.left - parentRect.left);
    }
    var maxX = widthOfParent - minWidth - diff;
    return Math.min(Math.max(x, 0), Math.abs(maxX));
  };
  PopupService.prototype.keepPopupPositionedRelativeTo = function (params) {
    var eParent = this.getPopupParent();
    var parentRect = eParent.getBoundingClientRect();
    var sourceRect = params.element.getBoundingClientRect();
    var initialDiffTop = parentRect.top - sourceRect.top;
    var initialDiffLeft = parentRect.left - sourceRect.left;
    var lastDiffTop = initialDiffTop;
    var lastDiffLeft = initialDiffLeft;
    var topPx = params.ePopup.style.top;
    var top = parseInt(topPx.substring(0, topPx.length - 1), 10);
    var leftPx = params.ePopup.style.left;
    var left = parseInt(leftPx.substring(0, leftPx.length - 1), 10);
    var intervalId = window.setInterval(function () {
      var pRect = eParent.getBoundingClientRect();
      var sRect = params.element.getBoundingClientRect();
      var elementNotInDom = sRect.top == 0 && sRect.left == 0 && sRect.height == 0 && sRect.width == 0;
      if (elementNotInDom) {
        params.hidePopup();
        return;
      }
      var currentDiffTop = pRect.top - sRect.top;
      if (currentDiffTop != lastDiffTop) {
        var newTop = top + initialDiffTop - currentDiffTop;
        params.ePopup.style.top = newTop + "px";
      }
      lastDiffTop = currentDiffTop;
      var currentDiffLeft = pRect.left - sRect.left;
      if (currentDiffLeft != lastDiffLeft) {
        var newLeft = left + initialDiffLeft - currentDiffLeft;
        params.ePopup.style.left = newLeft + "px";
      }
      lastDiffLeft = currentDiffLeft;
    }, 200);
    var res = function () {
      if (intervalId != null) {
        window.clearInterval(intervalId);
      }
      intervalId = undefined;
    };
    return res;
  };
  PopupService.prototype.addPopup = function (params) {
    var _this = this;
    var modal = params.modal,
      eChild = params.eChild,
      closeOnEsc = params.closeOnEsc,
      closedCallback = params.closedCallback,
      click = params.click,
      alwaysOnTop = params.alwaysOnTop,
      afterGuiAttached = params.afterGuiAttached,
      positionCallback = params.positionCallback,
      anchorToElement = params.anchorToElement;
    var eDocument = this.gridOptionsWrapper.getDocument();
    if (!eDocument) {
      console.warn('ag-grid: could not find the document, document is empty');
      return;
    }
    var pos = findIndex(this.popupList, function (popup) {
      return popup.element === eChild;
    });
    if (pos !== -1) {
      var popup = this.popupList[pos];
      return {
        hideFunc: popup.hideFunc,
        stopAnchoringFunc: popup.stopAnchoringFunc
      };
    }
    var ePopupParent = this.getPopupParent();
    // for angular specifically, but shouldn't cause an issue with js or other fw's
    // https://github.com/angular/angular/issues/8563
    ePopupParent.appendChild(eChild);
    if (eChild.style.top == null) {
      eChild.style.top = '0px';
    }
    if (eChild.style.left == null) {
      eChild.style.left = '0px';
    }
    // add env CSS class to child, in case user provided a popup parent, which means
    // theme class may be missing
    var eWrapper = document.createElement('div');
    var theme = this.environment.getTheme().theme;
    if (theme) {
      addCssClass(eWrapper, theme);
    }
    addCssClass(eWrapper, 'ag-popup');
    addCssClass(eChild, this.gridOptionsWrapper.isEnableRtl() ? 'ag-rtl' : 'ag-ltr');
    addCssClass(eChild, 'ag-popup-child');
    if (this.focusController.isKeyboardMode()) {
      addCssClass(eChild, FocusController.AG_KEYBOARD_FOCUS);
    }
    eWrapper.appendChild(eChild);
    ePopupParent.appendChild(eWrapper);
    if (alwaysOnTop) {
      this.setAlwaysOnTop(eWrapper, true);
    } else {
      this.bringPopupToFront(eWrapper);
    }
    var popupHidden = false;
    var hidePopupOnKeyboardEvent = function (event) {
      if (!eWrapper.contains(document.activeElement)) {
        return;
      }
      var key = event.which || event.keyCode;
      if (key === KeyCode.ESCAPE) {
        hidePopup({
          keyboardEvent: event
        });
      }
    };
    var hidePopupOnMouseEvent = function (event) {
      return hidePopup({
        mouseEvent: event
      });
    };
    var hidePopupOnTouchEvent = function (event) {
      return hidePopup({
        touchEvent: event
      });
    };
    var destroyPositionTracker;
    var hidePopup = function (popupParams) {
      if (popupParams === void 0) {
        popupParams = {};
      }
      var mouseEvent = popupParams.mouseEvent,
        touchEvent = popupParams.touchEvent,
        keyboardEvent = popupParams.keyboardEvent;
      if (
      // we don't hide popup if the event was on the child, or any
      // children of this child
      _this.isEventFromCurrentPopup({
        mouseEvent: mouseEvent,
        touchEvent: touchEvent
      }, eChild) ||
      // if the event to close is actually the open event, then ignore it
      _this.isEventSameChainAsOriginalEvent({
        originalMouseEvent: click,
        mouseEvent: mouseEvent,
        touchEvent: touchEvent
      }) ||
      // this method should only be called once. the client can have different
      // paths, each one wanting to close, so this method may be called multiple times.
      popupHidden) {
        return;
      }
      popupHidden = true;
      ePopupParent.removeChild(eWrapper);
      eDocument.removeEventListener('keydown', hidePopupOnKeyboardEvent);
      eDocument.removeEventListener('mousedown', hidePopupOnMouseEvent);
      eDocument.removeEventListener('touchstart', hidePopupOnTouchEvent);
      eDocument.removeEventListener('contextmenu', hidePopupOnMouseEvent);
      _this.eventService.removeEventListener(Events.EVENT_DRAG_STARTED, hidePopupOnMouseEvent);
      if (closedCallback) {
        closedCallback(mouseEvent || touchEvent || keyboardEvent);
      }
      _this.popupList = _this.popupList.filter(function (popup) {
        return popup.element !== eChild;
      });
      if (destroyPositionTracker) {
        destroyPositionTracker();
      }
    };
    if (afterGuiAttached) {
      afterGuiAttached({
        hidePopup: hidePopup
      });
    }
    // if we add these listeners now, then the current mouse
    // click will be included, which we don't want
    window.setTimeout(function () {
      if (closeOnEsc) {
        eDocument.addEventListener('keydown', hidePopupOnKeyboardEvent);
      }
      if (modal) {
        eDocument.addEventListener('mousedown', hidePopupOnMouseEvent);
        _this.eventService.addEventListener(Events.EVENT_DRAG_STARTED, hidePopupOnMouseEvent);
        eDocument.addEventListener('touchstart', hidePopupOnTouchEvent);
        eDocument.addEventListener('contextmenu', hidePopupOnMouseEvent);
      }
    }, 0);
    if (positionCallback) {
      positionCallback();
    }
    if (anchorToElement) {
      // keeps popup positioned under created, eg if context menu, if user scrolls
      // using touchpad and the cell moves, it moves the popup to keep it with the cell.
      destroyPositionTracker = this.keepPopupPositionedRelativeTo({
        element: anchorToElement,
        ePopup: eChild,
        hidePopup: hidePopup
      });
    }
    this.popupList.push({
      element: eChild,
      hideFunc: hidePopup,
      stopAnchoringFunc: destroyPositionTracker
    });
    return {
      hideFunc: hidePopup,
      stopAnchoringFunc: destroyPositionTracker
    };
  };
  PopupService.prototype.isEventFromCurrentPopup = function (params, target) {
    var mouseEvent = params.mouseEvent,
      touchEvent = params.touchEvent;
    var event = mouseEvent ? mouseEvent : touchEvent;
    if (!event) {
      return false;
    }
    var indexOfThisChild = findIndex(this.popupList, function (popup) {
      return popup.element === target;
    });
    if (indexOfThisChild === -1) {
      return false;
    }
    for (var i = indexOfThisChild; i < this.popupList.length; i++) {
      var popup = this.popupList[i];
      if (isElementInEventPath(popup.element, event)) {
        return true;
      }
    }
    // if the user did not write their own Custom Element to be rendered as popup
    // and this component has an additional popup element, they should have the
    // `ag-custom-component-popup` class to be detected as part of the Custom Component
    return this.isElementWithinCustomPopup(event.target);
  };
  PopupService.prototype.isElementWithinCustomPopup = function (el) {
    if (!this.popupList.length) {
      return false;
    }
    while (el && el !== document.body) {
      if (el.classList.contains('ag-custom-component-popup') || el.parentElement === null) {
        return true;
      }
      el = el.parentElement;
    }
    return false;
  };
  // in some browsers, the context menu event can be fired before the click event, which means
  // the context menu event could open the popup, but then the click event closes it straight away.
  PopupService.prototype.isEventSameChainAsOriginalEvent = function (params) {
    var originalMouseEvent = params.originalMouseEvent,
      mouseEvent = params.mouseEvent,
      touchEvent = params.touchEvent;
    // we check the coordinates of the event, to see if it's the same event. there is a 1 / 1000 chance that
    // the event is a different event, however that is an edge case that is not very relevant (the user clicking
    // twice on the same location isn't a normal path).
    // event could be mouse event or touch event.
    var mouseEventOrTouch = null;
    if (mouseEvent) {
      // mouse event can be used direction, it has coordinates
      mouseEventOrTouch = mouseEvent;
    } else if (touchEvent) {
      // touch event doesn't have coordinates, need it's touch object
      mouseEventOrTouch = touchEvent.touches[0];
    }
    if (mouseEventOrTouch && originalMouseEvent) {
      // for x, allow 4px margin, to cover iPads, where touch (which opens menu) is followed
      // by browser click (when you finger up, touch is interrupted as click in browser)
      var screenX_1 = mouseEvent ? mouseEvent.screenX : 0;
      var screenY_1 = mouseEvent ? mouseEvent.screenY : 0;
      var xMatch = Math.abs(originalMouseEvent.screenX - screenX_1) < 5;
      var yMatch = Math.abs(originalMouseEvent.screenY - screenY_1) < 5;
      if (xMatch && yMatch) {
        return true;
      }
    }
    return false;
  };
  PopupService.prototype.getWrapper = function (ePopup) {
    while (!containsClass(ePopup, 'ag-popup') && ePopup.parentElement) {
      ePopup = ePopup.parentElement;
    }
    return containsClass(ePopup, 'ag-popup') ? ePopup : null;
  };
  PopupService.prototype.setAlwaysOnTop = function (ePopup, alwaysOnTop) {
    var eWrapper = this.getWrapper(ePopup);
    if (!eWrapper) {
      return;
    }
    addOrRemoveCssClass(eWrapper, 'ag-always-on-top', !!alwaysOnTop);
    if (alwaysOnTop) {
      this.bringPopupToFront(eWrapper);
    }
  };
  PopupService.prototype.bringPopupToFront = function (ePopup) {
    var parent = this.getPopupParent();
    var popupList = Array.prototype.slice.call(parent.querySelectorAll('.ag-popup'));
    var popupLen = popupList.length;
    var alwaysOnTopList = Array.prototype.slice.call(parent.querySelectorAll('.ag-popup.ag-always-on-top'));
    var onTopLength = alwaysOnTopList.length;
    var eWrapper = this.getWrapper(ePopup);
    if (!eWrapper || popupLen <= 1 || !parent.contains(ePopup)) {
      return;
    }
    var pos = popupList.indexOf(eWrapper);
    if (onTopLength) {
      var isPopupAlwaysOnTop = containsClass(eWrapper, 'ag-always-on-top');
      if (isPopupAlwaysOnTop) {
        if (pos !== popupLen - 1) {
          last(alwaysOnTopList).insertAdjacentElement('afterend', eWrapper);
        }
      } else if (pos !== popupLen - onTopLength - 1) {
        alwaysOnTopList[0].insertAdjacentElement('beforebegin', eWrapper);
      }
    } else if (pos !== popupLen - 1) {
      last(popupList).insertAdjacentElement('afterend', eWrapper);
    }
    var params = {
      type: 'popupToFront',
      api: this.gridOptionsWrapper.getApi(),
      columnApi: this.gridOptionsWrapper.getColumnApi(),
      eWrapper: eWrapper
    };
    this.eventService.dispatchEvent(params);
  };
  __decorate$1b([Autowired('environment')], PopupService.prototype, "environment", void 0);
  __decorate$1b([Autowired('focusController')], PopupService.prototype, "focusController", void 0);
  PopupService = __decorate$1b([Bean('popupService')], PopupService);
  return PopupService;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1i =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1c =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param$7 =  false || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};
var LoggerFactory = /** @class */function (_super) {
  __extends$1i(LoggerFactory, _super);
  function LoggerFactory() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  LoggerFactory.prototype.setBeans = function (gridOptionsWrapper) {
    this.logging = gridOptionsWrapper.isDebug();
  };
  LoggerFactory.prototype.create = function (name) {
    return new Logger(name, this.isLogging.bind(this));
  };
  LoggerFactory.prototype.isLogging = function () {
    return this.logging;
  };
  __decorate$1c([__param$7(0, Qualifier('gridOptionsWrapper'))], LoggerFactory.prototype, "setBeans", null);
  LoggerFactory = __decorate$1c([Bean('loggerFactory')], LoggerFactory);
  return LoggerFactory;
}(BeanStub);
var Logger = /** @class */function () {
  function Logger(name, isLoggingFunc) {
    this.name = name;
    this.isLoggingFunc = isLoggingFunc;
  }
  Logger.prototype.isLogging = function () {
    return this.isLoggingFunc();
  };
  Logger.prototype.log = function (message) {
    if (this.isLoggingFunc()) {
      // tslint:disable-next-line
      console.log('AG Grid.' + this.name + ': ' + message);
    }
  };
  return Logger;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1j =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1d =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AutoWidthCalculator = /** @class */function (_super) {
  __extends$1j(AutoWidthCalculator, _super);
  function AutoWidthCalculator() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  AutoWidthCalculator.prototype.postConstruct = function () {
    var _this = this;
    this.controllersService.whenReady(function (p) {
      _this.centerRowContainerCon = p.centerRowContainerCon;
    });
  };
  AutoWidthCalculator.prototype.registerHeaderRootComp = function (headerRootComp) {
    this.headerRootComp = headerRootComp;
  };
  // this is the trick: we create a dummy container and clone all the cells
  // into the dummy, then check the dummy's width. then destroy the dummy
  // as we don't need it any more.
  // drawback: only the cells visible on the screen are considered
  AutoWidthCalculator.prototype.getPreferredWidthForColumn = function (column, skipHeader) {
    var eHeaderCell = this.getHeaderCellForColumn(column);
    // cell isn't visible
    if (!eHeaderCell) {
      return -1;
    }
    var eDummyContainer = document.createElement('span');
    // position fixed, so it isn't restricted to the boundaries of the parent
    eDummyContainer.style.position = 'fixed';
    // we put the dummy into the body container, so it will inherit all the
    // css styles that the real cells are inheriting
    var eBodyContainer = this.centerRowContainerCon.getContainerElement();
    eBodyContainer.appendChild(eDummyContainer);
    // get all the cells that are currently displayed (this only brings back
    // rendered cells, rows not rendered due to row visualisation will not be here)
    this.putRowCellsIntoDummyContainer(column, eDummyContainer);
    if (!skipHeader) {
      // we only consider the lowest level cell, not the group cell. in 99% of the time, this
      // will be enough. if we consider groups, then it gets too complicated for what it's worth,
      // as the groups can span columns and this class only considers one column at a time.
      this.cloneItemIntoDummy(eHeaderCell, eDummyContainer);
    }
    // at this point, all the clones are lined up vertically with natural widths. the dummy
    // container will have a width wide enough just to fit the largest.
    var dummyContainerWidth = eDummyContainer.offsetWidth;
    // we are finished with the dummy container, so get rid of it
    eBodyContainer.removeChild(eDummyContainer);
    // we add padding as I found sometimes the gui still put '...' after some of the texts. so the
    // user can configure the grid to add a few more pixels after the calculated width
    var autoSizePadding = this.gridOptionsWrapper.getAutoSizePadding();
    return dummyContainerWidth + autoSizePadding;
  };
  AutoWidthCalculator.prototype.getHeaderCellForColumn = function (column) {
    var comp = null;
    // find the rendered header cell
    this.headerRootComp.forEachHeaderElement(function (headerElement) {
      if (headerElement instanceof HeaderWrapperComp) {
        var headerWrapperComp = headerElement;
        if (headerWrapperComp.getColumn() === column) {
          comp = headerWrapperComp;
        }
      }
    });
    return comp ? comp.getGui() : null;
  };
  AutoWidthCalculator.prototype.putRowCellsIntoDummyContainer = function (column, eDummyContainer) {
    var _this = this;
    var eCells = this.rowRenderer.getAllCellsForColumn(column);
    eCells.forEach(function (eCell) {
      return _this.cloneItemIntoDummy(eCell, eDummyContainer);
    });
  };
  AutoWidthCalculator.prototype.cloneItemIntoDummy = function (eCell, eDummyContainer) {
    // make a deep clone of the cell
    var eCellClone = eCell.cloneNode(true);
    // the original has a fixed width, we remove this to allow the natural width based on content
    eCellClone.style.width = '';
    // the original has position = absolute, we need to remove this so it's positioned normally
    eCellClone.style.position = 'static';
    eCellClone.style.left = '';
    // we put the cell into a containing div, as otherwise the cells would just line up
    // on the same line, standard flow layout, by putting them into divs, they are laid
    // out one per line
    var eCloneParent = document.createElement('div');
    if (containsClass(eCellClone, 'ag-header-cell')) {
      addCssClass(eCloneParent, 'ag-header');
      addCssClass(eCloneParent, 'ag-header-row');
      eCloneParent.style.position = 'static';
    } else {
      addCssClass(eCloneParent, 'ag-row');
    }
    // table-row, so that each cell is on a row. i also tried display='block', but this
    // didn't work in IE
    eCloneParent.style.display = 'table-row';
    // the twig on the branch, the branch on the tree, the tree in the hole,
    // the hole in the bog, the bog in the clone, the clone in the parent,
    // the parent in the dummy, and the dummy down in the vall-e-ooo, OOOOOOOOO! Oh row the rattling bog....
    eCloneParent.appendChild(eCellClone);
    eDummyContainer.appendChild(eCloneParent);
  };
  __decorate$1d([Autowired('rowRenderer')], AutoWidthCalculator.prototype, "rowRenderer", void 0);
  __decorate$1d([Autowired('controllersService')], AutoWidthCalculator.prototype, "controllersService", void 0);
  __decorate$1d([PostConstruct], AutoWidthCalculator.prototype, "postConstruct", null);
  AutoWidthCalculator = __decorate$1d([Bean('autoWidthCalculator')], AutoWidthCalculator);
  return AutoWidthCalculator;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1k =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1e =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HorizontalResizeService = /** @class */function (_super) {
  __extends$1k(HorizontalResizeService, _super);
  function HorizontalResizeService() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  HorizontalResizeService.prototype.addResizeBar = function (params) {
    var _this = this;
    var dragSource = {
      dragStartPixels: params.dragStartPixels || 0,
      eElement: params.eResizeBar,
      onDragStart: this.onDragStart.bind(this, params),
      onDragStop: this.onDragStop.bind(this, params),
      onDragging: this.onDragging.bind(this, params)
    };
    this.dragService.addDragSource(dragSource, true);
    // we pass remove func back to the caller, so call can tell us when they
    // are finished, and then we remove the listener from the drag source
    var finishedWithResizeFunc = function () {
      return _this.dragService.removeDragSource(dragSource);
    };
    return finishedWithResizeFunc;
  };
  HorizontalResizeService.prototype.onDragStart = function (params, mouseEvent) {
    this.dragStartX = mouseEvent.clientX;
    this.setResizeIcons();
    var shiftKey = mouseEvent instanceof MouseEvent && mouseEvent.shiftKey === true;
    params.onResizeStart(shiftKey);
  };
  HorizontalResizeService.prototype.setResizeIcons = function () {
    this.oldBodyCursor = this.eGridDiv.style.cursor;
    this.oldUserSelect = this.eGridDiv.style.userSelect;
    this.oldWebkitUserSelect = this.eGridDiv.style.webkitUserSelect;
    // change the body cursor, so when drag moves out of the drag bar, the cursor is still 'resize' (or 'move'
    this.eGridDiv.style.cursor = 'ew-resize';
    // we don't want text selection outside the grid (otherwise it looks weird as text highlights when we move)
    this.eGridDiv.style.userSelect = 'none';
    this.eGridDiv.style.webkitUserSelect = 'none';
  };
  HorizontalResizeService.prototype.onDragStop = function (params, mouseEvent) {
    params.onResizeEnd(this.resizeAmount);
    this.resetIcons();
  };
  HorizontalResizeService.prototype.resetIcons = function () {
    // we don't want text selection outside the grid (otherwise it looks weird as text highlights when we move)
    this.eGridDiv.style.cursor = this.oldBodyCursor;
    this.eGridDiv.style.userSelect = this.oldUserSelect;
    this.eGridDiv.style.webkitUserSelect = this.oldWebkitUserSelect;
  };
  HorizontalResizeService.prototype.onDragging = function (params, mouseEvent) {
    this.resizeAmount = mouseEvent.clientX - this.dragStartX;
    params.onResizing(this.resizeAmount);
  };
  __decorate$1e([Autowired('dragService')], HorizontalResizeService.prototype, "dragService", void 0);
  __decorate$1e([Autowired('eGridDiv')], HorizontalResizeService.prototype, "eGridDiv", void 0);
  HorizontalResizeService = __decorate$1e([Bean('horizontalResizeService')], HorizontalResizeService);
  return HorizontalResizeService;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1l =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1f =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var GridCompController = /** @class */function (_super) {
  __extends$1l(GridCompController, _super);
  function GridCompController() {
    return _super.call(this) || this;
  }
  GridCompController.prototype.postConstruct = function () {
    var _this = this;
    this.logger = this.loggerFactory.create('GridCompController');
    // register with services that need grid core
    [this.gridApi, this.popupService, this.focusController, this.controllersService].forEach(function (service) {
      return service.registerGridCompController(_this);
    });
    if (ModuleRegistry.isRegistered(exports.ModuleNames.ClipboardModule)) {
      this.clipboardService.registerGridCompController(this);
    }
  };
  GridCompController.prototype.setView = function (view, eGridDiv, eGui) {
    var _this = this;
    this.view = view;
    this.eGridHostDiv = eGridDiv;
    this.eGui = eGui;
    this.mouseEventService.stampTopLevelGridCompWithGridInstance(eGridDiv);
    this.createManagedBean(new LayoutFeature(this.view));
    // important to set rtl before doLayout, as setting the RTL class impacts the scroll position,
    // which doLayout indirectly depends on
    this.addRtlSupport();
    this.addManagedListener(this, Events.EVENT_KEYBOARD_FOCUS, function () {
      _this.view.addOrRemoveKeyboardFocusClass(true);
    });
    this.addManagedListener(this, Events.EVENT_MOUSE_FOCUS, function () {
      _this.view.addOrRemoveKeyboardFocusClass(false);
    });
    var unsubscribeFromResize = this.resizeObserverService.observeResize(this.eGridHostDiv, this.onGridSizeChanged.bind(this));
    this.addDestroyFunc(function () {
      return unsubscribeFromResize();
    });
  };
  GridCompController.prototype.showDropZones = function () {
    return ModuleRegistry.isRegistered(exports.ModuleNames.RowGroupingModule);
  };
  GridCompController.prototype.showSideBar = function () {
    return ModuleRegistry.isRegistered(exports.ModuleNames.SideBarModule);
  };
  GridCompController.prototype.showStatusBar = function () {
    return ModuleRegistry.isRegistered(exports.ModuleNames.StatusBarModule);
  };
  GridCompController.prototype.showWatermark = function () {
    return ModuleRegistry.isRegistered(exports.ModuleNames.EnterpriseCoreModule);
  };
  GridCompController.prototype.onGridSizeChanged = function () {
    var event = {
      type: Events.EVENT_GRID_SIZE_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi,
      clientWidth: this.eGridHostDiv.clientWidth,
      clientHeight: this.eGridHostDiv.clientHeight
    };
    this.eventService.dispatchEvent(event);
  };
  GridCompController.prototype.addRtlSupport = function () {
    var cssClass = this.gridOptionsWrapper.isEnableRtl() ? 'ag-rtl' : 'ag-ltr';
    this.view.setRtlClass(cssClass);
  };
  GridCompController.prototype.destroyGridUi = function () {
    this.view.destroyGridUi();
  };
  GridCompController.prototype.getGui = function () {
    return this.eGui;
  };
  GridCompController.prototype.focusNextInnerContainer = function (backwards) {
    var focusableContainers = this.view.getFocusableContainers();
    var idxWithFocus = findIndex(focusableContainers, function (container) {
      return container.contains(document.activeElement);
    });
    var nextIdx = idxWithFocus + (backwards ? -1 : 1);
    if (nextIdx < 0 || nextIdx >= focusableContainers.length) {
      return false;
    }
    if (nextIdx === 0) {
      return this.focusGridHeader();
    }
    return this.focusController.focusInto(focusableContainers[nextIdx]);
  };
  GridCompController.prototype.focusGridHeader = function () {
    var firstColumn = this.columnController.getAllDisplayedColumns()[0];
    if (!firstColumn) {
      return false;
    }
    if (firstColumn.getParent()) {
      firstColumn = this.columnController.getColumnGroupAtLevel(firstColumn, 0);
    }
    this.focusController.focusHeaderPosition({
      headerRowIndex: 0,
      column: firstColumn
    });
    return true;
  };
  GridCompController.prototype.forceFocusOutOfContainer = function (up) {
    if (up === void 0) {
      up = false;
    }
    this.view.forceFocusOutOfContainer(up);
  };
  __decorate$1f([Autowired('columnApi')], GridCompController.prototype, "columnApi", void 0);
  __decorate$1f([Autowired('gridApi')], GridCompController.prototype, "gridApi", void 0);
  __decorate$1f([Autowired('popupService')], GridCompController.prototype, "popupService", void 0);
  __decorate$1f([Autowired('focusController')], GridCompController.prototype, "focusController", void 0);
  __decorate$1f([Optional('clipboardService')], GridCompController.prototype, "clipboardService", void 0);
  __decorate$1f([Autowired('loggerFactory')], GridCompController.prototype, "loggerFactory", void 0);
  __decorate$1f([Autowired('resizeObserverService')], GridCompController.prototype, "resizeObserverService", void 0);
  __decorate$1f([Autowired('columnController')], GridCompController.prototype, "columnController", void 0);
  __decorate$1f([Autowired('controllersService')], GridCompController.prototype, "controllersService", void 0);
  __decorate$1f([Autowired('mouseEventService')], GridCompController.prototype, "mouseEventService", void 0);
  __decorate$1f([PostConstruct], GridCompController.prototype, "postConstruct", null);
  return GridCompController;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1m =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1g =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var GridComp = /** @class */function (_super) {
  __extends$1m(GridComp, _super);
  function GridComp(eGridDiv) {
    var _this = _super.call(this, undefined, true) || this;
    _this.eGridDiv = eGridDiv;
    return _this;
  }
  GridComp.prototype.postConstruct = function () {
    var _this = this;
    this.logger = this.loggerFactory.create('GridComp');
    var view = {
      destroyGridUi: function () {
        return _this.destroyBean(_this);
      },
      setRtlClass: function (cssClass) {
        return addCssClass(_this.getGui(), cssClass);
      },
      addOrRemoveKeyboardFocusClass: function (addOrRemove) {
        return _this.addOrRemoveCssClass(FocusController.AG_KEYBOARD_FOCUS, addOrRemove);
      },
      forceFocusOutOfContainer: this.forceFocusOutOfContainer.bind(this),
      updateLayoutClasses: this.updateLayoutClasses.bind(this),
      getFocusableContainers: this.getFocusableContainers.bind(this)
    };
    this.con = this.createManagedBean(new GridCompController());
    var template = this.createTemplate();
    this.setTemplate(template);
    this.con.setView(view, this.eGridDiv, this.getGui());
    this.insertGridIntoDom();
    _super.prototype.postConstruct.call(this);
  };
  GridComp.prototype.insertGridIntoDom = function () {
    var _this = this;
    var eGui = this.getGui();
    this.eGridDiv.appendChild(eGui);
    this.addDestroyFunc(function () {
      _this.eGridDiv.removeChild(eGui);
      _this.logger.log('Grid removed from DOM');
    });
  };
  GridComp.prototype.updateLayoutClasses = function (params) {
    addOrRemoveCssClass(this.eRootWrapperBody, exports.LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);
    addOrRemoveCssClass(this.eRootWrapperBody, exports.LayoutCssClasses.NORMAL, params.normal);
    addOrRemoveCssClass(this.eRootWrapperBody, exports.LayoutCssClasses.PRINT, params.print);
    this.addOrRemoveCssClass(exports.LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);
    this.addOrRemoveCssClass(exports.LayoutCssClasses.NORMAL, params.normal);
    this.addOrRemoveCssClass(exports.LayoutCssClasses.PRINT, params.print);
  };
  GridComp.prototype.createTemplate = function () {
    var dropZones = this.con.showDropZones() ? '<ag-grid-header-drop-zones></ag-grid-header-drop-zones>' : '';
    var sideBar = this.con.showSideBar() ? '<ag-side-bar ref="sideBar"></ag-side-bar>' : '';
    var statusBar = this.con.showStatusBar() ? '<ag-status-bar ref="statusBar"></ag-status-bar>' : '';
    var watermark = this.con.showWatermark() ? '<ag-watermark></ag-watermark>' : '';
    var template = /* html */"<div ref=\"eRootWrapper\" class=\"ag-root-wrapper\">\n                " + dropZones + "\n                <div class=\"ag-root-wrapper-body\" ref=\"rootWrapperBody\">\n                    <ag-grid-body ref=\"gridBody\"></ag-grid-body>\n                    " + sideBar + "\n                </div>\n                " + statusBar + "\n                <ag-pagination></ag-pagination>\n                " + watermark + "\n            </div>";
    return template;
  };
  GridComp.prototype.getFocusableElement = function () {
    return this.eRootWrapperBody;
  };
  GridComp.prototype.getFocusableContainers = function () {
    var focusableContainers = [this.gridBodyComp.getGui()];
    if (this.sideBarComp) {
      focusableContainers.push(this.sideBarComp.getGui());
    }
    return focusableContainers.filter(function (el) {
      return isVisible(el);
    });
  };
  GridComp.prototype.focusInnerElement = function (fromBottom) {
    var focusableContainers = this.getFocusableContainers();
    if (fromBottom) {
      if (focusableContainers.length > 1) {
        return this.focusController.focusInto(last(focusableContainers));
      }
      var lastColumn = last(this.columnController.getAllDisplayedColumns());
      if (this.focusController.focusGridView(lastColumn, true)) {
        return true;
      }
    }
    return this.con.focusGridHeader();
  };
  GridComp.prototype.onTabKeyDown = function () {};
  __decorate$1g([Autowired('columnController')], GridComp.prototype, "columnController", void 0);
  __decorate$1g([Autowired('loggerFactory')], GridComp.prototype, "loggerFactory", void 0);
  __decorate$1g([RefSelector('gridBody')], GridComp.prototype, "gridBodyComp", void 0);
  __decorate$1g([RefSelector('sideBar')], GridComp.prototype, "sideBarComp", void 0);
  __decorate$1g([RefSelector('rootWrapperBody')], GridComp.prototype, "eRootWrapperBody", void 0);
  return GridComp;
}(ManagedFocusComponent);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1n =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1h =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var StandardMenuFactory = /** @class */function (_super) {
  __extends$1n(StandardMenuFactory, _super);
  function StandardMenuFactory() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  StandardMenuFactory.prototype.registerGridComp = function (gridBodyComp) {
    this.gridBodyComp = gridBodyComp;
  };
  StandardMenuFactory.prototype.hideActiveMenu = function () {
    if (this.hidePopup) {
      this.hidePopup();
    }
  };
  StandardMenuFactory.prototype.showMenuAfterMouseEvent = function (column, mouseEvent) {
    var _this = this;
    this.showPopup(column, function (eMenu) {
      _this.popupService.positionPopupUnderMouseEvent({
        column: column,
        type: 'columnMenu',
        mouseEvent: mouseEvent,
        ePopup: eMenu
      });
    }, mouseEvent.target);
  };
  StandardMenuFactory.prototype.showMenuAfterButtonClick = function (column, eventSource) {
    var _this = this;
    this.showPopup(column, function (eMenu) {
      _this.popupService.positionPopupUnderComponent({
        type: 'columnMenu',
        eventSource: eventSource,
        ePopup: eMenu,
        keepWithinBounds: true,
        column: column
      });
    }, eventSource);
  };
  StandardMenuFactory.prototype.showPopup = function (column, positionCallback, eventSource) {
    var _this = this;
    var filterWrapper = this.filterManager.getOrCreateFilterWrapper(column, 'COLUMN_MENU');
    var eMenu = document.createElement('div');
    eMenu.setAttribute('role', 'presentation');
    addCssClass(eMenu, 'ag-menu');
    this.tabListener = this.addManagedListener(eMenu, 'keydown', function (e) {
      return _this.trapFocusWithin(e, eMenu);
    });
    filterWrapper.guiPromise.then(function (gui) {
      return eMenu.appendChild(gui);
    });
    var hidePopup;
    var anchorToElement = eventSource || this.gridBodyComp.getGui();
    var closedCallback = function (e) {
      column.setMenuVisible(false, 'contextMenu');
      var isKeyboardEvent = e instanceof KeyboardEvent;
      if (_this.tabListener) {
        _this.tabListener = _this.tabListener();
      }
      if (isKeyboardEvent && eventSource && isVisible(eventSource)) {
        var focusableEl = _this.focusController.findTabbableParent(eventSource);
        if (focusableEl) {
          focusableEl.focus();
        }
      }
    };
    var addPopupRes = this.popupService.addPopup({
      modal: true,
      eChild: eMenu,
      closeOnEsc: true,
      closedCallback: closedCallback,
      positionCallback: function () {
        return positionCallback(eMenu);
      },
      anchorToElement: anchorToElement
    });
    if (addPopupRes) {
      this.hidePopup = hidePopup = addPopupRes.hideFunc;
    }
    filterWrapper.filterPromise.then(function (filter) {
      // need to make sure the filter is present before positioning, as only
      // after filter it is visible can we find out what the width of it is
      positionCallback(eMenu);
      if (filter.afterGuiAttached) {
        filter.afterGuiAttached({
          container: 'columnMenu',
          hidePopup: hidePopup
        });
      }
    });
    column.setMenuVisible(true, 'contextMenu');
  };
  StandardMenuFactory.prototype.trapFocusWithin = function (e, menu) {
    if (e.keyCode !== KeyCode.TAB || e.defaultPrevented || this.focusController.findNextFocusableElement(menu, false, e.shiftKey)) {
      return;
    }
    e.preventDefault();
    this.focusController.focusInto(menu, e.shiftKey);
  };
  StandardMenuFactory.prototype.isMenuEnabled = function (column) {
    // for standard, we show menu if filter is enabled, and the menu is not suppressed
    return column.isFilterAllowed();
  };
  __decorate$1h([Autowired('filterManager')], StandardMenuFactory.prototype, "filterManager", void 0);
  __decorate$1h([Autowired('popupService')], StandardMenuFactory.prototype, "popupService", void 0);
  __decorate$1h([Autowired('focusController')], StandardMenuFactory.prototype, "focusController", void 0);
  StandardMenuFactory = __decorate$1h([Bean('menuFactory')], StandardMenuFactory);
  return StandardMenuFactory;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1o =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1i =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/** Adds drag listening onto an element. In AG Grid this is used twice, first is resizing columns,
 * second is moving the columns and column groups around (ie the 'drag' part of Drag and Drop. */
var DragService = /** @class */function (_super) {
  __extends$1o(DragService, _super);
  function DragService() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.dragEndFunctions = [];
    _this.dragSources = [];
    return _this;
  }
  DragService.prototype.init = function () {
    this.logger = this.loggerFactory.create('DragService');
  };
  DragService.prototype.removeAllListeners = function () {
    this.dragSources.forEach(this.removeListener.bind(this));
    this.dragSources.length = 0;
  };
  DragService.prototype.removeListener = function (dragSourceAndListener) {
    var element = dragSourceAndListener.dragSource.eElement;
    var mouseDownListener = dragSourceAndListener.mouseDownListener;
    element.removeEventListener('mousedown', mouseDownListener);
    // remove touch listener only if it exists
    if (dragSourceAndListener.touchEnabled) {
      var touchStartListener = dragSourceAndListener.touchStartListener;
      element.removeEventListener('touchstart', touchStartListener, {
        passive: true
      });
    }
  };
  DragService.prototype.removeDragSource = function (params) {
    var dragSourceAndListener = find(this.dragSources, function (item) {
      return item.dragSource === params;
    });
    if (!dragSourceAndListener) {
      return;
    }
    this.removeListener(dragSourceAndListener);
    removeFromArray(this.dragSources, dragSourceAndListener);
  };
  DragService.prototype.setNoSelectToBody = function (noSelect) {
    var eDocument = this.gridOptionsWrapper.getDocument();
    var eBody = eDocument.querySelector('body');
    if (exists(eBody)) {
      // when we drag the mouse in AG Grid, this class gets added / removed from the body, so that
      // the mouse isn't selecting text when dragging.
      addOrRemoveCssClass(eBody, 'ag-unselectable', noSelect);
    }
  };
  DragService.prototype.isDragging = function () {
    return this.dragging;
  };
  DragService.prototype.addDragSource = function (params, includeTouch) {
    if (includeTouch === void 0) {
      includeTouch = false;
    }
    var mouseListener = this.onMouseDown.bind(this, params);
    params.eElement.addEventListener('mousedown', mouseListener);
    var touchListener = null;
    var suppressTouch = this.gridOptionsWrapper.isSuppressTouch();
    if (includeTouch && !suppressTouch) {
      touchListener = this.onTouchStart.bind(this, params);
      params.eElement.addEventListener('touchstart', touchListener, {
        passive: true
      });
    }
    this.dragSources.push({
      dragSource: params,
      mouseDownListener: mouseListener,
      touchStartListener: touchListener,
      touchEnabled: includeTouch
    });
  };
  // gets called whenever mouse down on any drag source
  DragService.prototype.onTouchStart = function (params, touchEvent) {
    var _this = this;
    this.currentDragParams = params;
    this.dragging = false;
    var touch = touchEvent.touches[0];
    this.touchLastTime = touch;
    this.touchStart = touch;
    var touchMoveEvent = function (e) {
      return _this.onTouchMove(e, params.eElement);
    };
    var touchEndEvent = function (e) {
      return _this.onTouchUp(e, params.eElement);
    };
    var documentTouchMove = function (e) {
      if (e.cancelable) {
        e.preventDefault();
      }
    };
    var target = params.eElement;
    var events = [
    // Prevents the page document from moving while we are dragging items around.
    // preventDefault needs to be called in the touchmove listener and never inside the
    // touchstart, because using touchstart causes the click event to be cancelled on touch devices.
    {
      target: document,
      type: 'touchmove',
      listener: documentTouchMove,
      options: {
        passive: false
      }
    }, {
      target: target,
      type: 'touchmove',
      listener: touchMoveEvent,
      options: {
        passive: true
      }
    }, {
      target: target,
      type: 'touchend',
      listener: touchEndEvent,
      options: {
        passive: true
      }
    }, {
      target: target,
      type: 'touchcancel',
      listener: touchEndEvent,
      options: {
        passive: true
      }
    }];
    // temporally add these listeners, for the duration of the drag
    this.addTemporaryEvents(events);
    // see if we want to start dragging straight away
    if (params.dragStartPixels === 0) {
      this.onCommonMove(touch, this.touchStart, params.eElement);
    }
  };
  // gets called whenever mouse down on any drag source
  DragService.prototype.onMouseDown = function (params, mouseEvent) {
    var _this = this;
    var e = mouseEvent;
    if (params.skipMouseEvent && params.skipMouseEvent(mouseEvent)) {
      return;
    }
    // if there are two elements with parent / child relationship, and both are draggable,
    // when we drag the child, we should NOT drag the parent. an example of this is row moving
    // and range selection - row moving should get preference when use drags the rowDrag component.
    if (e._alreadyProcessedByDragService) {
      return;
    }
    e._alreadyProcessedByDragService = true;
    // only interested in left button clicks
    if (mouseEvent.button !== 0) {
      return;
    }
    this.currentDragParams = params;
    this.dragging = false;
    this.mouseStartEvent = mouseEvent;
    var eDocument = this.gridOptionsWrapper.getDocument();
    this.setNoSelectToBody(true);
    var mouseMoveEvent = function (event) {
      return _this.onMouseMove(event, params.eElement);
    };
    var mouseUpEvent = function (event) {
      return _this.onMouseUp(event, params.eElement);
    };
    var contextEvent = function (event) {
      return event.preventDefault();
    };
    var target = eDocument;
    var events = [{
      target: target,
      type: 'mousemove',
      listener: mouseMoveEvent
    }, {
      target: target,
      type: 'mouseup',
      listener: mouseUpEvent
    }, {
      target: target,
      type: 'contextmenu',
      listener: contextEvent
    }];
    // temporally add these listeners, for the duration of the drag
    this.addTemporaryEvents(events);
    //see if we want to start dragging straight away
    if (params.dragStartPixels === 0) {
      this.onMouseMove(mouseEvent, params.eElement);
    }
  };
  DragService.prototype.addTemporaryEvents = function (events) {
    events.forEach(function (currentEvent) {
      var target = currentEvent.target,
        type = currentEvent.type,
        listener = currentEvent.listener,
        options = currentEvent.options;
      target.addEventListener(type, listener, options);
    });
    this.dragEndFunctions.push(function () {
      events.forEach(function (currentEvent) {
        var target = currentEvent.target,
          type = currentEvent.type,
          listener = currentEvent.listener,
          options = currentEvent.options;
        target.removeEventListener(type, listener, options);
      });
    });
  };
  // returns true if the event is close to the original event by X pixels either vertically or horizontally.
  // we only start dragging after X pixels so this allows us to know if we should start dragging yet.
  DragService.prototype.isEventNearStartEvent = function (currentEvent, startEvent) {
    // by default, we wait 4 pixels before starting the drag
    var dragStartPixels = this.currentDragParams.dragStartPixels;
    var requiredPixelDiff = exists(dragStartPixels) ? dragStartPixels : 4;
    return areEventsNear(currentEvent, startEvent, requiredPixelDiff);
  };
  DragService.prototype.getFirstActiveTouch = function (touchList) {
    for (var i = 0; i < touchList.length; i++) {
      if (touchList[i].identifier === this.touchStart.identifier) {
        return touchList[i];
      }
    }
    return null;
  };
  DragService.prototype.onCommonMove = function (currentEvent, startEvent, el) {
    if (!this.dragging) {
      // if mouse hasn't travelled from the start position enough, do nothing
      if (!this.dragging && this.isEventNearStartEvent(currentEvent, startEvent)) {
        return;
      }
      this.dragging = true;
      var event_1 = {
        type: Events.EVENT_DRAG_STARTED,
        api: this.gridApi,
        columnApi: this.columnApi,
        target: el
      };
      this.eventService.dispatchEvent(event_1);
      this.currentDragParams.onDragStart(startEvent);
      // we need ONE drag action at the startEvent, so that we are guaranteed the drop target
      // at the start gets notified. this is because the drag can start outside of the element
      // that started it, as the mouse is allowed drag away from the mouse down before it's
      // considered a drag (the isEventNearStartEvent() above). if we didn't do this, then
      // it would be possible to click a column by the edge, then drag outside of the drop zone
      // in less than 4 pixels and the drag officially starts outside of the header but the header
      // wouldn't be notified of the dragging.
      this.currentDragParams.onDragging(startEvent);
    }
    this.currentDragParams.onDragging(currentEvent);
  };
  DragService.prototype.onTouchMove = function (touchEvent, el) {
    var touch = this.getFirstActiveTouch(touchEvent.touches);
    if (!touch) {
      return;
    }
    // this.___statusPanel.setInfoText(Math.random() + ' onTouchMove preventDefault stopPropagation');
    this.onCommonMove(touch, this.touchStart, el);
  };
  // only gets called after a mouse down - as this is only added after mouseDown
  // and is removed when mouseUp happens
  DragService.prototype.onMouseMove = function (mouseEvent, el) {
    this.onCommonMove(mouseEvent, this.mouseStartEvent, el);
  };
  DragService.prototype.onTouchUp = function (touchEvent, el) {
    var touch = this.getFirstActiveTouch(touchEvent.changedTouches);
    // i haven't worked this out yet, but there is no matching touch
    // when we get the touch up event. to get around this, we swap in
    // the last touch. this is a hack to 'get it working' while we
    // figure out what's going on, why we are not getting a touch in
    // current event.
    if (!touch) {
      touch = this.touchLastTime;
    }
    // if mouse was left up before we started to move, then this is a tap.
    // we check this before onUpCommon as onUpCommon resets the dragging
    // let tap = !this.dragging;
    // let tapTarget = this.currentDragParams.eElement;
    this.onUpCommon(touch, el);
    // if tap, tell user
    // console.log(`${Math.random()} tap = ${tap}`);
    // if (tap) {
    //     tapTarget.click();
    // }
  };

  DragService.prototype.onMouseUp = function (mouseEvent, el) {
    this.onUpCommon(mouseEvent, el);
  };
  DragService.prototype.onUpCommon = function (eventOrTouch, el) {
    if (this.dragging) {
      this.dragging = false;
      this.currentDragParams.onDragStop(eventOrTouch);
      var event_2 = {
        type: Events.EVENT_DRAG_STOPPED,
        api: this.gridApi,
        columnApi: this.columnApi,
        target: el
      };
      this.eventService.dispatchEvent(event_2);
    }
    this.setNoSelectToBody(false);
    this.mouseStartEvent = null;
    this.touchStart = null;
    this.touchLastTime = null;
    this.currentDragParams = null;
    this.dragEndFunctions.forEach(function (func) {
      return func();
    });
    this.dragEndFunctions.length = 0;
  };
  __decorate$1i([Autowired('loggerFactory')], DragService.prototype, "loggerFactory", void 0);
  __decorate$1i([Autowired('columnApi')], DragService.prototype, "columnApi", void 0);
  __decorate$1i([Autowired('gridApi')], DragService.prototype, "gridApi", void 0);
  __decorate$1i([PostConstruct], DragService.prototype, "init", null);
  __decorate$1i([PreDestroy], DragService.prototype, "removeAllListeners", null);
  DragService = __decorate$1i([Bean('dragService')], DragService);
  return DragService;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1p =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1j =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SortController = /** @class */function (_super) {
  __extends$1p(SortController, _super);
  function SortController() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  SortController_1 = SortController;
  SortController.prototype.progressSort = function (column, multiSort, source) {
    if (source === void 0) {
      source = "api";
    }
    var nextDirection = this.getNextSortDirection(column);
    this.setSortForColumn(column, nextDirection, multiSort, source);
  };
  SortController.prototype.setSortForColumn = function (column, sort, multiSort, source) {
    if (source === void 0) {
      source = "api";
    }
    // auto correct - if sort not legal value, then set it to 'no sort' (which is null)
    if (sort !== Constants.SORT_ASC && sort !== Constants.SORT_DESC) {
      sort = null;
    }
    // update sort on current col
    column.setSort(sort, source);
    var doingMultiSort = multiSort && !this.gridOptionsWrapper.isSuppressMultiSort();
    // clear sort on all columns except this one, and update the icons
    if (!doingMultiSort) {
      this.clearSortBarThisColumn(column, source);
    }
    // sortIndex used for knowing order of cols when multi-col sort
    this.updateSortIndex(column);
    this.dispatchSortChangedEvents();
  };
  SortController.prototype.updateSortIndex = function (lastColToChange) {
    // update sortIndex on all sorting cols
    var allSortedCols = this.getColumnsWithSortingOrdered();
    var sortIndex = 0;
    allSortedCols.forEach(function (col) {
      if (col !== lastColToChange) {
        col.setSortIndex(sortIndex);
        sortIndex++;
      }
    });
    // last col to change always gets the last sort index, it's added to the end
    if (lastColToChange.getSort()) {
      lastColToChange.setSortIndex(sortIndex);
    }
    // clear sort index on all cols not sorting
    var allCols = this.columnController.getPrimaryAndSecondaryAndAutoColumns();
    allCols.filter(function (col) {
      return col.getSort() == null;
    }).forEach(function (col) {
      return col.setSortIndex();
    });
  };
  // gets called by API, so if data changes, use can call this, which will end up
  // working out the sort order again of the rows.
  SortController.prototype.onSortChanged = function () {
    this.dispatchSortChangedEvents();
  };
  SortController.prototype.isSortActive = function () {
    // pull out all the columns that have sorting set
    var allCols = this.columnController.getPrimaryAndSecondaryAndAutoColumns();
    var sortedCols = allCols.filter(function (column) {
      return !!column.getSort();
    });
    return sortedCols && sortedCols.length > 0;
  };
  SortController.prototype.dispatchSortChangedEvents = function () {
    var event = {
      type: Events.EVENT_SORT_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(event);
  };
  SortController.prototype.clearSortBarThisColumn = function (columnToSkip, source) {
    this.columnController.getPrimaryAndSecondaryAndAutoColumns().forEach(function (columnToClear) {
      // Do not clear if either holding shift, or if column in question was clicked
      if (columnToClear !== columnToSkip) {
        // setting to 'undefined' as null means 'none' rather than cleared, otherwise issue will arise
        // if sort order is: ['desc', null , 'asc'], as it will start at null rather than 'desc'.
        columnToClear.setSort(undefined, source);
      }
    });
  };
  SortController.prototype.getNextSortDirection = function (column) {
    var sortingOrder;
    if (column.getColDef().sortingOrder) {
      sortingOrder = column.getColDef().sortingOrder;
    } else if (this.gridOptionsWrapper.getSortingOrder()) {
      sortingOrder = this.gridOptionsWrapper.getSortingOrder();
    } else {
      sortingOrder = SortController_1.DEFAULT_SORTING_ORDER;
    }
    if (!Array.isArray(sortingOrder) || sortingOrder.length <= 0) {
      console.warn("ag-grid: sortingOrder must be an array with at least one element, currently it's " + sortingOrder);
      return null;
    }
    var currentIndex = sortingOrder.indexOf(column.getSort());
    var notInArray = currentIndex < 0;
    var lastItemInArray = currentIndex == sortingOrder.length - 1;
    var result;
    if (notInArray || lastItemInArray) {
      result = sortingOrder[0];
    } else {
      result = sortingOrder[currentIndex + 1];
    }
    // verify the sort type exists, as the user could provide the sortingOrder, need to make sure it's valid
    if (SortController_1.DEFAULT_SORTING_ORDER.indexOf(result) < 0) {
      console.warn('ag-grid: invalid sort type ' + result);
      return null;
    }
    return result;
  };
  SortController.prototype.getColumnsWithSortingOrdered = function () {
    // pull out all the columns that have sorting set
    var allColumnsIncludingAuto = this.columnController.getPrimaryAndSecondaryAndAutoColumns();
    var columnsWithSorting = allColumnsIncludingAuto.filter(function (column) {
      return !!column.getSort();
    });
    // when both cols are missing sortIndex, we use the position of the col in all cols list.
    // this means if colDefs only have sort, but no sortIndex, we deterministically pick which
    // cols is sorted by first.
    var allColsIndexes = {};
    allColumnsIncludingAuto.forEach(function (col, index) {
      return allColsIndexes[col.getId()] = index;
    });
    // put the columns in order of which one got sorted first
    columnsWithSorting.sort(function (a, b) {
      var iA = a.getSortIndex();
      var iB = b.getSortIndex();
      if (iA != null && iB != null) {
        return iA - iB; // both present, normal comparison
      } else if (iA == null && iB == null) {
        // both missing, compare using column positions
        var posA = allColsIndexes[a.getId()];
        var posB = allColsIndexes[b.getId()];
        return posA > posB ? 1 : -1;
      } else if (iB == null) {
        return -1; // iB missing
      } else {
        return 1; // iA missing
      }
    });

    return columnsWithSorting;
  };
  // used by server side row models, to sent sort to server
  SortController.prototype.getSortModel = function () {
    return this.getColumnsWithSortingOrdered().map(function (column) {
      return {
        sort: column.getSort(),
        colId: column.getId()
      };
    });
  };
  SortController.prototype.getSortOptions = function () {
    return this.getColumnsWithSortingOrdered().map(function (column) {
      return {
        sort: column.getSort(),
        column: column
      };
    });
  };
  var SortController_1;
  SortController.DEFAULT_SORTING_ORDER = [Constants.SORT_ASC, Constants.SORT_DESC, null];
  __decorate$1j([Autowired('columnController')], SortController.prototype, "columnController", void 0);
  __decorate$1j([Autowired('columnApi')], SortController.prototype, "columnApi", void 0);
  __decorate$1j([Autowired('gridApi')], SortController.prototype, "gridApi", void 0);
  SortController = SortController_1 = __decorate$1j([Bean('sortController')], SortController);
  return SortController;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1q =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1k =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var MouseEventService = /** @class */function (_super) {
  __extends$1q(MouseEventService, _super);
  function MouseEventService() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.gridInstanceId = MouseEventService_1.gridInstanceSequence.next();
    return _this;
  }
  MouseEventService_1 = MouseEventService;
  // we put the instance id onto the main DOM element. this is used for events, when grids are inside grids,
  // so the grid can work out if the even came from this grid or a grid inside this one. see the ctrl+v logic
  // for where this is used.
  MouseEventService.prototype.stampTopLevelGridCompWithGridInstance = function (eGridDiv) {
    eGridDiv[MouseEventService_1.GRID_DOM_KEY] = this.gridInstanceId;
  };
  MouseEventService.prototype.getRenderedCellForEvent = function (event) {
    return getComponentForEvent(this.gridOptionsWrapper, event, 'cellComp');
  };
  // walks the path of the event, and returns true if this grid is the first one that it finds. if doing
  // master / detail grids, and a child grid is found, then it returns false. this stops things like copy/paste
  // getting executed on many grids at the same time.
  MouseEventService.prototype.isEventFromThisGrid = function (event) {
    var res = this.isElementInThisGrid(event.target);
    return res;
  };
  MouseEventService.prototype.isElementInThisGrid = function (element) {
    var pointer = element;
    while (pointer) {
      var instanceId = pointer[MouseEventService_1.GRID_DOM_KEY];
      if (exists(instanceId)) {
        var eventFromThisGrid = instanceId === this.gridInstanceId;
        return eventFromThisGrid;
      }
      pointer = pointer.parentElement;
    }
    return false;
  };
  MouseEventService.prototype.getCellPositionForEvent = function (event) {
    var cellComp = this.getRenderedCellForEvent(event);
    return cellComp ? cellComp.getCellPosition() : null;
  };
  MouseEventService.prototype.getNormalisedPosition = function (event) {
    var gridPanelHasScrolls = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_NORMAL;
    var e = event;
    var x;
    var y;
    if (e.clientX != null || e.clientY != null) {
      x = e.clientX;
      y = e.clientY;
    } else {
      x = e.x;
      y = e.y;
    }
    if (gridPanelHasScrolls) {
      var gridBodyCon = this.controllersService.getGridBodyController();
      var vRange = gridBodyCon.getScrollFeature().getVScrollPosition();
      var hRange = gridBodyCon.getScrollFeature().getHScrollPosition();
      x += hRange.left;
      y += vRange.top;
    }
    return {
      x: x,
      y: y
    };
  };
  var MouseEventService_1;
  MouseEventService.gridInstanceSequence = new NumberSequence();
  MouseEventService.GRID_DOM_KEY = '__ag_grid_instance';
  __decorate$1k([Autowired('controllersService')], MouseEventService.prototype, "controllersService", void 0);
  MouseEventService = MouseEventService_1 = __decorate$1k([Bean('mouseEventService')], MouseEventService);
  return MouseEventService;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1r =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1l =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CellNavigationService = /** @class */function (_super) {
  __extends$1r(CellNavigationService, _super);
  function CellNavigationService() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  // returns null if no cell to focus on, ie at the end of the grid
  CellNavigationService.prototype.getNextCellToFocus = function (key, lastCellToFocus) {
    // starting with the provided cell, we keep moving until we find a cell we can
    // focus on.
    var pointer = lastCellToFocus;
    var finished = false;
    // finished will be true when either:
    // a) cell found that we can focus on
    // b) run out of cells (ie the method returns null)
    while (!finished) {
      switch (key) {
        case KeyCode.UP:
          pointer = this.getCellAbove(pointer);
          break;
        case KeyCode.DOWN:
          pointer = this.getCellBelow(pointer);
          break;
        case KeyCode.RIGHT:
          if (this.gridOptionsWrapper.isEnableRtl()) {
            pointer = this.getCellToLeft(pointer);
          } else {
            pointer = this.getCellToRight(pointer);
          }
          break;
        case KeyCode.LEFT:
          if (this.gridOptionsWrapper.isEnableRtl()) {
            pointer = this.getCellToRight(pointer);
          } else {
            pointer = this.getCellToLeft(pointer);
          }
          break;
        default:
          pointer = null;
          console.warn('AG Grid: unknown key for navigation ' + key);
          break;
      }
      if (pointer) {
        finished = this.isCellGoodToFocusOn(pointer);
      } else {
        finished = true;
      }
    }
    return pointer;
  };
  CellNavigationService.prototype.isCellGoodToFocusOn = function (gridCell) {
    var column = gridCell.column;
    var rowNode;
    switch (gridCell.rowPinned) {
      case Constants.PINNED_TOP:
        rowNode = this.pinnedRowModel.getPinnedTopRow(gridCell.rowIndex);
        break;
      case Constants.PINNED_BOTTOM:
        rowNode = this.pinnedRowModel.getPinnedBottomRow(gridCell.rowIndex);
        break;
      default:
        rowNode = this.rowModel.getRow(gridCell.rowIndex);
        break;
    }
    if (!rowNode) {
      return false;
    }
    var suppressNavigable = column.isSuppressNavigable(rowNode);
    return !suppressNavigable;
  };
  CellNavigationService.prototype.getCellToLeft = function (lastCell) {
    if (!lastCell) {
      return null;
    }
    var colToLeft = this.columnController.getDisplayedColBefore(lastCell.column);
    if (!colToLeft) {
      return null;
    }
    return {
      rowIndex: lastCell.rowIndex,
      column: colToLeft,
      rowPinned: lastCell.rowPinned
    };
  };
  CellNavigationService.prototype.getCellToRight = function (lastCell) {
    if (!lastCell) {
      return null;
    }
    var colToRight = this.columnController.getDisplayedColAfter(lastCell.column);
    // if already on right, do nothing
    if (!colToRight) {
      return null;
    }
    return {
      rowIndex: lastCell.rowIndex,
      column: colToRight,
      rowPinned: lastCell.rowPinned
    };
  };
  CellNavigationService.prototype.getRowBelow = function (rowPosition) {
    // if already on top row, do nothing
    var index = rowPosition.rowIndex;
    var pinned = rowPosition.rowPinned;
    if (this.isLastRowInContainer(rowPosition)) {
      switch (pinned) {
        case Constants.PINNED_BOTTOM:
          // never any rows after pinned bottom
          return null;
        case Constants.PINNED_TOP:
          // if on last row of pinned top, then next row is main body (if rows exist),
          // otherwise it's the pinned bottom
          if (this.rowModel.isRowsToRender()) {
            return {
              rowIndex: this.paginationProxy.getPageFirstRow(),
              rowPinned: null
            };
          }
          if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_BOTTOM)) {
            return {
              rowIndex: 0,
              rowPinned: Constants.PINNED_BOTTOM
            };
          }
          return null;
        default:
          // if in the main body, then try pinned bottom, otherwise return nothing
          if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_BOTTOM)) {
            return {
              rowIndex: 0,
              rowPinned: Constants.PINNED_BOTTOM
            };
          }
          return null;
      }
    }
    return {
      rowIndex: index + 1,
      rowPinned: pinned
    };
  };
  CellNavigationService.prototype.getCellBelow = function (lastCell) {
    if (!lastCell) {
      return null;
    }
    var rowBelow = this.getRowBelow(lastCell);
    if (rowBelow) {
      return {
        rowIndex: rowBelow.rowIndex,
        column: lastCell.column,
        rowPinned: rowBelow.rowPinned
      };
    }
    return null;
  };
  CellNavigationService.prototype.isLastRowInContainer = function (rowPosition) {
    var pinned = rowPosition.rowPinned;
    var index = rowPosition.rowIndex;
    if (pinned === Constants.PINNED_TOP) {
      var lastTopIndex = this.pinnedRowModel.getPinnedTopRowData().length - 1;
      return lastTopIndex <= index;
    }
    if (pinned === Constants.PINNED_BOTTOM) {
      var lastBottomIndex = this.pinnedRowModel.getPinnedBottomRowData().length - 1;
      return lastBottomIndex <= index;
    }
    var lastBodyIndex = this.paginationProxy.getPageLastRow();
    return lastBodyIndex <= index;
  };
  CellNavigationService.prototype.getRowAbove = function (rowPosition) {
    // if already on top row, do nothing
    var index = rowPosition.rowIndex;
    var pinned = rowPosition.rowPinned;
    var isFirstRow = pinned ? index === 0 : index === this.paginationProxy.getPageFirstRow();
    // if already on top row, do nothing
    if (isFirstRow) {
      if (pinned === Constants.PINNED_TOP) {
        return null;
      }
      if (!pinned) {
        if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_TOP)) {
          return this.getLastFloatingTopRow();
        }
        return null;
      }
      // last floating bottom
      if (this.rowModel.isRowsToRender()) {
        return this.getLastBodyCell();
      }
      if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_TOP)) {
        return this.getLastFloatingTopRow();
      }
      return null;
    }
    return {
      rowIndex: index - 1,
      rowPinned: pinned
    };
  };
  CellNavigationService.prototype.getCellAbove = function (lastCell) {
    if (!lastCell) {
      return null;
    }
    var rowAbove = this.getRowAbove({
      rowIndex: lastCell.rowIndex,
      rowPinned: lastCell.rowPinned
    });
    if (rowAbove) {
      return {
        rowIndex: rowAbove.rowIndex,
        column: lastCell.column,
        rowPinned: rowAbove.rowPinned
      };
    }
    return null;
  };
  CellNavigationService.prototype.getLastBodyCell = function () {
    var lastBodyRow = this.paginationProxy.getPageLastRow();
    return {
      rowIndex: lastBodyRow,
      rowPinned: null
    };
  };
  CellNavigationService.prototype.getLastFloatingTopRow = function () {
    var lastFloatingRow = this.pinnedRowModel.getPinnedTopRowData().length - 1;
    return {
      rowIndex: lastFloatingRow,
      rowPinned: Constants.PINNED_TOP
    };
  };
  CellNavigationService.prototype.getNextTabbedCell = function (gridCell, backwards) {
    if (backwards) {
      return this.getNextTabbedCellBackwards(gridCell);
    }
    return this.getNextTabbedCellForwards(gridCell);
  };
  CellNavigationService.prototype.getNextTabbedCellForwards = function (gridCell) {
    var displayedColumns = this.columnController.getAllDisplayedColumns();
    var newRowIndex = gridCell.rowIndex;
    var newFloating = gridCell.rowPinned;
    // move along to the next cell
    var newColumn = this.columnController.getDisplayedColAfter(gridCell.column);
    // check if end of the row, and if so, go forward a row
    if (!newColumn) {
      newColumn = displayedColumns[0];
      var rowBelow = this.getRowBelow(gridCell);
      if (missing(rowBelow)) {
        return null;
      }
      // If we are tabbing and there is a paging panel present, tabbing should go
      // to the paging panel instead of loading the next page.
      if (!rowBelow.rowPinned && !this.paginationProxy.isRowInPage(rowBelow)) {
        return null;
      }
      newRowIndex = rowBelow ? rowBelow.rowIndex : null;
      newFloating = rowBelow ? rowBelow.rowPinned : null;
    }
    return {
      rowIndex: newRowIndex,
      column: newColumn,
      rowPinned: newFloating
    };
  };
  CellNavigationService.prototype.getNextTabbedCellBackwards = function (gridCell) {
    var displayedColumns = this.columnController.getAllDisplayedColumns();
    var newRowIndex = gridCell.rowIndex;
    var newFloating = gridCell.rowPinned;
    // move along to the next cell
    var newColumn = this.columnController.getDisplayedColBefore(gridCell.column);
    // check if end of the row, and if so, go forward a row
    if (!newColumn) {
      newColumn = last(displayedColumns);
      var rowAbove = this.getRowAbove({
        rowIndex: gridCell.rowIndex,
        rowPinned: gridCell.rowPinned
      });
      if (missing(rowAbove)) {
        return null;
      }
      // If we are tabbing and there is a paging panel present, tabbing should go
      // to the paging panel instead of loading the next page.
      if (!rowAbove.rowPinned && !this.paginationProxy.isRowInPage(rowAbove)) {
        return null;
      }
      newRowIndex = rowAbove ? rowAbove.rowIndex : null;
      newFloating = rowAbove ? rowAbove.rowPinned : null;
    }
    return {
      rowIndex: newRowIndex,
      column: newColumn,
      rowPinned: newFloating
    };
  };
  __decorate$1l([Autowired('columnController')], CellNavigationService.prototype, "columnController", void 0);
  __decorate$1l([Autowired('rowModel')], CellNavigationService.prototype, "rowModel", void 0);
  __decorate$1l([Autowired('pinnedRowModel')], CellNavigationService.prototype, "pinnedRowModel", void 0);
  __decorate$1l([Autowired('paginationProxy')], CellNavigationService.prototype, "paginationProxy", void 0);
  CellNavigationService = __decorate$1l([Bean('cellNavigationService')], CellNavigationService);
  return CellNavigationService;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1s =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1m =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ValueFormatterService = /** @class */function (_super) {
  __extends$1s(ValueFormatterService, _super);
  function ValueFormatterService() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ValueFormatterService.prototype.formatValue = function (column, node, $scope, value, suppliedFormatter, useFormatterFromColumn) {
    if (useFormatterFromColumn === void 0) {
      useFormatterFromColumn = true;
    }
    var result = null;
    var formatter;
    var colDef = column.getColDef();
    if (suppliedFormatter) {
      // use supplied formatter if provided, e.g. set filter items can have their own value formatters
      formatter = suppliedFormatter;
    } else if (useFormatterFromColumn) {
      // if row is pinned, give preference to the pinned formatter
      formatter = node && node.rowPinned && colDef.pinnedRowValueFormatter ? colDef.pinnedRowValueFormatter : colDef.valueFormatter;
    }
    if (formatter) {
      var params = {
        value: value,
        node: node,
        data: node ? node.data : null,
        colDef: colDef,
        column: column,
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        context: this.gridOptionsWrapper.getContext()
      };
      // originally we put the angular 1 scope here, but we don't want the scope
      // in the params interface, as other frameworks will see the interface, and
      // angular 1 is not cool any more. so we hack the scope in here (we cannot
      // include it above, as it's not in the interface, so would cause a compile error).
      // in the future, when we stop supporting angular 1, we can take this out.
      params.$scope = $scope;
      result = this.expressionService.evaluate(formatter, params);
    } else if (colDef.refData) {
      return colDef.refData[value] || '';
    }
    // if we don't do this, then arrays get displayed as 1,2,3, but we want 1, 2, 3 (i.e. with spaces)
    if (result == null && Array.isArray(value)) {
      result = value.join(', ');
    }
    return result;
  };
  __decorate$1m([Autowired('expressionService')], ValueFormatterService.prototype, "expressionService", void 0);
  ValueFormatterService = __decorate$1m([Bean('valueFormatterService')], ValueFormatterService);
  return ValueFormatterService;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1t =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AgRadioButton = /** @class */function (_super) {
  __extends$1t(AgRadioButton, _super);
  function AgRadioButton(config) {
    return _super.call(this, config, 'ag-radio-button', 'radio') || this;
  }
  AgRadioButton.prototype.isSelected = function () {
    return this.eInput.checked;
  };
  AgRadioButton.prototype.toggle = function () {
    // do not allow an active radio button to be deselected
    if (!this.isSelected()) {
      this.setValue(true);
    }
  };
  AgRadioButton.prototype.addInputListeners = function () {
    _super.prototype.addInputListeners.call(this);
    this.addManagedListener(this.eventService, Events.EVENT_CHECKBOX_CHANGED, this.onChange.bind(this));
  };
  /**
   * This ensures that if another radio button in the same named group is selected, we deselect this radio button.
   * By default the browser does this for you, but we are managing classes ourselves in order to ensure input
   * elements are styled correctly in IE11, and the DOM 'changed' event is only fired when a button is selected,
   * not deselected, so we need to use our own event.
   */
  AgRadioButton.prototype.onChange = function (event) {
    if (event.selected && event.name && this.eInput.name && this.eInput.name === event.name && event.id && this.eInput.id !== event.id) {
      this.setValue(false, true);
    }
  };
  return AgRadioButton;
}(AgCheckbox);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var OUTSIDE_ANGULAR_EVENTS = ['mouseover', 'mouseout', 'mouseenter', 'mouseleave'];
/** The base frameworks, eg React & Angular 2, override this bean with implementations specific to their requirement. */
var VanillaFrameworkOverrides = /** @class */function () {
  function VanillaFrameworkOverrides() {
    this.isOutsideAngular = function (eventType) {
      return includes(OUTSIDE_ANGULAR_EVENTS, eventType);
    };
  }
  // for Vanilla JS, we use simple timeout
  VanillaFrameworkOverrides.prototype.setTimeout = function (action, timeout) {
    window.setTimeout(action, timeout);
  };
  // for Vanilla JS, we just add the event to the element
  VanillaFrameworkOverrides.prototype.addEventListener = function (element, type, listener, useCapture) {
    element.addEventListener(type, listener, useCapture);
  };
  // for Vanilla JS, we just execute the listener
  VanillaFrameworkOverrides.prototype.dispatchEvent = function (eventType, listener) {
    listener();
  };
  return VanillaFrameworkOverrides;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1u =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1n =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ScrollVisibleService = /** @class */function (_super) {
  __extends$1u(ScrollVisibleService, _super);
  function ScrollVisibleService() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ScrollVisibleService.prototype.postConstruct = function () {
    this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onDisplayedColumnsWidthChanged.bind(this));
  };
  ScrollVisibleService.prototype.onDisplayedColumnsChanged = function () {
    this.update();
  };
  ScrollVisibleService.prototype.onDisplayedColumnsWidthChanged = function () {
    this.update();
  };
  ScrollVisibleService.prototype.update = function () {
    // because of column animation (which takes 200ms), we have to do this twice.
    // eg if user removes cols anywhere except at the RHS, then the cols on the RHS
    // will animate to the left to fill the gap. this animation means just after
    // the cols are removed, the remaining cols are still in the original location
    // at the start of the animation, so pre animation the H scrollbar is still needed,
    // but post animation it is not.
    this.updateImpl();
    setTimeout(this.updateImpl.bind(this), 500);
  };
  ScrollVisibleService.prototype.updateImpl = function () {
    var params = {
      horizontalScrollShowing: this.controllersService.getCenterRowContainerCon().isHorizontalScrollShowing(),
      verticalScrollShowing: this.isVerticalScrollShowing()
    };
    this.setScrollsVisible(params);
  };
  ScrollVisibleService.prototype.setScrollsVisible = function (params) {
    var atLeastOneDifferent = this.horizontalScrollShowing !== params.horizontalScrollShowing || this.verticalScrollShowing !== params.verticalScrollShowing;
    if (atLeastOneDifferent) {
      this.horizontalScrollShowing = params.horizontalScrollShowing;
      this.verticalScrollShowing = params.verticalScrollShowing;
      var event_1 = {
        type: Events.EVENT_SCROLL_VISIBILITY_CHANGED,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(event_1);
    }
  };
  // used by pagination service - to know page height
  ScrollVisibleService.prototype.isHorizontalScrollShowing = function () {
    return this.horizontalScrollShowing;
  };
  // used by header container
  ScrollVisibleService.prototype.isVerticalScrollShowing = function () {
    return this.verticalScrollShowing;
  };
  __decorate$1n([Autowired('columnApi')], ScrollVisibleService.prototype, "columnApi", void 0);
  __decorate$1n([Autowired('gridApi')], ScrollVisibleService.prototype, "gridApi", void 0);
  __decorate$1n([Autowired('controllersService')], ScrollVisibleService.prototype, "controllersService", void 0);
  __decorate$1n([PostConstruct], ScrollVisibleService.prototype, "postConstruct", null);
  ScrollVisibleService = __decorate$1n([Bean('scrollVisibleService')], ScrollVisibleService);
  return ScrollVisibleService;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1v =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1o =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var StylingService = /** @class */function (_super) {
  __extends$1v(StylingService, _super);
  function StylingService() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  StylingService.prototype.processAllCellClasses = function (colDef, params, onApplicableClass, onNotApplicableClass) {
    this.processClassRules(colDef.cellClassRules, params, onApplicableClass, onNotApplicableClass);
    this.processStaticCellClasses(colDef, params, onApplicableClass);
  };
  StylingService.prototype.processClassRules = function (classRules, params, onApplicableClass, onNotApplicableClass) {
    if (isNonNullObject(classRules)) {
      var classNames = Object.keys(classRules);
      for (var i = 0; i < classNames.length; i++) {
        var className = classNames[i];
        var rule = classRules[className];
        var resultOfRule = void 0;
        if (typeof rule === 'string') {
          resultOfRule = this.expressionService.evaluate(rule, params);
        } else if (typeof rule === 'function') {
          resultOfRule = rule(params);
        }
        if (resultOfRule) {
          onApplicableClass(className);
        } else if (onNotApplicableClass) {
          onNotApplicableClass(className);
        }
      }
    }
  };
  StylingService.prototype.processStaticCellClasses = function (colDef, params, onApplicableClass) {
    var cellClass = colDef.cellClass;
    if (cellClass) {
      var classOrClasses = void 0;
      if (typeof colDef.cellClass === 'function') {
        var cellClassFunc = colDef.cellClass;
        classOrClasses = cellClassFunc(params);
      } else {
        classOrClasses = colDef.cellClass;
      }
      if (typeof classOrClasses === 'string') {
        onApplicableClass(classOrClasses);
      } else if (Array.isArray(classOrClasses)) {
        classOrClasses.forEach(function (cssClassItem) {
          onApplicableClass(cssClassItem);
        });
      }
    }
  };
  __decorate$1o([Autowired('expressionService')], StylingService.prototype, "expressionService", void 0);
  StylingService = __decorate$1o([Bean('stylingService')], StylingService);
  return StylingService;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1w =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1p =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ColumnHoverService = /** @class */function (_super) {
  __extends$1w(ColumnHoverService, _super);
  function ColumnHoverService() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ColumnHoverService.prototype.setMouseOver = function (columns) {
    this.selectedColumns = columns;
    var event = {
      type: Events.EVENT_COLUMN_HOVER_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(event);
  };
  ColumnHoverService.prototype.clearMouseOver = function () {
    this.selectedColumns = null;
    var event = {
      type: Events.EVENT_COLUMN_HOVER_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(event);
  };
  ColumnHoverService.prototype.isHovered = function (column) {
    return !!this.selectedColumns && this.selectedColumns.indexOf(column) >= 0;
  };
  __decorate$1p([Autowired('columnApi')], ColumnHoverService.prototype, "columnApi", void 0);
  __decorate$1p([Autowired('gridApi')], ColumnHoverService.prototype, "gridApi", void 0);
  ColumnHoverService = __decorate$1p([Bean('columnHoverService')], ColumnHoverService);
  return ColumnHoverService;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1x =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1q =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ColumnAnimationService = /** @class */function (_super) {
  __extends$1x(ColumnAnimationService, _super);
  function ColumnAnimationService() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.executeNextFuncs = [];
    _this.executeLaterFuncs = [];
    _this.active = false;
    _this.animationThreadCount = 0;
    return _this;
  }
  ColumnAnimationService.prototype.postConstruct = function () {
    var _this = this;
    this.controllersService.whenReady(function (p) {
      return _this.gridBodyCon = p.gridBodyCon;
    });
  };
  ColumnAnimationService.prototype.isActive = function () {
    return this.active;
  };
  ColumnAnimationService.prototype.start = function () {
    if (this.active) {
      return;
    }
    if (this.gridOptionsWrapper.isSuppressColumnMoveAnimation()) {
      return;
    }
    // if doing RTL, we don't animate open / close as due to how the pixels are inverted,
    // the animation moves all the row the the right rather than to the left (ie it's the static
    // columns that actually get their coordinates updated)
    if (this.gridOptionsWrapper.isEnableRtl()) {
      return;
    }
    this.ensureAnimationCssClassPresent();
    this.active = true;
  };
  ColumnAnimationService.prototype.finish = function () {
    if (!this.active) {
      return;
    }
    this.flush();
    this.active = false;
  };
  ColumnAnimationService.prototype.executeNextVMTurn = function (func) {
    if (this.active) {
      this.executeNextFuncs.push(func);
    } else {
      func();
    }
  };
  ColumnAnimationService.prototype.executeLaterVMTurn = function (func) {
    if (this.active) {
      this.executeLaterFuncs.push(func);
    } else {
      func();
    }
  };
  ColumnAnimationService.prototype.ensureAnimationCssClassPresent = function () {
    var _this = this;
    // up the count, so we can tell if someone else has updated the count
    // by the time the 'wait' func executes
    this.animationThreadCount++;
    var animationThreadCountCopy = this.animationThreadCount;
    this.gridBodyCon.setColumnMovingCss(true);
    this.executeLaterFuncs.push(function () {
      // only remove the class if this thread was the last one to update it
      if (_this.animationThreadCount === animationThreadCountCopy) {
        _this.gridBodyCon.setColumnMovingCss(false);
      }
    });
  };
  ColumnAnimationService.prototype.flush = function () {
    var nowFuncs = this.executeNextFuncs;
    this.executeNextFuncs = [];
    var waitFuncs = this.executeLaterFuncs;
    this.executeLaterFuncs = [];
    if (nowFuncs.length === 0 && waitFuncs.length === 0) {
      return;
    }
    window.setTimeout(function () {
      return nowFuncs.forEach(function (func) {
        return func();
      });
    }, 0);
    window.setTimeout(function () {
      return waitFuncs.forEach(function (func) {
        return func();
      });
    }, 300);
  };
  __decorate$1q([Autowired('controllersService')], ColumnAnimationService.prototype, "controllersService", void 0);
  __decorate$1q([PostConstruct], ColumnAnimationService.prototype, "postConstruct", null);
  ColumnAnimationService = __decorate$1q([Bean('columnAnimationService')], ColumnAnimationService);
  return ColumnAnimationService;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1y =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1r =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AutoGroupColService = /** @class */function (_super) {
  __extends$1y(AutoGroupColService, _super);
  function AutoGroupColService() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  AutoGroupColService_1 = AutoGroupColService;
  AutoGroupColService.prototype.createAutoGroupColumns = function (rowGroupColumns) {
    var _this = this;
    var groupAutoColumns = [];
    var doingTreeData = this.gridOptionsWrapper.isTreeData();
    var doingMultiAutoColumn = this.gridOptionsWrapper.isGroupMultiAutoColumn();
    if (doingTreeData && doingMultiAutoColumn) {
      console.warn('AG Grid: you cannot mix groupMultiAutoColumn with treeData, only one column can be used to display groups when doing tree data');
      doingMultiAutoColumn = false;
    }
    // if doing groupMultiAutoColumn, then we call the method multiple times, once
    // for each column we are grouping by
    if (doingMultiAutoColumn) {
      rowGroupColumns.forEach(function (rowGroupCol, index) {
        groupAutoColumns.push(_this.createOneAutoGroupColumn(rowGroupCol, index));
      });
    } else {
      groupAutoColumns.push(this.createOneAutoGroupColumn());
    }
    return groupAutoColumns;
  };
  // rowGroupCol and index are missing if groupMultiAutoColumn=false
  AutoGroupColService.prototype.createOneAutoGroupColumn = function (rowGroupCol, index) {
    // if one provided by user, use it, otherwise create one
    var defaultAutoColDef = this.generateDefaultColDef(rowGroupCol);
    // if doing multi, set the field
    var colId;
    if (rowGroupCol) {
      colId = Constants.GROUP_AUTO_COLUMN_ID + "-" + rowGroupCol.getId();
    } else {
      colId = AutoGroupColService_1.GROUP_AUTO_COLUMN_BUNDLE_ID;
    }
    var userAutoColDef = this.gridOptionsWrapper.getAutoGroupColumnDef();
    mergeDeep(defaultAutoColDef, userAutoColDef);
    defaultAutoColDef = this.columnFactory.mergeColDefs(defaultAutoColDef);
    defaultAutoColDef.colId = colId;
    // For tree data the filter is always allowed
    if (!this.gridOptionsWrapper.isTreeData()) {
      // we would only allow filter if the user has provided field or value getter. otherwise the filter
      // would not be able to work.
      var noFieldOrValueGetter = missing(defaultAutoColDef.field) && missing(defaultAutoColDef.valueGetter) && missing(defaultAutoColDef.filterValueGetter);
      if (noFieldOrValueGetter) {
        defaultAutoColDef.filter = false;
      }
    }
    // if showing many cols, we don't want to show more than one with a checkbox for selection
    if (index && index > 0) {
      defaultAutoColDef.headerCheckboxSelection = false;
    }
    var newCol = new Column(defaultAutoColDef, null, colId, true);
    this.context.createBean(newCol);
    return newCol;
  };
  AutoGroupColService.prototype.generateDefaultColDef = function (rowGroupCol) {
    var userDef = this.gridOptionsWrapper.getAutoGroupColumnDef();
    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
    var res = {
      headerName: localeTextFunc('group', 'Group')
    };
    var userHasProvidedGroupCellRenderer = userDef && (userDef.cellRenderer || userDef.cellRendererFramework || userDef.cellRendererSelector);
    // only add the default group cell renderer if user hasn't provided one
    if (!userHasProvidedGroupCellRenderer) {
      res.cellRenderer = 'agGroupCellRenderer';
    }
    // we never allow moving the group column
    // defaultAutoColDef.suppressMovable = true;
    if (rowGroupCol) {
      var colDef = rowGroupCol.getColDef();
      assign(res, {
        // cellRendererParams.groupKey: colDefToCopy.field;
        headerName: this.columnController.getDisplayNameForColumn(rowGroupCol, 'header'),
        headerValueGetter: colDef.headerValueGetter
      });
      if (colDef.cellRenderer) {
        assign(res, {
          cellRendererParams: {
            innerRenderer: colDef.cellRenderer,
            innerRendererParams: colDef.cellRendererParams
          }
        });
      }
      res.showRowGroup = rowGroupCol.getColId();
    } else {
      res.showRowGroup = true;
    }
    return res;
  };
  var AutoGroupColService_1;
  AutoGroupColService.GROUP_AUTO_COLUMN_BUNDLE_ID = Constants.GROUP_AUTO_COLUMN_ID;
  __decorate$1r([Autowired('columnController')], AutoGroupColService.prototype, "columnController", void 0);
  __decorate$1r([Autowired('columnFactory')], AutoGroupColService.prototype, "columnFactory", void 0);
  AutoGroupColService = AutoGroupColService_1 = __decorate$1r([Bean('autoGroupColService')], AutoGroupColService);
  return AutoGroupColService;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1z =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1s =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PaginationProxy = /** @class */function (_super) {
  __extends$1z(PaginationProxy, _super);
  function PaginationProxy() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.currentPage = 0;
    _this.topDisplayedRowIndex = 0;
    _this.bottomDisplayedRowIndex = 0;
    _this.pixelOffset = 0;
    _this.masterRowCount = 0;
    return _this;
  }
  PaginationProxy.prototype.postConstruct = function () {
    this.active = this.gridOptionsWrapper.isPagination();
    this.paginateChildRows = this.gridOptionsWrapper.isPaginateChildRows();
    this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));
    this.addManagedListener(this.gridOptionsWrapper, 'paginationPageSize', this.onPaginationPageSizeChanged.bind(this));
    this.onModelUpdated();
  };
  PaginationProxy.prototype.ensureRowHeightsValid = function (startPixel, endPixel, startLimitIndex, endLimitIndex) {
    var res = this.rowModel.ensureRowHeightsValid(startPixel, endPixel, this.getPageFirstRow(), this.getPageLastRow());
    if (res) {
      this.calculatePages();
    }
    return res;
  };
  PaginationProxy.prototype.onModelUpdated = function (modelUpdatedEvent) {
    this.calculatePages();
    var paginationChangedEvent = {
      type: Events.EVENT_PAGINATION_CHANGED,
      animate: modelUpdatedEvent ? modelUpdatedEvent.animate : false,
      newData: modelUpdatedEvent ? modelUpdatedEvent.newData : false,
      newPage: modelUpdatedEvent ? modelUpdatedEvent.newPage : false,
      keepRenderedRows: modelUpdatedEvent ? modelUpdatedEvent.keepRenderedRows : false,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(paginationChangedEvent);
  };
  PaginationProxy.prototype.onPaginationPageSizeChanged = function () {
    this.calculatePages();
    var paginationChangedEvent = {
      type: Events.EVENT_PAGINATION_CHANGED,
      animate: false,
      newData: false,
      newPage: false,
      // important to keep rendered rows, otherwise every time grid is resized,
      // we would destroy all the rows.
      keepRenderedRows: true,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(paginationChangedEvent);
  };
  PaginationProxy.prototype.goToPage = function (page) {
    if (!this.active || this.currentPage === page) {
      return;
    }
    this.currentPage = page;
    var event = {
      type: Events.EVENT_MODEL_UPDATED,
      animate: false,
      keepRenderedRows: false,
      newData: false,
      newPage: true,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.onModelUpdated(event);
  };
  PaginationProxy.prototype.getPixelOffset = function () {
    return this.pixelOffset;
  };
  PaginationProxy.prototype.getRow = function (index) {
    return this.rowModel.getRow(index);
  };
  PaginationProxy.prototype.getRowNode = function (id) {
    return this.rowModel.getRowNode(id);
  };
  PaginationProxy.prototype.getRowIndexAtPixel = function (pixel) {
    return this.rowModel.getRowIndexAtPixel(pixel);
  };
  PaginationProxy.prototype.getCurrentPageHeight = function () {
    if (missing(this.topRowBounds) || missing(this.bottomRowBounds)) {
      return 0;
    }
    return Math.max(this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight - this.topRowBounds.rowTop, 0);
  };
  PaginationProxy.prototype.getCurrentPagePixelRange = function () {
    var pageFirstPixel = this.topRowBounds ? this.topRowBounds.rowTop : 0;
    var pageLastPixel = this.bottomRowBounds ? this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight : 0;
    return {
      pageFirstPixel: pageFirstPixel,
      pageLastPixel: pageLastPixel
    };
  };
  PaginationProxy.prototype.isRowPresent = function (rowNode) {
    if (!this.rowModel.isRowPresent(rowNode)) {
      return false;
    }
    var nodeIsInPage = rowNode.rowIndex >= this.topDisplayedRowIndex && rowNode.rowIndex <= this.bottomDisplayedRowIndex;
    return nodeIsInPage;
  };
  PaginationProxy.prototype.isEmpty = function () {
    return this.rowModel.isEmpty();
  };
  PaginationProxy.prototype.isRowsToRender = function () {
    return this.rowModel.isRowsToRender();
  };
  PaginationProxy.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {
    return this.rowModel.getNodesInRangeForSelection(firstInRange, lastInRange);
  };
  PaginationProxy.prototype.forEachNode = function (callback) {
    return this.rowModel.forEachNode(callback);
  };
  PaginationProxy.prototype.getType = function () {
    return this.rowModel.getType();
  };
  PaginationProxy.prototype.getRowBounds = function (index) {
    var res = this.rowModel.getRowBounds(index);
    res.rowIndex = index;
    return res;
  };
  PaginationProxy.prototype.getPageFirstRow = function () {
    return this.topRowBounds ? this.topRowBounds.rowIndex : -1;
  };
  PaginationProxy.prototype.getPageLastRow = function () {
    return this.bottomRowBounds ? this.bottomRowBounds.rowIndex : -1;
  };
  PaginationProxy.prototype.getRowCount = function () {
    return this.rowModel.getRowCount();
  };
  PaginationProxy.prototype.getPageForIndex = function (index) {
    return Math.floor(index / this.pageSize);
  };
  PaginationProxy.prototype.goToPageWithIndex = function (index) {
    if (!this.active) {
      return;
    }
    var pageNumber = this.getPageForIndex(index);
    this.goToPage(pageNumber);
  };
  PaginationProxy.prototype.isRowInPage = function (row) {
    if (!this.active) {
      return true;
    }
    var rowPage = this.getPageForIndex(row.rowIndex);
    return rowPage === this.currentPage;
  };
  PaginationProxy.prototype.isLastPageFound = function () {
    return this.rowModel.isLastRowIndexKnown();
  };
  PaginationProxy.prototype.getCurrentPage = function () {
    return this.currentPage;
  };
  PaginationProxy.prototype.goToNextPage = function () {
    this.goToPage(this.currentPage + 1);
  };
  PaginationProxy.prototype.goToPreviousPage = function () {
    this.goToPage(this.currentPage - 1);
  };
  PaginationProxy.prototype.goToFirstPage = function () {
    this.goToPage(0);
  };
  PaginationProxy.prototype.goToLastPage = function () {
    var rowCount = this.rowModel.getRowCount();
    var lastPage = Math.floor(rowCount / this.pageSize);
    this.goToPage(lastPage);
  };
  PaginationProxy.prototype.getPageSize = function () {
    return this.pageSize;
  };
  PaginationProxy.prototype.getTotalPages = function () {
    return this.totalPages;
  };
  PaginationProxy.prototype.setPageSize = function () {
    // show put this into super class
    this.pageSize = this.gridOptionsWrapper.getPaginationPageSize();
    if (this.pageSize == null || this.pageSize < 1) {
      this.pageSize = 100;
    }
  };
  PaginationProxy.prototype.calculatePages = function () {
    if (this.active) {
      this.setPageSize();
      if (this.paginateChildRows) {
        this.calculatePagesAllRows();
      } else {
        this.calculatePagesMasterRowsOnly();
      }
    } else {
      this.calculatedPagesNotActive();
    }
    this.topRowBounds = this.rowModel.getRowBounds(this.topDisplayedRowIndex);
    if (this.topRowBounds) {
      this.topRowBounds.rowIndex = this.topDisplayedRowIndex;
    }
    this.bottomRowBounds = this.rowModel.getRowBounds(this.bottomDisplayedRowIndex);
    if (this.bottomRowBounds) {
      this.bottomRowBounds.rowIndex = this.bottomDisplayedRowIndex;
    }
    this.setPixelOffset(exists(this.topRowBounds) ? this.topRowBounds.rowTop : 0);
  };
  PaginationProxy.prototype.setPixelOffset = function (value) {
    if (this.pixelOffset === value) {
      return;
    }
    this.pixelOffset = value;
    this.eventService.dispatchEvent({
      type: Events.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED
    });
  };
  PaginationProxy.prototype.setZeroRows = function () {
    this.masterRowCount = 0;
    this.topDisplayedRowIndex = 0;
    this.bottomDisplayedRowIndex = -1;
    this.currentPage = 0;
    this.totalPages = 0;
  };
  PaginationProxy.prototype.calculatePagesMasterRowsOnly = function () {
    // const csrm = <ClientSideRowModel> this.rowModel;
    // const rootNode = csrm.getRootNode();
    // const masterRows = rootNode.childrenAfterSort;
    this.masterRowCount = this.rowModel.getTopLevelRowCount();
    // we say <=0 (rather than =0) as viewport returns -1 when no rows
    if (this.masterRowCount <= 0) {
      this.setZeroRows();
      return;
    }
    var masterLastRowIndex = this.masterRowCount - 1;
    this.totalPages = Math.floor(masterLastRowIndex / this.pageSize) + 1;
    if (this.currentPage >= this.totalPages) {
      this.currentPage = this.totalPages - 1;
    }
    if (!isNumeric(this.currentPage) || this.currentPage < 0) {
      this.currentPage = 0;
    }
    var masterPageStartIndex = this.pageSize * this.currentPage;
    var masterPageEndIndex = this.pageSize * (this.currentPage + 1) - 1;
    if (masterPageEndIndex > masterLastRowIndex) {
      masterPageEndIndex = masterLastRowIndex;
    }
    this.topDisplayedRowIndex = this.rowModel.getTopLevelRowDisplayedIndex(masterPageStartIndex);
    // masterRows[masterPageStartIndex].rowIndex;
    if (masterPageEndIndex === masterLastRowIndex) {
      // if showing the last master row, then we want to show the very last row of the model
      this.bottomDisplayedRowIndex = this.rowModel.getRowCount() - 1;
    } else {
      var firstIndexNotToShow = this.rowModel.getTopLevelRowDisplayedIndex(masterPageEndIndex + 1);
      //masterRows[masterPageEndIndex + 1].rowIndex;
      // this gets the index of the last child - eg current row is open, we want to display all children,
      // the index of the last child is one less than the index of the next parent row.
      this.bottomDisplayedRowIndex = firstIndexNotToShow - 1;
    }
  };
  PaginationProxy.prototype.getMasterRowCount = function () {
    return this.masterRowCount;
  };
  PaginationProxy.prototype.calculatePagesAllRows = function () {
    this.masterRowCount = this.rowModel.getRowCount();
    if (this.masterRowCount === 0) {
      this.setZeroRows();
      return;
    }
    var maxRowIndex = this.masterRowCount - 1;
    this.totalPages = Math.floor(maxRowIndex / this.pageSize) + 1;
    if (this.currentPage >= this.totalPages) {
      this.currentPage = this.totalPages - 1;
    }
    if (!isNumeric(this.currentPage) || this.currentPage < 0) {
      this.currentPage = 0;
    }
    this.topDisplayedRowIndex = this.pageSize * this.currentPage;
    this.bottomDisplayedRowIndex = this.pageSize * (this.currentPage + 1) - 1;
    if (this.bottomDisplayedRowIndex > maxRowIndex) {
      this.bottomDisplayedRowIndex = maxRowIndex;
    }
  };
  PaginationProxy.prototype.calculatedPagesNotActive = function () {
    this.pageSize = this.rowModel.getRowCount();
    this.totalPages = 1;
    this.currentPage = 0;
    this.topDisplayedRowIndex = 0;
    this.bottomDisplayedRowIndex = this.rowModel.getRowCount() - 1;
  };
  __decorate$1s([Autowired('rowModel')], PaginationProxy.prototype, "rowModel", void 0);
  __decorate$1s([Autowired('columnApi')], PaginationProxy.prototype, "columnApi", void 0);
  __decorate$1s([Autowired('gridApi')], PaginationProxy.prototype, "gridApi", void 0);
  __decorate$1s([PostConstruct], PaginationProxy.prototype, "postConstruct", null);
  PaginationProxy = __decorate$1s([Bean('paginationProxy')], PaginationProxy);
  return PaginationProxy;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1A =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1t =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PaginationAutoPageSizeService = /** @class */function (_super) {
  __extends$1A(PaginationAutoPageSizeService, _super);
  function PaginationAutoPageSizeService() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  PaginationAutoPageSizeService.prototype.postConstruct = function () {
    var _this = this;
    this.controllersService.whenReady(function (p) {
      _this.centerRowContainerCon = p.centerRowContainerCon;
      _this.addManagedListener(_this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, _this.onBodyHeightChanged.bind(_this));
      _this.addManagedListener(_this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, _this.onScrollVisibilityChanged.bind(_this));
      _this.checkPageSize();
    });
  };
  PaginationAutoPageSizeService.prototype.notActive = function () {
    return !this.gridOptionsWrapper.isPaginationAutoPageSize();
  };
  PaginationAutoPageSizeService.prototype.onScrollVisibilityChanged = function () {
    this.checkPageSize();
  };
  PaginationAutoPageSizeService.prototype.onBodyHeightChanged = function () {
    this.checkPageSize();
  };
  PaginationAutoPageSizeService.prototype.checkPageSize = function () {
    if (this.notActive()) {
      return;
    }
    var rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();
    var bodyHeight = this.centerRowContainerCon.getViewportSizeFeature().getBodyHeight();
    if (bodyHeight > 0) {
      var newPageSize = Math.floor(bodyHeight / rowHeight);
      this.gridOptionsWrapper.setProperty('paginationPageSize', newPageSize);
    }
  };
  __decorate$1t([Autowired('controllersService')], PaginationAutoPageSizeService.prototype, "controllersService", void 0);
  __decorate$1t([PostConstruct], PaginationAutoPageSizeService.prototype, "postConstruct", null);
  PaginationAutoPageSizeService = __decorate$1t([Bean('paginationAutoPageSizeService')], PaginationAutoPageSizeService);
  return PaginationAutoPageSizeService;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1B =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1u =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ValueCache = /** @class */function (_super) {
  __extends$1B(ValueCache, _super);
  function ValueCache() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.cacheVersion = 0;
    return _this;
  }
  ValueCache.prototype.init = function () {
    this.active = this.gridOptionsWrapper.isValueCache();
    this.neverExpires = this.gridOptionsWrapper.isValueCacheNeverExpires();
  };
  ValueCache.prototype.onDataChanged = function () {
    if (this.neverExpires) {
      return;
    }
    this.expire();
  };
  ValueCache.prototype.expire = function () {
    this.cacheVersion++;
  };
  ValueCache.prototype.setValue = function (rowNode, colId, value) {
    if (this.active) {
      if (rowNode.__cacheVersion !== this.cacheVersion) {
        rowNode.__cacheVersion = this.cacheVersion;
        rowNode.__cacheData = {};
      }
      rowNode.__cacheData[colId] = value;
    }
  };
  ValueCache.prototype.getValue = function (rowNode, colId) {
    if (!this.active || rowNode.__cacheVersion !== this.cacheVersion) {
      return undefined;
    }
    return rowNode.__cacheData[colId];
  };
  __decorate$1u([PostConstruct], ValueCache.prototype, "init", null);
  ValueCache = __decorate$1u([Bean('valueCache')], ValueCache);
  return ValueCache;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1C =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1v =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ChangeDetectionService = /** @class */function (_super) {
  __extends$1C(ChangeDetectionService, _super);
  function ChangeDetectionService() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ChangeDetectionService.prototype.init = function () {
    if (this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
      this.clientSideRowModel = this.rowModel;
    }
    this.addManagedListener(this.eventService, Events.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged.bind(this));
  };
  ChangeDetectionService.prototype.onCellValueChanged = function (event) {
    // Clipboard service manages its own change detection, so no need to do it here.
    // The clipboard manages its own as otherwise this would happen once for every cell
    // that got updated as part of a paste operation, so e.g. if 100 cells in a paste operation,
    // this doChangeDetection would get called 100 times (once for each cell), instead clipboard
    // service executes the logic we have here once (in essence batching up all cell changes
    // into one change detection).
    if (event.source === Constants.SOURCE_PASTE) {
      return;
    }
    this.doChangeDetection(event.node, event.column);
  };
  ChangeDetectionService.prototype.doChangeDetection = function (rowNode, column) {
    if (this.gridOptionsWrapper.isSuppressChangeDetection()) {
      return;
    }
    // step 1 of change detection is to update the aggregated values
    if (this.clientSideRowModel && !rowNode.isRowPinned()) {
      var onlyChangedColumns = this.gridOptionsWrapper.isAggregateOnlyChangedColumns();
      var changedPath = new ChangedPath(onlyChangedColumns, this.clientSideRowModel.getRootNode());
      changedPath.addParentNode(rowNode.parent, [column]);
      this.clientSideRowModel.doAggregate(changedPath);
    }
    // step 2 of change detection is to refresh the cells
    this.rowRenderer.refreshCells();
  };
  __decorate$1v([Autowired('rowModel')], ChangeDetectionService.prototype, "rowModel", void 0);
  __decorate$1v([Autowired('rowRenderer')], ChangeDetectionService.prototype, "rowRenderer", void 0);
  __decorate$1v([PostConstruct], ChangeDetectionService.prototype, "init", null);
  ChangeDetectionService = __decorate$1v([Bean('changeDetectionService')], ChangeDetectionService);
  return ChangeDetectionService;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1D =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1w =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param$8 =  false || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};
var AlignedGridsService = /** @class */function (_super) {
  __extends$1D(AlignedGridsService, _super);
  function AlignedGridsService() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    // flag to mark if we are consuming. to avoid cyclic events (ie other grid firing back to master
    // while processing a master event) we mark this if consuming an event, and if we are, then
    // we don't fire back any events.
    _this.consuming = false;
    return _this;
  }
  AlignedGridsService.prototype.setBeans = function (loggerFactory) {
    this.logger = loggerFactory.create('AlignedGridsService');
  };
  AlignedGridsService.prototype.init = function () {
    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.fireColumnEvent.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.fireColumnEvent.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.fireColumnEvent.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, this.fireColumnEvent.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_RESIZED, this.fireColumnEvent.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, this.fireScrollEvent.bind(this));
  };
  // common logic across all the fire methods
  AlignedGridsService.prototype.fireEvent = function (callback) {
    // if we are already consuming, then we are acting on an event from a master,
    // so we don't cause a cyclic firing of events
    if (this.consuming) {
      return;
    }
    // iterate through the aligned grids, and pass each aligned grid service to the callback
    var otherGrids = this.gridOptionsWrapper.getAlignedGrids();
    if (otherGrids) {
      otherGrids.forEach(function (otherGridOptions) {
        if (otherGridOptions.api) {
          var alignedGridService = otherGridOptions.api.__getAlignedGridService();
          callback(alignedGridService);
        }
      });
    }
  };
  // common logic across all consume methods. very little common logic, however extracting
  // guarantees consistency across the methods.
  AlignedGridsService.prototype.onEvent = function (callback) {
    this.consuming = true;
    callback();
    this.consuming = false;
  };
  AlignedGridsService.prototype.fireColumnEvent = function (event) {
    this.fireEvent(function (alignedGridsService) {
      alignedGridsService.onColumnEvent(event);
    });
  };
  AlignedGridsService.prototype.fireScrollEvent = function (event) {
    if (event.direction !== 'horizontal') {
      return;
    }
    this.fireEvent(function (alignedGridsService) {
      alignedGridsService.onScrollEvent(event);
    });
  };
  AlignedGridsService.prototype.onScrollEvent = function (event) {
    var _this = this;
    this.onEvent(function () {
      var gridBodyCon = _this.controllersService.getGridBodyController();
      gridBodyCon.getScrollFeature().setHorizontalScrollPosition(event.left);
    });
  };
  AlignedGridsService.prototype.getMasterColumns = function (event) {
    var result = [];
    if (event.columns) {
      event.columns.forEach(function (column) {
        result.push(column);
      });
    } else if (event.column) {
      result.push(event.column);
    }
    return result;
  };
  AlignedGridsService.prototype.getColumnIds = function (event) {
    var result = [];
    if (event.columns) {
      event.columns.forEach(function (column) {
        result.push(column.getColId());
      });
    } else if (event.column) {
      result.push(event.column.getColId());
    }
    return result;
  };
  AlignedGridsService.prototype.onColumnEvent = function (event) {
    var _this = this;
    this.onEvent(function () {
      switch (event.type) {
        case Events.EVENT_COLUMN_MOVED:
        case Events.EVENT_COLUMN_VISIBLE:
        case Events.EVENT_COLUMN_PINNED:
        case Events.EVENT_COLUMN_RESIZED:
          var colEvent = event;
          _this.processColumnEvent(colEvent);
          break;
        case Events.EVENT_COLUMN_GROUP_OPENED:
          var groupOpenedEvent = event;
          _this.processGroupOpenedEvent(groupOpenedEvent);
          break;
        case Events.EVENT_COLUMN_PIVOT_CHANGED:
          // we cannot support pivoting with aligned grids as the columns will be out of sync as the
          // grids will have columns created based on the row data of the grid.
          console.warn('AG Grid: pivoting is not supported with aligned grids. ' + 'You can only use one of these features at a time in a grid.');
          break;
      }
    });
  };
  AlignedGridsService.prototype.processGroupOpenedEvent = function (groupOpenedEvent) {
    // likewise for column group
    var masterColumnGroup = groupOpenedEvent.columnGroup;
    var otherColumnGroup = null;
    if (masterColumnGroup) {
      var groupId = masterColumnGroup.getGroupId();
      otherColumnGroup = this.columnController.getOriginalColumnGroup(groupId);
    }
    if (masterColumnGroup && !otherColumnGroup) {
      return;
    }
    this.logger.log('onColumnEvent-> processing ' + groupOpenedEvent + ' expanded = ' + masterColumnGroup.isExpanded());
    this.columnController.setColumnGroupOpened(otherColumnGroup, masterColumnGroup.isExpanded(), "alignedGridChanged");
  };
  AlignedGridsService.prototype.processColumnEvent = function (colEvent) {
    var _this = this;
    // the column in the event is from the master grid. need to
    // look up the equivalent from this (other) grid
    var masterColumn = colEvent.column;
    var otherColumn = null;
    if (masterColumn) {
      otherColumn = this.columnController.getPrimaryColumn(masterColumn.getColId());
    }
    // if event was with respect to a master column, that is not present in this
    // grid, then we ignore the event
    if (masterColumn && !otherColumn) {
      return;
    }
    // in time, all the methods below should use the column ids, it's a more generic way
    // of handling columns, and also allows for single or multi column events
    var masterColumns = this.getMasterColumns(colEvent);
    switch (colEvent.type) {
      case Events.EVENT_COLUMN_MOVED:
        // when the user moves columns via setColumnState, we can't depend on moving specific columns
        // to an index, as there maybe be many indexes columns moved to (as wasn't result of a mouse drag).
        // so only way to be sure is match the order of all columns using Column State.
        {
          var movedEvent = colEvent;
          var srcColState = colEvent.columnApi.getColumnState();
          var destColState = srcColState.map(function (s) {
            return {
              colId: s.colId
            };
          });
          this.columnController.applyColumnState({
            state: destColState,
            applyOrder: true
          }, "alignedGridChanged");
          this.logger.log("onColumnEvent-> processing " + colEvent.type + " toIndex = " + movedEvent.toIndex);
        }
        break;
      case Events.EVENT_COLUMN_VISIBLE:
        // when the user changes visibility via setColumnState, we can't depend on visibility flag in event
        // as there maybe be mix of true/false (as wasn't result of a mouse click to set visiblity).
        // so only way to be sure is match the visibility of all columns using Column State.
        {
          var visibleEvent = colEvent;
          var srcColState = colEvent.columnApi.getColumnState();
          var destColState = srcColState.map(function (s) {
            return {
              colId: s.colId,
              hide: s.hide
            };
          });
          this.columnController.applyColumnState({
            state: destColState
          }, "alignedGridChanged");
          this.logger.log("onColumnEvent-> processing " + colEvent.type + " visible = " + visibleEvent.visible);
        }
        break;
      case Events.EVENT_COLUMN_PINNED:
        {
          var pinnedEvent = colEvent;
          var srcColState = colEvent.columnApi.getColumnState();
          var destColState = srcColState.map(function (s) {
            return {
              colId: s.colId,
              pinned: s.pinned
            };
          });
          this.columnController.applyColumnState({
            state: destColState
          }, "alignedGridChanged");
          this.logger.log("onColumnEvent-> processing " + colEvent.type + " pinned = " + pinnedEvent.pinned);
        }
        break;
      case Events.EVENT_COLUMN_RESIZED:
        var resizedEvent_1 = colEvent;
        masterColumns.forEach(function (column) {
          _this.logger.log("onColumnEvent-> processing " + colEvent.type + " actualWidth = " + column.getActualWidth());
          var columnWidths = [{
            key: column.getColId(),
            newWidth: column.getActualWidth()
          }];
          _this.columnController.setColumnWidths(columnWidths, false, resizedEvent_1.finished, "alignedGridChanged");
        });
        break;
    }
    var gridBodyCon = this.controllersService.getGridBodyController();
    var isVerticalScrollShowing = gridBodyCon.isVerticalScrollShowing();
    var alignedGrids = this.gridOptionsWrapper.getAlignedGrids();
    if (alignedGrids) {
      alignedGrids.forEach(function (grid) {
        if (grid.api) {
          grid.api.setAlwaysShowVerticalScroll(isVerticalScrollShowing);
        }
      });
    }
  };
  __decorate$1w([Autowired('columnController')], AlignedGridsService.prototype, "columnController", void 0);
  __decorate$1w([Autowired('controllersService')], AlignedGridsService.prototype, "controllersService", void 0);
  __decorate$1w([__param$8(0, Qualifier('loggerFactory'))], AlignedGridsService.prototype, "setBeans", null);
  __decorate$1w([PostConstruct], AlignedGridsService.prototype, "init", null);
  AlignedGridsService = __decorate$1w([Bean('alignedGridsService')], AlignedGridsService);
  return AlignedGridsService;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1E =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1x =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AgComponentUtils = /** @class */function (_super) {
  __extends$1E(AgComponentUtils, _super);
  function AgComponentUtils() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  AgComponentUtils.prototype.adaptFunction = function (propertyName, hardcodedJsFunction, componentFromFramework, source) {
    if (hardcodedJsFunction == null) {
      return {
        component: null,
        componentFromFramework: componentFromFramework,
        source: source,
        paramsFromSelector: null
      };
    }
    var metadata = this.componentMetadataProvider.retrieve(propertyName);
    if (metadata && metadata.functionAdapter) {
      return {
        componentFromFramework: componentFromFramework,
        component: metadata.functionAdapter(hardcodedJsFunction),
        source: source,
        paramsFromSelector: null
      };
    }
    return null;
  };
  AgComponentUtils.prototype.adaptCellRendererFunction = function (callback) {
    var Adapter = /** @class */function () {
      function Adapter() {}
      Adapter.prototype.refresh = function (params) {
        return false;
      };
      Adapter.prototype.getGui = function () {
        var callbackResult = callback(this.params);
        var type = typeof callbackResult;
        if (type === 'string' || type === 'number' || type === 'boolean') {
          return loadTemplate('<span>' + callbackResult + '</span>');
        }
        return callbackResult;
      };
      Adapter.prototype.init = function (params) {
        this.params = params;
      };
      return Adapter;
    }();
    return Adapter;
  };
  AgComponentUtils.prototype.doesImplementIComponent = function (candidate) {
    if (!candidate) {
      return false;
    }
    return candidate.prototype && 'getGui' in candidate.prototype;
  };
  __decorate$1x([Autowired("componentMetadataProvider")], AgComponentUtils.prototype, "componentMetadataProvider", void 0);
  AgComponentUtils = __decorate$1x([Bean("agComponentUtils")], AgComponentUtils);
  return AgComponentUtils;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1F =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1y =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ComponentMetadataProvider = /** @class */function (_super) {
  __extends$1F(ComponentMetadataProvider, _super);
  function ComponentMetadataProvider() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ComponentMetadataProvider.prototype.postConstruct = function () {
    this.componentMetaData = {
      dateComponent: {
        mandatoryMethodList: ['getDate', 'setDate'],
        optionalMethodList: ['afterGuiAttached', 'setInputPlaceholder', 'setInputAriaLabel']
      },
      detailCellRenderer: {
        mandatoryMethodList: [],
        optionalMethodList: ['refresh']
      },
      headerComponent: {
        mandatoryMethodList: [],
        optionalMethodList: ['refresh']
      },
      headerGroupComponent: {
        mandatoryMethodList: [],
        optionalMethodList: []
      },
      loadingCellRenderer: {
        mandatoryMethodList: [],
        optionalMethodList: []
      },
      loadingOverlayComponent: {
        mandatoryMethodList: [],
        optionalMethodList: []
      },
      noRowsOverlayComponent: {
        mandatoryMethodList: [],
        optionalMethodList: []
      },
      floatingFilterComponent: {
        mandatoryMethodList: ['onParentModelChanged'],
        optionalMethodList: ['afterGuiAttached']
      },
      floatingFilterWrapperComponent: {
        mandatoryMethodList: [],
        optionalMethodList: []
      },
      cellRenderer: {
        mandatoryMethodList: [],
        optionalMethodList: ['refresh', 'afterGuiAttached'],
        functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
      },
      cellEditor: {
        mandatoryMethodList: ['getValue'],
        optionalMethodList: ['isPopup', 'isCancelBeforeStart', 'isCancelAfterEnd', 'getPopupPosition', 'focusIn', 'focusOut', 'afterGuiAttached']
      },
      innerRenderer: {
        mandatoryMethodList: [],
        optionalMethodList: ['afterGuiAttached'],
        functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
      },
      fullWidthCellRenderer: {
        mandatoryMethodList: [],
        optionalMethodList: ['refresh', 'afterGuiAttached'],
        functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
      },
      pinnedRowCellRenderer: {
        mandatoryMethodList: [],
        optionalMethodList: ['refresh', 'afterGuiAttached'],
        functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
      },
      groupRowRenderer: {
        mandatoryMethodList: [],
        optionalMethodList: ['afterGuiAttached'],
        functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
      },
      filter: {
        mandatoryMethodList: ['isFilterActive', 'doesFilterPass', 'getModel', 'setModel'],
        optionalMethodList: ['afterGuiAttached', 'onNewRowsLoaded', 'getModelAsString', 'onFloatingFilterChanged']
      },
      filterComponent: {
        mandatoryMethodList: ['isFilterActive', 'doesFilterPass', 'getModel', 'setModel'],
        optionalMethodList: ['afterGuiAttached', 'onNewRowsLoaded', 'getModelAsString', 'onFloatingFilterChanged']
      },
      statusPanel: {
        mandatoryMethodList: [],
        optionalMethodList: ['afterGuiAttached']
      },
      toolPanel: {
        mandatoryMethodList: [],
        optionalMethodList: ['refresh', 'afterGuiAttached']
      },
      tooltipComponent: {
        mandatoryMethodList: [],
        optionalMethodList: []
      }
    };
  };
  ComponentMetadataProvider.prototype.retrieve = function (name) {
    return this.componentMetaData[name];
  };
  __decorate$1y([Autowired("agComponentUtils")], ComponentMetadataProvider.prototype, "agComponentUtils", void 0);
  __decorate$1y([PostConstruct], ComponentMetadataProvider.prototype, "postConstruct", null);
  ComponentMetadataProvider = __decorate$1y([Bean("componentMetadataProvider")], ComponentMetadataProvider);
  return ComponentMetadataProvider;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __decorate$1z =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/** Using the IoC has a slight performance consideration, which is no problem most of the
 * time, unless we are trashing objects - which is the case when scrolling and rowComp
 * and cellComp. So for performance reasons, RowComp and CellComp do not get autowired
 * with the IoC. Instead they get passed this object which is all the beans the RowComp
 * and CellComp need. Not autowiring all the cells gives performance improvement. */
var Beans = /** @class */function () {
  function Beans() {}
  Beans.prototype.registerGridComp = function (gridBodyComp) {
    this.gridBodyComp = gridBodyComp;
  };
  Beans.prototype.postConstruct = function () {
    this.doingMasterDetail = this.gridOptionsWrapper.isMasterDetail();
    if (this.gridOptionsWrapper.isRowModelDefault()) {
      this.clientSideRowModel = this.rowModel;
    }
    if (this.gridOptionsWrapper.isRowModelServerSide()) {
      this.serverSideRowModel = this.rowModel;
    }
  };
  __decorate$1z([Autowired('resizeObserverService')], Beans.prototype, "resizeObserverService", void 0);
  __decorate$1z([Autowired('paginationProxy')], Beans.prototype, "paginationProxy", void 0);
  __decorate$1z([Autowired('context')], Beans.prototype, "context", void 0);
  __decorate$1z([Autowired('columnApi')], Beans.prototype, "columnApi", void 0);
  __decorate$1z([Autowired('gridApi')], Beans.prototype, "gridApi", void 0);
  __decorate$1z([Autowired('gridOptionsWrapper')], Beans.prototype, "gridOptionsWrapper", void 0);
  __decorate$1z([Autowired('expressionService')], Beans.prototype, "expressionService", void 0);
  __decorate$1z([Autowired('rowRenderer')], Beans.prototype, "rowRenderer", void 0);
  __decorate$1z([Autowired('$compile')], Beans.prototype, "$compile", void 0);
  __decorate$1z([Autowired('templateService')], Beans.prototype, "templateService", void 0);
  __decorate$1z([Autowired('valueService')], Beans.prototype, "valueService", void 0);
  __decorate$1z([Autowired('eventService')], Beans.prototype, "eventService", void 0);
  __decorate$1z([Autowired('columnController')], Beans.prototype, "columnController", void 0);
  __decorate$1z([Autowired('headerNavigationService')], Beans.prototype, "headerNavigationService", void 0);
  __decorate$1z([Autowired('columnAnimationService')], Beans.prototype, "columnAnimationService", void 0);
  __decorate$1z([Optional('rangeController')], Beans.prototype, "rangeController", void 0);
  __decorate$1z([Autowired('focusController')], Beans.prototype, "focusController", void 0);
  __decorate$1z([Optional('contextMenuFactory')], Beans.prototype, "contextMenuFactory", void 0);
  __decorate$1z([Autowired('popupService')], Beans.prototype, "popupService", void 0);
  __decorate$1z([Autowired('valueFormatterService')], Beans.prototype, "valueFormatterService", void 0);
  __decorate$1z([Autowired('stylingService')], Beans.prototype, "stylingService", void 0);
  __decorate$1z([Autowired('columnHoverService')], Beans.prototype, "columnHoverService", void 0);
  __decorate$1z([Autowired('userComponentFactory')], Beans.prototype, "userComponentFactory", void 0);
  __decorate$1z([Autowired('animationFrameService')], Beans.prototype, "taskQueue", void 0);
  __decorate$1z([Autowired('dragAndDropService')], Beans.prototype, "dragAndDropService", void 0);
  __decorate$1z([Autowired('sortController')], Beans.prototype, "sortController", void 0);
  __decorate$1z([Autowired('filterManager')], Beans.prototype, "filterManager", void 0);
  __decorate$1z([Autowired('rowContainerHeightService')], Beans.prototype, "rowContainerHeightService", void 0);
  __decorate$1z([Autowired('frameworkOverrides')], Beans.prototype, "frameworkOverrides", void 0);
  __decorate$1z([Autowired('detailRowCompCache')], Beans.prototype, "detailRowCompCache", void 0);
  __decorate$1z([Autowired('cellPositionUtils')], Beans.prototype, "cellPositionUtils", void 0);
  __decorate$1z([Autowired('rowPositionUtils')], Beans.prototype, "rowPositionUtils", void 0);
  __decorate$1z([Autowired('selectionController')], Beans.prototype, "selectionController", void 0);
  __decorate$1z([Optional('selectionHandleFactory')], Beans.prototype, "selectionHandleFactory", void 0);
  __decorate$1z([Autowired('rowCssClassCalculator')], Beans.prototype, "rowCssClassCalculator", void 0);
  __decorate$1z([Autowired('rowModel')], Beans.prototype, "rowModel", void 0);
  __decorate$1z([Autowired('controllersService')], Beans.prototype, "controllersService", void 0);
  __decorate$1z([PostConstruct], Beans.prototype, "postConstruct", null);
  Beans = __decorate$1z([Bean('beans')], Beans);
  return Beans;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1G =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1A =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var MAT_GRID_SIZE = 8;
var BASE_GRID_SIZE = 4;
var BALHAM_GRID_SIZE = 4;
var ALPINE_GRID_SIZE = 6;
var HARD_CODED_SIZES = {
  // this item is required for custom themes
  'ag-theme-custom': {
    headerHeight: 25,
    headerCellMinWidth: 24,
    listItemHeight: BASE_GRID_SIZE * 5,
    rowHeight: 25,
    chartMenuPanelWidth: 220
  },
  'ag-theme-material': {
    headerHeight: MAT_GRID_SIZE * 7,
    headerCellMinWidth: 48,
    listItemHeight: MAT_GRID_SIZE * 4,
    rowHeight: MAT_GRID_SIZE * 6,
    chartMenuPanelWidth: 240
  },
  'ag-theme-balham': {
    headerHeight: BALHAM_GRID_SIZE * 8,
    headerCellMinWidth: 24,
    listItemHeight: BALHAM_GRID_SIZE * 6,
    rowHeight: BALHAM_GRID_SIZE * 7,
    chartMenuPanelWidth: 220
  },
  'ag-theme-alpine': {
    headerHeight: ALPINE_GRID_SIZE * 8,
    headerCellMinWidth: 36,
    listItemHeight: ALPINE_GRID_SIZE * 4,
    rowHeight: ALPINE_GRID_SIZE * 7,
    chartMenuPanelWidth: 240
  }
};
/**
 * this object contains a list of Sass variables and an array
 * of CSS styles required to get the correct value.
 * eg. $virtual-item-height requires a structure, so we can get its height.
 * <div class="ag-theme-balham">
 *     <div class="ag-virtual-list-container">
 *         <div class="ag-virtual-list-item"></div>
 *     </div>
 * </div>
 */
var SASS_PROPERTY_BUILDER = {
  headerHeight: ['ag-header-row'],
  headerCellMinWidth: ['ag-header-cell'],
  listItemHeight: ['ag-virtual-list-item'],
  rowHeight: ['ag-row'],
  chartMenuPanelWidth: ['ag-chart-docked-container']
};
var CALCULATED_SIZES = {};
var Environment = /** @class */function (_super) {
  __extends$1G(Environment, _super);
  function Environment() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Environment.prototype.getSassVariable = function (theme, key) {
    var useTheme = 'ag-theme-' + (theme.match('material') ? 'material' : theme.match('balham') ? 'balham' : theme.match('alpine') ? 'alpine' : 'custom');
    var defaultValue = HARD_CODED_SIZES[useTheme][key];
    var calculatedValue = 0;
    if (!CALCULATED_SIZES[theme]) {
      CALCULATED_SIZES[theme] = {};
    }
    var size = CALCULATED_SIZES[theme][key];
    if (size != null) {
      return size;
    }
    if (SASS_PROPERTY_BUILDER[key]) {
      var classList = SASS_PROPERTY_BUILDER[key];
      var div = document.createElement('div');
      addCssClass(div, theme);
      div.style.position = 'absolute';
      var el = classList.reduce(function (prevEl, currentClass) {
        var currentDiv = document.createElement('div');
        currentDiv.style.position = 'static';
        addCssClass(currentDiv, currentClass);
        prevEl.appendChild(currentDiv);
        return currentDiv;
      }, div);
      if (document.body) {
        document.body.appendChild(div);
        var sizeName = key.toLowerCase().indexOf('height') !== -1 ? 'height' : 'width';
        calculatedValue = parseInt(window.getComputedStyle(el)[sizeName], 10);
        document.body.removeChild(div);
      }
    }
    CALCULATED_SIZES[theme][key] = calculatedValue || defaultValue;
    return CALCULATED_SIZES[theme][key];
  };
  Environment.prototype.isThemeDark = function () {
    var theme = this.getTheme().theme;
    return !!theme && theme.indexOf('dark') >= 0;
  };
  Environment.prototype.chartMenuPanelWidth = function () {
    var theme = this.getTheme().themeFamily;
    return this.getSassVariable(theme, 'chartMenuPanelWidth');
  };
  Environment.prototype.getTheme = function () {
    var reg = /\bag-(material|(?:theme-([\w\-]*)))\b/;
    var el = this.eGridDiv;
    var themeMatch = null;
    while (el) {
      themeMatch = reg.exec(el.className);
      if (!themeMatch) {
        el = el.parentElement || undefined;
      } else {
        break;
      }
    }
    if (!themeMatch) {
      return {};
    }
    var theme = themeMatch[0];
    var usingOldTheme = themeMatch[2] === undefined;
    if (usingOldTheme) {
      var newTheme_1 = theme.replace('ag-', 'ag-theme-');
      doOnce(function () {
        return console.warn("AG Grid: As of v19 old theme are no longer provided. Please replace " + theme + " with " + newTheme_1 + ".");
      }, 'using-old-theme');
    }
    return {
      theme: theme,
      el: el,
      themeFamily: theme.replace(/-dark$/, '')
    };
  };
  __decorate$1A([Autowired('eGridDiv')], Environment.prototype, "eGridDiv", void 0);
  Environment = __decorate$1A([Bean('environment')], Environment);
  return Environment;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1H =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1B =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AnimationFrameService = /** @class */function (_super) {
  __extends$1H(AnimationFrameService, _super);
  function AnimationFrameService() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    // p1 and p2 are create tasks are to do with row and cell creation.
    // for them we want to execute according to row order, so we use
    // TaskItem so we know what index the item is for.
    _this.createTasksP1 = {
      list: [],
      sorted: false
    }; // eg drawing back-ground of rows
    _this.createTasksP2 = {
      list: [],
      sorted: false
    }; // eg cell renderers, adding hover functionality
    // destroy tasks are to do with row removal. they are done after row creation as the user will need to see new
    // rows first (as blank is scrolled into view), when we remove the old rows (no longer in view) is not as
    // important.
    _this.destroyTasks = [];
    _this.ticking = false;
    // we need to know direction of scroll, to build up rows in the direction of
    // the scroll. eg if user scrolls down, we extend the rows by building down.
    _this.scrollGoingDown = true;
    _this.lastScrollTop = 0;
    _this.taskCount = 0;
    _this.cancelledTasks = new Set();
    return _this;
  }
  AnimationFrameService.prototype.setScrollTop = function (scrollTop) {
    this.scrollGoingDown = scrollTop > this.lastScrollTop;
    this.lastScrollTop = scrollTop;
  };
  AnimationFrameService.prototype.init = function () {
    this.useAnimationFrame = !this.gridOptionsWrapper.isSuppressAnimationFrame();
  };
  // this method is for our AG Grid sanity only - if animation frames are turned off,
  // then no place in the code should be looking to add any work to be done in animation
  // frames. this stops bugs - where some code is asking for a frame to be executed
  // when it should not.
  AnimationFrameService.prototype.verifyAnimationFrameOn = function (methodName) {
    if (this.useAnimationFrame === false) {
      console.warn("AG Grid: AnimationFrameService." + methodName + " called but animation frames are off");
    }
  };
  AnimationFrameService.prototype.createTask = function (task, index, list) {
    this.verifyAnimationFrameOn(list);
    var taskItem = {
      task: task,
      index: index,
      createOrder: ++this.taskCount
    };
    this.addTaskToList(this[list], taskItem);
    this.schedule();
  };
  AnimationFrameService.prototype.cancelTask = function (task) {
    this.cancelledTasks.add(task);
  };
  AnimationFrameService.prototype.addTaskToList = function (taskList, task) {
    taskList.list.push(task);
    taskList.sorted = false;
  };
  AnimationFrameService.prototype.sortTaskList = function (taskList) {
    if (taskList.sorted) {
      return;
    }
    var sortDirection = this.scrollGoingDown ? 1 : -1;
    // sort first by row index (taking into account scroll direction), then by
    // order of task creation (always ascending, so cells will render left-to-right)
    taskList.list.sort(function (a, b) {
      return a.index !== b.index ? sortDirection * (b.index - a.index) : b.createOrder - a.createOrder;
    });
    taskList.sorted = true;
  };
  AnimationFrameService.prototype.addDestroyTask = function (task) {
    this.verifyAnimationFrameOn('createTasksP3');
    this.destroyTasks.push(task);
    this.schedule();
  };
  AnimationFrameService.prototype.executeFrame = function (millis) {
    this.verifyAnimationFrameOn('executeFrame');
    var p1TaskList = this.createTasksP1;
    var p1Tasks = p1TaskList.list;
    var p2TaskList = this.createTasksP2;
    var p2Tasks = p2TaskList.list;
    var destroyTasks = this.destroyTasks;
    var frameStart = new Date().getTime();
    var duration = new Date().getTime() - frameStart;
    // 16ms is 60 fps
    var noMaxMillis = millis <= 0;
    var gridBodyCon = this.controllersService.getGridBodyController();
    while (noMaxMillis || duration < millis) {
      var gridBodyDidSomething = gridBodyCon.getScrollFeature().executeAnimationFrameScroll();
      if (!gridBodyDidSomething) {
        var task = void 0;
        if (p1Tasks.length) {
          this.sortTaskList(p1TaskList);
          task = p1Tasks.pop().task;
        } else if (p2Tasks.length) {
          this.sortTaskList(p2TaskList);
          task = p2Tasks.pop().task;
        } else if (destroyTasks.length) {
          task = destroyTasks.pop();
        } else {
          this.cancelledTasks.clear();
          break;
        }
        if (!this.cancelledTasks.has(task)) {
          task();
        }
      }
      duration = new Date().getTime() - frameStart;
    }
    if (p1Tasks.length || p2Tasks.length || destroyTasks.length) {
      this.requestFrame();
    } else {
      this.stopTicking();
    }
  };
  AnimationFrameService.prototype.stopTicking = function () {
    this.ticking = false;
    var event = {
      type: Events.EVENT_ANIMATION_QUEUE_EMPTY,
      columnApi: this.gridOptionsWrapper.getColumnApi(),
      api: this.gridOptionsWrapper.getApi()
    };
    this.eventService.dispatchEvent(event);
  };
  AnimationFrameService.prototype.flushAllFrames = function () {
    if (!this.useAnimationFrame) {
      return;
    }
    this.executeFrame(-1);
  };
  AnimationFrameService.prototype.schedule = function () {
    if (!this.useAnimationFrame) {
      return;
    }
    if (!this.ticking) {
      this.ticking = true;
      this.requestFrame();
    }
  };
  AnimationFrameService.prototype.requestFrame = function () {
    // check for the existence of requestAnimationFrame, and if
    // it's missing, then we polyfill it with setTimeout()
    var callback = this.executeFrame.bind(this, 60);
    if (window.requestAnimationFrame) {
      window.requestAnimationFrame(callback);
    } else if (window.webkitRequestAnimationFrame) {
      window.webkitRequestAnimationFrame(callback);
    } else {
      window.setTimeout(callback, 0);
    }
  };
  AnimationFrameService.prototype.isQueueEmpty = function () {
    return !this.ticking;
  };
  __decorate$1B([Autowired('controllersService')], AnimationFrameService.prototype, "controllersService", void 0);
  __decorate$1B([PostConstruct], AnimationFrameService.prototype, "init", null);
  AnimationFrameService = __decorate$1B([Bean('animationFrameService')], AnimationFrameService);
  return AnimationFrameService;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1I =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1C =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var NavigationService = /** @class */function (_super) {
  __extends$1I(NavigationService, _super);
  function NavigationService() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.timeLastPageEventProcessed = 0;
    return _this;
  }
  NavigationService.prototype.postConstruct = function () {
    var _this = this;
    this.controllersService.whenReady(function (p) {
      _this.gridBodyCon = p.gridBodyCon;
    });
  };
  NavigationService.prototype.handlePageScrollingKey = function (event) {
    var key = event.which || event.keyCode;
    var alt = event.altKey;
    var ctrl = event.ctrlKey || event.metaKey;
    var currentCell = this.mouseEventService.getCellPositionForEvent(event);
    if (!currentCell) {
      return false;
    }
    var processed = false;
    switch (key) {
      case KeyCode.PAGE_HOME:
      case KeyCode.PAGE_END:
        // handle home and end when ctrl & alt are NOT pressed
        if (!ctrl && !alt) {
          this.onHomeOrEndKey(key);
          processed = true;
        }
        break;
      case KeyCode.LEFT:
      case KeyCode.RIGHT:
        // handle left and right when ctrl is pressed only
        if (ctrl && !alt) {
          this.onCtrlLeftOrRight(key, currentCell);
          processed = true;
        }
        break;
      case KeyCode.UP:
      case KeyCode.DOWN:
        // handle up and down when ctrl is pressed only
        if (ctrl && !alt) {
          this.onCtrlUpOrDown(key, currentCell);
          processed = true;
        }
        break;
      case KeyCode.PAGE_DOWN:
        // handle page up and page down when ctrl & alt are NOT pressed
        if (!ctrl && !alt) {
          this.onPageDown(currentCell);
          processed = true;
        }
        break;
      case KeyCode.PAGE_UP:
        // handle page up and page down when ctrl & alt are NOT pressed
        if (!ctrl && !alt) {
          this.onPageUp(currentCell);
          processed = true;
        }
        break;
    }
    if (processed) {
      event.preventDefault();
    }
    return processed;
  };
  // the page up/down keys caused a problem, in that if the user
  // held the page up/down key down, lots of events got generated,
  // which clogged up the event queue (as they take time to process)
  // which in turn froze the grid. Logic below makes sure we wait 100ms
  // between processing the page up/down events, so when user has finger
  // held down on key, we ignore page up/down events until 100ms has passed,
  // which effectively empties the queue of page up/down events.
  NavigationService.prototype.isTimeSinceLastPageEventToRecent = function () {
    var now = new Date().getTime();
    var diff = now - this.timeLastPageEventProcessed;
    return diff < 100;
  };
  NavigationService.prototype.setTimeLastPageEventProcessed = function () {
    this.timeLastPageEventProcessed = new Date().getTime();
  };
  NavigationService.prototype.navigateTo = function (navigateParams) {
    var scrollIndex = navigateParams.scrollIndex,
      scrollType = navigateParams.scrollType,
      scrollColumn = navigateParams.scrollColumn,
      focusIndex = navigateParams.focusIndex,
      focusColumn = navigateParams.focusColumn;
    if (exists(scrollColumn)) {
      this.gridBodyCon.getScrollFeature().ensureColumnVisible(scrollColumn);
    }
    if (exists(scrollIndex)) {
      this.gridBodyCon.getScrollFeature().ensureIndexVisible(scrollIndex, scrollType);
    }
    // make sure the cell is rendered, needed if we are to focus
    this.animationFrameService.flushAllFrames();
    // if we don't do this, the range will be left on the last cell, which will leave the last focused cell
    // highlighted.
    this.focusController.setFocusedCell(focusIndex, focusColumn, null, true);
    if (this.rangeController) {
      var cellPosition = {
        rowIndex: focusIndex,
        rowPinned: null,
        column: focusColumn
      };
      this.rangeController.setRangeToCell(cellPosition);
    }
  };
  NavigationService.prototype.onPageDown = function (gridCell) {
    if (this.isTimeSinceLastPageEventToRecent()) {
      return;
    }
    var gridBodyCon = this.controllersService.getGridBodyController();
    var scrollPosition = gridBodyCon.getScrollFeature().getVScrollPosition();
    var scrollbarWidth = this.gridOptionsWrapper.getScrollbarWidth();
    var pixelsInOnePage = scrollPosition.bottom - scrollPosition.top;
    if (this.controllersService.getCenterRowContainerCon().isHorizontalScrollShowing()) {
      pixelsInOnePage -= scrollbarWidth;
    }
    var pagingPixelOffset = this.paginationProxy.getPixelOffset();
    var currentPageBottomPixel = scrollPosition.top + pixelsInOnePage;
    var currentPageBottomRow = this.paginationProxy.getRowIndexAtPixel(currentPageBottomPixel + pagingPixelOffset);
    var scrollIndex = currentPageBottomRow;
    var currentCellPixel = this.paginationProxy.getRow(gridCell.rowIndex).rowTop;
    var nextCellPixel = currentCellPixel + pixelsInOnePage - pagingPixelOffset;
    var focusIndex = this.paginationProxy.getRowIndexAtPixel(nextCellPixel + pagingPixelOffset);
    var pageLastRow = this.paginationProxy.getPageLastRow();
    if (focusIndex > pageLastRow) {
      focusIndex = pageLastRow;
    }
    if (scrollIndex > pageLastRow) {
      scrollIndex = pageLastRow;
    }
    this.navigateTo({
      scrollIndex: scrollIndex,
      scrollType: 'top',
      scrollColumn: null,
      focusIndex: focusIndex,
      focusColumn: gridCell.column
    });
    this.setTimeLastPageEventProcessed();
  };
  NavigationService.prototype.onPageUp = function (gridCell) {
    if (this.isTimeSinceLastPageEventToRecent()) {
      return;
    }
    var gridBodyCon = this.controllersService.getGridBodyController();
    var scrollPosition = gridBodyCon.getScrollFeature().getVScrollPosition();
    var scrollbarWidth = this.gridOptionsWrapper.getScrollbarWidth();
    var pixelsInOnePage = scrollPosition.bottom - scrollPosition.top;
    if (this.controllersService.getCenterRowContainerCon().isHorizontalScrollShowing()) {
      pixelsInOnePage -= scrollbarWidth;
    }
    var pagingPixelOffset = this.paginationProxy.getPixelOffset();
    var currentPageTopPixel = scrollPosition.top;
    var currentPageTopRow = this.paginationProxy.getRowIndexAtPixel(currentPageTopPixel + pagingPixelOffset);
    var scrollIndex = currentPageTopRow;
    var currentRowNode = this.paginationProxy.getRow(gridCell.rowIndex);
    var nextCellPixel = currentRowNode.rowTop + currentRowNode.rowHeight - pixelsInOnePage - pagingPixelOffset;
    var focusIndex = this.paginationProxy.getRowIndexAtPixel(nextCellPixel + pagingPixelOffset);
    var firstRow = this.paginationProxy.getPageFirstRow();
    if (focusIndex < firstRow) {
      focusIndex = firstRow;
    }
    if (scrollIndex < firstRow) {
      scrollIndex = firstRow;
    }
    this.navigateTo({
      scrollIndex: scrollIndex,
      scrollType: 'bottom',
      scrollColumn: null,
      focusIndex: focusIndex,
      focusColumn: gridCell.column
    });
    this.setTimeLastPageEventProcessed();
  };
  NavigationService.prototype.getIndexToFocus = function (indexToScrollTo, isDown) {
    var indexToFocus = indexToScrollTo;
    // for SSRM, when user hits ctrl+down, we can end up trying to focus the loading row.
    // instead we focus the last row with data instead.
    if (isDown) {
      var node = this.paginationProxy.getRow(indexToScrollTo);
      if (node && node.stub) {
        indexToFocus -= 1;
      }
    }
    return indexToFocus;
  };
  // ctrl + up/down will bring focus to same column, first/last row. no horizontal scrolling.
  NavigationService.prototype.onCtrlUpOrDown = function (key, gridCell) {
    var upKey = key === KeyCode.UP;
    var rowIndexToScrollTo = upKey ? this.paginationProxy.getPageFirstRow() : this.paginationProxy.getPageLastRow();
    this.navigateTo({
      scrollIndex: rowIndexToScrollTo,
      scrollType: null,
      scrollColumn: gridCell.column,
      focusIndex: this.getIndexToFocus(rowIndexToScrollTo, !upKey),
      focusColumn: gridCell.column
    });
  };
  // ctrl + left/right will bring focus to same row, first/last cell. no vertical scrolling.
  NavigationService.prototype.onCtrlLeftOrRight = function (key, gridCell) {
    var leftKey = key === KeyCode.LEFT;
    var allColumns = this.columnController.getAllDisplayedColumns();
    var columnToSelect = leftKey ? allColumns[0] : last(allColumns);
    this.navigateTo({
      scrollIndex: gridCell.rowIndex,
      scrollType: null,
      scrollColumn: columnToSelect,
      focusIndex: gridCell.rowIndex,
      focusColumn: columnToSelect
    });
  };
  // home brings focus to top left cell, end brings focus to bottom right, grid scrolled to bring
  // same cell into view (which means either scroll all the way up, or all the way down).
  NavigationService.prototype.onHomeOrEndKey = function (key) {
    var homeKey = key === KeyCode.PAGE_HOME;
    var allColumns = this.columnController.getAllDisplayedColumns();
    var columnToSelect = homeKey ? allColumns[0] : last(allColumns);
    var scrollIndex = homeKey ? this.paginationProxy.getPageFirstRow() : this.paginationProxy.getPageLastRow();
    this.navigateTo({
      scrollIndex: scrollIndex,
      scrollType: null,
      scrollColumn: columnToSelect,
      focusIndex: this.getIndexToFocus(scrollIndex, !homeKey),
      focusColumn: columnToSelect
    });
  };
  __decorate$1C([Autowired('mouseEventService')], NavigationService.prototype, "mouseEventService", void 0);
  __decorate$1C([Autowired('paginationProxy')], NavigationService.prototype, "paginationProxy", void 0);
  __decorate$1C([Autowired('focusController')], NavigationService.prototype, "focusController", void 0);
  __decorate$1C([Autowired('animationFrameService')], NavigationService.prototype, "animationFrameService", void 0);
  __decorate$1C([Optional('rangeController')], NavigationService.prototype, "rangeController", void 0);
  __decorate$1C([Autowired('columnController')], NavigationService.prototype, "columnController", void 0);
  __decorate$1C([Autowired('controllersService')], NavigationService.prototype, "controllersService", void 0);
  __decorate$1C([PostConstruct], NavigationService.prototype, "postConstruct", null);
  NavigationService = __decorate$1C([Bean('navigationService')], NavigationService);
  return NavigationService;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1J =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1D =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param$9 =  false || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};
/**
 * This class solves the 'max height' problem, where the user might want to show more data than
 * the max div height actually allows.
 */
var RowContainerHeightService = /** @class */function (_super) {
  __extends$1J(RowContainerHeightService, _super);
  function RowContainerHeightService() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    // the scrollY position
    _this.scrollY = 0;
    // how tall the body is
    _this.uiBodyHeight = 0;
    return _this;
  }
  RowContainerHeightService.prototype.agWire = function (loggerFactory) {
    this.logger = loggerFactory.create("RowContainerHeightService");
  };
  RowContainerHeightService.prototype.postConstruct = function () {
    this.addManagedListener(this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, this.updateOffset.bind(this));
    this.maxDivHeight = getMaxDivHeight();
    this.logger.log('maxDivHeight = ' + this.maxDivHeight);
  };
  RowContainerHeightService.prototype.isStretching = function () {
    return this.stretching;
  };
  RowContainerHeightService.prototype.getDivStretchOffset = function () {
    return this.divStretchOffset;
  };
  RowContainerHeightService.prototype.updateOffset = function () {
    if (!this.stretching) {
      return;
    }
    var gridBodyCon = this.controllersService.getGridBodyController();
    var newScrollY = gridBodyCon.getScrollFeature().getVScrollPosition().top;
    var newBodyHeight = this.getUiBodyHeight();
    var atLeastOneChanged = newScrollY !== this.scrollY || newBodyHeight !== this.uiBodyHeight;
    if (atLeastOneChanged) {
      this.scrollY = newScrollY;
      this.uiBodyHeight = newBodyHeight;
      this.calculateOffset();
    }
  };
  RowContainerHeightService.prototype.calculateOffset = function () {
    this.setUiContainerHeight(this.maxDivHeight);
    this.pixelsToShave = this.modelHeight - this.uiContainerHeight;
    this.maxScrollY = this.uiContainerHeight - this.uiBodyHeight;
    var scrollPercent = this.scrollY / this.maxScrollY;
    var divStretchOffset = scrollPercent * this.pixelsToShave;
    this.logger.log("Div Stretch Offset = " + divStretchOffset + " (" + this.pixelsToShave + " * " + scrollPercent + ")");
    this.setDivStretchOffset(divStretchOffset);
  };
  RowContainerHeightService.prototype.setUiContainerHeight = function (height) {
    if (height !== this.uiContainerHeight) {
      this.uiContainerHeight = height;
      this.eventService.dispatchEvent({
        type: Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED
      });
    }
  };
  RowContainerHeightService.prototype.clearOffset = function () {
    this.setUiContainerHeight(this.modelHeight);
    this.pixelsToShave = 0;
    this.setDivStretchOffset(0);
  };
  RowContainerHeightService.prototype.setDivStretchOffset = function (newOffset) {
    // because we are talking pixels, no point in confusing things with half numbers
    var newOffsetFloor = typeof newOffset === 'number' ? Math.floor(newOffset) : null;
    if (this.divStretchOffset === newOffsetFloor) {
      return;
    }
    this.divStretchOffset = newOffsetFloor;
    this.eventService.dispatchEvent({
      type: Events.EVENT_HEIGHT_SCALE_CHANGED
    });
  };
  RowContainerHeightService.prototype.setModelHeight = function (modelHeight) {
    this.modelHeight = modelHeight;
    this.stretching = modelHeight != null // null happens when in print layout
    && this.maxDivHeight > 0 && modelHeight > this.maxDivHeight;
    if (this.stretching) {
      this.calculateOffset();
    } else {
      this.clearOffset();
    }
  };
  RowContainerHeightService.prototype.getUiContainerHeight = function () {
    return this.uiContainerHeight;
  };
  RowContainerHeightService.prototype.getRealPixelPosition = function (modelPixel) {
    return modelPixel - this.divStretchOffset;
  };
  RowContainerHeightService.prototype.getUiBodyHeight = function () {
    var gridBodyCon = this.controllersService.getGridBodyController();
    var pos = gridBodyCon.getScrollFeature().getVScrollPosition();
    return pos.bottom - pos.top;
  };
  RowContainerHeightService.prototype.getScrollPositionForPixel = function (rowTop) {
    if (this.pixelsToShave <= 0) {
      return rowTop;
    }
    var modelMaxScroll = this.modelHeight - this.getUiBodyHeight();
    var scrollPercent = rowTop / modelMaxScroll;
    var scrollPixel = this.maxScrollY * scrollPercent;
    return scrollPixel;
  };
  __decorate$1D([Autowired('controllersService')], RowContainerHeightService.prototype, "controllersService", void 0);
  __decorate$1D([__param$9(0, Qualifier("loggerFactory"))], RowContainerHeightService.prototype, "agWire", null);
  __decorate$1D([PostConstruct], RowContainerHeightService.prototype, "postConstruct", null);
  RowContainerHeightService = __decorate$1D([Bean('rowContainerHeightService')], RowContainerHeightService);
  return RowContainerHeightService;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1K =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1E =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SelectableService = /** @class */function (_super) {
  __extends$1K(SelectableService, _super);
  function SelectableService() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  SelectableService.prototype.init = function () {
    this.groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
    this.isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();
  };
  SelectableService.prototype.updateSelectableAfterGrouping = function (rowNode) {
    if (this.isRowSelectableFunc) {
      var nextChildrenFunc = function (node) {
        return node.childrenAfterGroup;
      };
      this.recurseDown(rowNode.childrenAfterGroup, nextChildrenFunc);
    }
  };
  SelectableService.prototype.updateSelectableAfterFiltering = function (rowNode) {
    if (this.isRowSelectableFunc) {
      var nextChildrenFunc = function (node) {
        return node.childrenAfterFilter;
      };
      this.recurseDown(rowNode.childrenAfterGroup, nextChildrenFunc);
    }
  };
  SelectableService.prototype.recurseDown = function (children, nextChildrenFunc) {
    var _this = this;
    if (!children) {
      return;
    }
    children.forEach(function (child) {
      if (!child.group) {
        return;
      } // only interested in groups
      if (child.hasChildren()) {
        _this.recurseDown(nextChildrenFunc(child), nextChildrenFunc);
      }
      var rowSelectable;
      if (_this.groupSelectsChildren) {
        // have this group selectable if at least one direct child is selectable
        var firstSelectable = find(nextChildrenFunc(child), 'selectable', true);
        rowSelectable = exists(firstSelectable);
      } else {
        // directly retrieve selectable value from user callback
        rowSelectable = _this.isRowSelectableFunc ? _this.isRowSelectableFunc(child) : false;
      }
      child.setRowSelectable(rowSelectable);
    });
  };
  __decorate$1E([PostConstruct], SelectableService.prototype, "init", null);
  SelectableService = __decorate$1E([Bean('selectableService')], SelectableService);
  return SelectableService;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1L =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1F =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AutoHeightCalculator = /** @class */function (_super) {
  __extends$1L(AutoHeightCalculator, _super);
  function AutoHeightCalculator() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  AutoHeightCalculator.prototype.postConstruct = function () {
    var _this = this;
    this.controllersService.whenReady(function (p) {
      _this.centerRowContainerCon = p.centerRowContainerCon;
    });
  };
  AutoHeightCalculator.prototype.getPreferredHeightForRow = function (rowNode) {
    var _this = this;
    var eDummyContainer = document.createElement('div');
    this.addInRowCssClasses(rowNode, eDummyContainer);
    // we put the dummy into the body container, so it will inherit all the
    // css styles that the real cells are inheriting
    var eBodyContainer = this.centerRowContainerCon.getContainerElement();
    eBodyContainer.appendChild(eDummyContainer);
    var scopeResult = AngularRowUtils.createChildScopeOrNull(rowNode, this.$scope, this.beans.gridOptionsWrapper);
    var scope = scopeResult ? scopeResult.scope : undefined;
    var scopeDestroyFunc = scopeResult ? scopeResult.scopeDestroyFunc : undefined;
    var cellComps = [];
    var autoRowHeightCols = this.columnController.getAllAutoRowHeightCols();
    var displayedCols = this.columnController.getAllDisplayedColumns();
    var visibleAutoRowHeightCols = autoRowHeightCols.filter(function (col) {
      return displayedCols.indexOf(col) >= 0;
    });
    visibleAutoRowHeightCols.forEach(function (col) {
      var cellComp = new CellComp(scope, _this.beans, col, rowNode, null, true, false, eDummyContainer, false);
      cellComps.push(cellComp);
    });
    cellComps.forEach(function (cellComp) {
      return eDummyContainer.appendChild(cellComp.getGui());
    });
    if (scope) {
      this.$compile(eDummyContainer)(scope);
    }
    // we should be able to just take the height of the row at this point, however
    // the row isn't expanding to cover the cell heights, i don't know why, i couldn't
    // figure it out so instead looking at the individual cells instead
    var maxCellHeight = 0;
    for (var i = 0; i < eDummyContainer.children.length; i++) {
      var child = eDummyContainer.children[i];
      if (child.offsetHeight > maxCellHeight) {
        maxCellHeight = child.offsetHeight;
      }
    }
    // we are finished with the dummy container, so get rid of it
    eBodyContainer.removeChild(eDummyContainer);
    cellComps.forEach(function (cellComp) {
      // dunno why we need to detach first, doing it here to be consistent with code in RowComp
      cellComp.detach();
      cellComp.destroy();
    });
    if (scopeDestroyFunc) {
      scopeDestroyFunc();
    }
    return maxCellHeight;
  };
  AutoHeightCalculator.prototype.addInRowCssClasses = function (rowNode, eDummyContainer) {
    // so any styles on row also get applied in dummy, otherwise
    // the content in dummy may differ to the real
    var rowIndex = rowNode.rowIndex;
    var params = {
      rowNode: rowNode,
      rowIsEven: rowIndex % 2 === 0,
      rowLevel: this.rowCssClassCalculator.calculateRowLevel(rowNode),
      firstRowOnPage: rowIndex === this.beans.paginationProxy.getPageFirstRow(),
      lastRowOnPage: rowIndex === this.beans.paginationProxy.getPageLastRow(),
      printLayout: false,
      expandable: rowNode.isExpandable()
    };
    var classes = this.rowCssClassCalculator.getInitialRowClasses(params);
    addCssClass(eDummyContainer, classes.join(' '));
  };
  __decorate$1F([Autowired('beans')], AutoHeightCalculator.prototype, "beans", void 0);
  __decorate$1F([Autowired("$scope")], AutoHeightCalculator.prototype, "$scope", void 0);
  __decorate$1F([Autowired("columnController")], AutoHeightCalculator.prototype, "columnController", void 0);
  __decorate$1F([Autowired("rowCssClassCalculator")], AutoHeightCalculator.prototype, "rowCssClassCalculator", void 0);
  __decorate$1F([Autowired('$compile')], AutoHeightCalculator.prototype, "$compile", void 0);
  __decorate$1F([Autowired('controllersService')], AutoHeightCalculator.prototype, "controllersService", void 0);
  __decorate$1F([PostConstruct], AutoHeightCalculator.prototype, "postConstruct", null);
  AutoHeightCalculator = __decorate$1F([Bean('autoHeightCalculator')], AutoHeightCalculator);
  return AutoHeightCalculator;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1M =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1G =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PaginationComp = /** @class */function (_super) {
  __extends$1M(PaginationComp, _super);
  function PaginationComp() {
    var _this = _super.call(this) || this;
    _this.previousAndFirstButtonsDisabled = false;
    _this.nextButtonDisabled = false;
    _this.lastButtonDisabled = false;
    return _this;
  }
  PaginationComp.prototype.postConstruct = function () {
    var _this = this;
    var isRtl = this.gridOptionsWrapper.isEnableRtl();
    this.setTemplate(this.getTemplate());
    this.btFirst.insertAdjacentElement('afterbegin', createIconNoSpan(isRtl ? 'last' : 'first', this.gridOptionsWrapper));
    this.btPrevious.insertAdjacentElement('afterbegin', createIconNoSpan(isRtl ? 'next' : 'previous', this.gridOptionsWrapper));
    this.btNext.insertAdjacentElement('afterbegin', createIconNoSpan(isRtl ? 'previous' : 'next', this.gridOptionsWrapper));
    this.btLast.insertAdjacentElement('afterbegin', createIconNoSpan(isRtl ? 'first' : 'last', this.gridOptionsWrapper));
    var isPaging = this.gridOptionsWrapper.isPagination();
    var paginationPanelEnabled = isPaging && !this.gridOptionsWrapper.isSuppressPaginationPanel();
    if (!paginationPanelEnabled) {
      this.setDisplayed(false);
      return;
    }
    this.addManagedListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));
    [{
      el: this.btFirst,
      fn: this.onBtFirst.bind(this)
    }, {
      el: this.btPrevious,
      fn: this.onBtPrevious.bind(this)
    }, {
      el: this.btNext,
      fn: this.onBtNext.bind(this)
    }, {
      el: this.btLast,
      fn: this.onBtLast.bind(this)
    }].forEach(function (item) {
      var el = item.el,
        fn = item.fn;
      _this.addManagedListener(el, 'click', fn);
      _this.addManagedListener(el, 'keydown', function (e) {
        if (e.keyCode === KeyCode.ENTER || e.keyCode === KeyCode.SPACE) {
          e.preventDefault();
          fn();
        }
      });
    });
    this.onPaginationChanged();
  };
  PaginationComp.prototype.onPaginationChanged = function () {
    this.enableOrDisableButtons();
    this.updateRowLabels();
    this.setCurrentPageLabel();
    this.setTotalLabels();
  };
  PaginationComp.prototype.onBtFirst = function () {
    if (!this.previousAndFirstButtonsDisabled) {
      this.paginationProxy.goToFirstPage();
    }
  };
  PaginationComp.prototype.setCurrentPageLabel = function () {
    var pagesExist = this.paginationProxy.getTotalPages() > 0;
    var currentPage = this.paginationProxy.getCurrentPage();
    var toDisplay = pagesExist ? currentPage + 1 : 0;
    this.lbCurrent.innerHTML = this.formatNumber(toDisplay);
  };
  PaginationComp.prototype.formatNumber = function (value) {
    var userFunc = this.gridOptionsWrapper.getPaginationNumberFormatterFunc();
    if (userFunc) {
      return userFunc({
        value: value
      });
    }
    return formatNumberCommas(value);
  };
  PaginationComp.prototype.getTemplate = function () {
    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
    var strPage = localeTextFunc('page', 'Page');
    var strTo = localeTextFunc('to', 'to');
    var strOf = localeTextFunc('of', 'of');
    var strFirst = localeTextFunc('firstPage', 'First Page');
    var strPrevious = localeTextFunc('previousPage', 'Previous Page');
    var strNext = localeTextFunc('nextPage', 'Next Page');
    var strLast = localeTextFunc('lastPage', 'Last Page');
    var compId = this.getCompId();
    var summaryDescribedBy = "ag-" + compId + "-first-row ag-" + compId + "-to ag-" + compId + "-last-row ag-" + compId + "-of ag-" + compId + "-row-count";
    var descriptionDescribedBy = "ag-" + compId + "-start-page ag-" + compId + "-start-page-number ag-" + compId + "-of-page ag-" + compId + "-of-page-number";
    return (/* html */"<div class=\"ag-paging-panel ag-unselectable\" id=\"ag-" + compId + "\" aria-live=\"polite\" aria-describedby=\"" + descriptionDescribedBy + " " + summaryDescribedBy + "\">\n                <span class=\"ag-paging-row-summary-panel\" aria-hidden=\"true\">\n                    <span id=\"ag-" + compId + "-first-row\" ref=\"lbFirstRowOnPage\" class=\"ag-paging-row-summary-panel-number\"></span>\n                    <span id=\"ag-" + compId + "-to\">" + strTo + "</span>\n                    <span id=\"ag-" + compId + "-last-row\" ref=\"lbLastRowOnPage\" class=\"ag-paging-row-summary-panel-number\"></span>\n                    <span id=\"ag-" + compId + "-of\">" + strOf + "</span>\n                    <span id=\"ag-" + compId + "-row-count\" ref=\"lbRecordCount\" class=\"ag-paging-row-summary-panel-number\"></span>\n                </span>\n                <span class=\"ag-paging-page-summary-panel\" role=\"presentation\">\n                    <div ref=\"btFirst\" class=\"ag-paging-button\" role=\"button\" aria-label=\"" + strFirst + "\" tabindex=\"0\"></div>\n                    <div ref=\"btPrevious\" class=\"ag-paging-button\" role=\"button\" aria-label=\"" + strPrevious + "\" tabindex=\"0\"></div>\n                    <span class=\"ag-paging-description\" aria-hidden=\"true\">\n                        <span id=\"ag-" + compId + "-start-page\">" + strPage + "</span>\n                        <span id=\"ag-" + compId + "-start-page-number\" ref=\"lbCurrent\" class=\"ag-paging-number\"></span>\n                        <span id=\"ag-" + compId + "-of-page\">" + strOf + "</span>\n                        <span id=\"ag-" + compId + "-of-page-number\" ref=\"lbTotal\" class=\"ag-paging-number\"></span>\n                    </span>\n                    <div ref=\"btNext\" class=\"ag-paging-button\" role=\"button\" aria-label=\"" + strNext + "\" tabindex=\"0\"></div>\n                    <div ref=\"btLast\" class=\"ag-paging-button\" role=\"button\" aria-label=\"" + strLast + "\" tabindex=\"0\"></div>\n                </span>\n            </div>"
    );
  };
  PaginationComp.prototype.onBtNext = function () {
    if (!this.nextButtonDisabled) {
      this.paginationProxy.goToNextPage();
    }
  };
  PaginationComp.prototype.onBtPrevious = function () {
    if (!this.previousAndFirstButtonsDisabled) {
      this.paginationProxy.goToPreviousPage();
    }
  };
  PaginationComp.prototype.onBtLast = function () {
    if (!this.lastButtonDisabled) {
      this.paginationProxy.goToLastPage();
    }
  };
  PaginationComp.prototype.enableOrDisableButtons = function () {
    var currentPage = this.paginationProxy.getCurrentPage();
    var maxRowFound = this.paginationProxy.isLastPageFound();
    var totalPages = this.paginationProxy.getTotalPages();
    this.previousAndFirstButtonsDisabled = currentPage === 0;
    addOrRemoveCssClass(this.btFirst, 'ag-disabled', this.previousAndFirstButtonsDisabled);
    setAriaDisabled(this.btFirst, this.previousAndFirstButtonsDisabled);
    addOrRemoveCssClass(this.btPrevious, 'ag-disabled', this.previousAndFirstButtonsDisabled);
    setAriaDisabled(this.btPrevious, this.previousAndFirstButtonsDisabled);
    var zeroPagesToDisplay = this.isZeroPagesToDisplay();
    var onLastPage = maxRowFound && currentPage === totalPages - 1;
    this.nextButtonDisabled = onLastPage || zeroPagesToDisplay;
    addOrRemoveCssClass(this.btNext, 'ag-disabled', this.nextButtonDisabled);
    setAriaDisabled(this.btNext, this.nextButtonDisabled);
    this.lastButtonDisabled = !maxRowFound || zeroPagesToDisplay || currentPage === totalPages - 1;
    addOrRemoveCssClass(this.btLast, 'ag-disabled', this.lastButtonDisabled);
    setAriaDisabled(this.btLast, this.lastButtonDisabled);
  };
  PaginationComp.prototype.updateRowLabels = function () {
    var currentPage = this.paginationProxy.getCurrentPage();
    var pageSize = this.paginationProxy.getPageSize();
    var maxRowFound = this.paginationProxy.isLastPageFound();
    var rowCount = this.paginationProxy.isLastPageFound() ? this.paginationProxy.getMasterRowCount() : null;
    var startRow;
    var endRow;
    if (this.isZeroPagesToDisplay()) {
      startRow = endRow = 0;
    } else {
      startRow = pageSize * currentPage + 1;
      endRow = startRow + pageSize - 1;
      if (maxRowFound && endRow > rowCount) {
        endRow = rowCount;
      }
    }
    this.lbFirstRowOnPage.innerHTML = this.formatNumber(startRow);
    if (this.rowNodeBlockLoader.isLoading()) {
      this.lbLastRowOnPage.innerHTML = '?';
    } else {
      this.lbLastRowOnPage.innerHTML = this.formatNumber(endRow);
    }
  };
  PaginationComp.prototype.isZeroPagesToDisplay = function () {
    var maxRowFound = this.paginationProxy.isLastPageFound();
    var totalPages = this.paginationProxy.getTotalPages();
    return maxRowFound && totalPages === 0;
  };
  PaginationComp.prototype.setTotalLabels = function () {
    var lastPageFound = this.paginationProxy.isLastPageFound();
    var totalPages = this.paginationProxy.getTotalPages();
    var rowCount = lastPageFound ? this.paginationProxy.getMasterRowCount() : null;
    if (lastPageFound) {
      this.lbTotal.innerHTML = this.formatNumber(totalPages);
      this.lbRecordCount.innerHTML = this.formatNumber(rowCount);
    } else {
      var moreText = this.gridOptionsWrapper.getLocaleTextFunc()('more', 'more');
      this.lbTotal.innerHTML = moreText;
      this.lbRecordCount.innerHTML = moreText;
    }
  };
  __decorate$1G([Autowired('paginationProxy')], PaginationComp.prototype, "paginationProxy", void 0);
  __decorate$1G([Autowired('rowNodeBlockLoader')], PaginationComp.prototype, "rowNodeBlockLoader", void 0);
  __decorate$1G([RefSelector('btFirst')], PaginationComp.prototype, "btFirst", void 0);
  __decorate$1G([RefSelector('btPrevious')], PaginationComp.prototype, "btPrevious", void 0);
  __decorate$1G([RefSelector('btNext')], PaginationComp.prototype, "btNext", void 0);
  __decorate$1G([RefSelector('btLast')], PaginationComp.prototype, "btLast", void 0);
  __decorate$1G([RefSelector('lbRecordCount')], PaginationComp.prototype, "lbRecordCount", void 0);
  __decorate$1G([RefSelector('lbFirstRowOnPage')], PaginationComp.prototype, "lbFirstRowOnPage", void 0);
  __decorate$1G([RefSelector('lbLastRowOnPage')], PaginationComp.prototype, "lbLastRowOnPage", void 0);
  __decorate$1G([RefSelector('lbCurrent')], PaginationComp.prototype, "lbCurrent", void 0);
  __decorate$1G([RefSelector('lbTotal')], PaginationComp.prototype, "lbTotal", void 0);
  __decorate$1G([PostConstruct], PaginationComp.prototype, "postConstruct", null);
  return PaginationComp;
}(Component);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1N =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1H =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ResizeObserverService = /** @class */function (_super) {
  __extends$1N(ResizeObserverService, _super);
  function ResizeObserverService() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ResizeObserverService.prototype.observeResize = function (element, callback, debounceDelay) {
    if (debounceDelay === void 0) {
      debounceDelay = 50;
    }
    // put in variable, so available to usePolyfill() function below
    var frameworkFactory = this.getFrameworkOverrides();
    // this gets fired too often and might cause some relayout issues
    // so we add a debounce to the callback here to avoid the flashing effect.
    var debouncedCallback = debounce(callback, debounceDelay);
    var useBrowserResizeObserver = function () {
      var resizeObserver = new window.ResizeObserver(debouncedCallback);
      resizeObserver.observe(element);
      return function () {
        return resizeObserver.disconnect();
      };
    };
    var usePolyfill = function () {
      // initialise to the current width and height, so first call will have no changes
      var widthLastTime = offsetWidth(element);
      var heightLastTime = offsetHeight(element);
      // when finished, this gets turned to false.
      var running = true;
      var periodicallyCheckWidthAndHeight = function () {
        if (running) {
          var newWidth = offsetWidth(element);
          var newHeight = offsetHeight(element);
          var changed = newWidth !== widthLastTime || newHeight !== heightLastTime;
          if (changed) {
            widthLastTime = newWidth;
            heightLastTime = newHeight;
            callback();
          }
          frameworkFactory.setTimeout(periodicallyCheckWidthAndHeight, debounceDelay);
        }
      };
      periodicallyCheckWidthAndHeight();
      // the callback function we return sets running to false
      return function () {
        return running = false;
      };
    };
    var suppressResize = this.gridOptionsWrapper.isSuppressBrowserResizeObserver();
    var resizeObserverExists = !!window.ResizeObserver;
    if (resizeObserverExists && !suppressResize) {
      return useBrowserResizeObserver();
    } else {
      return usePolyfill();
    }
  };
  ResizeObserverService = __decorate$1H([Bean('resizeObserverService')], ResizeObserverService);
  return ResizeObserverService;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1O =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1I =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var LoadingType;
(function (LoadingType) {
  LoadingType[LoadingType["Loading"] = 0] = "Loading";
  LoadingType[LoadingType["NoRows"] = 1] = "NoRows";
})(LoadingType || (LoadingType = {}));
var OverlayWrapperComponent = /** @class */function (_super) {
  __extends$1O(OverlayWrapperComponent, _super);
  function OverlayWrapperComponent() {
    var _this = _super.call(this, OverlayWrapperComponent.TEMPLATE) || this;
    _this.inProgress = false;
    _this.destroyRequested = false;
    return _this;
  }
  OverlayWrapperComponent.prototype.updateLayoutClasses = function (params) {
    addOrRemoveCssClass(this.eOverlayWrapper, exports.LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);
    addOrRemoveCssClass(this.eOverlayWrapper, exports.LayoutCssClasses.NORMAL, params.normal);
    addOrRemoveCssClass(this.eOverlayWrapper, exports.LayoutCssClasses.PRINT, params.print);
  };
  OverlayWrapperComponent.prototype.postConstruct = function () {
    this.createManagedBean(new LayoutFeature(this));
    this.setDisplayed(false);
    this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_CHANGED, this.onRowDataChanged.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_UPDATED, this.onRowDataChanged.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));
    if (this.gridOptionsWrapper.isRowModelDefault() && !this.gridOptionsWrapper.getRowData()) {
      this.showLoadingOverlay();
    }
    this.gridApi.registerOverlayWrapperComp(this);
  };
  OverlayWrapperComponent.prototype.setWrapperTypeClass = function (loadingType) {
    addOrRemoveCssClass(this.eOverlayWrapper, 'ag-overlay-loading-wrapper', loadingType === LoadingType.Loading);
    addOrRemoveCssClass(this.eOverlayWrapper, 'ag-overlay-no-rows-wrapper', loadingType === LoadingType.NoRows);
  };
  OverlayWrapperComponent.prototype.showLoadingOverlay = function () {
    if (this.gridOptionsWrapper.isSuppressLoadingOverlay()) {
      return;
    }
    var workItem = this.userComponentFactory.newLoadingOverlayComponent({
      api: this.gridOptionsWrapper.getApi()
    });
    this.showOverlay(workItem, LoadingType.Loading);
  };
  OverlayWrapperComponent.prototype.showNoRowsOverlay = function () {
    if (this.gridOptionsWrapper.isSuppressNoRowsOverlay()) {
      return;
    }
    var workItem = this.userComponentFactory.newNoRowsOverlayComponent({
      api: this.gridOptionsWrapper.getApi()
    });
    this.showOverlay(workItem, LoadingType.NoRows);
  };
  OverlayWrapperComponent.prototype.showOverlay = function (workItem, type) {
    var _this = this;
    if (this.inProgress) {
      return;
    }
    this.setWrapperTypeClass(type);
    this.destroyActiveOverlay();
    this.inProgress = true;
    if (workItem) {
      workItem.then(function (comp) {
        _this.inProgress = false;
        _this.eOverlayWrapper.appendChild(comp.getGui());
        _this.activeOverlay = comp;
        if (_this.destroyRequested) {
          _this.destroyRequested = false;
          _this.destroyActiveOverlay();
        }
      });
    }
    this.setDisplayed(true);
  };
  OverlayWrapperComponent.prototype.destroyActiveOverlay = function () {
    if (this.inProgress) {
      this.destroyRequested = true;
      return;
    }
    if (!this.activeOverlay) {
      return;
    }
    this.activeOverlay = this.getContext().destroyBean(this.activeOverlay);
    clearElement(this.eOverlayWrapper);
  };
  OverlayWrapperComponent.prototype.hideOverlay = function () {
    this.destroyActiveOverlay();
    this.setDisplayed(false);
  };
  OverlayWrapperComponent.prototype.destroy = function () {
    this.destroyActiveOverlay();
    _super.prototype.destroy.call(this);
  };
  OverlayWrapperComponent.prototype.showOrHideOverlay = function () {
    var isEmpty = this.paginationProxy.isEmpty();
    var isSuppressNoRowsOverlay = this.gridOptionsWrapper.isSuppressNoRowsOverlay();
    if (isEmpty && !isSuppressNoRowsOverlay) {
      this.showNoRowsOverlay();
    } else {
      this.hideOverlay();
    }
  };
  OverlayWrapperComponent.prototype.onRowDataChanged = function () {
    this.showOrHideOverlay();
  };
  OverlayWrapperComponent.prototype.onNewColumnsLoaded = function () {
    // hide overlay if columns and rows exist, this can happen if columns are loaded after data.
    // this problem exists before of the race condition between the services (column controller in this case)
    // and the view (grid panel). if the model beans were all initialised first, and then the view beans second,
    // this race condition would not happen.
    if (this.columnController.isReady() && !this.paginationProxy.isEmpty()) {
      this.hideOverlay();
    }
  };
  // wrapping in outer div, and wrapper, is needed to center the loading icon
  // The idea for centering came from here: http://www.vanseodesign.com/css/vertical-centering/
  OverlayWrapperComponent.TEMPLATE = "\n        <div class=\"ag-overlay\" aria-hidden=\"true\">\n            <div class=\"ag-overlay-panel\">\n                <div class=\"ag-overlay-wrapper\" ref=\"eOverlayWrapper\"></div>\n            </div>\n        </div>";
  __decorate$1I([Autowired('userComponentFactory')], OverlayWrapperComponent.prototype, "userComponentFactory", void 0);
  __decorate$1I([Autowired('paginationProxy')], OverlayWrapperComponent.prototype, "paginationProxy", void 0);
  __decorate$1I([Autowired('gridApi')], OverlayWrapperComponent.prototype, "gridApi", void 0);
  __decorate$1I([Autowired('columnController')], OverlayWrapperComponent.prototype, "columnController", void 0);
  __decorate$1I([RefSelector('eOverlayWrapper')], OverlayWrapperComponent.prototype, "eOverlayWrapper", void 0);
  __decorate$1I([PostConstruct], OverlayWrapperComponent.prototype, "postConstruct", null);
  return OverlayWrapperComponent;
}(Component);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1P =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1J =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AgGroupComponent = /** @class */function (_super) {
  __extends$1P(AgGroupComponent, _super);
  function AgGroupComponent(params) {
    if (params === void 0) {
      params = {};
    }
    var _this = _super.call(this, AgGroupComponent.getTemplate(params)) || this;
    _this.suppressEnabledCheckbox = true;
    _this.suppressOpenCloseIcons = false;
    var title = params.title,
      enabled = params.enabled,
      items = params.items,
      suppressEnabledCheckbox = params.suppressEnabledCheckbox,
      suppressOpenCloseIcons = params.suppressOpenCloseIcons;
    _this.title = title;
    _this.cssIdentifier = params.cssIdentifier || 'default';
    _this.enabled = enabled != null ? enabled : true;
    _this.items = items || [];
    _this.alignItems = params.alignItems || 'center';
    if (suppressEnabledCheckbox != null) {
      _this.suppressEnabledCheckbox = suppressEnabledCheckbox;
    }
    if (suppressOpenCloseIcons != null) {
      _this.suppressOpenCloseIcons = suppressOpenCloseIcons;
    }
    return _this;
  }
  AgGroupComponent.getTemplate = function (params) {
    var cssIdentifier = params.cssIdentifier || 'default';
    var direction = params.direction || 'vertical';
    return (/* html */"<div class=\"ag-group ag-" + cssIdentifier + "-group\">\n            <div class=\"ag-group-title-bar ag-" + cssIdentifier + "-group-title-bar ag-unselectable\" ref=\"eTitleBar\">\n                <span class=\"ag-group-title-bar-icon ag-" + cssIdentifier + "-group-title-bar-icon\" ref=\"eGroupOpenedIcon\"></span>\n                <span class=\"ag-group-title-bar-icon ag-" + cssIdentifier + "-group-title-bar-icon\" ref=\"eGroupClosedIcon\"></span>\n                <span ref=\"eTitle\" class=\"ag-group-title ag-" + cssIdentifier + "-group-title\"></span>\n            </div>\n            <div ref=\"eToolbar\" class=\"ag-group-toolbar ag-" + cssIdentifier + "-group-toolbar\">\n                <ag-checkbox ref=\"cbGroupEnabled\"></ag-checkbox>\n            </div>\n            <div ref=\"eContainer\" class=\"ag-group-container ag-group-container-" + direction + " ag-" + cssIdentifier + "-group-container\"></div>\n        </div>"
    );
  };
  AgGroupComponent.prototype.postConstruct = function () {
    if (this.items.length) {
      var initialItems = this.items;
      this.items = [];
      this.addItems(initialItems);
    }
    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
    this.cbGroupEnabled.setLabel(localeTextFunc('enabled', 'Enabled'));
    if (this.title) {
      this.setTitle(this.title);
    }
    if (this.enabled) {
      this.setEnabled(this.enabled);
    }
    this.setAlignItems(this.alignItems);
    this.hideEnabledCheckbox(this.suppressEnabledCheckbox);
    this.hideOpenCloseIcons(this.suppressOpenCloseIcons);
    this.setupExpandContract();
    this.refreshChildDisplay();
  };
  AgGroupComponent.prototype.setupExpandContract = function () {
    var _this = this;
    this.eGroupClosedIcon.appendChild(createIcon('columnSelectClosed', this.gridOptionsWrapper, null));
    this.eGroupOpenedIcon.appendChild(createIcon('columnSelectOpen', this.gridOptionsWrapper, null));
    this.addManagedListener(this.eTitleBar, 'click', function () {
      return _this.toggleGroupExpand();
    });
    this.addManagedListener(this.eTitleBar, 'keydown', function (e) {
      switch (e.keyCode) {
        case KeyCode.ENTER:
          _this.toggleGroupExpand();
          break;
        case KeyCode.RIGHT:
          _this.toggleGroupExpand(true);
          break;
        case KeyCode.LEFT:
          _this.toggleGroupExpand(false);
          break;
      }
    });
  };
  AgGroupComponent.prototype.refreshChildDisplay = function () {
    var showIcon = !this.suppressOpenCloseIcons;
    setDisplayed(this.eToolbar, this.expanded && !this.suppressEnabledCheckbox);
    setDisplayed(this.eGroupOpenedIcon, showIcon && this.expanded);
    setDisplayed(this.eGroupClosedIcon, showIcon && !this.expanded);
  };
  AgGroupComponent.prototype.isExpanded = function () {
    return this.expanded;
  };
  AgGroupComponent.prototype.setAlignItems = function (alignment) {
    var eGui = this.getGui();
    if (this.alignItems !== alignment) {
      removeCssClass(eGui, "ag-group-item-alignment-" + this.alignItems);
    }
    this.alignItems = alignment;
    var newCls = "ag-group-item-alignment-" + this.alignItems;
    addCssClass(eGui, newCls);
    return this;
  };
  AgGroupComponent.prototype.toggleGroupExpand = function (expanded) {
    if (this.suppressOpenCloseIcons) {
      this.expanded = true;
      this.refreshChildDisplay();
      setDisplayed(this.eContainer, true);
      return this;
    }
    expanded = expanded != null ? expanded : !this.expanded;
    if (this.expanded === expanded) {
      return this;
    }
    this.expanded = expanded;
    this.refreshChildDisplay();
    setDisplayed(this.eContainer, expanded);
    this.dispatchEvent({
      type: this.expanded ? AgGroupComponent.EVENT_EXPANDED : AgGroupComponent.EVENT_COLLAPSED
    });
    return this;
  };
  AgGroupComponent.prototype.addItems = function (items) {
    var _this = this;
    items.forEach(function (item) {
      return _this.addItem(item);
    });
  };
  AgGroupComponent.prototype.addItem = function (item) {
    var container = this.eContainer;
    var el = item instanceof Component ? item.getGui() : item;
    addCssClass(el, 'ag-group-item');
    addCssClass(el, "ag-" + this.cssIdentifier + "-group-item");
    container.appendChild(el);
    this.items.push(el);
  };
  AgGroupComponent.prototype.hideItem = function (hide, index) {
    var itemToHide = this.items[index];
    addOrRemoveCssClass(itemToHide, 'ag-hidden', hide);
  };
  AgGroupComponent.prototype.setTitle = function (title) {
    this.eTitle.innerText = title;
    return this;
  };
  AgGroupComponent.prototype.addCssClassToTitleBar = function (cssClass) {
    addCssClass(this.eTitleBar, cssClass);
  };
  AgGroupComponent.prototype.setEnabled = function (enabled, skipToggle) {
    this.enabled = enabled;
    this.refreshDisabledStyles();
    this.toggleGroupExpand(enabled);
    if (!skipToggle) {
      this.cbGroupEnabled.setValue(enabled);
    }
    return this;
  };
  AgGroupComponent.prototype.isEnabled = function () {
    return this.enabled;
  };
  AgGroupComponent.prototype.onEnableChange = function (callbackFn) {
    var _this = this;
    this.cbGroupEnabled.onValueChange(function (newSelection) {
      _this.setEnabled(newSelection, true);
      callbackFn(newSelection);
    });
    return this;
  };
  AgGroupComponent.prototype.hideEnabledCheckbox = function (hide) {
    this.suppressEnabledCheckbox = hide;
    this.refreshChildDisplay();
    this.refreshDisabledStyles();
    return this;
  };
  AgGroupComponent.prototype.hideOpenCloseIcons = function (hide) {
    this.suppressOpenCloseIcons = hide;
    if (hide) {
      this.toggleGroupExpand(true);
    }
    return this;
  };
  AgGroupComponent.prototype.refreshDisabledStyles = function () {
    addOrRemoveCssClass(this.getGui(), 'ag-disabled', !this.enabled);
    if (this.suppressEnabledCheckbox && !this.enabled) {
      addCssClass(this.eTitleBar, 'ag-disabled-group-title-bar');
      this.eTitleBar.removeAttribute('tabindex');
    } else {
      removeCssClass(this.eTitleBar, 'ag-disabled-group-title-bar');
      this.eTitleBar.setAttribute('tabindex', '0');
    }
    addOrRemoveCssClass(this.eContainer, 'ag-disabled-group-container', !this.enabled);
  };
  AgGroupComponent.EVENT_EXPANDED = 'expanded';
  AgGroupComponent.EVENT_COLLAPSED = 'collapsed';
  __decorate$1J([RefSelector('eTitleBar')], AgGroupComponent.prototype, "eTitleBar", void 0);
  __decorate$1J([RefSelector('eGroupOpenedIcon')], AgGroupComponent.prototype, "eGroupOpenedIcon", void 0);
  __decorate$1J([RefSelector('eGroupClosedIcon')], AgGroupComponent.prototype, "eGroupClosedIcon", void 0);
  __decorate$1J([RefSelector('eToolbar')], AgGroupComponent.prototype, "eToolbar", void 0);
  __decorate$1J([RefSelector('cbGroupEnabled')], AgGroupComponent.prototype, "cbGroupEnabled", void 0);
  __decorate$1J([RefSelector('eTitle')], AgGroupComponent.prototype, "eTitle", void 0);
  __decorate$1J([RefSelector('eContainer')], AgGroupComponent.prototype, "eContainer", void 0);
  __decorate$1J([PostConstruct], AgGroupComponent.prototype, "postConstruct", null);
  return AgGroupComponent;
}(Component);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1Q =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1K =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AgPanel = /** @class */function (_super) {
  __extends$1Q(AgPanel, _super);
  function AgPanel(config) {
    var _this = _super.call(this, AgPanel.getTemplate(config)) || this;
    _this.closable = true;
    _this.positioned = false;
    _this.dragStartPosition = {
      x: 0,
      y: 0
    };
    _this.position = {
      x: 0,
      y: 0
    };
    _this.size = {
      width: undefined,
      height: undefined
    };
    _this.config = config;
    return _this;
  }
  AgPanel.getTemplate = function (config) {
    var cssIdentifier = config && config.cssIdentifier || 'default';
    return (/* html */"<div class=\"ag-panel ag-" + cssIdentifier + "-panel\" tabindex=\"-1\">\n            <div ref=\"eTitleBar\" class=\"ag-panel-title-bar ag-" + cssIdentifier + "-panel-title-bar ag-unselectable\">\n                <span ref=\"eTitle\" class=\"ag-panel-title-bar-title ag-" + cssIdentifier + "-panel-title-bar-title\"></span>\n                <div ref=\"eTitleBarButtons\" class=\"ag-panel-title-bar-buttons ag-" + cssIdentifier + "-panel-title-bar-buttons\"></div>\n            </div>\n            <div ref=\"eContentWrapper\" class=\"ag-panel-content-wrapper ag-" + cssIdentifier + "-panel-content-wrapper\"></div>\n        </div>"
    );
  };
  AgPanel.prototype.postConstruct = function () {
    var _this = this;
    var _a = this.config,
      component = _a.component,
      closable = _a.closable,
      hideTitleBar = _a.hideTitleBar,
      title = _a.title,
      minWidth = _a.minWidth,
      width = _a.width,
      minHeight = _a.minHeight,
      height = _a.height,
      centered = _a.centered,
      x = _a.x,
      y = _a.y;
    var eGui = this.getGui();
    if (component) {
      this.setBodyComponent(component);
    }
    if (!hideTitleBar) {
      if (title) {
        this.setTitle(title);
      }
      this.setClosable(closable != null ? closable : this.closable);
    } else {
      addCssClass(this.eTitleBar, 'ag-hidden');
    }
    this.addManagedListener(this.eTitleBar, 'mousedown', function (e) {
      if (eGui.contains(e.relatedTarget) || eGui.contains(document.activeElement) || _this.eTitleBarButtons.contains(e.target)) {
        e.preventDefault();
        return;
      }
      var focusEl = _this.eContentWrapper.querySelector('button, [href], input, select, textarea, [tabindex]');
      if (focusEl) {
        focusEl.focus();
      }
    });
    if (this.positioned) {
      return;
    }
    this.minHeight = minHeight != null ? minHeight : 250;
    this.minWidth = minWidth != null ? minWidth : 250;
    this.popupParent = this.popupService.getPopupParent();
    if (width) {
      this.setWidth(width);
    }
    if (height) {
      this.setHeight(height);
    }
    if (this.renderComponent) {
      this.renderComponent();
    }
    if (!width || !height) {
      this.refreshSize();
    }
    if (centered) {
      this.center();
    } else if (x || y) {
      this.offsetElement(x, y);
    }
    this.positioned = true;
    this.eContentWrapper.style.height = '0';
  };
  AgPanel.prototype.renderComponent = function () {
    var _this = this;
    var eGui = this.getGui();
    eGui.focus();
    this.close = function () {
      eGui.parentElement.removeChild(eGui);
      _this.destroy();
    };
  };
  AgPanel.prototype.updateDragStartPosition = function (x, y) {
    this.dragStartPosition = {
      x: x,
      y: y
    };
  };
  AgPanel.prototype.calculateMouseMovement = function (params) {
    var parentRect = this.popupParent.getBoundingClientRect();
    var e = params.e,
      isLeft = params.isLeft,
      isTop = params.isTop,
      anywhereWithin = params.anywhereWithin,
      topBuffer = params.topBuffer;
    var movementX = e.clientX - this.dragStartPosition.x;
    var movementY = e.clientY - this.dragStartPosition.y;
    var width = this.getWidth();
    var height = this.getHeight();
    // skip if cursor is outside of popupParent horizontally
    var skipX = parentRect.left >= e.clientX && this.position.x <= 0 || parentRect.right <= e.clientX && parentRect.right <= this.position.x + parentRect.left + width;
    if (!skipX) {
      if (isLeft) {
        skipX =
        // skip if we are moving to the left and the cursor
        // is positioned to the right of the left side anchor
        movementX < 0 && e.clientX > this.position.x + parentRect.left ||
        // skip if we are moving to the right and the cursor
        // is positioned to the left of the dialog
        movementX > 0 && e.clientX < this.position.x + parentRect.left;
      } else {
        if (anywhereWithin) {
          // if anywhereWithin is true, we allow to move
          // as long as the cursor is within the dialog
          skipX = movementX < 0 && e.clientX > this.position.x + parentRect.left + width || movementX > 0 && e.clientX < this.position.x + parentRect.left;
        } else {
          skipX =
          // if the movement is bound to the right side of the dialog
          // we skip if we are moving to the left and the cursor
          // is to the right of the dialog
          movementX < 0 && e.clientX > this.position.x + parentRect.left + width ||
          // or skip if we are moving to the right and the cursor
          // is to the left of the right side anchor
          movementX > 0 && e.clientX < this.position.x + parentRect.left + width;
        }
      }
    }
    movementX = skipX ? 0 : movementX;
    var skipY =
    // skip if cursor is outside of popupParent vertically
    parentRect.top >= e.clientY && this.position.y <= 0 || parentRect.bottom <= e.clientY && parentRect.bottom <= this.position.y + parentRect.top + height || isTop && (
    // skip if we are moving to towards top and the cursor is
    // below the top anchor + topBuffer
    // note: topBuffer is used when moving the dialog using the title bar
    movementY < 0 && e.clientY > this.position.y + parentRect.top + (topBuffer || 0) ||
    // skip if we are moving to the bottom and the cursor is
    // above the top anchor
    movementY > 0 && e.clientY < this.position.y + parentRect.top) ||
    // we are anchored to the bottom of the dialog
    !isTop && (
    // skip if we are moving towards the top and the cursor
    // is below the bottom anchor
    movementY < 0 && e.clientY > this.position.y + parentRect.top + height ||
    // skip if we are moving towards the bottom and the cursor
    // is above the bottom anchor
    movementY > 0 && e.clientY < this.position.y + parentRect.top + height);
    movementY = skipY ? 0 : movementY;
    return {
      movementX: movementX,
      movementY: movementY
    };
  };
  AgPanel.prototype.refreshSize = function () {
    var _a = this.size,
      width = _a.width,
      height = _a.height;
    if (!width) {
      this.setWidth(this.getGui().offsetWidth);
    }
    if (!height) {
      this.setHeight(this.getGui().offsetHeight);
    }
  };
  AgPanel.prototype.offsetElement = function (x, y) {
    if (x === void 0) {
      x = 0;
    }
    if (y === void 0) {
      y = 0;
    }
    var ePopup = this.getGui();
    this.popupService.positionPopup({
      ePopup: ePopup,
      x: x,
      y: y,
      minWidth: this.minWidth,
      minHeight: this.minHeight,
      keepWithinBounds: true
    });
    this.position.x = parseInt(ePopup.style.left, 10);
    this.position.y = parseInt(ePopup.style.top, 10);
  };
  AgPanel.prototype.getHeight = function () {
    return this.size.height;
  };
  AgPanel.prototype.setHeight = function (height) {
    var eGui = this.getGui();
    var isPercent = false;
    if (typeof height === 'string' && height.indexOf('%') !== -1) {
      setFixedHeight(eGui, height);
      height = getAbsoluteHeight(eGui);
      isPercent = true;
    } else {
      height = Math.max(this.minHeight, height);
      var offsetParent = eGui.offsetParent;
      if (offsetParent && offsetParent.clientHeight && height + this.position.y > offsetParent.clientHeight) {
        height = offsetParent.clientHeight - this.position.y;
      }
    }
    if (this.size.height === height) {
      return;
    }
    this.size.height = height;
    if (!isPercent) {
      setFixedHeight(eGui, height);
    } else {
      eGui.style.maxHeight = 'unset';
      eGui.style.minHeight = 'unset';
    }
  };
  AgPanel.prototype.getWidth = function () {
    return this.size.width;
  };
  AgPanel.prototype.setWidth = function (width) {
    var eGui = this.getGui();
    var isPercent = false;
    if (typeof width === 'string' && width.indexOf('%') !== -1) {
      setFixedWidth(eGui, width);
      width = getAbsoluteWidth(eGui);
      isPercent = true;
    } else {
      width = Math.max(this.minWidth, width);
      var offsetParent = eGui.offsetParent;
      if (offsetParent && offsetParent.clientWidth && width + this.position.x > offsetParent.clientWidth) {
        width = offsetParent.clientWidth - this.position.x;
      }
    }
    if (this.size.width === width) {
      return;
    }
    this.size.width = width;
    if (!isPercent) {
      setFixedWidth(eGui, width);
    } else {
      eGui.style.maxWidth = 'unset';
      eGui.style.minWidth = 'unset';
    }
  };
  AgPanel.prototype.center = function () {
    var eGui = this.getGui();
    var x = eGui.offsetParent.clientWidth / 2 - this.getWidth() / 2;
    var y = eGui.offsetParent.clientHeight / 2 - this.getHeight() / 2;
    this.offsetElement(x, y);
  };
  AgPanel.prototype.setClosable = function (closable) {
    if (closable !== this.closable) {
      this.closable = closable;
    }
    if (closable) {
      var closeButtonComp = this.closeButtonComp = new Component(AgPanel.CLOSE_BTN_TEMPLATE);
      this.getContext().createBean(closeButtonComp);
      var eGui = closeButtonComp.getGui();
      eGui.appendChild(addCssClass(createIconNoSpan('close', this.gridOptionsWrapper), 'ag-panel-title-bar-button-icon'));
      this.addTitleBarButton(closeButtonComp);
      closeButtonComp.addManagedListener(eGui, 'click', this.onBtClose.bind(this));
    } else if (this.closeButtonComp) {
      var eGui = this.closeButtonComp.getGui();
      eGui.parentElement.removeChild(eGui);
      this.closeButtonComp = this.destroyBean(this.closeButtonComp);
    }
  };
  AgPanel.prototype.setBodyComponent = function (bodyComponent) {
    bodyComponent.setParentComponent(this);
    this.eContentWrapper.appendChild(bodyComponent.getGui());
  };
  AgPanel.prototype.addTitleBarButton = function (button, position) {
    var eTitleBarButtons = this.eTitleBarButtons;
    var buttons = eTitleBarButtons.children;
    var len = buttons.length;
    if (position == null) {
      position = len;
    }
    position = Math.max(0, Math.min(position, len));
    var eGui = button.getGui();
    addCssClass(eGui, 'ag-panel-title-bar-button');
    if (position === 0) {
      eTitleBarButtons.insertAdjacentElement('afterbegin', eGui);
    } else if (position === len) {
      eTitleBarButtons.insertAdjacentElement('beforeend', eGui);
    } else {
      buttons[position - 1].insertAdjacentElement('afterend', eGui);
    }
    button.setParentComponent(this);
  };
  AgPanel.prototype.getBodyHeight = function () {
    return getInnerHeight(this.eContentWrapper);
  };
  AgPanel.prototype.getBodyWidth = function () {
    return getInnerWidth(this.eContentWrapper);
  };
  AgPanel.prototype.setTitle = function (title) {
    this.eTitle.innerText = title;
  };
  // called when user hits the 'x' in the top right
  AgPanel.prototype.onBtClose = function () {
    this.close();
  };
  AgPanel.prototype.destroy = function () {
    if (this.closeButtonComp) {
      this.closeButtonComp = this.destroyBean(this.closeButtonComp);
    }
    var eGui = this.getGui();
    if (eGui && eGui.offsetParent) {
      this.close();
    }
    _super.prototype.destroy.call(this);
  };
  AgPanel.CLOSE_BTN_TEMPLATE = "<div class=\"ag-button\"></div>";
  __decorate$1K([Autowired('popupService')], AgPanel.prototype, "popupService", void 0);
  __decorate$1K([RefSelector('eContentWrapper')], AgPanel.prototype, "eContentWrapper", void 0);
  __decorate$1K([RefSelector('eTitleBar')], AgPanel.prototype, "eTitleBar", void 0);
  __decorate$1K([RefSelector('eTitleBarButtons')], AgPanel.prototype, "eTitleBarButtons", void 0);
  __decorate$1K([RefSelector('eTitle')], AgPanel.prototype, "eTitle", void 0);
  __decorate$1K([PostConstruct], AgPanel.prototype, "postConstruct", null);
  return AgPanel;
}(Component);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1R =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1L =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AgDialog = /** @class */function (_super) {
  __extends$1R(AgDialog, _super);
  function AgDialog(config) {
    var _this = _super.call(this, config) || this;
    _this.RESIZE_TEMPLATE = "<div class=\"ag-resizer-wrapper\">\n            <div ref=\"eTopLeftResizer\" class=\"ag-resizer ag-resizer-topLeft\"></div>\n            <div ref=\"eTopResizer\" class=\"ag-resizer ag-resizer-top\"></div>\n            <div ref=\"eTopRightResizer\" class=\"ag-resizer ag-resizer-topRight\"></div>\n            <div ref=\"eRightResizer\" class=\"ag-resizer ag-resizer-right\"></div>\n            <div ref=\"eBottomRightResizer\" class=\"ag-resizer ag-resizer-bottomRight\"></div>\n            <div ref=\"eBottomResizer\" class=\"ag-resizer ag-resizer-bottom\"></div>\n            <div ref=\"eBottomLeftResizer\" class=\"ag-resizer ag-resizer-bottomLeft\"></div>\n            <div ref=\"eLeftResizer\" class=\"ag-resizer ag-resizer-left\"></div>\n        </div>";
    _this.resizable = {};
    _this.movable = false;
    _this.isMoving = false;
    _this.isMaximizable = false;
    _this.isMaximized = false;
    _this.maximizeListeners = [];
    _this.resizeListenerDestroy = null;
    _this.isResizing = false;
    _this.lastPosition = {
      x: 0,
      y: 0,
      width: 0,
      height: 0
    };
    return _this;
  }
  AgDialog.prototype.postConstruct = function () {
    var _this = this;
    var eGui = this.getGui();
    var _a = this.config,
      movable = _a.movable,
      resizable = _a.resizable,
      maximizable = _a.maximizable;
    addCssClass(eGui, 'ag-dialog');
    this.moveElement = this.eTitleBar;
    _super.prototype.postConstruct.call(this);
    this.addManagedListener(eGui, 'focusin', function (e) {
      if (eGui.contains(e.relatedTarget)) {
        return;
      }
      _this.popupService.bringPopupToFront(eGui);
    });
    if (movable) {
      this.setMovable(movable);
    }
    if (maximizable) {
      this.setMaximizable(maximizable);
    }
    this.addResizers();
    if (resizable) {
      this.setResizable(resizable);
    }
  };
  AgDialog.prototype.renderComponent = function () {
    var eGui = this.getGui();
    var _a = this.config,
      alwaysOnTop = _a.alwaysOnTop,
      modal = _a.modal;
    var addPopupRes = this.popupService.addPopup({
      modal: modal,
      eChild: eGui,
      closeOnEsc: true,
      closedCallback: this.destroy.bind(this),
      alwaysOnTop: alwaysOnTop
    });
    if (addPopupRes) {
      this.close = addPopupRes.hideFunc;
    }
  };
  AgDialog.prototype.addResizers = function () {
    var eGui = this.getGui();
    if (!eGui) {
      return;
    }
    var parser = new DOMParser();
    var resizers = parser.parseFromString(this.RESIZE_TEMPLATE, 'text/html').body;
    eGui.appendChild(resizers.firstChild);
    this.createMap();
  };
  AgDialog.prototype.createMap = function () {
    var eGui = this.getGui();
    this.resizerMap = {
      topLeft: {
        element: eGui.querySelector('[ref=eTopLeftResizer]')
      },
      top: {
        element: eGui.querySelector('[ref=eTopResizer]')
      },
      topRight: {
        element: eGui.querySelector('[ref=eTopRightResizer]')
      },
      right: {
        element: eGui.querySelector('[ref=eRightResizer]')
      },
      bottomRight: {
        element: eGui.querySelector('[ref=eBottomRightResizer]')
      },
      bottom: {
        element: eGui.querySelector('[ref=eBottomResizer]')
      },
      bottomLeft: {
        element: eGui.querySelector('[ref=eBottomLeftResizer]')
      },
      left: {
        element: eGui.querySelector('[ref=eLeftResizer]')
      }
    };
  };
  AgDialog.prototype.getResizerElement = function (side) {
    return this.resizerMap[side].element;
  };
  AgDialog.prototype.onResizeStart = function (e) {
    this.isResizing = true;
    this.updateDragStartPosition(e.clientX, e.clientY);
  };
  AgDialog.prototype.onResize = function (e, side) {
    if (!this.isResizing) {
      return;
    }
    var isLeft = !!side.match(/left/i);
    var isRight = !!side.match(/right/i);
    var isTop = !!side.match(/top/i);
    var isBottom = !!side.match(/bottom/i);
    var isHorizontal = isLeft || isRight;
    var isVertical = isTop || isBottom;
    var _a = this.calculateMouseMovement({
        e: e,
        isLeft: isLeft,
        isTop: isTop
      }),
      movementX = _a.movementX,
      movementY = _a.movementY;
    var offsetLeft = 0;
    var offsetTop = 0;
    if (isHorizontal && movementX) {
      var direction = isLeft ? -1 : 1;
      var oldWidth = this.getWidth();
      var newWidth = oldWidth + movementX * direction;
      var skipWidth = false;
      if (isLeft) {
        offsetLeft = oldWidth - newWidth;
        if (this.position.x + offsetLeft <= 0 || newWidth <= this.minWidth) {
          skipWidth = true;
          offsetLeft = 0;
        }
      }
      if (!skipWidth) {
        this.setWidth(newWidth);
      }
    }
    if (isVertical && movementY) {
      var direction = isTop ? -1 : 1;
      var oldHeight = this.getHeight();
      var newHeight = oldHeight + movementY * direction;
      var skipHeight = false;
      if (isTop) {
        offsetTop = oldHeight - newHeight;
        if (this.position.y + offsetTop <= 0 || newHeight <= this.minHeight) {
          skipHeight = true;
          offsetTop = 0;
        }
      }
      if (!skipHeight) {
        this.setHeight(newHeight);
      }
    }
    this.updateDragStartPosition(e.clientX, e.clientY);
    if (offsetLeft || offsetTop) {
      this.offsetElement(this.position.x + offsetLeft, this.position.y + offsetTop);
    }
  };
  AgDialog.prototype.onResizeEnd = function () {
    this.isResizing = false;
    var params = {
      type: 'resize',
      api: this.gridOptionsWrapper.getApi(),
      columnApi: this.gridOptionsWrapper.getColumnApi()
    };
    this.dispatchEvent(params);
  };
  AgDialog.prototype.onMoveStart = function (e) {
    this.isMoving = true;
    this.updateDragStartPosition(e.clientX, e.clientY);
  };
  AgDialog.prototype.onMove = function (e) {
    if (!this.isMoving) {
      return;
    }
    var _a = this.position,
      x = _a.x,
      y = _a.y;
    var _b = this.calculateMouseMovement({
        e: e,
        isTop: true,
        anywhereWithin: true,
        topBuffer: this.getHeight() - this.getBodyHeight()
      }),
      movementX = _b.movementX,
      movementY = _b.movementY;
    this.offsetElement(x + movementX, y + movementY);
    this.updateDragStartPosition(e.clientX, e.clientY);
  };
  AgDialog.prototype.onMoveEnd = function () {
    this.isMoving = false;
  };
  AgDialog.prototype.toggleMaximize = function () {
    if (this.isMaximized) {
      var _a = this.lastPosition,
        x = _a.x,
        y = _a.y,
        width = _a.width,
        height = _a.height;
      this.setWidth(width);
      this.setHeight(height);
      this.offsetElement(x, y);
    } else {
      this.lastPosition.width = this.getWidth();
      this.lastPosition.height = this.getHeight();
      this.lastPosition.x = this.position.x;
      this.lastPosition.y = this.position.y;
      this.offsetElement(0, 0);
      this.setHeight('100%');
      this.setWidth('100%');
    }
    this.isMaximized = !this.isMaximized;
    this.refreshMaximizeIcon();
  };
  AgDialog.prototype.refreshMaximizeIcon = function () {
    setDisplayed(this.maximizeIcon, !this.isMaximized);
    setDisplayed(this.minimizeIcon, this.isMaximized);
  };
  AgDialog.prototype.clearMaximizebleListeners = function () {
    if (this.maximizeListeners.length) {
      this.maximizeListeners.forEach(function (destroyListener) {
        return destroyListener();
      });
      this.maximizeListeners.length = 0;
    }
    if (this.resizeListenerDestroy) {
      this.resizeListenerDestroy();
      this.resizeListenerDestroy = null;
    }
  };
  AgDialog.prototype.destroy = function () {
    this.setResizable(false);
    this.setMovable(false);
    this.maximizeButtonComp = this.destroyBean(this.maximizeButtonComp);
    this.clearMaximizebleListeners();
    _super.prototype.destroy.call(this);
  };
  AgDialog.prototype.setResizable = function (resizable) {
    var _this = this;
    if (typeof resizable === 'boolean') {
      resizable = {
        topLeft: resizable,
        top: resizable,
        topRight: resizable,
        right: resizable,
        bottomRight: resizable,
        bottom: resizable,
        bottomLeft: resizable,
        left: resizable
      };
    }
    Object.keys(resizable).forEach(function (side) {
      var r = resizable;
      var s = side;
      var val = !!r[s];
      var el = _this.getResizerElement(s);
      var params = _this.resizerMap[s].dragSource || {
        eElement: el,
        onDragStart: _this.onResizeStart.bind(_this),
        onDragging: function (e) {
          return _this.onResize(e, s);
        },
        onDragStop: _this.onResizeEnd.bind(_this)
      };
      if (!!_this.resizable[s] !== val || !_this.isAlive() && !val) {
        if (val) {
          _this.dragService.addDragSource(params);
          el.style.pointerEvents = 'all';
        } else {
          _this.dragService.removeDragSource(params);
          el.style.pointerEvents = 'none';
        }
        _this.resizerMap[s].dragSource = val ? params : undefined;
      }
    });
  };
  AgDialog.prototype.setMovable = function (movable) {
    if (movable === this.movable) {
      return;
    }
    this.movable = movable;
    var params = this.moveElementDragListener || {
      eElement: this.moveElement,
      onDragStart: this.onMoveStart.bind(this),
      onDragging: this.onMove.bind(this),
      onDragStop: this.onMoveEnd.bind(this)
    };
    if (movable) {
      this.dragService.addDragSource(params);
      this.moveElementDragListener = params;
    } else {
      this.dragService.removeDragSource(params);
      this.moveElementDragListener = undefined;
    }
  };
  AgDialog.prototype.setMaximizable = function (maximizable) {
    var _this = this;
    if (!maximizable) {
      this.clearMaximizebleListeners();
      if (this.maximizeButtonComp) {
        this.destroyBean(this.maximizeButtonComp);
        this.maximizeButtonComp = this.maximizeIcon = this.minimizeIcon = undefined;
      }
      return;
    }
    var eTitleBar = this.eTitleBar;
    if (!eTitleBar || maximizable === this.isMaximizable) {
      return;
    }
    var maximizeButtonComp = this.maximizeButtonComp = this.createBean(new Component( /* html */"<div class=\"ag-dialog-button\"></span>"));
    var eGui = maximizeButtonComp.getGui();
    eGui.appendChild(this.maximizeIcon = createIconNoSpan('maximize', this.gridOptionsWrapper));
    addCssClass(this.maximizeIcon, 'ag-panel-title-bar-button-icon');
    eGui.appendChild(this.minimizeIcon = createIconNoSpan('minimize', this.gridOptionsWrapper));
    addCssClass(this.minimizeIcon, 'ag-panel-title-bar-button-icon');
    addCssClass(this.minimizeIcon, 'ag-hidden');
    maximizeButtonComp.addManagedListener(eGui, 'click', this.toggleMaximize.bind(this));
    this.addTitleBarButton(maximizeButtonComp, 0);
    this.maximizeListeners.push(this.addManagedListener(eTitleBar, 'dblclick', this.toggleMaximize.bind(this)));
    this.resizeListenerDestroy = this.addManagedListener(this, 'resize', function () {
      _this.isMaximized = false;
      _this.refreshMaximizeIcon();
    });
  };
  __decorate$1L([Autowired('dragService')], AgDialog.prototype, "dragService", void 0);
  return AgDialog;
}(AgPanel);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1S =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AgInputTextField = /** @class */function (_super) {
  __extends$1S(AgInputTextField, _super);
  function AgInputTextField(config, className, inputType) {
    if (className === void 0) {
      className = 'ag-text-field';
    }
    if (inputType === void 0) {
      inputType = 'text';
    }
    return _super.call(this, config, className, inputType) || this;
  }
  AgInputTextField.prototype.postConstruct = function () {
    _super.prototype.postConstruct.call(this);
    if (this.config.allowedCharPattern) {
      this.preventDisallowedCharacters();
    }
  };
  AgInputTextField.prototype.setValue = function (value, silent) {
    var ret = _super.prototype.setValue.call(this, value, silent);
    if (this.eInput.value !== value) {
      this.eInput.value = exists(value) ? value : '';
    }
    return ret;
  };
  AgInputTextField.prototype.preventDisallowedCharacters = function () {
    var pattern = new RegExp("[" + this.config.allowedCharPattern + "]");
    var preventDisallowedCharacters = function (event) {
      if (event.key && !pattern.test(event.key)) {
        event.preventDefault();
      }
    };
    this.addManagedListener(this.eInput, 'keypress', preventDisallowedCharacters);
    this.addManagedListener(this.eInput, 'paste', function (e) {
      var text = e.clipboardData.getData('text');
      if (some(text, function (c) {
        return !pattern.test(c);
      })) {
        e.preventDefault();
      }
    });
  };
  return AgInputTextField;
}(AgAbstractInputField);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1T =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AgInputTextArea = /** @class */function (_super) {
  __extends$1T(AgInputTextArea, _super);
  function AgInputTextArea(config) {
    return _super.call(this, config, 'ag-text-area', null, 'textarea') || this;
  }
  AgInputTextArea.prototype.setValue = function (value, silent) {
    var ret = _super.prototype.setValue.call(this, value, silent);
    this.eInput.value = value;
    return ret;
  };
  AgInputTextArea.prototype.setCols = function (cols) {
    this.eInput.cols = cols;
    return this;
  };
  AgInputTextArea.prototype.setRows = function (rows) {
    this.eInput.rows = rows;
    return this;
  };
  return AgInputTextArea;
}(AgAbstractInputField);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1U =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1M =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AgSlider = /** @class */function (_super) {
  __extends$1U(AgSlider, _super);
  function AgSlider(config) {
    var _this = _super.call(this, config, AgSlider.TEMPLATE) || this;
    _this.labelAlignment = 'top';
    return _this;
  }
  AgSlider.prototype.init = function () {
    addCssClass(this.eSlider.getGui(), 'ag-slider-field');
  };
  AgSlider.prototype.onValueChange = function (callbackFn) {
    var _this = this;
    var eventChanged = AgAbstractField.EVENT_CHANGED;
    this.addManagedListener(this.eText, eventChanged, function () {
      var textValue = parseFloat(_this.eText.getValue());
      _this.eSlider.setValue(textValue.toString(), true);
      callbackFn(textValue || 0);
    });
    this.addManagedListener(this.eSlider, eventChanged, function () {
      var sliderValue = _this.eSlider.getValue();
      _this.eText.setValue(sliderValue, true);
      callbackFn(parseFloat(sliderValue));
    });
    return this;
  };
  AgSlider.prototype.setSliderWidth = function (width) {
    this.eSlider.setWidth(width);
    return this;
  };
  AgSlider.prototype.setTextFieldWidth = function (width) {
    this.eText.setWidth(width);
    return this;
  };
  AgSlider.prototype.setMinValue = function (minValue) {
    this.eSlider.setMinValue(minValue);
    this.eText.setMin(minValue);
    return this;
  };
  AgSlider.prototype.setMaxValue = function (maxValue) {
    this.eSlider.setMaxValue(maxValue);
    this.eText.setMax(maxValue);
    return this;
  };
  AgSlider.prototype.getValue = function () {
    return this.eText.getValue();
  };
  AgSlider.prototype.setValue = function (value) {
    if (this.getValue() === value) {
      return this;
    }
    this.eText.setValue(value, true);
    this.eSlider.setValue(value, true);
    this.dispatchEvent({
      type: AgAbstractField.EVENT_CHANGED
    });
    return this;
  };
  AgSlider.prototype.setStep = function (step) {
    this.eSlider.setStep(step);
    this.eText.setStep(step);
    return this;
  };
  AgSlider.TEMPLATE = "<div class=\"ag-slider\">\n            <label ref=\"eLabel\"></label>\n            <div class=\"ag-wrapper ag-slider-wrapper\">\n                <ag-input-range ref=\"eSlider\"></ag-input-range>\n                <ag-input-number-field ref=\"eText\"></ag-input-number-field>\n            </div>\n        </div>";
  __decorate$1M([RefSelector('eLabel')], AgSlider.prototype, "eLabel", void 0);
  __decorate$1M([RefSelector('eSlider')], AgSlider.prototype, "eSlider", void 0);
  __decorate$1M([RefSelector('eText')], AgSlider.prototype, "eText", void 0);
  __decorate$1M([PostConstruct], AgSlider.prototype, "init", null);
  return AgSlider;
}(AgAbstractLabel);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1V =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1N =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AgColorPanel = /** @class */function (_super) {
  __extends$1V(AgColorPanel, _super);
  function AgColorPanel(config) {
    var _this = _super.call(this, AgColorPanel.TEMPLATE) || this;
    _this.H = 1; // in the [0, 1] range
    _this.S = 1; // in the [0, 1] range
    _this.B = 1; // in the [0, 1] range
    _this.A = 1; // in the [0, 1] range
    _this.isSpectrumDragging = false;
    _this.isSpectrumHueDragging = false;
    _this.isSpectrumAlphaDragging = false;
    _this.colorChanged = false;
    _this.picker = config.picker;
    return _this;
  }
  AgColorPanel.prototype.postConstruct = function () {
    var eGui = this.getGui();
    this.initRecentColors();
    this.addManagedListener(this.spectrumVal, 'mousedown', this.onSpectrumDraggerDown.bind(this));
    this.addManagedListener(eGui, 'mousemove', this.onSpectrumDraggerMove.bind(this));
    this.addManagedListener(this.spectrumHue, 'mousedown', this.onSpectrumHueDown.bind(this));
    this.addManagedListener(eGui, 'mousemove', this.onSpectrumHueMove.bind(this));
    this.addManagedListener(this.spectrumAlpha, 'mousedown', this.onSpectrumAlphaDown.bind(this));
    this.addManagedListener(eGui, 'mousemove', this.onSpectrumAlphaMove.bind(this));
    // Listening to `mouseup` on the document on purpose. The user might release the mouse button
    // outside the UI control. When the mouse returns back to the control's area, the dragging
    // of the thumb is not expected and seen as a bug.
    this.addManagedListener(document, 'mouseup', this.onMouseUp.bind(this));
    this.addManagedListener(this.recentColors, 'click', this.onRecentColorClick.bind(this));
  };
  AgColorPanel.prototype.refreshSpectrumRect = function () {
    return this.spectrumValRect = this.spectrumVal.getBoundingClientRect();
  };
  AgColorPanel.prototype.refreshHueRect = function () {
    return this.spectrumHueRect = this.spectrumHue.getBoundingClientRect();
  };
  AgColorPanel.prototype.refreshAlphaRect = function () {
    return this.spectrumAlphaRect = this.spectrumAlpha.getBoundingClientRect();
  };
  AgColorPanel.prototype.onSpectrumDraggerDown = function (e) {
    this.refreshSpectrumRect();
    this.isSpectrumDragging = true;
    this.moveDragger(e);
  };
  AgColorPanel.prototype.onSpectrumDraggerMove = function (e) {
    if (this.isSpectrumDragging) {
      this.moveDragger(e);
    }
  };
  AgColorPanel.prototype.onSpectrumHueDown = function (e) {
    this.refreshHueRect();
    this.isSpectrumHueDragging = true;
    this.moveHueSlider(e);
  };
  AgColorPanel.prototype.onSpectrumHueMove = function (e) {
    if (this.isSpectrumHueDragging) {
      this.moveHueSlider(e);
    }
  };
  AgColorPanel.prototype.onSpectrumAlphaDown = function (e) {
    this.refreshAlphaRect();
    this.isSpectrumAlphaDragging = true;
    this.moveAlphaSlider(e);
  };
  AgColorPanel.prototype.onSpectrumAlphaMove = function (e) {
    if (this.isSpectrumAlphaDragging) {
      this.moveAlphaSlider(e);
    }
  };
  AgColorPanel.prototype.onMouseUp = function () {
    this.isSpectrumDragging = false;
    this.isSpectrumHueDragging = false;
    this.isSpectrumAlphaDragging = false;
  };
  AgColorPanel.prototype.moveDragger = function (e) {
    var valRect = this.spectrumValRect;
    if (valRect) {
      var x = e.clientX - valRect.left;
      var y = e.clientY - valRect.top;
      x = Math.max(x, 0);
      x = Math.min(x, valRect.width);
      y = Math.max(y, 0);
      y = Math.min(y, valRect.height);
      this.setSpectrumValue(x / valRect.width, 1 - y / valRect.height);
    }
  };
  AgColorPanel.prototype.moveHueSlider = function (e) {
    var hueRect = this.spectrumHueRect;
    if (hueRect) {
      var slider = this.spectrumHueSlider;
      var sliderRect = slider.getBoundingClientRect();
      var x = e.clientX - hueRect.left;
      x = Math.max(x, 0);
      x = Math.min(x, hueRect.width);
      this.H = 1 - x / hueRect.width;
      slider.style.left = x + sliderRect.width / 2 + 'px';
      this.update();
    }
  };
  AgColorPanel.prototype.moveAlphaSlider = function (e) {
    var alphaRect = this.spectrumAlphaRect;
    if (alphaRect) {
      var slider = this.spectrumAlphaSlider;
      var sliderRect = slider.getBoundingClientRect();
      var x = e.clientX - alphaRect.left;
      x = Math.max(x, 0);
      x = Math.min(x, alphaRect.width);
      this.A = x / alphaRect.width;
      slider.style.left = x + sliderRect.width / 2 + 'px';
      this.update();
    }
  };
  AgColorPanel.prototype.update = function () {
    var color = Color.fromHSB(this.H * 360, this.S, this.B, this.A);
    var spectrumColor = Color.fromHSB(this.H * 360, 1, 1);
    var rgbaColor = color.toRgbaString();
    // the recent color list needs to know color has actually changed
    var colorPicker = this.picker;
    var existingColor = Color.fromString(colorPicker.getValue());
    if (existingColor.toRgbaString() !== rgbaColor) {
      this.colorChanged = true;
    }
    colorPicker.setValue(rgbaColor);
    this.spectrumColor.style.backgroundColor = spectrumColor.toRgbaString();
    this.spectrumDragger.style.backgroundColor = rgbaColor;
  };
  /**
   * @param saturation In the [0, 1] interval.
   * @param brightness In the [0, 1] interval.
   */
  AgColorPanel.prototype.setSpectrumValue = function (saturation, brightness) {
    var valRect = this.spectrumValRect || this.refreshSpectrumRect();
    if (valRect) {
      var dragger = this.spectrumDragger;
      var draggerRect = dragger.getBoundingClientRect();
      saturation = Math.max(0, saturation);
      saturation = Math.min(1, saturation);
      brightness = Math.max(0, brightness);
      brightness = Math.min(1, brightness);
      this.S = saturation;
      this.B = brightness;
      dragger.style.left = saturation * valRect.width - draggerRect.width / 2 + 'px';
      dragger.style.top = (1 - brightness) * valRect.height - draggerRect.height / 2 + 'px';
      this.update();
    }
  };
  AgColorPanel.prototype.initRecentColors = function () {
    var recentColors = AgColorPanel.recentColors;
    var innerHtml = recentColors.map(function (color, index) {
      return "<div class=\"ag-recent-color\" id=" + index + " style=\"background-color: " + color + "; width: 15px; height: 15px;\" recent-color=\"" + color + "\"></div>";
    });
    this.recentColors.innerHTML = innerHtml.join('');
  };
  AgColorPanel.prototype.setValue = function (val) {
    var color = Color.fromString(val);
    var _a = color.toHSB(),
      h = _a[0],
      s = _a[1],
      b = _a[2];
    this.H = (isNaN(h) ? 0 : h) / 360;
    this.A = color.a;
    var spectrumHueRect = this.spectrumHueRect || this.refreshHueRect();
    var spectrumAlphaRect = this.spectrumAlphaRect || this.refreshAlphaRect();
    this.spectrumHueSlider.style.left = (this.H - 1) * -spectrumHueRect.width + "px";
    this.spectrumAlphaSlider.style.left = this.A * spectrumAlphaRect.width + "px";
    this.setSpectrumValue(s, b);
  };
  AgColorPanel.prototype.onRecentColorClick = function (e) {
    var target = e.target;
    if (!exists(target.id)) {
      return;
    }
    var id = parseInt(target.id, 10);
    this.setValue(AgColorPanel.recentColors[id]);
    this.destroy();
  };
  AgColorPanel.prototype.addRecentColor = function () {
    var color = Color.fromHSB(this.H * 360, this.S, this.B, this.A);
    var rgbaColor = color.toRgbaString();
    var recentColors = AgColorPanel.recentColors;
    if (!this.colorChanged || recentColors[0] === rgbaColor) {
      return;
    }
    // remove duplicate color
    recentColors = recentColors.filter(function (currentColor) {
      return currentColor != rgbaColor;
    });
    // add color to head
    recentColors = [rgbaColor].concat(recentColors);
    // ensure we don't exceed max number of recent colors
    if (recentColors.length > AgColorPanel.maxRecentColors) {
      recentColors = recentColors.slice(0, AgColorPanel.maxRecentColors);
    }
    AgColorPanel.recentColors = recentColors;
  };
  AgColorPanel.prototype.destroy = function () {
    this.addRecentColor();
    _super.prototype.destroy.call(this);
  };
  AgColorPanel.maxRecentColors = 8;
  AgColorPanel.recentColors = [];
  AgColorPanel.TEMPLATE = "<div class=\"ag-color-panel\">\n            <div ref=\"spectrumColor\" class=\"ag-spectrum-color\">\n                <div class=\"ag-spectrum-sat ag-spectrum-fill\">\n                    <div ref=\"spectrumVal\" class=\"ag-spectrum-val ag-spectrum-fill\">\n                        <div ref=\"spectrumDragger\" class=\"ag-spectrum-dragger\"></div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"ag-spectrum-tools\">\n                <div ref=\"spectrumHue\" class=\"ag-spectrum-hue ag-spectrum-tool\">\n                    <div class=\"ag-spectrum-hue-background\"></div>\n                    <div ref=\"spectrumHueSlider\" class=\"ag-spectrum-slider\"></div>\n                </div>\n                <div ref=\"spectrumAlpha\" class=\"ag-spectrum-alpha ag-spectrum-tool\">\n                    <div class=\"ag-spectrum-alpha-background\"></div>\n                    <div ref=\"spectrumAlphaSlider\" class=\"ag-spectrum-slider\"></div>\n                </div>\n                <div ref=\"recentColors\" class=\"ag-recent-colors\"></div>\n            </div>\n        </div>";
  __decorate$1N([RefSelector('spectrumColor')], AgColorPanel.prototype, "spectrumColor", void 0);
  __decorate$1N([RefSelector('spectrumVal')], AgColorPanel.prototype, "spectrumVal", void 0);
  __decorate$1N([RefSelector('spectrumDragger')], AgColorPanel.prototype, "spectrumDragger", void 0);
  __decorate$1N([RefSelector('spectrumHue')], AgColorPanel.prototype, "spectrumHue", void 0);
  __decorate$1N([RefSelector('spectrumHueSlider')], AgColorPanel.prototype, "spectrumHueSlider", void 0);
  __decorate$1N([RefSelector('spectrumAlpha')], AgColorPanel.prototype, "spectrumAlpha", void 0);
  __decorate$1N([RefSelector('spectrumAlphaSlider')], AgColorPanel.prototype, "spectrumAlphaSlider", void 0);
  __decorate$1N([RefSelector('recentColors')], AgColorPanel.prototype, "recentColors", void 0);
  __decorate$1N([PostConstruct], AgColorPanel.prototype, "postConstruct", null);
  return AgColorPanel;
}(Component);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1W =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1O =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AgPickerField = /** @class */function (_super) {
  __extends$1W(AgPickerField, _super);
  function AgPickerField(config, className, pickerIcon, popupRole) {
    var _this = _super.call(this, config, /* html */"<div class=\"ag-picker-field\" role=\"presentation\">\n                <div ref=\"eLabel\"></div>\n                <div ref=\"eWrapper\"\n                    class=\"ag-wrapper ag-picker-field-wrapper\"\n                    tabIndex=\"-1\"\n                    " + (popupRole ? "aria-haspopup=\"" + popupRole + "\"" : '') + "\n                >\n                    <div ref=\"eDisplayField\" class=\"ag-picker-field-display\"></div>\n                    <div ref=\"eIcon\" class=\"ag-picker-field-icon\" aria-hidden=\"true\"></div>\n                </div>\n            </div>", className) || this;
    _this.pickerIcon = pickerIcon;
    _this.isPickerDisplayed = false;
    _this.isDestroyingPicker = false;
    _this.skipClick = false;
    return _this;
  }
  AgPickerField.prototype.postConstruct = function () {
    var _this = this;
    _super.prototype.postConstruct.call(this);
    var displayId = this.getCompId() + "-display";
    this.eDisplayField.setAttribute('id', displayId);
    setAriaDescribedBy(this.eWrapper, displayId);
    var clickHandler = function () {
      if (_this.skipClick) {
        _this.skipClick = false;
        return;
      }
      if (_this.isDisabled()) {
        return;
      }
      _this.pickerComponent = _this.showPicker();
    };
    var eGui = this.getGui();
    this.addManagedListener(eGui, 'mousedown', function (e) {
      if (!_this.skipClick && _this.pickerComponent && _this.pickerComponent.isAlive() && isVisible(_this.pickerComponent.getGui()) && eGui.contains(e.target)) {
        _this.skipClick = true;
      }
    });
    this.addManagedListener(eGui, 'keydown', function (e) {
      switch (e.keyCode) {
        case KeyCode.UP:
        case KeyCode.DOWN:
        case KeyCode.ENTER:
        case KeyCode.SPACE:
          clickHandler();
        case KeyCode.ESCAPE:
          if (_this.isPickerDisplayed) {
            e.preventDefault();
          }
          break;
      }
    });
    this.addManagedListener(this.eWrapper, 'click', clickHandler);
    this.addManagedListener(this.eLabel, 'click', clickHandler);
    if (this.pickerIcon) {
      var icon = createIconNoSpan(this.pickerIcon, this.gridOptionsWrapper);
      if (icon) {
        this.eIcon.appendChild(icon);
      }
    }
  };
  AgPickerField.prototype.refreshLabel = function () {
    if (exists(this.getLabel())) {
      setAriaLabelledBy(this.eWrapper, this.getLabelId());
    } else {
      this.eWrapper.removeAttribute('aria-labelledby');
    }
    _super.prototype.refreshLabel.call(this);
  };
  AgPickerField.prototype.setAriaLabel = function (label) {
    setAriaLabel(this.eWrapper, label);
    return this;
  };
  AgPickerField.prototype.setInputWidth = function (width) {
    setElementWidth(this.eWrapper, width);
    return this;
  };
  AgPickerField.prototype.getFocusableElement = function () {
    return this.eWrapper;
  };
  __decorate$1O([RefSelector('eLabel')], AgPickerField.prototype, "eLabel", void 0);
  __decorate$1O([RefSelector('eWrapper')], AgPickerField.prototype, "eWrapper", void 0);
  __decorate$1O([RefSelector('eDisplayField')], AgPickerField.prototype, "eDisplayField", void 0);
  __decorate$1O([RefSelector('eIcon')], AgPickerField.prototype, "eIcon", void 0);
  return AgPickerField;
}(AgAbstractField);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1X =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AgColorPicker = /** @class */function (_super) {
  __extends$1X(AgColorPicker, _super);
  function AgColorPicker(config) {
    var _this = _super.call(this, config, 'ag-color-picker', 'colorPicker') || this;
    if (config && config.color) {
      _this.value = config.color;
    }
    return _this;
  }
  AgColorPicker.prototype.postConstruct = function () {
    _super.prototype.postConstruct.call(this);
    if (this.value) {
      this.setValue(this.value);
    }
  };
  AgColorPicker.prototype.showPicker = function () {
    var _this = this;
    var eGuiRect = this.getGui().getBoundingClientRect();
    var colorDialog = this.createBean(new AgDialog({
      closable: false,
      modal: true,
      hideTitleBar: true,
      minWidth: 190,
      width: 190,
      height: 250,
      x: eGuiRect.right - 190,
      y: eGuiRect.top - 250
    }));
    this.isPickerDisplayed = true;
    addCssClass(colorDialog.getGui(), 'ag-color-dialog');
    var colorPanel = this.createBean(new AgColorPanel({
      picker: this
    }));
    colorPanel.addDestroyFunc(function () {
      if (colorDialog.isAlive()) {
        _this.destroyBean(colorDialog);
      }
    });
    colorDialog.setParentComponent(this);
    colorDialog.setBodyComponent(colorPanel);
    colorPanel.setValue(this.getValue());
    colorDialog.addDestroyFunc(function () {
      // here we check if the picker was already being
      // destroyed to avoid a stack overflow
      if (!_this.isDestroyingPicker) {
        _this.isDestroyingPicker = true;
        if (colorPanel.isAlive()) {
          _this.destroyBean(colorPanel);
        }
      } else {
        _this.isDestroyingPicker = false;
      }
      if (_this.isAlive()) {
        _this.getFocusableElement().focus();
      }
      _this.isPickerDisplayed = false;
    });
    return colorDialog;
  };
  AgColorPicker.prototype.setValue = function (color) {
    if (this.value === color) {
      return this;
    }
    this.eDisplayField.style.backgroundColor = color;
    return _super.prototype.setValue.call(this, color);
  };
  AgColorPicker.prototype.getValue = function () {
    return this.value;
  };
  return AgColorPicker;
}(AgPickerField);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1Y =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AgInputNumberField = /** @class */function (_super) {
  __extends$1Y(AgInputNumberField, _super);
  function AgInputNumberField(config) {
    return _super.call(this, config, 'ag-number-field', 'number') || this;
  }
  AgInputNumberField.prototype.postConstruct = function () {
    var _this = this;
    _super.prototype.postConstruct.call(this);
    this.addManagedListener(this.eInput, 'blur', function () {
      var floatedValue = parseFloat(_this.eInput.value);
      var value = isNaN(floatedValue) ? '' : _this.normalizeValue(floatedValue.toString());
      if (_this.value !== value) {
        _this.setValue(value);
      }
    });
  };
  AgInputNumberField.prototype.normalizeValue = function (value) {
    if (value === '') {
      return '';
    }
    if (this.precision) {
      value = this.adjustPrecision(value);
    }
    var val = parseFloat(value);
    if (this.min != null && val < this.min) {
      value = this.min.toString();
    } else if (this.max != null && val > this.max) {
      value = this.max.toString();
    }
    return value;
  };
  AgInputNumberField.prototype.adjustPrecision = function (value) {
    if (this.precision) {
      var floatString = parseFloat(value).toFixed(this.precision);
      value = parseFloat(floatString).toString();
    }
    return value;
  };
  AgInputNumberField.prototype.setMin = function (min) {
    if (this.min === min) {
      return this;
    }
    this.min = min;
    addOrRemoveAttribute(this.eInput, 'min', min);
    return this;
  };
  AgInputNumberField.prototype.setMax = function (max) {
    if (this.max === max) {
      return this;
    }
    this.max = max;
    addOrRemoveAttribute(this.eInput, 'max', max);
    return this;
  };
  AgInputNumberField.prototype.setPrecision = function (precision) {
    this.precision = precision;
    return this;
  };
  AgInputNumberField.prototype.setStep = function (step) {
    if (this.step === step) {
      return this;
    }
    this.step = step;
    addOrRemoveAttribute(this.eInput, 'step', step);
    return this;
  };
  AgInputNumberField.prototype.setValue = function (value, silent) {
    value = this.adjustPrecision(value);
    var normalizedValue = this.normalizeValue(value);
    if (value != normalizedValue) {
      return this;
    }
    return _super.prototype.setValue.call(this, value, silent);
  };
  return AgInputNumberField;
}(AgInputTextField);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1Z =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AgInputRange = /** @class */function (_super) {
  __extends$1Z(AgInputRange, _super);
  function AgInputRange(config) {
    return _super.call(this, config, 'ag-range-field', 'range') || this;
  }
  AgInputRange.prototype.postConstruct = function () {
    _super.prototype.postConstruct.call(this);
    var _a = this.config,
      min = _a.min,
      max = _a.max,
      step = _a.step;
    if (min != null) {
      this.setMinValue(min);
    }
    if (max != null) {
      this.setMaxValue(max);
    }
    this.setStep(step || 1);
  };
  AgInputRange.prototype.addInputListeners = function () {
    var _this = this;
    var isIE = isBrowserIE();
    var eventName = isIE ? 'change' : 'input';
    this.addManagedListener(this.eInput, eventName, function (e) {
      var value = e.target.value;
      _this.setValue(value);
    });
  };
  AgInputRange.prototype.setMinValue = function (value) {
    this.min = value;
    this.eInput.setAttribute('min', value.toString());
    return this;
  };
  AgInputRange.prototype.setMaxValue = function (value) {
    this.max = value;
    this.eInput.setAttribute('max', value.toString());
    return this;
  };
  AgInputRange.prototype.setStep = function (value) {
    this.eInput.setAttribute('step', value.toString());
    return this;
  };
  AgInputRange.prototype.setValue = function (value, silent) {
    if (this.min != null) {
      value = Math.max(parseFloat(value), this.min).toString();
    }
    if (this.max != null) {
      value = Math.min(parseFloat(value), this.max).toString();
    }
    var ret = _super.prototype.setValue.call(this, value, silent);
    this.eInput.value = value;
    return ret;
  };
  return AgInputRange;
}(AgAbstractInputField);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1_ =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1P =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AgList = /** @class */function (_super) {
  __extends$1_(AgList, _super);
  function AgList(cssIdentifier) {
    if (cssIdentifier === void 0) {
      cssIdentifier = 'default';
    }
    var _this = _super.call(this, /* html */"<div class=\"ag-list ag-" + cssIdentifier + "-list\" role=\"listbox\"></div>") || this;
    _this.cssIdentifier = cssIdentifier;
    _this.options = [];
    _this.itemEls = [];
    return _this;
  }
  AgList.prototype.init = function () {
    this.addManagedListener(this.getGui(), 'keydown', this.handleKeyDown.bind(this));
  };
  AgList.prototype.handleKeyDown = function (e) {
    var key = e.keyCode;
    switch (key) {
      case KeyCode.ENTER:
        if (!this.highlightedEl) {
          this.setValue(this.getValue());
        } else {
          var pos = this.itemEls.indexOf(this.highlightedEl);
          this.setValueByIndex(pos);
        }
        break;
      case KeyCode.DOWN:
      case KeyCode.UP:
        var isDown = key === KeyCode.DOWN;
        var itemToHighlight = void 0;
        e.preventDefault();
        if (!this.highlightedEl) {
          itemToHighlight = this.itemEls[isDown ? 0 : this.itemEls.length - 1];
        } else {
          var currentIdx = this.itemEls.indexOf(this.highlightedEl);
          var nextPos = currentIdx + (isDown ? 1 : -1);
          nextPos = Math.min(Math.max(nextPos, 0), this.itemEls.length - 1);
          itemToHighlight = this.itemEls[nextPos];
        }
        this.highlightItem(itemToHighlight);
        break;
    }
  };
  AgList.prototype.addOptions = function (listOptions) {
    var _this = this;
    listOptions.forEach(function (listOption) {
      return _this.addOption(listOption);
    });
    return this;
  };
  AgList.prototype.addOption = function (listOption) {
    var value = listOption.value,
      text = listOption.text;
    var sanitisedText = escapeString(text || value);
    this.options.push({
      value: value,
      text: sanitisedText
    });
    this.renderOption(value, sanitisedText);
    return this;
  };
  AgList.prototype.renderOption = function (value, text) {
    var _this = this;
    var itemEl = document.createElement('div');
    itemEl.setAttribute('role', 'option');
    addCssClass(itemEl, 'ag-list-item');
    addCssClass(itemEl, "ag-" + this.cssIdentifier + "-list-item");
    itemEl.innerHTML = "<span>" + text + "</span>";
    itemEl.tabIndex = -1;
    this.itemEls.push(itemEl);
    this.addManagedListener(itemEl, 'mouseover', function () {
      return _this.highlightItem(itemEl);
    });
    this.addManagedListener(itemEl, 'mouseleave', function () {
      return _this.clearHighlighted();
    });
    this.addManagedListener(itemEl, 'click', function () {
      return _this.setValue(value);
    });
    this.getGui().appendChild(itemEl);
  };
  AgList.prototype.setValue = function (value, silent) {
    if (this.value === value) {
      this.fireItemSelected();
      return this;
    }
    if (value == null) {
      this.reset();
      return this;
    }
    var idx = findIndex(this.options, function (option) {
      return option.value === value;
    });
    if (idx !== -1) {
      var option = this.options[idx];
      this.value = option.value;
      this.displayValue = option.text != null ? option.text : option.value;
      this.highlightItem(this.itemEls[idx]);
      if (!silent) {
        this.fireChangeEvent();
      }
    }
    return this;
  };
  AgList.prototype.setValueByIndex = function (idx) {
    return this.setValue(this.options[idx].value);
  };
  AgList.prototype.getValue = function () {
    return this.value;
  };
  AgList.prototype.getDisplayValue = function () {
    return this.displayValue;
  };
  AgList.prototype.refreshHighlighted = function () {
    var _this = this;
    this.clearHighlighted();
    var idx = findIndex(this.options, function (option) {
      return option.value === _this.value;
    });
    if (idx !== -1) {
      this.highlightItem(this.itemEls[idx]);
    }
  };
  AgList.prototype.reset = function () {
    this.value = null;
    this.displayValue = null;
    this.clearHighlighted();
    this.fireChangeEvent();
  };
  AgList.prototype.highlightItem = function (el) {
    if (!el.offsetParent) {
      return;
    }
    this.clearHighlighted();
    this.highlightedEl = el;
    addCssClass(this.highlightedEl, AgList.ACTIVE_CLASS);
    setAriaSelected(this.highlightedEl, true);
    this.highlightedEl.focus();
  };
  AgList.prototype.clearHighlighted = function () {
    if (!this.highlightedEl || !this.highlightedEl.offsetParent) {
      return;
    }
    removeCssClass(this.highlightedEl, AgList.ACTIVE_CLASS);
    setAriaSelected(this.highlightedEl, false);
    this.highlightedEl = null;
  };
  AgList.prototype.fireChangeEvent = function () {
    this.dispatchEvent({
      type: AgAbstractField.EVENT_CHANGED
    });
    this.fireItemSelected();
  };
  AgList.prototype.fireItemSelected = function () {
    this.dispatchEvent({
      type: AgList.EVENT_ITEM_SELECTED
    });
  };
  AgList.EVENT_ITEM_SELECTED = 'selectedItem';
  AgList.ACTIVE_CLASS = 'ag-active-item';
  __decorate$1P([PostConstruct], AgList.prototype, "init", null);
  return AgList;
}(Component);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$1$ =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1Q =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AgSelect = /** @class */function (_super) {
  __extends$1$(AgSelect, _super);
  function AgSelect(config) {
    return _super.call(this, config, 'ag-select', 'smallDown', 'listbox') || this;
  }
  AgSelect.prototype.init = function () {
    var _this = this;
    this.listComponent = this.createBean(new AgList('select'));
    this.listComponent.setParentComponent(this);
    this.eWrapper.tabIndex = 0;
    this.listComponent.addManagedListener(this.listComponent, AgList.EVENT_ITEM_SELECTED, function () {
      if (_this.hideList) {
        _this.hideList();
      }
    });
    this.listComponent.addManagedListener(this.listComponent, AgAbstractField.EVENT_CHANGED, function () {
      _this.setValue(_this.listComponent.getValue(), false, true);
      if (_this.hideList) {
        _this.hideList();
      }
    });
  };
  AgSelect.prototype.showPicker = function () {
    var _this = this;
    var listGui = this.listComponent.getGui();
    var destroyMouseWheelFunc = this.addManagedListener(document.body, 'wheel', function (e) {
      if (!listGui.contains(e.target) && _this.hideList) {
        _this.hideList();
      }
    });
    var destroyFocusOutFunc = this.addManagedListener(listGui, 'focusout', function (e) {
      if (!listGui.contains(e.relatedTarget) && _this.hideList) {
        _this.hideList();
      }
    });
    var addPopupRes = this.popupService.addPopup({
      modal: true,
      eChild: listGui,
      closeOnEsc: true,
      closedCallback: function () {
        _this.hideList = null;
        _this.isPickerDisplayed = false;
        destroyFocusOutFunc();
        destroyMouseWheelFunc();
        if (_this.isAlive()) {
          _this.getFocusableElement().focus();
        }
      }
    });
    if (addPopupRes) {
      this.hideList = addPopupRes.hideFunc;
    }
    this.isPickerDisplayed = true;
    setElementWidth(listGui, getAbsoluteWidth(this.eWrapper));
    listGui.style.maxHeight = getInnerHeight(this.popupService.getPopupParent()) + 'px';
    listGui.style.position = 'absolute';
    this.popupService.positionPopupUnderComponent({
      type: 'ag-list',
      eventSource: this.eWrapper,
      ePopup: listGui,
      keepWithinBounds: true
    });
    this.listComponent.refreshHighlighted();
    return this.listComponent;
  };
  AgSelect.prototype.addOptions = function (options) {
    var _this = this;
    options.forEach(function (option) {
      return _this.addOption(option);
    });
    return this;
  };
  AgSelect.prototype.addOption = function (option) {
    this.listComponent.addOption(option);
    return this;
  };
  AgSelect.prototype.setValue = function (value, silent, fromPicker) {
    if (this.value === value) {
      return this;
    }
    if (!fromPicker) {
      this.listComponent.setValue(value, true);
    }
    var newValue = this.listComponent.getValue();
    if (newValue === this.getValue()) {
      return this;
    }
    this.eDisplayField.innerHTML = this.listComponent.getDisplayValue();
    return _super.prototype.setValue.call(this, value, silent);
  };
  AgSelect.prototype.destroy = function () {
    if (this.hideList) {
      this.hideList();
    }
    this.destroyBean(this.listComponent);
    _super.prototype.destroy.call(this);
  };
  __decorate$1Q([Autowired('popupService')], AgSelect.prototype, "popupService", void 0);
  __decorate$1Q([PostConstruct], AgSelect.prototype, "init", null);
  return AgSelect;
}(AgPickerField);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$20 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1R =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AgAngleSelect = /** @class */function (_super) {
  __extends$20(AgAngleSelect, _super);
  function AgAngleSelect(config) {
    var _this = _super.call(this, config, AgAngleSelect.TEMPLATE) || this;
    _this.radius = 0;
    _this.offsetX = 0;
    _this.offsetY = 0;
    return _this;
  }
  AgAngleSelect.prototype.postConstruct = function () {
    var _this = this;
    _super.prototype.postConstruct.call(this);
    this.dragListener = {
      eElement: this.eParentCircle,
      dragStartPixels: 0,
      onDragStart: function (e) {
        _this.parentCircleRect = _this.eParentCircle.getBoundingClientRect();
      },
      onDragging: function (e) {
        return _this.calculateAngleDrag(e);
      },
      onDragStop: function () {}
    };
    this.dragService.addDragSource(this.dragListener);
    this.eAngleValue.setLabel('').setLabelWidth(5).setInputWidth(45).setMin(0).setMax(360).setValue("" + this.degrees).onValueChange(function (value) {
      if (value == null || value === '') {
        value = '0';
      }
      value = _this.eAngleValue.normalizeValue(value);
      var floatValue = parseFloat(value);
      if (floatValue > 180) {
        floatValue = floatValue - 360;
      }
      _this.setValue(floatValue);
    });
    this.updateNumberInput();
    if (exists(this.getValue())) {
      this.eAngleValue.setValue(this.normalizeNegativeValue(this.getValue()).toString());
    }
    this.addManagedListener(this, AgAbstractField.EVENT_CHANGED, function () {
      if (_this.eAngleValue.getInputElement().contains(document.activeElement)) {
        return;
      }
      _this.updateNumberInput();
    });
  };
  AgAngleSelect.prototype.updateNumberInput = function () {
    var normalizedValue = this.normalizeNegativeValue(this.getValue());
    this.eAngleValue.setValue(normalizedValue.toString());
  };
  AgAngleSelect.prototype.positionChildCircle = function (radians) {
    var rect = this.parentCircleRect || {
      width: 24,
      height: 24
    };
    var eChildCircle = this.eChildCircle;
    var centerX = rect.width / 2;
    var centerY = rect.height / 2;
    eChildCircle.style.left = centerX + Math.cos(radians) * 8 + "px";
    eChildCircle.style.top = centerY + Math.sin(radians) * 8 + "px";
  };
  AgAngleSelect.prototype.calculatePolar = function () {
    var x = this.offsetX;
    var y = this.offsetY;
    var radians = Math.atan2(y, x);
    this.degrees = this.toDegrees(radians);
    this.radius = Math.sqrt(x * x + y * y);
    this.positionChildCircle(radians);
  };
  AgAngleSelect.prototype.calculateCartesian = function () {
    var radians = this.toRadians(this.getValue());
    var radius = this.getRadius();
    this.setOffsetX(Math.cos(radians) * radius).setOffsetY(Math.sin(radians) * radius);
  };
  AgAngleSelect.prototype.setOffsetX = function (offset) {
    if (this.offsetX !== offset) {
      this.offsetX = offset;
      this.calculatePolar();
    }
    return this;
  };
  AgAngleSelect.prototype.setOffsetY = function (offset) {
    if (this.offsetY !== offset) {
      this.offsetY = offset;
      this.calculatePolar();
    }
    return this;
  };
  AgAngleSelect.prototype.calculateAngleDrag = function (e) {
    var rect = this.parentCircleRect;
    var centerX = rect.width / 2;
    var centerY = rect.height / 2;
    var x = e.clientX - rect.left;
    var y = e.clientY - rect.top;
    var dx = x - centerX;
    var dy = y - centerY;
    var radians = Math.atan2(dy, dx);
    this.setValue(radians, true);
  };
  AgAngleSelect.prototype.toDegrees = function (radians) {
    return radians / Math.PI * 180;
  };
  AgAngleSelect.prototype.toRadians = function (degrees) {
    return degrees / 180 * Math.PI;
  };
  AgAngleSelect.prototype.normalizeNegativeValue = function (degrees) {
    return degrees < 0 ? 360 + degrees : degrees;
  };
  AgAngleSelect.prototype.normalizeAngle180 = function (radians) {
    radians %= Math.PI * 2;
    if (radians < -Math.PI) {
      radians += Math.PI * 2;
    } else if (radians >= Math.PI) {
      radians -= Math.PI * 2;
    }
    return radians;
  };
  AgAngleSelect.prototype.getRadius = function () {
    return this.radius;
  };
  AgAngleSelect.prototype.setRadius = function (r) {
    if (this.radius === r) {
      return this;
    }
    this.radius = r;
    this.calculateCartesian();
    return this;
  };
  AgAngleSelect.prototype.onValueChange = function (callbackFn) {
    var _this = this;
    this.addManagedListener(this, AgAbstractField.EVENT_CHANGED, function () {
      callbackFn(_this.degrees);
    });
    return this;
  };
  AgAngleSelect.prototype.getValue = function (radians) {
    return radians ? this.toRadians(this.degrees) : this.degrees;
  };
  AgAngleSelect.prototype.setValue = function (degrees, radians) {
    var radiansValue;
    if (!radians) {
      radiansValue = this.normalizeAngle180(this.toRadians(degrees));
    } else {
      radiansValue = degrees;
    }
    degrees = this.toDegrees(radiansValue);
    if (this.degrees !== degrees) {
      this.degrees = Math.floor(degrees);
      this.calculateCartesian();
      this.positionChildCircle(radiansValue);
      this.dispatchEvent({
        type: AgAbstractField.EVENT_CHANGED
      });
    }
    return this;
  };
  AgAngleSelect.prototype.setWidth = function (width) {
    setFixedWidth(this.getGui(), width);
    return this;
  };
  AgAngleSelect.prototype.destroy = function () {
    this.dragService.removeDragSource(this.dragListener);
    _super.prototype.destroy.call(this);
  };
  AgAngleSelect.TEMPLATE = "<div class=\"ag-angle-select\">\n            <div ref=\"eLabel\"></div>\n            <div class=\"ag-wrapper ag-angle-select-wrapper\">\n                <div ref=\"eAngleSelectField\" class=\"ag-angle-select-field\">\n                    <div ref=\"eParentCircle\" class=\"ag-angle-select-parent-circle\">\n                        <div ref=\"eChildCircle\" class=\"ag-angle-select-child-circle\"></div>\n                    </div>\n                </div>\n                <ag-input-number-field ref=\"eAngleValue\"></ag-input-number-field>\n            </div>\n        </div>";
  __decorate$1R([RefSelector('eLabel')], AgAngleSelect.prototype, "eLabel", void 0);
  __decorate$1R([RefSelector('eParentCircle')], AgAngleSelect.prototype, "eParentCircle", void 0);
  __decorate$1R([RefSelector('eChildCircle')], AgAngleSelect.prototype, "eChildCircle", void 0);
  __decorate$1R([RefSelector('eAngleValue')], AgAngleSelect.prototype, "eAngleValue", void 0);
  __decorate$1R([Autowired('dragService')], AgAngleSelect.prototype, "dragService", void 0);
  return AgAngleSelect;
}(AgAbstractLabel);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$21 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AgToggleButton = /** @class */function (_super) {
  __extends$21(AgToggleButton, _super);
  function AgToggleButton(config) {
    return _super.call(this, config, 'ag-toggle-button') || this;
  }
  AgToggleButton.prototype.setValue = function (value, silent) {
    _super.prototype.setValue.call(this, value, silent);
    addOrRemoveCssClass(this.getGui(), 'ag-selected', this.getValue());
    return this;
  };
  return AgToggleButton;
}(AgCheckbox);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$22 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1S =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * For Master Detail, it is required to keep components between expanding & collapsing parents.
 * For example a user expands row A (and shows a detail grid for this row), then when row A
 * is closed, we want to keep the detail grid, so next time row A is expanded the detail grid
 * is showed with it's context intact, eg if user sorted in the detail grid, that sort should
 * still be applied after the detail grid is shown for the second time.
 */
var DetailRowCompCache = /** @class */function (_super) {
  __extends$22(DetailRowCompCache, _super);
  function DetailRowCompCache() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.cacheItems = [];
    return _this;
  }
  DetailRowCompCache.prototype.postConstruct = function () {
    this.active = this.gridOptionsWrapper.isKeepDetailRows();
    this.maxCacheSize = this.gridOptionsWrapper.getKeepDetailRowsCount();
  };
  DetailRowCompCache.prototype.addOrDestroy = function (rowNode, pinned, comp) {
    // only accept detail rows
    var doNotUseCache = !this.active || !rowNode.detail;
    if (doNotUseCache) {
      this.destroyFullWidthRow(comp);
      return;
    }
    var item = this.getCacheItem(rowNode, true);
    // put the comp in the right location of the item.
    // we also destroy any previous comp - this should never happen
    // as the logic outside of this class shouldn't be adding same item to the
    // cache twice, however we cater for it in case in future releases code
    // outside of this class is changed and this could happen.
    switch (pinned) {
      case Constants.PINNED_LEFT:
        this.destroyFullWidthRow(item.left);
        item.left = comp;
        break;
      case Constants.PINNED_RIGHT:
        this.destroyFullWidthRow(item.right);
        item.right = comp;
        break;
      default:
        this.destroyFullWidthRow(item.center);
        item.center = comp;
        break;
    }
    this.cacheItems.sort(function (a, b) {
      return b.lastAccessedTime - a.lastAccessedTime;
    });
    this.purgeCache(this.maxCacheSize);
  };
  DetailRowCompCache.prototype.getCacheItem = function (rowNode, autoCreate) {
    if (autoCreate === void 0) {
      autoCreate = false;
    }
    var res = null;
    for (var i = 0; i < this.cacheItems.length; i++) {
      var item = this.cacheItems[i];
      if (item.rowNode === rowNode) {
        res = item;
        break;
      }
    }
    if (!res && autoCreate) {
      res = {
        rowNode: rowNode
      };
      this.cacheItems.push(res);
    }
    if (res) {
      this.stampCacheItem(res);
    }
    return res;
  };
  DetailRowCompCache.prototype.stampCacheItem = function (item) {
    item.lastAccessedTime = new Date().getTime();
  };
  DetailRowCompCache.prototype.destroyFullWidthRow = function (comp) {
    this.getContext().destroyBean(comp);
  };
  DetailRowCompCache.prototype.purgeCache = function (startIndex) {
    // delete all rows past the index of interest
    for (var i = startIndex; i < this.cacheItems.length; i++) {
      var item = this.cacheItems[i];
      this.destroyFullWidthRow(item.center);
      this.destroyFullWidthRow(item.left);
      this.destroyFullWidthRow(item.right);
    }
    // change the length of the array so it no longer contains the deleted items
    if (this.cacheItems.length > startIndex) {
      this.cacheItems.length = startIndex;
    }
  };
  DetailRowCompCache.prototype.get = function (rowNode, pinned) {
    if (!rowNode.detail) {
      return;
    }
    var item = this.getCacheItem(rowNode);
    var res;
    if (item) {
      switch (pinned) {
        case Constants.PINNED_LEFT:
          if (item.left) {
            res = item.left;
            item.left = undefined;
          }
          break;
        case Constants.PINNED_RIGHT:
          if (item.right) {
            res = item.right;
            item.right = undefined;
          }
          break;
        default:
          if (item.center) {
            res = item.center;
            item.center = undefined;
          }
          break;
      }
    }
    return res;
  };
  DetailRowCompCache.prototype.destroy = function () {
    _super.prototype.destroy.call(this);
    this.purgeCache(0);
  };
  __decorate$1S([PostConstruct], DetailRowCompCache.prototype, "postConstruct", null);
  __decorate$1S([PreDestroy], DetailRowCompCache.prototype, "destroy", null);
  DetailRowCompCache = __decorate$1S([Bean('detailRowCompCache')], DetailRowCompCache);
  return DetailRowCompCache;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$23 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1T =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RowPositionUtils = /** @class */function (_super) {
  __extends$23(RowPositionUtils, _super);
  function RowPositionUtils() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  RowPositionUtils.prototype.getFirstRow = function () {
    var rowIndex = 0;
    var rowPinned;
    if (this.pinnedRowModel.getPinnedTopRowCount()) {
      rowPinned = Constants.PINNED_TOP;
    } else if (this.rowModel.getRowCount()) {
      rowPinned = null;
      rowIndex = this.paginationProxy.getPageFirstRow();
    } else if (this.pinnedRowModel.getPinnedBottomRowCount()) {
      rowPinned = Constants.PINNED_BOTTOM;
    }
    return rowPinned === undefined ? null : {
      rowIndex: rowIndex,
      rowPinned: rowPinned
    };
  };
  RowPositionUtils.prototype.getLastRow = function () {
    var rowIndex;
    var rowPinned = null;
    var pinnedBottomCount = this.pinnedRowModel.getPinnedBottomRowCount();
    var pinnedTopCount = this.pinnedRowModel.getPinnedTopRowCount();
    if (pinnedBottomCount) {
      rowPinned = Constants.PINNED_BOTTOM;
      rowIndex = pinnedBottomCount - 1;
    } else if (this.rowModel.getRowCount()) {
      rowPinned = null;
      rowIndex = this.paginationProxy.getPageLastRow();
    } else if (pinnedTopCount) {
      rowPinned = Constants.PINNED_TOP;
      rowIndex = pinnedTopCount - 1;
    }
    return rowIndex === undefined ? null : {
      rowIndex: rowIndex,
      rowPinned: rowPinned
    };
  };
  RowPositionUtils.prototype.getRowNode = function (gridRow) {
    switch (gridRow.rowPinned) {
      case Constants.PINNED_TOP:
        return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];
      case Constants.PINNED_BOTTOM:
        return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];
      default:
        return this.rowModel.getRow(gridRow.rowIndex);
    }
  };
  RowPositionUtils.prototype.sameRow = function (rowA, rowB) {
    // if both missing
    if (!rowA && !rowB) {
      return true;
    }
    // if only one missing
    if (rowA && !rowB || !rowA && rowB) {
      return false;
    }
    // otherwise compare (use == to compare rowPinned because it can be null or undefined)
    return rowA.rowIndex === rowB.rowIndex && rowA.rowPinned == rowB.rowPinned;
  };
  // tests if this row selection is before the other row selection
  RowPositionUtils.prototype.before = function (rowA, rowB) {
    switch (rowA.rowPinned) {
      case Constants.PINNED_TOP:
        // we we are floating top, and other isn't, then we are always before
        if (rowB.rowPinned !== Constants.PINNED_TOP) {
          return true;
        }
        break;
      case Constants.PINNED_BOTTOM:
        // if we are floating bottom, and the other isn't, then we are never before
        if (rowB.rowPinned !== Constants.PINNED_BOTTOM) {
          return false;
        }
        break;
      default:
        // if we are not floating, but the other one is floating...
        if (exists(rowB.rowPinned)) {
          return rowB.rowPinned !== Constants.PINNED_TOP;
        }
        break;
    }
    return rowA.rowIndex < rowB.rowIndex;
  };
  __decorate$1T([Autowired('rowModel')], RowPositionUtils.prototype, "rowModel", void 0);
  __decorate$1T([Autowired('pinnedRowModel')], RowPositionUtils.prototype, "pinnedRowModel", void 0);
  __decorate$1T([Autowired('paginationProxy')], RowPositionUtils.prototype, "paginationProxy", void 0);
  RowPositionUtils = __decorate$1T([Bean('rowPositionUtils')], RowPositionUtils);
  return RowPositionUtils;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$24 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1U =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CellPositionUtils = /** @class */function (_super) {
  __extends$24(CellPositionUtils, _super);
  function CellPositionUtils() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  CellPositionUtils.prototype.createId = function (cellPosition) {
    var rowIndex = cellPosition.rowIndex,
      rowPinned = cellPosition.rowPinned,
      column = cellPosition.column;
    return this.createIdFromValues(rowIndex, column, rowPinned);
  };
  CellPositionUtils.prototype.createIdFromValues = function (rowIndex, column, rowPinned) {
    return rowIndex + "." + (rowPinned == null ? 'null' : rowPinned) + "." + column.getId();
  };
  CellPositionUtils.prototype.equals = function (cellA, cellB) {
    var colsMatch = cellA.column === cellB.column;
    var floatingMatch = cellA.rowPinned === cellB.rowPinned;
    var indexMatch = cellA.rowIndex === cellB.rowIndex;
    return colsMatch && floatingMatch && indexMatch;
  };
  CellPositionUtils = __decorate$1U([Bean('cellPositionUtils')], CellPositionUtils);
  return CellPositionUtils;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$25 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1V =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PinnedRowModel = /** @class */function (_super) {
  __extends$25(PinnedRowModel, _super);
  function PinnedRowModel() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  PinnedRowModel.prototype.init = function () {
    this.setPinnedTopRowData(this.gridOptionsWrapper.getPinnedTopRowData());
    this.setPinnedBottomRowData(this.gridOptionsWrapper.getPinnedBottomRowData());
  };
  PinnedRowModel.prototype.isEmpty = function (floating) {
    var rows = floating === Constants.PINNED_TOP ? this.pinnedTopRows : this.pinnedBottomRows;
    return missingOrEmpty(rows);
  };
  PinnedRowModel.prototype.isRowsToRender = function (floating) {
    return !this.isEmpty(floating);
  };
  PinnedRowModel.prototype.getRowAtPixel = function (pixel, floating) {
    var rows = floating === Constants.PINNED_TOP ? this.pinnedTopRows : this.pinnedBottomRows;
    if (missingOrEmpty(rows)) {
      return 0; // this should never happen, just in case, 0 is graceful failure
    }

    for (var i = 0; i < rows.length; i++) {
      var rowNode = rows[i];
      var rowTopPixel = rowNode.rowTop + rowNode.rowHeight - 1;
      // only need to range check against the top pixel, as we are going through the list
      // in order, first row to hit the pixel wins
      if (rowTopPixel >= pixel) {
        return i;
      }
    }
    return rows.length - 1;
  };
  PinnedRowModel.prototype.setPinnedTopRowData = function (rowData) {
    this.pinnedTopRows = this.createNodesFromData(rowData, true);
    var event = {
      type: Events.EVENT_PINNED_ROW_DATA_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(event);
  };
  PinnedRowModel.prototype.setPinnedBottomRowData = function (rowData) {
    this.pinnedBottomRows = this.createNodesFromData(rowData, false);
    var event = {
      type: Events.EVENT_PINNED_ROW_DATA_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(event);
  };
  PinnedRowModel.prototype.createNodesFromData = function (allData, isTop) {
    var _this = this;
    var rowNodes = [];
    if (allData) {
      var nextRowTop_1 = 0;
      allData.forEach(function (dataItem, index) {
        var rowNode = new RowNode();
        _this.context.createBean(rowNode);
        rowNode.data = dataItem;
        var idPrefix = isTop ? RowNode.ID_PREFIX_TOP_PINNED : RowNode.ID_PREFIX_BOTTOM_PINNED;
        rowNode.id = idPrefix + index;
        rowNode.rowPinned = isTop ? Constants.PINNED_TOP : Constants.PINNED_BOTTOM;
        rowNode.setRowTop(nextRowTop_1);
        rowNode.setRowHeight(_this.gridOptionsWrapper.getRowHeightForNode(rowNode).height);
        rowNode.setRowIndex(index);
        nextRowTop_1 += rowNode.rowHeight;
        rowNodes.push(rowNode);
      });
    }
    return rowNodes;
  };
  PinnedRowModel.prototype.getPinnedTopRowData = function () {
    return this.pinnedTopRows;
  };
  PinnedRowModel.prototype.getPinnedBottomRowData = function () {
    return this.pinnedBottomRows;
  };
  PinnedRowModel.prototype.getPinnedTopTotalHeight = function () {
    return this.getTotalHeight(this.pinnedTopRows);
  };
  PinnedRowModel.prototype.getPinnedTopRowCount = function () {
    return this.pinnedTopRows ? this.pinnedTopRows.length : 0;
  };
  PinnedRowModel.prototype.getPinnedBottomRowCount = function () {
    return this.pinnedBottomRows ? this.pinnedBottomRows.length : 0;
  };
  PinnedRowModel.prototype.getPinnedTopRow = function (index) {
    return this.pinnedTopRows[index];
  };
  PinnedRowModel.prototype.getPinnedBottomRow = function (index) {
    return this.pinnedBottomRows[index];
  };
  PinnedRowModel.prototype.forEachPinnedTopRow = function (callback) {
    if (missingOrEmpty(this.pinnedTopRows)) {
      return;
    }
    this.pinnedTopRows.forEach(callback);
  };
  PinnedRowModel.prototype.forEachPinnedBottomRow = function (callback) {
    if (missingOrEmpty(this.pinnedBottomRows)) {
      return;
    }
    this.pinnedBottomRows.forEach(callback);
  };
  PinnedRowModel.prototype.getPinnedBottomTotalHeight = function () {
    return this.getTotalHeight(this.pinnedBottomRows);
  };
  PinnedRowModel.prototype.getTotalHeight = function (rowNodes) {
    if (!rowNodes || rowNodes.length === 0) {
      return 0;
    }
    var lastNode = last(rowNodes);
    return lastNode.rowTop + lastNode.rowHeight;
  };
  __decorate$1V([Autowired('columnApi')], PinnedRowModel.prototype, "columnApi", void 0);
  __decorate$1V([Autowired('gridApi')], PinnedRowModel.prototype, "gridApi", void 0);
  __decorate$1V([PostConstruct], PinnedRowModel.prototype, "init", null);
  PinnedRowModel = __decorate$1V([Bean('pinnedRowModel')], PinnedRowModel);
  return PinnedRowModel;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$26 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var UndoRedoAction = /** @class */function () {
  function UndoRedoAction(cellValueChanges) {
    this.cellValueChanges = cellValueChanges;
  }
  return UndoRedoAction;
}();
var FillUndoRedoAction = /** @class */function (_super) {
  __extends$26(FillUndoRedoAction, _super);
  function FillUndoRedoAction(cellValueChanges, initialRange, finalRange) {
    var _this = _super.call(this, cellValueChanges) || this;
    _this.initialRange = initialRange;
    _this.finalRange = finalRange;
    return _this;
  }
  return FillUndoRedoAction;
}(UndoRedoAction);
var UndoRedoStack = /** @class */function () {
  function UndoRedoStack(maxStackSize) {
    this.actionStack = [];
    this.maxStackSize = maxStackSize ? maxStackSize : UndoRedoStack.DEFAULT_STACK_SIZE;
    this.actionStack = new Array(this.maxStackSize);
  }
  UndoRedoStack.prototype.pop = function () {
    return this.actionStack.pop();
  };
  UndoRedoStack.prototype.push = function (item) {
    var shouldAddActions = item.cellValueChanges && item.cellValueChanges.length > 0;
    if (!shouldAddActions) {
      return;
    }
    if (this.actionStack.length === this.maxStackSize) {
      this.actionStack.shift();
    }
    this.actionStack.push(item);
  };
  UndoRedoStack.prototype.clear = function () {
    this.actionStack = [];
  };
  UndoRedoStack.prototype.getCurrentStackSize = function () {
    return this.actionStack.length;
  };
  UndoRedoStack.DEFAULT_STACK_SIZE = 10;
  return UndoRedoStack;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$27 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1W =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var UndoRedoService = /** @class */function (_super) {
  __extends$27(UndoRedoService, _super);
  function UndoRedoService() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.cellValueChanges = [];
    _this.isCellEditing = false;
    _this.isRowEditing = false;
    _this.isPasting = false;
    _this.isFilling = false;
    _this.onCellValueChanged = function (event) {
      var shouldCaptureAction = _this.isCellEditing || _this.isRowEditing || _this.isPasting || _this.isFilling;
      if (!shouldCaptureAction) {
        return;
      }
      var rowPinned = event.rowPinned,
        rowIndex = event.rowIndex,
        column = event.column,
        oldValue = event.oldValue,
        value = event.value;
      var cellValueChange = {
        rowPinned: rowPinned,
        rowIndex: rowIndex,
        columnId: column.getColId(),
        newValue: value,
        oldValue: oldValue
      };
      _this.cellValueChanges.push(cellValueChange);
    };
    _this.clearStacks = function () {
      _this.undoStack.clear();
      _this.redoStack.clear();
    };
    return _this;
  }
  UndoRedoService.prototype.init = function () {
    if (!this.gridOptionsWrapper.isUndoRedoCellEditing()) {
      return;
    }
    var undoRedoLimit = this.gridOptionsWrapper.getUndoRedoCellEditingLimit();
    if (undoRedoLimit <= 0) {
      return;
    }
    this.undoStack = new UndoRedoStack(undoRedoLimit);
    this.redoStack = new UndoRedoStack(undoRedoLimit);
    this.addRowEditingListeners();
    this.addCellEditingListeners();
    this.addPasteListeners();
    this.addFillListeners();
    this.addManagedListener(this.eventService, Events.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged);
    // undo / redo is restricted to actual editing so we clear the stacks when other operations are
    // performed that change the order of the row / cols.
    this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.clearStacks);
    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.clearStacks);
    this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.clearStacks);
    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, this.clearStacks);
    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.clearStacks);
    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.clearStacks);
    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.clearStacks);
    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.clearStacks);
    this.addManagedListener(this.eventService, Events.EVENT_ROW_DRAG_END, this.clearStacks);
  };
  UndoRedoService.prototype.getCurrentUndoStackSize = function () {
    return this.undoStack ? this.undoStack.getCurrentStackSize() : 0;
  };
  UndoRedoService.prototype.getCurrentRedoStackSize = function () {
    return this.redoStack ? this.redoStack.getCurrentStackSize() : 0;
  };
  UndoRedoService.prototype.undo = function () {
    if (!this.undoStack) {
      return;
    }
    var undoAction = this.undoStack.pop();
    if (!undoAction || !undoAction.cellValueChanges) {
      return;
    }
    this.processAction(undoAction, function (cellValueChange) {
      return cellValueChange.oldValue;
    });
    if (undoAction instanceof FillUndoRedoAction) {
      this.processRangeAndCellFocus(undoAction.cellValueChanges, undoAction.initialRange);
    } else {
      this.processRangeAndCellFocus(undoAction.cellValueChanges);
    }
    this.redoStack.push(undoAction);
  };
  UndoRedoService.prototype.redo = function () {
    if (!this.redoStack) {
      return;
    }
    var redoAction = this.redoStack.pop();
    if (!redoAction || !redoAction.cellValueChanges) {
      return;
    }
    this.processAction(redoAction, function (cellValueChange) {
      return cellValueChange.newValue;
    });
    if (redoAction instanceof FillUndoRedoAction) {
      this.processRangeAndCellFocus(redoAction.cellValueChanges, redoAction.finalRange);
    } else {
      this.processRangeAndCellFocus(redoAction.cellValueChanges);
    }
    this.undoStack.push(redoAction);
  };
  UndoRedoService.prototype.processAction = function (action, valueExtractor) {
    var _this = this;
    action.cellValueChanges.forEach(function (cellValueChange) {
      var rowIndex = cellValueChange.rowIndex,
        rowPinned = cellValueChange.rowPinned,
        columnId = cellValueChange.columnId;
      var rowPosition = {
        rowIndex: rowIndex,
        rowPinned: rowPinned
      };
      var currentRow = _this.getRowNode(rowPosition);
      // checks if the row has been filtered out
      if (!currentRow.displayed) {
        return;
      }
      currentRow.setDataValue(columnId, valueExtractor(cellValueChange));
    });
  };
  UndoRedoService.prototype.processRangeAndCellFocus = function (cellValueChanges, range) {
    var lastFocusedCell;
    if (range) {
      var startRow = range.startRow;
      var endRow = range.endRow;
      lastFocusedCell = {
        rowPinned: startRow.rowPinned,
        rowIndex: startRow.rowIndex,
        columnId: range.startColumn.getColId()
      };
      this.setLastFocusedCell(lastFocusedCell);
      var cellRangeParams = {
        rowStartIndex: startRow.rowIndex,
        rowStartPinned: startRow.rowPinned,
        rowEndIndex: endRow.rowIndex,
        rowEndPinned: endRow.rowPinned,
        columnStart: range.startColumn,
        columns: range.columns
      };
      this.gridApi.addCellRange(cellRangeParams);
      return;
    }
    var cellValueChange = cellValueChanges[0];
    var rowIndex = cellValueChange.rowIndex,
      rowPinned = cellValueChange.rowPinned;
    var rowPosition = {
      rowIndex: rowIndex,
      rowPinned: rowPinned
    };
    var row = this.getRowNode(rowPosition);
    lastFocusedCell = {
      rowPinned: cellValueChange.rowPinned,
      rowIndex: row.rowIndex,
      columnId: cellValueChange.columnId
    };
    this.setLastFocusedCell(lastFocusedCell);
  };
  UndoRedoService.prototype.setLastFocusedCell = function (lastFocusedCell) {
    var rowIndex = lastFocusedCell.rowIndex,
      columnId = lastFocusedCell.columnId,
      rowPinned = lastFocusedCell.rowPinned;
    this.gridApi.ensureIndexVisible(rowIndex);
    this.gridApi.ensureColumnVisible(columnId);
    if (ModuleRegistry.isRegistered(exports.ModuleNames.RangeSelectionModule)) {
      this.gridApi.clearRangeSelection();
    }
    this.focusController.setFocusedCell(rowIndex, columnId, rowPinned, true);
  };
  UndoRedoService.prototype.addRowEditingListeners = function () {
    var _this = this;
    this.addManagedListener(this.eventService, Events.EVENT_ROW_EDITING_STARTED, function () {
      _this.isRowEditing = true;
    });
    this.addManagedListener(this.eventService, Events.EVENT_ROW_EDITING_STOPPED, function () {
      var action = new UndoRedoAction(_this.cellValueChanges);
      _this.pushActionsToUndoStack(action);
      _this.isRowEditing = false;
    });
  };
  UndoRedoService.prototype.addCellEditingListeners = function () {
    var _this = this;
    this.addManagedListener(this.eventService, Events.EVENT_CELL_EDITING_STARTED, function () {
      _this.isCellEditing = true;
    });
    this.addManagedListener(this.eventService, Events.EVENT_CELL_EDITING_STOPPED, function () {
      _this.isCellEditing = false;
      var shouldPushAction = !_this.isRowEditing && !_this.isPasting && !_this.isFilling;
      if (shouldPushAction) {
        var action = new UndoRedoAction(_this.cellValueChanges);
        _this.pushActionsToUndoStack(action);
      }
    });
  };
  UndoRedoService.prototype.addPasteListeners = function () {
    var _this = this;
    this.addManagedListener(this.eventService, Events.EVENT_PASTE_START, function () {
      _this.isPasting = true;
    });
    this.addManagedListener(this.eventService, Events.EVENT_PASTE_END, function () {
      var action = new UndoRedoAction(_this.cellValueChanges);
      _this.pushActionsToUndoStack(action);
      _this.isPasting = false;
    });
  };
  UndoRedoService.prototype.addFillListeners = function () {
    var _this = this;
    this.addManagedListener(this.eventService, Events.EVENT_FILL_START, function () {
      _this.isFilling = true;
    });
    this.addManagedListener(this.eventService, Events.EVENT_FILL_END, function (event) {
      var action = new FillUndoRedoAction(_this.cellValueChanges, event.initialRange, event.finalRange);
      _this.pushActionsToUndoStack(action);
      _this.isFilling = false;
    });
  };
  UndoRedoService.prototype.pushActionsToUndoStack = function (action) {
    this.undoStack.push(action);
    this.cellValueChanges = [];
    this.redoStack.clear();
  };
  UndoRedoService.prototype.getRowNode = function (gridRow) {
    switch (gridRow.rowPinned) {
      case Constants.PINNED_TOP:
        return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];
      case Constants.PINNED_BOTTOM:
        return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];
      default:
        return this.rowModel.getRow(gridRow.rowIndex);
    }
  };
  __decorate$1W([Autowired('focusController')], UndoRedoService.prototype, "focusController", void 0);
  __decorate$1W([Autowired('gridApi')], UndoRedoService.prototype, "gridApi", void 0);
  __decorate$1W([Autowired('rowModel')], UndoRedoService.prototype, "rowModel", void 0);
  __decorate$1W([Autowired('pinnedRowModel')], UndoRedoService.prototype, "pinnedRowModel", void 0);
  __decorate$1W([PostConstruct], UndoRedoService.prototype, "init", null);
  UndoRedoService = __decorate$1W([Bean('undoRedoService')], UndoRedoService);
  return UndoRedoService;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$28 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1X =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AgStackComponentsRegistry = /** @class */function (_super) {
  __extends$28(AgStackComponentsRegistry, _super);
  function AgStackComponentsRegistry() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.componentsMappedByName = {};
    return _this;
  }
  AgStackComponentsRegistry.prototype.setupComponents = function (components) {
    var _this = this;
    if (components) {
      components.forEach(function (componentMeta) {
        return _this.addComponent(componentMeta);
      });
    }
  };
  AgStackComponentsRegistry.prototype.addComponent = function (componentMeta) {
    // get name of the class as a string
    // let className = getNameOfClass(ComponentClass);
    // insert a dash after every capital letter
    // let classEscaped = className.replace(/([A-Z])/g, "-$1").toLowerCase();
    var classEscaped = componentMeta.componentName.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
    // put all to upper case
    var classUpperCase = classEscaped.toUpperCase();
    // finally store
    this.componentsMappedByName[classUpperCase] = componentMeta.componentClass;
  };
  AgStackComponentsRegistry.prototype.getComponentClass = function (htmlTag) {
    return this.componentsMappedByName[htmlTag];
  };
  AgStackComponentsRegistry = __decorate$1X([Bean('agStackComponentsRegistry')], AgStackComponentsRegistry);
  return AgStackComponentsRegistry;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$29 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1Y =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HeaderPositionUtils = /** @class */function (_super) {
  __extends$29(HeaderPositionUtils, _super);
  function HeaderPositionUtils() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  HeaderPositionUtils.prototype.findHeader = function (focusedHeader, direction) {
    var nextColumn;
    var getGroupMethod;
    var getColMethod;
    if (focusedHeader.column instanceof ColumnGroup) {
      getGroupMethod = "getDisplayedGroup" + direction;
      nextColumn = this.columnController[getGroupMethod](focusedHeader.column);
    } else {
      getColMethod = "getDisplayedCol" + direction;
      nextColumn = this.columnController[getColMethod](focusedHeader.column);
    }
    if (nextColumn) {
      return {
        column: nextColumn,
        headerRowIndex: focusedHeader.headerRowIndex
      };
    }
  };
  HeaderPositionUtils.prototype.findColAtEdgeForHeaderRow = function (level, position) {
    var displayedColumns = this.columnController.getAllDisplayedColumns();
    var column = displayedColumns[position === 'start' ? 0 : displayedColumns.length - 1];
    if (!column) {
      return;
    }
    var childContainer = this.headerNavigationService.getHeaderContainer(column.getPinned());
    var headerRowComp = childContainer.getRowComps()[level];
    var type = headerRowComp && headerRowComp.getType();
    if (type == HeaderRowType.COLUMN_GROUP) {
      var columnGroup = this.columnController.getColumnGroupAtLevel(column, level);
      return {
        headerRowIndex: level,
        column: columnGroup
      };
    }
    return {
      headerRowIndex: !headerRowComp ? -1 : level,
      column: column
    };
  };
  __decorate$1Y([Autowired('columnController')], HeaderPositionUtils.prototype, "columnController", void 0);
  __decorate$1Y([Autowired('headerNavigationService')], HeaderPositionUtils.prototype, "headerNavigationService", void 0);
  HeaderPositionUtils = __decorate$1Y([Bean('headerPositionUtils')], HeaderPositionUtils);
  return HeaderPositionUtils;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __decorate$1Z =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ColumnDefFactory = /** @class */function () {
  function ColumnDefFactory() {}
  ColumnDefFactory.prototype.buildColumnDefs = function (cols, rowGroupColumns, pivotColumns) {
    var _this = this;
    var res = [];
    var colGroupDefs = {};
    cols.forEach(function (col) {
      var colDef = _this.createDefFromColumn(col, rowGroupColumns, pivotColumns);
      var addToResult = true;
      var childDef = colDef;
      var pointer = col.getOriginalParent();
      while (pointer) {
        var parentDef = null;
        // we don't include padding groups, as the column groups provided
        // by application didn't have these. the whole point of padding groups
        // is to balance the column tree that the user provided.
        if (pointer.isPadding()) {
          pointer = pointer.getOriginalParent();
          continue;
        }
        // if colDef for this group already exists, use it
        var existingParentDef = colGroupDefs[pointer.getGroupId()];
        if (existingParentDef) {
          existingParentDef.children.push(childDef);
          // if we added to result, it would be the second time we did it
          addToResult = false;
          // we don't want to continue up the tree, as it has already been
          // done for this group
          break;
        }
        parentDef = _this.createDefFromGroup(pointer);
        if (parentDef) {
          parentDef.children = [childDef];
          colGroupDefs[parentDef.groupId] = parentDef;
          childDef = parentDef;
          pointer = pointer.getOriginalParent();
        }
      }
      if (addToResult) {
        res.push(childDef);
      }
    });
    return res;
  };
  ColumnDefFactory.prototype.createDefFromGroup = function (group) {
    var defCloned = deepCloneDefinition(group.getColGroupDef(), ['children']);
    if (defCloned) {
      defCloned.groupId = group.getGroupId();
    }
    return defCloned;
  };
  ColumnDefFactory.prototype.createDefFromColumn = function (col, rowGroupColumns, pivotColumns) {
    var colDefCloned = deepCloneDefinition(col.getColDef());
    colDefCloned.colId = col.getColId();
    colDefCloned.width = col.getActualWidth();
    colDefCloned.rowGroup = col.isRowGroupActive();
    colDefCloned.rowGroupIndex = col.isRowGroupActive() ? rowGroupColumns.indexOf(col) : null;
    colDefCloned.pivot = col.isPivotActive();
    colDefCloned.pivotIndex = col.isPivotActive() ? pivotColumns.indexOf(col) : null;
    colDefCloned.aggFunc = col.isValueActive() ? col.getAggFunc() : null;
    colDefCloned.hide = col.isVisible() ? undefined : true;
    colDefCloned.pinned = col.isPinned() ? col.getPinned() : null;
    colDefCloned.sort = col.getSort() ? col.getSort() : null;
    colDefCloned.sortIndex = col.getSortIndex() != null ? col.getSortIndex() : null;
    return colDefCloned;
  };
  ColumnDefFactory = __decorate$1Z([Bean('columnDefFactory')], ColumnDefFactory);
  return ColumnDefFactory;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __decorate$1_ =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Common logic for RowComp and AutoHeightCalculator
 */
var RowCssClassCalculator = /** @class */function () {
  function RowCssClassCalculator() {}
  RowCssClassCalculator.prototype.getInitialRowClasses = function (params) {
    var classes = [];
    if (exists(params.extraCssClass)) {
      classes.push(params.extraCssClass);
    }
    classes.push('ag-row');
    classes.push(params.rowFocused ? 'ag-row-focus' : 'ag-row-no-focus');
    if (params.fadeRowIn) {
      classes.push('ag-opacity-zero');
    }
    classes.push(params.rowIsEven ? 'ag-row-even' : 'ag-row-odd');
    if (params.rowNode.isRowPinned()) {
      classes.push('ag-row-pinned');
    }
    if (params.rowNode.isSelected()) {
      classes.push('ag-row-selected');
    }
    if (params.rowNode.footer) {
      classes.push('ag-row-footer');
    }
    classes.push('ag-row-level-' + params.rowLevel);
    if (params.rowNode.stub) {
      classes.push('ag-row-loading');
    }
    if (params.fullWidthRow) {
      classes.push('ag-full-width-row');
    }
    if (params.expandable) {
      classes.push('ag-row-group');
      classes.push(params.rowNode.expanded ? 'ag-row-group-expanded' : 'ag-row-group-contracted');
    }
    if (params.rowNode.dragging) {
      classes.push('ag-row-dragging');
    }
    pushAll(classes, this.processClassesFromGridOptions(params.rowNode, params.scope));
    pushAll(classes, this.preProcessRowClassRules(params.rowNode, params.scope));
    // we use absolute position unless we are doing print layout
    classes.push(params.printLayout ? 'ag-row-position-relative' : 'ag-row-position-absolute');
    if (params.firstRowOnPage) {
      classes.push('ag-row-first');
    }
    if (params.lastRowOnPage) {
      classes.push('ag-row-last');
    }
    if (params.fullWidthRow) {
      if (params.pinned === Constants.PINNED_LEFT) {
        classes.push('ag-cell-last-left-pinned');
      }
      if (params.pinned === Constants.PINNED_RIGHT) {
        classes.push('ag-cell-first-right-pinned');
      }
    }
    return classes;
  };
  RowCssClassCalculator.prototype.processClassesFromGridOptions = function (rowNode, scope) {
    var res = [];
    var process = function (rowCls) {
      if (typeof rowCls === 'string') {
        res.push(rowCls);
      } else if (Array.isArray(rowCls)) {
        rowCls.forEach(function (e) {
          return res.push(e);
        });
      }
    };
    // part 1 - rowClass
    var rowClass = this.gridOptionsWrapper.getRowClass();
    if (rowClass) {
      if (typeof rowClass === 'function') {
        console.warn('AG Grid: rowClass should not be a function, please use getRowClass instead');
        return [];
      }
      process(rowClass);
    }
    // part 2 - rowClassFunc
    var rowClassFunc = this.gridOptionsWrapper.getRowClassFunc();
    if (rowClassFunc) {
      var params = {
        data: rowNode.data,
        node: rowNode,
        rowIndex: rowNode.rowIndex,
        $scope: scope,
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        context: this.gridOptionsWrapper.getContext()
      };
      var rowClassFuncResult = rowClassFunc(params);
      process(rowClassFuncResult);
    }
    return res;
  };
  RowCssClassCalculator.prototype.preProcessRowClassRules = function (rowNode, scope) {
    var res = [];
    this.processRowClassRules(rowNode, scope, function (className) {
      res.push(className);
    }, function (className) {
      // not catered for, if creating, no need
      // to remove class as it was never there
    });
    return res;
  };
  RowCssClassCalculator.prototype.processRowClassRules = function (rowNode, scope, onApplicableClass, onNotApplicableClass) {
    var rowClassParams = {
      data: rowNode.data,
      node: rowNode,
      rowIndex: rowNode.rowIndex,
      api: this.gridOptionsWrapper.getApi(),
      columnApi: this.gridOptionsWrapper.getColumnApi(),
      $scope: scope,
      context: this.gridOptionsWrapper.getContext()
    };
    this.stylingService.processClassRules(this.gridOptionsWrapper.rowClassRules(), rowClassParams, onApplicableClass, onNotApplicableClass);
  };
  RowCssClassCalculator.prototype.calculateRowLevel = function (rowNode) {
    if (rowNode.group) {
      return rowNode.level;
    }
    // if a leaf, and a parent exists, put a level of the parent, else put level of 0 for top level item
    return rowNode.parent ? rowNode.parent.level + 1 : 0;
  };
  __decorate$1_([Autowired('stylingService')], RowCssClassCalculator.prototype, "stylingService", void 0);
  __decorate$1_([Autowired('gridOptionsWrapper')], RowCssClassCalculator.prototype, "gridOptionsWrapper", void 0);
  RowCssClassCalculator = __decorate$1_([Bean('rowCssClassCalculator')], RowCssClassCalculator);
  return RowCssClassCalculator;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$2a =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var RowNodeBlock = /** @class */function (_super) {
  __extends$2a(RowNodeBlock, _super);
  function RowNodeBlock(id) {
    var _this = _super.call(this) || this;
    _this.state = RowNodeBlock.STATE_WAITING_TO_LOAD;
    _this.version = 0;
    _this.id = id;
    return _this;
  }
  RowNodeBlock.prototype.getId = function () {
    return this.id;
  };
  RowNodeBlock.prototype.load = function () {
    this.state = RowNodeBlock.STATE_LOADING;
    this.loadFromDatasource();
  };
  RowNodeBlock.prototype.getVersion = function () {
    return this.version;
  };
  RowNodeBlock.prototype.setStateWaitingToLoad = function () {
    // in case any current loads in progress, this will have their results ignored
    this.version++;
    this.state = RowNodeBlock.STATE_WAITING_TO_LOAD;
  };
  RowNodeBlock.prototype.getState = function () {
    return this.state;
  };
  RowNodeBlock.prototype.pageLoadFailed = function (version) {
    var requestMostRecentAndLive = this.isRequestMostRecentAndLive(version);
    if (requestMostRecentAndLive) {
      this.state = RowNodeBlock.STATE_FAILED;
      this.processServerFail();
    }
    this.dispatchLoadCompleted(false);
  };
  RowNodeBlock.prototype.success = function (version, params) {
    this.successCommon(version, params);
  };
  RowNodeBlock.prototype.pageLoaded = function (version, rows, lastRow) {
    this.successCommon(version, {
      rowData: rows,
      rowCount: lastRow
    });
  };
  RowNodeBlock.prototype.isRequestMostRecentAndLive = function (version) {
    // thisIsMostRecentRequest - if block was refreshed, then another request
    // could of been sent after this one.
    var thisIsMostRecentRequest = version === this.version;
    // weAreNotDestroyed - if InfiniteStore is purged, then blocks are destroyed
    // and new blocks created. so data loads of old blocks are discarded.
    var weAreNotDestroyed = this.isAlive();
    return thisIsMostRecentRequest && weAreNotDestroyed;
  };
  RowNodeBlock.prototype.successCommon = function (version, params) {
    // need to dispatch load complete before processing the data, as PaginationComp checks
    // RowNodeBlockLoader to see if it is still loading, so the RowNodeBlockLoader needs to
    // be updated first (via LoadComplete event) before PaginationComp updates (via processServerResult method)
    this.dispatchLoadCompleted();
    var requestMostRecentAndLive = this.isRequestMostRecentAndLive(version);
    if (requestMostRecentAndLive) {
      this.state = RowNodeBlock.STATE_LOADED;
      this.processServerResult(params);
    }
  };
  RowNodeBlock.prototype.dispatchLoadCompleted = function (success) {
    if (success === void 0) {
      success = true;
    }
    // we fire event regardless of processing data or now, as we want
    // the concurrentLoadRequests count to be reduced in BlockLoader
    var event = {
      type: RowNodeBlock.EVENT_LOAD_COMPLETE,
      success: success,
      block: this
    };
    this.dispatchEvent(event);
  };
  RowNodeBlock.EVENT_LOAD_COMPLETE = 'loadComplete';
  RowNodeBlock.STATE_WAITING_TO_LOAD = 'needsLoading';
  RowNodeBlock.STATE_LOADING = 'loading';
  RowNodeBlock.STATE_LOADED = 'loaded';
  RowNodeBlock.STATE_FAILED = 'failed';
  return RowNodeBlock;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$2b =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1$ =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param$a =  false || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};
var RowNodeBlockLoader = /** @class */function (_super) {
  __extends$2b(RowNodeBlockLoader, _super);
  function RowNodeBlockLoader() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.activeBlockLoadsCount = 0;
    _this.blocks = [];
    _this.active = true;
    return _this;
  }
  RowNodeBlockLoader_1 = RowNodeBlockLoader;
  RowNodeBlockLoader.prototype.postConstruct = function () {
    this.maxConcurrentRequests = this.gridOptionsWrapper.getMaxConcurrentDatasourceRequests();
    var blockLoadDebounceMillis = this.gridOptionsWrapper.getBlockLoadDebounceMillis();
    if (blockLoadDebounceMillis && blockLoadDebounceMillis > 0) {
      this.checkBlockToLoadDebounce = _.debounce(this.performCheckBlocksToLoad.bind(this), blockLoadDebounceMillis);
    }
  };
  RowNodeBlockLoader.prototype.setBeans = function (loggerFactory) {
    this.logger = loggerFactory.create('RowNodeBlockLoader');
  };
  RowNodeBlockLoader.prototype.addBlock = function (block) {
    this.blocks.push(block);
    // note that we do not remove this listener when removing the block. this is because the
    // cache can get destroyed (and containing blocks) when a block is loading. however the loading block
    // is still counted as an active loading block and we must decrement activeBlockLoadsCount when it finishes.
    block.addEventListener(RowNodeBlock.EVENT_LOAD_COMPLETE, this.loadComplete.bind(this));
    this.checkBlockToLoad();
  };
  RowNodeBlockLoader.prototype.removeBlock = function (block) {
    _.removeFromArray(this.blocks, block);
  };
  RowNodeBlockLoader.prototype.destroy = function () {
    _super.prototype.destroy.call(this);
    this.active = false;
  };
  RowNodeBlockLoader.prototype.loadComplete = function () {
    this.activeBlockLoadsCount--;
    this.checkBlockToLoad();
    if (this.activeBlockLoadsCount == 0) {
      this.dispatchEvent({
        type: RowNodeBlockLoader_1.BLOCK_LOADER_FINISHED_EVENT
      });
    }
  };
  RowNodeBlockLoader.prototype.checkBlockToLoad = function () {
    if (this.checkBlockToLoadDebounce) {
      this.checkBlockToLoadDebounce();
    } else {
      this.performCheckBlocksToLoad();
    }
  };
  RowNodeBlockLoader.prototype.performCheckBlocksToLoad = function () {
    if (!this.active) {
      return;
    }
    this.printCacheStatus();
    if (this.maxConcurrentRequests != null && this.activeBlockLoadsCount >= this.maxConcurrentRequests) {
      this.logger.log("checkBlockToLoad: max loads exceeded");
      return;
    }
    var blockToLoad = null;
    this.blocks.forEach(function (block) {
      if (block.getState() === RowNodeBlock.STATE_WAITING_TO_LOAD) {
        blockToLoad = block;
      }
    });
    if (blockToLoad) {
      blockToLoad.load();
      this.activeBlockLoadsCount++;
      this.printCacheStatus();
    }
  };
  RowNodeBlockLoader.prototype.getBlockState = function () {
    var result = {};
    this.blocks.forEach(function (block) {
      var _a = block.getBlockStateJson(),
        id = _a.id,
        state = _a.state;
      result[id] = state;
    });
    return result;
  };
  RowNodeBlockLoader.prototype.printCacheStatus = function () {
    if (this.logger.isLogging()) {
      this.logger.log("printCacheStatus: activePageLoadsCount = " + this.activeBlockLoadsCount + "," + (" blocks = " + JSON.stringify(this.getBlockState())));
    }
  };
  RowNodeBlockLoader.prototype.isLoading = function () {
    return this.activeBlockLoadsCount > 0;
  };
  var RowNodeBlockLoader_1;
  RowNodeBlockLoader.BLOCK_LOADER_FINISHED_EVENT = 'blockLoaderFinished';
  __decorate$1$([PostConstruct], RowNodeBlockLoader.prototype, "postConstruct", null);
  __decorate$1$([__param$a(0, Qualifier('loggerFactory'))], RowNodeBlockLoader.prototype, "setBeans", null);
  RowNodeBlockLoader = RowNodeBlockLoader_1 = __decorate$1$([Bean('rowNodeBlockLoader')], RowNodeBlockLoader);
  return RowNodeBlockLoader;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __decorate$20 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
// this logic is used by both SSRM and CSRM
var RowNodeSorter = /** @class */function () {
  function RowNodeSorter() {}
  RowNodeSorter.prototype.doFullSort = function (rowNodes, sortOptions) {
    var mapper = function (rowNode, pos) {
      return {
        currentPos: pos,
        rowNode: rowNode
      };
    };
    var sortedRowNodes = rowNodes.map(mapper);
    sortedRowNodes.sort(this.compareRowNodes.bind(this, sortOptions));
    return sortedRowNodes.map(function (item) {
      return item.rowNode;
    });
  };
  RowNodeSorter.prototype.compareRowNodes = function (sortOptions, sortedNodeA, sortedNodeB) {
    var nodeA = sortedNodeA.rowNode;
    var nodeB = sortedNodeB.rowNode;
    // Iterate columns, return the first that doesn't match
    for (var i = 0, len = sortOptions.length; i < len; i++) {
      var sortOption = sortOptions[i];
      // let compared = compare(nodeA, nodeB, sortOption.column, sortOption.inverter === -1);
      var isInverted = sortOption.sort === Constants.SORT_DESC;
      var valueA = this.getValue(nodeA, sortOption.column);
      var valueB = this.getValue(nodeB, sortOption.column);
      var comparatorResult = void 0;
      var providedComparator = sortOption.column.getColDef().comparator;
      if (providedComparator) {
        //if comparator provided, use it
        comparatorResult = providedComparator(valueA, valueB, nodeA, nodeB, isInverted);
      } else {
        //otherwise do our own comparison
        comparatorResult = _.defaultComparator(valueA, valueB, this.gridOptionsWrapper.isAccentedSort());
      }
      if (comparatorResult !== 0) {
        return sortOption.sort === Constants.SORT_ASC ? comparatorResult : comparatorResult * -1;
      }
    }
    // All matched, we make is so that the original sort order is kept:
    return sortedNodeA.currentPos - sortedNodeB.currentPos;
  };
  RowNodeSorter.prototype.getValue = function (nodeA, column) {
    return this.valueService.getValue(column, nodeA);
  };
  __decorate$20([Autowired('gridOptionsWrapper')], RowNodeSorter.prototype, "gridOptionsWrapper", void 0);
  __decorate$20([Autowired('valueService')], RowNodeSorter.prototype, "valueService", void 0);
  RowNodeSorter = __decorate$20([Bean('rowNodeSorter')], RowNodeSorter);
  return RowNodeSorter;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$2c =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$21 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ControllersService = /** @class */function (_super) {
  __extends$2c(ControllersService, _super);
  function ControllersService() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.ready = false;
    _this.readyCallbacks = [];
    return _this;
  }
  ControllersService.prototype.checkReady = function () {
    this.ready = this.gridCompCon != null && this.gridBodyCon != null && this.centerRowContainerCon != null && this.leftRowContainerCon != null && this.rightRowContainerCon != null && this.bottomCenterRowContainerCon != null && this.bottomLeftRowContainerCon != null && this.bottomRightRowContainerCon != null && this.topCenterRowContainerCon != null && this.topLeftRowContainerCon != null && this.topRightRowContainerCon != null && this.fakeHScrollCon != null && this.headerRootComp != null;
    if (this.ready) {
      var p_1 = this.createReadyParams();
      this.readyCallbacks.forEach(function (c) {
        return c(p_1);
      });
      this.readyCallbacks.length = 0;
    }
  };
  ControllersService.prototype.whenReady = function (callback) {
    if (this.ready) {
      callback(this.createReadyParams());
    } else {
      this.readyCallbacks.push(callback);
    }
  };
  ControllersService.prototype.createReadyParams = function () {
    return {
      centerRowContainerCon: this.centerRowContainerCon,
      leftRowContainerCon: this.leftRowContainerCon,
      rightRowContainerCon: this.rightRowContainerCon,
      bottomCenterRowContainerCon: this.bottomCenterRowContainerCon,
      bottomLeftRowContainerCon: this.bottomLeftRowContainerCon,
      bottomRightRowContainerCon: this.bottomRightRowContainerCon,
      topCenterRowContainerCon: this.topCenterRowContainerCon,
      topLeftRowContainerCon: this.topLeftRowContainerCon,
      topRightRowContainerCon: this.topRightRowContainerCon,
      fakeHScrollCon: this.fakeHScrollCon,
      gridBodyCon: this.gridBodyCon,
      gridCompCon: this.gridCompCon,
      headerRootComp: this.headerRootComp
    };
  };
  ControllersService.prototype.registerFakeHScrollCon = function (con) {
    this.fakeHScrollCon = con;
    this.checkReady();
  };
  ControllersService.prototype.registerHeaderRootComp = function (headerRootComp) {
    this.headerRootComp = headerRootComp;
    this.checkReady();
  };
  ControllersService.prototype.registerCenterRowContainerCon = function (con) {
    this.centerRowContainerCon = con;
    this.checkReady();
  };
  ControllersService.prototype.registerLeftRowContainerCon = function (con) {
    this.leftRowContainerCon = con;
    this.checkReady();
  };
  ControllersService.prototype.registerRightRowContainerCon = function (con) {
    this.rightRowContainerCon = con;
    this.checkReady();
  };
  ControllersService.prototype.registerTopCenterRowContainerCon = function (con) {
    this.topCenterRowContainerCon = con;
    this.checkReady();
  };
  ControllersService.prototype.registerTopLeftRowContainerCon = function (con) {
    this.topLeftRowContainerCon = con;
    this.checkReady();
  };
  ControllersService.prototype.registerTopRightRowContainerCon = function (con) {
    this.topRightRowContainerCon = con;
    this.checkReady();
  };
  ControllersService.prototype.registerBottomCenterRowContainerCon = function (con) {
    this.bottomCenterRowContainerCon = con;
    this.checkReady();
  };
  ControllersService.prototype.registerBottomLeftRowContainerCon = function (con) {
    this.bottomLeftRowContainerCon = con;
    this.checkReady();
  };
  ControllersService.prototype.registerBottomRightRowContainerCon = function (con) {
    this.bottomRightRowContainerCon = con;
    this.checkReady();
  };
  ControllersService.prototype.registerGridBodyController = function (con) {
    this.gridBodyCon = con;
    this.checkReady();
  };
  ControllersService.prototype.registerGridCompController = function (con) {
    this.gridCompCon = con;
    this.checkReady();
  };
  ControllersService.prototype.getFakeHScrollCon = function () {
    return this.fakeHScrollCon;
  };
  ControllersService.prototype.getHeaderRootComp = function () {
    return this.headerRootComp;
  };
  ControllersService.prototype.getGridCompController = function () {
    return this.gridCompCon;
  };
  ControllersService.prototype.getCenterRowContainerCon = function () {
    return this.centerRowContainerCon;
  };
  ControllersService.prototype.getTopCenterRowContainerCon = function () {
    return this.topCenterRowContainerCon;
  };
  ControllersService.prototype.getBottomCenterRowContainerCon = function () {
    return this.bottomCenterRowContainerCon;
  };
  ControllersService.prototype.getGridBodyController = function () {
    return this.gridBodyCon;
  };
  ControllersService = __decorate$21([Bean('controllersService')], ControllersService);
  return ControllersService;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$2d =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$22 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FakeHorizontalScrollController = /** @class */function (_super) {
  __extends$2d(FakeHorizontalScrollController, _super);
  function FakeHorizontalScrollController() {
    return _super.call(this) || this;
  }
  FakeHorizontalScrollController.prototype.setView = function (view, eViewport, eContainer) {
    this.view = view;
    this.eViewport = eViewport;
    this.eContainer = eContainer;
    this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
    this.onScrollVisibilityChanged();
    // When doing printing, this changes whether cols are pinned or not
    var spacerWidthsListener = this.setFakeHScrollSpacerWidths.bind(this);
    this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, spacerWidthsListener);
    this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, spacerWidthsListener);
    this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, spacerWidthsListener);
    this.setFakeHScrollSpacerWidths();
    this.controllersService.registerFakeHScrollCon(this);
  };
  FakeHorizontalScrollController.prototype.postConstruct = function () {
    this.enableRtl = this.gridOptionsWrapper.isEnableRtl();
  };
  FakeHorizontalScrollController.prototype.onScrollVisibilityChanged = function () {
    this.setScrollVisible();
    this.setFakeHScrollSpacerWidths();
  };
  FakeHorizontalScrollController.prototype.setFakeHScrollSpacerWidths = function () {
    var vScrollShowing = this.scrollVisibleService.isVerticalScrollShowing();
    // we pad the right based on a) if cols are pinned to the right and
    // b) if v scroll is showing on the right (normal position of scroll)
    var rightSpacing = this.columnController.getDisplayedColumnsRightWidth();
    var scrollOnRight = !this.enableRtl && vScrollShowing;
    var scrollbarWidth = this.gridOptionsWrapper.getScrollbarWidth();
    if (scrollOnRight) {
      rightSpacing += scrollbarWidth;
    }
    this.view.setRightSpacerFixedWidth(rightSpacing);
    this.view.includeRightSpacerScrollerCss('ag-scroller-corner', rightSpacing <= scrollbarWidth);
    // we pad the left based on a) if cols are pinned to the left and
    // b) if v scroll is showing on the left (happens in LTR layout only)
    var leftSpacing = this.columnController.getDisplayedColumnsLeftWidth();
    var scrollOnLeft = this.enableRtl && vScrollShowing;
    if (scrollOnLeft) {
      leftSpacing += scrollbarWidth;
    }
    this.view.setLeftSpacerFixedWidth(leftSpacing);
    this.view.includeLeftSpacerScrollerCss('ag-scroller-corner', leftSpacing <= scrollbarWidth);
  };
  FakeHorizontalScrollController.prototype.setScrollVisible = function () {
    var hScrollShowing = this.scrollVisibleService.isHorizontalScrollShowing();
    var scrollbarInvisible = isInvisibleScrollbar();
    var isSuppressHorizontalScroll = this.gridOptionsWrapper.isSuppressHorizontalScroll();
    var scrollbarWidth = hScrollShowing ? this.gridOptionsWrapper.getScrollbarWidth() || 0 : 0;
    var adjustedScrollbarWidth = scrollbarWidth === 0 && scrollbarInvisible ? 15 : scrollbarWidth;
    var scrollContainerSize = !isSuppressHorizontalScroll ? adjustedScrollbarWidth : 0;
    var addIEPadding = isBrowserIE() && hScrollShowing;
    this.view.setInvisibleStyles(scrollbarInvisible);
    this.view.setHeight(scrollContainerSize);
    // we have to add an extra pixel to the scroller viewport on IE because
    // if the container has the same size as the scrollbar, the scroll button won't work
    this.view.setViewportHeight(scrollContainerSize + (addIEPadding ? 1 : 0));
    this.view.setContainerHeight(scrollContainerSize);
  };
  FakeHorizontalScrollController.prototype.getViewport = function () {
    return this.eViewport;
  };
  FakeHorizontalScrollController.prototype.getContainer = function () {
    return this.eContainer;
  };
  __decorate$22([Autowired('scrollVisibleService')], FakeHorizontalScrollController.prototype, "scrollVisibleService", void 0);
  __decorate$22([Autowired('columnController')], FakeHorizontalScrollController.prototype, "columnController", void 0);
  __decorate$22([Autowired('controllersService')], FakeHorizontalScrollController.prototype, "controllersService", void 0);
  __decorate$22([PostConstruct], FakeHorizontalScrollController.prototype, "postConstruct", null);
  return FakeHorizontalScrollController;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$2e =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$23 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FakeHorizontalScrollComp = /** @class */function (_super) {
  __extends$2e(FakeHorizontalScrollComp, _super);
  function FakeHorizontalScrollComp() {
    return _super.call(this, FakeHorizontalScrollComp.TEMPLATE) || this;
  }
  FakeHorizontalScrollComp.prototype.postConstruct = function () {
    var _this = this;
    var view = {
      setHeight: function (height) {
        return setFixedHeight(_this.getGui(), height);
      },
      setContainerHeight: function (height) {
        return setFixedHeight(_this.eContainer, height);
      },
      setViewportHeight: function (height) {
        return setFixedHeight(_this.eViewport, height);
      },
      setRightSpacerFixedWidth: function (width) {
        return setFixedWidth(_this.eRightSpacer, width);
      },
      setLeftSpacerFixedWidth: function (width) {
        return setFixedWidth(_this.eLeftSpacer, width);
      },
      setInvisibleStyles: function (isInvisible) {
        return addOrRemoveCssClass(_this.getGui(), 'ag-invisible-scrollbar', isInvisible);
      },
      includeLeftSpacerScrollerCss: function (cssClass, include) {
        return addOrRemoveCssClass(_this.eLeftSpacer, cssClass, include);
      },
      includeRightSpacerScrollerCss: function (cssClass, include) {
        return addOrRemoveCssClass(_this.eRightSpacer, cssClass, include);
      }
    };
    this.controller = this.createManagedBean(new FakeHorizontalScrollController());
    this.controller.setView(view, this.eViewport, this.eContainer);
    this.createManagedBean(new CenterWidthFeature(function (width) {
      return _this.eContainer.style.width = width + "px";
    }));
  };
  FakeHorizontalScrollComp.TEMPLATE = "<div class=\"ag-body-horizontal-scroll\" aria-hidden=\"true\">\n            <div class=\"ag-horizontal-left-spacer\" ref=\"eLeftSpacer\"></div>\n            <div class=\"ag-body-horizontal-scroll-viewport\" ref=\"eViewport\">\n                <div class=\"ag-body-horizontal-scroll-container\" ref=\"eContainer\"></div>\n            </div>\n            <div class=\"ag-horizontal-right-spacer\" ref=\"eRightSpacer\"></div>\n        </div>";
  __decorate$23([RefSelector('eLeftSpacer')], FakeHorizontalScrollComp.prototype, "eLeftSpacer", void 0);
  __decorate$23([RefSelector('eRightSpacer')], FakeHorizontalScrollComp.prototype, "eRightSpacer", void 0);
  __decorate$23([RefSelector('eViewport')], FakeHorizontalScrollComp.prototype, "eViewport", void 0);
  __decorate$23([RefSelector('eContainer')], FakeHorizontalScrollComp.prototype, "eContainer", void 0);
  __decorate$23([PostConstruct], FakeHorizontalScrollComp.prototype, "postConstruct", null);
  return FakeHorizontalScrollComp;
}(Component);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$2f =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$24 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PinnedWidthService = /** @class */function (_super) {
  __extends$2f(PinnedWidthService, _super);
  function PinnedWidthService() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  PinnedWidthService.prototype.postConstruct = function () {
    var listener = this.checkContainerWidths.bind(this);
    this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);
    this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, listener);
    this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, listener);
  };
  PinnedWidthService.prototype.checkContainerWidths = function () {
    var printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
    var newLeftWidth = printLayout ? 0 : this.columnController.getDisplayedColumnsLeftWidth();
    var newRightWidth = printLayout ? 0 : this.columnController.getDisplayedColumnsRightWidth();
    if (newLeftWidth != this.leftWidth) {
      this.leftWidth = newLeftWidth;
      this.eventService.dispatchEvent({
        type: Events.EVENT_LEFT_PINNED_WIDTH_CHANGED
      });
    }
    if (newRightWidth != this.rightWidth) {
      this.rightWidth = newRightWidth;
      this.eventService.dispatchEvent({
        type: Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED
      });
    }
  };
  PinnedWidthService.prototype.getPinnedRightWidth = function () {
    return this.rightWidth;
  };
  PinnedWidthService.prototype.getPinnedLeftWidth = function () {
    return this.leftWidth;
  };
  __decorate$24([Autowired('columnController')], PinnedWidthService.prototype, "columnController", void 0);
  __decorate$24([PostConstruct], PinnedWidthService.prototype, "postConstruct", null);
  PinnedWidthService = __decorate$24([Bean('pinnedWidthService')], PinnedWidthService);
  return PinnedWidthService;
}(BeanStub);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$2g =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var RowComp = /** @class */function (_super) {
  __extends$2g(RowComp, _super);
  function RowComp(controller, container, beans, pinned) {
    var _this = _super.call(this) || this;
    _this.cellComps = {};
    _this.container = container;
    _this.beans = beans;
    _this.rowNode = controller.getRowNode();
    _this.pinned = pinned;
    _this.controller = controller;
    var template = _this.createTemplate();
    _this.setTemplate(template);
    _this.afterRowAttached();
    switch (pinned) {
      case Constants.PINNED_LEFT:
        controller.setLeftRowComp(_this);
        break;
      case Constants.PINNED_RIGHT:
        controller.setRightRowComp(_this);
        break;
      default:
        if (controller.isFullWidth() && !beans.gridOptionsWrapper.isEmbedFullWidthRows()) {
          controller.setFullWidthRowComp(_this);
        } else {
          controller.setCenterRowComp(_this);
        }
        break;
    }
    if (controller.isFullWidth()) {
      _this.createFullWidthRowCell();
    } else {
      _this.onColumnChanged();
      _this.controller.refreshAriaLabel(_this.getGui(), !!_this.rowNode.isSelected());
    }
    return _this;
  }
  RowComp.prototype.createFullWidthRowCell = function () {
    var _this = this;
    var params = this.controller.createFullWidthParams(this.getGui(), this.pinned);
    var callback = function (cellRenderer) {
      if (_this.isAlive()) {
        var eGui = cellRenderer.getGui();
        _this.getGui().appendChild(eGui);
        if (_this.controller.getRowType() === RowType.FullWidthDetail) {
          _this.controller.setupDetailRowAutoHeight(eGui);
        }
        _this.setFullWidthRowComp(cellRenderer);
      } else {
        _this.beans.context.destroyBean(cellRenderer);
      }
    };
    // if doing master detail, it's possible we have a cached row comp from last time detail was displayed
    var cachedDetailComp = this.beans.detailRowCompCache.get(this.rowNode, this.pinned);
    if (cachedDetailComp) {
      callback(cachedDetailComp);
    } else {
      var cellRendererType = FullWidthKeys.get(this.controller.getRowType());
      var cellRendererName = FullWidthRenderers.get(this.controller.getRowType());
      var res = this.beans.userComponentFactory.newFullWidthCellRenderer(params, cellRendererType, cellRendererName);
      if (res) {
        res.then(callback);
      } else {
        var masterDetailModuleLoaded = ModuleRegistry.isRegistered(exports.ModuleNames.MasterDetailModule);
        if (cellRendererName === 'agDetailCellRenderer' && !masterDetailModuleLoaded) {
          console.warn("AG Grid: cell renderer agDetailCellRenderer (for master detail) not found. Did you forget to include the master detail module?");
        } else {
          console.error("AG Grid: fullWidthCellRenderer " + cellRendererName + " not found");
        }
      }
    }
    // fixme - what to do here?
    // this.angular1Compile(eRow);
  };

  RowComp.prototype.onColumnChanged = function () {
    var _this = this;
    var cols = this.controller.getColsForRowComp(this.pinned);
    var cellsToRemove = assign({}, this.cellComps);
    cols.forEach(function (col) {
      var colId = col.getId();
      var existingCellComp = _this.cellComps[colId];
      // it's possible there is a Cell Comp with correct Id, but it's referring to
      // a different column instance. Happens a lot with pivot, as pivot col id's are
      // reused eg  pivot_0, pivot_1 etc
      if (existingCellComp && existingCellComp.getColumn() !== col) {
        _this.destroyCells([existingCellComp]);
        existingCellComp = null;
      }
      if (existingCellComp == null) {
        _this.newCellComp(col);
      } else {
        cellsToRemove[colId] = null;
      }
    });
    var cellCompsToRemove = getAllValuesInObject(cellsToRemove).filter(function (cellComp) {
      return cellComp ? _this.isCellEligibleToBeRemoved(cellComp) : false;
    });
    this.destroyCells(cellCompsToRemove);
    this.ensureDomOrder(cols);
  };
  RowComp.prototype.ensureDomOrder = function (cols) {
    var _this = this;
    if (!this.beans.gridOptionsWrapper.isEnsureDomOrder()) {
      return;
    }
    var elementsInOrder = [];
    cols.forEach(function (col) {
      var cellComp = _this.cellComps[col.getColId()];
      if (cellComp) {
        elementsInOrder.push(cellComp.getGui());
      }
    });
    setDomChildOrder(this.getGui(), elementsInOrder);
  };
  RowComp.prototype.isCellEligibleToBeRemoved = function (cellComp) {
    var REMOVE_CELL = true;
    var KEEP_CELL = false;
    // always remove the cell if it's not rendered or if it's in the wrong pinned location
    var column = cellComp.getColumn();
    if (column.getPinned() != this.pinned) {
      return REMOVE_CELL;
    }
    // we want to try and keep editing and focused cells
    var editing = cellComp.isEditing();
    var focused = this.beans.focusController.isCellFocused(cellComp.getCellPosition());
    var mightWantToKeepCell = editing || focused;
    if (mightWantToKeepCell) {
      var column_1 = cellComp.getColumn();
      var displayedColumns = this.beans.columnController.getAllDisplayedColumns();
      var cellStillDisplayed = displayedColumns.indexOf(column_1) >= 0;
      return cellStillDisplayed ? KEEP_CELL : REMOVE_CELL;
    }
    return REMOVE_CELL;
  };
  RowComp.prototype.newCellComp = function (col) {
    var cellComp = new CellComp(this.controller.getScope(), this.beans, col, this.rowNode, this.controller, false, this.controller.isPrintLayout(), this.getGui(), this.controller.isEditing());
    this.cellComps[col.getId()] = cellComp;
    this.getGui().appendChild(cellComp.getGui());
  };
  RowComp.prototype.getCellComp = function (id) {
    return this.cellComps[id];
  };
  RowComp.prototype.getCellCompSpanned = function (column) {
    var _this = this;
    var spanList = Object.keys(this.cellComps).map(function (name) {
      return _this.cellComps[name];
    }).filter(function (cmp) {
      return cmp && cmp.getColSpanningList().indexOf(column) !== -1;
    });
    return spanList.length ? spanList[0] : null;
  };
  RowComp.prototype.destroy = function () {
    _super.prototype.destroy.call(this);
    this.destroyAllCells();
  };
  RowComp.prototype.destroyAllCells = function () {
    var cellsToDestroy = getAllValuesInObject(this.cellComps).filter(function (cp) {
      return cp != null;
    });
    this.destroyCells(cellsToDestroy);
  };
  RowComp.prototype.getContainer = function () {
    return this.container;
  };
  RowComp.prototype.setFullWidthRowComp = function (fullWidthRowComponent) {
    var _this = this;
    if (this.fullWidthRowComponent) {
      console.error('AG Grid - should not be setting fullWidthRowComponent twice');
    }
    this.fullWidthRowComponent = fullWidthRowComponent;
    this.addDestroyFunc(function () {
      _this.beans.detailRowCompCache.addOrDestroy(_this.rowNode, _this.pinned, fullWidthRowComponent);
      _this.fullWidthRowComponent = null;
    });
  };
  RowComp.prototype.getFullWidthRowComp = function () {
    return this.fullWidthRowComponent;
  };
  RowComp.prototype.createTemplate = function () {
    var con = this.controller;
    var templateParts = [];
    var rowHeight = this.rowNode.rowHeight;
    var rowClasses = con.getInitialRowClasses(this.pinned).join(' ');
    var rowIdSanitised = escapeString(this.rowNode.id);
    var userRowStyles = con.preProcessStylesFromGridOptions();
    var businessKey = con.getRowBusinessKey();
    var businessKeySanitised = escapeString(businessKey);
    var rowTopStyle = con.getInitialRowTopStyle();
    var rowIdx = this.rowNode.getRowIndexString();
    var headerRowCount = this.beans.headerNavigationService.getHeaderRowCount();
    templateParts.push("<div");
    templateParts.push(" role=\"row\"");
    templateParts.push(" row-index=\"" + rowIdx + "\" aria-rowindex=\"" + (headerRowCount + this.rowNode.rowIndex + 1) + "\"");
    templateParts.push(rowIdSanitised ? " row-id=\"" + rowIdSanitised + "\"" : "");
    templateParts.push(businessKey ? " row-business-key=\"" + businessKeySanitised + "\"" : "");
    templateParts.push(" comp-id=\"" + this.getCompId() + "\"");
    templateParts.push(" class=\"" + rowClasses + "\"");
    if (con.isFullWidth()) {
      templateParts.push(" tabindex=\"-1\"");
    }
    if (this.beans.gridOptionsWrapper.isRowSelection()) {
      templateParts.push(" aria-selected=\"" + (this.rowNode.isSelected() ? 'true' : 'false') + "\"");
    }
    if (this.rowNode.group) {
      templateParts.push(" aria-expanded=" + (this.rowNode.expanded ? 'true' : 'false'));
    }
    templateParts.push(" style=\"height: " + rowHeight + "px; " + rowTopStyle + " " + userRowStyles + "\">");
    // add in the template for the cells
    templateParts.push("</div>");
    return templateParts.join('');
  };
  RowComp.prototype.afterRowAttached = function () {
    this.addDomData();
    var eRow = this.getGui();
    // adding hover functionality adds listener to this row, so we
    // do it lazily in an animation frame
    if (this.controller.isUseAnimationFrameForCreate()) {
      this.beans.taskQueue.createTask(this.controller.addHoverFunctionality.bind(this.controller, eRow), this.rowNode.rowIndex, 'createTasksP2');
    } else {
      this.controller.addHoverFunctionality(eRow);
    }
    this.controller.executeProcessRowPostCreateFunc();
  };
  RowComp.prototype.addDomData = function () {
    var _this = this;
    var gow = this.beans.gridOptionsWrapper;
    gow.setDomData(this.getGui(), RowController.DOM_DATA_KEY_RENDERED_ROW, this.controller);
    this.addDestroyFunc(function () {
      return gow.setDomData(_this.getGui(), RowController.DOM_DATA_KEY_RENDERED_ROW, null);
    });
  };
  RowComp.prototype.destroyCells = function (cellComps) {
    var _this = this;
    cellComps.forEach(function (cellComp) {
      // could be old reference, ie removed cell
      if (!cellComp) {
        return;
      }
      // check cellComp belongs in this container
      var id = cellComp.getColumn().getId();
      if (_this.cellComps[id] !== cellComp) {
        return;
      }
      cellComp.detach();
      cellComp.destroy();
      _this.cellComps[id] = null;
    });
  };
  RowComp.prototype.forEachCellComp = function (callback) {
    iterateObject(this.cellComps, function (key, cellComp) {
      if (!cellComp) {
        return;
      }
      callback(cellComp);
    });
  };
  return RowComp;
}(Component);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$2h =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$8 =  false || function () {
  __assign$8 = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$8.apply(this, arguments);
};
var __decorate$25 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
function templateFactory() {
  var name = elementGettingCreated.getAttribute('name');
  var containerClass = ContainerCssClasses.get(name);
  var viewportClass = ViewportCssClasses.get(name);
  var wrapperClass = WrapperCssClasses.get(name);
  var res;
  switch (name) {
    case RowContainerNames.LEFT:
    case RowContainerNames.RIGHT:
    case RowContainerNames.FULL_WIDTH:
    case RowContainerNames.TOP_LEFT:
    case RowContainerNames.TOP_RIGHT:
    case RowContainerNames.TOP_FULL_WITH:
    case RowContainerNames.BOTTOM_LEFT:
    case RowContainerNames.BOTTOM_RIGHT:
    case RowContainerNames.BOTTOM_FULL_WITH:
      res = /* html */
      "<div class=\"" + containerClass + "\" ref=\"eContainer\" role=\"presentation\" unselectable=\"on\"></div>";
      break;
    case RowContainerNames.CENTER:
      res = /* html */
      "<div class=\"" + wrapperClass + "\" ref=\"eWrapper\" role=\"presentation\" unselectable=\"on\">\n                <div class=\"" + viewportClass + "\" ref=\"eViewport\" role=\"presentation\">\n                    <div class=\"" + containerClass + "\" ref=\"eContainer\" role=\"rowgroup\" unselectable=\"on\"></div>\n                </div>\n            </div>";
      break;
    case RowContainerNames.TOP_CENTER:
    case RowContainerNames.BOTTOM_CENTER:
      res = /* html */
      "<div class=\"" + viewportClass + "\" ref=\"eViewport\" role=\"presentation\" unselectable=\"on\">\n                <div class=\"" + containerClass + "\" ref=\"eContainer\" role=\"presentation\" unselectable=\"on\"></div>\n            </div>";
      break;
    default:
      return '';
  }
  return res;
}
var RowContainerComp = /** @class */function (_super) {
  __extends$2h(RowContainerComp, _super);
  function RowContainerComp() {
    var _this = _super.call(this, templateFactory()) || this;
    _this.renderedRows = {};
    _this.name = elementGettingCreated.getAttribute('name');
    return _this;
  }
  RowContainerComp.prototype.postConstruct = function () {
    var _this = this;
    this.embedFullWidthRows = this.gridOptionsWrapper.isEmbedFullWidthRows();
    var view = {
      setViewportHeight: function (height) {
        return _this.eViewport.style.height = height;
      }
    };
    var con = this.createManagedBean(new RowContainerController(this.name));
    con.setView(view, this.eContainer, this.eViewport, this.eWrapper);
    this.listenOnDomOrder();
    this.stopHScrollOnPinnedRows();
    this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_ROWS_CHANGED, this.onDisplayedRowsChanged.bind(this));
  };
  RowContainerComp.prototype.forContainers = function (names, callback) {
    if (names.indexOf(this.name) >= 0) {
      callback();
    }
  };
  // when editing a pinned row, if the cell is half outside the scrollable area, the browser can
  // scroll the column into view. we do not want this, the pinned sections should never scroll.
  // so we listen to scrolls on these containers and reset the scroll if we find one.
  RowContainerComp.prototype.stopHScrollOnPinnedRows = function () {
    var _this = this;
    this.forContainers([RowContainerNames.TOP_CENTER, RowContainerNames.BOTTOM_CENTER], function () {
      var resetScrollLeft = function () {
        return _this.eViewport.scrollLeft = 0;
      };
      _this.addManagedListener(_this.eViewport, 'scroll', resetScrollLeft);
    });
  };
  RowContainerComp.prototype.listenOnDomOrder = function () {
    var _this = this;
    var listener = function () {
      return _this.domOrder = _this.gridOptionsWrapper.isEnsureDomOrder();
    };
    this.gridOptionsWrapper.addEventListener(GridOptionsWrapper.PROP_DOM_LAYOUT, listener);
    listener();
  };
  // this is repeated inside the controller, need to remove where this one is called from
  RowContainerComp.prototype.getViewportElement = function () {
    return this.eViewport;
  };
  RowContainerComp.prototype.clearLastPlacedElement = function () {
    this.lastPlacedElement = null;
  };
  RowContainerComp.prototype.appendRow = function (element) {
    if (this.domOrder) {
      insertWithDomOrder(this.eContainer, element, this.lastPlacedElement);
    } else {
      this.eContainer.appendChild(element);
    }
    this.lastPlacedElement = element;
  };
  RowContainerComp.prototype.ensureDomOrder = function (eRow) {
    if (this.domOrder) {
      ensureDomOrder(this.eContainer, eRow, this.lastPlacedElement);
      this.lastPlacedElement = eRow;
    }
  };
  RowContainerComp.prototype.removeRow = function (eRow) {
    this.eContainer.removeChild(eRow);
  };
  RowContainerComp.prototype.onDisplayedRowsChanged = function () {
    var _this = this;
    var fullWithContainer = this.name === RowContainerNames.TOP_FULL_WITH || this.name === RowContainerNames.BOTTOM_FULL_WITH || this.name === RowContainerNames.FULL_WIDTH;
    var oldRows = __assign$8({}, this.renderedRows);
    this.renderedRows = {};
    this.clearLastPlacedElement();
    var processRow = function (rowCon) {
      var instanceId = rowCon.getInstanceId();
      var existingRowComp = oldRows[instanceId];
      if (existingRowComp) {
        _this.renderedRows[instanceId] = existingRowComp;
        delete oldRows[instanceId];
        _this.ensureDomOrder(existingRowComp.getGui());
      } else {
        var rowComp = _this.newRowComp(rowCon);
        _this.renderedRows[instanceId] = rowComp;
        _this.appendRow(rowComp.getGui());
      }
    };
    var doesRowMatch = function (rowCon) {
      var fullWidthController = rowCon.isFullWidth();
      var printLayout = _this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
      var embedFW = _this.embedFullWidthRows || printLayout;
      var match = fullWithContainer ? !embedFW && fullWidthController : embedFW || !fullWidthController;
      return match;
    };
    var rowConsToRender = this.getRowCons();
    rowConsToRender.filter(doesRowMatch).forEach(processRow);
    getAllValuesInObject(oldRows).forEach(function (rowComp) {
      return _this.removeRow(rowComp.getGui());
    });
  };
  RowContainerComp.prototype.getRowCons = function () {
    switch (this.name) {
      case RowContainerNames.TOP_CENTER:
      case RowContainerNames.TOP_LEFT:
      case RowContainerNames.TOP_RIGHT:
      case RowContainerNames.TOP_FULL_WITH:
        return this.rowRenderer.getTopRowCons();
      case RowContainerNames.BOTTOM_CENTER:
      case RowContainerNames.BOTTOM_LEFT:
      case RowContainerNames.BOTTOM_RIGHT:
      case RowContainerNames.BOTTOM_FULL_WITH:
        return this.rowRenderer.getBottomRowCons();
      default:
        return this.rowRenderer.getRowCons();
    }
  };
  RowContainerComp.prototype.newRowComp = function (rowCon) {
    var pinned;
    switch (this.name) {
      case RowContainerNames.BOTTOM_LEFT:
      case RowContainerNames.TOP_LEFT:
      case RowContainerNames.LEFT:
        pinned = Constants.PINNED_LEFT;
        break;
      case RowContainerNames.BOTTOM_RIGHT:
      case RowContainerNames.TOP_RIGHT:
      case RowContainerNames.RIGHT:
        pinned = Constants.PINNED_RIGHT;
        break;
      default:
        pinned = null;
        break;
    }
    var res = new RowComp(rowCon, this, this.beans, pinned);
    return res;
  };
  __decorate$25([Autowired('rowRenderer')], RowContainerComp.prototype, "rowRenderer", void 0);
  __decorate$25([Autowired("beans")], RowContainerComp.prototype, "beans", void 0);
  __decorate$25([RefSelector('eViewport')], RowContainerComp.prototype, "eViewport", void 0);
  __decorate$25([RefSelector('eContainer')], RowContainerComp.prototype, "eContainer", void 0);
  __decorate$25([RefSelector('eWrapper')], RowContainerComp.prototype, "eWrapper", void 0);
  __decorate$25([PostConstruct], RowContainerComp.prototype, "postConstruct", null);
  return RowContainerComp;
}(Component);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
// creates JavaScript vanilla Grid, including JavaScript (ag-stack) components, which can
// be wrapped by the framework wrappers
var Grid = /** @class */function () {
  function Grid(eGridDiv, gridOptions, params) {
    if (!gridOptions) {
      console.error('AG Grid: no gridOptions provided to the grid');
      return;
    }
    this.gridOptions = gridOptions;
    new GridCoreCreator().create(eGridDiv, gridOptions, function (context) {
      var gridComp = new GridComp(eGridDiv);
      context.createBean(gridComp);
    }, params);
  }
  Grid.prototype.destroy = function () {
    if (this.gridOptions && this.gridOptions.api) {
      this.gridOptions.api.destroy();
    }
  };
  return Grid;
}();
// created services of grid only, no UI, so frameworks can use this if providing
// their own UI
var GridCoreCreator = /** @class */function () {
  function GridCoreCreator() {}
  GridCoreCreator.prototype.create = function (eGridDiv, gridOptions, uiCallback, params) {
    var debug = !!gridOptions.debug;
    var registeredModules = this.getRegisteredModules(params);
    var beanClasses = this.createBeansList(gridOptions.rowModelType, registeredModules);
    var providedBeanInstances = this.createProvidedBeans(eGridDiv, gridOptions, params);
    if (!beanClasses) {
      return;
    } // happens when no row model found
    var contextParams = {
      providedBeanInstances: providedBeanInstances,
      beanClasses: beanClasses,
      debug: debug
    };
    var logger = new Logger('AG Grid', function () {
      return gridOptions.debug;
    });
    var contextLogger = new Logger('Context', function () {
      return contextParams.debug;
    });
    var context = new Context(contextParams, contextLogger);
    this.registerModuleUserComponents(context, registeredModules);
    this.registerStackComponents(context, registeredModules);
    uiCallback(context);
    this.setColumnsAndData(context);
    this.dispatchGridReadyEvent(context, gridOptions);
    var isEnterprise = ModuleRegistry.isRegistered(exports.ModuleNames.EnterpriseCoreModule);
    logger.log("initialised successfully, enterprise = " + isEnterprise);
  };
  GridCoreCreator.prototype.registerStackComponents = function (context, registeredModules) {
    var agStackComponents = this.createAgStackComponentsList(registeredModules);
    var agStackComponentsRegistry = context.getBean('agStackComponentsRegistry');
    agStackComponentsRegistry.setupComponents(agStackComponents);
  };
  GridCoreCreator.prototype.getRegisteredModules = function (params) {
    var passedViaConstructor = params ? params.modules : null;
    var registered = ModuleRegistry.getRegisteredModules();
    var allModules = [];
    var mapNames = {};
    // adds to list and removes duplicates
    function addModule(moduleBased, mod) {
      function addIndividualModule(currentModule) {
        if (!mapNames[currentModule.moduleName]) {
          mapNames[currentModule.moduleName] = true;
          allModules.push(currentModule);
          ModuleRegistry.register(currentModule, moduleBased);
        }
      }
      addIndividualModule(mod);
      if (mod.dependantModules) {
        mod.dependantModules.forEach(addModule.bind(null, moduleBased));
      }
    }
    if (passedViaConstructor) {
      passedViaConstructor.forEach(addModule.bind(null, true));
    }
    if (registered) {
      registered.forEach(addModule.bind(null, !ModuleRegistry.isPackageBased()));
    }
    return allModules;
  };
  GridCoreCreator.prototype.registerModuleUserComponents = function (context, registeredModules) {
    var userComponentRegistry = context.getBean('userComponentRegistry');
    var moduleUserComps = this.extractModuleEntity(registeredModules, function (module) {
      return module.userComponents ? module.userComponents : [];
    });
    moduleUserComps.forEach(function (compMeta) {
      userComponentRegistry.registerDefaultComponent(compMeta.componentName, compMeta.componentClass);
    });
  };
  GridCoreCreator.prototype.createProvidedBeans = function (eGridDiv, gridOptions, params) {
    var frameworkOverrides = params ? params.frameworkOverrides : null;
    if (missing(frameworkOverrides)) {
      frameworkOverrides = new VanillaFrameworkOverrides();
    }
    var seed = {
      gridOptions: gridOptions,
      eGridDiv: eGridDiv,
      $scope: params ? params.$scope : null,
      $compile: params ? params.$compile : null,
      globalEventListener: params ? params.globalEventListener : null,
      frameworkOverrides: frameworkOverrides
    };
    if (params && params.providedBeanInstances) {
      assign(seed, params.providedBeanInstances);
    }
    return seed;
  };
  GridCoreCreator.prototype.createAgStackComponentsList = function (registeredModules) {
    var components = [{
      componentName: 'AgCheckbox',
      componentClass: AgCheckbox
    }, {
      componentName: 'AgRadioButton',
      componentClass: AgRadioButton
    }, {
      componentName: 'AgToggleButton',
      componentClass: AgToggleButton
    }, {
      componentName: 'AgInputTextField',
      componentClass: AgInputTextField
    }, {
      componentName: 'AgInputTextArea',
      componentClass: AgInputTextArea
    }, {
      componentName: 'AgInputNumberField',
      componentClass: AgInputNumberField
    }, {
      componentName: 'AgInputRange',
      componentClass: AgInputRange
    }, {
      componentName: 'AgSelect',
      componentClass: AgSelect
    }, {
      componentName: 'AgSlider',
      componentClass: AgSlider
    }, {
      componentName: 'AgAngleSelect',
      componentClass: AgAngleSelect
    }, {
      componentName: 'AgColorPicker',
      componentClass: AgColorPicker
    }, {
      componentName: 'AgGridBody',
      componentClass: GridBodyComp
    }, {
      componentName: 'AgHeaderRoot',
      componentClass: HeaderRootComp
    }, {
      componentName: 'AgPagination',
      componentClass: PaginationComp
    }, {
      componentName: 'AgOverlayWrapper',
      componentClass: OverlayWrapperComponent
    }, {
      componentName: 'AgGroupComponent',
      componentClass: AgGroupComponent
    }, {
      componentName: 'AgPanel',
      componentClass: AgPanel
    }, {
      componentName: 'AgDialog',
      componentClass: AgDialog
    }, {
      componentName: 'AgRowContainer',
      componentClass: RowContainerComp
    }, {
      componentName: 'AgFakeHorizontalScroll',
      componentClass: FakeHorizontalScrollComp
    }];
    var moduleAgStackComps = this.extractModuleEntity(registeredModules, function (module) {
      return module.agStackComponents ? module.agStackComponents : [];
    });
    components = components.concat(moduleAgStackComps);
    return components;
  };
  GridCoreCreator.prototype.createBeansList = function (rowModelType, registeredModules) {
    var rowModelClass = this.getRowModelClass(rowModelType, registeredModules);
    if (!rowModelClass) {
      return;
    }
    // beans should only contain SERVICES, it should NEVER contain COMPONENTS
    var beans = [rowModelClass, Beans, RowPositionUtils, CellPositionUtils, HeaderPositionUtils, PaginationAutoPageSizeService, GridApi, UserComponentRegistry, AgComponentUtils, ComponentMetadataProvider, ResizeObserverService, UserComponentFactory, RowContainerHeightService, AutoHeightCalculator, HorizontalResizeService, PinnedRowModel, DragService, DisplayedGroupCreator, EventService, GridOptionsWrapper, PopupService, SelectionController, FilterManager, ColumnController, HeaderNavigationService, PaginationProxy, RowRenderer, ExpressionService, ColumnFactory, TemplateService, AlignedGridsService, NavigationService, ValueCache, ValueService, LoggerFactory, ColumnUtils, AutoWidthCalculator, StandardMenuFactory, DragAndDropService, ColumnApi, FocusController, MouseEventService, Environment, CellNavigationService, ValueFormatterService, StylingService, ScrollVisibleService, SortController, ColumnHoverService, ColumnAnimationService, SelectableService, AutoGroupColService, ChangeDetectionService, AnimationFrameService, DetailRowCompCache, UndoRedoService, AgStackComponentsRegistry, ColumnDefFactory, RowCssClassCalculator, RowNodeBlockLoader, RowNodeSorter, ControllersService, PinnedWidthService];
    var moduleBeans = this.extractModuleEntity(registeredModules, function (module) {
      return module.beans ? module.beans : [];
    });
    beans.push.apply(beans, moduleBeans);
    // check for duplicates, as different modules could include the same beans that
    // they depend on, eg ClientSideRowModel in enterprise, and ClientSideRowModel in community
    var beansNoDuplicates = [];
    beans.forEach(function (bean) {
      if (beansNoDuplicates.indexOf(bean) < 0) {
        beansNoDuplicates.push(bean);
      }
    });
    return beansNoDuplicates;
  };
  GridCoreCreator.prototype.extractModuleEntity = function (moduleEntities, extractor) {
    return [].concat.apply([], moduleEntities.map(extractor));
  };
  GridCoreCreator.prototype.setColumnsAndData = function (context) {
    var gridOptionsWrapper = context.getBean('gridOptionsWrapper');
    var columnController = context.getBean('columnController');
    var columnDefs = gridOptionsWrapper.getColumnDefs();
    columnController.setColumnDefs(columnDefs || [], "gridInitializing");
    var rowModel = context.getBean('rowModel');
    rowModel.start();
  };
  GridCoreCreator.prototype.dispatchGridReadyEvent = function (context, gridOptions) {
    var eventService = context.getBean('eventService');
    var readyEvent = {
      type: Events.EVENT_GRID_READY,
      api: gridOptions.api,
      columnApi: gridOptions.columnApi
    };
    eventService.dispatchEvent(readyEvent);
  };
  GridCoreCreator.prototype.getRowModelClass = function (rowModelType, registeredModules) {
    // default to client side
    if (!rowModelType) {
      rowModelType = Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
    }
    var rowModelClasses = {};
    registeredModules.forEach(function (module) {
      iterateObject(module.rowModels, function (key, value) {
        rowModelClasses[key] = value;
      });
    });
    var rowModelClass = rowModelClasses[rowModelType];
    if (exists(rowModelClass)) {
      return rowModelClass;
    }
    if (rowModelType === Constants.ROW_MODEL_TYPE_INFINITE) {
      console.error("AG Grid: Row Model \"Infinite\" not found. Please ensure the " + exports.ModuleNames.InfiniteRowModelModule + " is registered.';");
    }
    console.error('AG Grid: could not find matching row model for rowModelType ' + rowModelType);
    if (rowModelType === Constants.ROW_MODEL_TYPE_VIEWPORT) {
      console.error("AG Grid: Row Model \"Viewport\" not found. Please ensure the AG Grid Enterprise Module " + exports.ModuleNames.ViewportRowModelModule + " is registered.';");
    }
    if (rowModelType === Constants.ROW_MODEL_TYPE_SERVER_SIDE) {
      console.error("AG Grid: Row Model \"Server Side\" not found. Please ensure the AG Grid Enterprise Module " + exports.ModuleNames.ServerSideRowModelModule + " is registered.';");
    }
    if (rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
      console.error("AG Grid: Row Model \"Client Side\" not found. Please ensure the " + exports.ModuleNames.ClientSideRowModelModule + " is registered.';");
    }
  };
  return GridCoreCreator;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
function initialiseAgGridWithAngular1(angular) {
  var angularModule = angular.module("agGrid", []);
  angularModule.directive("agGrid", function () {
    return {
      restrict: "A",
      controller: ['$element', '$scope', '$compile', '$attrs', AngularDirectiveController],
      scope: true
    };
  });
}
function AngularDirectiveController($element, $scope, $compile, $attrs) {
  var gridOptions;
  var keyOfGridInScope = $attrs.agGrid;
  gridOptions = $scope.$eval(keyOfGridInScope);
  if (!gridOptions) {
    console.warn("WARNING - grid options for AG Grid not found. Please ensure the attribute ag-grid points to a valid object on the scope");
    return;
  }
  var eGridDiv = $element[0];
  var gridParams = {
    $scope: $scope,
    $compile: $compile
  };
  var grid = new Grid(eGridDiv, gridOptions, gridParams);
  var quickFilterOnScope = keyOfGridInScope + '.quickFilterText';
  var quickFilterUnregisterFn = $scope.$watch(quickFilterOnScope, function (newFilter) {
    gridOptions.api.setQuickFilter(newFilter);
  });
  $scope.$on("$destroy", function () {
    quickFilterUnregisterFn();
    if (grid) {
      grid.destroy();
    }
    grid = null;
  });
}

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var registered = false;
function initialiseAgGridWithWebComponents() {
  console.warn('ag-grid: initialiseAgGridWithWebComponents is deprecated. Please use the ag-grid-webcomponent dependency instead. ');
  // only register to WebComponents once
  if (registered) {
    return;
  }
  registered = true;
  if (typeof document === 'undefined' || !document.registerElement) {
    console.error('AG Grid: unable to find document.registerElement() function, unable to initialise AG Grid as a Web Component');
  }
  // i don't think this type of extension is possible in TypeScript, so back to
  // plain Javascript to create this object
  var AgileGridProto = Object.create(HTMLElement.prototype);
  // wrap each property with a get and set method, so we can track when changes are done
  ComponentUtil.ALL_PROPERTIES.forEach(function (key) {
    Object.defineProperty(AgileGridProto, key, {
      set: function (v) {
        this.__agGridSetProperty(key, v);
      },
      get: function () {
        return this.__agGridGetProperty(key);
      },
      enumerable: true,
      configurable: true
    });
  });
  var agGridProtoNoType = AgileGridProto;
  agGridProtoNoType.__agGridSetProperty = function (key, value) {
    if (!this.__attributes) {
      this.__attributes = {};
    }
    this.__attributes[key] = value;
    // keeping this consistent with the ng2 onChange, so I can reuse the handling code
    var changeObject = {};
    changeObject[key] = {
      currentValue: value
    };
    this.onChange(changeObject);
  };
  agGridProtoNoType.onChange = function (changes) {
    if (this._initialised) {
      ComponentUtil.processOnChange(changes, this._gridOptions, this.api, this.columnApi);
    }
  };
  agGridProtoNoType.__agGridGetProperty = function (key) {
    if (!this.__attributes) {
      this.__attributes = {};
    }
    return this.__attributes[key];
  };
  agGridProtoNoType.setGridOptions = function (options) {
    var globalEventListener = this.globalEventListener.bind(this);
    this._gridOptions = ComponentUtil.copyAttributesToGridOptions(options, this);
    var gridParams = {
      globalEventListener: globalEventListener
    };
    this._agGrid = new Grid(this, this._gridOptions, gridParams);
    this.api = options.api;
    this.columnApi = options.columnApi;
    this._initialised = true;
  };
  // copies all the attributes into this object
  agGridProtoNoType.createdCallback = function () {
    for (var i = 0; i < this.attributes.length; i++) {
      var attribute = this.attributes[i];
      this.setPropertyFromAttribute(attribute);
    }
  };
  agGridProtoNoType.setPropertyFromAttribute = function (attribute) {
    var name = toCamelCase(attribute.nodeName);
    var value = attribute.nodeValue;
    if (ComponentUtil.ALL_PROPERTIES.indexOf(name) >= 0) {
      this[name] = value;
    }
  };
  agGridProtoNoType.attachedCallback = function (params) {};
  agGridProtoNoType.detachedCallback = function (params) {};
  agGridProtoNoType.attributeChangedCallback = function (attributeName) {
    var attribute = this.attributes[attributeName];
    this.setPropertyFromAttribute(attribute);
  };
  agGridProtoNoType.globalEventListener = function (eventType, event) {
    var eventLowerCase = eventType.toLowerCase();
    var browserEvent = new Event(eventLowerCase);
    var browserEventNoType = browserEvent;
    browserEventNoType.agGridDetails = event;
    this.dispatchEvent(browserEvent);
    var callbackMethod = 'on' + eventLowerCase;
    if (typeof this[callbackMethod] === 'function') {
      this[callbackMethod](browserEvent);
    }
  };
  // finally, register
  document.registerElement('ag-grid', {
    prototype: AgileGridProto
  });
}
function toCamelCase(myString) {
  if (typeof myString === 'string') {
    var result = myString.replace(/-([a-z])/g, function (g) {
      return g[1].toUpperCase();
    });
    return result;
  } else {
    return myString;
  }
}

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$2i =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$26 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TabbedLayout = /** @class */function (_super) {
  __extends$2i(TabbedLayout, _super);
  function TabbedLayout(params) {
    var _this = _super.call(this, TabbedLayout.getTemplate(params.cssClass)) || this;
    _this.items = [];
    _this.params = params;
    if (params.items) {
      params.items.forEach(function (item) {
        return _this.addItem(item);
      });
    }
    return _this;
  }
  TabbedLayout.getTemplate = function (cssClass) {
    return (/* html */"<div class=\"ag-tabs " + cssClass + "\">\n            <div ref=\"eHeader\" role=\"menu\" class=\"ag-tabs-header " + (cssClass ? cssClass + "-header" : '') + "\"></div>\n            <div ref=\"eBody\" role=\"presentation\" class=\"ag-tabs-body " + (cssClass ? cssClass + "-body" : '') + "\"></div>\n        </div>"
    );
  };
  TabbedLayout.prototype.handleKeyDown = function (e) {
    switch (e.keyCode) {
      case KeyCode.RIGHT:
      case KeyCode.LEFT:
        if (!this.eHeader.contains(document.activeElement)) {
          return;
        }
        var currentPosition = this.items.indexOf(this.activeItem);
        var nextPosition = e.keyCode === KeyCode.RIGHT ? Math.min(currentPosition + 1, this.items.length - 1) : Math.max(currentPosition - 1, 0);
        if (currentPosition === nextPosition) {
          return;
        }
        e.preventDefault();
        var nextItem = this.items[nextPosition];
        this.showItemWrapper(nextItem);
        nextItem.eHeaderButton.focus();
        break;
      case KeyCode.UP:
      case KeyCode.DOWN:
        e.stopPropagation();
        break;
    }
  };
  TabbedLayout.prototype.onTabKeyDown = function (e) {
    if (e.defaultPrevented) {
      return;
    }
    var _a = this,
      focusController = _a.focusController,
      eHeader = _a.eHeader,
      eBody = _a.eBody,
      activeItem = _a.activeItem;
    var activeElement = document.activeElement;
    e.preventDefault();
    if (eHeader.contains(activeElement)) {
      // focus is in header, move into body of popup
      focusController.focusInto(eBody, e.shiftKey);
    } else {
      // focus is in body, establish if it should return to header
      if (focusController.isFocusUnderManagedComponent(eBody)) {
        // focus was in a managed focus component and has now left, so we can return to the header
        activeItem.eHeaderButton.focus();
      } else {
        var nextEl = focusController.findNextFocusableElement(eBody, false, e.shiftKey);
        if (nextEl) {
          // if another element exists in the body that can be focussed, go to that
          nextEl.focus();
        } else {
          // otherwise return to the header
          activeItem.eHeaderButton.focus();
        }
      }
    }
  };
  TabbedLayout.prototype.setAfterAttachedParams = function (params) {
    this.afterAttachedParams = params;
  };
  TabbedLayout.prototype.getMinDimensions = function () {
    var eDummyContainer = this.getGui().cloneNode(true);
    var eDummyBody = eDummyContainer.querySelector('[ref="eBody"]');
    // position fixed, so it isn't restricted to the boundaries of the parent
    eDummyContainer.style.position = 'fixed';
    // we put the dummy into the body container, so it will inherit all the
    // css styles that the real cells are inheriting
    this.getGui().appendChild(eDummyContainer);
    var minWidth = 0;
    var minHeight = 0;
    this.items.forEach(function (itemWrapper) {
      clearElement(eDummyBody);
      var eClone = itemWrapper.tabbedItem.bodyPromise.resolveNow(null, function (body) {
        return body.cloneNode(true);
      });
      if (eClone == null) {
        return;
      }
      eDummyBody.appendChild(eClone);
      if (minWidth < eDummyContainer.offsetWidth) {
        minWidth = eDummyContainer.offsetWidth;
      }
      if (minHeight < eDummyContainer.offsetHeight) {
        minHeight = eDummyContainer.offsetHeight;
      }
    });
    this.getGui().removeChild(eDummyContainer);
    return {
      height: minHeight,
      width: minWidth
    };
  };
  TabbedLayout.prototype.showFirstItem = function () {
    if (this.items.length > 0) {
      this.showItemWrapper(this.items[0]);
    }
  };
  TabbedLayout.prototype.addItem = function (item) {
    var eHeaderButton = document.createElement('span');
    eHeaderButton.setAttribute('tabIndex', '-1');
    eHeaderButton.setAttribute('role', 'menuitem');
    eHeaderButton.appendChild(item.title);
    addCssClass(eHeaderButton, 'ag-tab');
    this.eHeader.appendChild(eHeaderButton);
    setAriaLabel(eHeaderButton, item.titleLabel);
    var wrapper = {
      tabbedItem: item,
      eHeaderButton: eHeaderButton
    };
    this.items.push(wrapper);
    eHeaderButton.addEventListener('click', this.showItemWrapper.bind(this, wrapper));
  };
  TabbedLayout.prototype.showItem = function (tabbedItem) {
    var itemWrapper = find(this.items, function (wrapper) {
      return wrapper.tabbedItem === tabbedItem;
    });
    if (itemWrapper) {
      this.showItemWrapper(itemWrapper);
    }
  };
  TabbedLayout.prototype.showItemWrapper = function (wrapper) {
    var _this = this;
    if (this.params.onItemClicked) {
      this.params.onItemClicked({
        item: wrapper.tabbedItem
      });
    }
    if (this.activeItem === wrapper) {
      callIfPresent(this.params.onActiveItemClicked);
      return;
    }
    clearElement(this.eBody);
    wrapper.tabbedItem.bodyPromise.then(function (body) {
      _this.eBody.appendChild(body);
      var onlyUnmanaged = !_this.focusController.isKeyboardMode();
      _this.focusController.focusInto(_this.eBody, false, onlyUnmanaged);
      if (wrapper.tabbedItem.afterAttachedCallback) {
        wrapper.tabbedItem.afterAttachedCallback(_this.afterAttachedParams);
      }
    });
    if (this.activeItem) {
      removeCssClass(this.activeItem.eHeaderButton, 'ag-tab-selected');
    }
    addCssClass(wrapper.eHeaderButton, 'ag-tab-selected');
    this.activeItem = wrapper;
  };
  __decorate$26([RefSelector('eHeader')], TabbedLayout.prototype, "eHeader", void 0);
  __decorate$26([RefSelector('eBody')], TabbedLayout.prototype, "eBody", void 0);
  return TabbedLayout;
}(ManagedFocusComponent);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
function simpleHttpRequest(params) {
  return new AgPromise(function (resolve) {
    var httpRequest = new XMLHttpRequest();
    httpRequest.open('GET', params.url);
    httpRequest.send();
    httpRequest.onreadystatechange = function () {
      if (httpRequest.readyState === 4 && httpRequest.status === 200) {
        resolve(JSON.parse(httpRequest.responseText));
      }
    };
  });
}

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
(function (ServerSideTransactionResultStatus) {
  ServerSideTransactionResultStatus["StoreNotFound"] = "StoreNotFound";
  ServerSideTransactionResultStatus["StoreLoading"] = "StoreLoading";
  ServerSideTransactionResultStatus["StoreWaitingToLoad"] = "StoreWaitingToLoad";
  ServerSideTransactionResultStatus["StoreLoadingFailed"] = "StoreLoadingFailed";
  ServerSideTransactionResultStatus["StoreWrongType"] = "StoreWrongType";
  ServerSideTransactionResultStatus["Applied"] = "Applied";
  ServerSideTransactionResultStatus["Cancelled"] = "Cancelled";
})(exports.ServerSideTransactionResultStatus || (exports.ServerSideTransactionResultStatus = {}));

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var __extends$2j =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$27 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var VirtualList = /** @class */function (_super) {
  __extends$2j(VirtualList, _super);
  function VirtualList(cssIdentifier, ariaRole) {
    if (cssIdentifier === void 0) {
      cssIdentifier = 'default';
    }
    if (ariaRole === void 0) {
      ariaRole = 'listbox';
    }
    var _this = _super.call(this, VirtualList.getTemplate(cssIdentifier), true) || this;
    _this.cssIdentifier = cssIdentifier;
    _this.ariaRole = ariaRole;
    _this.renderedRows = new Map();
    _this.rowHeight = 20;
    _this.isDestroyed = false;
    return _this;
  }
  VirtualList.prototype.postConstruct = function () {
    this.addScrollListener();
    this.rowHeight = this.getItemHeight();
    this.addResizeObserver();
    _super.prototype.postConstruct.call(this);
  };
  VirtualList.prototype.addResizeObserver = function () {
    var listener = this.drawVirtualRows.bind(this);
    var destroyObserver = this.resizeObserverService.observeResize(this.getGui(), listener);
    this.addDestroyFunc(destroyObserver);
  };
  VirtualList.prototype.focusInnerElement = function (fromBottom) {
    this.focusRow(fromBottom ? this.model.getRowCount() - 1 : 0);
  };
  VirtualList.prototype.onFocusIn = function (e) {
    _super.prototype.onFocusIn.call(this, e);
    var target = e.target;
    if (containsClass(target, 'ag-virtual-list-item')) {
      this.lastFocusedRowIndex = getAriaPosInSet(target) - 1;
    }
  };
  VirtualList.prototype.onFocusOut = function (e) {
    _super.prototype.onFocusOut.call(this, e);
    if (!this.getFocusableElement().contains(e.relatedTarget)) {
      this.lastFocusedRowIndex = null;
    }
  };
  VirtualList.prototype.handleKeyDown = function (e) {
    switch (e.keyCode) {
      case KeyCode.UP:
      case KeyCode.DOWN:
        if (this.navigate(e.keyCode === KeyCode.UP)) {
          e.preventDefault();
        }
        break;
    }
  };
  VirtualList.prototype.onTabKeyDown = function (e) {
    if (this.navigate(e.shiftKey)) {
      e.preventDefault();
    } else {
      // focus on the first or last focusable element to ensure that any other handlers start from there
      this.focusController.focusInto(this.getGui(), !e.shiftKey);
    }
  };
  VirtualList.prototype.navigate = function (up) {
    if (this.lastFocusedRowIndex == null) {
      return false;
    }
    var nextRow = this.lastFocusedRowIndex + (up ? -1 : 1);
    if (nextRow < 0 || nextRow >= this.model.getRowCount()) {
      return false;
    }
    this.focusRow(nextRow);
    return true;
  };
  VirtualList.prototype.getLastFocusedRow = function () {
    return this.lastFocusedRowIndex;
  };
  VirtualList.prototype.focusRow = function (rowNumber) {
    var _this = this;
    this.ensureIndexVisible(rowNumber);
    window.setTimeout(function () {
      var renderedRow = _this.renderedRows.get(rowNumber);
      if (renderedRow) {
        renderedRow.eDiv.focus();
      }
    }, 10);
  };
  VirtualList.prototype.getComponentAt = function (rowIndex) {
    var comp = this.renderedRows.get(rowIndex);
    return comp && comp.rowComponent;
  };
  VirtualList.getTemplate = function (cssIdentifier) {
    return (/* html */"\n            <div class=\"ag-virtual-list-viewport ag-" + cssIdentifier + "-virtual-list-viewport\" role=\"listbox\">\n                <div class=\"ag-virtual-list-container ag-" + cssIdentifier + "-virtual-list-container\" ref=\"eContainer\"></div>\n            </div>"
    );
  };
  VirtualList.prototype.getItemHeight = function () {
    return this.gridOptionsWrapper.getListItemHeight();
  };
  VirtualList.prototype.ensureIndexVisible = function (index) {
    var lastRow = this.model.getRowCount();
    if (typeof index !== 'number' || index < 0 || index >= lastRow) {
      console.warn('invalid row index for ensureIndexVisible: ' + index);
      return;
    }
    var rowTopPixel = index * this.rowHeight;
    var rowBottomPixel = rowTopPixel + this.rowHeight;
    var eGui = this.getGui();
    var viewportTopPixel = eGui.scrollTop;
    var viewportHeight = eGui.offsetHeight;
    var viewportBottomPixel = viewportTopPixel + viewportHeight;
    var viewportScrolledPastRow = viewportTopPixel > rowTopPixel;
    var viewportScrolledBeforeRow = viewportBottomPixel < rowBottomPixel;
    if (viewportScrolledPastRow) {
      // if row is before, scroll up with row at top
      eGui.scrollTop = rowTopPixel;
    } else if (viewportScrolledBeforeRow) {
      // if row is below, scroll down with row at bottom
      var newScrollPosition = rowBottomPixel - viewportHeight;
      eGui.scrollTop = newScrollPosition;
    }
  };
  VirtualList.prototype.setComponentCreator = function (componentCreator) {
    this.componentCreator = componentCreator;
  };
  VirtualList.prototype.getRowHeight = function () {
    return this.rowHeight;
  };
  VirtualList.prototype.getScrollTop = function () {
    return this.getGui().scrollTop;
  };
  VirtualList.prototype.setRowHeight = function (rowHeight) {
    this.rowHeight = rowHeight;
    this.refresh();
  };
  VirtualList.prototype.refresh = function () {
    var _this = this;
    if (this.model == null || this.isDestroyed) {
      return;
    }
    var rowCount = this.model.getRowCount();
    this.eContainer.style.height = rowCount * this.rowHeight + "px";
    // ensure height is applied before attempting to redraw rows
    waitUntil(function () {
      return _this.eContainer.clientHeight >= rowCount * _this.rowHeight;
    }, function () {
      if (_this.isDestroyed) {
        return;
      }
      _this.clearVirtualRows();
      _this.drawVirtualRows();
    });
  };
  VirtualList.prototype.clearVirtualRows = function () {
    var _this = this;
    this.renderedRows.forEach(function (_, rowIndex) {
      return _this.removeRow(rowIndex);
    });
  };
  VirtualList.prototype.drawVirtualRows = function () {
    var gui = this.getGui();
    var topPixel = gui.scrollTop;
    var bottomPixel = topPixel + gui.offsetHeight;
    var firstRow = Math.floor(topPixel / this.rowHeight);
    var lastRow = Math.floor(bottomPixel / this.rowHeight);
    this.ensureRowsRendered(firstRow, lastRow);
  };
  VirtualList.prototype.ensureRowsRendered = function (start, finish) {
    var _this = this;
    // remove any rows that are no longer required
    this.renderedRows.forEach(function (_, rowIndex) {
      if ((rowIndex < start || rowIndex > finish) && rowIndex !== _this.lastFocusedRowIndex) {
        _this.removeRow(rowIndex);
      }
    });
    // insert any required new rows
    for (var rowIndex = start; rowIndex <= finish; rowIndex++) {
      if (this.renderedRows.has(rowIndex)) {
        continue;
      }
      // check this row actually exists (in case overflow buffer window exceeds real data)
      if (rowIndex < this.model.getRowCount()) {
        this.insertRow(rowIndex);
      }
    }
  };
  VirtualList.prototype.insertRow = function (rowIndex) {
    var _this = this;
    var value = this.model.getRow(rowIndex);
    var eDiv = document.createElement('div');
    addCssClass(eDiv, 'ag-virtual-list-item');
    addCssClass(eDiv, "ag-" + this.cssIdentifier + "-virtual-list-item");
    eDiv.setAttribute('role', this.ariaRole === 'tree' ? 'treeitem' : 'option');
    setAriaSetSize(eDiv, this.model.getRowCount());
    setAriaPosInSet(eDiv, rowIndex + 1);
    eDiv.setAttribute('tabindex', '-1');
    if (typeof this.model.isRowSelected === 'function') {
      var isSelected = this.model.isRowSelected(rowIndex);
      setAriaSelected(eDiv, !!isSelected);
      setAriaChecked(eDiv, isSelected);
    }
    eDiv.style.height = this.rowHeight + "px";
    eDiv.style.top = this.rowHeight * rowIndex + "px";
    var rowComponent = this.componentCreator(value, eDiv);
    rowComponent.addGuiEventListener('focusin', function () {
      return _this.lastFocusedRowIndex = rowIndex;
    });
    eDiv.appendChild(rowComponent.getGui());
    // keep the DOM order consistent with the order of the rows
    if (this.renderedRows.has(rowIndex - 1)) {
      this.renderedRows.get(rowIndex - 1).eDiv.insertAdjacentElement('afterend', eDiv);
    } else if (this.renderedRows.has(rowIndex + 1)) {
      this.renderedRows.get(rowIndex + 1).eDiv.insertAdjacentElement('beforebegin', eDiv);
    } else {
      this.eContainer.appendChild(eDiv);
    }
    this.renderedRows.set(rowIndex, {
      rowComponent: rowComponent,
      eDiv: eDiv
    });
  };
  VirtualList.prototype.removeRow = function (rowIndex) {
    var component = this.renderedRows.get(rowIndex);
    this.eContainer.removeChild(component.eDiv);
    this.destroyBean(component.rowComponent);
    this.renderedRows.delete(rowIndex);
  };
  VirtualList.prototype.addScrollListener = function () {
    var _this = this;
    this.addGuiEventListener('scroll', function () {
      return _this.drawVirtualRows();
    });
  };
  VirtualList.prototype.setModel = function (model) {
    this.model = model;
  };
  VirtualList.prototype.destroy = function () {
    if (this.isDestroyed) {
      return;
    }
    this.clearVirtualRows();
    this.isDestroyed = true;
    _super.prototype.destroy.call(this);
  };
  __decorate$27([Autowired('resizeObserverService')], VirtualList.prototype, "resizeObserverService", void 0);
  __decorate$27([RefSelector('eContainer')], VirtualList.prototype, "eContainer", void 0);
  return VirtualList;
}(ManagedFocusComponent);

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
function defaultGroupComparator(valueA, valueB, nodeA, nodeB, accentedCompare) {
  if (accentedCompare === void 0) {
    accentedCompare = false;
  }
  console.warn('AG Grid: Since ag-grid 11.0.0 defaultGroupComparator is not necessary. You can remove this from your colDef');
  var nodeAIsGroup = exists(nodeA) && nodeA.group;
  var nodeBIsGroup = exists(nodeB) && nodeB.group;
  var bothAreGroups = nodeAIsGroup && nodeBIsGroup;
  var bothAreNormal = !nodeAIsGroup && !nodeBIsGroup;
  if (bothAreGroups) {
    return defaultComparator(nodeA.key, nodeB.key, accentedCompare);
  }
  if (bothAreNormal) {
    return defaultComparator(valueA, valueB, accentedCompare);
  }
  if (nodeAIsGroup) {
    return 1;
  }
  return -1;
}

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
(function (ServerSideStoreType) {
  ServerSideStoreType["Full"] = "full";
  ServerSideStoreType["Partial"] = "partial";
})(exports.ServerSideStoreType || (exports.ServerSideStoreType = {}));

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var BaseComponentWrapper = /** @class */function () {
  function BaseComponentWrapper() {}
  BaseComponentWrapper.prototype.wrap = function (OriginalConstructor, mandatoryMethodList, optionalMethodList, componentType, componentName) {
    var _this = this;
    if (optionalMethodList === void 0) {
      optionalMethodList = [];
    }
    var wrapper = this.createWrapper(OriginalConstructor, componentType, componentName);
    mandatoryMethodList.forEach(function (methodName) {
      _this.createMethod(wrapper, methodName, true);
    });
    optionalMethodList.forEach(function (methodName) {
      _this.createMethod(wrapper, methodName, false);
    });
    return wrapper;
  };
  BaseComponentWrapper.prototype.createMethod = function (wrapper, methodName, mandatory) {
    wrapper.addMethod(methodName, this.createMethodProxy(wrapper, methodName, mandatory));
  };
  BaseComponentWrapper.prototype.createMethodProxy = function (wrapper, methodName, mandatory) {
    return function () {
      if (wrapper.hasMethod(methodName)) {
        return wrapper.callMethod(methodName, arguments);
      }
      if (mandatory) {
        console.warn('AG Grid: Framework component is missing the method ' + methodName + '()');
      }
      return null;
    };
  };
  return BaseComponentWrapper;
}();

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
(function (ChartType) {
  ChartType["Column"] = "column";
  ChartType["GroupedColumn"] = "groupedColumn";
  ChartType["StackedColumn"] = "stackedColumn";
  ChartType["NormalizedColumn"] = "normalizedColumn";
  ChartType["Bar"] = "bar";
  ChartType["GroupedBar"] = "groupedBar";
  ChartType["StackedBar"] = "stackedBar";
  ChartType["NormalizedBar"] = "normalizedBar";
  ChartType["Line"] = "line";
  ChartType["Scatter"] = "scatter";
  ChartType["Bubble"] = "bubble";
  ChartType["Pie"] = "pie";
  ChartType["Doughnut"] = "doughnut";
  ChartType["Area"] = "area";
  ChartType["StackedArea"] = "stackedArea";
  ChartType["NormalizedArea"] = "normalizedArea";
  ChartType["Histogram"] = "histogram";
})(exports.ChartType || (exports.ChartType = {}));
(function (LegendPosition) {
  LegendPosition["Top"] = "top";
  LegendPosition["Right"] = "right";
  LegendPosition["Bottom"] = "bottom";
  LegendPosition["Left"] = "left";
})(exports.LegendPosition || (exports.LegendPosition = {}));

/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v25.3.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
var globalObj = typeof global === 'undefined' ? {} : global;
globalObj.HTMLElement = typeof HTMLElement === 'undefined' ? {} : HTMLElement;
globalObj.HTMLButtonElement = typeof HTMLButtonElement === 'undefined' ? {} : HTMLButtonElement;
globalObj.HTMLSelectElement = typeof HTMLSelectElement === 'undefined' ? {} : HTMLSelectElement;
globalObj.HTMLInputElement = typeof HTMLInputElement === 'undefined' ? {} : HTMLInputElement;
globalObj.Node = typeof Node === 'undefined' ? {} : Node;
globalObj.MouseEvent = typeof MouseEvent === 'undefined' ? {} : MouseEvent;
var __spreadArrays$8 =  false || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
};
var ClientSideNodeManager = /** @class */function () {
  function ClientSideNodeManager(rootNode, gridOptionsWrapper, context, eventService, columnController, gridApi, columnApi, selectionController) {
    this.nextId = 0;
    // when user is provide the id's, we also keep a map of ids to row nodes for convenience
    this.allNodesMap = {};
    this.rootNode = rootNode;
    this.gridOptionsWrapper = gridOptionsWrapper;
    this.context = context;
    this.eventService = eventService;
    this.columnController = columnController;
    this.gridApi = gridApi;
    this.columnApi = columnApi;
    this.selectionController = selectionController;
    this.rootNode.group = true;
    this.rootNode.level = -1;
    this.rootNode.id = ClientSideNodeManager.ROOT_NODE_ID;
    this.rootNode.allLeafChildren = [];
    this.rootNode.childrenAfterGroup = [];
    this.rootNode.childrenAfterSort = [];
    this.rootNode.childrenAfterFilter = [];
    // if we make this class a bean, then can annotate postConstruct
    this.postConstruct();
  }
  // @PostConstruct - this is not a bean, so postConstruct called by constructor
  ClientSideNodeManager.prototype.postConstruct = function () {
    // func below doesn't have 'this' pointer, so need to pull out these bits
    this.suppressParentsInRowNodes = this.gridOptionsWrapper.isSuppressParentsInRowNodes();
    this.isRowMasterFunc = this.gridOptionsWrapper.getIsRowMasterFunc();
    this.doingTreeData = this.gridOptionsWrapper.isTreeData();
    this.doingMasterDetail = this.gridOptionsWrapper.isMasterDetail();
  };
  ClientSideNodeManager.prototype.getCopyOfNodesMap = function () {
    return _.cloneObject(this.allNodesMap);
  };
  ClientSideNodeManager.prototype.getRowNode = function (id) {
    return this.allNodesMap[id];
  };
  ClientSideNodeManager.prototype.setRowData = function (rowData) {
    this.rootNode.childrenAfterFilter = null;
    this.rootNode.childrenAfterGroup = null;
    this.rootNode.childrenAfterSort = null;
    this.rootNode.childrenMapped = null;
    this.rootNode.updateHasChildren();
    this.nextId = 0;
    this.allNodesMap = {};
    if (!rowData) {
      this.rootNode.allLeafChildren = [];
      this.rootNode.childrenAfterGroup = [];
      return;
    }
    // kick off recursion
    // we add rootNode as the parent, however if using ag-grid-enterprise, the grouping stage
    // sets the parent node on each row (even if we are not grouping). so setting parent node
    // here is for benefit of ag-grid-community users
    this.rootNode.allLeafChildren = this.recursiveFunction(rowData, this.rootNode, ClientSideNodeManager.TOP_LEVEL);
  };
  ClientSideNodeManager.prototype.updateRowData = function (rowDataTran, rowNodeOrder) {
    var rowNodeTransaction = {
      remove: [],
      update: [],
      add: []
    };
    var nodesToUnselect = [];
    this.executeRemove(rowDataTran, rowNodeTransaction, nodesToUnselect);
    this.executeUpdate(rowDataTran, rowNodeTransaction, nodesToUnselect);
    this.executeAdd(rowDataTran, rowNodeTransaction);
    this.updateSelection(nodesToUnselect);
    if (rowNodeOrder) {
      _.sortRowNodesByOrder(this.rootNode.allLeafChildren, rowNodeOrder);
    }
    return rowNodeTransaction;
  };
  ClientSideNodeManager.prototype.updateSelection = function (nodesToUnselect) {
    var selectionChanged = nodesToUnselect.length > 0;
    if (selectionChanged) {
      nodesToUnselect.forEach(function (rowNode) {
        rowNode.setSelected(false, false, true);
      });
    }
    // we do this regardless of nodes to unselect or not, as it's possible
    // a new node was inserted, so a parent that was previously selected (as all
    // children were selected) should not be tri-state (as new one unselected against
    // all other selected children).
    this.selectionController.updateGroupsFromChildrenSelections();
    if (selectionChanged) {
      var event_1 = {
        type: Events.EVENT_SELECTION_CHANGED,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(event_1);
    }
  };
  ClientSideNodeManager.prototype.executeAdd = function (rowDataTran, rowNodeTransaction) {
    var _this = this;
    var add = rowDataTran.add,
      addIndex = rowDataTran.addIndex;
    if (_.missingOrEmpty(add)) {
      return;
    }
    // create new row nodes for each data item
    var newNodes = add.map(function (item) {
      return _this.createNode(item, _this.rootNode, ClientSideNodeManager.TOP_LEVEL);
    });
    // add new row nodes to the root nodes 'allLeafChildren'
    var useIndex = typeof addIndex === 'number' && addIndex >= 0;
    if (useIndex) {
      // new rows are inserted in one go by concatenating them in between the existing rows at the desired index.
      // this is much faster than splicing them individually into 'allLeafChildren' when there are large inserts.
      var existingLeafChildren = this.rootNode.allLeafChildren;
      var nodesBeforeIndex = existingLeafChildren.slice(0, addIndex);
      var nodesAfterIndex = existingLeafChildren.slice(addIndex, existingLeafChildren.length);
      this.rootNode.allLeafChildren = __spreadArrays$8(nodesBeforeIndex, newNodes, nodesAfterIndex);
    } else {
      this.rootNode.allLeafChildren = __spreadArrays$8(this.rootNode.allLeafChildren, newNodes);
    }
    // add new row nodes to the transaction add items
    rowNodeTransaction.add = newNodes;
  };
  ClientSideNodeManager.prototype.executeRemove = function (rowDataTran, rowNodeTransaction, nodesToUnselect) {
    var _this = this;
    var remove = rowDataTran.remove;
    if (_.missingOrEmpty(remove)) {
      return;
    }
    var rowIdsRemoved = {};
    remove.forEach(function (item) {
      var rowNode = _this.lookupRowNode(item);
      if (!rowNode) {
        return;
      }
      // do delete - setting 'suppressFinishActions = true' to ensure EVENT_SELECTION_CHANGED is not raised for
      // each row node updated, instead it is raised once by the calling code if any selected nodes exist.
      if (rowNode.isSelected()) {
        nodesToUnselect.push(rowNode);
      }
      // so row renderer knows to fade row out (and not reposition it)
      rowNode.clearRowTopAndRowIndex();
      // NOTE: were we could remove from allLeaveChildren, however _.removeFromArray() is expensive, especially
      // if called multiple times (eg deleting lots of rows) and if allLeafChildren is a large list
      rowIdsRemoved[rowNode.id] = true;
      // _.removeFromArray(this.rootNode.allLeafChildren, rowNode);
      delete _this.allNodesMap[rowNode.id];
      rowNodeTransaction.remove.push(rowNode);
    });
    this.rootNode.allLeafChildren = this.rootNode.allLeafChildren.filter(function (rowNode) {
      return !rowIdsRemoved[rowNode.id];
    });
  };
  ClientSideNodeManager.prototype.executeUpdate = function (rowDataTran, rowNodeTransaction, nodesToUnselect) {
    var _this = this;
    var update = rowDataTran.update;
    if (_.missingOrEmpty(update)) {
      return;
    }
    update.forEach(function (item) {
      var rowNode = _this.lookupRowNode(item);
      if (!rowNode) {
        return;
      }
      rowNode.updateData(item);
      if (!rowNode.selectable && rowNode.isSelected()) {
        nodesToUnselect.push(rowNode);
      }
      _this.setMasterForRow(rowNode, item, ClientSideNodeManager.TOP_LEVEL, false);
      rowNodeTransaction.update.push(rowNode);
    });
  };
  ClientSideNodeManager.prototype.lookupRowNode = function (data) {
    var rowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();
    var rowNode;
    if (_.exists(rowNodeIdFunc)) {
      // find rowNode using id
      var id = rowNodeIdFunc(data);
      rowNode = this.allNodesMap[id];
      if (!rowNode) {
        console.error("AG Grid: could not find row id=" + id + ", data item was not found for this id");
        return null;
      }
    } else {
      // find rowNode using object references
      rowNode = _.find(this.rootNode.allLeafChildren, function (node) {
        return node.data === data;
      });
      if (!rowNode) {
        console.error("AG Grid: could not find data item as object was not found", data);
        return null;
      }
    }
    return rowNode;
  };
  ClientSideNodeManager.prototype.recursiveFunction = function (rowData, parent, level) {
    var _this = this;
    // make sure the rowData is an array and not a string of json - this was a commonly reported problem on the forum
    if (typeof rowData === 'string') {
      console.warn('AG Grid: rowData must be an array, however you passed in a string. If you are loading JSON, make sure you convert the JSON string to JavaScript objects first');
      return;
    }
    var rowNodes = [];
    rowData.forEach(function (dataItem) {
      var node = _this.createNode(dataItem, parent, level);
      rowNodes.push(node);
    });
    return rowNodes;
  };
  ClientSideNodeManager.prototype.createNode = function (dataItem, parent, level) {
    var node = new RowNode();
    this.context.createBean(node);
    node.group = false;
    this.setMasterForRow(node, dataItem, level, true);
    if (parent && !this.suppressParentsInRowNodes) {
      node.parent = parent;
    }
    node.level = level;
    node.setDataAndId(dataItem, this.nextId.toString());
    if (this.allNodesMap[node.id]) {
      console.warn("ag-grid: duplicate node id '" + node.id + "' detected from getRowNodeId callback, this could cause issues in your grid.");
    }
    this.allNodesMap[node.id] = node;
    this.nextId++;
    return node;
  };
  ClientSideNodeManager.prototype.setMasterForRow = function (rowNode, data, level, setExpanded) {
    if (this.doingTreeData) {
      rowNode.setMaster(false);
      if (setExpanded) {
        rowNode.expanded = false;
      }
    } else {
      // this is the default, for when doing grid data
      if (this.doingMasterDetail) {
        // if we are doing master detail, then the
        // default is that everything can be a Master Row.
        if (this.isRowMasterFunc) {
          rowNode.setMaster(this.isRowMasterFunc(data));
        } else {
          rowNode.setMaster(true);
        }
      } else {
        rowNode.setMaster(false);
      }
      if (setExpanded) {
        var rowGroupColumns = this.columnController.getRowGroupColumns();
        var numRowGroupColumns = rowGroupColumns ? rowGroupColumns.length : 0;
        // need to take row group into account when determining level
        var masterRowLevel = level + numRowGroupColumns;
        rowNode.expanded = rowNode.master ? this.isExpanded(masterRowLevel) : false;
      }
    }
  };
  ClientSideNodeManager.prototype.isExpanded = function (level) {
    var expandByDefault = this.gridOptionsWrapper.getGroupDefaultExpanded();
    if (expandByDefault === -1) {
      return true;
    }
    return level < expandByDefault;
  };
  ClientSideNodeManager.TOP_LEVEL = 0;
  ClientSideNodeManager.ROOT_NODE_ID = 'ROOT_NODE_ID';
  return ClientSideNodeManager;
}();
var __extends$2k =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$28 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RecursionType;
(function (RecursionType) {
  RecursionType[RecursionType["Normal"] = 0] = "Normal";
  RecursionType[RecursionType["AfterFilter"] = 1] = "AfterFilter";
  RecursionType[RecursionType["AfterFilterAndSort"] = 2] = "AfterFilterAndSort";
  RecursionType[RecursionType["PivotNodes"] = 3] = "PivotNodes";
})(RecursionType || (RecursionType = {}));
var ClientSideRowModel = /** @class */function (_super) {
  __extends$2k(ClientSideRowModel, _super);
  function ClientSideRowModel() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.onRowGroupOpenedPending = false;
    return _this;
  }
  ClientSideRowModel.prototype.init = function () {
    var refreshEverythingFunc = this.refreshModel.bind(this, {
      step: exports.ClientSideRowModelSteps.EVERYTHING
    });
    var refreshEverythingAfterColsChangedFunc = this.refreshModel.bind(this, {
      step: exports.ClientSideRowModelSteps.EVERYTHING,
      afterColumnsChanged: true,
      keepRenderedRows: true,
      animate: true
    });
    this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, refreshEverythingAfterColsChangedFunc);
    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, refreshEverythingFunc);
    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, this.onValueChanged.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, this.refreshModel.bind(this, {
      step: exports.ClientSideRowModelSteps.PIVOT
    }));
    this.addManagedListener(this.eventService, Events.EVENT_ROW_GROUP_OPENED, this.onRowGroupOpened.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, refreshEverythingFunc);
    var refreshMapListener = this.refreshModel.bind(this, {
      step: exports.ClientSideRowModelSteps.MAP,
      keepRenderedRows: true,
      animate: true
    });
    this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, refreshMapListener);
    this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, refreshMapListener);
    this.rootNode = new RowNode();
    this.nodeManager = new ClientSideNodeManager(this.rootNode, this.gridOptionsWrapper, this.getContext(), this.eventService, this.columnController, this.gridApi, this.columnApi, this.selectionController);
    this.createBean(this.rootNode);
  };
  ClientSideRowModel.prototype.start = function () {
    var rowData = this.gridOptionsWrapper.getRowData();
    if (rowData) {
      this.setRowData(rowData);
    }
  };
  ClientSideRowModel.prototype.ensureRowHeightsValid = function (startPixel, endPixel, startLimitIndex, endLimitIndex) {
    var atLeastOneChange;
    var res = false;
    // we do this multiple times as changing the row heights can also change the first and last rows,
    // so the first pass can make lots of rows smaller, which means the second pass we end up changing
    // more rows.
    do {
      atLeastOneChange = false;
      var rowAtStartPixel = this.getRowIndexAtPixel(startPixel);
      var rowAtEndPixel = this.getRowIndexAtPixel(endPixel);
      // keep check to current page if doing pagination
      var firstRow = Math.max(rowAtStartPixel, startLimitIndex);
      var lastRow = Math.min(rowAtEndPixel, endLimitIndex);
      for (var rowIndex = firstRow; rowIndex <= lastRow; rowIndex++) {
        var rowNode = this.getRow(rowIndex);
        if (rowNode.rowHeightEstimated) {
          var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(rowNode);
          rowNode.setRowHeight(rowHeight.height);
          atLeastOneChange = true;
          res = true;
        }
      }
      if (atLeastOneChange) {
        this.setRowTops();
      }
    } while (atLeastOneChange);
    return res;
  };
  ClientSideRowModel.prototype.setRowTops = function () {
    var nextRowTop = 0;
    for (var i = 0; i < this.rowsToDisplay.length; i++) {
      // we don't estimate if doing fullHeight or autoHeight, as all rows get rendered all the time
      // with these two layouts.
      var allowEstimate = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_NORMAL;
      var rowNode = this.rowsToDisplay[i];
      if (_.missing(rowNode.rowHeight)) {
        var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(rowNode, allowEstimate);
        rowNode.setRowHeight(rowHeight.height, rowHeight.estimated);
      }
      rowNode.setRowTop(nextRowTop);
      rowNode.setRowIndex(i);
      nextRowTop += rowNode.rowHeight;
    }
  };
  ClientSideRowModel.prototype.resetRowTops = function (changedPath) {
    var displayedRowsMapped = {};
    this.rowsToDisplay.forEach(function (rowNode) {
      if (rowNode.id != null) {
        displayedRowsMapped[rowNode.id] = rowNode;
      }
    });
    var clearIfNotDisplayed = function (rowNode) {
      if (rowNode && rowNode.id != null && displayedRowsMapped[rowNode.id] == null) {
        rowNode.clearRowTopAndRowIndex();
      }
    };
    var recurse = function (rowNode) {
      clearIfNotDisplayed(rowNode);
      clearIfNotDisplayed(rowNode.detailNode);
      clearIfNotDisplayed(rowNode.sibling);
      if (rowNode.hasChildren()) {
        if (rowNode.childrenAfterGroup) {
          // if a changedPath is active, it means we are here because of a transaction update or
          // a change detection. neither of these impacts the open/closed state of groups. so if
          // a group is not open this time, it was not open last time. so we know all closed groups
          // already have their top positions cleared. so there is no need to traverse all the way
          // when changedPath is active and the rowNode is not expanded.
          var isRootNode = rowNode.level == -1; // we need to give special consideration for root node,
          // as expanded=undefined for root node
          var skipChildren = changedPath.isActive() && !isRootNode && !rowNode.expanded;
          if (!skipChildren) {
            rowNode.childrenAfterGroup.forEach(recurse);
          }
        }
      }
    };
    recurse(this.rootNode);
  };
  // returns false if row was moved, otherwise true
  ClientSideRowModel.prototype.ensureRowsAtPixel = function (rowNodes, pixel, increment) {
    var _this = this;
    if (increment === void 0) {
      increment = 0;
    }
    var indexAtPixelNow = this.getRowIndexAtPixel(pixel);
    var rowNodeAtPixelNow = this.getRow(indexAtPixelNow);
    if (rowNodeAtPixelNow === rowNodes[0]) {
      return false;
    }
    rowNodes.forEach(function (rowNode) {
      _.removeFromArray(_this.rootNode.allLeafChildren, rowNode);
    });
    rowNodes.forEach(function (rowNode, idx) {
      _.insertIntoArray(_this.rootNode.allLeafChildren, rowNode, Math.max(indexAtPixelNow + increment, 0) + idx);
    });
    this.refreshModel({
      step: exports.ClientSideRowModelSteps.EVERYTHING,
      keepRenderedRows: true,
      animate: true,
      keepEditingRows: true
    });
    return true;
  };
  ClientSideRowModel.prototype.highlightRowAtPixel = function (rowNode, pixel) {
    var indexAtPixelNow = pixel != null ? this.getRowIndexAtPixel(pixel) : null;
    var rowNodeAtPixelNow = indexAtPixelNow != null ? this.getRow(indexAtPixelNow) : null;
    if (!rowNodeAtPixelNow || !rowNode || rowNodeAtPixelNow === rowNode || pixel == null) {
      if (this.lastHighlightedRow) {
        this.lastHighlightedRow.setHighlighted(null);
        this.lastHighlightedRow = null;
      }
      return;
    }
    var highlight = this.getHighlightPosition(pixel, rowNodeAtPixelNow);
    if (this.lastHighlightedRow && this.lastHighlightedRow !== rowNodeAtPixelNow) {
      this.lastHighlightedRow.setHighlighted(null);
      this.lastHighlightedRow = null;
    }
    rowNodeAtPixelNow.setHighlighted(highlight);
    this.lastHighlightedRow = rowNodeAtPixelNow;
  };
  ClientSideRowModel.prototype.getHighlightPosition = function (pixel, rowNode) {
    if (!rowNode) {
      var index = this.getRowIndexAtPixel(pixel);
      rowNode = this.getRow(index || 0);
      if (!rowNode) {
        return 'below';
      }
    }
    var rowTop = rowNode.rowTop,
      rowHeight = rowNode.rowHeight;
    return pixel - rowTop < rowHeight / 2 ? 'above' : 'below';
  };
  ClientSideRowModel.prototype.getLastHighlightedRowNode = function () {
    return this.lastHighlightedRow;
  };
  ClientSideRowModel.prototype.isLastRowIndexKnown = function () {
    return true;
  };
  ClientSideRowModel.prototype.getRowCount = function () {
    if (this.rowsToDisplay) {
      return this.rowsToDisplay.length;
    }
    return 0;
  };
  ClientSideRowModel.prototype.getTopLevelRowCount = function () {
    var showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;
    if (showingRootNode) {
      return 1;
    }
    return this.rootNode.childrenAfterFilter ? this.rootNode.childrenAfterFilter.length : 0;
  };
  ClientSideRowModel.prototype.getTopLevelRowDisplayedIndex = function (topLevelIndex) {
    var showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;
    if (showingRootNode) {
      return topLevelIndex;
    }
    var rowNode = this.rootNode.childrenAfterSort[topLevelIndex];
    if (this.gridOptionsWrapper.isGroupHideOpenParents()) {
      // if hideOpenParents, and this row open, then this row is now displayed at this index, first child is
      while (rowNode.expanded && rowNode.childrenAfterSort && rowNode.childrenAfterSort.length > 0) {
        rowNode = rowNode.childrenAfterSort[0];
      }
    }
    return rowNode.rowIndex;
  };
  ClientSideRowModel.prototype.getRowBounds = function (index) {
    if (_.missing(this.rowsToDisplay)) {
      return null;
    }
    var rowNode = this.rowsToDisplay[index];
    if (rowNode) {
      return {
        rowTop: rowNode.rowTop,
        rowHeight: rowNode.rowHeight
      };
    }
    return null;
  };
  ClientSideRowModel.prototype.onRowGroupOpened = function () {
    // because the user can call rowNode.setExpanded() many times in on VM turn,
    // we debounce the call using animationFrameService. we use animationFrameService
    // rather than _.debounce() so this will get done if anyone flushes the animationFrameService
    // (eg user calls api.ensureRowVisible(), which in turn flushes ).
    var _this = this;
    if (this.onRowGroupOpenedPending) {
      return;
    }
    this.onRowGroupOpenedPending = true;
    var action = function () {
      _this.onRowGroupOpenedPending = false;
      var animate = _this.gridOptionsWrapper.isAnimateRows();
      _this.refreshModel({
        step: exports.ClientSideRowModelSteps.MAP,
        keepRenderedRows: true,
        animate: animate
      });
    };
    if (this.gridOptionsWrapper.isSuppressAnimationFrame()) {
      action();
    } else {
      this.animationFrameService.addDestroyTask(action);
    }
  };
  ClientSideRowModel.prototype.onFilterChanged = function (event) {
    if (event.afterDataChange) {
      return;
    }
    var animate = this.gridOptionsWrapper.isAnimateRows();
    this.refreshModel({
      step: exports.ClientSideRowModelSteps.FILTER,
      keepRenderedRows: true,
      animate: animate
    });
  };
  ClientSideRowModel.prototype.onSortChanged = function () {
    var animate = this.gridOptionsWrapper.isAnimateRows();
    this.refreshModel({
      step: exports.ClientSideRowModelSteps.SORT,
      keepRenderedRows: true,
      animate: animate,
      keepEditingRows: true
    });
  };
  ClientSideRowModel.prototype.getType = function () {
    return Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
  };
  ClientSideRowModel.prototype.onValueChanged = function () {
    if (this.columnController.isPivotActive()) {
      this.refreshModel({
        step: exports.ClientSideRowModelSteps.PIVOT
      });
    } else {
      this.refreshModel({
        step: exports.ClientSideRowModelSteps.AGGREGATE
      });
    }
  };
  ClientSideRowModel.prototype.createChangePath = function (rowNodeTransactions) {
    // for updates, if the row is updated at all, then we re-calc all the values
    // in that row. we could compare each value to each old value, however if we
    // did this, we would be calling the valueService twice, once on the old value
    // and once on the new value. so it's less valueGetter calls if we just assume
    // each column is different. that way the changedPath is used so that only
    // the impacted parent rows are recalculated, parents who's children have
    // not changed are not impacted.
    var noTransactions = _.missingOrEmpty(rowNodeTransactions);
    var changedPath = new ChangedPath(false, this.rootNode);
    if (noTransactions || this.gridOptionsWrapper.isTreeData()) {
      changedPath.setInactive();
    }
    return changedPath;
  };
  ClientSideRowModel.prototype.isSuppressModelUpdateAfterUpdateTransaction = function (params) {
    if (!this.gridOptionsWrapper.isSuppressModelUpdateAfterUpdateTransaction()) {
      return false;
    }
    // return true if we are only doing update transactions
    if (params.rowNodeTransactions == null) {
      return false;
    }
    var transWithAddsOrDeletes = _.filter(params.rowNodeTransactions, function (tx) {
      return tx.add != null && tx.add.length > 0 || tx.remove != null && tx.remove.length > 0;
    });
    var transactionsContainUpdatesOnly = transWithAddsOrDeletes == null || transWithAddsOrDeletes.length == 0;
    return transactionsContainUpdatesOnly;
  };
  ClientSideRowModel.prototype.refreshModel = function (params) {
    var _this = this;
    if (this.isSuppressModelUpdateAfterUpdateTransaction(params)) {
      return;
    }
    // this goes through the pipeline of stages. what's in my head is similar
    // to the diagram on this page:
    // http://commons.apache.org/sandbox/commons-pipeline/pipeline_basics.html
    // however we want to keep the results of each stage, hence we manually call
    // each step rather than have them chain each other.
    // fallthrough in below switch is on purpose,
    // eg if STEP_FILTER, then all steps below this
    // step get done
    // let start: number;
    // console.log('======= start =======');
    var changedPath = this.createChangePath(params.rowNodeTransactions);
    switch (params.step) {
      case exports.ClientSideRowModelSteps.EVERYTHING:
        // start = new Date().getTime();
        this.doRowGrouping(params.groupState, params.rowNodeTransactions, params.rowNodeOrder, changedPath, !!params.afterColumnsChanged);
      // console.log('rowGrouping = ' + (new Date().getTime() - start));
      case exports.ClientSideRowModelSteps.FILTER:
        // start = new Date().getTime();
        this.doFilter(changedPath);
      // console.log('filter = ' + (new Date().getTime() - start));
      case exports.ClientSideRowModelSteps.PIVOT:
        this.doPivot(changedPath);
      case exports.ClientSideRowModelSteps.AGGREGATE:
        // depends on agg fields
        // start = new Date().getTime();
        this.doAggregate(changedPath);
      // console.log('aggregation = ' + (new Date().getTime() - start));
      case exports.ClientSideRowModelSteps.SORT:
        // start = new Date().getTime();
        this.doSort(params.rowNodeTransactions, changedPath);
      // console.log('sort = ' + (new Date().getTime() - start));
      case exports.ClientSideRowModelSteps.MAP:
        // start = new Date().getTime();
        this.doRowsToDisplay();
      // console.log('rowsToDisplay = ' + (new Date().getTime() - start));
    }
    // set all row tops to null, then set row tops on all visible rows. if we don't
    // do this, then the algorithm below only sets row tops, old row tops from old rows
    // will still lie around
    this.setRowTops();
    this.resetRowTops(changedPath);
    var event = {
      type: Events.EVENT_MODEL_UPDATED,
      api: this.gridApi,
      columnApi: this.columnApi,
      animate: params.animate,
      keepRenderedRows: params.keepRenderedRows,
      newData: params.newData,
      newPage: false
    };
    this.eventService.dispatchEvent(event);
    if (this.$scope) {
      window.setTimeout(function () {
        _this.$scope.$apply();
      }, 0);
    }
  };
  ClientSideRowModel.prototype.isEmpty = function () {
    var rowsMissing = _.missing(this.rootNode.allLeafChildren) || this.rootNode.allLeafChildren.length === 0;
    return _.missing(this.rootNode) || rowsMissing || !this.columnController.isReady();
  };
  ClientSideRowModel.prototype.isRowsToRender = function () {
    return _.exists(this.rowsToDisplay) && this.rowsToDisplay.length > 0;
  };
  ClientSideRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {
    // if lastSelectedNode is missing, we start at the first row
    var firstRowHit = !lastInRange;
    var lastRowHit = false;
    var lastRow;
    var result = [];
    var groupsSelectChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
    this.forEachNodeAfterFilterAndSort(function (rowNode) {
      var lookingForLastRow = firstRowHit && !lastRowHit;
      // check if we need to flip the select switch
      if (!firstRowHit) {
        if (rowNode === lastInRange || rowNode === firstInRange) {
          firstRowHit = true;
        }
      }
      var skipThisGroupNode = rowNode.group && groupsSelectChildren;
      if (!skipThisGroupNode) {
        var inRange = firstRowHit && !lastRowHit;
        var childOfLastRow = rowNode.isParentOfNode(lastRow);
        if (inRange || childOfLastRow) {
          result.push(rowNode);
        }
      }
      if (lookingForLastRow) {
        if (rowNode === lastInRange || rowNode === firstInRange) {
          lastRowHit = true;
          if (rowNode === lastInRange) {
            lastRow = lastInRange;
          } else {
            lastRow = firstInRange;
          }
        }
      }
    });
    return result;
  };
  ClientSideRowModel.prototype.setDatasource = function (datasource) {
    console.error('AG Grid: should never call setDatasource on clientSideRowController');
  };
  ClientSideRowModel.prototype.getTopLevelNodes = function () {
    return this.rootNode ? this.rootNode.childrenAfterGroup : null;
  };
  ClientSideRowModel.prototype.getRootNode = function () {
    return this.rootNode;
  };
  ClientSideRowModel.prototype.getRow = function (index) {
    return this.rowsToDisplay[index];
  };
  ClientSideRowModel.prototype.isRowPresent = function (rowNode) {
    return this.rowsToDisplay.indexOf(rowNode) >= 0;
  };
  ClientSideRowModel.prototype.getRowIndexAtPixel = function (pixelToMatch) {
    if (this.isEmpty()) {
      return -1;
    }
    // do binary search of tree
    // http://oli.me.uk/2013/06/08/searching-javascript-arrays-with-a-binary-search/
    var bottomPointer = 0;
    var topPointer = this.rowsToDisplay.length - 1;
    // quick check, if the pixel is out of bounds, then return last row
    if (pixelToMatch <= 0) {
      // if pixel is less than or equal zero, it's always the first row
      return 0;
    }
    var lastNode = _.last(this.rowsToDisplay);
    if (lastNode.rowTop <= pixelToMatch) {
      return this.rowsToDisplay.length - 1;
    }
    while (true) {
      var midPointer = Math.floor((bottomPointer + topPointer) / 2);
      var currentRowNode = this.rowsToDisplay[midPointer];
      if (this.isRowInPixel(currentRowNode, pixelToMatch)) {
        return midPointer;
      }
      if (currentRowNode.rowTop < pixelToMatch) {
        bottomPointer = midPointer + 1;
      } else if (currentRowNode.rowTop > pixelToMatch) {
        topPointer = midPointer - 1;
      }
    }
  };
  ClientSideRowModel.prototype.isRowInPixel = function (rowNode, pixelToMatch) {
    var topPixel = rowNode.rowTop;
    var bottomPixel = rowNode.rowTop + rowNode.rowHeight;
    var pixelInRow = topPixel <= pixelToMatch && bottomPixel > pixelToMatch;
    return pixelInRow;
  };
  ClientSideRowModel.prototype.forEachLeafNode = function (callback) {
    if (this.rootNode.allLeafChildren) {
      this.rootNode.allLeafChildren.forEach(function (rowNode, index) {
        return callback(rowNode, index);
      });
    }
  };
  ClientSideRowModel.prototype.forEachNode = function (callback) {
    this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterGroup, callback, RecursionType.Normal, 0);
  };
  ClientSideRowModel.prototype.forEachNodeAfterFilter = function (callback) {
    this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterFilter, callback, RecursionType.AfterFilter, 0);
  };
  ClientSideRowModel.prototype.forEachNodeAfterFilterAndSort = function (callback) {
    this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterSort, callback, RecursionType.AfterFilterAndSort, 0);
  };
  ClientSideRowModel.prototype.forEachPivotNode = function (callback) {
    this.recursivelyWalkNodesAndCallback([this.rootNode], callback, RecursionType.PivotNodes, 0);
  };
  // iterates through each item in memory, and calls the callback function
  // nodes - the rowNodes to traverse
  // callback - the user provided callback
  // recursion type - need this to know what child nodes to recurse, eg if looking at all nodes, or filtered notes etc
  // index - works similar to the index in forEach in javascript's array function
  ClientSideRowModel.prototype.recursivelyWalkNodesAndCallback = function (nodes, callback, recursionType, index) {
    if (!nodes) {
      return index;
    }
    for (var i = 0; i < nodes.length; i++) {
      var node = nodes[i];
      callback(node, index++);
      // go to the next level if it is a group
      if (node.hasChildren()) {
        // depending on the recursion type, we pick a difference set of children
        var nodeChildren = null;
        switch (recursionType) {
          case RecursionType.Normal:
            nodeChildren = node.childrenAfterGroup;
            break;
          case RecursionType.AfterFilter:
            nodeChildren = node.childrenAfterFilter;
            break;
          case RecursionType.AfterFilterAndSort:
            nodeChildren = node.childrenAfterSort;
            break;
          case RecursionType.PivotNodes:
            // for pivot, we don't go below leafGroup levels
            nodeChildren = !node.leafGroup ? node.childrenAfterSort : null;
            break;
        }
        if (nodeChildren) {
          index = this.recursivelyWalkNodesAndCallback(nodeChildren, callback, recursionType, index);
        }
      }
    }
    return index;
  };
  // it's possible to recompute the aggregate without doing the other parts
  // + gridApi.recomputeAggregates()
  ClientSideRowModel.prototype.doAggregate = function (changedPath) {
    if (this.aggregationStage) {
      this.aggregationStage.execute({
        rowNode: this.rootNode,
        changedPath: changedPath
      });
    }
  };
  // + gridApi.expandAll()
  // + gridApi.collapseAll()
  ClientSideRowModel.prototype.expandOrCollapseAll = function (expand) {
    var usingTreeData = this.gridOptionsWrapper.isTreeData();
    if (this.rootNode) {
      recursiveExpandOrCollapse(this.rootNode.childrenAfterGroup);
    }
    function recursiveExpandOrCollapse(rowNodes) {
      if (!rowNodes) {
        return;
      }
      rowNodes.forEach(function (rowNode) {
        var shouldExpandOrCollapse = usingTreeData ? _.exists(rowNode.childrenAfterGroup) : rowNode.group;
        if (shouldExpandOrCollapse) {
          rowNode.expanded = expand;
          recursiveExpandOrCollapse(rowNode.childrenAfterGroup);
        }
      });
    }
    this.refreshModel({
      step: exports.ClientSideRowModelSteps.MAP
    });
    var eventSource = expand ? 'expandAll' : 'collapseAll';
    var event = {
      api: this.gridApi,
      columnApi: this.columnApi,
      type: Events.EVENT_EXPAND_COLLAPSE_ALL,
      source: eventSource
    };
    this.eventService.dispatchEvent(event);
  };
  ClientSideRowModel.prototype.doSort = function (rowNodeTransactions, changedPath) {
    this.sortStage.execute({
      rowNode: this.rootNode,
      rowNodeTransactions: rowNodeTransactions,
      changedPath: changedPath
    });
  };
  ClientSideRowModel.prototype.doRowGrouping = function (groupState, rowNodeTransactions, rowNodeOrder, changedPath, afterColumnsChanged) {
    if (this.groupStage) {
      if (rowNodeTransactions) {
        this.groupStage.execute({
          rowNode: this.rootNode,
          rowNodeTransactions: rowNodeTransactions,
          rowNodeOrder: rowNodeOrder,
          changedPath: changedPath
        });
      } else {
        // groups are about to get disposed, so need to deselect any that are selected
        this.selectionController.removeGroupsFromSelection();
        this.groupStage.execute({
          rowNode: this.rootNode,
          changedPath: changedPath,
          afterColumnsChanged: afterColumnsChanged
        });
        // set open/closed state on groups
        this.restoreGroupState(groupState);
      }
      if (this.gridOptionsWrapper.isGroupSelectsChildren()) {
        this.selectionController.updateGroupsFromChildrenSelections(changedPath);
      }
    } else {
      this.rootNode.childrenAfterGroup = this.rootNode.allLeafChildren;
      this.rootNode.updateHasChildren();
    }
  };
  ClientSideRowModel.prototype.restoreGroupState = function (groupState) {
    if (!groupState) {
      return;
    }
    _.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function (node, key) {
      // if the group was open last time, then open it this time. however
      // if was not open last time, then don't touch the group, so the 'groupDefaultExpanded'
      // setting will take effect.
      if (typeof groupState[key] === 'boolean') {
        node.expanded = groupState[key];
      }
    });
  };
  ClientSideRowModel.prototype.doFilter = function (changedPath) {
    this.filterStage.execute({
      rowNode: this.rootNode,
      changedPath: changedPath
    });
  };
  ClientSideRowModel.prototype.doPivot = function (changedPath) {
    if (this.pivotStage) {
      this.pivotStage.execute({
        rowNode: this.rootNode,
        changedPath: changedPath
      });
    }
  };
  ClientSideRowModel.prototype.getGroupState = function () {
    if (!this.rootNode.childrenAfterGroup || !this.gridOptionsWrapper.isRememberGroupStateWhenNewData()) {
      return null;
    }
    var result = {};
    _.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function (node, key) {
      return result[key] = node.expanded;
    });
    return result;
  };
  ClientSideRowModel.prototype.getCopyOfNodesMap = function () {
    return this.nodeManager.getCopyOfNodesMap();
  };
  ClientSideRowModel.prototype.getRowNode = function (id) {
    // although id is typed a string, this could be called by the user, and they could have passed a number
    var idIsGroup = typeof id == 'string' && id.indexOf(RowNode.ID_PREFIX_ROW_GROUP) == 0;
    if (idIsGroup) {
      // only one users complained about getRowNode not working for groups, after years of
      // this working for normal rows. so have done quick implementation. if users complain
      // about performance, then GroupStage should store / manage created groups in a map,
      // which is a chunk of work.
      var res_1 = null;
      this.forEachNode(function (node) {
        if (node.id === id) {
          res_1 = node;
        }
      });
      return res_1;
    } else {
      return this.nodeManager.getRowNode(id);
    }
  };
  // rows: the rows to put into the model
  ClientSideRowModel.prototype.setRowData = function (rowData) {
    // no need to invalidate cache, as the cache is stored on the rowNode,
    // so new rowNodes means the cache is wiped anyway.
    // remember group state, so we can expand groups that should be expanded
    var groupState = this.getGroupState();
    this.nodeManager.setRowData(rowData);
    // this event kicks off:
    // - clears selection
    // - updates filters
    // - shows 'no rows' overlay if needed
    var rowDataChangedEvent = {
      type: Events.EVENT_ROW_DATA_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(rowDataChangedEvent);
    this.refreshModel({
      step: exports.ClientSideRowModelSteps.EVERYTHING,
      groupState: groupState,
      newData: true
    });
  };
  ClientSideRowModel.prototype.batchUpdateRowData = function (rowDataTransaction, callback) {
    var _this = this;
    if (this.applyAsyncTransactionsTimeout == null) {
      this.rowDataTransactionBatch = [];
      var waitMillis = this.gridOptionsWrapper.getAsyncTransactionWaitMillis();
      this.applyAsyncTransactionsTimeout = window.setTimeout(function () {
        _this.executeBatchUpdateRowData();
      }, waitMillis);
    }
    this.rowDataTransactionBatch.push({
      rowDataTransaction: rowDataTransaction,
      callback: callback
    });
  };
  ClientSideRowModel.prototype.flushAsyncTransactions = function () {
    if (this.applyAsyncTransactionsTimeout != null) {
      clearTimeout(this.applyAsyncTransactionsTimeout);
      this.executeBatchUpdateRowData();
    }
  };
  ClientSideRowModel.prototype.executeBatchUpdateRowData = function () {
    var _this = this;
    this.valueCache.onDataChanged();
    var callbackFuncsBound = [];
    var rowNodeTrans = [];
    // The rowGroup stage uses rowNodeOrder if order was provided. if we didn't pass 'true' to
    // commonUpdateRowData, using addIndex would have no effect when grouping.
    var forceRowNodeOrder = false;
    if (this.rowDataTransactionBatch) {
      this.rowDataTransactionBatch.forEach(function (tranItem) {
        var rowNodeTran = _this.nodeManager.updateRowData(tranItem.rowDataTransaction, undefined);
        rowNodeTrans.push(rowNodeTran);
        if (tranItem.callback) {
          callbackFuncsBound.push(tranItem.callback.bind(null, rowNodeTran));
        }
        if (typeof tranItem.rowDataTransaction.addIndex === 'number') {
          forceRowNodeOrder = true;
        }
      });
    }
    this.commonUpdateRowData(rowNodeTrans, undefined, forceRowNodeOrder);
    // do callbacks in next VM turn so it's async
    if (callbackFuncsBound.length > 0) {
      window.setTimeout(function () {
        callbackFuncsBound.forEach(function (func) {
          return func();
        });
      }, 0);
    }
    if (rowNodeTrans.length > 0) {
      var event_1 = {
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        type: Events.EVENT_ASYNC_TRANSACTIONS_FLUSHED,
        results: rowNodeTrans
      };
      this.eventService.dispatchEvent(event_1);
    }
    this.rowDataTransactionBatch = null;
    this.applyAsyncTransactionsTimeout = undefined;
  };
  ClientSideRowModel.prototype.updateRowData = function (rowDataTran, rowNodeOrder) {
    this.valueCache.onDataChanged();
    var rowNodeTran = this.nodeManager.updateRowData(rowDataTran, rowNodeOrder);
    // if doing immutableData, addIndex is never present. however if doing standard transaction, and user
    // provided addIndex, then this is used in updateRowData. However if doing Enterprise, then the rowGroup
    // stage also uses the
    var forceRowNodeOrder = typeof rowDataTran.addIndex === 'number';
    this.commonUpdateRowData([rowNodeTran], rowNodeOrder, forceRowNodeOrder);
    return rowNodeTran;
  };
  ClientSideRowModel.prototype.createRowNodeOrder = function () {
    var suppressSortOrder = this.gridOptionsWrapper.isSuppressMaintainUnsortedOrder();
    if (suppressSortOrder) {
      return;
    }
    var orderMap = {};
    if (this.rootNode && this.rootNode.allLeafChildren) {
      for (var index = 0; index < this.rootNode.allLeafChildren.length; index++) {
        var node = this.rootNode.allLeafChildren[index];
        orderMap[node.id] = index;
      }
    }
    return orderMap;
  };
  // common to updateRowData and batchUpdateRowData
  ClientSideRowModel.prototype.commonUpdateRowData = function (rowNodeTrans, rowNodeOrder, forceRowNodeOrder) {
    if (forceRowNodeOrder) {
      rowNodeOrder = this.createRowNodeOrder();
    }
    this.refreshModel({
      step: exports.ClientSideRowModelSteps.EVERYTHING,
      rowNodeTransactions: rowNodeTrans,
      rowNodeOrder: rowNodeOrder,
      keepRenderedRows: true,
      animate: true,
      keepEditingRows: true
    });
    var event = {
      type: Events.EVENT_ROW_DATA_UPDATED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(event);
  };
  ClientSideRowModel.prototype.doRowsToDisplay = function () {
    this.rowsToDisplay = this.flattenStage.execute({
      rowNode: this.rootNode
    });
  };
  ClientSideRowModel.prototype.onRowHeightChanged = function () {
    this.refreshModel({
      step: exports.ClientSideRowModelSteps.MAP,
      keepRenderedRows: true,
      keepEditingRows: true
    });
  };
  ClientSideRowModel.prototype.resetRowHeights = function () {
    var atLeastOne = false;
    this.forEachNode(function (rowNode) {
      rowNode.setRowHeight(rowNode.rowHeight, true);
      // we keep the height each row is at, however we set estimated=true rather than clear the height.
      // this means the grid will not reset the row heights back to defaults, rather it will re-calc
      // the height for each row as the row is displayed. otherwise the scroll will jump when heights are reset.
      var detailNode = rowNode.detailNode;
      if (detailNode) {
        detailNode.setRowHeight(detailNode.rowHeight, true);
      }
      atLeastOne = true;
    });
    if (atLeastOne) {
      this.onRowHeightChanged();
    }
  };
  __decorate$28([Autowired('columnController')], ClientSideRowModel.prototype, "columnController", void 0);
  __decorate$28([Autowired('$scope')], ClientSideRowModel.prototype, "$scope", void 0);
  __decorate$28([Autowired('selectionController')], ClientSideRowModel.prototype, "selectionController", void 0);
  __decorate$28([Autowired('valueCache')], ClientSideRowModel.prototype, "valueCache", void 0);
  __decorate$28([Autowired('columnApi')], ClientSideRowModel.prototype, "columnApi", void 0);
  __decorate$28([Autowired('gridApi')], ClientSideRowModel.prototype, "gridApi", void 0);
  __decorate$28([Autowired('animationFrameService')], ClientSideRowModel.prototype, "animationFrameService", void 0);
  __decorate$28([Autowired('filterStage')], ClientSideRowModel.prototype, "filterStage", void 0);
  __decorate$28([Autowired('sortStage')], ClientSideRowModel.prototype, "sortStage", void 0);
  __decorate$28([Autowired('flattenStage')], ClientSideRowModel.prototype, "flattenStage", void 0);
  __decorate$28([Optional('groupStage')], ClientSideRowModel.prototype, "groupStage", void 0);
  __decorate$28([Optional('aggregationStage')], ClientSideRowModel.prototype, "aggregationStage", void 0);
  __decorate$28([Optional('pivotStage')], ClientSideRowModel.prototype, "pivotStage", void 0);
  __decorate$28([PostConstruct], ClientSideRowModel.prototype, "init", null);
  ClientSideRowModel = __decorate$28([Bean('rowModel')], ClientSideRowModel);
  return ClientSideRowModel;
}(BeanStub);
var __extends$2l =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$29 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FilterStage = /** @class */function (_super) {
  __extends$2l(FilterStage, _super);
  function FilterStage() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  FilterStage.prototype.execute = function (params) {
    var rowNode = params.rowNode,
      changedPath = params.changedPath;
    this.filterService.filter(changedPath);
    this.selectableService.updateSelectableAfterFiltering(rowNode);
  };
  __decorate$29([Autowired('selectableService')], FilterStage.prototype, "selectableService", void 0);
  __decorate$29([Autowired('filterService')], FilterStage.prototype, "filterService", void 0);
  FilterStage = __decorate$29([Bean('filterStage')], FilterStage);
  return FilterStage;
}(BeanStub);
var __extends$2m =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2a =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SortStage = /** @class */function (_super) {
  __extends$2m(SortStage, _super);
  function SortStage() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  SortStage.prototype.execute = function (params) {
    var sortOptions = this.sortController.getSortOptions();
    var sortActive = _.exists(sortOptions) && sortOptions.length > 0;
    var deltaSort = sortActive && _.exists(params.rowNodeTransactions)
    // in time we can remove this check, so that delta sort is always
    // on if transactions are present. it's off for now so that we can
    // selectively turn it on and test it with some select users before
    // rolling out to everyone.
    && this.gridOptionsWrapper.isDeltaSort();
    // we only need dirty nodes if doing delta sort
    var dirtyLeafNodes = deltaSort ? this.calculateDirtyNodes(params.rowNodeTransactions) : null;
    var valueColumns = this.columnController.getValueColumns();
    var noAggregations = _.missingOrEmpty(valueColumns);
    this.sortService.sort(sortOptions, sortActive, deltaSort, dirtyLeafNodes, params.changedPath, noAggregations);
  };
  SortStage.prototype.calculateDirtyNodes = function (rowNodeTransactions) {
    var dirtyNodes = {};
    var addNodesFunc = function (rowNodes) {
      if (rowNodes) {
        rowNodes.forEach(function (rowNode) {
          return dirtyNodes[rowNode.id] = true;
        });
      }
    };
    // all leaf level nodes in the transaction were impacted
    if (rowNodeTransactions) {
      rowNodeTransactions.forEach(function (tran) {
        addNodesFunc(tran.add);
        addNodesFunc(tran.update);
        addNodesFunc(tran.remove);
      });
    }
    return dirtyNodes;
  };
  __decorate$2a([Autowired('sortService')], SortStage.prototype, "sortService", void 0);
  __decorate$2a([Autowired('sortController')], SortStage.prototype, "sortController", void 0);
  __decorate$2a([Autowired('columnController')], SortStage.prototype, "columnController", void 0);
  SortStage = __decorate$2a([Bean('sortStage')], SortStage);
  return SortStage;
}(BeanStub);
var __extends$2n =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2b =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FlattenStage = /** @class */function (_super) {
  __extends$2n(FlattenStage, _super);
  function FlattenStage() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  FlattenStage.prototype.execute = function (params) {
    var rootNode = params.rowNode;
    // even if not doing grouping, we do the mapping, as the client might
    // of passed in data that already has a grouping in it somewhere
    var result = [];
    // putting value into a wrapper so it's passed by reference
    var nextRowTop = {
      value: 0
    };
    var skipLeafNodes = this.columnController.isPivotMode();
    // if we are reducing, and not grouping, then we want to show the root node, as that
    // is where the pivot values are
    var showRootNode = skipLeafNodes && rootNode.leafGroup;
    var topList = showRootNode ? [rootNode] : rootNode.childrenAfterSort;
    this.recursivelyAddToRowsToDisplay(topList, result, nextRowTop, skipLeafNodes, 0);
    // we do not want the footer total if the gris is empty
    var atLeastOneRowPresent = result.length > 0;
    var includeGroupTotalFooter = !showRootNode
    // don't show total footer when showRootNode is true (i.e. in pivot mode and no groups)
    && atLeastOneRowPresent && this.gridOptionsWrapper.isGroupIncludeTotalFooter();
    if (includeGroupTotalFooter) {
      this.ensureFooterNodeExists(rootNode);
      this.addRowNodeToRowsToDisplay(rootNode.sibling, result, nextRowTop, 0);
    }
    return result;
  };
  FlattenStage.prototype.recursivelyAddToRowsToDisplay = function (rowsToFlatten, result, nextRowTop, skipLeafNodes, uiLevel) {
    if (_.missingOrEmpty(rowsToFlatten)) {
      return;
    }
    var hideOpenParents = this.gridOptionsWrapper.isGroupHideOpenParents();
    // these two are mutually exclusive, so if first set, we don't set the second
    var groupRemoveSingleChildren = this.gridOptionsWrapper.isGroupRemoveSingleChildren();
    var groupRemoveLowestSingleChildren = !groupRemoveSingleChildren && this.gridOptionsWrapper.isGroupRemoveLowestSingleChildren();
    for (var i = 0; i < rowsToFlatten.length; i++) {
      var rowNode = rowsToFlatten[i];
      // check all these cases, for working out if this row should be included in the final mapped list
      var isParent = rowNode.hasChildren();
      var isSkippedLeafNode = skipLeafNodes && !isParent;
      var isRemovedSingleChildrenGroup = groupRemoveSingleChildren && isParent && rowNode.childrenAfterGroup.length === 1;
      var isRemovedLowestSingleChildrenGroup = groupRemoveLowestSingleChildren && isParent && rowNode.leafGroup && rowNode.childrenAfterGroup.length === 1;
      // hide open parents means when group is open, we don't show it. we also need to make sure the
      // group is expandable in the first place (as leaf groups are not expandable if pivot mode is on).
      // the UI will never allow expanding leaf  groups, however the user might via the API (or menu option 'expand all')
      var neverAllowToExpand = skipLeafNodes && rowNode.leafGroup;
      var isHiddenOpenParent = hideOpenParents && rowNode.expanded && !neverAllowToExpand;
      var thisRowShouldBeRendered = !isSkippedLeafNode && !isHiddenOpenParent && !isRemovedSingleChildrenGroup && !isRemovedLowestSingleChildrenGroup;
      if (thisRowShouldBeRendered) {
        this.addRowNodeToRowsToDisplay(rowNode, result, nextRowTop, uiLevel);
      }
      // if we are pivoting, we never map below the leaf group
      if (skipLeafNodes && rowNode.leafGroup) {
        continue;
      }
      if (isParent) {
        var excludedParent = isRemovedSingleChildrenGroup || isRemovedLowestSingleChildrenGroup;
        // we traverse the group if it is expended, however we always traverse if the parent node
        // was removed (as the group will never be opened if it is not displayed, we show the children instead)
        if (rowNode.expanded || excludedParent) {
          // if the parent was excluded, then ui level is that of the parent
          var uiLevelForChildren = excludedParent ? uiLevel : uiLevel + 1;
          this.recursivelyAddToRowsToDisplay(rowNode.childrenAfterSort, result, nextRowTop, skipLeafNodes, uiLevelForChildren);
          // put a footer in if user is looking for it
          if (this.gridOptionsWrapper.isGroupIncludeFooter()) {
            this.ensureFooterNodeExists(rowNode);
            this.addRowNodeToRowsToDisplay(rowNode.sibling, result, nextRowTop, uiLevel);
          }
        }
      } else if (rowNode.master && rowNode.expanded) {
        var detailNode = this.createDetailNode(rowNode);
        this.addRowNodeToRowsToDisplay(detailNode, result, nextRowTop, uiLevel);
      }
    }
  };
  // duplicated method, it's also in floatingRowModel
  FlattenStage.prototype.addRowNodeToRowsToDisplay = function (rowNode, result, nextRowTop, uiLevel) {
    var isGroupMultiAutoColumn = this.gridOptionsWrapper.isGroupMultiAutoColumn();
    result.push(rowNode);
    rowNode.setUiLevel(isGroupMultiAutoColumn ? 0 : uiLevel);
  };
  FlattenStage.prototype.ensureFooterNodeExists = function (groupNode) {
    // only create footer node once, otherwise we have daemons and
    // the animate screws up with the daemons hanging around
    if (_.exists(groupNode.sibling)) {
      return;
    }
    var footerNode = new RowNode();
    this.context.createBean(footerNode);
    Object.keys(groupNode).forEach(function (key) {
      footerNode[key] = groupNode[key];
    });
    footerNode.footer = true;
    footerNode.setRowTop(null);
    footerNode.setRowIndex(null);
    // manually set oldRowTop to null so we discard any
    // previous information about its position.
    footerNode.oldRowTop = null;
    if (_.exists(footerNode.id)) {
      footerNode.id = 'rowGroupFooter_' + footerNode.id;
    }
    // get both header and footer to reference each other as siblings. this is never undone,
    // only overwritten. so if a group is expanded, then contracted, it will have a ghost
    // sibling - but that's fine, as we can ignore this if the header is contracted.
    footerNode.sibling = groupNode;
    groupNode.sibling = footerNode;
  };
  FlattenStage.prototype.createDetailNode = function (masterNode) {
    if (_.exists(masterNode.detailNode)) {
      return masterNode.detailNode;
    }
    var detailNode = new RowNode();
    this.context.createBean(detailNode);
    detailNode.detail = true;
    detailNode.selectable = false;
    detailNode.parent = masterNode;
    if (_.exists(masterNode.id)) {
      detailNode.id = 'detail_' + masterNode.id;
    }
    detailNode.data = masterNode.data;
    detailNode.level = masterNode.level + 1;
    masterNode.detailNode = detailNode;
    return detailNode;
  };
  __decorate$2b([Autowired('columnController')], FlattenStage.prototype, "columnController", void 0);
  FlattenStage = __decorate$2b([Bean('flattenStage')], FlattenStage);
  return FlattenStage;
}(BeanStub);
var __extends$2o =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2c =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SortService = /** @class */function (_super) {
  __extends$2o(SortService, _super);
  function SortService() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  SortService.prototype.init = function () {
    this.postSortFunc = this.gridOptionsWrapper.getPostSortFunc();
  };
  SortService.prototype.sort = function (sortOptions, sortActive, deltaSort, dirtyLeafNodes, changedPath, noAggregations) {
    var _this = this;
    var callback = function (rowNode) {
      // we clear out the 'pull down open parents' first, as the values mix up the sorting
      _this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterFilter, true);
      // Javascript sort is non deterministic when all the array items are equals, ie Comparator always returns 0,
      // so to ensure the array keeps its order, add an additional sorting condition manually, in this case we
      // are going to inspect the original array position. This is what sortedRowNodes is for.
      if (sortActive) {
        rowNode.childrenAfterSort = deltaSort ? _this.doDeltaSort(rowNode, sortOptions, dirtyLeafNodes, changedPath, noAggregations) : _this.rowNodeSorter.doFullSort(rowNode.childrenAfterFilter, sortOptions);
      } else {
        rowNode.childrenAfterSort = rowNode.childrenAfterFilter.slice(0);
      }
      _this.updateChildIndexes(rowNode);
      if (_this.postSortFunc) {
        _this.postSortFunc(rowNode.childrenAfterSort);
      }
    };
    if (changedPath) {
      changedPath.forEachChangedNodeDepthFirst(callback);
    }
    this.updateGroupDataForHiddenOpenParents(changedPath);
  };
  SortService.prototype.mapNodeToSortedNode = function (rowNode, pos) {
    return {
      currentPos: pos,
      rowNode: rowNode
    };
  };
  SortService.prototype.doDeltaSort = function (rowNode, sortOptions, dirtyLeafNodes, changedPath, noAggregations) {
    // clean nodes will be a list of all row nodes that remain in the set
    // and ordered. we start with the old sorted set and take out any nodes
    // that were removed or changed (but not added, added doesn't make sense,
    // if a node was added, there is no way it could be here from last time).
    var cleanNodes = rowNode.childrenAfterSort.filter(function (node) {
      // take out all nodes that were changed as part of the current transaction.
      // a changed node could a) be in a different sort position or b) may
      // no longer be in this set as the changed node may not pass filtering,
      // or be in a different group.
      var passesDirtyNodesCheck = !dirtyLeafNodes[node.id];
      // also remove group nodes in the changed path, as they can have different aggregate
      // values which could impact the sort order.
      // note: changed path is not active if a) no value columns or b) no transactions. it is never
      // (b) in deltaSort as we only do deltaSort for transactions. for (a) if no value columns, then
      // there is no value in the group that could of changed (ie no aggregate values)
      var passesChangedPathCheck = noAggregations || changedPath && changedPath.canSkip(node);
      return passesDirtyNodesCheck && passesChangedPathCheck;
    }).map(this.mapNodeToSortedNode.bind(this));
    // for fast access below, we map them
    var cleanNodesMapped = {};
    cleanNodes.forEach(function (sortedRowNode) {
      return cleanNodesMapped[sortedRowNode.rowNode.id] = sortedRowNode.rowNode;
    });
    // these are all nodes that need to be placed
    var changedNodes = rowNode.childrenAfterFilter
    // ignore nodes in the clean list
    .filter(function (node) {
      return !cleanNodesMapped[node.id];
    }).map(this.mapNodeToSortedNode.bind(this));
    // sort changed nodes. note that we don't need to sort cleanNodes as they are
    // already sorted from last time.
    changedNodes.sort(this.rowNodeSorter.compareRowNodes.bind(this, sortOptions));
    var result;
    if (changedNodes.length === 0) {
      result = cleanNodes;
    } else if (cleanNodes.length === 0) {
      result = changedNodes;
    } else {
      result = this.mergeSortedArrays(sortOptions, cleanNodes, changedNodes);
    }
    return result.map(function (item) {
      return item.rowNode;
    });
  };
  // Merge two sorted arrays into each other
  SortService.prototype.mergeSortedArrays = function (sortOptions, arr1, arr2) {
    var res = [];
    var i = 0;
    var j = 0;
    // Traverse both array, adding them in order
    while (i < arr1.length && j < arr2.length) {
      // Check if current element of first
      // array is smaller than current element
      // of second array. If yes, store first
      // array element and increment first array
      // index. Otherwise do same with second array
      var compareResult = this.rowNodeSorter.compareRowNodes(sortOptions, arr1[i], arr2[j]);
      if (compareResult < 0) {
        res.push(arr1[i++]);
      } else {
        res.push(arr2[j++]);
      }
    }
    // add remaining from arr1
    while (i < arr1.length) {
      res.push(arr1[i++]);
    }
    // add remaining from arr2
    while (j < arr2.length) {
      res.push(arr2[j++]);
    }
    return res;
  };
  SortService.prototype.updateChildIndexes = function (rowNode) {
    if (_.missing(rowNode.childrenAfterSort)) {
      return;
    }
    var listToSort = rowNode.childrenAfterSort;
    for (var i = 0; i < listToSort.length; i++) {
      var child = listToSort[i];
      var firstChild = i === 0;
      var lastChild = i === rowNode.childrenAfterSort.length - 1;
      child.setFirstChild(firstChild);
      child.setLastChild(lastChild);
      child.setChildIndex(i);
    }
  };
  SortService.prototype.updateGroupDataForHiddenOpenParents = function (changedPath) {
    var _this = this;
    if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {
      return;
    }
    // recurse breadth first over group nodes after sort to 'pull down' group data to child groups
    var callback = function (rowNode) {
      _this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterSort, false);
      rowNode.childrenAfterSort.forEach(function (child) {
        if (child.hasChildren()) {
          callback(child);
        }
      });
    };
    if (changedPath) {
      changedPath.executeFromRootNode(function (rowNode) {
        return callback(rowNode);
      });
    }
  };
  SortService.prototype.pullDownGroupDataForHideOpenParents = function (rowNodes, clearOperation) {
    var _this = this;
    if (!this.gridOptionsWrapper.isGroupHideOpenParents() || _.missing(rowNodes)) {
      return;
    }
    rowNodes.forEach(function (childRowNode) {
      var groupDisplayCols = _this.columnController.getGroupDisplayColumns();
      groupDisplayCols.forEach(function (groupDisplayCol) {
        var showRowGroup = groupDisplayCol.getColDef().showRowGroup;
        if (typeof showRowGroup !== 'string') {
          console.error('AG Grid: groupHideOpenParents only works when specifying specific columns for colDef.showRowGroup');
          return;
        }
        var displayingGroupKey = showRowGroup;
        var rowGroupColumn = _this.columnController.getPrimaryColumn(displayingGroupKey);
        var thisRowNodeMatches = rowGroupColumn === childRowNode.rowGroupColumn;
        if (thisRowNodeMatches) {
          return;
        }
        if (clearOperation) {
          // if doing a clear operation, we clear down the value for every possible group column
          childRowNode.setGroupValue(groupDisplayCol.getId(), null);
        } else {
          // if doing a set operation, we set only where the pull down is to occur
          var parentToStealFrom = childRowNode.getFirstChildOfFirstChild(rowGroupColumn);
          if (parentToStealFrom) {
            childRowNode.setGroupValue(groupDisplayCol.getId(), parentToStealFrom.key);
          }
        }
      });
    });
  };
  __decorate$2c([Autowired('columnController')], SortService.prototype, "columnController", void 0);
  __decorate$2c([Autowired('rowNodeSorter')], SortService.prototype, "rowNodeSorter", void 0);
  __decorate$2c([PostConstruct], SortService.prototype, "init", null);
  SortService = __decorate$2c([Bean('sortService')], SortService);
  return SortService;
}(BeanStub);
var __extends$2p =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2d =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FilterService = /** @class */function (_super) {
  __extends$2p(FilterService, _super);
  function FilterService() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  FilterService.prototype.postConstruct = function () {
    this.doingTreeData = this.gridOptionsWrapper.isTreeData();
  };
  FilterService.prototype.filter = function (changedPath) {
    var filterActive = this.filterManager.isAnyFilterPresent();
    this.filterNodes(filterActive, changedPath);
  };
  FilterService.prototype.filterNodes = function (filterActive, changedPath) {
    var _this = this;
    var filterCallback = function (rowNode, includeChildNodes) {
      // recursively get all children that are groups to also filter
      if (rowNode.hasChildren()) {
        // result of filter for this node. when filtering tree data, includeChildNodes = true when parent passes
        if (filterActive && !includeChildNodes) {
          rowNode.childrenAfterFilter = rowNode.childrenAfterGroup.filter(function (childNode) {
            // a group is included in the result if it has any children of it's own.
            // by this stage, the child groups are already filtered
            var passBecauseChildren = childNode.childrenAfterFilter && childNode.childrenAfterFilter.length > 0;
            // both leaf level nodes and tree data nodes have data. these get added if
            // the data passes the filter
            var passBecauseDataPasses = childNode.data && _this.filterManager.doesRowPassFilter({
              rowNode: childNode
            });
            // note - tree data nodes pass either if a) they pass themselves or b) any children of that node pass
            return passBecauseChildren || passBecauseDataPasses;
          });
        } else {
          // if not filtering, the result is the original list
          rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;
        }
        _this.setAllChildrenCount(rowNode);
      } else {
        rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;
        rowNode.setAllChildrenCount(null);
      }
    };
    if (this.doingTreeDataFiltering()) {
      var treeDataDepthFirstFilter_1 = function (rowNode, alreadyFoundInParent) {
        // tree data filter traverses the hierarchy depth first and includes child nodes if parent passes
        // filter, and parent nodes will be include if any children exist.
        if (rowNode.childrenAfterGroup) {
          for (var i = 0; i < rowNode.childrenAfterGroup.length; i++) {
            var childNode = rowNode.childrenAfterGroup[i];
            // first check if current node passes filter before invoking child nodes
            var foundInParent = alreadyFoundInParent || _this.filterManager.doesRowPassFilter({
              rowNode: childNode
            });
            if (childNode.childrenAfterGroup) {
              treeDataDepthFirstFilter_1(rowNode.childrenAfterGroup[i], foundInParent);
            } else {
              filterCallback(childNode, foundInParent);
            }
          }
        }
        filterCallback(rowNode, alreadyFoundInParent);
      };
      var treeDataFilterCallback = function (rowNode) {
        return treeDataDepthFirstFilter_1(rowNode, false);
      };
      changedPath.executeFromRootNode(treeDataFilterCallback);
    } else {
      var defaultFilterCallback = function (rowNode) {
        return filterCallback(rowNode, false);
      };
      changedPath.forEachChangedNodeDepthFirst(defaultFilterCallback, true);
    }
  };
  FilterService.prototype.setAllChildrenCountTreeData = function (rowNode) {
    // for tree data, we include all children, groups and leafs
    var allChildrenCount = 0;
    rowNode.childrenAfterFilter.forEach(function (child) {
      // include child itself
      allChildrenCount++;
      // include children of children
      allChildrenCount += child.allChildrenCount;
    });
    rowNode.setAllChildrenCount(allChildrenCount);
  };
  FilterService.prototype.setAllChildrenCountGridGrouping = function (rowNode) {
    // for grid data, we only count the leafs
    var allChildrenCount = 0;
    rowNode.childrenAfterFilter.forEach(function (child) {
      if (child.group) {
        allChildrenCount += child.allChildrenCount;
      } else {
        allChildrenCount++;
      }
    });
    rowNode.setAllChildrenCount(allChildrenCount);
  };
  FilterService.prototype.setAllChildrenCount = function (rowNode) {
    if (this.doingTreeData) {
      this.setAllChildrenCountTreeData(rowNode);
    } else {
      this.setAllChildrenCountGridGrouping(rowNode);
    }
  };
  FilterService.prototype.doingTreeDataFiltering = function () {
    return this.gridOptionsWrapper.isTreeData() && !this.gridOptionsWrapper.isExcludeChildrenWhenTreeDataFiltering();
  };
  __decorate$2d([Autowired('filterManager')], FilterService.prototype, "filterManager", void 0);
  __decorate$2d([PostConstruct], FilterService.prototype, "postConstruct", null);
  FilterService = __decorate$2d([Bean("filterService")], FilterService);
  return FilterService;
}(BeanStub);
var __extends$2q =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2e =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ImmutableService = /** @class */function (_super) {
  __extends$2q(ImmutableService, _super);
  function ImmutableService() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ImmutableService.prototype.postConstruct = function () {
    if (this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
      this.clientSideRowModel = this.rowModel;
    }
  };
  // converts the setRowData() command to a transaction
  ImmutableService.prototype.createTransactionForRowData = function (data) {
    if (_.missing(this.clientSideRowModel)) {
      console.error('AG Grid: ImmutableService only works with ClientSideRowModel');
      return;
    }
    var getRowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();
    if (!getRowNodeIdFunc || _.missing(getRowNodeIdFunc)) {
      console.error('AG Grid: ImmutableService requires getRowNodeId() callback to be implemented, your row data need IDs!');
      return;
    }
    // convert the data into a transaction object by working out adds, removes and updates
    var transaction = {
      remove: [],
      update: [],
      add: []
    };
    var existingNodesMap = this.clientSideRowModel.getCopyOfNodesMap();
    var suppressSortOrder = this.gridOptionsWrapper.isSuppressMaintainUnsortedOrder();
    var orderMap = suppressSortOrder ? null : {};
    if (_.exists(data)) {
      // split all the new data in the following:
      // if new, push to 'add'
      // if update, push to 'update'
      // if not changed, do not include in the transaction
      data.forEach(function (dataItem, index) {
        var id = getRowNodeIdFunc(dataItem);
        var existingNode = existingNodesMap[id];
        if (orderMap) {
          orderMap[id] = index;
        }
        if (existingNode) {
          var dataHasChanged = existingNode.data !== dataItem;
          if (dataHasChanged) {
            transaction.update.push(dataItem);
          }
          // otherwise, if data not changed, we just don't include it anywhere, as it's not a delta
          // remove from list, so we know the item is not to be removed
          existingNodesMap[id] = undefined;
        } else {
          transaction.add.push(dataItem);
        }
      });
    }
    // at this point, all rows that are left, should be removed
    _.iterateObject(existingNodesMap, function (id, rowNode) {
      if (rowNode) {
        transaction.remove.push(rowNode.data);
      }
    });
    return [transaction, orderMap];
  };
  __decorate$2e([Autowired('rowModel')], ImmutableService.prototype, "rowModel", void 0);
  __decorate$2e([PostConstruct], ImmutableService.prototype, "postConstruct", null);
  ImmutableService = __decorate$2e([Bean('immutableService')], ImmutableService);
  return ImmutableService;
}(BeanStub);
var ClientSideRowModelModule = {
  moduleName: exports.ModuleNames.ClientSideRowModelModule,
  beans: [FilterStage, SortStage, FlattenStage, SortService, FilterService, ImmutableService],
  rowModels: {
    clientSide: ClientSideRowModel
  }
};
var __extends$2r =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2f =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var InfiniteBlock = /** @class */function (_super) {
  __extends$2r(InfiniteBlock, _super);
  function InfiniteBlock(id, parentCache, params) {
    var _this = _super.call(this, id) || this;
    _this.parentCache = parentCache;
    _this.params = params;
    // we don't need to calculate these now, as the inputs don't change,
    // however it makes the code easier to read if we work them out up front
    _this.startRow = id * params.blockSize;
    _this.endRow = _this.startRow + params.blockSize;
    return _this;
  }
  InfiniteBlock.prototype.postConstruct = function () {
    this.createRowNodes();
  };
  InfiniteBlock.prototype.getBlockStateJson = function () {
    return {
      id: '' + this.getId(),
      state: {
        blockNumber: this.getId(),
        startRow: this.getStartRow(),
        endRow: this.getEndRow(),
        pageStatus: this.getState()
      }
    };
  };
  InfiniteBlock.prototype.setDataAndId = function (rowNode, data, index) {
    if (_.exists(data)) {
      // this means if the user is not providing id's we just use the
      // index for the row. this will allow selection to work (that is based
      // on index) as long user is not inserting or deleting rows,
      // or wanting to keep selection between server side sorting or filtering
      rowNode.setDataAndId(data, index.toString());
    } else {
      rowNode.setDataAndId(undefined, undefined);
    }
  };
  InfiniteBlock.prototype.loadFromDatasource = function () {
    var _this = this;
    var params = this.createLoadParams();
    if (_.missing(this.params.datasource.getRows)) {
      console.warn("AG Grid: datasource is missing getRows method");
      return;
    }
    // put in timeout, to force result to be async
    window.setTimeout(function () {
      _this.params.datasource.getRows(params);
    }, 0);
  };
  InfiniteBlock.prototype.processServerFail = function () {
    // todo - this method has better handling in SSRM
  };
  InfiniteBlock.prototype.createLoadParams = function () {
    // PROBLEM . . . . when the user sets sort via colDef.sort, then this code
    // is executing before the sort is set up, so server is not getting the sort
    // model. need to change with regards order - so the server side request is
    // AFTER thus it gets the right sort model.
    var params = {
      startRow: this.getStartRow(),
      endRow: this.getEndRow(),
      successCallback: this.pageLoaded.bind(this, this.getVersion()),
      failCallback: this.pageLoadFailed.bind(this, this.getVersion()),
      sortModel: this.params.sortModel,
      filterModel: this.params.filterModel,
      context: this.gridOptionsWrapper.getContext()
    };
    return params;
  };
  InfiniteBlock.prototype.forEachNode = function (callback, sequence, rowCount) {
    var _this = this;
    this.rowNodes.forEach(function (rowNode, index) {
      var rowIndex = _this.startRow + index;
      if (rowIndex < rowCount) {
        callback(rowNode, sequence.next());
      }
    });
  };
  InfiniteBlock.prototype.getLastAccessed = function () {
    return this.lastAccessed;
  };
  InfiniteBlock.prototype.getRow = function (rowIndex, dontTouchLastAccessed) {
    if (dontTouchLastAccessed === void 0) {
      dontTouchLastAccessed = false;
    }
    if (!dontTouchLastAccessed) {
      this.lastAccessed = this.params.lastAccessedSequence.next();
    }
    var localIndex = rowIndex - this.startRow;
    return this.rowNodes[localIndex];
  };
  InfiniteBlock.prototype.getStartRow = function () {
    return this.startRow;
  };
  InfiniteBlock.prototype.getEndRow = function () {
    return this.endRow;
  };
  // creates empty row nodes, data is missing as not loaded yet
  InfiniteBlock.prototype.createRowNodes = function () {
    this.rowNodes = [];
    for (var i = 0; i < this.params.blockSize; i++) {
      var rowIndex = this.startRow + i;
      var rowNode = this.getContext().createBean(new RowNode());
      rowNode.setRowHeight(this.params.rowHeight);
      rowNode.uiLevel = 0;
      rowNode.setRowIndex(rowIndex);
      rowNode.setRowTop(this.params.rowHeight * rowIndex);
      this.rowNodes.push(rowNode);
    }
  };
  InfiniteBlock.prototype.processServerResult = function (params) {
    var _this = this;
    this.rowNodes.forEach(function (rowNode, index) {
      var data = params.rowData ? params.rowData[index] : undefined;
      _this.setDataAndId(rowNode, data, _this.startRow + index);
    });
    var finalRowCount = params.rowCount != null && params.rowCount >= 0 ? params.rowCount : undefined;
    this.parentCache.pageLoaded(this, finalRowCount);
  };
  InfiniteBlock.prototype.destroyRowNodes = function () {
    this.rowNodes.forEach(function (rowNode) {
      // this is needed, so row render knows to fade out the row, otherwise it
      // sees row top is present, and thinks the row should be shown.
      rowNode.clearRowTopAndRowIndex();
    });
  };
  __decorate$2f([PostConstruct], InfiniteBlock.prototype, "postConstruct", null);
  __decorate$2f([PreDestroy], InfiniteBlock.prototype, "destroyRowNodes", null);
  return InfiniteBlock;
}(RowNodeBlock);
var __extends$2s =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2g =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param$b =  false || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};
var InfiniteCache = /** @class */function (_super) {
  __extends$2s(InfiniteCache, _super);
  function InfiniteCache(params) {
    var _this = _super.call(this) || this;
    _this.lastRowIndexKnown = false;
    _this.blocks = {};
    _this.blockCount = 0;
    _this.rowCount = params.initialRowCount;
    _this.params = params;
    return _this;
  }
  InfiniteCache.prototype.setBeans = function (loggerFactory) {
    this.logger = loggerFactory.create('InfiniteCache');
  };
  // the rowRenderer will not pass dontCreatePage, meaning when rendering the grid,
  // it will want new pages in the cache as it asks for rows. only when we are inserting /
  // removing rows via the api is dontCreatePage set, where we move rows between the pages.
  InfiniteCache.prototype.getRow = function (rowIndex, dontCreatePage) {
    if (dontCreatePage === void 0) {
      dontCreatePage = false;
    }
    var blockId = Math.floor(rowIndex / this.params.blockSize);
    var block = this.blocks[blockId];
    if (!block) {
      if (dontCreatePage) {
        return null;
      }
      block = this.createBlock(blockId);
    }
    return block.getRow(rowIndex);
  };
  InfiniteCache.prototype.createBlock = function (blockNumber) {
    var newBlock = this.createBean(new InfiniteBlock(blockNumber, this, this.params));
    this.blocks[newBlock.getId()] = newBlock;
    this.blockCount++;
    this.purgeBlocksIfNeeded(newBlock);
    this.params.rowNodeBlockLoader.addBlock(newBlock);
    return newBlock;
  };
  // we have this on infinite row model only, not server side row model,
  // because for server side, it would leave the children in inconsistent
  // state - eg if a node had children, but after the refresh it had data
  // for a different row, then the children would be with the wrong row node.
  InfiniteCache.prototype.refreshCache = function () {
    var nothingToRefresh = this.blockCount == 0;
    if (nothingToRefresh) {
      this.purgeCache();
      return;
    }
    this.getBlocksInOrder().forEach(function (block) {
      return block.setStateWaitingToLoad();
    });
    this.params.rowNodeBlockLoader.checkBlockToLoad();
  };
  InfiniteCache.prototype.destroyAllBlocks = function () {
    var _this = this;
    this.getBlocksInOrder().forEach(function (block) {
      return _this.destroyBlock(block);
    });
  };
  InfiniteCache.prototype.getRowCount = function () {
    return this.rowCount;
  };
  InfiniteCache.prototype.isLastRowIndexKnown = function () {
    return this.lastRowIndexKnown;
  };
  // block calls this, when page loaded
  InfiniteCache.prototype.pageLoaded = function (block, lastRow) {
    // if we are not active, then we ignore all events, otherwise we could end up getting the
    // grid to refresh even though we are no longer the active cache
    if (!this.isAlive()) {
      return;
    }
    this.logger.log("onPageLoaded: page = " + block.getId() + ", lastRow = " + lastRow);
    this.checkRowCount(block, lastRow);
    // we fire cacheUpdated even if the row count has not changed, as some items need updating even
    // if no new rows to render. for example the pagination panel has '?' as the total rows when loading
    // is underway, which would need to get updated when loading finishes.
    this.onCacheUpdated();
  };
  InfiniteCache.prototype.purgeBlocksIfNeeded = function (blockToExclude) {
    var _this = this;
    // we exclude checking for the page just created, as this has yet to be accessed and hence
    // the lastAccessed stamp will not be updated for the first time yet
    var blocksForPurging = this.getBlocksInOrder().filter(function (b) {
      return b != blockToExclude;
    });
    var lastAccessedComparator = function (a, b) {
      return b.getLastAccessed() - a.getLastAccessed();
    };
    blocksForPurging.sort(lastAccessedComparator);
    // we remove (maxBlocksInCache - 1) as we already excluded the 'just created' page.
    // in other words, after the splice operation below, we have taken out the blocks
    // we want to keep, which means we are left with blocks that we can potentially purge
    var maxBlocksProvided = this.params.maxBlocksInCache > 0;
    var blocksToKeep = maxBlocksProvided ? this.params.maxBlocksInCache - 1 : null;
    var emptyBlocksToKeep = InfiniteCache.MAX_EMPTY_BLOCKS_TO_KEEP - 1;
    blocksForPurging.forEach(function (block, index) {
      var purgeBecauseBlockEmpty = block.getState() === InfiniteBlock.STATE_WAITING_TO_LOAD && index >= emptyBlocksToKeep;
      var purgeBecauseCacheFull = maxBlocksProvided ? index >= blocksToKeep : false;
      if (purgeBecauseBlockEmpty || purgeBecauseCacheFull) {
        // if the block currently has rows been displayed, then don't remove it either.
        // this can happen if user has maxBlocks=2, and blockSize=5 (thus 10 max rows in cache)
        // but the screen is showing 20 rows, so at least 4 blocks are needed.
        if (_this.isBlockCurrentlyDisplayed(block)) {
          return;
        }
        // don't want to loose keyboard focus, so keyboard navigation can continue. so keep focused blocks.
        if (_this.isBlockFocused(block)) {
          return;
        }
        // at this point, block is not needed, so burn baby burn
        _this.removeBlockFromCache(block);
      }
    });
  };
  InfiniteCache.prototype.isBlockFocused = function (block) {
    var focusedCell = this.focusController.getFocusCellToUseAfterRefresh();
    if (!focusedCell) {
      return false;
    }
    if (focusedCell.rowPinned != null) {
      return false;
    }
    var blockIndexStart = block.getStartRow();
    var blockIndexEnd = block.getEndRow();
    var hasFocus = focusedCell.rowIndex >= blockIndexStart && focusedCell.rowIndex < blockIndexEnd;
    return hasFocus;
  };
  InfiniteCache.prototype.isBlockCurrentlyDisplayed = function (block) {
    var startIndex = block.getStartRow();
    var endIndex = block.getEndRow() - 1;
    return this.rowRenderer.isRangeInRenderedViewport(startIndex, endIndex);
  };
  InfiniteCache.prototype.removeBlockFromCache = function (blockToRemove) {
    if (!blockToRemove) {
      return;
    }
    this.destroyBlock(blockToRemove);
    // we do not want to remove the 'loaded' event listener, as the
    // concurrent loads count needs to be updated when the load is complete
    // if the purged page is in loading state
  };

  InfiniteCache.prototype.checkRowCount = function (block, lastRow) {
    // if client provided a last row, we always use it, as it could change between server calls
    // if user deleted data and then called refresh on the grid.
    if (typeof lastRow === 'number' && lastRow >= 0) {
      this.rowCount = lastRow;
      this.lastRowIndexKnown = true;
    } else if (!this.lastRowIndexKnown) {
      // otherwise, see if we need to add some virtual rows
      var lastRowIndex = (block.getId() + 1) * this.params.blockSize;
      var lastRowIndexPlusOverflow = lastRowIndex + this.params.overflowSize;
      if (this.rowCount < lastRowIndexPlusOverflow) {
        this.rowCount = lastRowIndexPlusOverflow;
      }
    }
  };
  InfiniteCache.prototype.setRowCount = function (rowCount, lastRowIndexKnown) {
    this.rowCount = rowCount;
    // if undefined is passed, we do not set this value, if one of {true,false}
    // is passed, we do set the value.
    if (_.exists(lastRowIndexKnown)) {
      this.lastRowIndexKnown = lastRowIndexKnown;
    }
    // if we are still searching, then the row count must not end at the end
    // of a particular page, otherwise the searching will not pop into the
    // next page
    if (!this.lastRowIndexKnown) {
      if (this.rowCount % this.params.blockSize === 0) {
        this.rowCount++;
      }
    }
    this.onCacheUpdated();
  };
  InfiniteCache.prototype.forEachNodeDeep = function (callback) {
    var _this = this;
    var sequence = new NumberSequence();
    this.getBlocksInOrder().forEach(function (block) {
      return block.forEachNode(callback, sequence, _this.rowCount);
    });
  };
  InfiniteCache.prototype.getBlocksInOrder = function () {
    // get all page id's as NUMBERS (not strings, as we need to sort as numbers) and in descending order
    var blockComparator = function (a, b) {
      return a.getId() - b.getId();
    };
    var blocks = _.getAllValuesInObject(this.blocks).sort(blockComparator);
    return blocks;
  };
  InfiniteCache.prototype.destroyBlock = function (block) {
    delete this.blocks[block.getId()];
    this.destroyBean(block);
    this.blockCount--;
    this.params.rowNodeBlockLoader.removeBlock(block);
  };
  // gets called 1) row count changed 2) cache purged 3) items inserted
  InfiniteCache.prototype.onCacheUpdated = function () {
    if (this.isAlive()) {
      // if the virtualRowCount is shortened, then it's possible blocks exist that are no longer
      // in the valid range. so we must remove these. this can happen if user explicitly sets
      // the virtual row count, or the datasource returns a result and sets lastRow to something
      // less than virtualRowCount (can happen if user scrolls down, server reduces dataset size).
      this.destroyAllBlocksPastVirtualRowCount();
      // this results in both row models (infinite and server side) firing ModelUpdated,
      // however server side row model also updates the row indexes first
      var event_1 = {
        type: Events.EVENT_STORE_UPDATED
      };
      this.eventService.dispatchEvent(event_1);
    }
  };
  InfiniteCache.prototype.destroyAllBlocksPastVirtualRowCount = function () {
    var _this = this;
    var blocksToDestroy = [];
    this.getBlocksInOrder().forEach(function (block) {
      var startRow = block.getId() * _this.params.blockSize;
      if (startRow >= _this.rowCount) {
        blocksToDestroy.push(block);
      }
    });
    if (blocksToDestroy.length > 0) {
      blocksToDestroy.forEach(function (block) {
        return _this.destroyBlock(block);
      });
    }
  };
  InfiniteCache.prototype.purgeCache = function () {
    var _this = this;
    this.getBlocksInOrder().forEach(function (block) {
      return _this.removeBlockFromCache(block);
    });
    this.lastRowIndexKnown = false;
    // if zero rows in the cache, we need to get the SSRM to start asking for rows again.
    // otherwise if set to zero rows last time, and we don't update the row count, then after
    // the purge there will still be zero rows, meaning the SSRM won't request any rows.
    // to kick things off, at least one row needs to be asked for.
    if (this.rowCount === 0) {
      this.rowCount = this.params.initialRowCount;
    }
    this.onCacheUpdated();
  };
  InfiniteCache.prototype.getRowNodesInRange = function (firstInRange, lastInRange) {
    var _this = this;
    var result = [];
    var lastBlockId = -1;
    var inActiveRange = false;
    var numberSequence = new NumberSequence();
    // if only one node passed, we start the selection at the top
    if (_.missing(firstInRange)) {
      inActiveRange = true;
    }
    var foundGapInSelection = false;
    this.getBlocksInOrder().forEach(function (block) {
      if (foundGapInSelection) {
        return;
      }
      if (inActiveRange && lastBlockId + 1 !== block.getId()) {
        foundGapInSelection = true;
        return;
      }
      lastBlockId = block.getId();
      block.forEachNode(function (rowNode) {
        var hitFirstOrLast = rowNode === firstInRange || rowNode === lastInRange;
        if (inActiveRange || hitFirstOrLast) {
          result.push(rowNode);
        }
        if (hitFirstOrLast) {
          inActiveRange = !inActiveRange;
        }
      }, numberSequence, _this.rowCount);
    });
    // inActiveRange will be still true if we never hit the second rowNode
    var invalidRange = foundGapInSelection || inActiveRange;
    return invalidRange ? [] : result;
  };
  // this property says how many empty blocks should be in a cache, eg if scrolls down fast and creates 10
  // blocks all for loading, the grid will only load the last 2 - it will assume the blocks the user quickly
  // scrolled over are not needed to be loaded.
  InfiniteCache.MAX_EMPTY_BLOCKS_TO_KEEP = 2;
  __decorate$2g([Autowired('rowRenderer')], InfiniteCache.prototype, "rowRenderer", void 0);
  __decorate$2g([Autowired("focusController")], InfiniteCache.prototype, "focusController", void 0);
  __decorate$2g([__param$b(0, Qualifier('loggerFactory'))], InfiniteCache.prototype, "setBeans", null);
  __decorate$2g([PreDestroy], InfiniteCache.prototype, "destroyAllBlocks", null);
  return InfiniteCache;
}(BeanStub);
var __extends$2t =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2h =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var InfiniteRowModel = /** @class */function (_super) {
  __extends$2t(InfiniteRowModel, _super);
  function InfiniteRowModel() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  InfiniteRowModel.prototype.getRowBounds = function (index) {
    return {
      rowHeight: this.rowHeight,
      rowTop: this.rowHeight * index
    };
  };
  // we don't implement as lazy row heights is not supported in this row model
  InfiniteRowModel.prototype.ensureRowHeightsValid = function (startPixel, endPixel, startLimitIndex, endLimitIndex) {
    return false;
  };
  InfiniteRowModel.prototype.init = function () {
    var _this = this;
    if (!this.gridOptionsWrapper.isRowModelInfinite()) {
      return;
    }
    this.rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();
    this.addEventListeners();
    this.addDestroyFunc(function () {
      return _this.destroyCache();
    });
    this.verifyProps();
  };
  InfiniteRowModel.prototype.verifyProps = function () {
    if (this.gridOptionsWrapper.getDefaultGroupSortComparator() != null) {
      var message_1 = "AG Grid: defaultGroupSortComparator cannot be used with Infinite Row Model. If using Infinite Row Model, then sorting is done on the server side, nothing to do with the client.";
      _.doOnce(function () {
        return console.warn(message_1);
      }, 'IRM.DefaultGroupSortComparator');
    }
  };
  InfiniteRowModel.prototype.start = function () {
    this.setDatasource(this.gridOptionsWrapper.getDatasource());
  };
  InfiniteRowModel.prototype.destroyDatasource = function () {
    if (this.datasource) {
      this.getContext().destroyBean(this.datasource);
      this.rowRenderer.datasourceChanged();
      this.datasource = null;
    }
  };
  InfiniteRowModel.prototype.addEventListeners = function () {
    this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onColumnEverything.bind(this));
    this.addManagedListener(this.eventService, Events.EVENT_STORE_UPDATED, this.onCacheUpdated.bind(this));
  };
  InfiniteRowModel.prototype.onFilterChanged = function () {
    this.reset();
  };
  InfiniteRowModel.prototype.onSortChanged = function () {
    this.reset();
  };
  InfiniteRowModel.prototype.onColumnEverything = function () {
    var resetRequired;
    // if cache params, we require reset only if sort model has changed. we don't need to check
    // for filter model, as the filter manager will fire an event when columns change that result
    // in the filter changing.
    if (this.cacheParams) {
      resetRequired = this.isSortModelDifferent();
    } else {
      // if no cacheParams, means first time creating the cache, so always create one
      resetRequired = true;
    }
    if (resetRequired) {
      this.reset();
    }
  };
  InfiniteRowModel.prototype.isSortModelDifferent = function () {
    return !_.jsonEquals(this.cacheParams.sortModel, this.sortController.getSortModel());
  };
  InfiniteRowModel.prototype.getType = function () {
    return Constants.ROW_MODEL_TYPE_INFINITE;
  };
  InfiniteRowModel.prototype.setDatasource = function (datasource) {
    this.destroyDatasource();
    this.datasource = datasource;
    // only reset if we have a valid datasource to working with
    if (datasource) {
      this.reset();
    }
  };
  InfiniteRowModel.prototype.isEmpty = function () {
    return !this.infiniteCache;
  };
  InfiniteRowModel.prototype.isRowsToRender = function () {
    return !!this.infiniteCache;
  };
  InfiniteRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {
    return this.infiniteCache ? this.infiniteCache.getRowNodesInRange(firstInRange, lastInRange) : [];
  };
  InfiniteRowModel.prototype.reset = function () {
    // important to return here, as the user could be setting filter or sort before
    // data-source is set
    if (!this.datasource) {
      return;
    }
    // if user is providing id's, then this means we can keep the selection between datasource hits,
    // as the rows will keep their unique id's even if, for example, server side sorting or filtering
    // is done.
    var userGeneratingIds = _.exists(this.gridOptionsWrapper.getRowNodeIdFunc());
    if (!userGeneratingIds) {
      this.selectionController.reset();
    }
    this.resetCache();
    var event = this.createModelUpdatedEvent();
    this.eventService.dispatchEvent(event);
  };
  InfiniteRowModel.prototype.createModelUpdatedEvent = function () {
    return {
      type: Events.EVENT_MODEL_UPDATED,
      api: this.gridApi,
      columnApi: this.columnApi,
      // not sure if these should all be false - noticed if after implementing,
      // maybe they should be true?
      newPage: false,
      newData: false,
      keepRenderedRows: true,
      animate: false
    };
  };
  InfiniteRowModel.prototype.resetCache = function () {
    // if not first time creating a cache, need to destroy the old one
    this.destroyCache();
    var maxConcurrentRequests = this.gridOptionsWrapper.getMaxConcurrentDatasourceRequests();
    this.cacheParams = {
      // the user provided datasource
      datasource: this.datasource,
      // sort and filter model
      filterModel: this.filterManager.getFilterModel(),
      sortModel: this.sortController.getSortModel(),
      rowNodeBlockLoader: this.rowNodeBlockLoader,
      // properties - this way we take a snapshot of them, so if user changes any, they will be
      // used next time we create a new cache, which is generally after a filter or sort change,
      // or a new datasource is set
      maxConcurrentRequests: this.defaultIfInvalid(maxConcurrentRequests, 2),
      initialRowCount: this.defaultIfInvalid(this.gridOptionsWrapper.getInfiniteInitialRowCount(), 1),
      maxBlocksInCache: this.gridOptionsWrapper.getMaxBlocksInCache(),
      rowHeight: this.gridOptionsWrapper.getRowHeightAsNumber(),
      // if user doesn't provide overflow, we use default overflow of 1, so user can scroll past
      // the current page and request first row of next page
      overflowSize: this.defaultIfInvalid(this.gridOptionsWrapper.getCacheOverflowSize(), 1),
      // page size needs to be 1 or greater. having it at 1 would be silly, as you would be hitting the
      // server for one page at a time. so the default if not specified is 100.
      blockSize: this.defaultIfInvalid(this.gridOptionsWrapper.getCacheBlockSize(), 100),
      // the cache could create this, however it is also used by the pages, so handy to create it
      // here as the settings are also passed to the pages
      lastAccessedSequence: new NumberSequence()
    };
    this.infiniteCache = this.createBean(new InfiniteCache(this.cacheParams));
  };
  InfiniteRowModel.prototype.defaultIfInvalid = function (value, defaultValue) {
    return value > 0 ? value : defaultValue;
  };
  InfiniteRowModel.prototype.destroyCache = function () {
    if (this.infiniteCache) {
      this.infiniteCache = this.destroyBean(this.infiniteCache);
    }
  };
  InfiniteRowModel.prototype.onCacheUpdated = function () {
    var event = this.createModelUpdatedEvent();
    this.eventService.dispatchEvent(event);
  };
  InfiniteRowModel.prototype.getRow = function (rowIndex) {
    return this.infiniteCache ? this.infiniteCache.getRow(rowIndex) : null;
  };
  InfiniteRowModel.prototype.getRowNode = function (id) {
    var result = null;
    this.forEachNode(function (rowNode) {
      if (rowNode.id === id) {
        result = rowNode;
      }
    });
    return result;
  };
  InfiniteRowModel.prototype.forEachNode = function (callback) {
    if (this.infiniteCache) {
      this.infiniteCache.forEachNodeDeep(callback);
    }
  };
  InfiniteRowModel.prototype.getTopLevelRowCount = function () {
    return this.getRowCount();
  };
  InfiniteRowModel.prototype.getTopLevelRowDisplayedIndex = function (topLevelIndex) {
    return topLevelIndex;
  };
  InfiniteRowModel.prototype.getRowIndexAtPixel = function (pixel) {
    if (this.rowHeight !== 0) {
      // avoid divide by zero error
      var rowIndexForPixel = Math.floor(pixel / this.rowHeight);
      var lastRowIndex = this.getRowCount() - 1;
      if (rowIndexForPixel > lastRowIndex) {
        return lastRowIndex;
      } else {
        return rowIndexForPixel;
      }
    } else {
      return 0;
    }
  };
  InfiniteRowModel.prototype.getRowCount = function () {
    return this.infiniteCache ? this.infiniteCache.getRowCount() : 0;
  };
  InfiniteRowModel.prototype.isRowPresent = function (rowNode) {
    var foundRowNode = this.getRowNode(rowNode.id);
    return !!foundRowNode;
  };
  InfiniteRowModel.prototype.refreshCache = function () {
    if (this.infiniteCache) {
      this.infiniteCache.refreshCache();
    }
  };
  InfiniteRowModel.prototype.purgeCache = function () {
    if (this.infiniteCache) {
      this.infiniteCache.purgeCache();
    }
  };
  // for iRowModel
  InfiniteRowModel.prototype.isLastRowIndexKnown = function () {
    if (this.infiniteCache) {
      return this.infiniteCache.isLastRowIndexKnown();
    } else {
      return false;
    }
  };
  InfiniteRowModel.prototype.setRowCount = function (rowCount, lastRowIndexKnown) {
    if (this.infiniteCache) {
      this.infiniteCache.setRowCount(rowCount, lastRowIndexKnown);
    }
  };
  __decorate$2h([Autowired('filterManager')], InfiniteRowModel.prototype, "filterManager", void 0);
  __decorate$2h([Autowired('sortController')], InfiniteRowModel.prototype, "sortController", void 0);
  __decorate$2h([Autowired('selectionController')], InfiniteRowModel.prototype, "selectionController", void 0);
  __decorate$2h([Autowired('gridApi')], InfiniteRowModel.prototype, "gridApi", void 0);
  __decorate$2h([Autowired('columnApi')], InfiniteRowModel.prototype, "columnApi", void 0);
  __decorate$2h([Autowired('rowRenderer')], InfiniteRowModel.prototype, "rowRenderer", void 0);
  __decorate$2h([Autowired('rowNodeBlockLoader')], InfiniteRowModel.prototype, "rowNodeBlockLoader", void 0);
  __decorate$2h([PostConstruct], InfiniteRowModel.prototype, "init", null);
  __decorate$2h([PreDestroy], InfiniteRowModel.prototype, "destroyDatasource", null);
  InfiniteRowModel = __decorate$2h([Bean('rowModel')], InfiniteRowModel);
  return InfiniteRowModel;
}(BeanStub);
var InfiniteRowModelModule = {
  moduleName: exports.ModuleNames.InfiniteRowModelModule,
  rowModels: {
    infinite: InfiniteRowModel
  }
};
var BaseCreator = /** @class */function () {
  function BaseCreator() {}
  BaseCreator.prototype.setBeans = function (beans) {
    this.beans = beans;
  };
  BaseCreator.prototype.getFileName = function (fileName) {
    var extension = this.getDefaultFileExtension();
    if (fileName == null || !fileName.length) {
      fileName = this.getDefaultFileName();
    }
    return fileName.indexOf('.') === -1 ? fileName + "." + extension : fileName;
  };
  BaseCreator.prototype.getMergedParamsAndData = function (userParams) {
    var mergedParams = this.mergeDefaultParams(userParams);
    var data = this.beans.gridSerializer.serialize(this.createSerializingSession(mergedParams), mergedParams);
    return {
      mergedParams: mergedParams,
      data: data
    };
  };
  BaseCreator.prototype.mergeDefaultParams = function (userParams) {
    var baseParams = this.getDefaultExportParams();
    var params = {};
    _.assign(params, baseParams);
    _.assign(params, userParams);
    return params;
  };
  return BaseCreator;
}();
var BaseGridSerializingSession = /** @class */function () {
  function BaseGridSerializingSession(config) {
    this.groupColumns = [];
    var columnController = config.columnController,
      valueService = config.valueService,
      gridOptionsWrapper = config.gridOptionsWrapper,
      processCellCallback = config.processCellCallback,
      processHeaderCallback = config.processHeaderCallback,
      processGroupHeaderCallback = config.processGroupHeaderCallback,
      processRowGroupCallback = config.processRowGroupCallback;
    this.columnController = columnController;
    this.valueService = valueService;
    this.gridOptionsWrapper = gridOptionsWrapper;
    this.processCellCallback = processCellCallback;
    this.processHeaderCallback = processHeaderCallback;
    this.processGroupHeaderCallback = processGroupHeaderCallback;
    this.processRowGroupCallback = processRowGroupCallback;
  }
  BaseGridSerializingSession.prototype.prepare = function (columnsToExport) {
    this.groupColumns = _.filter(columnsToExport, function (col) {
      return !!col.getColDef().showRowGroup;
    });
  };
  BaseGridSerializingSession.prototype.extractHeaderValue = function (column) {
    var value = this.getHeaderName(this.processHeaderCallback, column);
    return value != null ? value : '';
  };
  BaseGridSerializingSession.prototype.extractRowCellValue = function (column, index, accumulatedRowIndex, type, node) {
    // we render the group summary text e.g. "-> Parent -> Child"...
    var groupIndex = this.gridOptionsWrapper.isGroupMultiAutoColumn() ? node.rowGroupIndex : 0;
    var renderGroupSummaryCell =
    // on group rows
    node && node.group && (
    // in the group column if groups appear in regular grid cells
    index === groupIndex && this.groupColumns.indexOf(column) !== -1
    // or the first cell in the row, if we're doing full width rows
    || index === 0 && this.gridOptionsWrapper.isGroupUseEntireRow(this.columnController.isPivotMode()));
    var valueForCell;
    if (renderGroupSummaryCell) {
      valueForCell = this.createValueForGroupNode(node);
    } else {
      valueForCell = this.valueService.getValue(column, node);
    }
    var value = this.processCell(accumulatedRowIndex, node, column, valueForCell, this.processCellCallback, type);
    return value != null ? value : '';
  };
  BaseGridSerializingSession.prototype.getHeaderName = function (callback, column) {
    if (callback) {
      return callback({
        column: column,
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        context: this.gridOptionsWrapper.getContext()
      });
    }
    return this.columnController.getDisplayNameForColumn(column, 'csv', true);
  };
  BaseGridSerializingSession.prototype.createValueForGroupNode = function (node) {
    if (this.processRowGroupCallback) {
      return this.processRowGroupCallback({
        node: node,
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        context: this.gridOptionsWrapper.getContext()
      });
    }
    var keys = [node.key];
    if (!this.gridOptionsWrapper.isGroupMultiAutoColumn()) {
      while (node.parent) {
        node = node.parent;
        keys.push(node.key);
      }
    }
    return keys.reverse().join(' -> ');
  };
  BaseGridSerializingSession.prototype.processCell = function (accumulatedRowIndex, rowNode, column, value, processCellCallback, type) {
    if (processCellCallback) {
      return processCellCallback({
        accumulatedRowIndex: accumulatedRowIndex,
        column: column,
        node: rowNode,
        value: value,
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        context: this.gridOptionsWrapper.getContext(),
        type: type
      });
    }
    return value != null ? value : '';
  };
  return BaseGridSerializingSession;
}();
var Downloader = /** @class */function () {
  function Downloader() {}
  Downloader.download = function (fileName, content) {
    var win = document.defaultView || window;
    if (!win) {
      console.warn('AG Grid: There is no `window` associated with the current `document`');
      return;
    }
    // Internet Explorer
    if (win.navigator.msSaveOrOpenBlob) {
      win.navigator.msSaveOrOpenBlob(content, fileName);
    } else {
      // Other Browsers
      var element = document.createElement('a');
      // @ts-ignore
      var url_1 = win.URL.createObjectURL(content);
      element.setAttribute('href', url_1);
      element.setAttribute('download', fileName);
      element.style.display = 'none';
      document.body.appendChild(element);
      element.dispatchEvent(new MouseEvent('click', {
        bubbles: false,
        cancelable: true,
        view: win
      }));
      document.body.removeChild(element);
      win.setTimeout(function () {
        // @ts-ignore
        win.URL.revokeObjectURL(url_1);
      }, 0);
    }
  };
  return Downloader;
}();
var __extends$2u =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var LINE_SEPARATOR = '\r\n';
var CsvSerializingSession = /** @class */function (_super) {
  __extends$2u(CsvSerializingSession, _super);
  function CsvSerializingSession(config) {
    var _this = _super.call(this, config) || this;
    _this.isFirstLine = true;
    _this.result = '';
    var suppressQuotes = config.suppressQuotes,
      columnSeparator = config.columnSeparator;
    _this.suppressQuotes = suppressQuotes;
    _this.columnSeparator = columnSeparator;
    return _this;
  }
  CsvSerializingSession.prototype.addCustomContent = function (content) {
    var _this = this;
    if (!content) {
      return;
    }
    if (typeof content === 'string') {
      if (!/^\s*\n/.test(content)) {
        this.beginNewLine();
      }
      // replace whatever newlines are supplied with the style we're using
      content = content.replace(/\r?\n/g, LINE_SEPARATOR);
      this.result += content;
    } else {
      content.forEach(function (row) {
        _this.beginNewLine();
        row.forEach(function (cell, index) {
          if (index !== 0) {
            _this.result += _this.columnSeparator;
          }
          _this.result += _this.putInQuotes(cell.data.value || '');
          if (cell.mergeAcross) {
            _this.appendEmptyCells(cell.mergeAcross);
          }
        });
      });
    }
  };
  CsvSerializingSession.prototype.onNewHeaderGroupingRow = function () {
    this.beginNewLine();
    return {
      onColumn: this.onNewHeaderGroupingRowColumn.bind(this)
    };
  };
  CsvSerializingSession.prototype.onNewHeaderGroupingRowColumn = function (header, index, span) {
    if (index != 0) {
      this.result += this.columnSeparator;
    }
    this.result += this.putInQuotes(header);
    this.appendEmptyCells(span);
  };
  CsvSerializingSession.prototype.appendEmptyCells = function (count) {
    for (var i = 1; i <= count; i++) {
      this.result += this.columnSeparator + this.putInQuotes("");
    }
  };
  CsvSerializingSession.prototype.onNewHeaderRow = function () {
    this.beginNewLine();
    return {
      onColumn: this.onNewHeaderRowColumn.bind(this)
    };
  };
  CsvSerializingSession.prototype.onNewHeaderRowColumn = function (column, index) {
    if (index != 0) {
      this.result += this.columnSeparator;
    }
    this.result += this.putInQuotes(this.extractHeaderValue(column));
  };
  CsvSerializingSession.prototype.onNewBodyRow = function () {
    this.beginNewLine();
    return {
      onColumn: this.onNewBodyRowColumn.bind(this)
    };
  };
  CsvSerializingSession.prototype.onNewBodyRowColumn = function (column, index, node) {
    if (index != 0) {
      this.result += this.columnSeparator;
    }
    this.result += this.putInQuotes(this.extractRowCellValue(column, index, index, Constants.EXPORT_TYPE_CSV, node));
  };
  CsvSerializingSession.prototype.putInQuotes = function (value) {
    if (this.suppressQuotes) {
      return value;
    }
    if (value === null || value === undefined) {
      return '""';
    }
    var stringValue;
    if (typeof value === 'string') {
      stringValue = value;
    } else if (typeof value.toString === 'function') {
      stringValue = value.toString();
    } else {
      console.warn('unknown value type during csv conversion');
      stringValue = '';
    }
    // replace each " with "" (ie two sets of double quotes is how to do double quotes in csv)
    var valueEscaped = stringValue.replace(/"/g, "\"\"");
    return '"' + valueEscaped + '"';
  };
  CsvSerializingSession.prototype.parse = function () {
    return this.result;
  };
  CsvSerializingSession.prototype.beginNewLine = function () {
    if (!this.isFirstLine) {
      this.result += LINE_SEPARATOR;
    }
    this.isFirstLine = false;
  };
  return CsvSerializingSession;
}(BaseGridSerializingSession);
var __extends$2v =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2i =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CsvCreator = /** @class */function (_super) {
  __extends$2v(CsvCreator, _super);
  function CsvCreator() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  CsvCreator.prototype.postConstruct = function () {
    this.setBeans({
      gridSerializer: this.gridSerializer,
      gridOptionsWrapper: this.gridOptionsWrapper
    });
  };
  CsvCreator.prototype.getDefaultExportParams = function () {
    return this.gridOptionsWrapper.getDefaultExportParams('csv');
  };
  CsvCreator.prototype.export = function (userParams) {
    if (this.isExportSuppressed()) {
      console.warn("ag-grid: Export cancelled. Export is not allowed as per your configuration.");
      return '';
    }
    var _a = this.getMergedParamsAndData(userParams),
      mergedParams = _a.mergedParams,
      data = _a.data;
    var packagedFile = new Blob(["\ufeff", data], {
      // @ts-ignore
      type: window.navigator.msSaveOrOpenBlob ? this.getMimeType() : 'octet/stream'
    });
    Downloader.download(this.getFileName(mergedParams.fileName), packagedFile);
    return data;
  };
  CsvCreator.prototype.exportDataAsCsv = function (params) {
    return this.export(params);
  };
  CsvCreator.prototype.getDataAsCsv = function (params) {
    return this.getMergedParamsAndData(params).data;
  };
  CsvCreator.prototype.getMimeType = function () {
    return 'text/csv;charset=utf-8;';
  };
  CsvCreator.prototype.getDefaultFileName = function () {
    return 'export.csv';
  };
  CsvCreator.prototype.getDefaultFileExtension = function () {
    return 'csv';
  };
  CsvCreator.prototype.createSerializingSession = function (params) {
    var _a = this,
      columnController = _a.columnController,
      valueService = _a.valueService,
      gridOptionsWrapper = _a.gridOptionsWrapper;
    var _b = params,
      processCellCallback = _b.processCellCallback,
      processHeaderCallback = _b.processHeaderCallback,
      processGroupHeaderCallback = _b.processGroupHeaderCallback,
      processRowGroupCallback = _b.processRowGroupCallback,
      suppressQuotes = _b.suppressQuotes,
      columnSeparator = _b.columnSeparator;
    return new CsvSerializingSession({
      columnController: columnController,
      valueService: valueService,
      gridOptionsWrapper: gridOptionsWrapper,
      processCellCallback: processCellCallback || undefined,
      processHeaderCallback: processHeaderCallback || undefined,
      processGroupHeaderCallback: processGroupHeaderCallback || undefined,
      processRowGroupCallback: processRowGroupCallback || undefined,
      suppressQuotes: suppressQuotes || false,
      columnSeparator: columnSeparator || ','
    });
  };
  CsvCreator.prototype.isExportSuppressed = function () {
    return this.gridOptionsWrapper.isSuppressCsvExport();
  };
  __decorate$2i([Autowired('columnController')], CsvCreator.prototype, "columnController", void 0);
  __decorate$2i([Autowired('valueService')], CsvCreator.prototype, "valueService", void 0);
  __decorate$2i([Autowired('gridSerializer')], CsvCreator.prototype, "gridSerializer", void 0);
  __decorate$2i([Autowired('gridOptionsWrapper')], CsvCreator.prototype, "gridOptionsWrapper", void 0);
  __decorate$2i([PostConstruct], CsvCreator.prototype, "postConstruct", null);
  CsvCreator = __decorate$2i([Bean('csvCreator')], CsvCreator);
  return CsvCreator;
}(BaseCreator);
var __extends$2w =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2j =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
(function (RowType) {
  RowType[RowType["HEADER_GROUPING"] = 0] = "HEADER_GROUPING";
  RowType[RowType["HEADER"] = 1] = "HEADER";
  RowType[RowType["BODY"] = 2] = "BODY";
})(exports.RowType || (exports.RowType = {}));
var GridSerializer = /** @class */function (_super) {
  __extends$2w(GridSerializer, _super);
  function GridSerializer() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  GridSerializer.prototype.serialize = function (gridSerializingSession, params) {
    if (params === void 0) {
      params = {};
    }
    var columnsToExport = this.getColumnsToExport(params.allColumns, params.columnKeys);
    var serializeChain = _.compose(
    // first pass, put in the header names of the cols
    this.prepareSession(columnsToExport), this.prependContent(params), this.exportColumnGroups(params, columnsToExport), this.exportHeaders(params, columnsToExport), this.processPinnedTopRows(params, columnsToExport), this.processRows(params, columnsToExport), this.processPinnedBottomRows(params, columnsToExport), this.appendContent(params));
    return serializeChain(gridSerializingSession).parse();
  };
  GridSerializer.prototype.processRow = function (gridSerializingSession, params, columnsToExport, node) {
    var rowSkipper = params.shouldRowBeSkipped || function () {
      return false;
    };
    var gridOptionsWrapper = this.gridOptionsWrapper;
    var context = gridOptionsWrapper.getContext();
    var api = gridOptionsWrapper.getApi();
    var columnApi = gridOptionsWrapper.getColumnApi();
    var skipSingleChildrenGroup = gridOptionsWrapper.isGroupRemoveSingleChildren();
    var hideOpenParents = gridOptionsWrapper.isGroupHideOpenParents();
    var skipLowestSingleChildrenGroup = gridOptionsWrapper.isGroupRemoveLowestSingleChildren();
    var isLeafNode = this.columnController.isPivotMode() ? node.leafGroup : !node.group;
    var skipRowGroups = params.skipGroups || params.skipRowGroups;
    var shouldSkipLowestGroup = skipLowestSingleChildrenGroup && node.leafGroup;
    var shouldSkipCurrentGroup = node.allChildrenCount === 1 && (skipSingleChildrenGroup || shouldSkipLowestGroup);
    if (skipRowGroups && params.skipGroups) {
      _.doOnce(function () {
        return console.warn('AG Grid: Since v25.2 `skipGroups` has been renamed to `skipRowGroups`.');
      }, 'gridSerializer-skipGroups');
    }
    if (!isLeafNode && (params.skipRowGroups || shouldSkipCurrentGroup || hideOpenParents) || params.onlySelected && !node.isSelected() || params.skipPinnedTop && node.rowPinned === 'top' || params.skipPinnedBottom && node.rowPinned === 'bottom') {
      return;
    }
    // if we are in pivotMode, then the grid will show the root node only
    // if it's not a leaf group
    var nodeIsRootNode = node.level === -1;
    if (nodeIsRootNode && !node.leafGroup) {
      return;
    }
    var shouldRowBeSkipped = rowSkipper({
      node: node,
      api: api,
      context: context
    });
    if (shouldRowBeSkipped) {
      return;
    }
    var rowAccumulator = gridSerializingSession.onNewBodyRow();
    columnsToExport.forEach(function (column, index) {
      rowAccumulator.onColumn(column, index, node);
    });
    if (params.getCustomContentBelowRow) {
      var content = params.getCustomContentBelowRow({
        node: node,
        api: api,
        columnApi: columnApi,
        context: context
      });
      if (content) {
        gridSerializingSession.addCustomContent(content);
      }
    }
  };
  GridSerializer.prototype.appendContent = function (params) {
    return function (gridSerializingSession) {
      var appendContent = params.customFooter || params.appendContent;
      if (appendContent) {
        if (params.customFooter) {
          _.doOnce(function () {
            return console.warn('AG Grid: Since version 25.2.0 the `customFooter` param has been deprecated. Use `appendContent` instead.');
          }, 'gridSerializer-customFooter');
        }
        gridSerializingSession.addCustomContent(appendContent);
      }
      return gridSerializingSession;
    };
  };
  GridSerializer.prototype.prependContent = function (params) {
    return function (gridSerializingSession) {
      var prependContent = params.customHeader || params.prependContent;
      if (prependContent) {
        if (params.customHeader) {
          _.doOnce(function () {
            return console.warn('AG Grid: Since version 25.2.0 the `customHeader` param has been deprecated. Use `prependContent` instead.');
          }, 'gridSerializer-customHeader');
        }
        gridSerializingSession.addCustomContent(prependContent);
      }
      return gridSerializingSession;
    };
  };
  GridSerializer.prototype.prepareSession = function (columnsToExport) {
    return function (gridSerializingSession) {
      gridSerializingSession.prepare(columnsToExport);
      return gridSerializingSession;
    };
  };
  GridSerializer.prototype.exportColumnGroups = function (params, columnsToExport) {
    var _this = this;
    return function (gridSerializingSession) {
      if (!params.skipColumnGroupHeaders) {
        var groupInstanceIdCreator = new GroupInstanceIdCreator();
        var displayedGroups = _this.displayedGroupCreator.createDisplayedGroups(columnsToExport, _this.columnController.getGridBalancedTree(), groupInstanceIdCreator, null);
        _this.recursivelyAddHeaderGroups(displayedGroups, gridSerializingSession, params.processGroupHeaderCallback);
      } else if (params.columnGroups) {
        _.doOnce(function () {
          return console.warn('AG Grid: Since v25.2 the `columnGroups` param has deprecated, and groups are exported by default.');
        }, 'gridSerializer-columnGroups');
      }
      return gridSerializingSession;
    };
  };
  GridSerializer.prototype.exportHeaders = function (params, columnsToExport) {
    return function (gridSerializingSession) {
      if (!params.skipHeader && !params.skipColumnHeaders) {
        var gridRowIterator_1 = gridSerializingSession.onNewHeaderRow();
        columnsToExport.forEach(function (column, index) {
          gridRowIterator_1.onColumn(column, index, undefined);
        });
      } else if (params.skipHeader) {
        _.doOnce(function () {
          return console.warn('AG Grid: Since v25.2 the `skipHeader` param has been renamed to `skipColumnHeaders`.');
        }, 'gridSerializer-skipHeader');
      }
      return gridSerializingSession;
    };
  };
  GridSerializer.prototype.processPinnedTopRows = function (params, columnsToExport) {
    var _this = this;
    return function (gridSerializingSession) {
      var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);
      _this.pinnedRowModel.forEachPinnedTopRow(processRow);
      return gridSerializingSession;
    };
  };
  GridSerializer.prototype.processRows = function (params, columnsToExport) {
    var _this = this;
    return function (gridSerializingSession) {
      // when in pivot mode, we always render cols on screen, never 'all columns'
      var rowModel = _this.rowModel;
      var rowModelType = rowModel.getType();
      var usingCsrm = rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
      var usingSsrm = rowModelType === Constants.ROW_MODEL_TYPE_SERVER_SIDE;
      var onlySelectedNonStandardModel = !usingCsrm && params.onlySelected;
      var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);
      if (_this.columnController.isPivotMode()) {
        if (usingCsrm) {
          rowModel.forEachPivotNode(processRow);
        } else {
          // must be enterprise, so we can just loop through all the nodes
          rowModel.forEachNode(processRow);
        }
      } else {
        // onlySelectedAllPages: user doing pagination and wants selected items from
        // other pages, so cannot use the standard row model as it won't have rows from
        // other pages.
        // onlySelectedNonStandardModel: if user wants selected in non standard row model
        // (eg viewport) then again RowModel cannot be used, so need to use selected instead.
        if (params.onlySelectedAllPages || onlySelectedNonStandardModel) {
          var selectedNodes = _this.selectionController.getSelectedNodes();
          selectedNodes.forEach(processRow);
        } else {
          // here is everything else - including standard row model and selected. we don't use
          // the selection model even when just using selected, so that the result is the order
          // of the rows appearing on the screen.
          if (usingCsrm) {
            rowModel.forEachNodeAfterFilterAndSort(processRow);
          } else if (usingSsrm) {
            rowModel.forEachNodeAfterFilterAndSort(processRow);
          } else {
            rowModel.forEachNode(processRow);
          }
        }
      }
      return gridSerializingSession;
    };
  };
  GridSerializer.prototype.processPinnedBottomRows = function (params, columnsToExport) {
    var _this = this;
    return function (gridSerializingSession) {
      var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);
      _this.pinnedRowModel.forEachPinnedBottomRow(processRow);
      return gridSerializingSession;
    };
  };
  GridSerializer.prototype.getColumnsToExport = function (allColumns, columnKeys) {
    if (allColumns === void 0) {
      allColumns = false;
    }
    var isPivotMode = this.columnController.isPivotMode();
    if (columnKeys && columnKeys.length) {
      return this.columnController.getGridColumns(columnKeys);
    }
    if (allColumns && !isPivotMode) {
      // add auto group column for tree data
      var columns = this.gridOptionsWrapper.isTreeData() ? this.columnController.getGridColumns([Constants.GROUP_AUTO_COLUMN_ID]) : [];
      return columns.concat(this.columnController.getAllPrimaryColumns() || []);
    }
    return this.columnController.getAllDisplayedColumns();
  };
  GridSerializer.prototype.recursivelyAddHeaderGroups = function (displayedGroups, gridSerializingSession, processGroupHeaderCallback) {
    var directChildrenHeaderGroups = [];
    displayedGroups.forEach(function (columnGroupChild) {
      var columnGroup = columnGroupChild;
      if (!columnGroup.getChildren) {
        return;
      }
      columnGroup.getChildren().forEach(function (it) {
        return directChildrenHeaderGroups.push(it);
      });
    });
    if (displayedGroups.length > 0 && displayedGroups[0] instanceof ColumnGroup) {
      this.doAddHeaderHeader(gridSerializingSession, displayedGroups, processGroupHeaderCallback);
    }
    if (directChildrenHeaderGroups && directChildrenHeaderGroups.length > 0) {
      this.recursivelyAddHeaderGroups(directChildrenHeaderGroups, gridSerializingSession, processGroupHeaderCallback);
    }
  };
  GridSerializer.prototype.doAddHeaderHeader = function (gridSerializingSession, displayedGroups, processGroupHeaderCallback) {
    var _this = this;
    var gridRowIterator = gridSerializingSession.onNewHeaderGroupingRow();
    var columnIndex = 0;
    displayedGroups.forEach(function (columnGroupChild) {
      var columnGroup = columnGroupChild;
      var name;
      if (processGroupHeaderCallback) {
        name = processGroupHeaderCallback({
          columnGroup: columnGroup,
          api: _this.gridOptionsWrapper.getApi(),
          columnApi: _this.gridOptionsWrapper.getColumnApi(),
          context: _this.gridOptionsWrapper.getContext()
        });
      } else {
        name = _this.columnController.getDisplayNameForColumnGroup(columnGroup, 'header');
      }
      gridRowIterator.onColumn(name || '', columnIndex++, columnGroup.getLeafColumns().length - 1);
    });
  };
  __decorate$2j([Autowired('displayedGroupCreator')], GridSerializer.prototype, "displayedGroupCreator", void 0);
  __decorate$2j([Autowired('columnController')], GridSerializer.prototype, "columnController", void 0);
  __decorate$2j([Autowired('rowModel')], GridSerializer.prototype, "rowModel", void 0);
  __decorate$2j([Autowired('pinnedRowModel')], GridSerializer.prototype, "pinnedRowModel", void 0);
  __decorate$2j([Autowired('selectionController')], GridSerializer.prototype, "selectionController", void 0);
  GridSerializer = __decorate$2j([Bean("gridSerializer")], GridSerializer);
  return GridSerializer;
}(BeanStub);
var CsvExportModule = {
  moduleName: exports.ModuleNames.CsvExportModule,
  beans: [CsvCreator, GridSerializer]
};
var LINE_SEPARATOR$1 = '\r\n';
var XmlFactory = /** @class */function () {
  function XmlFactory() {}
  XmlFactory.createHeader = function (headerElement) {
    if (headerElement === void 0) {
      headerElement = {};
    }
    var headerStart = '<?';
    var headerEnd = '?>';
    var keys = ['version'];
    if (!headerElement.version) {
      headerElement.version = "1.0";
    }
    if (headerElement.encoding) {
      keys.push('encoding');
    }
    if (headerElement.standalone) {
      keys.push('standalone');
    }
    var att = keys.map(function (key) {
      return key + "=\"" + headerElement[key] + "\"";
    }).join(' ');
    return headerStart + "xml " + att + " " + headerEnd;
  };
  XmlFactory.createXml = function (xmlElement, booleanTransformer) {
    var _this = this;
    var props = '';
    if (xmlElement.properties) {
      if (xmlElement.properties.prefixedAttributes) {
        xmlElement.properties.prefixedAttributes.forEach(function (prefixedSet) {
          Object.keys(prefixedSet.map).forEach(function (key) {
            props += _this.returnAttributeIfPopulated(prefixedSet.prefix + key, prefixedSet.map[key], booleanTransformer);
          });
        });
      }
      if (xmlElement.properties.rawMap) {
        Object.keys(xmlElement.properties.rawMap).forEach(function (key) {
          props += _this.returnAttributeIfPopulated(key, xmlElement.properties.rawMap[key], booleanTransformer);
        });
      }
    }
    var result = '<' + xmlElement.name + props;
    if (!xmlElement.children && xmlElement.textNode == null) {
      return result + '/>' + LINE_SEPARATOR$1;
    }
    if (xmlElement.textNode != null) {
      return result + '>' + xmlElement.textNode + '</' + xmlElement.name + '>' + LINE_SEPARATOR$1;
    }
    result += '>' + LINE_SEPARATOR$1;
    if (xmlElement.children) {
      xmlElement.children.forEach(function (it) {
        result += _this.createXml(it, booleanTransformer);
      });
    }
    return result + '</' + xmlElement.name + '>' + LINE_SEPARATOR$1;
  };
  XmlFactory.returnAttributeIfPopulated = function (key, value, booleanTransformer) {
    if (!value && value !== '' && value !== 0) {
      return '';
    }
    var xmlValue = value;
    if (typeof value === 'boolean') {
      if (booleanTransformer) {
        xmlValue = booleanTransformer(value);
      }
    }
    return " " + key + "=\"" + xmlValue + "\"";
  };
  return XmlFactory;
}();

// table for crc calculation
// from: https://referencesource.microsoft.com/#System/sys/System/IO/compression/Crc32Helper.cs,3b31978c7d7f7246,references
var crcTable = new Uint32Array([0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f, 0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9, 0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d]);
var ZipContainer = /** @class */function () {
  function ZipContainer() {}
  ZipContainer.addFolders = function (paths) {
    paths.forEach(this.addFolder.bind(this));
  };
  ZipContainer.addFolder = function (path) {
    this.folders.push({
      path: path,
      created: new Date(),
      isBase64: false
    });
  };
  ZipContainer.addFile = function (path, content, isBase64) {
    if (isBase64 === void 0) {
      isBase64 = false;
    }
    this.files.push({
      path: path,
      created: new Date(),
      content: content,
      isBase64: isBase64
    });
  };
  ZipContainer.getContent = function (mimeType) {
    if (mimeType === void 0) {
      mimeType = 'application/zip';
    }
    var textOutput = this.buildFileStream();
    var uInt8Output = this.buildUint8Array(textOutput);
    this.clearStream();
    return new Blob([uInt8Output], {
      type: mimeType
    });
  };
  ZipContainer.clearStream = function () {
    this.folders = [];
    this.files = [];
  };
  ZipContainer.buildFileStream = function (fData) {
    if (fData === void 0) {
      fData = '';
    }
    var totalFiles = this.folders.concat(this.files);
    var len = totalFiles.length;
    var foData = '';
    var lL = 0;
    var cL = 0;
    for (var _i = 0, totalFiles_1 = totalFiles; _i < totalFiles_1.length; _i++) {
      var currentFile = totalFiles_1[_i];
      var _a = this.getHeader(currentFile, lL),
        fileHeader = _a.fileHeader,
        folderHeader = _a.folderHeader,
        content = _a.content;
      lL += fileHeader.length + content.length;
      cL += folderHeader.length;
      fData += fileHeader + content;
      foData += folderHeader;
    }
    var foEnd = this.buildFolderEnd(len, cL, lL);
    return fData + foData + foEnd;
  };
  ZipContainer.getHeader = function (currentFile, offset) {
    var content = currentFile.content,
      path = currentFile.path,
      created = currentFile.created,
      isBase64 = currentFile.isBase64;
    var utf8_encode = _.utf8_encode,
      decToHex = _.decToHex;
    var utfPath = utf8_encode(path);
    var isUTF8 = utfPath !== path;
    var time = this.convertTime(created);
    var dt = this.convertDate(created);
    var extraFields = '';
    if (isUTF8) {
      var uExtraFieldPath = decToHex(1, 1) + decToHex(this.getFromCrc32Table(utfPath), 4) + utfPath;
      extraFields = "\x75\x70" + decToHex(uExtraFieldPath.length, 2) + uExtraFieldPath;
    }
    var _a = !content ? {
        size: 0,
        content: ''
      } : this.getConvertedContent(content, isBase64),
      size = _a.size,
      convertedContent = _a.content;
    var header = '\x0A\x00' + (isUTF8 ? '\x00\x08' : '\x00\x00') + '\x00\x00' + decToHex(time, 2) +
    // last modified time
    decToHex(dt, 2) +
    // last modified date
    decToHex(size ? this.getFromCrc32Table(convertedContent) : 0, 4) + decToHex(size, 4) +
    // compressed size
    decToHex(size, 4) +
    // uncompressed size
    decToHex(utfPath.length, 2) +
    // file name length
    decToHex(extraFields.length, 2); // extra field length
    var fileHeader = 'PK\x03\x04' + header + utfPath + extraFields;
    var folderHeader = 'PK\x01\x02' +
    // central header
    '\x14\x00' + header +
    // file header
    '\x00\x00' + '\x00\x00' + '\x00\x00' + (content ? '\x00\x00\x00\x00' : '\x10\x00\x00\x00') +
    // external file attributes
    decToHex(offset, 4) +
    // relative offset of local header
    utfPath +
    // file name
    extraFields; // extra field
    return {
      fileHeader: fileHeader,
      folderHeader: folderHeader,
      content: convertedContent || ''
    };
  };
  ZipContainer.getConvertedContent = function (content, isBase64) {
    if (isBase64 === void 0) {
      isBase64 = false;
    }
    if (isBase64) {
      content = content.split(';base64,')[1];
    }
    content = isBase64 ? atob(content) : content;
    return {
      size: content.length,
      content: content
    };
  };
  ZipContainer.buildFolderEnd = function (tLen, cLen, lLen) {
    var decToHex = _.decToHex;
    return 'PK\x05\x06' +
    // central folder end
    '\x00\x00' + '\x00\x00' + decToHex(tLen, 2) +
    // total number of entries in the central folder
    decToHex(tLen, 2) +
    // total number of entries in the central folder
    decToHex(cLen, 4) +
    // size of the central folder
    decToHex(lLen, 4) +
    // central folder start offset
    '\x00\x00';
  };
  ZipContainer.buildUint8Array = function (content) {
    var uint8 = new Uint8Array(content.length);
    for (var i = 0; i < uint8.length; i++) {
      uint8[i] = content.charCodeAt(i);
    }
    return uint8;
  };
  ZipContainer.getFromCrc32Table = function (content) {
    if (!content.length) {
      return 0;
    }
    var size = content.length;
    var iterable = new Uint8Array(size);
    for (var i = 0; i < size; i++) {
      iterable[i] = content.charCodeAt(i);
    }
    var crc = 0 ^ -1;
    var j = 0;
    var k = 0;
    var l = 0;
    for (var i = 0; i < size; i++) {
      j = iterable[i];
      k = (crc ^ j) & 0xFF;
      l = crcTable[k];
      crc = crc >>> 8 ^ l;
    }
    return crc ^ -1;
  };
  ZipContainer.convertTime = function (date) {
    var time = date.getHours();
    time <<= 6;
    time = time | date.getMinutes();
    time <<= 5;
    time = time | date.getSeconds() / 2;
    return time;
  };
  ZipContainer.convertDate = function (date) {
    var dt = date.getFullYear() - 1980;
    dt <<= 4;
    dt = dt | date.getMonth() + 1;
    dt <<= 5;
    dt = dt | date.getDate();
    return dt;
  };
  ZipContainer.folders = [];
  ZipContainer.files = [];
  return ZipContainer;
}();
ModuleRegistry.register(ClientSideRowModelModule, false);
ModuleRegistry.register(InfiniteRowModelModule, false);
ModuleRegistry.register(CsvExportModule, false);
exports.AgAbstractField = AgAbstractField;
exports.AgAngleSelect = AgAngleSelect;
exports.AgCheckbox = AgCheckbox;
exports.AgColorPicker = AgColorPicker;
exports.AgDialog = AgDialog;
exports.AgGroupComponent = AgGroupComponent;
exports.AgInputNumberField = AgInputNumberField;
exports.AgInputRange = AgInputRange;
exports.AgInputTextArea = AgInputTextArea;
exports.AgInputTextField = AgInputTextField;
exports.AgPanel = AgPanel;
exports.AgPromise = AgPromise;
exports.AgRadioButton = AgRadioButton;
exports.AgSelect = AgSelect;
exports.AgSlider = AgSlider;
exports.AgToggleButton = AgToggleButton;
exports.AlignedGridsService = AlignedGridsService;
exports.AnimateShowChangeCellRenderer = AnimateShowChangeCellRenderer;
exports.AnimateSlideCellRenderer = AnimateSlideCellRenderer;
exports.AnimationFrameService = AnimationFrameService;
exports.AutoWidthCalculator = AutoWidthCalculator;
exports.Autowired = Autowired;
exports.BaseComponentWrapper = BaseComponentWrapper;
exports.BaseCreator = BaseCreator;
exports.BaseGridSerializingSession = BaseGridSerializingSession;
exports.Bean = Bean;
exports.BeanStub = BeanStub;
exports.BodyDropPivotTarget = BodyDropPivotTarget;
exports.BodyDropTarget = BodyDropTarget;
exports.CellComp = CellComp;
exports.CellNavigationService = CellNavigationService;
exports.CellPositionUtils = CellPositionUtils;
exports.ChangedPath = ChangedPath;
exports.CheckboxSelectionComponent = CheckboxSelectionComponent;
exports.ColDefUtil = ColDefUtil;
exports.Color = Color;
exports.Column = Column;
exports.ColumnApi = ColumnApi;
exports.ColumnController = ColumnController;
exports.ColumnFactory = ColumnFactory;
exports.ColumnGroup = ColumnGroup;
exports.ColumnKeyCreator = ColumnKeyCreator;
exports.ColumnUtils = ColumnUtils;
exports.Component = Component;
exports.ComponentUtil = ComponentUtil;
exports.Constants = Constants;
exports.Context = Context;
exports.ControllersService = ControllersService;
exports.CssClassApplier = CssClassApplier;
exports.CsvCreator = CsvCreator;
exports.CsvExportModule = CsvExportModule;
exports.DateFilter = DateFilter;
exports.DisplayedGroupCreator = DisplayedGroupCreator;
exports.Downloader = Downloader;
exports.DragAndDropService = DragAndDropService;
exports.DragService = DragService;
exports.Environment = Environment;
exports.EventService = EventService;
exports.Events = Events;
exports.ExpressionService = ExpressionService;
exports.FilterManager = FilterManager;
exports.FloatingFilterMapper = FloatingFilterMapper;
exports.FloatingFilterWrapper = FloatingFilterWrapper;
exports.FocusController = FocusController;
exports.Grid = Grid;
exports.GridApi = GridApi;
exports.GridBodyComp = GridBodyComp;
exports.GridBodyController = GridBodyController;
exports.GridComp = GridComp;
exports.GridCompController = GridCompController;
exports.GridCoreCreator = GridCoreCreator;
exports.GridListener = GridListener;
exports.GridOptionsWrapper = GridOptionsWrapper;
exports.GridSerializer = GridSerializer;
exports.GroupCellRenderer = GroupCellRenderer;
exports.GroupInstanceIdCreator = GroupInstanceIdCreator;
exports.GuiListener = GuiListener;
exports.HeaderContainer = HeaderContainer;
exports.HeaderNavigationService = HeaderNavigationService;
exports.HeaderPositionUtils = HeaderPositionUtils;
exports.HeaderRootComp = HeaderRootComp;
exports.HeaderRowComp = HeaderRowComp;
exports.HeadlessService = HeadlessService;
exports.HorizontalResizeService = HorizontalResizeService;
exports.KeyCode = KeyCode;
exports.KeyName = KeyName;
exports.LargeTextCellEditor = LargeTextCellEditor;
exports.Logger = Logger;
exports.LoggerFactory = LoggerFactory;
exports.ManagedFocusComponent = ManagedFocusComponent;
exports.ModuleRegistry = ModuleRegistry;
exports.MouseEventService = MouseEventService;
exports.MoveColumnController = MoveColumnController;
exports.NumberFilter = NumberFilter;
exports.NumberSequence = NumberSequence;
exports.Optional = Optional;
exports.OriginalColumnGroup = OriginalColumnGroup;
exports.PaginationProxy = PaginationProxy;
exports.PinnedRowModel = PinnedRowModel;
exports.PopupComponent = PopupComponent;
exports.PopupEditorWrapper = PopupEditorWrapper;
exports.PopupSelectCellEditor = PopupSelectCellEditor;
exports.PopupService = PopupService;
exports.PopupTextCellEditor = PopupTextCellEditor;
exports.PostConstruct = PostConstruct;
exports.PreConstruct = PreConstruct;
exports.PreDestroy = PreDestroy;
exports.PropertyKeys = PropertyKeys;
exports.ProvidedFilter = ProvidedFilter;
exports.Qualifier = Qualifier;
exports.QuerySelector = QuerySelector;
exports.RefSelector = RefSelector;
exports.ResizeObserverService = ResizeObserverService;
exports.RowController = RowController;
exports.RowNode = RowNode;
exports.RowNodeBlock = RowNodeBlock;
exports.RowNodeBlockLoader = RowNodeBlockLoader;
exports.RowNodeSorter = RowNodeSorter;
exports.RowPositionUtils = RowPositionUtils;
exports.RowRenderer = RowRenderer;
exports.ScalarFilter = ScalarFilter;
exports.ScrollVisibleService = ScrollVisibleService;
exports.SelectCellEditor = SelectCellEditor;
exports.SelectableService = SelectableService;
exports.SelectionController = SelectionController;
exports.SetLeftFeature = SetLeftFeature;
exports.SimpleFilter = SimpleFilter;
exports.SortController = SortController;
exports.StandardMenuFactory = StandardMenuFactory;
exports.StylingService = StylingService;
exports.TabbedLayout = TabbedLayout;
exports.TemplateService = TemplateService;
exports.TestHeadless = TestHeadless;
exports.TextCellEditor = TextCellEditor;
exports.TextFilter = TextFilter;
exports.TextFloatingFilter = TextFloatingFilter;
exports.Timer = Timer;
exports.TooltipFeature = TooltipFeature;
exports.TouchListener = TouchListener;
exports.UserComponentFactory = UserComponentFactory;
exports.UserComponentRegistry = UserComponentRegistry;
exports.ValueCache = ValueCache;
exports.ValueFormatterService = ValueFormatterService;
exports.ValueService = ValueService;
exports.VanillaFrameworkOverrides = VanillaFrameworkOverrides;
exports.VirtualList = VirtualList;
exports.XmlFactory = XmlFactory;
exports.ZipContainer = ZipContainer;
exports._ = _;
exports.defaultGroupComparator = defaultGroupComparator;
exports.initialiseAgGridWithAngular1 = initialiseAgGridWithAngular1;
exports.initialiseAgGridWithWebComponents = initialiseAgGridWithWebComponents;
exports.simpleHttpRequest = simpleHttpRequest;
exports.stringToArray = stringToArray;

/***/ }),

/***/ 693497:
/*!************************************************************************!*\
  !*** ./node_modules/ag-grid-enterprise/dist/ag-grid-enterprise.cjs.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/**
 * ag-grid-enterprise - AG Grid Enterprise Features * @version v25.3.0
 * @link http://www.ag-grid.com/
' * @license Commercial
 */



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
var agGridCommunity = __webpack_require__(/*! ag-grid-community */ 793564);
var __extends =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var LicenseManager = /** @class */function (_super) {
  __extends(LicenseManager, _super);
  function LicenseManager() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.watermarkMessage = undefined;
    return _this;
  }
  LicenseManager_1 = LicenseManager;
  LicenseManager.prototype.validateLicense = function () {
    if (agGridCommunity._.missingOrEmpty(LicenseManager_1.licenseKey)) {
      this.outputMissingLicenseKey();
    } else if (LicenseManager_1.licenseKey.length > 32) {
      var _a = LicenseManager_1.extractLicenseComponents(LicenseManager_1.licenseKey),
        md5 = _a.md5,
        license = _a.license,
        version = _a.version,
        isTrial = _a.isTrial;
      if (md5 === this.md5.md5(license)) {
        if (agGridCommunity._.exists(version) && version) {
          this.validateLicenseKeyForVersion(version, !!isTrial, license);
        } else {
          this.validateLegacyKey(license);
        }
      } else {
        this.outputInvalidLicenseKey();
      }
    } else {
      this.outputInvalidLicenseKey();
    }
  };
  LicenseManager.extractExpiry = function (license) {
    var restrictionHashed = license.substring(license.lastIndexOf('_') + 1, license.length);
    return new Date(parseInt(LicenseManager_1.decode(restrictionHashed), 10));
  };
  LicenseManager.extractLicenseComponents = function (licenseKey) {
    // when users copy the license key from a PDF extra zero width characters are sometimes copied too
    // carriage returns and line feeds are problematic too
    // all of which causes license key validation to fail - strip these out
    var cleanedLicenseKey = licenseKey.replace(/[\u200B-\u200D\uFEFF]/g, '');
    cleanedLicenseKey = cleanedLicenseKey.replace(/\r?\n|\r/g, '');
    var hashStart = cleanedLicenseKey.length - 32;
    var md5 = cleanedLicenseKey.substring(hashStart);
    var license = cleanedLicenseKey.substring(0, hashStart);
    var _a = LicenseManager_1.extractBracketedInformation(cleanedLicenseKey),
      version = _a[0],
      isTrial = _a[1];
    return {
      md5: md5,
      license: license,
      version: version,
      isTrial: isTrial
    };
  };
  LicenseManager.prototype.getLicenseDetails = function (licenseKey) {
    var _a = LicenseManager_1.extractLicenseComponents(licenseKey),
      md5 = _a.md5,
      license = _a.license,
      version = _a.version,
      isTrial = _a.isTrial;
    var valid = md5 === this.md5.md5(license);
    var expiry = null;
    if (valid) {
      expiry = LicenseManager_1.extractExpiry(license);
      valid = !isNaN(expiry.getTime());
    }
    return {
      licenseKey: licenseKey,
      valid: valid,
      expiry: valid ? LicenseManager_1.formatDate(expiry) : null,
      version: version ? version : 'legacy',
      isTrial: isTrial
    };
  };
  LicenseManager.prototype.isDisplayWatermark = function () {
    return !agGridCommunity._.missingOrEmpty(this.watermarkMessage);
  };
  LicenseManager.prototype.getWatermarkMessage = function () {
    return this.watermarkMessage || '';
  };
  LicenseManager.formatDate = function (date) {
    var monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    var day = date.getDate();
    var monthIndex = date.getMonth();
    var year = date.getFullYear();
    return day + ' ' + monthNames[monthIndex] + ' ' + year;
  };
  LicenseManager.getGridReleaseDate = function () {
    return new Date(parseInt(LicenseManager_1.decode(LicenseManager_1.RELEASE_INFORMATION), 10));
  };
  LicenseManager.decode = function (input) {
    var keystr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
    var t = '';
    var n, r, i;
    var s, o, u, a;
    var f = 0;
    var e = input.replace(/[^A-Za-z0-9+/=]/g, '');
    while (f < e.length) {
      s = keystr.indexOf(e.charAt(f++));
      o = keystr.indexOf(e.charAt(f++));
      u = keystr.indexOf(e.charAt(f++));
      a = keystr.indexOf(e.charAt(f++));
      n = s << 2 | o >> 4;
      r = (o & 15) << 4 | u >> 2;
      i = (u & 3) << 6 | a;
      t = t + String.fromCharCode(n);
      if (u != 64) {
        t = t + String.fromCharCode(r);
      }
      if (a != 64) {
        t = t + String.fromCharCode(i);
      }
    }
    t = LicenseManager_1.utf8_decode(t);
    return t;
  };
  LicenseManager.utf8_decode = function (input) {
    input = input.replace(/rn/g, 'n');
    var t = '';
    for (var n = 0; n < input.length; n++) {
      var r = input.charCodeAt(n);
      if (r < 128) {
        t += String.fromCharCode(r);
      } else if (r > 127 && r < 2048) {
        t += String.fromCharCode(r >> 6 | 192);
        t += String.fromCharCode(r & 63 | 128);
      } else {
        t += String.fromCharCode(r >> 12 | 224);
        t += String.fromCharCode(r >> 6 & 63 | 128);
        t += String.fromCharCode(r & 63 | 128);
      }
    }
    return t;
  };
  LicenseManager.setLicenseKey = function (licenseKey) {
    LicenseManager_1.licenseKey = licenseKey;
  };
  LicenseManager.extractBracketedInformation = function (licenseKey) {
    var matches = licenseKey.split('[').filter(function (v) {
      return v.indexOf(']') > -1;
    }).map(function (value) {
      return value.split(']')[0];
    });
    if (!matches || matches.length === 0) {
      return [null, null];
    }
    var isTrial = matches.filter(function (match) {
      return match === 'TRIAL';
    }).length === 1;
    var version = matches.filter(function (match) {
      return match.indexOf("v") === 0;
    }).map(function (match) {
      return match.replace(/^v/, "");
    })[0];
    return [version, isTrial];
  };
  LicenseManager.prototype.validateLicenseKeyForVersion = function (version, isTrial, license) {
    if (version !== '2') {
      return;
    }
    if (isTrial) {
      this.validateForTrial(license);
    } else {
      this.validateLegacyKey(license);
    }
  };
  LicenseManager.prototype.validateLegacyKey = function (license) {
    var gridReleaseDate = LicenseManager_1.getGridReleaseDate();
    var expiry = LicenseManager_1.extractExpiry(license);
    var valid = false;
    var current = false;
    if (!isNaN(expiry.getTime())) {
      valid = true;
      current = gridReleaseDate < expiry;
    }
    if (!valid) {
      this.outputInvalidLicenseKey();
    } else if (!current) {
      var formattedExpiryDate = LicenseManager_1.formatDate(expiry);
      var formattedReleaseDate = LicenseManager_1.formatDate(gridReleaseDate);
      this.outputIncompatibleVersion(formattedExpiryDate, formattedReleaseDate);
    }
  };
  LicenseManager.prototype.validateForTrial = function (license) {
    var expiry = LicenseManager_1.extractExpiry(license);
    var now = new Date();
    var valid = false;
    var current = false;
    if (!isNaN(expiry.getTime())) {
      valid = true;
      current = expiry > now;
    }
    if (!valid) {
      this.outputInvalidLicenseKey();
    } else if (!current) {
      var formattedExpiryDate = LicenseManager_1.formatDate(expiry);
      this.outputExpiredTrialKey(formattedExpiryDate);
    }
  };
  LicenseManager.prototype.outputInvalidLicenseKey = function () {
    console.error('*****************************************************************************************************************');
    console.error('***************************************** AG Grid Enterprise License ********************************************');
    console.error('********************************************* Invalid License ***************************************************');
    console.error('* Your license for AG Grid Enterprise is not valid - please contact info@ag-grid.com to obtain a valid license. *');
    console.error('*****************************************************************************************************************');
    console.error('*****************************************************************************************************************');
    this.watermarkMessage = "Invalid License";
  };
  LicenseManager.prototype.outputExpiredTrialKey = function (formattedExpiryDate) {
    console.error('****************************************************************************************************************');
    console.error('***************************************** AG Grid Enterprise License *******************************************');
    console.error('*****************************************   Trial Period Expired.    *******************************************');
    console.error("* Your license for AG Grid Enterprise expired on " + formattedExpiryDate + ".                                                *");
    console.error('* Please email info@ag-grid.com to purchase a license.                                                         *');
    console.error('****************************************************************************************************************');
    console.error('****************************************************************************************************************');
    this.watermarkMessage = "Trial Period Expired";
  };
  LicenseManager.prototype.outputMissingLicenseKey = function () {
    console.error('****************************************************************************************************************');
    console.error('***************************************** AG Grid Enterprise License *******************************************');
    console.error('****************************************** License Key Not Found ***********************************************');
    console.error('* All AG Grid Enterprise features are unlocked.                                                                *');
    console.error('* This is an evaluation only version, it is not licensed for development projects intended for production.     *');
    console.error('* If you want to hide the watermark, please email info@ag-grid.com for a trial license.                        *');
    console.error('****************************************************************************************************************');
    console.error('****************************************************************************************************************');
    this.watermarkMessage = "For Trial Use Only";
  };
  LicenseManager.prototype.outputIncompatibleVersion = function (formattedExpiryDate, formattedReleaseDate) {
    console.error('****************************************************************************************************************************');
    console.error('****************************************************************************************************************************');
    console.error('*                                             AG Grid Enterprise License                                                   *');
    console.error('*                           License not compatible with installed version of AG Grid Enterprise.                           *');
    console.error('*                                                                                                                          *');
    console.error("* Your AG Grid License entitles you to all versions of AG Grid that we release within the time covered by your license     *");
    console.error("* - typically we provide one year licenses which entitles you to all releases / updates of AG Grid within that year.       *");
    console.error("* Your license has an end (expiry) date which stops the license key working with versions of AG Grid released after the    *");
    console.error("* license end date. The license key that you have expires on " + formattedExpiryDate + ", however the version of AG Grid you    *");
    console.error("* are trying to use was released on " + formattedReleaseDate + ".                                                               *");
    console.error('*                                                                                                                          *');
    console.error('* Please contact info@ag-grid.com to renew your subscription to new versions and get a new license key to work with this   *');
    console.error('* version of AG Grid.                                                                                                      *');
    console.error('****************************************************************************************************************************');
    console.error('****************************************************************************************************************************');
    this.watermarkMessage = "License Expired";
  };
  var LicenseManager_1;
  LicenseManager.RELEASE_INFORMATION = 'MTYyMTg3MjE2MzYyOQ==';
  __decorate([agGridCommunity.Autowired('md5')], LicenseManager.prototype, "md5", void 0);
  __decorate([agGridCommunity.PreConstruct], LicenseManager.prototype, "validateLicense", null);
  LicenseManager = LicenseManager_1 = __decorate([agGridCommunity.Bean('licenseManager')], LicenseManager);
  return LicenseManager;
}(agGridCommunity.BeanStub);
var __extends$1 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var MD5 = /** @class */function (_super) {
  __extends$1(MD5, _super);
  function MD5() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.ieCompatibility = false;
    return _this;
  }
  MD5.prototype.init = function () {
    this.ieCompatibility = this.md5('hello') != '5d41402abc4b2a76b9719d911017c592';
  };
  MD5.prototype.md5cycle = function (x, k) {
    var a = x[0],
      b = x[1],
      c = x[2],
      d = x[3];
    a = this.ff(a, b, c, d, k[0], 7, -680876936);
    d = this.ff(d, a, b, c, k[1], 12, -389564586);
    c = this.ff(c, d, a, b, k[2], 17, 606105819);
    b = this.ff(b, c, d, a, k[3], 22, -1044525330);
    a = this.ff(a, b, c, d, k[4], 7, -176418897);
    d = this.ff(d, a, b, c, k[5], 12, 1200080426);
    c = this.ff(c, d, a, b, k[6], 17, -1473231341);
    b = this.ff(b, c, d, a, k[7], 22, -45705983);
    a = this.ff(a, b, c, d, k[8], 7, 1770035416);
    d = this.ff(d, a, b, c, k[9], 12, -1958414417);
    c = this.ff(c, d, a, b, k[10], 17, -42063);
    b = this.ff(b, c, d, a, k[11], 22, -1990404162);
    a = this.ff(a, b, c, d, k[12], 7, 1804603682);
    d = this.ff(d, a, b, c, k[13], 12, -40341101);
    c = this.ff(c, d, a, b, k[14], 17, -1502002290);
    b = this.ff(b, c, d, a, k[15], 22, 1236535329);
    a = this.gg(a, b, c, d, k[1], 5, -165796510);
    d = this.gg(d, a, b, c, k[6], 9, -1069501632);
    c = this.gg(c, d, a, b, k[11], 14, 643717713);
    b = this.gg(b, c, d, a, k[0], 20, -373897302);
    a = this.gg(a, b, c, d, k[5], 5, -701558691);
    d = this.gg(d, a, b, c, k[10], 9, 38016083);
    c = this.gg(c, d, a, b, k[15], 14, -660478335);
    b = this.gg(b, c, d, a, k[4], 20, -405537848);
    a = this.gg(a, b, c, d, k[9], 5, 568446438);
    d = this.gg(d, a, b, c, k[14], 9, -1019803690);
    c = this.gg(c, d, a, b, k[3], 14, -187363961);
    b = this.gg(b, c, d, a, k[8], 20, 1163531501);
    a = this.gg(a, b, c, d, k[13], 5, -1444681467);
    d = this.gg(d, a, b, c, k[2], 9, -51403784);
    c = this.gg(c, d, a, b, k[7], 14, 1735328473);
    b = this.gg(b, c, d, a, k[12], 20, -1926607734);
    a = this.hh(a, b, c, d, k[5], 4, -378558);
    d = this.hh(d, a, b, c, k[8], 11, -2022574463);
    c = this.hh(c, d, a, b, k[11], 16, 1839030562);
    b = this.hh(b, c, d, a, k[14], 23, -35309556);
    a = this.hh(a, b, c, d, k[1], 4, -1530992060);
    d = this.hh(d, a, b, c, k[4], 11, 1272893353);
    c = this.hh(c, d, a, b, k[7], 16, -155497632);
    b = this.hh(b, c, d, a, k[10], 23, -1094730640);
    a = this.hh(a, b, c, d, k[13], 4, 681279174);
    d = this.hh(d, a, b, c, k[0], 11, -358537222);
    c = this.hh(c, d, a, b, k[3], 16, -722521979);
    b = this.hh(b, c, d, a, k[6], 23, 76029189);
    a = this.hh(a, b, c, d, k[9], 4, -640364487);
    d = this.hh(d, a, b, c, k[12], 11, -421815835);
    c = this.hh(c, d, a, b, k[15], 16, 530742520);
    b = this.hh(b, c, d, a, k[2], 23, -995338651);
    a = this.ii(a, b, c, d, k[0], 6, -198630844);
    d = this.ii(d, a, b, c, k[7], 10, 1126891415);
    c = this.ii(c, d, a, b, k[14], 15, -1416354905);
    b = this.ii(b, c, d, a, k[5], 21, -57434055);
    a = this.ii(a, b, c, d, k[12], 6, 1700485571);
    d = this.ii(d, a, b, c, k[3], 10, -1894986606);
    c = this.ii(c, d, a, b, k[10], 15, -1051523);
    b = this.ii(b, c, d, a, k[1], 21, -2054922799);
    a = this.ii(a, b, c, d, k[8], 6, 1873313359);
    d = this.ii(d, a, b, c, k[15], 10, -30611744);
    c = this.ii(c, d, a, b, k[6], 15, -1560198380);
    b = this.ii(b, c, d, a, k[13], 21, 1309151649);
    a = this.ii(a, b, c, d, k[4], 6, -145523070);
    d = this.ii(d, a, b, c, k[11], 10, -1120210379);
    c = this.ii(c, d, a, b, k[2], 15, 718787259);
    b = this.ii(b, c, d, a, k[9], 21, -343485551);
    x[0] = this.add32(a, x[0]);
    x[1] = this.add32(b, x[1]);
    x[2] = this.add32(c, x[2]);
    x[3] = this.add32(d, x[3]);
  };
  MD5.prototype.cmn = function (q, a, b, x, s, t) {
    a = this.add32(this.add32(a, q), this.add32(x, t));
    return this.add32(a << s | a >>> 32 - s, b);
  };
  MD5.prototype.ff = function (a, b, c, d, x, s, t) {
    return this.cmn(b & c | ~b & d, a, b, x, s, t);
  };
  MD5.prototype.gg = function (a, b, c, d, x, s, t) {
    return this.cmn(b & d | c & ~d, a, b, x, s, t);
  };
  MD5.prototype.hh = function (a, b, c, d, x, s, t) {
    return this.cmn(b ^ c ^ d, a, b, x, s, t);
  };
  MD5.prototype.ii = function (a, b, c, d, x, s, t) {
    return this.cmn(c ^ (b | ~d), a, b, x, s, t);
  };
  MD5.prototype.md51 = function (s) {
    var n = s.length;
    var state = [1732584193, -271733879, -1732584194, 271733878];
    var i;
    for (i = 64; i <= s.length; i += 64) {
      this.md5cycle(state, this.md5blk(s.substring(i - 64, i)));
    }
    s = s.substring(i - 64);
    var tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    for (i = 0; i < s.length; i++) {
      tail[i >> 2] |= s.charCodeAt(i) << (i % 4 << 3);
    }
    tail[i >> 2] |= 0x80 << (i % 4 << 3);
    if (i > 55) {
      this.md5cycle(state, tail);
      for (i = 0; i < 16; i++) {
        tail[i] = 0;
      }
    }
    tail[14] = n * 8;
    this.md5cycle(state, tail);
    return state;
  };
  /* there needs to be support for Unicode here, * unless we pretend that we can redefine the MD-5
   * algorithm for multi-byte characters (perhaps by adding every four 16-bit characters and
   * shortening the sum to 32 bits). Otherwise I suthis.ggest performing MD-5 as if every character
   * was two bytes--e.g., 0040 0025 = @%--but then how will an ordinary MD-5 sum be matched?
   * There is no way to standardize text to something like UTF-8 before transformation; speed cost is
   * utterly prohibitive. The JavaScript standard itself needs to look at this: it should start
   * providing access to strings as preformed UTF-8 8-bit unsigned value arrays.
   */
  MD5.prototype.md5blk = function (s) {
    var md5blks = [];
    /* Andy King said do it this way. */
    for (var i = 0; i < 64; i += 4) {
      md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);
    }
    return md5blks;
  };
  MD5.prototype.rhex = function (n) {
    var hex_chr = '0123456789abcdef'.split('');
    var s = '',
      j = 0;
    for (; j < 4; j++) {
      s += hex_chr[n >> j * 8 + 4 & 0x0F] + hex_chr[n >> j * 8 & 0x0F];
    }
    return s;
  };
  MD5.prototype.hex = function (x) {
    for (var i = 0; i < x.length; i++) {
      x[i] = this.rhex(x[i]);
    }
    return x.join('');
  };
  MD5.prototype.md5 = function (s) {
    return this.hex(this.md51(s));
  };
  MD5.prototype.add32 = function (a, b) {
    return this.ieCompatibility ? this.add32Compat(a, b) : this.add32Std(a, b);
  };
  /* this function is much faster, so if possible we use it. Some IEs are the only ones I know of that
   need the idiotic second function, generated by an if clause.  */
  MD5.prototype.add32Std = function (a, b) {
    return a + b & 0xFFFFFFFF;
  };
  MD5.prototype.add32Compat = function (x, y) {
    var lsw = (x & 0xFFFF) + (y & 0xFFFF),
      msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return msw << 16 | lsw & 0xFFFF;
  };
  __decorate$1([agGridCommunity.PostConstruct], MD5.prototype, "init", null);
  MD5 = __decorate$1([agGridCommunity.Bean('md5')], MD5);
  return MD5;
}(agGridCommunity.BeanStub);
var __extends$2 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var WatermarkComp = /** @class */function (_super) {
  __extends$2(WatermarkComp, _super);
  function WatermarkComp() {
    return _super.call(this, "<div class=\"ag-watermark\">\n                    <div ref=\"eLicenseTextRef\" class=\"ag-watermark-text\"></div>\n               </div>") || this;
  }
  WatermarkComp.prototype.postConstruct = function () {
    var _this = this;
    var show = this.shouldDisplayWatermark();
    agGridCommunity._.addOrRemoveCssClass(this.getGui(), 'ag-hidden', !show);
    if (show) {
      this.eLicenseTextRef.innerText = this.licenseManager.getWatermarkMessage();
      window.setTimeout(function () {
        return _this.addCssClass('ag-opacity-zero');
      }, 0);
      window.setTimeout(function () {
        return _this.addCssClass('ag-hidden');
      }, 5000);
    }
  };
  WatermarkComp.prototype.shouldDisplayWatermark = function () {
    var isDisplayWatermark = this.licenseManager.isDisplayWatermark();
    var isWhiteListURL = location.hostname.match('^127\.0\.0\.1|localhost|www\.ag-grid\.com$') != null;
    var isForceWatermark = location.pathname ? location.pathname.indexOf('forceWatermark') !== -1 : false;
    return isForceWatermark || isDisplayWatermark && !isWhiteListURL;
  };
  __decorate$2([agGridCommunity.Autowired('licenseManager')], WatermarkComp.prototype, "licenseManager", void 0);
  __decorate$2([agGridCommunity.RefSelector('eLicenseTextRef')], WatermarkComp.prototype, "eLicenseTextRef", void 0);
  __decorate$2([agGridCommunity.PostConstruct], WatermarkComp.prototype, "postConstruct", null);
  return WatermarkComp;
}(agGridCommunity.Component);
var EnterpriseCoreModule = {
  moduleName: agGridCommunity.ModuleNames.EnterpriseCoreModule,
  beans: [LicenseManager, MD5],
  agStackComponents: [{
    componentName: 'AgWatermark',
    componentClass: WatermarkComp
  }]
};
var __extends$3 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$3 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ExpandState;
(function (ExpandState) {
  ExpandState[ExpandState["EXPANDED"] = 0] = "EXPANDED";
  ExpandState[ExpandState["COLLAPSED"] = 1] = "COLLAPSED";
  ExpandState[ExpandState["INDETERMINATE"] = 2] = "INDETERMINATE";
})(ExpandState || (ExpandState = {}));
var PrimaryColsHeaderPanel = /** @class */function (_super) {
  __extends$3(PrimaryColsHeaderPanel, _super);
  function PrimaryColsHeaderPanel() {
    return _super.call(this, PrimaryColsHeaderPanel.TEMPLATE) || this;
  }
  PrimaryColsHeaderPanel.prototype.postConstruct = function () {
    var _this = this;
    this.createExpandIcons();
    this.addManagedListener(this.eExpand, 'click', this.onExpandClicked.bind(this));
    this.addManagedListener(this.eExpand, 'keydown', function (e) {
      if (e.keyCode === agGridCommunity.KeyCode.SPACE) {
        _this.onExpandClicked();
      }
    });
    this.addManagedListener(this.eSelect.getInputElement(), 'click', this.onSelectClicked.bind(this));
    this.eFilterTextField.onValueChange(function () {
      return _this.onFilterTextChanged();
    });
    this.addManagedListener(this.eFilterTextField.getInputElement(), 'keypress', this.onMiniFilterKeyPress.bind(this));
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_NEW_COLUMNS_LOADED, this.showOrHideOptions.bind(this));
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    this.eSelect.setInputAriaLabel(translate('ariaColumnSelectAll', 'Toggle Select All Columns'));
    this.eFilterTextField.setInputAriaLabel(translate('ariaFilterColumnsInput', 'Filter Columns Input'));
  };
  PrimaryColsHeaderPanel.prototype.init = function (params) {
    this.params = params;
    if (this.columnController.isReady()) {
      this.showOrHideOptions();
    }
  };
  PrimaryColsHeaderPanel.prototype.createExpandIcons = function () {
    this.eExpand.appendChild(this.eExpandChecked = agGridCommunity._.createIconNoSpan('columnSelectOpen', this.gridOptionsWrapper));
    this.eExpand.appendChild(this.eExpandUnchecked = agGridCommunity._.createIconNoSpan('columnSelectClosed', this.gridOptionsWrapper));
    this.eExpand.appendChild(this.eExpandIndeterminate = agGridCommunity._.createIconNoSpan('columnSelectIndeterminate', this.gridOptionsWrapper));
    this.setExpandState(ExpandState.EXPANDED);
  };
  // we only show expand / collapse if we are showing columns
  PrimaryColsHeaderPanel.prototype.showOrHideOptions = function () {
    var showFilter = !this.params.suppressColumnFilter;
    var showSelect = !this.params.suppressColumnSelectAll;
    var showExpand = !this.params.suppressColumnExpandAll;
    var groupsPresent = this.columnController.isPrimaryColumnGroupsPresent();
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    this.eFilterTextField.setInputPlaceholder(translate('searchOoo', 'Search...'));
    agGridCommunity._.setDisplayed(this.eFilterTextField.getGui(), showFilter);
    agGridCommunity._.setDisplayed(this.eSelect.getGui(), showSelect);
    agGridCommunity._.setDisplayed(this.eExpand, showExpand && groupsPresent);
  };
  PrimaryColsHeaderPanel.prototype.onFilterTextChanged = function () {
    var _this = this;
    if (!this.onFilterTextChangedDebounced) {
      this.onFilterTextChangedDebounced = agGridCommunity._.debounce(function () {
        var filterText = _this.eFilterTextField.getValue();
        _this.dispatchEvent({
          type: "filterChanged",
          filterText: filterText
        });
      }, PrimaryColsHeaderPanel.DEBOUNCE_DELAY);
    }
    this.onFilterTextChangedDebounced();
  };
  PrimaryColsHeaderPanel.prototype.onMiniFilterKeyPress = function (e) {
    var _this = this;
    if (agGridCommunity._.isKeyPressed(e, agGridCommunity.KeyCode.ENTER)) {
      // we need to add a delay that corresponds to the filter text debounce delay to ensure
      // the text filtering has happened, otherwise all columns will be deselected
      setTimeout(function () {
        return _this.onSelectClicked();
      }, PrimaryColsHeaderPanel.DEBOUNCE_DELAY);
    }
  };
  PrimaryColsHeaderPanel.prototype.onSelectClicked = function () {
    this.dispatchEvent({
      type: this.selectState ? 'unselectAll' : 'selectAll'
    });
  };
  PrimaryColsHeaderPanel.prototype.onExpandClicked = function () {
    this.dispatchEvent({
      type: this.expandState === ExpandState.EXPANDED ? 'collapseAll' : 'expandAll'
    });
  };
  PrimaryColsHeaderPanel.prototype.setExpandState = function (state) {
    this.expandState = state;
    agGridCommunity._.setDisplayed(this.eExpandChecked, this.expandState === ExpandState.EXPANDED);
    agGridCommunity._.setDisplayed(this.eExpandUnchecked, this.expandState === ExpandState.COLLAPSED);
    agGridCommunity._.setDisplayed(this.eExpandIndeterminate, this.expandState === ExpandState.INDETERMINATE);
  };
  PrimaryColsHeaderPanel.prototype.setSelectionState = function (state) {
    this.selectState = state;
    this.eSelect.setValue(this.selectState);
  };
  PrimaryColsHeaderPanel.DEBOUNCE_DELAY = 300;
  PrimaryColsHeaderPanel.TEMPLATE = "<div class=\"ag-column-select-header\" role=\"presentation\" tabindex=\"-1\">\n            <div ref=\"eExpand\" class=\"ag-column-select-header-icon\" tabindex=\"0\"></div>\n            <ag-checkbox ref=\"eSelect\" class=\"ag-column-select-header-checkbox\"></ag-checkbox>\n            <ag-input-text-field class=\"ag-column-select-header-filter-wrapper\" ref=\"eFilterTextField\"></ag-input-text-field>\n        </div>";
  __decorate$3([agGridCommunity.Autowired('columnController')], PrimaryColsHeaderPanel.prototype, "columnController", void 0);
  __decorate$3([agGridCommunity.RefSelector('eExpand')], PrimaryColsHeaderPanel.prototype, "eExpand", void 0);
  __decorate$3([agGridCommunity.RefSelector('eSelect')], PrimaryColsHeaderPanel.prototype, "eSelect", void 0);
  __decorate$3([agGridCommunity.RefSelector('eFilterTextField')], PrimaryColsHeaderPanel.prototype, "eFilterTextField", void 0);
  __decorate$3([agGridCommunity.PostConstruct], PrimaryColsHeaderPanel.prototype, "postConstruct", null);
  return PrimaryColsHeaderPanel;
}(agGridCommunity.Component);
var ColumnModelItem = /** @class */function () {
  function ColumnModelItem(displayName, columnOrGroup, dept, group, expanded) {
    if (group === void 0) {
      group = false;
    }
    this.eventService = new agGridCommunity.EventService();
    this.displayName = displayName;
    this.dept = dept;
    this.group = group;
    if (group) {
      this.columnGroup = columnOrGroup;
      this.expanded = expanded;
      this.children = [];
    } else {
      this.column = columnOrGroup;
    }
  }
  ColumnModelItem.prototype.isGroup = function () {
    return this.group;
  };
  ColumnModelItem.prototype.getDisplayName = function () {
    return this.displayName;
  };
  ColumnModelItem.prototype.getColumnGroup = function () {
    return this.columnGroup;
  };
  ColumnModelItem.prototype.getColumn = function () {
    return this.column;
  };
  ColumnModelItem.prototype.getDept = function () {
    return this.dept;
  };
  ColumnModelItem.prototype.isExpanded = function () {
    return !!this.expanded;
  };
  ColumnModelItem.prototype.getChildren = function () {
    return this.children;
  };
  ColumnModelItem.prototype.isPassesFilter = function () {
    return this.passesFilter;
  };
  ColumnModelItem.prototype.setExpanded = function (expanded) {
    if (expanded === this.expanded) {
      return;
    }
    this.expanded = expanded;
    this.eventService.dispatchEvent({
      type: ColumnModelItem.EVENT_EXPANDED_CHANGED
    });
  };
  ColumnModelItem.prototype.setPassesFilter = function (passesFilter) {
    this.passesFilter = passesFilter;
  };
  ColumnModelItem.prototype.addEventListener = function (eventType, listener) {
    this.eventService.addEventListener(eventType, listener);
  };
  ColumnModelItem.prototype.removeEventListener = function (eventType, listener) {
    this.eventService.removeEventListener(eventType, listener);
  };
  ColumnModelItem.EVENT_EXPANDED_CHANGED = 'expandedChanged';
  return ColumnModelItem;
}();
var __extends$4 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$4 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ToolPanelColumnGroupComp = /** @class */function (_super) {
  __extends$4(ToolPanelColumnGroupComp, _super);
  function ToolPanelColumnGroupComp(modelItem, allowDragging, eventType, focusWrapper) {
    var _this = _super.call(this) || this;
    _this.modelItem = modelItem;
    _this.allowDragging = allowDragging;
    _this.eventType = eventType;
    _this.focusWrapper = focusWrapper;
    _this.processingColumnStateChange = false;
    _this.modelItem = modelItem;
    _this.columnGroup = modelItem.getColumnGroup();
    _this.columnDept = modelItem.getDept();
    _this.allowDragging = allowDragging;
    return _this;
  }
  ToolPanelColumnGroupComp.prototype.init = function () {
    this.setTemplate(ToolPanelColumnGroupComp.TEMPLATE);
    this.eDragHandle = agGridCommunity._.createIconNoSpan('columnDrag', this.gridOptionsWrapper);
    agGridCommunity._.addCssClass(this.eDragHandle, 'ag-drag-handle');
    agGridCommunity._.addCssClass(this.eDragHandle, 'ag-column-select-column-group-drag-handle');
    this.cbSelect.getGui().insertAdjacentElement('afterend', this.eDragHandle);
    this.displayName = this.columnController.getDisplayNameForOriginalColumnGroup(null, this.columnGroup, this.eventType);
    if (agGridCommunity._.missing(this.displayName)) {
      this.displayName = '>>';
    }
    this.eLabel.innerHTML = this.displayName ? this.displayName : '';
    this.setupExpandContract();
    this.addCssClass('ag-column-select-indent-' + this.columnDept);
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onColumnStateChanged.bind(this));
    this.addManagedListener(this.eLabel, 'click', this.onLabelClicked.bind(this));
    this.addManagedListener(this.cbSelect, agGridCommunity.AgCheckbox.EVENT_CHANGED, this.onCheckboxChanged.bind(this));
    this.addManagedListener(this.modelItem, ColumnModelItem.EVENT_EXPANDED_CHANGED, this.onExpandChanged.bind(this));
    this.addManagedListener(this.focusWrapper, 'keydown', this.handleKeyDown.bind(this));
    this.setOpenClosedIcons();
    this.setupDragging();
    this.onColumnStateChanged();
    this.addVisibilityListenersToAllChildren();
    this.refreshAriaExpanded();
    this.refreshAriaLabel();
    this.setupTooltip();
    agGridCommunity.CssClassApplier.addToolPanelClassesFromColDef(this.columnGroup.getColGroupDef(), this.getGui(), this.gridOptionsWrapper, null, this.columnGroup);
  };
  ToolPanelColumnGroupComp.prototype.setupTooltip = function () {
    var _this = this;
    var colGroupDef = this.columnGroup.getColGroupDef();
    if (!colGroupDef) {
      return;
    }
    var refresh = function () {
      var newTooltipText = colGroupDef.headerTooltip;
      _this.setTooltip(agGridCommunity._.escapeString(newTooltipText));
    };
    refresh();
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_NEW_COLUMNS_LOADED, refresh);
  };
  ToolPanelColumnGroupComp.prototype.getTooltipParams = function () {
    var res = _super.prototype.getTooltipParams.call(this);
    res.location = 'columnToolPanelColumnGroup';
    return res;
  };
  ToolPanelColumnGroupComp.prototype.handleKeyDown = function (e) {
    switch (e.keyCode) {
      case agGridCommunity.KeyCode.LEFT:
        e.preventDefault();
        this.modelItem.setExpanded(false);
        break;
      case agGridCommunity.KeyCode.RIGHT:
        e.preventDefault();
        this.modelItem.setExpanded(true);
        break;
      case agGridCommunity.KeyCode.SPACE:
        e.preventDefault();
        if (this.isSelectable()) {
          this.onSelectAllChanged(!this.isSelected());
        }
        break;
    }
  };
  ToolPanelColumnGroupComp.prototype.addVisibilityListenersToAllChildren = function () {
    var _this = this;
    this.columnGroup.getLeafColumns().forEach(function (column) {
      _this.addManagedListener(column, agGridCommunity.Column.EVENT_VISIBLE_CHANGED, _this.onColumnStateChanged.bind(_this));
      _this.addManagedListener(column, agGridCommunity.Column.EVENT_VALUE_CHANGED, _this.onColumnStateChanged.bind(_this));
      _this.addManagedListener(column, agGridCommunity.Column.EVENT_PIVOT_CHANGED, _this.onColumnStateChanged.bind(_this));
      _this.addManagedListener(column, agGridCommunity.Column.EVENT_ROW_GROUP_CHANGED, _this.onColumnStateChanged.bind(_this));
    });
  };
  ToolPanelColumnGroupComp.prototype.setupDragging = function () {
    var _this = this;
    if (!this.allowDragging) {
      agGridCommunity._.setDisplayed(this.eDragHandle, false);
      return;
    }
    var dragSource = {
      type: agGridCommunity.DragSourceType.ToolPanel,
      eElement: this.eDragHandle,
      dragItemName: this.displayName,
      getDragItem: function () {
        return _this.createDragItem();
      }
    };
    this.dragAndDropService.addDragSource(dragSource, true);
    this.addDestroyFunc(function () {
      return _this.dragAndDropService.removeDragSource(dragSource);
    });
  };
  ToolPanelColumnGroupComp.prototype.createDragItem = function () {
    var visibleState = {};
    this.columnGroup.getLeafColumns().forEach(function (col) {
      visibleState[col.getId()] = col.isVisible();
    });
    return {
      columns: this.columnGroup.getLeafColumns(),
      visibleState: visibleState
    };
  };
  ToolPanelColumnGroupComp.prototype.setupExpandContract = function () {
    this.eGroupClosedIcon.appendChild(agGridCommunity._.createIcon('columnSelectClosed', this.gridOptionsWrapper, null));
    this.eGroupOpenedIcon.appendChild(agGridCommunity._.createIcon('columnSelectOpen', this.gridOptionsWrapper, null));
    this.addManagedListener(this.eGroupClosedIcon, 'click', this.onExpandOrContractClicked.bind(this));
    this.addManagedListener(this.eGroupOpenedIcon, 'click', this.onExpandOrContractClicked.bind(this));
    var touchListener = new agGridCommunity.TouchListener(this.eColumnGroupIcons, true);
    this.addManagedListener(touchListener, agGridCommunity.TouchListener.EVENT_TAP, this.onExpandOrContractClicked.bind(this));
    this.addDestroyFunc(touchListener.destroy.bind(touchListener));
  };
  ToolPanelColumnGroupComp.prototype.onLabelClicked = function () {
    var nextState = !this.cbSelect.getValue();
    this.onChangeCommon(nextState);
  };
  ToolPanelColumnGroupComp.prototype.onCheckboxChanged = function (event) {
    this.onChangeCommon(event.selected);
  };
  ToolPanelColumnGroupComp.prototype.getVisibleLeafColumns = function () {
    var childColumns = [];
    var extractCols = function (children) {
      children.forEach(function (child) {
        if (!child.isPassesFilter()) {
          return;
        }
        if (child.isGroup()) {
          extractCols(child.getChildren());
        } else {
          childColumns.push(child.getColumn());
        }
      });
    };
    extractCols(this.modelItem.getChildren());
    return childColumns;
  };
  ToolPanelColumnGroupComp.prototype.onChangeCommon = function (nextState) {
    this.refreshAriaLabel();
    if (this.processingColumnStateChange) {
      return;
    }
    this.modelItemUtils.selectAllChildren(this.modelItem.getChildren(), nextState, this.eventType);
  };
  ToolPanelColumnGroupComp.prototype.refreshAriaLabel = function () {
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    var state = this.cbSelect.getValue() ? translate('ariaVisible', 'visible') : translate('ariaHidden', 'hidden');
    var label = translate('ariaColumnGroupToggleVisibility', 'column group toggle visibility');
    agGridCommunity._.setAriaLabel(this.focusWrapper, this.displayName + " " + label + " (" + state + ")");
  };
  ToolPanelColumnGroupComp.prototype.onColumnStateChanged = function () {
    var selectedValue = this.workOutSelectedValue();
    var readOnlyValue = this.workOutReadOnlyValue();
    this.processingColumnStateChange = true;
    this.cbSelect.setValue(selectedValue);
    this.cbSelect.setReadOnly(readOnlyValue);
    agGridCommunity._.addOrRemoveCssClass(this.getGui(), 'ag-column-select-column-group-readonly', readOnlyValue);
    this.processingColumnStateChange = false;
  };
  ToolPanelColumnGroupComp.prototype.workOutSelectedValue = function () {
    var _this = this;
    var pivotMode = this.columnController.isPivotMode();
    var visibleLeafColumns = this.getVisibleLeafColumns();
    var checkedCount = 0;
    var uncheckedCount = 0;
    visibleLeafColumns.forEach(function (column) {
      if (!pivotMode && column.getColDef().lockVisible) {
        return;
      }
      if (_this.isColumnChecked(column, pivotMode)) {
        checkedCount++;
      } else {
        uncheckedCount++;
      }
    });
    if (checkedCount > 0 && uncheckedCount > 0) {
      return undefined;
    } else {
      return checkedCount > 0;
    }
  };
  ToolPanelColumnGroupComp.prototype.workOutReadOnlyValue = function () {
    var pivotMode = this.columnController.isPivotMode();
    var colsThatCanAction = 0;
    this.columnGroup.getLeafColumns().forEach(function (col) {
      if (pivotMode) {
        if (col.isAnyFunctionAllowed()) {
          colsThatCanAction++;
        }
      } else {
        if (!col.getColDef().lockVisible) {
          colsThatCanAction++;
        }
      }
    });
    return colsThatCanAction === 0;
  };
  ToolPanelColumnGroupComp.prototype.isColumnChecked = function (column, pivotMode) {
    if (pivotMode) {
      var pivoted = column.isPivotActive();
      var grouped = column.isRowGroupActive();
      var aggregated = column.isValueActive();
      return pivoted || grouped || aggregated;
    } else {
      return column.isVisible();
    }
  };
  ToolPanelColumnGroupComp.prototype.onExpandOrContractClicked = function () {
    var oldState = this.modelItem.isExpanded();
    this.modelItem.setExpanded(!oldState);
  };
  ToolPanelColumnGroupComp.prototype.onExpandChanged = function () {
    this.setOpenClosedIcons();
    this.refreshAriaExpanded();
  };
  ToolPanelColumnGroupComp.prototype.setOpenClosedIcons = function () {
    var folderOpen = this.modelItem.isExpanded();
    agGridCommunity._.setDisplayed(this.eGroupClosedIcon, !folderOpen);
    agGridCommunity._.setDisplayed(this.eGroupOpenedIcon, folderOpen);
  };
  ToolPanelColumnGroupComp.prototype.refreshAriaExpanded = function () {
    agGridCommunity._.setAriaExpanded(this.focusWrapper, this.modelItem.isExpanded());
  };
  ToolPanelColumnGroupComp.prototype.getDisplayName = function () {
    return this.displayName;
  };
  ToolPanelColumnGroupComp.prototype.onSelectAllChanged = function (value) {
    var cbValue = this.cbSelect.getValue();
    var readOnly = this.cbSelect.isReadOnly();
    if (!readOnly && (value && !cbValue || !value && cbValue)) {
      this.cbSelect.toggle();
    }
  };
  ToolPanelColumnGroupComp.prototype.isSelected = function () {
    return this.cbSelect.getValue();
  };
  ToolPanelColumnGroupComp.prototype.isSelectable = function () {
    return !this.cbSelect.isReadOnly();
  };
  ToolPanelColumnGroupComp.prototype.setSelected = function (selected) {
    this.cbSelect.setValue(selected, true);
  };
  ToolPanelColumnGroupComp.TEMPLATE = "<div class=\"ag-column-select-column-group\" aria-hidden=\"true\">\n            <span class=\"ag-column-group-icons\" ref=\"eColumnGroupIcons\" >\n                <span class=\"ag-column-group-closed-icon\" ref=\"eGroupClosedIcon\"></span>\n                <span class=\"ag-column-group-opened-icon\" ref=\"eGroupOpenedIcon\"></span>\n            </span>\n            <ag-checkbox ref=\"cbSelect\" class=\"ag-column-select-checkbox\"></ag-checkbox>\n            <span class=\"ag-column-select-column-label\" ref=\"eLabel\"></span>\n        </div>";
  __decorate$4([agGridCommunity.Autowired('columnController')], ToolPanelColumnGroupComp.prototype, "columnController", void 0);
  __decorate$4([agGridCommunity.Autowired('dragAndDropService')], ToolPanelColumnGroupComp.prototype, "dragAndDropService", void 0);
  __decorate$4([agGridCommunity.Autowired('modelItemUtils')], ToolPanelColumnGroupComp.prototype, "modelItemUtils", void 0);
  __decorate$4([agGridCommunity.RefSelector('cbSelect')], ToolPanelColumnGroupComp.prototype, "cbSelect", void 0);
  __decorate$4([agGridCommunity.RefSelector('eLabel')], ToolPanelColumnGroupComp.prototype, "eLabel", void 0);
  __decorate$4([agGridCommunity.RefSelector('eGroupOpenedIcon')], ToolPanelColumnGroupComp.prototype, "eGroupOpenedIcon", void 0);
  __decorate$4([agGridCommunity.RefSelector('eGroupClosedIcon')], ToolPanelColumnGroupComp.prototype, "eGroupClosedIcon", void 0);
  __decorate$4([agGridCommunity.RefSelector('eColumnGroupIcons')], ToolPanelColumnGroupComp.prototype, "eColumnGroupIcons", void 0);
  __decorate$4([agGridCommunity.PostConstruct], ToolPanelColumnGroupComp.prototype, "init", null);
  return ToolPanelColumnGroupComp;
}(agGridCommunity.Component);
var __extends$5 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$5 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ToolPanelColumnComp = /** @class */function (_super) {
  __extends$5(ToolPanelColumnComp, _super);
  function ToolPanelColumnComp(column, columnDept, allowDragging, groupsExist, focusWrapper) {
    var _this = _super.call(this) || this;
    _this.column = column;
    _this.columnDept = columnDept;
    _this.allowDragging = allowDragging;
    _this.groupsExist = groupsExist;
    _this.focusWrapper = focusWrapper;
    _this.processingColumnStateChange = false;
    return _this;
  }
  ToolPanelColumnComp.prototype.init = function () {
    this.setTemplate(ToolPanelColumnComp.TEMPLATE);
    this.eDragHandle = agGridCommunity._.createIconNoSpan('columnDrag', this.gridOptionsWrapper);
    agGridCommunity._.addCssClass(this.eDragHandle, 'ag-drag-handle');
    agGridCommunity._.addCssClass(this.eDragHandle, 'ag-column-select-column-drag-handle');
    this.cbSelect.getGui().insertAdjacentElement('afterend', this.eDragHandle);
    this.displayName = this.columnController.getDisplayNameForColumn(this.column, 'columnToolPanel');
    var displayNameSanitised = agGridCommunity._.escapeString(this.displayName);
    this.eLabel.innerHTML = displayNameSanitised;
    // if grouping, we add an extra level of indent, to cater for expand/contract icons we need to indent for
    var indent = this.columnDept;
    if (this.groupsExist) {
      this.addCssClass('ag-column-select-add-group-indent');
    }
    this.addCssClass("ag-column-select-indent-" + indent);
    this.setupDragging();
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onColumnStateChanged.bind(this));
    this.addManagedListener(this.column, agGridCommunity.Column.EVENT_VALUE_CHANGED, this.onColumnStateChanged.bind(this));
    this.addManagedListener(this.column, agGridCommunity.Column.EVENT_PIVOT_CHANGED, this.onColumnStateChanged.bind(this));
    this.addManagedListener(this.column, agGridCommunity.Column.EVENT_ROW_GROUP_CHANGED, this.onColumnStateChanged.bind(this));
    this.addManagedListener(this.column, agGridCommunity.Column.EVENT_VISIBLE_CHANGED, this.onColumnStateChanged.bind(this));
    this.addManagedListener(this.focusWrapper, 'keydown', this.handleKeyDown.bind(this));
    this.addManagedListener(this.gridOptionsWrapper, 'functionsReadOnly', this.onColumnStateChanged.bind(this));
    this.addManagedListener(this.cbSelect, agGridCommunity.AgCheckbox.EVENT_CHANGED, this.onCheckboxChanged.bind(this));
    this.addManagedListener(this.eLabel, 'click', this.onLabelClicked.bind(this));
    this.onColumnStateChanged();
    this.refreshAriaLabel();
    this.setupTooltip();
    agGridCommunity.CssClassApplier.addToolPanelClassesFromColDef(this.column.getColDef(), this.getGui(), this.gridOptionsWrapper, this.column, null);
  };
  ToolPanelColumnComp.prototype.setupTooltip = function () {
    var _this = this;
    var refresh = function () {
      var newTooltipText = _this.column.getColDef().headerTooltip;
      _this.setTooltip(agGridCommunity._.escapeString(newTooltipText));
    };
    refresh();
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_NEW_COLUMNS_LOADED, refresh);
  };
  ToolPanelColumnComp.prototype.getTooltipParams = function () {
    var res = _super.prototype.getTooltipParams.call(this);
    res.location = 'columnToolPanelColumn';
    res.colDef = this.column.getColDef();
    return res;
  };
  ToolPanelColumnComp.prototype.handleKeyDown = function (e) {
    if (e.keyCode === agGridCommunity.KeyCode.SPACE) {
      e.preventDefault();
      if (this.isSelectable()) {
        this.onSelectAllChanged(!this.isSelected());
      }
    }
  };
  ToolPanelColumnComp.prototype.onLabelClicked = function () {
    if (this.gridOptionsWrapper.isFunctionsReadOnly()) {
      return;
    }
    var nextState = !this.cbSelect.getValue();
    this.onChangeCommon(nextState);
  };
  ToolPanelColumnComp.prototype.onCheckboxChanged = function (event) {
    this.onChangeCommon(event.selected);
  };
  ToolPanelColumnComp.prototype.onChangeCommon = function (nextState) {
    // ignore lock visible columns
    if (this.cbSelect.isReadOnly()) {
      return;
    }
    this.refreshAriaLabel();
    // only want to action if the user clicked the checkbox, not if we are setting the checkbox because
    // of a change in the model
    if (this.processingColumnStateChange) {
      return;
    }
    this.modelItemUtils.setColumn(this.column, nextState, 'toolPanelUi');
  };
  ToolPanelColumnComp.prototype.refreshAriaLabel = function () {
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    var state = this.cbSelect.getValue() ? translate('ariaVisible', 'visible') : translate('ariaHidden', 'hidden');
    var label = translate('ariaColumnToggleVisibility', 'column toggle visibility');
    agGridCommunity._.setAriaLabel(this.focusWrapper, this.displayName + " " + label + " (" + state + ")");
  };
  ToolPanelColumnComp.prototype.setupDragging = function () {
    var _this = this;
    if (!this.allowDragging) {
      agGridCommunity._.setDisplayed(this.eDragHandle, false);
      return;
    }
    var dragSource = {
      type: agGridCommunity.DragSourceType.ToolPanel,
      eElement: this.eDragHandle,
      dragItemName: this.displayName,
      getDragItem: function () {
        return _this.createDragItem();
      }
    };
    this.dragAndDropService.addDragSource(dragSource, true);
    this.addDestroyFunc(function () {
      return _this.dragAndDropService.removeDragSource(dragSource);
    });
  };
  ToolPanelColumnComp.prototype.createDragItem = function () {
    var visibleState = {};
    visibleState[this.column.getId()] = this.column.isVisible();
    return {
      columns: [this.column],
      visibleState: visibleState
    };
  };
  ToolPanelColumnComp.prototype.onColumnStateChanged = function () {
    this.processingColumnStateChange = true;
    var isPivotMode = this.columnController.isPivotMode();
    if (isPivotMode) {
      // if reducing, checkbox means column is one of pivot, value or group
      var anyFunctionActive = this.column.isAnyFunctionActive();
      this.cbSelect.setValue(anyFunctionActive);
    } else {
      // if not reducing, the checkbox tells us if column is visible or not
      this.cbSelect.setValue(this.column.isVisible());
    }
    var checkboxReadOnly;
    if (isPivotMode) {
      // when in pivot mode, the item should be read only if:
      //  a) gui is not allowed make any changes
      var functionsReadOnly = this.gridOptionsWrapper.isFunctionsReadOnly();
      //  b) column is not allow any functions on it
      var noFunctionsAllowed = !this.column.isAnyFunctionAllowed();
      checkboxReadOnly = functionsReadOnly || noFunctionsAllowed;
    } else {
      // when in normal mode, the checkbox is read only if visibility is locked
      checkboxReadOnly = !!this.column.getColDef().lockVisible;
    }
    this.cbSelect.setReadOnly(checkboxReadOnly);
    agGridCommunity._.addOrRemoveCssClass(this.getGui(), 'ag-column-select-column-readonly', checkboxReadOnly);
    var checkboxPassive = isPivotMode && this.gridOptionsWrapper.isFunctionsPassive();
    this.cbSelect.setPassive(checkboxPassive);
    this.processingColumnStateChange = false;
  };
  ToolPanelColumnComp.prototype.getDisplayName = function () {
    return this.displayName;
  };
  ToolPanelColumnComp.prototype.onSelectAllChanged = function (value) {
    if (value !== this.cbSelect.getValue()) {
      if (!this.cbSelect.isReadOnly()) {
        this.cbSelect.toggle();
      }
    }
  };
  ToolPanelColumnComp.prototype.isSelected = function () {
    return this.cbSelect.getValue();
  };
  ToolPanelColumnComp.prototype.isSelectable = function () {
    return !this.cbSelect.isReadOnly();
  };
  ToolPanelColumnComp.prototype.isExpandable = function () {
    return false;
  };
  ToolPanelColumnComp.prototype.setExpanded = function (value) {
    console.warn('ag-grid: can not expand a column item that does not represent a column group header');
  };
  ToolPanelColumnComp.TEMPLATE = "<div class=\"ag-column-select-column\" aria-hidden=\"true\">\n            <ag-checkbox ref=\"cbSelect\" class=\"ag-column-select-checkbox\"></ag-checkbox>\n            <span class=\"ag-column-select-column-label\" ref=\"eLabel\"></span>\n        </div>";
  __decorate$5([agGridCommunity.Autowired('columnController')], ToolPanelColumnComp.prototype, "columnController", void 0);
  __decorate$5([agGridCommunity.Autowired('dragAndDropService')], ToolPanelColumnComp.prototype, "dragAndDropService", void 0);
  __decorate$5([agGridCommunity.Autowired('modelItemUtils')], ToolPanelColumnComp.prototype, "modelItemUtils", void 0);
  __decorate$5([agGridCommunity.RefSelector('eLabel')], ToolPanelColumnComp.prototype, "eLabel", void 0);
  __decorate$5([agGridCommunity.RefSelector('cbSelect')], ToolPanelColumnComp.prototype, "cbSelect", void 0);
  __decorate$5([agGridCommunity.PostConstruct], ToolPanelColumnComp.prototype, "init", null);
  return ToolPanelColumnComp;
}(agGridCommunity.Component);
var __extends$6 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$6 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ColumnModel = /** @class */function () {
  function ColumnModel(items) {
    this.items = items;
  }
  ColumnModel.prototype.getRowCount = function () {
    return this.items.length;
  };
  ColumnModel.prototype.getRow = function (index) {
    return this.items[index];
  };
  return ColumnModel;
}();
var PrimaryColsListPanel = /** @class */function (_super) {
  __extends$6(PrimaryColsListPanel, _super);
  function PrimaryColsListPanel() {
    var _this = _super.call(this, PrimaryColsListPanel.TEMPLATE) || this;
    _this.destroyColumnItemFuncs = [];
    return _this;
  }
  PrimaryColsListPanel.prototype.destroyColumnTree = function () {
    this.allColsTree = [];
    this.destroyColumnItemFuncs.forEach(function (f) {
      return f();
    });
    this.destroyColumnItemFuncs = [];
  };
  PrimaryColsListPanel.prototype.init = function (params, allowDragging, eventType) {
    var _this = this;
    this.params = params;
    this.allowDragging = allowDragging;
    this.eventType = eventType;
    if (!this.params.suppressSyncLayoutWithGrid) {
      this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_COLUMN_MOVED, this.onColumnsChanged.bind(this));
    }
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_NEW_COLUMNS_LOADED, this.onColumnsChanged.bind(this));
    var eventsImpactingCheckedState = [agGridCommunity.Events.EVENT_COLUMN_PIVOT_CHANGED, agGridCommunity.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, agGridCommunity.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, agGridCommunity.Events.EVENT_COLUMN_VALUE_CHANGED, agGridCommunity.Events.EVENT_COLUMN_VISIBLE, agGridCommunity.Events.EVENT_NEW_COLUMNS_LOADED];
    eventsImpactingCheckedState.forEach(function (event) {
      // update header select all checkbox with current selection state
      _this.addManagedListener(_this.eventService, event, _this.fireSelectionChangedEvent.bind(_this));
    });
    this.expandGroupsByDefault = !this.params.contractColumnSelection;
    this.virtualList = this.createManagedBean(new agGridCommunity.VirtualList('column-select', 'tree'));
    this.appendChild(this.virtualList.getGui());
    this.virtualList.setComponentCreator(function (item, listItemElement) {
      return _this.createComponentFromItem(item, listItemElement);
    });
    if (this.columnController.isReady()) {
      this.onColumnsChanged();
    }
  };
  PrimaryColsListPanel.prototype.createComponentFromItem = function (item, listItemElement) {
    if (item.isGroup()) {
      var renderedGroup = new ToolPanelColumnGroupComp(item, this.allowDragging, this.eventType, listItemElement);
      this.getContext().createBean(renderedGroup);
      return renderedGroup;
    }
    var columnComp = new ToolPanelColumnComp(item.getColumn(), item.getDept(), this.allowDragging, this.groupsExist, listItemElement);
    this.getContext().createBean(columnComp);
    return columnComp;
  };
  PrimaryColsListPanel.prototype.onColumnsChanged = function () {
    var expandedStates = this.getExpandedStates();
    var pivotModeActive = this.columnController.isPivotMode();
    var shouldSyncColumnLayoutWithGrid = !this.params.suppressSyncLayoutWithGrid && !pivotModeActive;
    if (shouldSyncColumnLayoutWithGrid) {
      this.buildTreeFromWhatGridIsDisplaying();
    } else {
      this.buildTreeFromProvidedColumnDefs();
    }
    this.setExpandedStates(expandedStates);
    this.markFilteredColumns();
    this.flattenAndFilterModel();
  };
  PrimaryColsListPanel.prototype.getExpandedStates = function () {
    if (!this.allColsTree) {
      return {};
    }
    var res = {};
    this.forEachItem(function (item) {
      if (!item.isGroup()) {
        return;
      }
      var colGroup = item.getColumnGroup();
      if (colGroup) {
        // group should always exist, this is defensive
        res[colGroup.getId()] = item.isExpanded();
      }
    });
    return res;
  };
  PrimaryColsListPanel.prototype.setExpandedStates = function (states) {
    if (!this.allColsTree) {
      return;
    }
    this.forEachItem(function (item) {
      if (!item.isGroup()) {
        return;
      }
      var colGroup = item.getColumnGroup();
      if (colGroup) {
        // group should always exist, this is defensive
        var expanded = states[colGroup.getId()];
        var groupExistedLastTime = expanded != null;
        if (groupExistedLastTime) {
          item.setExpanded(expanded);
        }
      }
    });
  };
  PrimaryColsListPanel.prototype.buildTreeFromWhatGridIsDisplaying = function () {
    this.colDefService.syncLayoutWithGrid(this.setColumnLayout.bind(this));
  };
  PrimaryColsListPanel.prototype.setColumnLayout = function (colDefs) {
    var columnTree = this.colDefService.createColumnTree(colDefs);
    this.buildListModel(columnTree);
    // using col defs to check if groups exist as it could be a custom layout
    this.groupsExist = colDefs.some(function (colDef) {
      return colDef && typeof colDef.children !== 'undefined';
    });
    this.markFilteredColumns();
    this.flattenAndFilterModel();
  };
  PrimaryColsListPanel.prototype.buildTreeFromProvidedColumnDefs = function () {
    // add column / group comps to tool panel
    this.buildListModel(this.columnController.getPrimaryColumnTree());
    this.groupsExist = this.columnController.isPrimaryColumnGroupsPresent();
  };
  PrimaryColsListPanel.prototype.buildListModel = function (columnTree) {
    var _this = this;
    var columnExpandedListener = this.onColumnExpanded.bind(this);
    var addListeners = function (item) {
      item.addEventListener(ColumnModelItem.EVENT_EXPANDED_CHANGED, columnExpandedListener);
      var removeFunc = item.removeEventListener.bind(item, ColumnModelItem.EVENT_EXPANDED_CHANGED, columnExpandedListener);
      _this.destroyColumnItemFuncs.push(removeFunc);
    };
    var recursivelyBuild = function (tree, dept, parentList) {
      tree.forEach(function (child) {
        if (child instanceof agGridCommunity.OriginalColumnGroup) {
          createGroupItem(child, dept, parentList);
        } else {
          createColumnItem(child, dept, parentList);
        }
      });
    };
    var createGroupItem = function (columnGroup, dept, parentList) {
      var columnGroupDef = columnGroup.getColGroupDef();
      var skipThisGroup = columnGroupDef && columnGroupDef.suppressColumnsToolPanel;
      if (skipThisGroup) {
        return;
      }
      if (columnGroup.isPadding()) {
        recursivelyBuild(columnGroup.getChildren(), dept, parentList);
        return;
      }
      var displayName = _this.columnController.getDisplayNameForOriginalColumnGroup(null, columnGroup, _this.eventType);
      var item = new ColumnModelItem(displayName, columnGroup, dept, true, _this.expandGroupsByDefault);
      parentList.push(item);
      addListeners(item);
      recursivelyBuild(columnGroup.getChildren(), dept + 1, item.getChildren());
    };
    var createColumnItem = function (column, dept, parentList) {
      var skipThisColumn = column.getColDef() && column.getColDef().suppressColumnsToolPanel;
      if (skipThisColumn) {
        return;
      }
      var displayName = _this.columnController.getDisplayNameForColumn(column, 'columnToolPanel');
      parentList.push(new ColumnModelItem(displayName, column, dept));
    };
    this.destroyColumnTree();
    recursivelyBuild(columnTree, 0, this.allColsTree);
  };
  PrimaryColsListPanel.prototype.onColumnExpanded = function () {
    this.flattenAndFilterModel();
  };
  PrimaryColsListPanel.prototype.flattenAndFilterModel = function () {
    var _this = this;
    this.displayedColsList = [];
    var recursiveFunc = function (item) {
      if (!item.isPassesFilter()) {
        return;
      }
      _this.displayedColsList.push(item);
      if (item.isGroup() && item.isExpanded()) {
        item.getChildren().forEach(recursiveFunc);
      }
    };
    this.allColsTree.forEach(recursiveFunc);
    this.virtualList.setModel(new ColumnModel(this.displayedColsList));
    var focusedRow = this.virtualList.getLastFocusedRow();
    this.virtualList.refresh();
    if (focusedRow != null) {
      this.focusRowIfAlive(focusedRow);
    }
    this.notifyListeners();
  };
  PrimaryColsListPanel.prototype.focusRowIfAlive = function (rowIndex) {
    var _this = this;
    window.setTimeout(function () {
      if (_this.isAlive()) {
        _this.virtualList.focusRow(rowIndex);
      }
    }, 0);
  };
  PrimaryColsListPanel.prototype.forEachItem = function (callback) {
    var recursiveFunc = function (items) {
      items.forEach(function (item) {
        callback(item);
        if (item.isGroup()) {
          recursiveFunc(item.getChildren());
        }
      });
    };
    recursiveFunc(this.allColsTree);
  };
  PrimaryColsListPanel.prototype.doSetExpandedAll = function (value) {
    this.forEachItem(function (item) {
      if (item.isGroup()) {
        item.setExpanded(value);
      }
    });
  };
  PrimaryColsListPanel.prototype.setGroupsExpanded = function (expand, groupIds) {
    if (!groupIds) {
      this.doSetExpandedAll(expand);
      return;
    }
    var expandedGroupIds = [];
    this.forEachItem(function (item) {
      if (!item.isGroup()) {
        return;
      }
      var groupId = item.getColumnGroup().getId();
      if (groupIds.indexOf(groupId) >= 0) {
        item.setExpanded(expand);
        expandedGroupIds.push(groupId);
      }
    });
    var unrecognisedGroupIds = groupIds.filter(function (groupId) {
      return !agGridCommunity._.includes(expandedGroupIds, groupId);
    });
    if (unrecognisedGroupIds.length > 0) {
      console.warn('AG Grid: unable to find group(s) for supplied groupIds:', unrecognisedGroupIds);
    }
  };
  PrimaryColsListPanel.prototype.getExpandState = function () {
    var expandedCount = 0;
    var notExpandedCount = 0;
    this.forEachItem(function (item) {
      if (!item.isGroup()) {
        return;
      }
      if (item.isExpanded()) {
        expandedCount++;
      } else {
        notExpandedCount++;
      }
    });
    if (expandedCount > 0 && notExpandedCount > 0) {
      return ExpandState.INDETERMINATE;
    }
    if (notExpandedCount > 0) {
      return ExpandState.COLLAPSED;
    }
    return ExpandState.EXPANDED;
  };
  PrimaryColsListPanel.prototype.doSetSelectedAll = function (selectAllChecked) {
    this.modelItemUtils.selectAllChildren(this.allColsTree, selectAllChecked, this.eventType);
  };
  PrimaryColsListPanel.prototype.getSelectionState = function () {
    var checkedCount = 0;
    var uncheckedCount = 0;
    var pivotMode = this.columnController.isPivotMode();
    this.forEachItem(function (item) {
      if (item.isGroup()) {
        return;
      }
      if (!item.isPassesFilter()) {
        return;
      }
      var column = item.getColumn();
      var colDef = column.getColDef();
      var checked;
      if (pivotMode) {
        var noPivotModeOptionsAllowed = !column.isAllowPivot() && !column.isAllowRowGroup() && !column.isAllowValue();
        if (noPivotModeOptionsAllowed) {
          return;
        }
        checked = column.isValueActive() || column.isPivotActive() || column.isRowGroupActive();
      } else {
        if (colDef.lockVisible) {
          return;
        }
        checked = column.isVisible();
      }
      checked ? checkedCount++ : uncheckedCount++;
    });
    if (checkedCount > 0 && uncheckedCount > 0) {
      return undefined;
    }
    return !(checkedCount === 0 || uncheckedCount > 0);
  };
  PrimaryColsListPanel.prototype.setFilterText = function (filterText) {
    this.filterText = agGridCommunity._.exists(filterText) ? filterText.toLowerCase() : null;
    this.markFilteredColumns();
    this.flattenAndFilterModel();
  };
  PrimaryColsListPanel.prototype.markFilteredColumns = function () {
    var _this = this;
    var passesFilter = function (item) {
      if (!agGridCommunity._.exists(_this.filterText)) {
        return true;
      }
      var displayName = item.getDisplayName();
      return displayName == null || displayName.toLowerCase().indexOf(_this.filterText) !== -1;
    };
    var recursivelyCheckFilter = function (item, parentPasses) {
      var atLeastOneChildPassed = false;
      if (item.isGroup()) {
        var groupPasses_1 = passesFilter(item);
        item.getChildren().forEach(function (child) {
          var childPasses = recursivelyCheckFilter(child, groupPasses_1 || parentPasses);
          if (childPasses) {
            atLeastOneChildPassed = childPasses;
          }
        });
      }
      var filterPasses = parentPasses || atLeastOneChildPassed ? true : passesFilter(item);
      item.setPassesFilter(filterPasses);
      return filterPasses;
    };
    this.allColsTree.forEach(function (item) {
      return recursivelyCheckFilter(item, false);
    });
  };
  PrimaryColsListPanel.prototype.notifyListeners = function () {
    this.fireGroupExpandedEvent();
    this.fireSelectionChangedEvent();
  };
  PrimaryColsListPanel.prototype.fireGroupExpandedEvent = function () {
    var expandState = this.getExpandState();
    this.dispatchEvent({
      type: 'groupExpanded',
      state: expandState
    });
  };
  PrimaryColsListPanel.prototype.fireSelectionChangedEvent = function () {
    var selectionState = this.getSelectionState();
    this.dispatchEvent({
      type: 'selectionChanged',
      state: selectionState
    });
  };
  PrimaryColsListPanel.TEMPLATE = "<div class=\"ag-column-select-list\" role=\"tree\"></div>";
  __decorate$6([agGridCommunity.Autowired('columnController')], PrimaryColsListPanel.prototype, "columnController", void 0);
  __decorate$6([agGridCommunity.Autowired('toolPanelColDefService')], PrimaryColsListPanel.prototype, "colDefService", void 0);
  __decorate$6([agGridCommunity.Autowired('columnApi')], PrimaryColsListPanel.prototype, "columnApi", void 0);
  __decorate$6([agGridCommunity.Autowired('modelItemUtils')], PrimaryColsListPanel.prototype, "modelItemUtils", void 0);
  __decorate$6([agGridCommunity.PreDestroy], PrimaryColsListPanel.prototype, "destroyColumnTree", null);
  return PrimaryColsListPanel;
}(agGridCommunity.Component);
var __extends$7 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$7 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PivotModePanel = /** @class */function (_super) {
  __extends$7(PivotModePanel, _super);
  function PivotModePanel() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  PivotModePanel.prototype.createTemplate = function () {
    return (/* html */"<div class=\"ag-pivot-mode-panel\">\n                <ag-toggle-button ref=\"cbPivotMode\" class=\"ag-pivot-mode-select\"></ag-toggle-button>\n            </div>"
    );
  };
  PivotModePanel.prototype.init = function () {
    this.setTemplate(this.createTemplate());
    this.cbPivotMode.setValue(this.columnController.isPivotMode());
    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
    this.cbPivotMode.setLabel(localeTextFunc('pivotMode', 'Pivot Mode'));
    this.addManagedListener(this.cbPivotMode, agGridCommunity.AgCheckbox.EVENT_CHANGED, this.onBtPivotMode.bind(this));
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_NEW_COLUMNS_LOADED, this.onPivotModeChanged.bind(this));
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onPivotModeChanged.bind(this));
  };
  PivotModePanel.prototype.onBtPivotMode = function () {
    var newValue = !!this.cbPivotMode.getValue();
    if (newValue !== this.columnController.isPivotMode()) {
      this.columnController.setPivotMode(newValue, "toolPanelUi");
      var api = this.gridOptionsWrapper.getApi();
      if (api) {
        api.refreshHeader();
      }
    }
  };
  PivotModePanel.prototype.onPivotModeChanged = function () {
    var pivotModeActive = this.columnController.isPivotMode();
    this.cbPivotMode.setValue(pivotModeActive);
  };
  __decorate$7([agGridCommunity.Autowired('columnController')], PivotModePanel.prototype, "columnController", void 0);
  __decorate$7([agGridCommunity.RefSelector('cbPivotMode')], PivotModePanel.prototype, "cbPivotMode", void 0);
  __decorate$7([agGridCommunity.PreConstruct], PivotModePanel.prototype, "init", null);
  return PivotModePanel;
}(agGridCommunity.Component);
var __extends$8 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$8 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AggregationStage = /** @class */function (_super) {
  __extends$8(AggregationStage, _super);
  function AggregationStage() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  // it's possible to recompute the aggregate without doing the other parts
  // + gridApi.recomputeAggregates()
  AggregationStage.prototype.execute = function (params) {
    // if changed path is active, it means we came from a) change detection or b) transaction update.
    // for both of these, if no value columns are present, it means there is nothing to aggregate now
    // and there is no cleanup to be done (as value columns don't change between transactions or change
    // detections). if no value columns and no changed path, means we have to go through all nodes in
    // case we need to clean up agg data from before.
    var noValueColumns = agGridCommunity._.missingOrEmpty(this.columnController.getValueColumns());
    var noUserAgg = !this.gridOptionsWrapper.getGroupRowAggNodesFunc();
    var changedPathActive = params.changedPath && params.changedPath.isActive();
    if (noValueColumns && noUserAgg && changedPathActive) {
      return;
    }
    var aggDetails = this.createAggDetails(params);
    this.recursivelyCreateAggData(aggDetails);
  };
  AggregationStage.prototype.createAggDetails = function (params) {
    var pivotActive = this.columnController.isPivotActive();
    var measureColumns = this.columnController.getValueColumns();
    var pivotColumns = pivotActive ? this.columnController.getPivotColumns() : [];
    var aggDetails = {
      changedPath: params.changedPath,
      valueColumns: measureColumns,
      pivotColumns: pivotColumns
    };
    return aggDetails;
  };
  AggregationStage.prototype.recursivelyCreateAggData = function (aggDetails) {
    var _this = this;
    // update prop, in case changed since last time
    this.filteredOnly = !this.gridOptionsWrapper.isSuppressAggFilteredOnly();
    var callback = function (rowNode) {
      var hasNoChildren = !rowNode.hasChildren();
      if (hasNoChildren) {
        // this check is needed for TreeData, in case the node is no longer a child,
        // but it was a child previously.
        if (rowNode.aggData) {
          rowNode.setAggData(null);
        }
        // never agg data for leaf nodes
        return;
      }
      //Optionally prevent the aggregation at the root Node
      //https://ag-grid.atlassian.net/browse/AG-388
      var isRootNode = rowNode.level === -1;
      if (isRootNode) {
        var notPivoting = !_this.columnController.isPivotMode();
        var suppressAggAtRootLevel = _this.gridOptionsWrapper.isSuppressAggAtRootLevel();
        if (suppressAggAtRootLevel && notPivoting) {
          return;
        }
      }
      _this.aggregateRowNode(rowNode, aggDetails);
    };
    aggDetails.changedPath.forEachChangedNodeDepthFirst(callback, true);
  };
  AggregationStage.prototype.aggregateRowNode = function (rowNode, aggDetails) {
    var measureColumnsMissing = aggDetails.valueColumns.length === 0;
    var pivotColumnsMissing = aggDetails.pivotColumns.length === 0;
    var userFunc = this.gridOptionsWrapper.getGroupRowAggNodesFunc();
    var aggResult;
    if (userFunc) {
      aggResult = userFunc(rowNode.childrenAfterFilter);
    } else if (measureColumnsMissing) {
      aggResult = null;
    } else if (pivotColumnsMissing) {
      aggResult = this.aggregateRowNodeUsingValuesOnly(rowNode, aggDetails);
    } else {
      aggResult = this.aggregateRowNodeUsingValuesAndPivot(rowNode);
    }
    rowNode.setAggData(aggResult);
    // if we are grouping, then it's possible there is a sibling footer
    // to the group, so update the data here also if there is one
    if (rowNode.sibling) {
      rowNode.sibling.setAggData(aggResult);
    }
  };
  AggregationStage.prototype.aggregateRowNodeUsingValuesAndPivot = function (rowNode) {
    var _this = this;
    var result = {};
    var pivotColumnDefs = this.pivotStage.getPivotColumnDefs();
    // Step 1: process value columns
    pivotColumnDefs.filter(function (v) {
      return !agGridCommunity._.exists(v.pivotTotalColumnIds);
    }) // only process pivot value columns
    .forEach(function (valueColDef) {
      var keys = valueColDef.pivotKeys || [];
      var values;
      var valueColumn = valueColDef.pivotValueColumn;
      var colId = valueColDef.colId;
      if (rowNode.leafGroup) {
        // lowest level group, get the values from the mapped set
        values = _this.getValuesFromMappedSet(rowNode.childrenMapped, keys, valueColumn);
      } else {
        // value columns and pivot columns, non-leaf group
        values = _this.getValuesPivotNonLeaf(rowNode, colId);
      }
      result[colId] = _this.aggregateValues(values, valueColumn.getAggFunc(), valueColumn, rowNode);
    });
    // Step 2: process total columns
    pivotColumnDefs.filter(function (v) {
      return agGridCommunity._.exists(v.pivotTotalColumnIds);
    }) // only process pivot total columns
    .forEach(function (totalColDef) {
      var aggResults = [];
      var pivotValueColumn = totalColDef.pivotValueColumn,
        pivotTotalColumnIds = totalColDef.pivotTotalColumnIds,
        colId = totalColDef.colId;
      //retrieve results for colIds associated with this pivot total column
      if (!pivotTotalColumnIds || !pivotTotalColumnIds.length) {
        return;
      }
      pivotTotalColumnIds.forEach(function (currentColId) {
        aggResults.push(result[currentColId]);
      });
      result[colId] = _this.aggregateValues(aggResults, pivotValueColumn.getAggFunc(), pivotValueColumn, rowNode);
    });
    return result;
  };
  AggregationStage.prototype.aggregateRowNodeUsingValuesOnly = function (rowNode, aggDetails) {
    var _this = this;
    var result = {};
    var changedValueColumns = aggDetails.changedPath.isActive() ? aggDetails.changedPath.getValueColumnsForNode(rowNode, aggDetails.valueColumns) : aggDetails.valueColumns;
    var notChangedValueColumns = aggDetails.changedPath.isActive() ? aggDetails.changedPath.getNotValueColumnsForNode(rowNode, aggDetails.valueColumns) : null;
    var values2d = this.getValuesNormal(rowNode, changedValueColumns);
    var oldValues = rowNode.aggData;
    changedValueColumns.forEach(function (valueColumn, index) {
      result[valueColumn.getId()] = _this.aggregateValues(values2d[index], valueColumn.getAggFunc(), valueColumn, rowNode);
    });
    if (notChangedValueColumns && oldValues) {
      notChangedValueColumns.forEach(function (valueColumn) {
        result[valueColumn.getId()] = oldValues[valueColumn.getId()];
      });
    }
    return result;
  };
  AggregationStage.prototype.getValuesPivotNonLeaf = function (rowNode, colId) {
    var values = [];
    rowNode.childrenAfterFilter.forEach(function (node) {
      var value = node.aggData[colId];
      values.push(value);
    });
    return values;
  };
  AggregationStage.prototype.getValuesFromMappedSet = function (mappedSet, keys, valueColumn) {
    var _this = this;
    var mapPointer = mappedSet;
    keys.forEach(function (key) {
      return mapPointer = mapPointer ? mapPointer[key] : null;
    });
    if (!mapPointer) {
      return [];
    }
    var values = [];
    mapPointer.forEach(function (rowNode) {
      var value = _this.valueService.getValue(valueColumn, rowNode);
      values.push(value);
    });
    return values;
  };
  AggregationStage.prototype.getValuesNormal = function (rowNode, valueColumns) {
    // create 2d array, of all values for all valueColumns
    var values = [];
    valueColumns.forEach(function () {
      return values.push([]);
    });
    var valueColumnCount = valueColumns.length;
    var nodeList = this.filteredOnly ? rowNode.childrenAfterFilter : rowNode.childrenAfterGroup;
    var rowCount = nodeList.length;
    for (var i = 0; i < rowCount; i++) {
      var childNode = nodeList[i];
      for (var j = 0; j < valueColumnCount; j++) {
        var valueColumn = valueColumns[j];
        // if the row is a group, then it will only have an agg result value,
        // which means valueGetter is never used.
        var value = this.valueService.getValue(valueColumn, childNode);
        values[j].push(value);
      }
    }
    return values;
  };
  AggregationStage.prototype.aggregateValues = function (values, aggFuncOrString, column, rowNode) {
    var aggFunc = typeof aggFuncOrString === 'string' ? this.aggFuncService.getAggFunc(aggFuncOrString) : aggFuncOrString;
    if (typeof aggFunc !== 'function') {
      console.error("AG Grid: unrecognised aggregation function " + aggFuncOrString);
      return null;
    }
    var deprecationWarning = function () {
      agGridCommunity._.doOnce(function () {
        console.warn('AG Grid: since v24.0, custom aggregation functions take a params object. Please alter your aggregation function to use params.values');
      }, 'aggregationStage.aggregateValues Deprecation');
    };
    var aggFuncAny = aggFunc;
    var params = {
      values: values,
      column: column,
      colDef: column ? column.getColDef() : undefined,
      rowNode: rowNode,
      data: rowNode ? rowNode.data : undefined,
      api: this.gridApi,
      columnApi: this.columnApi,
      context: this.gridOptionsWrapper.getContext(),
      // the three things below are for logging warning messages in case anyone is treating
      // the params object as an array. in previous grid versions, we didn't pass params object,
      // but passed values array instead.
      forEach: function (callback, thisArg) {
        deprecationWarning();
        return values.forEach(callback, thisArg);
      },
      get length() {
        deprecationWarning();
        return values.length;
      },
      set length(val) {
        deprecationWarning();
        values.length = val;
      }
    }; // the "as any" is needed to allow the deprecation warning messages
    return aggFuncAny(params);
  };
  __decorate$8([agGridCommunity.Autowired('columnController')], AggregationStage.prototype, "columnController", void 0);
  __decorate$8([agGridCommunity.Autowired('valueService')], AggregationStage.prototype, "valueService", void 0);
  __decorate$8([agGridCommunity.Autowired('pivotStage')], AggregationStage.prototype, "pivotStage", void 0);
  __decorate$8([agGridCommunity.Autowired('aggFuncService')], AggregationStage.prototype, "aggFuncService", void 0);
  __decorate$8([agGridCommunity.Autowired('gridApi')], AggregationStage.prototype, "gridApi", void 0);
  __decorate$8([agGridCommunity.Autowired('columnApi')], AggregationStage.prototype, "columnApi", void 0);
  AggregationStage = __decorate$8([agGridCommunity.Bean('aggregationStage')], AggregationStage);
  return AggregationStage;
}(agGridCommunity.BeanStub);
var BatchRemover = /** @class */function () {
  function BatchRemover() {
    this.allSets = {};
    this.allParents = [];
  }
  BatchRemover.prototype.removeFromChildrenAfterGroup = function (parent, child) {
    var set = this.getSet(parent);
    set.removeFromChildrenAfterGroup[child.id] = true;
  };
  BatchRemover.prototype.removeFromAllLeafChildren = function (parent, child) {
    var set = this.getSet(parent);
    set.removeFromAllLeafChildren[child.id] = true;
  };
  BatchRemover.prototype.getSet = function (parent) {
    if (!this.allSets[parent.id]) {
      this.allSets[parent.id] = {
        removeFromAllLeafChildren: {},
        removeFromChildrenAfterGroup: {}
      };
      this.allParents.push(parent);
    }
    return this.allSets[parent.id];
  };
  BatchRemover.prototype.getAllParents = function () {
    return this.allParents;
  };
  BatchRemover.prototype.flush = function () {
    var _this = this;
    this.allParents.forEach(function (parent) {
      var nodeDetails = _this.allSets[parent.id];
      parent.childrenAfterGroup = parent.childrenAfterGroup.filter(function (child) {
        return !nodeDetails.removeFromChildrenAfterGroup[child.id];
      });
      parent.allLeafChildren = parent.allLeafChildren.filter(function (child) {
        return !nodeDetails.removeFromAllLeafChildren[child.id];
      });
      parent.updateHasChildren();
    });
    this.allSets = {};
    this.allParents.length = 0;
  };
  return BatchRemover;
}();
var __extends$9 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$9 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var GroupStage = /** @class */function (_super) {
  __extends$9(GroupStage, _super);
  function GroupStage() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    // we use a sequence variable so that each time we do a grouping, we don't
    // reuse the ids - otherwise the rowRenderer will confuse rowNodes between redraws
    // when it tries to animate between rows.
    _this.groupIdSequence = new agGridCommunity.NumberSequence();
    return _this;
  }
  GroupStage.prototype.postConstruct = function () {
    this.usingTreeData = this.gridOptionsWrapper.isTreeData();
    if (this.usingTreeData) {
      this.getDataPath = this.gridOptionsWrapper.getDataPathFunc();
    }
  };
  GroupStage.prototype.execute = function (params) {
    var details = this.createGroupingDetails(params);
    if (details.transactions) {
      this.handleTransaction(details);
    } else {
      var afterColsChanged = params.afterColumnsChanged === true;
      this.shotgunResetEverything(details, afterColsChanged);
    }
    this.sortGroupsWithComparator(details.rootNode);
    this.selectableService.updateSelectableAfterGrouping(details.rootNode);
  };
  GroupStage.prototype.createGroupingDetails = function (params) {
    var rowNode = params.rowNode,
      changedPath = params.changedPath,
      rowNodeTransactions = params.rowNodeTransactions,
      rowNodeOrder = params.rowNodeOrder;
    var groupedCols = this.usingTreeData ? null : this.columnController.getRowGroupColumns();
    var details = {
      // someone complained that the parent attribute was causing some change detection
      // to break is some angular add-on - which i never used. taking the parent out breaks
      // a cyclic dependency, hence this flag got introduced.
      includeParents: !this.gridOptionsWrapper.isSuppressParentsInRowNodes(),
      expandByDefault: this.gridOptionsWrapper.getGroupDefaultExpanded(),
      groupedCols: groupedCols,
      rootNode: rowNode,
      pivotMode: this.columnController.isPivotMode(),
      groupedColCount: this.usingTreeData || !groupedCols ? 0 : groupedCols.length,
      rowNodeOrder: rowNodeOrder,
      transactions: rowNodeTransactions,
      // if no transaction, then it's shotgun, changed path would be 'not active' at this point anyway
      changedPath: changedPath
    };
    return details;
  };
  GroupStage.prototype.handleTransaction = function (details) {
    var _this = this;
    details.transactions.forEach(function (tran) {
      // we don't allow batch remover for tree data as tree data uses Filler Nodes,
      // and creating/deleting filler nodes needs to be done alongside the node deleting
      // and moving. if we want to Batch Remover working with tree data then would need
      // to consider how Filler Nodes would be impacted (it's possible that it can be easily
      // modified to work, however for now I don't have the brain energy to work it all out).
      var batchRemover = !_this.usingTreeData ? new BatchRemover() : undefined;
      // the order here of [add, remove, update] needs to be the same as in ClientSideNodeManager,
      // as the order is important when a record with the same id is added and removed in the same
      // transaction.
      if (agGridCommunity._.existsAndNotEmpty(tran.remove)) {
        _this.removeNodes(tran.remove, details, batchRemover);
      }
      if (agGridCommunity._.existsAndNotEmpty(tran.update)) {
        _this.moveNodesInWrongPath(tran.update, details, batchRemover);
      }
      if (agGridCommunity._.existsAndNotEmpty(tran.add)) {
        _this.insertNodes(tran.add, details, false);
      }
      // must flush here, and not allow another transaction to be applied,
      // as each transaction must finish leaving the data in a consistent state.
      if (batchRemover) {
        var parentsWithChildrenRemoved = batchRemover.getAllParents().slice();
        batchRemover.flush();
        _this.removeEmptyGroups(parentsWithChildrenRemoved, details);
      }
    });
    if (details.rowNodeOrder) {
      this.sortChildren(details);
    }
  };
  // this is used when doing delta updates, eg Redux, keeps nodes in right order
  GroupStage.prototype.sortChildren = function (details) {
    details.changedPath.forEachChangedNodeDepthFirst(function (rowNode) {
      agGridCommunity._.sortRowNodesByOrder(rowNode.childrenAfterGroup, details.rowNodeOrder);
    });
  };
  GroupStage.prototype.sortGroupsWithComparator = function (rootNode) {
    // we don't do group sorting for tree data
    if (this.usingTreeData) {
      return;
    }
    var comparator = this.gridOptionsWrapper.getDefaultGroupSortComparator();
    if (agGridCommunity._.exists(comparator)) {
      recursiveSort(rootNode);
    }
    function recursiveSort(rowNode) {
      var doSort = agGridCommunity._.exists(rowNode.childrenAfterGroup) &&
      // we only want to sort groups, so we do not sort leafs (a leaf group has leafs as children)
      !rowNode.leafGroup;
      if (doSort) {
        rowNode.childrenAfterGroup.sort(comparator);
        rowNode.childrenAfterGroup.forEach(function (childNode) {
          return recursiveSort(childNode);
        });
      }
    }
  };
  GroupStage.prototype.getExistingPathForNode = function (node, details) {
    var res = [];
    // when doing tree data, the node is part of the path,
    // but when doing grid grouping, the node is not part of the path so we start with the parent.
    var pointer = this.usingTreeData ? node : node.parent;
    while (pointer && pointer !== details.rootNode) {
      res.push({
        key: pointer.key,
        rowGroupColumn: pointer.rowGroupColumn,
        field: pointer.field
      });
      pointer = pointer.parent;
    }
    res.reverse();
    return res;
  };
  GroupStage.prototype.moveNodesInWrongPath = function (childNodes, details, batchRemover) {
    var _this = this;
    childNodes.forEach(function (childNode) {
      // we add node, even if parent has not changed, as the data could have
      // changed, hence aggregations will be wrong
      if (details.changedPath.isActive()) {
        details.changedPath.addParentNode(childNode.parent);
      }
      var infoToKeyMapper = function (item) {
        return item.key;
      };
      var oldPath = _this.getExistingPathForNode(childNode, details).map(infoToKeyMapper);
      var newPath = _this.getGroupInfo(childNode, details).map(infoToKeyMapper);
      var nodeInCorrectPath = agGridCommunity._.areEqual(oldPath, newPath);
      if (!nodeInCorrectPath) {
        _this.moveNode(childNode, details, batchRemover);
      }
    });
  };
  GroupStage.prototype.moveNode = function (childNode, details, batchRemover) {
    this.removeNodesInStages([childNode], details, batchRemover);
    this.insertOneNode(childNode, details, true);
    // hack - if we didn't do this, then renaming a tree item (ie changing rowNode.key) wouldn't get
    // refreshed into the gui.
    // this is needed to kick off the event that rowComp listens to for refresh. this in turn
    // then will get each cell in the row to refresh - which is what we need as we don't know which
    // columns will be displaying the rowNode.key info.
    childNode.setData(childNode.data);
    // we add both old and new parents to changed path, as both will need to be refreshed.
    // we already added the old parent (in calling method), so just add the new parent here
    if (details.changedPath.isActive()) {
      var newParent = childNode.parent;
      details.changedPath.addParentNode(newParent);
    }
  };
  GroupStage.prototype.removeNodes = function (leafRowNodes, details, batchRemover) {
    this.removeNodesInStages(leafRowNodes, details, batchRemover);
    if (details.changedPath.isActive()) {
      leafRowNodes.forEach(function (rowNode) {
        return details.changedPath.addParentNode(rowNode.parent);
      });
    }
  };
  GroupStage.prototype.removeNodesInStages = function (leafRowNodes, details, batchRemover) {
    this.removeNodesFromParents(leafRowNodes, details, batchRemover);
    if (this.usingTreeData) {
      this.postRemoveCreateFillerNodes(leafRowNodes, details);
      // When not TreeData, then removeEmptyGroups is called just before the BatchRemover is flushed.
      // However for TreeData, there is no BatchRemover, so we have to call removeEmptyGroups here.
      var nodeParents = leafRowNodes.map(function (n) {
        return n.parent;
      });
      this.removeEmptyGroups(nodeParents, details);
    }
  };
  GroupStage.prototype.forEachParentGroup = function (details, group, callback) {
    var pointer = group;
    while (pointer && pointer !== details.rootNode) {
      callback(pointer);
      pointer = pointer.parent;
    }
  };
  GroupStage.prototype.removeNodesFromParents = function (nodesToRemove, details, provided) {
    var _this = this;
    // this method can be called with BatchRemover as optional. if it is missed, we created a local version
    // and flush it at the end. if one is provided, we add to the provided one and it gets flushed elsewhere.
    var batchRemoverIsLocal = provided == null;
    var batchRemoverToUse = provided ? provided : new BatchRemover();
    nodesToRemove.forEach(function (nodeToRemove) {
      _this.removeFromParent(nodeToRemove, batchRemoverToUse);
      // remove from allLeafChildren. we clear down all parents EXCEPT the Root Node, as
      // the ClientSideNodeManager is responsible for the Root Node.
      _this.forEachParentGroup(details, nodeToRemove.parent, function (parentNode) {
        batchRemoverToUse.removeFromAllLeafChildren(parentNode, nodeToRemove);
      });
    });
    if (batchRemoverIsLocal) {
      batchRemoverToUse.flush();
    }
  };
  GroupStage.prototype.postRemoveCreateFillerNodes = function (nodesToRemove, details) {
    var _this = this;
    nodesToRemove.forEach(function (nodeToRemove) {
      // if not group, and children are present, need to move children to a group.
      // otherwise if no children, we can just remove without replacing.
      var replaceWithGroup = nodeToRemove.hasChildren();
      if (replaceWithGroup) {
        var oldPath = _this.getExistingPathForNode(nodeToRemove, details);
        // because we just removed the userGroup, this will always return new support group
        var newGroupNode_1 = _this.findParentForNode(nodeToRemove, oldPath, details);
        // these properties are the ones that will be incorrect in the newly created group,
        // so copy them from the old childNode
        newGroupNode_1.expanded = nodeToRemove.expanded;
        newGroupNode_1.allLeafChildren = nodeToRemove.allLeafChildren;
        newGroupNode_1.childrenAfterGroup = nodeToRemove.childrenAfterGroup;
        newGroupNode_1.childrenMapped = nodeToRemove.childrenMapped;
        newGroupNode_1.updateHasChildren();
        newGroupNode_1.childrenAfterGroup.forEach(function (rowNode) {
          return rowNode.parent = newGroupNode_1;
        });
      }
    });
  };
  GroupStage.prototype.removeEmptyGroups = function (possibleEmptyGroups, details) {
    var _this = this;
    // we do this multiple times, as when we remove groups, that means the parent of just removed
    // group can then be empty. to get around this, if we remove, then we check everything again for
    // newly emptied groups. the max number of times this will execute is the depth of the group tree.
    var checkAgain = true;
    var groupShouldBeRemoved = function (rowNode) {
      // because of the while loop below, it's possible we already moved the node,
      // so double check before trying to remove again.
      var mapKey = _this.getChildrenMappedKey(rowNode.key, rowNode.rowGroupColumn);
      var parentRowNode = rowNode.parent;
      var groupAlreadyRemoved = parentRowNode && parentRowNode.childrenMapped ? !parentRowNode.childrenMapped[mapKey] : true;
      if (groupAlreadyRemoved) {
        // if not linked, then group was already removed
        return false;
      }
      // if still not removed, then we remove if this group is empty
      return !!rowNode.isEmptyRowGroupNode();
    };
    var _loop_1 = function () {
      checkAgain = false;
      var batchRemover = new BatchRemover();
      possibleEmptyGroups.forEach(function (possibleEmptyGroup) {
        // remove empty groups
        _this.forEachParentGroup(details, possibleEmptyGroup, function (rowNode) {
          if (groupShouldBeRemoved(rowNode)) {
            checkAgain = true;
            _this.removeFromParent(rowNode, batchRemover);
            // we remove selection on filler nodes here, as the selection would not be removed
            // from the RowNodeManager, as filler nodes don't exist on the RowNodeManager
            rowNode.setSelected(false);
          }
        });
      });
      batchRemover.flush();
    };
    while (checkAgain) {
      _loop_1();
    }
  };
  // removes the node from the parent by:
  // a) removing from childrenAfterGroup (using batchRemover if present, otherwise immediately)
  // b) removing from childrenMapped (immediately)
  // c) setRowTop(null) - as the rowRenderer uses this to know the RowNode is no longer needed
  // d) setRowIndex(null) - as the rowNode will no longer be displayed.
  GroupStage.prototype.removeFromParent = function (child, batchRemover) {
    if (child.parent) {
      if (batchRemover) {
        batchRemover.removeFromChildrenAfterGroup(child.parent, child);
      } else {
        agGridCommunity._.removeFromArray(child.parent.childrenAfterGroup, child);
        child.parent.updateHasChildren();
      }
    }
    var mapKey = this.getChildrenMappedKey(child.key, child.rowGroupColumn);
    if (child.parent && child.parent.childrenMapped) {
      child.parent.childrenMapped[mapKey] = undefined;
    }
    // this is important for transition, see rowComp removeFirstPassFuncs. when doing animation and
    // remove, if rowTop is still present, the rowComp thinks it's just moved position.
    child.setRowTop(null);
    child.setRowIndex(null);
  };
  GroupStage.prototype.addToParent = function (child, parent) {
    var mapKey = this.getChildrenMappedKey(child.key, child.rowGroupColumn);
    if (parent) {
      if (parent.childrenMapped) {
        parent.childrenMapped[mapKey] = child;
      }
      parent.childrenAfterGroup.push(child);
      parent.updateHasChildren();
    }
  };
  GroupStage.prototype.areGroupColsEqual = function (d1, d2) {
    if (d1 == null || d2 == null || d1.pivotMode !== d2.pivotMode) {
      return false;
    }
    return agGridCommunity._.areEqual(d1.groupedCols, d2.groupedCols);
  };
  GroupStage.prototype.checkAllGroupDataAfterColsChanged = function (details) {
    var _this = this;
    var recurse = function (rowNodes) {
      if (!rowNodes) {
        return;
      }
      rowNodes.forEach(function (rowNode) {
        var isLeafNode = !_this.usingTreeData && !rowNode.group;
        if (isLeafNode) {
          return;
        }
        var groupInfo = {
          field: rowNode.field,
          key: rowNode.key,
          rowGroupColumn: rowNode.rowGroupColumn
        };
        _this.setGroupData(rowNode, groupInfo);
        recurse(rowNode.childrenAfterGroup);
      });
    };
    recurse(details.rootNode.childrenAfterGroup);
  };
  GroupStage.prototype.shotgunResetEverything = function (details, afterColumnsChanged) {
    if (this.processAfterColumnsChanged(details, afterColumnsChanged)) {
      return;
    }
    // because we are not creating the root node each time, we have the logic
    // here to change leafGroup once.
    // we set .leafGroup to false for tree data, as .leafGroup is only used when pivoting, and pivoting
    // isn't allowed with treeData, so the grid never actually use .leafGroup when doing treeData.
    details.rootNode.leafGroup = this.usingTreeData ? false : details.groupedCols.length === 0;
    // we are doing everything from scratch, so reset childrenAfterGroup and childrenMapped from the rootNode
    details.rootNode.childrenAfterGroup = [];
    details.rootNode.childrenMapped = {};
    details.rootNode.updateHasChildren();
    this.insertNodes(details.rootNode.allLeafChildren, details, false);
  };
  GroupStage.prototype.processAfterColumnsChanged = function (details, afterColumnsChanged) {
    var noFurtherProcessingNeeded = false;
    var groupDisplayColumns = this.columnController.getGroupDisplayColumns();
    var newGroupDisplayColIds = groupDisplayColumns ? groupDisplayColumns.map(function (c) {
      return c.getId();
    }).join('-') : '';
    if (afterColumnsChanged) {
      // we only need to redo grouping if doing normal grouping (ie not tree data)
      // and the group cols have changed.
      noFurtherProcessingNeeded = this.usingTreeData || this.areGroupColsEqual(details, this.oldGroupingDetails);
      // if the group display cols have changed, then we need to update rowNode.groupData
      // (regardless of tree data or row grouping)
      if (this.oldGroupDisplayColIds !== newGroupDisplayColIds) {
        this.checkAllGroupDataAfterColsChanged(details);
      }
    }
    this.oldGroupingDetails = details;
    this.oldGroupDisplayColIds = newGroupDisplayColIds;
    return noFurtherProcessingNeeded;
  };
  GroupStage.prototype.insertNodes = function (newRowNodes, details, isMove) {
    var _this = this;
    newRowNodes.forEach(function (rowNode) {
      _this.insertOneNode(rowNode, details, isMove);
      if (details.changedPath.isActive()) {
        details.changedPath.addParentNode(rowNode.parent);
      }
    });
  };
  GroupStage.prototype.insertOneNode = function (childNode, details, isMove) {
    var path = this.getGroupInfo(childNode, details);
    var parentGroup = this.findParentForNode(childNode, path, details);
    if (!parentGroup.group) {
      console.warn("AG Grid: duplicate group keys for row data, keys should be unique", [parentGroup.data, childNode.data]);
    }
    if (this.usingTreeData) {
      this.swapGroupWithUserNode(parentGroup, childNode, isMove);
    } else {
      childNode.parent = parentGroup;
      childNode.level = path.length;
      parentGroup.childrenAfterGroup.push(childNode);
      parentGroup.updateHasChildren();
    }
  };
  GroupStage.prototype.findParentForNode = function (childNode, path, details) {
    var _this = this;
    var nextNode = details.rootNode;
    path.forEach(function (groupInfo, level) {
      nextNode = _this.getOrCreateNextNode(nextNode, groupInfo, level, details);
      // node gets added to all group nodes.
      // note: we do not add to rootNode here, as the rootNode is the master list of rowNodes
      nextNode.allLeafChildren.push(childNode);
    });
    return nextNode;
  };
  GroupStage.prototype.swapGroupWithUserNode = function (fillerGroup, userGroup, isMove) {
    userGroup.parent = fillerGroup.parent;
    userGroup.key = fillerGroup.key;
    userGroup.field = fillerGroup.field;
    userGroup.groupData = fillerGroup.groupData;
    userGroup.level = fillerGroup.level;
    // AG-3441 - preserve the existing expanded status of the node if we're moving it, so that
    // you can drag a sub tree from one parent to another without changing its expansion
    if (!isMove) {
      userGroup.expanded = fillerGroup.expanded;
    }
    // we set .leafGroup to false for tree data, as .leafGroup is only used when pivoting, and pivoting
    // isn't allowed with treeData, so the grid never actually use .leafGroup when doing treeData.
    userGroup.leafGroup = fillerGroup.leafGroup;
    // always null for userGroups, as row grouping is not allowed when doing tree data
    userGroup.rowGroupIndex = fillerGroup.rowGroupIndex;
    userGroup.allLeafChildren = fillerGroup.allLeafChildren;
    userGroup.childrenAfterGroup = fillerGroup.childrenAfterGroup;
    userGroup.childrenMapped = fillerGroup.childrenMapped;
    userGroup.updateHasChildren();
    this.removeFromParent(fillerGroup);
    userGroup.childrenAfterGroup.forEach(function (rowNode) {
      return rowNode.parent = userGroup;
    });
    this.addToParent(userGroup, fillerGroup.parent);
  };
  GroupStage.prototype.getOrCreateNextNode = function (parentGroup, groupInfo, level, details) {
    var key = this.getChildrenMappedKey(groupInfo.key, groupInfo.rowGroupColumn);
    var map = parentGroup.childrenMapped;
    // we use hasOwnProperty as otherwise things like 'constructor' would fail as a key,
    // as javascript map already has an inherited property 'constructor
    var nodeExists = map && map.hasOwnProperty(key);
    var nextNode = nodeExists ? map[key] : undefined;
    if (!nextNode) {
      nextNode = this.createGroup(groupInfo, parentGroup, level, details);
      // attach the new group to the parent
      this.addToParent(nextNode, parentGroup);
    }
    return nextNode;
  };
  GroupStage.prototype.createGroup = function (groupInfo, parent, level, details) {
    var groupNode = new agGridCommunity.RowNode();
    this.context.createBean(groupNode);
    groupNode.group = true;
    groupNode.field = groupInfo.field;
    groupNode.rowGroupColumn = groupInfo.rowGroupColumn;
    this.setGroupData(groupNode, groupInfo);
    // we put 'row-group-' before the group id, so it doesn't clash with standard row id's. we also use 't-' and 'b-'
    // for top pinned and bottom pinned rows.
    groupNode.id = agGridCommunity.RowNode.ID_PREFIX_ROW_GROUP + this.groupIdSequence.next();
    groupNode.key = groupInfo.key;
    groupNode.level = level;
    groupNode.leafGroup = this.usingTreeData ? false : level === details.groupedColCount - 1;
    groupNode.allLeafChildren = [];
    // why is this done here? we are not updating the children count as we go,
    // i suspect this is updated in the filter stage
    groupNode.setAllChildrenCount(0);
    groupNode.rowGroupIndex = this.usingTreeData ? null : level;
    groupNode.childrenAfterGroup = [];
    groupNode.childrenMapped = {};
    groupNode.updateHasChildren();
    groupNode.parent = details.includeParents ? parent : null;
    this.setExpandedInitialValue(details, groupNode);
    return groupNode;
  };
  GroupStage.prototype.setGroupData = function (groupNode, groupInfo) {
    var _this = this;
    groupNode.groupData = {};
    var groupDisplayCols = this.columnController.getGroupDisplayColumns();
    groupDisplayCols.forEach(function (col) {
      // newGroup.rowGroupColumn=null when working off GroupInfo, and we always display the group in the group column
      // if rowGroupColumn is present, then it's grid row grouping and we only include if configuration says so
      var displayGroupForCol = _this.usingTreeData || (groupNode.rowGroupColumn ? col.isRowGroupDisplayed(groupNode.rowGroupColumn.getId()) : false);
      if (displayGroupForCol) {
        groupNode.groupData[col.getColId()] = groupInfo.key;
      }
    });
  };
  GroupStage.prototype.getChildrenMappedKey = function (key, rowGroupColumn) {
    if (rowGroupColumn) {
      // grouping by columns
      return rowGroupColumn.getId() + '-' + key;
    }
    // tree data - we don't have rowGroupColumns
    return key;
  };
  GroupStage.prototype.setExpandedInitialValue = function (details, groupNode) {
    // if pivoting the leaf group is never expanded as we do not show leaf rows
    if (details.pivotMode && groupNode.leafGroup) {
      groupNode.expanded = false;
      return;
    }
    // use callback if exists
    var userCallback = this.gridOptionsWrapper.getIsGroupOpenByDefaultFunc();
    if (userCallback) {
      var params = {
        rowNode: groupNode,
        field: groupNode.field,
        key: groupNode.key,
        level: groupNode.level,
        rowGroupColumn: groupNode.rowGroupColumn
      };
      groupNode.expanded = userCallback(params) == true;
      return;
    }
    // use expandByDefault if exists
    var expandByDefault = details.expandByDefault;
    if (details.expandByDefault === -1) {
      groupNode.expanded = true;
      return;
    }
    // otherwise
    groupNode.expanded = groupNode.level < expandByDefault;
  };
  GroupStage.prototype.getGroupInfo = function (rowNode, details) {
    if (this.usingTreeData) {
      return this.getGroupInfoFromCallback(rowNode);
    }
    return this.getGroupInfoFromGroupColumns(rowNode, details);
  };
  GroupStage.prototype.getGroupInfoFromCallback = function (rowNode) {
    var keys = this.getDataPath ? this.getDataPath(rowNode.data) : null;
    if (keys === null || keys === undefined || keys.length === 0) {
      agGridCommunity._.doOnce(function () {
        return console.warn("getDataPath() should not return an empty path for data", rowNode.data);
      }, 'groupStage.getGroupInfoFromCallback');
    }
    var groupInfoMapper = function (key) {
      return {
        key: key,
        field: null,
        rowGroupColumn: null
      };
    };
    return keys ? keys.map(groupInfoMapper) : [];
  };
  GroupStage.prototype.getGroupInfoFromGroupColumns = function (rowNode, details) {
    var _this = this;
    var res = [];
    details.groupedCols.forEach(function (groupCol) {
      var key = _this.valueService.getKeyForNode(groupCol, rowNode);
      var keyExists = key !== null && key !== undefined;
      // unbalanced tree and pivot mode don't work together - not because of the grid, it doesn't make
      // mathematical sense as you are building up a cube. so if pivot mode, we put in a blank key where missing.
      // this keeps the tree balanced and hence can be represented as a group.
      if (details.pivotMode && !keyExists) {
        key = ' ';
        keyExists = true;
      }
      if (keyExists) {
        var item = {
          key: key,
          field: groupCol.getColDef().field,
          rowGroupColumn: groupCol
        };
        res.push(item);
      }
    });
    return res;
  };
  __decorate$9([agGridCommunity.Autowired('columnController')], GroupStage.prototype, "columnController", void 0);
  __decorate$9([agGridCommunity.Autowired('selectableService')], GroupStage.prototype, "selectableService", void 0);
  __decorate$9([agGridCommunity.Autowired('valueService')], GroupStage.prototype, "valueService", void 0);
  __decorate$9([agGridCommunity.PostConstruct], GroupStage.prototype, "postConstruct", null);
  GroupStage = __decorate$9([agGridCommunity.Bean('groupStage')], GroupStage);
  return GroupStage;
}(agGridCommunity.BeanStub);
var __extends$a =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$a =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __spreadArrays =  false || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
};
var PivotColDefService = /** @class */function (_super) {
  __extends$a(PivotColDefService, _super);
  function PivotColDefService() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  PivotColDefService_1 = PivotColDefService;
  PivotColDefService.prototype.createPivotColumnDefs = function (uniqueValues) {
    // this is passed to the columnController, to configure the columns and groups we show
    var pivotColumnGroupDefs = [];
    // this is used by the aggregation stage, to do the aggregation based on the pivot columns
    var pivotColumnDefs = [];
    var pivotColumns = this.columnController.getPivotColumns();
    var valueColumns = this.columnController.getValueColumns();
    var levelsDeep = pivotColumns.length;
    var columnIdSequence = new agGridCommunity.NumberSequence();
    this.recursivelyAddGroup(pivotColumnGroupDefs, pivotColumnDefs, 1, uniqueValues, [], columnIdSequence, levelsDeep, pivotColumns);
    // additional columns that contain the aggregated total for each value column per row
    this.addRowGroupTotals(pivotColumnGroupDefs, pivotColumnDefs, valueColumns, columnIdSequence);
    // additional group columns that contain child totals for each collapsed child column / group
    this.addExpandablePivotGroups(pivotColumnGroupDefs, pivotColumnDefs, columnIdSequence);
    // additional group columns that contain an aggregated total across all child columns
    this.addPivotTotalsToGroups(pivotColumnGroupDefs, pivotColumnDefs, columnIdSequence);
    // we clone, so the colDefs in pivotColumnsGroupDefs and pivotColumnDefs are not shared. this is so that
    // any changes the user makes (via processSecondaryColumnDefinitions) don't impact the internal aggregations,
    // as these use the col defs also
    var pivotColumnDefsClone = pivotColumnDefs.map(function (colDef) {
      return agGridCommunity._.cloneObject(colDef);
    });
    return {
      pivotColumnGroupDefs: pivotColumnGroupDefs,
      pivotColumnDefs: pivotColumnDefsClone
    };
  };
  // parentChildren - the list of colDefs we are adding to
  // @index - how far the column is from the top (also same as pivotKeys.length)
  // @uniqueValues - the values for which we should create a col for
  // @pivotKeys - the keys for the pivot, eg if pivoting on {Language,Country} then could be {English,Ireland}
  PivotColDefService.prototype.recursivelyAddGroup = function (parentChildren, pivotColumnDefs, index, uniqueValues, pivotKeys, columnIdSequence, levelsDeep, primaryPivotColumns) {
    var _this = this;
    agGridCommunity._.iterateObject(uniqueValues, function (key, value) {
      var newPivotKeys = __spreadArrays(pivotKeys, [key]);
      var createGroup = index !== levelsDeep;
      if (createGroup) {
        var groupDef = {
          children: [],
          headerName: key,
          pivotKeys: newPivotKeys,
          columnGroupShow: 'open',
          groupId: 'pivot' + columnIdSequence.next()
        };
        parentChildren.push(groupDef);
        _this.recursivelyAddGroup(groupDef.children, pivotColumnDefs, index + 1, value, newPivotKeys, columnIdSequence, levelsDeep, primaryPivotColumns);
      } else {
        var measureColumns = _this.columnController.getValueColumns();
        var valueGroup_1 = {
          children: [],
          headerName: key,
          pivotKeys: newPivotKeys,
          columnGroupShow: 'open',
          groupId: 'pivot' + columnIdSequence.next()
        };
        // if no value columns selected, then we insert one blank column, so the user at least sees columns
        // rendered. otherwise the grid would render with no columns (just empty groups) which would give the
        // impression that the grid is broken
        if (measureColumns.length === 0) {
          // this is the blank column, for when no value columns enabled.
          var colDef = _this.createColDef(null, '-', newPivotKeys, columnIdSequence);
          valueGroup_1.children.push(colDef);
          pivotColumnDefs.push(colDef);
        } else {
          measureColumns.forEach(function (measureColumn) {
            var columnName = _this.columnController.getDisplayNameForColumn(measureColumn, 'header');
            var colDef = _this.createColDef(measureColumn, columnName, newPivotKeys, columnIdSequence);
            colDef.columnGroupShow = 'open';
            valueGroup_1.children.push(colDef);
            pivotColumnDefs.push(colDef);
          });
        }
        parentChildren.push(valueGroup_1);
      }
    });
    // sort by either user provided comparator, or our own one
    var primaryPivotColumnDefs = primaryPivotColumns[index - 1].getColDef();
    var userComparator = primaryPivotColumnDefs.pivotComparator;
    var comparator = this.headerNameComparator.bind(this, userComparator);
    parentChildren.sort(comparator);
  };
  PivotColDefService.prototype.addExpandablePivotGroups = function (pivotColumnGroupDefs, pivotColumnDefs, columnIdSequence) {
    var _this = this;
    if (this.gridOptionsWrapper.isSuppressExpandablePivotGroups() || this.gridOptionsWrapper.getPivotColumnGroupTotals()) {
      return;
    }
    var recursivelyAddSubTotals = function (groupDef, currentPivotColumnDefs, currentColumnIdSequence, acc) {
      var group = groupDef;
      if (group.children) {
        var childAcc_1 = new Map();
        group.children.forEach(function (grp) {
          recursivelyAddSubTotals(grp, currentPivotColumnDefs, currentColumnIdSequence, childAcc_1);
        });
        var firstGroup_1 = !group.children.some(function (child) {
          return child.children;
        });
        _this.columnController.getValueColumns().forEach(function (valueColumn) {
          var columnName = _this.columnController.getDisplayNameForColumn(valueColumn, 'header');
          var totalColDef = _this.createColDef(valueColumn, columnName, groupDef.pivotKeys, currentColumnIdSequence);
          totalColDef.pivotTotalColumnIds = childAcc_1.get(valueColumn.getColId());
          totalColDef.columnGroupShow = 'closed';
          totalColDef.aggFunc = valueColumn.getAggFunc();
          if (!firstGroup_1) {
            // add total colDef to group and pivot colDefs array
            var children = groupDef.children;
            children.push(totalColDef);
            currentPivotColumnDefs.push(totalColDef);
          }
        });
        _this.merge(acc, childAcc_1);
      } else {
        var def = groupDef;
        // check that value column exists, i.e. aggFunc is supplied
        if (!def.pivotValueColumn) {
          return;
        }
        var pivotValueColId = def.pivotValueColumn.getColId();
        var arr = acc.has(pivotValueColId) ? acc.get(pivotValueColId) : [];
        arr.push(def.colId);
        acc.set(pivotValueColId, arr);
      }
    };
    pivotColumnGroupDefs.forEach(function (groupDef) {
      recursivelyAddSubTotals(groupDef, pivotColumnDefs, columnIdSequence, new Map());
    });
  };
  PivotColDefService.prototype.addPivotTotalsToGroups = function (pivotColumnGroupDefs, pivotColumnDefs, columnIdSequence) {
    var _this = this;
    if (!this.gridOptionsWrapper.getPivotColumnGroupTotals()) {
      return;
    }
    var insertAfter = this.gridOptionsWrapper.getPivotColumnGroupTotals() === 'after';
    var valueCols = this.columnController.getValueColumns();
    var aggFuncs = valueCols.map(function (valueCol) {
      return valueCol.getAggFunc();
    });
    // don't add pivot totals if there is less than 1 aggFunc or they are not all the same
    if (!aggFuncs || aggFuncs.length < 1 || !this.sameAggFuncs(aggFuncs)) {
      // console.warn('AG Grid: aborting adding pivot total columns - value columns require same aggFunc');
      return;
    }
    // arbitrarily select a value column to use as a template for pivot columns
    var valueColumn = valueCols[0];
    pivotColumnGroupDefs.forEach(function (groupDef) {
      _this.recursivelyAddPivotTotal(groupDef, pivotColumnDefs, columnIdSequence, valueColumn, insertAfter);
    });
  };
  PivotColDefService.prototype.recursivelyAddPivotTotal = function (groupDef, pivotColumnDefs, columnIdSequence, valueColumn, insertAfter) {
    var _this = this;
    var group = groupDef;
    if (!group.children) {
      var def = groupDef;
      return def.colId ? [def.colId] : null;
    }
    var colIds = [];
    // need to recurse children first to obtain colIds used in the aggregation stage
    group.children.forEach(function (grp) {
      var childColIds = _this.recursivelyAddPivotTotal(grp, pivotColumnDefs, columnIdSequence, valueColumn, insertAfter);
      if (childColIds) {
        colIds = colIds.concat(childColIds);
      }
    });
    // only add total colDef if there is more than 1 child node
    if (group.children.length > 1) {
      //create total colDef using an arbitrary value column as a template
      var totalColDef = this.createColDef(valueColumn, 'Total', groupDef.pivotKeys, columnIdSequence);
      totalColDef.pivotTotalColumnIds = colIds;
      totalColDef.aggFunc = valueColumn.getAggFunc();
      // add total colDef to group and pivot colDefs array
      var children = groupDef.children;
      insertAfter ? children.push(totalColDef) : children.unshift(totalColDef);
      pivotColumnDefs.push(totalColDef);
    }
    return colIds;
  };
  PivotColDefService.prototype.addRowGroupTotals = function (pivotColumnGroupDefs, pivotColumnDefs, valueColumns, columnIdSequence) {
    var _this = this;
    if (!this.gridOptionsWrapper.getPivotRowTotals()) {
      return;
    }
    var insertAfter = this.gridOptionsWrapper.getPivotRowTotals() === 'after';
    // order of row group totals depends on position
    var valueCols = insertAfter ? valueColumns.slice() : valueColumns.slice().reverse();
    var _loop_1 = function (i) {
      var valueCol = valueCols[i];
      var colIds = [];
      pivotColumnGroupDefs.forEach(function (groupDef) {
        colIds = colIds.concat(_this.extractColIdsForValueColumn(groupDef, valueCol));
      });
      this_1.createRowGroupTotal(pivotColumnGroupDefs, pivotColumnDefs, [], columnIdSequence, valueCol, colIds, insertAfter);
    };
    var this_1 = this;
    for (var i = 0; i < valueCols.length; i++) {
      _loop_1(i);
    }
  };
  PivotColDefService.prototype.extractColIdsForValueColumn = function (groupDef, valueColumn) {
    var _this = this;
    var group = groupDef;
    if (!group.children) {
      var colDef = group;
      return colDef.pivotValueColumn === valueColumn && colDef.colId ? [colDef.colId] : [];
    }
    var colIds = [];
    group.children.forEach(function (grp) {
      _this.extractColIdsForValueColumn(grp, valueColumn);
      var childColIds = _this.extractColIdsForValueColumn(grp, valueColumn);
      colIds = colIds.concat(childColIds);
    });
    return colIds;
  };
  PivotColDefService.prototype.createRowGroupTotal = function (parentChildren, pivotColumnDefs, pivotKeys, columnIdSequence, valueColumn, colIds, insertAfter) {
    var newPivotKeys = pivotKeys.slice(0);
    var measureColumns = this.columnController.getValueColumns();
    var valueGroup = {
      children: [],
      pivotKeys: newPivotKeys,
      groupId: PivotColDefService_1.PIVOT_ROW_TOTAL_PREFIX + columnIdSequence.next()
    };
    if (measureColumns.length === 0) {
      var colDef = this.createColDef(null, '-', newPivotKeys, columnIdSequence);
      valueGroup.children.push(colDef);
      pivotColumnDefs.push(colDef);
    } else {
      var columnName = this.columnController.getDisplayNameForColumn(valueColumn, 'header');
      var colDef = this.createColDef(valueColumn, columnName, newPivotKeys, columnIdSequence);
      colDef.pivotTotalColumnIds = colIds;
      valueGroup.children.push(colDef);
      pivotColumnDefs.push(colDef);
    }
    insertAfter ? parentChildren.push(valueGroup) : parentChildren.unshift(valueGroup);
  };
  PivotColDefService.prototype.createColDef = function (valueColumn, headerName, pivotKeys, columnIdSequence) {
    var colDef = {};
    if (valueColumn) {
      var colDefToCopy = valueColumn.getColDef();
      agGridCommunity._.assign(colDef, colDefToCopy);
      // even if original column was hidden, we always show the pivot value column, otherwise it would be
      // very confusing for people thinking the pivot is broken
      colDef.hide = false;
    }
    colDef.headerName = headerName;
    colDef.colId = 'pivot_' + columnIdSequence.next();
    // pivot columns repeat over field, so it makes sense to use the unique id instead. For example if you want to
    // assign values to pinned bottom rows using setPinnedBottomRowData the value service will use this colId.
    colDef.field = colDef.colId;
    colDef.pivotKeys = pivotKeys;
    colDef.pivotValueColumn = valueColumn;
    colDef.filter = false;
    return colDef;
  };
  PivotColDefService.prototype.sameAggFuncs = function (aggFuncs) {
    if (aggFuncs.length == 1) {
      return true;
    }
    //check if all aggFunc's match
    for (var i = 1; i < aggFuncs.length; i++) {
      if (aggFuncs[i] !== aggFuncs[0]) {
        return false;
      }
    }
    return true;
  };
  PivotColDefService.prototype.headerNameComparator = function (userComparator, a, b) {
    if (userComparator) {
      return userComparator(a.headerName, b.headerName);
    } else {
      if (a.headerName && !b.headerName) {
        return 1;
      } else if (!a.headerName && b.headerName) {
        return -1;
      }
      // slightly naff here - just to satify typescript
      // really should be &&, but if so ts complains
      // the above if/else checks would deal with either being falsy, so at this stage if either are falsy, both are
      // ..still naff though
      if (!a.headerName || !b.headerName) {
        return 0;
      }
      if (a.headerName < b.headerName) {
        return -1;
      }
      if (a.headerName > b.headerName) {
        return 1;
      }
      return 0;
    }
  };
  PivotColDefService.prototype.merge = function (m1, m2) {
    m2.forEach(function (value, key, map) {
      var existingList = m1.has(key) ? m1.get(key) : [];
      var updatedList = __spreadArrays(existingList, value);
      m1.set(key, updatedList);
    });
  };
  var PivotColDefService_1;
  PivotColDefService.PIVOT_ROW_TOTAL_PREFIX = 'PivotRowTotal_';
  __decorate$a([agGridCommunity.Autowired('columnController')], PivotColDefService.prototype, "columnController", void 0);
  PivotColDefService = PivotColDefService_1 = __decorate$a([agGridCommunity.Bean('pivotColDefService')], PivotColDefService);
  return PivotColDefService;
}(agGridCommunity.BeanStub);
var __extends$b =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$b =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PivotStage = /** @class */function (_super) {
  __extends$b(PivotStage, _super);
  function PivotStage() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.uniqueValues = {};
    return _this;
  }
  PivotStage.prototype.execute = function (params) {
    var rootNode = params.rowNode;
    var changedPath = params.changedPath;
    if (this.columnController.isPivotActive()) {
      this.executePivotOn(rootNode, changedPath);
    } else {
      this.executePivotOff(changedPath);
    }
  };
  PivotStage.prototype.executePivotOff = function (changedPath) {
    this.aggregationColumnsHashLastTime = null;
    this.uniqueValues = {};
    if (this.columnController.isSecondaryColumnsPresent()) {
      this.columnController.setSecondaryColumns(null, "rowModelUpdated");
      if (changedPath) {
        changedPath.setInactive();
      }
    }
  };
  PivotStage.prototype.executePivotOn = function (rootNode, changedPath) {
    var uniqueValues = this.bucketUpRowNodes(rootNode);
    var uniqueValuesChanged = this.setUniqueValues(uniqueValues);
    var aggregationColumns = this.columnController.getValueColumns();
    var aggregationColumnsHash = aggregationColumns.map(function (column) {
      return column.getId();
    }).join('#');
    var aggregationFuncsHash = aggregationColumns.map(function (column) {
      return column.getAggFunc().toString();
    }).join('#');
    var aggregationColumnsChanged = this.aggregationColumnsHashLastTime !== aggregationColumnsHash;
    var aggregationFuncsChanged = this.aggregationFuncsHashLastTime !== aggregationFuncsHash;
    this.aggregationColumnsHashLastTime = aggregationColumnsHash;
    this.aggregationFuncsHashLastTime = aggregationFuncsHash;
    if (uniqueValuesChanged || aggregationColumnsChanged || aggregationFuncsChanged) {
      var _a = this.pivotColDefService.createPivotColumnDefs(this.uniqueValues),
        pivotColumnGroupDefs = _a.pivotColumnGroupDefs,
        pivotColumnDefs = _a.pivotColumnDefs;
      this.pivotColumnDefs = pivotColumnDefs;
      this.columnController.setSecondaryColumns(pivotColumnGroupDefs, "rowModelUpdated");
      // because the secondary columns have changed, then the aggregation needs to visit the whole
      // tree again, so we make the changedPath not active, to force aggregation to visit all paths.
      if (changedPath) {
        changedPath.setInactive();
      }
    }
  };
  PivotStage.prototype.setUniqueValues = function (newValues) {
    var json1 = JSON.stringify(newValues);
    var json2 = JSON.stringify(this.uniqueValues);
    var uniqueValuesChanged = json1 !== json2;
    // we only continue the below if the unique values are different, as otherwise
    // the result will be the same as the last time we did it
    if (uniqueValuesChanged) {
      this.uniqueValues = newValues;
      return true;
    } else {
      return false;
    }
  };
  // returns true if values were different
  PivotStage.prototype.bucketUpRowNodes = function (rootNode) {
    var _this = this;
    // accessed from inside inner function
    var uniqueValues = {};
    // finds all leaf groups and calls mapRowNode with it
    var recursivelySearchForLeafNodes = function (rowNode) {
      if (rowNode.leafGroup) {
        _this.bucketRowNode(rowNode, uniqueValues);
      } else {
        rowNode.childrenAfterFilter.forEach(function (child) {
          recursivelySearchForLeafNodes(child);
        });
      }
    };
    recursivelySearchForLeafNodes(rootNode);
    return uniqueValues;
  };
  PivotStage.prototype.bucketRowNode = function (rowNode, uniqueValues) {
    var pivotColumns = this.columnController.getPivotColumns();
    if (pivotColumns.length === 0) {
      rowNode.childrenMapped = null;
      return;
    }
    rowNode.childrenMapped = this.bucketChildren(rowNode.childrenAfterFilter, pivotColumns, 0, uniqueValues);
  };
  PivotStage.prototype.bucketChildren = function (children, pivotColumns, pivotIndex, uniqueValues) {
    var _this = this;
    var mappedChildren = {};
    var pivotColumn = pivotColumns[pivotIndex];
    // map the children out based on the pivot column
    children.forEach(function (child) {
      var key = _this.valueService.getKeyForNode(pivotColumn, child);
      if (agGridCommunity._.missing(key)) {
        key = '';
      }
      if (!uniqueValues[key]) {
        uniqueValues[key] = {};
      }
      if (!mappedChildren[key]) {
        mappedChildren[key] = [];
      }
      mappedChildren[key].push(child);
    });
    // if it's the last pivot column, return as is, otherwise go one level further in the map
    if (pivotIndex === pivotColumns.length - 1) {
      return mappedChildren;
    } else {
      var result_1 = {};
      agGridCommunity._.iterateObject(mappedChildren, function (key, value) {
        result_1[key] = _this.bucketChildren(value, pivotColumns, pivotIndex + 1, uniqueValues[key]);
      });
      return result_1;
    }
  };
  PivotStage.prototype.getPivotColumnDefs = function () {
    return this.pivotColumnDefs;
  };
  __decorate$b([agGridCommunity.Autowired('valueService')], PivotStage.prototype, "valueService", void 0);
  __decorate$b([agGridCommunity.Autowired('columnController')], PivotStage.prototype, "columnController", void 0);
  __decorate$b([agGridCommunity.Autowired('pivotColDefService')], PivotStage.prototype, "pivotColDefService", void 0);
  PivotStage = __decorate$b([agGridCommunity.Bean('pivotStage')], PivotStage);
  return PivotStage;
}(agGridCommunity.BeanStub);
var __extends$c =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$c =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
// @ts-ignore
var AGBigInt = typeof BigInt === 'undefined' ? null : BigInt;
var AggFuncService = /** @class */function (_super) {
  __extends$c(AggFuncService, _super);
  function AggFuncService() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.aggFuncsMap = {};
    _this.initialised = false;
    return _this;
  }
  AggFuncService_1 = AggFuncService;
  AggFuncService.prototype.init = function () {
    if (this.initialised) {
      return;
    }
    this.initialiseWithDefaultAggregations();
    this.addAggFuncs(this.gridOptionsWrapper.getAggFuncs());
  };
  AggFuncService.prototype.initialiseWithDefaultAggregations = function () {
    this.aggFuncsMap[AggFuncService_1.AGG_SUM] = aggSum;
    this.aggFuncsMap[AggFuncService_1.AGG_FIRST] = aggFirst;
    this.aggFuncsMap[AggFuncService_1.AGG_LAST] = aggLast;
    this.aggFuncsMap[AggFuncService_1.AGG_MIN] = aggMin;
    this.aggFuncsMap[AggFuncService_1.AGG_MAX] = aggMax;
    this.aggFuncsMap[AggFuncService_1.AGG_COUNT] = aggCount;
    this.aggFuncsMap[AggFuncService_1.AGG_AVG] = aggAvg;
    this.initialised = true;
  };
  AggFuncService.prototype.getDefaultAggFunc = function (column) {
    var allKeys = this.getFuncNames(column);
    // use 'sum' if it's a) allowed for the column and b) still registered
    // (ie not removed by user)
    var sumInKeysList = agGridCommunity._.includes(allKeys, AggFuncService_1.AGG_SUM);
    var sumInFuncs = agGridCommunity._.exists(this.aggFuncsMap[AggFuncService_1.AGG_SUM]);
    if (sumInKeysList && sumInFuncs) {
      return AggFuncService_1.AGG_SUM;
    }
    return agGridCommunity._.existsAndNotEmpty(allKeys) ? allKeys[0] : null;
  };
  AggFuncService.prototype.addAggFuncs = function (aggFuncs) {
    agGridCommunity._.iterateObject(aggFuncs, this.addAggFunc.bind(this));
  };
  AggFuncService.prototype.addAggFunc = function (key, aggFunc) {
    this.init();
    this.aggFuncsMap[key] = aggFunc;
  };
  AggFuncService.prototype.getAggFunc = function (name) {
    this.init();
    return this.aggFuncsMap[name];
  };
  AggFuncService.prototype.getFuncNames = function (column) {
    var userAllowedFuncs = column.getColDef().allowedAggFuncs;
    return userAllowedFuncs == null ? Object.keys(this.aggFuncsMap).sort() : userAllowedFuncs;
  };
  AggFuncService.prototype.clear = function () {
    this.aggFuncsMap = {};
  };
  var AggFuncService_1;
  AggFuncService.AGG_SUM = 'sum';
  AggFuncService.AGG_FIRST = 'first';
  AggFuncService.AGG_LAST = 'last';
  AggFuncService.AGG_MIN = 'min';
  AggFuncService.AGG_MAX = 'max';
  AggFuncService.AGG_COUNT = 'count';
  AggFuncService.AGG_AVG = 'avg';
  __decorate$c([agGridCommunity.PostConstruct], AggFuncService.prototype, "init", null);
  AggFuncService = AggFuncService_1 = __decorate$c([agGridCommunity.Bean('aggFuncService')], AggFuncService);
  return AggFuncService;
}(agGridCommunity.BeanStub);
function aggSum(params) {
  var values = params.values;
  var result = null; // the logic ensures that we never combine bigint arithmetic with numbers, but TS is hard to please
  // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code
  for (var i = 0; i < values.length; i++) {
    var value = values[i];
    if (typeof value === 'number') {
      if (result === null) {
        result = value;
      } else {
        if (AGBigInt) {
          result += typeof result === 'number' ? value : AGBigInt(value);
        } else {
          result += value;
        }
      }
    } else if (typeof value === 'bigint') {
      if (result === null) {
        result = value;
      } else {
        result = (typeof result === 'bigint' ? result : AGBigInt(result)) + value;
      }
    }
  }
  return result;
}
function aggFirst(params) {
  return params.values.length > 0 ? params.values[0] : null;
}
function aggLast(params) {
  return params.values.length > 0 ? agGridCommunity._.last(params.values) : null;
}
function aggMin(params) {
  var values = params.values;
  var result = null;
  // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code
  for (var i = 0; i < values.length; i++) {
    var value = values[i];
    if ((typeof value === 'number' || typeof value === 'bigint') && (result === null || result > value)) {
      result = value;
    }
  }
  return result;
}
function aggMax(params) {
  var values = params.values;
  var result = null;
  // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code
  for (var i = 0; i < values.length; i++) {
    var value = values[i];
    if ((typeof value === 'number' || typeof value === 'bigint') && (result === null || result < value)) {
      result = value;
    }
  }
  return result;
}
function aggCount(params) {
  var values = params.values;
  var result = 0;
  // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code
  for (var i = 0; i < values.length; i++) {
    var value = values[i];
    // check if the value is from a group, in which case use the group's count
    result += value != null && typeof value.value === 'number' ? value.value : 1;
  }
  return {
    value: result,
    toString: function () {
      return this.value.toString();
    },
    // used for sorting
    toNumber: function () {
      return this.value;
    }
  };
}
// the average function is tricky as the multiple levels require weighted averages
// for the non-leaf node aggregations.
function aggAvg(params) {
  var values = params.values;
  var sum = 0; // the logic ensures that we never combine bigint arithmetic with numbers, but TS is hard to please
  var count = 0;
  // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code
  for (var i = 0; i < values.length; i++) {
    var currentValue = values[i];
    var valueToAdd = null;
    if (typeof currentValue === 'number' || typeof currentValue === 'bigint') {
      valueToAdd = currentValue;
      count++;
    } else if (currentValue != null && (typeof currentValue.value === 'number' || typeof currentValue.value === 'bigint') && typeof currentValue.count === 'number') {
      // we are aggregating groups, so we take the aggregated values to calculated a weighted average
      if (AGBigInt) {
        valueToAdd = currentValue.value * (typeof currentValue.value === 'number' ? currentValue.count : AGBigInt(currentValue.count));
      } else {
        valueToAdd = currentValue.value * currentValue.count;
      }
      count += currentValue.count;
    }
    if (typeof valueToAdd === 'number') {
      if (AGBigInt) {
        sum += typeof sum === 'number' ? valueToAdd : AGBigInt(valueToAdd);
      } else {
        sum += valueToAdd;
      }
    } else if (typeof valueToAdd === 'bigint') {
      sum = (typeof sum === 'bigint' ? sum : AGBigInt(sum)) + valueToAdd;
    }
  }
  var value = null;
  // avoid divide by zero error
  if (count > 0) {
    if (AGBigInt) {
      value = sum / (typeof sum === 'number' ? count : AGBigInt(count));
    } else {
      value = sum / count;
    }
  }
  // the result will be an object. when this cell is rendered, only the avg is shown.
  // however when this cell is part of another aggregation, the count is also needed
  // to create a weighted average for the next level.
  return {
    count: count,
    value: value,
    // the grid by default uses toString to render values for an object, so this
    // is a trick to get the default cellRenderer to display the avg value
    toString: function () {
      return typeof this.value === 'number' || typeof this.value === 'bigint' ? this.value.toString() : '';
    },
    // used for sorting
    toNumber: function () {
      return this.value;
    }
  };
}
var __extends$d =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$d =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DropZoneColumnComp = /** @class */function (_super) {
  __extends$d(DropZoneColumnComp, _super);
  function DropZoneColumnComp(column, dragSourceDropTarget, ghost, valueColumn, horizontal) {
    var _this = _super.call(this) || this;
    _this.column = column;
    _this.dragSourceDropTarget = dragSourceDropTarget;
    _this.ghost = ghost;
    _this.valueColumn = valueColumn;
    _this.horizontal = horizontal;
    _this.popupShowing = false;
    return _this;
  }
  DropZoneColumnComp.prototype.init = function () {
    this.setTemplate(DropZoneColumnComp.TEMPLATE);
    this.addElementClasses(this.getGui());
    this.addElementClasses(this.eDragHandle, 'drag-handle');
    this.addElementClasses(this.eText, 'text');
    this.addElementClasses(this.eButton, 'button');
    this.eDragHandle.appendChild(agGridCommunity._.createIconNoSpan('columnDrag', this.gridOptionsWrapper));
    this.eButton.appendChild(agGridCommunity._.createIconNoSpan('cancel', this.gridOptionsWrapper));
    this.displayName = this.columnController.getDisplayNameForColumn(this.column, 'columnDrop');
    this.setupComponents();
    if (!this.ghost && !this.gridOptionsWrapper.isFunctionsReadOnly()) {
      this.addDragSource();
    }
    this.setupTooltip();
  };
  DropZoneColumnComp.prototype.setupTooltip = function () {
    var _this = this;
    var refresh = function () {
      var newTooltipText = _this.column.getColDef().headerTooltip;
      _this.setTooltip(agGridCommunity._.escapeString(newTooltipText));
    };
    refresh();
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_NEW_COLUMNS_LOADED, refresh);
  };
  DropZoneColumnComp.prototype.addDragSource = function () {
    var _this = this;
    var dragSource = {
      type: agGridCommunity.DragSourceType.ToolPanel,
      eElement: this.eDragHandle,
      defaultIconName: agGridCommunity.DragAndDropService.ICON_HIDE,
      getDragItem: function () {
        return _this.createDragItem();
      },
      dragItemName: this.displayName,
      dragSourceDropTarget: this.dragSourceDropTarget
    };
    this.dragAndDropService.addDragSource(dragSource, true);
    this.addDestroyFunc(function () {
      return _this.dragAndDropService.removeDragSource(dragSource);
    });
  };
  DropZoneColumnComp.prototype.createDragItem = function () {
    var visibleState = {};
    visibleState[this.column.getId()] = this.column.isVisible();
    return {
      columns: [this.column],
      visibleState: visibleState
    };
  };
  DropZoneColumnComp.prototype.setupComponents = function () {
    this.setTextValue();
    this.setupRemove();
    if (this.ghost) {
      agGridCommunity._.addCssClass(this.getGui(), 'ag-column-drop-cell-ghost');
    }
    if (this.valueColumn && !this.gridOptionsWrapper.isFunctionsReadOnly()) {
      this.addGuiEventListener('click', this.onShowAggFuncSelection.bind(this));
    }
  };
  DropZoneColumnComp.prototype.setupRemove = function () {
    var _this = this;
    agGridCommunity._.setDisplayed(this.eButton, !this.gridOptionsWrapper.isFunctionsReadOnly());
    this.addManagedListener(this.eButton, 'click', function (mouseEvent) {
      var agEvent = {
        type: DropZoneColumnComp.EVENT_COLUMN_REMOVE
      };
      _this.dispatchEvent(agEvent);
      mouseEvent.stopPropagation();
    });
    var touchListener = new agGridCommunity.TouchListener(this.eButton);
    this.addManagedListener(touchListener, agGridCommunity.TouchListener.EVENT_TAP, function (event) {
      var agEvent = {
        type: DropZoneColumnComp.EVENT_COLUMN_REMOVE
      };
      _this.dispatchEvent(agEvent);
    });
    this.addDestroyFunc(touchListener.destroy.bind(touchListener));
  };
  DropZoneColumnComp.prototype.setTextValue = function () {
    var displayValue;
    if (this.valueColumn) {
      var aggFunc = this.column.getAggFunc();
      // if aggFunc is a string, we can use it, but if it's a function, then we swap with 'func'
      var aggFuncString = typeof aggFunc === 'string' ? aggFunc : 'agg';
      var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
      var aggFuncStringTranslated = localeTextFunc(aggFuncString, aggFuncString);
      displayValue = aggFuncStringTranslated + "(" + this.displayName + ")";
    } else {
      displayValue = this.displayName;
    }
    var displayValueSanitised = agGridCommunity._.escapeString(displayValue);
    this.eText.innerHTML = displayValueSanitised;
  };
  DropZoneColumnComp.prototype.onShowAggFuncSelection = function () {
    var _this = this;
    if (this.popupShowing) {
      return;
    }
    this.popupShowing = true;
    var virtualList = new agGridCommunity.VirtualList('select-agg-func');
    var rows = this.aggFuncService.getFuncNames(this.column);
    virtualList.setModel({
      getRow: function (index) {
        return rows[index];
      },
      getRowCount: function () {
        return rows.length;
      }
    });
    this.getContext().createBean(virtualList);
    var ePopup = agGridCommunity._.loadTemplate('<div class="ag-select-agg-func-popup"></div>');
    ePopup.style.top = '0px';
    ePopup.style.left = '0px';
    ePopup.appendChild(virtualList.getGui());
    // ePopup.style.height = this.gridOptionsWrapper.getAggFuncPopupHeight() + 'px';
    ePopup.style.width = this.getGui().clientWidth + 'px';
    var popupHiddenFunc = function () {
      _this.destroyBean(virtualList);
      _this.popupShowing = false;
    };
    var addPopupRes = this.popupService.addPopup({
      modal: true,
      eChild: ePopup,
      closeOnEsc: true,
      closedCallback: popupHiddenFunc
    });
    if (addPopupRes) {
      virtualList.setComponentCreator(this.createAggSelect.bind(this, addPopupRes.hideFunc));
    }
    this.popupService.positionPopupUnderComponent({
      type: 'aggFuncSelect',
      eventSource: this.getGui(),
      ePopup: ePopup,
      keepWithinBounds: true,
      column: this.column
    });
    virtualList.refresh();
  };
  DropZoneColumnComp.prototype.createAggSelect = function (hidePopup, value) {
    var _this = this;
    var itemSelected = function () {
      hidePopup();
      if (_this.gridOptionsWrapper.isFunctionsPassive()) {
        var event_1 = {
          type: agGridCommunity.Events.EVENT_COLUMN_AGG_FUNC_CHANGE_REQUEST,
          columns: [_this.column],
          aggFunc: value,
          api: _this.gridApi,
          columnApi: _this.columnApi
        };
        _this.eventService.dispatchEvent(event_1);
      } else {
        _this.columnController.setColumnAggFunc(_this.column, value, "toolPanelDragAndDrop");
      }
    };
    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
    var aggFuncString = value.toString();
    var aggFuncStringTranslated = localeTextFunc(aggFuncString, aggFuncString);
    var comp = new AggItemComp(itemSelected, aggFuncStringTranslated);
    return comp;
  };
  DropZoneColumnComp.prototype.addElementClasses = function (el, suffix) {
    suffix = suffix ? "-" + suffix : '';
    agGridCommunity._.addCssClass(el, "ag-column-drop-cell" + suffix);
    var direction = this.horizontal ? 'horizontal' : 'vertical';
    agGridCommunity._.addCssClass(el, "ag-column-drop-" + direction + "-cell" + suffix);
  };
  DropZoneColumnComp.EVENT_COLUMN_REMOVE = 'columnRemove';
  DropZoneColumnComp.TEMPLATE = "<span>\n          <span ref=\"eDragHandle\" class=\"ag-drag-handle ag-column-drop-cell-drag-handle\"></span>\n          <span ref=\"eText\" class=\"ag-column-drop-cell-text\"></span>\n          <span ref=\"eButton\" class=\"ag-column-drop-cell-button\"></span>\n        </span>";
  __decorate$d([agGridCommunity.Autowired('dragAndDropService')], DropZoneColumnComp.prototype, "dragAndDropService", void 0);
  __decorate$d([agGridCommunity.Autowired('columnController')], DropZoneColumnComp.prototype, "columnController", void 0);
  __decorate$d([agGridCommunity.Autowired('popupService')], DropZoneColumnComp.prototype, "popupService", void 0);
  __decorate$d([agGridCommunity.Optional('aggFuncService')], DropZoneColumnComp.prototype, "aggFuncService", void 0);
  __decorate$d([agGridCommunity.Autowired('columnApi')], DropZoneColumnComp.prototype, "columnApi", void 0);
  __decorate$d([agGridCommunity.Autowired('gridApi')], DropZoneColumnComp.prototype, "gridApi", void 0);
  __decorate$d([agGridCommunity.RefSelector('eText')], DropZoneColumnComp.prototype, "eText", void 0);
  __decorate$d([agGridCommunity.RefSelector('eDragHandle')], DropZoneColumnComp.prototype, "eDragHandle", void 0);
  __decorate$d([agGridCommunity.RefSelector('eButton')], DropZoneColumnComp.prototype, "eButton", void 0);
  __decorate$d([agGridCommunity.PostConstruct], DropZoneColumnComp.prototype, "init", null);
  return DropZoneColumnComp;
}(agGridCommunity.Component);
var AggItemComp = /** @class */function (_super) {
  __extends$d(AggItemComp, _super);
  function AggItemComp(itemSelected, value) {
    var _this = _super.call(this, '<div class="ag-select-agg-func-item"/>') || this;
    _this.getGui().innerText = value;
    _this.value = value;
    _this.addGuiEventListener('click', itemSelected);
    return _this;
  }
  return AggItemComp;
}(agGridCommunity.Component);
var __extends$e =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var BaseDropZonePanel = /** @class */function (_super) {
  __extends$e(BaseDropZonePanel, _super);
  function BaseDropZonePanel(horizontal, valueColumn) {
    var _this = _super.call(this, "<div class=\"ag-unselectable\"></div>") || this;
    _this.horizontal = horizontal;
    _this.valueColumn = valueColumn;
    _this.state = BaseDropZonePanel.STATE_NOT_DRAGGING;
    _this.guiDestroyFunctions = [];
    _this.childColumnComponents = [];
    _this.addElementClasses(_this.getGui());
    _this.eColumnDropList = document.createElement('div');
    _this.addElementClasses(_this.eColumnDropList, 'list');
    return _this;
  }
  BaseDropZonePanel.prototype.isHorizontal = function () {
    return this.horizontal;
  };
  BaseDropZonePanel.prototype.setBeans = function (beans) {
    this.beans = beans;
  };
  BaseDropZonePanel.prototype.destroy = function () {
    this.destroyGui();
    _super.prototype.destroy.call(this);
  };
  BaseDropZonePanel.prototype.destroyGui = function () {
    this.guiDestroyFunctions.forEach(function (func) {
      return func();
    });
    this.guiDestroyFunctions.length = 0;
    this.childColumnComponents.length = 0;
    agGridCommunity._.clearElement(this.getGui());
    agGridCommunity._.clearElement(this.eColumnDropList);
  };
  BaseDropZonePanel.prototype.init = function (params) {
    this.params = params;
    this.addManagedListener(this.beans.eventService, agGridCommunity.Events.EVENT_NEW_COLUMNS_LOADED, this.refreshGui.bind(this));
    this.addManagedListener(this.beans.gridOptionsWrapper, 'functionsReadOnly', this.refreshGui.bind(this));
    this.setupDropTarget();
    // we don't know if this bean will be initialised before columnController.
    // if columnController first, then below will work
    // if columnController second, then below will put blank in, and then above event gets first when columnController is set up
    this.refreshGui();
  };
  BaseDropZonePanel.prototype.addElementClasses = function (el, suffix) {
    suffix = suffix ? "-" + suffix : '';
    agGridCommunity._.addCssClass(el, "ag-column-drop" + suffix);
    var direction = this.horizontal ? 'horizontal' : 'vertical';
    agGridCommunity._.addCssClass(el, "ag-column-drop-" + direction + suffix);
  };
  BaseDropZonePanel.prototype.setupDropTarget = function () {
    this.dropTarget = {
      getContainer: this.getGui.bind(this),
      getIconName: this.getIconName.bind(this),
      onDragging: this.onDragging.bind(this),
      onDragEnter: this.onDragEnter.bind(this),
      onDragLeave: this.onDragLeave.bind(this),
      onDragStop: this.onDragStop.bind(this),
      isInterestedIn: this.isInterestedIn.bind(this)
    };
    this.beans.dragAndDropService.addDropTarget(this.dropTarget);
  };
  BaseDropZonePanel.prototype.isInterestedIn = function (type) {
    // not interested in row drags
    return type === agGridCommunity.DragSourceType.HeaderCell || type === agGridCommunity.DragSourceType.ToolPanel;
  };
  BaseDropZonePanel.prototype.checkInsertIndex = function (draggingEvent) {
    var newIndex = this.horizontal ? this.getNewHorizontalInsertIndex(draggingEvent) : this.getNewVerticalInsertIndex(draggingEvent);
    // <0 happens when drag is no a direction we are interested in, eg drag is up/down but in horizontal panel
    if (newIndex < 0) {
      return false;
    }
    var changed = newIndex !== this.insertIndex;
    if (changed) {
      this.insertIndex = newIndex;
    }
    return changed;
  };
  BaseDropZonePanel.prototype.getNewHorizontalInsertIndex = function (draggingEvent) {
    if (agGridCommunity._.missing(draggingEvent.hDirection)) {
      return -1;
    }
    var newIndex = 0;
    var mouseEvent = draggingEvent.event;
    var enableRtl = this.beans.gridOptionsWrapper.isEnableRtl();
    var goingLeft = draggingEvent.hDirection === agGridCommunity.HorizontalDirection.Left;
    var mouseX = mouseEvent.clientX;
    this.childColumnComponents.forEach(function (childColumn) {
      var rect = childColumn.getGui().getBoundingClientRect();
      var rectX = goingLeft ? rect.right : rect.left;
      var horizontalFit = enableRtl ? mouseX <= rectX : mouseX >= rectX;
      if (horizontalFit) {
        newIndex++;
      }
    });
    return newIndex;
  };
  BaseDropZonePanel.prototype.getNewVerticalInsertIndex = function (draggingEvent) {
    if (agGridCommunity._.missing(draggingEvent.vDirection)) {
      return -1;
    }
    var newIndex = 0;
    var mouseEvent = draggingEvent.event;
    this.childColumnComponents.forEach(function (childColumn) {
      var rect = childColumn.getGui().getBoundingClientRect();
      var verticalFit = mouseEvent.clientY >= (draggingEvent.vDirection === agGridCommunity.VerticalDirection.Down ? rect.top : rect.bottom);
      if (verticalFit) {
        newIndex++;
      }
    });
    return newIndex;
  };
  BaseDropZonePanel.prototype.checkDragStartedBySelf = function (draggingEvent) {
    if (this.state !== BaseDropZonePanel.STATE_NOT_DRAGGING) {
      return;
    }
    this.state = BaseDropZonePanel.STATE_REARRANGE_COLUMNS;
    this.potentialDndColumns = draggingEvent.dragSource.getDragItem().columns || [];
    this.refreshGui();
    this.checkInsertIndex(draggingEvent);
    this.refreshGui();
  };
  BaseDropZonePanel.prototype.onDragging = function (draggingEvent) {
    this.checkDragStartedBySelf(draggingEvent);
    if (this.checkInsertIndex(draggingEvent)) {
      this.refreshGui();
    }
  };
  BaseDropZonePanel.prototype.onDragEnter = function (draggingEvent) {
    // this will contain all columns that are potential drops
    var dragColumns = draggingEvent.dragSource.getDragItem().columns || [];
    this.state = BaseDropZonePanel.STATE_NEW_COLUMNS_IN;
    // take out columns that are not droppable
    var goodDragColumns = dragColumns.filter(this.isColumnDroppable.bind(this));
    if (goodDragColumns.length > 0) {
      this.potentialDndColumns = goodDragColumns;
      this.checkInsertIndex(draggingEvent);
      this.refreshGui();
    }
  };
  BaseDropZonePanel.prototype.isPotentialDndColumns = function () {
    return agGridCommunity._.existsAndNotEmpty(this.potentialDndColumns);
  };
  BaseDropZonePanel.prototype.onDragLeave = function (draggingEvent) {
    // if the dragging started from us, we remove the group, however if it started
    // someplace else, then we don't, as it was only 'asking'
    if (this.state === BaseDropZonePanel.STATE_REARRANGE_COLUMNS) {
      var columns = draggingEvent.dragSource.getDragItem().columns || [];
      this.removeColumns(columns);
    }
    if (this.isPotentialDndColumns()) {
      this.potentialDndColumns = [];
      this.refreshGui();
    }
    this.state = BaseDropZonePanel.STATE_NOT_DRAGGING;
  };
  BaseDropZonePanel.prototype.onDragStop = function () {
    if (this.isPotentialDndColumns()) {
      var success = false;
      if (this.state === BaseDropZonePanel.STATE_NEW_COLUMNS_IN) {
        this.addColumns(this.potentialDndColumns);
        success = true;
      } else {
        success = this.rearrangeColumns(this.potentialDndColumns);
      }
      this.potentialDndColumns = [];
      // If the function is passive, then we don't refresh, as we assume the client application
      // is going to call setRowGroups / setPivots / setValues at a later point which will then
      // cause a refresh. This gives a nice GUI where the ghost stays until the app has caught
      // up with the changes. However, if there was no change in the order, then we do need to
      // refresh to reset the columns
      if (!this.beans.gridOptionsWrapper.isFunctionsPassive() || !success) {
        this.refreshGui();
      }
    }
    this.state = BaseDropZonePanel.STATE_NOT_DRAGGING;
  };
  BaseDropZonePanel.prototype.removeColumns = function (columnsToRemove) {
    var newColumnList = this.getExistingColumns().filter(function (col) {
      return !agGridCommunity._.includes(columnsToRemove, col);
    });
    this.updateColumns(newColumnList);
  };
  BaseDropZonePanel.prototype.addColumns = function (columnsToAdd) {
    if (!columnsToAdd) {
      return;
    }
    var newColumnList = this.getExistingColumns().slice();
    var colsToAddNoDuplicates = columnsToAdd.filter(function (col) {
      return newColumnList.indexOf(col) < 0;
    });
    agGridCommunity._.insertArrayIntoArray(newColumnList, colsToAddNoDuplicates, this.insertIndex);
    this.updateColumns(newColumnList);
  };
  BaseDropZonePanel.prototype.rearrangeColumns = function (columnsToAdd) {
    var newColumnList = this.getNonGhostColumns().slice();
    agGridCommunity._.insertArrayIntoArray(newColumnList, columnsToAdd, this.insertIndex);
    if (agGridCommunity._.areEqual(newColumnList, this.getExistingColumns())) {
      return false;
    } else {
      this.updateColumns(newColumnList);
      return true;
    }
  };
  BaseDropZonePanel.prototype.refreshGui = function () {
    // we reset the scroll position after the refresh.
    // if we don't do this, then the list will always scroll to the top
    // each time we refresh it. this is because part of the refresh empties
    // out the list which sets scroll to zero. so the user could be just
    // reordering the list - we want to prevent the resetting of the scroll.
    // this is relevant for vertical display only (as horizontal has no scroll)
    var scrollTop = this.eColumnDropList.scrollTop;
    this.destroyGui();
    this.addIconAndTitleToGui();
    this.addEmptyMessageToGui();
    this.addColumnsToGui();
    if (!this.isHorizontal()) {
      this.eColumnDropList.scrollTop = scrollTop;
    }
  };
  BaseDropZonePanel.prototype.getNonGhostColumns = function () {
    var _this = this;
    var existingColumns = this.getExistingColumns();
    if (this.isPotentialDndColumns()) {
      return existingColumns.filter(function (column) {
        return !agGridCommunity._.includes(_this.potentialDndColumns, column);
      });
    } else {
      return existingColumns;
    }
  };
  BaseDropZonePanel.prototype.addColumnsToGui = function () {
    var _this = this;
    var nonGhostColumns = this.getNonGhostColumns();
    var addingGhosts = this.isPotentialDndColumns();
    var itemsToAddToGui = [];
    nonGhostColumns.forEach(function (column, index) {
      if (addingGhosts && index >= _this.insertIndex) {
        return;
      }
      var columnComponent = _this.createColumnComponent(column, false);
      itemsToAddToGui.push(columnComponent);
    });
    if (this.isPotentialDndColumns()) {
      this.potentialDndColumns.forEach(function (column) {
        var columnComponent = _this.createColumnComponent(column, true);
        itemsToAddToGui.push(columnComponent);
      });
      nonGhostColumns.forEach(function (column, index) {
        if (index < _this.insertIndex) {
          return;
        }
        var columnComponent = _this.createColumnComponent(column, false);
        itemsToAddToGui.push(columnComponent);
      });
    }
    this.getGui().appendChild(this.eColumnDropList);
    itemsToAddToGui.forEach(function (columnComponent, index) {
      if (index > 0) {
        _this.addArrow(_this.eColumnDropList);
      }
      _this.eColumnDropList.appendChild(columnComponent.getGui());
    });
  };
  BaseDropZonePanel.prototype.createColumnComponent = function (column, ghost) {
    var _this = this;
    var columnComponent = new DropZoneColumnComp(column, this.dropTarget, ghost, this.valueColumn, this.horizontal);
    columnComponent.addEventListener(DropZoneColumnComp.EVENT_COLUMN_REMOVE, this.removeColumns.bind(this, [column]));
    this.beans.context.createBean(columnComponent);
    this.guiDestroyFunctions.push(function () {
      return _this.destroyBean(columnComponent);
    });
    if (!ghost) {
      this.childColumnComponents.push(columnComponent);
    }
    return columnComponent;
  };
  BaseDropZonePanel.prototype.addIconAndTitleToGui = function () {
    var eGroupIcon = this.params.icon;
    var eTitleBar = document.createElement('div');
    this.addElementClasses(eTitleBar, 'title-bar');
    this.addElementClasses(eGroupIcon, 'icon');
    agGridCommunity._.addOrRemoveCssClass(this.getGui(), 'ag-column-drop-empty', this.isExistingColumnsEmpty());
    eTitleBar.appendChild(eGroupIcon);
    if (!this.horizontal) {
      var eTitle = document.createElement('span');
      this.addElementClasses(eTitle, 'title');
      eTitle.innerHTML = this.params.title;
      eTitleBar.appendChild(eTitle);
    }
    this.getGui().appendChild(eTitleBar);
  };
  BaseDropZonePanel.prototype.isExistingColumnsEmpty = function () {
    return this.getExistingColumns().length === 0;
  };
  BaseDropZonePanel.prototype.addEmptyMessageToGui = function () {
    if (!this.isExistingColumnsEmpty() || this.isPotentialDndColumns()) {
      return;
    }
    var eMessage = document.createElement('span');
    eMessage.innerHTML = this.params.emptyMessage;
    this.addElementClasses(eMessage, 'empty-message');
    this.eColumnDropList.appendChild(eMessage);
  };
  BaseDropZonePanel.prototype.addArrow = function (eParent) {
    // only add the arrows if the layout is horizontal
    if (this.horizontal) {
      // for RTL it's a left arrow, otherwise it's a right arrow
      var enableRtl = this.beans.gridOptionsWrapper.isEnableRtl();
      var icon = agGridCommunity._.createIconNoSpan(enableRtl ? 'smallLeft' : 'smallRight', this.beans.gridOptionsWrapper);
      this.addElementClasses(icon, 'cell-separator');
      eParent.appendChild(icon);
    }
  };
  BaseDropZonePanel.STATE_NOT_DRAGGING = 'notDragging';
  BaseDropZonePanel.STATE_NEW_COLUMNS_IN = 'newColumnsIn';
  BaseDropZonePanel.STATE_REARRANGE_COLUMNS = 'rearrangeColumns';
  return BaseDropZonePanel;
}(agGridCommunity.Component);
var __extends$f =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$e =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RowGroupDropZonePanel = /** @class */function (_super) {
  __extends$f(RowGroupDropZonePanel, _super);
  function RowGroupDropZonePanel(horizontal) {
    return _super.call(this, horizontal, false) || this;
  }
  RowGroupDropZonePanel.prototype.passBeansUp = function () {
    _super.prototype.setBeans.call(this, {
      gridOptionsWrapper: this.gridOptionsWrapper,
      eventService: this.eventService,
      context: this.getContext(),
      loggerFactory: this.loggerFactory,
      dragAndDropService: this.dragAndDropService
    });
    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
    var emptyMessage = localeTextFunc('rowGroupColumnsEmptyMessage', 'Drag here to set row groups');
    var title = localeTextFunc('groups', 'Row Groups');
    _super.prototype.init.call(this, {
      dragAndDropIcon: agGridCommunity.DragAndDropService.ICON_GROUP,
      icon: agGridCommunity._.createIconNoSpan('rowGroupPanel', this.gridOptionsWrapper, null),
      emptyMessage: emptyMessage,
      title: title
    });
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.refreshGui.bind(this));
  };
  RowGroupDropZonePanel.prototype.getTooltipParams = function () {
    var res = _super.prototype.getTooltipParams.call(this);
    res.location = 'rowGroupColumnsList';
    return res;
  };
  RowGroupDropZonePanel.prototype.isColumnDroppable = function (column) {
    // we never allow grouping of secondary columns
    if (this.gridOptionsWrapper.isFunctionsReadOnly() || !column.isPrimary()) {
      return false;
    }
    return column.isAllowRowGroup() && !column.isRowGroupActive();
  };
  RowGroupDropZonePanel.prototype.updateColumns = function (columns) {
    if (this.gridOptionsWrapper.isFunctionsPassive()) {
      var event_1 = {
        type: agGridCommunity.Events.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST,
        columns: columns,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(event_1);
    } else {
      this.columnController.setRowGroupColumns(columns, "toolPanelUi");
    }
  };
  RowGroupDropZonePanel.prototype.getIconName = function () {
    return this.isPotentialDndColumns() ? agGridCommunity.DragAndDropService.ICON_GROUP : agGridCommunity.DragAndDropService.ICON_NOT_ALLOWED;
  };
  RowGroupDropZonePanel.prototype.getExistingColumns = function () {
    return this.columnController.getRowGroupColumns();
  };
  __decorate$e([agGridCommunity.Autowired('columnController')], RowGroupDropZonePanel.prototype, "columnController", void 0);
  __decorate$e([agGridCommunity.Autowired('loggerFactory')], RowGroupDropZonePanel.prototype, "loggerFactory", void 0);
  __decorate$e([agGridCommunity.Autowired('dragAndDropService')], RowGroupDropZonePanel.prototype, "dragAndDropService", void 0);
  __decorate$e([agGridCommunity.Autowired('columnApi')], RowGroupDropZonePanel.prototype, "columnApi", void 0);
  __decorate$e([agGridCommunity.Autowired('gridApi')], RowGroupDropZonePanel.prototype, "gridApi", void 0);
  __decorate$e([agGridCommunity.PostConstruct], RowGroupDropZonePanel.prototype, "passBeansUp", null);
  return RowGroupDropZonePanel;
}(BaseDropZonePanel);
var __extends$g =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$f =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PivotDropZonePanel = /** @class */function (_super) {
  __extends$g(PivotDropZonePanel, _super);
  function PivotDropZonePanel(horizontal) {
    return _super.call(this, horizontal, false) || this;
  }
  PivotDropZonePanel.prototype.passBeansUp = function () {
    _super.prototype.setBeans.call(this, {
      gridOptionsWrapper: this.gridOptionsWrapper,
      eventService: this.eventService,
      context: this.getContext(),
      loggerFactory: this.loggerFactory,
      dragAndDropService: this.dragAndDropService
    });
    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
    var emptyMessage = localeTextFunc('pivotColumnsEmptyMessage', 'Drag here to set column labels');
    var title = localeTextFunc('pivots', 'Column Labels');
    _super.prototype.init.call(this, {
      dragAndDropIcon: agGridCommunity.DragAndDropService.ICON_GROUP,
      icon: agGridCommunity._.createIconNoSpan('pivotPanel', this.gridOptionsWrapper, null),
      emptyMessage: emptyMessage,
      title: title
    });
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_NEW_COLUMNS_LOADED, this.refresh.bind(this));
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_COLUMN_PIVOT_CHANGED, this.refresh.bind(this));
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.checkVisibility.bind(this));
    this.refresh();
  };
  PivotDropZonePanel.prototype.getTooltipParams = function () {
    var res = _super.prototype.getTooltipParams.call(this);
    res.location = 'pivotColumnsList';
    return res;
  };
  PivotDropZonePanel.prototype.refresh = function () {
    this.checkVisibility();
    this.refreshGui();
  };
  PivotDropZonePanel.prototype.checkVisibility = function () {
    var pivotMode = this.columnController.isPivotMode();
    if (this.isHorizontal()) {
      // what we do for horizontal (ie the pivot panel at the top) depends
      // on the user property as well as pivotMode.
      switch (this.gridOptionsWrapper.getPivotPanelShow()) {
        case 'always':
          this.setDisplayed(pivotMode);
          break;
        case 'onlyWhenPivoting':
          var pivotActive = this.columnController.isPivotActive();
          this.setDisplayed(pivotMode && pivotActive);
          break;
        default:
          // never show it
          this.setDisplayed(false);
          break;
      }
    } else {
      // in toolPanel, the pivot panel is always shown when pivot mode is on
      this.setDisplayed(pivotMode);
    }
  };
  PivotDropZonePanel.prototype.isColumnDroppable = function (column) {
    // we never allow grouping of secondary columns
    if (this.gridOptionsWrapper.isFunctionsReadOnly() || !column.isPrimary()) {
      return false;
    }
    return column.isAllowPivot() && !column.isPivotActive();
  };
  PivotDropZonePanel.prototype.updateColumns = function (columns) {
    if (this.gridOptionsWrapper.isFunctionsPassive()) {
      var event_1 = {
        type: agGridCommunity.Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST,
        columns: columns,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(event_1);
    } else {
      this.columnController.setPivotColumns(columns, "toolPanelUi");
    }
  };
  PivotDropZonePanel.prototype.getIconName = function () {
    return this.isPotentialDndColumns() ? agGridCommunity.DragAndDropService.ICON_PIVOT : agGridCommunity.DragAndDropService.ICON_NOT_ALLOWED;
  };
  PivotDropZonePanel.prototype.getExistingColumns = function () {
    return this.columnController.getPivotColumns();
  };
  __decorate$f([agGridCommunity.Autowired('columnController')], PivotDropZonePanel.prototype, "columnController", void 0);
  __decorate$f([agGridCommunity.Autowired('loggerFactory')], PivotDropZonePanel.prototype, "loggerFactory", void 0);
  __decorate$f([agGridCommunity.Autowired('dragAndDropService')], PivotDropZonePanel.prototype, "dragAndDropService", void 0);
  __decorate$f([agGridCommunity.Autowired('columnApi')], PivotDropZonePanel.prototype, "columnApi", void 0);
  __decorate$f([agGridCommunity.Autowired('gridApi')], PivotDropZonePanel.prototype, "gridApi", void 0);
  __decorate$f([agGridCommunity.PostConstruct], PivotDropZonePanel.prototype, "passBeansUp", null);
  return PivotDropZonePanel;
}(BaseDropZonePanel);
var __extends$h =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$g =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var GridHeaderDropZones = /** @class */function (_super) {
  __extends$h(GridHeaderDropZones, _super);
  function GridHeaderDropZones() {
    return _super.call(this) || this;
  }
  GridHeaderDropZones.prototype.postConstruct = function () {
    this.setGui(this.createNorthPanel());
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onRowGroupChanged.bind(this));
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_NEW_COLUMNS_LOADED, this.onRowGroupChanged.bind(this));
    this.onRowGroupChanged();
  };
  GridHeaderDropZones.prototype.createNorthPanel = function () {
    var topPanelGui = document.createElement('div');
    var dropPanelVisibleListener = this.onDropPanelVisible.bind(this);
    agGridCommunity._.addCssClass(topPanelGui, 'ag-column-drop-wrapper');
    this.rowGroupComp = new RowGroupDropZonePanel(true);
    this.createManagedBean(this.rowGroupComp);
    this.pivotComp = new PivotDropZonePanel(true);
    this.createManagedBean(this.pivotComp);
    topPanelGui.appendChild(this.rowGroupComp.getGui());
    topPanelGui.appendChild(this.pivotComp.getGui());
    this.addManagedListener(this.rowGroupComp, agGridCommunity.Component.EVENT_DISPLAYED_CHANGED, dropPanelVisibleListener);
    this.addManagedListener(this.pivotComp, agGridCommunity.Component.EVENT_DISPLAYED_CHANGED, dropPanelVisibleListener);
    this.onDropPanelVisible();
    return topPanelGui;
  };
  GridHeaderDropZones.prototype.onDropPanelVisible = function () {
    var bothDisplayed = this.rowGroupComp.isDisplayed() && this.pivotComp.isDisplayed();
    this.rowGroupComp.addOrRemoveCssClass('ag-column-drop-horizontal-half-width', bothDisplayed);
    this.pivotComp.addOrRemoveCssClass('ag-column-drop-horizontal-half-width', bothDisplayed);
  };
  GridHeaderDropZones.prototype.onRowGroupChanged = function () {
    if (!this.rowGroupComp) {
      return;
    }
    var rowGroupPanelShow = this.gridOptionsWrapper.getRowGroupPanelShow();
    if (rowGroupPanelShow === agGridCommunity.Constants.ALWAYS) {
      this.rowGroupComp.setDisplayed(true);
    } else if (rowGroupPanelShow === agGridCommunity.Constants.ONLY_WHEN_GROUPING) {
      var grouping = !this.columnController.isRowGroupEmpty();
      this.rowGroupComp.setDisplayed(grouping);
    } else {
      this.rowGroupComp.setDisplayed(false);
    }
  };
  __decorate$g([agGridCommunity.Autowired('columnController')], GridHeaderDropZones.prototype, "columnController", void 0);
  __decorate$g([agGridCommunity.PostConstruct], GridHeaderDropZones.prototype, "postConstruct", null);
  return GridHeaderDropZones;
}(agGridCommunity.Component);
var RowGroupingModule = {
  moduleName: agGridCommunity.ModuleNames.RowGroupingModule,
  beans: [AggregationStage, GroupStage, PivotColDefService, PivotStage, AggFuncService],
  agStackComponents: [{
    componentName: 'AgGridHeaderDropZones',
    componentClass: GridHeaderDropZones
  }],
  dependantModules: [EnterpriseCoreModule]
};
var __extends$i =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$h =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ValuesDropZonePanel = /** @class */function (_super) {
  __extends$i(ValuesDropZonePanel, _super);
  function ValuesDropZonePanel(horizontal) {
    return _super.call(this, horizontal, true) || this;
  }
  ValuesDropZonePanel.prototype.passBeansUp = function () {
    _super.prototype.setBeans.call(this, {
      gridOptionsWrapper: this.gridOptionsWrapper,
      eventService: this.eventService,
      context: this.getContext(),
      loggerFactory: this.loggerFactory,
      dragAndDropService: this.dragAndDropService
    });
    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
    var emptyMessage = localeTextFunc('valueColumnsEmptyMessage', 'Drag here to aggregate');
    var title = localeTextFunc('values', 'Values');
    _super.prototype.init.call(this, {
      dragAndDropIcon: agGridCommunity.DragAndDropService.ICON_AGGREGATE,
      icon: agGridCommunity._.createIconNoSpan('valuePanel', this.gridOptionsWrapper, null),
      emptyMessage: emptyMessage,
      title: title
    });
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_COLUMN_VALUE_CHANGED, this.refreshGui.bind(this));
  };
  ValuesDropZonePanel.prototype.getTooltipParams = function () {
    var res = _super.prototype.getTooltipParams.call(this);
    res.location = 'valueColumnsList';
    return res;
  };
  ValuesDropZonePanel.prototype.getIconName = function () {
    return this.isPotentialDndColumns() ? agGridCommunity.DragAndDropService.ICON_AGGREGATE : agGridCommunity.DragAndDropService.ICON_NOT_ALLOWED;
  };
  ValuesDropZonePanel.prototype.isColumnDroppable = function (column) {
    // we never allow grouping of secondary columns
    if (this.gridOptionsWrapper.isFunctionsReadOnly() || !column.isPrimary()) {
      return false;
    }
    return column.isAllowValue() && !column.isValueActive();
  };
  ValuesDropZonePanel.prototype.updateColumns = function (columns) {
    if (this.gridOptionsWrapper.isFunctionsPassive()) {
      var event_1 = {
        type: agGridCommunity.Events.EVENT_COLUMN_VALUE_CHANGE_REQUEST,
        columns: columns,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(event_1);
    } else {
      this.columnController.setValueColumns(columns, "toolPanelUi");
    }
  };
  ValuesDropZonePanel.prototype.getExistingColumns = function () {
    return this.columnController.getValueColumns();
  };
  __decorate$h([agGridCommunity.Autowired('columnController')], ValuesDropZonePanel.prototype, "columnController", void 0);
  __decorate$h([agGridCommunity.Autowired('loggerFactory')], ValuesDropZonePanel.prototype, "loggerFactory", void 0);
  __decorate$h([agGridCommunity.Autowired('dragAndDropService')], ValuesDropZonePanel.prototype, "dragAndDropService", void 0);
  __decorate$h([agGridCommunity.Autowired('columnApi')], ValuesDropZonePanel.prototype, "columnApi", void 0);
  __decorate$h([agGridCommunity.Autowired('gridApi')], ValuesDropZonePanel.prototype, "gridApi", void 0);
  __decorate$h([agGridCommunity.PostConstruct], ValuesDropZonePanel.prototype, "passBeansUp", null);
  return ValuesDropZonePanel;
}(BaseDropZonePanel);
var __extends$j =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$i =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PrimaryColsPanel = /** @class */function (_super) {
  __extends$j(PrimaryColsPanel, _super);
  function PrimaryColsPanel() {
    return _super.call(this, PrimaryColsPanel.TEMPLATE, true) || this;
  }
  // we allow dragging in the toolPanel, but not when this component appears in the column menu
  PrimaryColsPanel.prototype.init = function (allowDragging, params, eventType) {
    this.allowDragging = allowDragging;
    this.params = params;
    this.eventType = eventType;
    this.primaryColsHeaderPanel.init(this.params);
    var hideFilter = this.params.suppressColumnFilter;
    var hideSelect = this.params.suppressColumnSelectAll;
    var hideExpand = this.params.suppressColumnExpandAll;
    if (hideExpand && hideFilter && hideSelect) {
      this.primaryColsHeaderPanel.setDisplayed(false);
    }
    this.addManagedListener(this.primaryColsListPanel, 'groupExpanded', this.onGroupExpanded.bind(this));
    this.addManagedListener(this.primaryColsListPanel, 'selectionChanged', this.onSelectionChange.bind(this));
    this.primaryColsListPanel.init(this.params, this.allowDragging, this.eventType);
    this.addManagedListener(this.primaryColsHeaderPanel, 'expandAll', this.onExpandAll.bind(this));
    this.addManagedListener(this.primaryColsHeaderPanel, 'collapseAll', this.onCollapseAll.bind(this));
    this.addManagedListener(this.primaryColsHeaderPanel, 'selectAll', this.onSelectAll.bind(this));
    this.addManagedListener(this.primaryColsHeaderPanel, 'unselectAll', this.onUnselectAll.bind(this));
    this.addManagedListener(this.primaryColsHeaderPanel, 'filterChanged', this.onFilterChanged.bind(this));
  };
  PrimaryColsPanel.prototype.onExpandAll = function () {
    this.primaryColsListPanel.doSetExpandedAll(true);
  };
  PrimaryColsPanel.prototype.onCollapseAll = function () {
    this.primaryColsListPanel.doSetExpandedAll(false);
  };
  PrimaryColsPanel.prototype.expandGroups = function (groupIds) {
    this.primaryColsListPanel.setGroupsExpanded(true, groupIds);
  };
  PrimaryColsPanel.prototype.collapseGroups = function (groupIds) {
    this.primaryColsListPanel.setGroupsExpanded(false, groupIds);
  };
  PrimaryColsPanel.prototype.setColumnLayout = function (colDefs) {
    this.primaryColsListPanel.setColumnLayout(colDefs);
  };
  PrimaryColsPanel.prototype.onFilterChanged = function (event) {
    this.primaryColsListPanel.setFilterText(event.filterText);
  };
  PrimaryColsPanel.prototype.syncLayoutWithGrid = function () {
    this.primaryColsListPanel.onColumnsChanged();
  };
  PrimaryColsPanel.prototype.onSelectAll = function () {
    this.primaryColsListPanel.doSetSelectedAll(true);
  };
  PrimaryColsPanel.prototype.onUnselectAll = function () {
    this.primaryColsListPanel.doSetSelectedAll(false);
  };
  PrimaryColsPanel.prototype.onGroupExpanded = function (event) {
    this.primaryColsHeaderPanel.setExpandState(event.state);
  };
  PrimaryColsPanel.prototype.onSelectionChange = function (event) {
    this.primaryColsHeaderPanel.setSelectionState(event.state);
  };
  PrimaryColsPanel.TEMPLATE = "<div class=\"ag-column-select\">\n            <ag-primary-cols-header ref=\"primaryColsHeaderPanel\"></ag-primary-cols-header>\n            <ag-primary-cols-list ref=\"primaryColsListPanel\"></ag-primary-cols-list>\n        </div>";
  __decorate$i([agGridCommunity.RefSelector('primaryColsHeaderPanel')], PrimaryColsPanel.prototype, "primaryColsHeaderPanel", void 0);
  __decorate$i([agGridCommunity.RefSelector('primaryColsListPanel')], PrimaryColsPanel.prototype, "primaryColsListPanel", void 0);
  return PrimaryColsPanel;
}(agGridCommunity.ManagedFocusComponent);
var __extends$k =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$j =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ColumnToolPanel = /** @class */function (_super) {
  __extends$k(ColumnToolPanel, _super);
  function ColumnToolPanel() {
    var _this = _super.call(this, ColumnToolPanel.TEMPLATE) || this;
    _this.initialised = false;
    _this.childDestroyFuncs = [];
    return _this;
  }
  // lazy initialise the panel
  ColumnToolPanel.prototype.setVisible = function (visible) {
    _super.prototype.setDisplayed.call(this, visible);
    if (visible && !this.initialised) {
      this.init(this.params);
    }
  };
  ColumnToolPanel.prototype.init = function (params) {
    var _this = this;
    var defaultParams = {
      suppressColumnSelectAll: false,
      suppressColumnFilter: false,
      suppressColumnExpandAll: false,
      contractColumnSelection: false,
      suppressPivotMode: false,
      suppressRowGroups: false,
      suppressValues: false,
      suppressPivots: false,
      suppressSyncLayoutWithGrid: false,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    agGridCommunity._.mergeDeep(defaultParams, params);
    this.params = defaultParams;
    if (this.isRowGroupingModuleLoaded() && !this.params.suppressPivotMode) {
      this.pivotModePanel = this.createBean(new PivotModePanel()); // DO NOT CHANGE TO createManagedBean
      this.childDestroyFuncs.push(function () {
        return _this.destroyBean(_this.pivotModePanel);
      });
      this.appendChild(this.pivotModePanel);
    }
    this.primaryColsPanel = this.createBean(new PrimaryColsPanel()); // DO NOT CHANGE TO createManagedBean
    this.childDestroyFuncs.push(function () {
      return _this.destroyBean(_this.primaryColsPanel);
    });
    this.primaryColsPanel.init(true, this.params, "toolPanelUi");
    agGridCommunity._.addCssClass(this.primaryColsPanel.getGui(), 'ag-column-panel-column-select');
    this.appendChild(this.primaryColsPanel);
    if (this.isRowGroupingModuleLoaded()) {
      if (!this.params.suppressRowGroups) {
        this.rowGroupDropZonePanel = this.createBean(new RowGroupDropZonePanel(false)); // DO NOT CHANGE TO createManagedBean
        this.childDestroyFuncs.push(function () {
          return _this.destroyBean(_this.rowGroupDropZonePanel);
        });
        this.appendChild(this.rowGroupDropZonePanel);
      }
      if (!this.params.suppressValues) {
        this.valuesDropZonePanel = this.createBean(new ValuesDropZonePanel(false)); // DO NOT CHANGE TO createManagedBean
        this.childDestroyFuncs.push(function () {
          return _this.destroyBean(_this.valuesDropZonePanel);
        });
        this.appendChild(this.valuesDropZonePanel);
      }
      if (!this.params.suppressPivots) {
        this.pivotDropZonePanel = this.createBean(new PivotDropZonePanel(false)); // DO NOT CHANGE TO createManagedBean
        this.childDestroyFuncs.push(function () {
          return _this.destroyBean(_this.pivotDropZonePanel);
        });
        this.appendChild(this.pivotDropZonePanel);
      }
      this.setLastVisible();
      var pivotModeListener_1 = this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.setLastVisible.bind(this));
      this.childDestroyFuncs.push(function () {
        return pivotModeListener_1();
      });
    }
    this.initialised = true;
  };
  ColumnToolPanel.prototype.setPivotModeSectionVisible = function (visible) {
    var _this = this;
    if (!this.isRowGroupingModuleLoaded()) {
      return;
    }
    if (this.pivotModePanel) {
      this.pivotModePanel.setDisplayed(visible);
    } else if (visible) {
      this.pivotModePanel = this.createBean(new PivotModePanel());
      // ensure pivot mode panel is positioned at the top of the columns tool panel
      this.getGui().insertBefore(this.pivotModePanel.getGui(), this.getGui().firstChild);
      this.childDestroyFuncs.push(function () {
        return _this.destroyBean(_this.pivotModePanel);
      });
    }
    this.setLastVisible();
  };
  ColumnToolPanel.prototype.setRowGroupsSectionVisible = function (visible) {
    if (!this.isRowGroupingModuleLoaded()) {
      return;
    }
    if (this.rowGroupDropZonePanel) {
      this.rowGroupDropZonePanel.setDisplayed(visible);
    } else if (visible) {
      this.rowGroupDropZonePanel = this.createManagedBean(new RowGroupDropZonePanel(false));
      this.appendChild(this.rowGroupDropZonePanel);
    }
    this.setLastVisible();
  };
  ColumnToolPanel.prototype.setValuesSectionVisible = function (visible) {
    if (!this.isRowGroupingModuleLoaded()) {
      return;
    }
    if (this.valuesDropZonePanel) {
      this.valuesDropZonePanel.setDisplayed(visible);
    } else if (visible) {
      this.valuesDropZonePanel = this.createManagedBean(new ValuesDropZonePanel(false));
      this.appendChild(this.valuesDropZonePanel);
    }
    this.setLastVisible();
  };
  ColumnToolPanel.prototype.setPivotSectionVisible = function (visible) {
    if (!this.isRowGroupingModuleLoaded()) {
      return;
    }
    if (this.pivotDropZonePanel) {
      this.pivotDropZonePanel.setDisplayed(visible);
    } else if (visible) {
      this.pivotDropZonePanel = this.createManagedBean(new PivotDropZonePanel(false));
      this.appendChild(this.pivotDropZonePanel);
      this.pivotDropZonePanel.setDisplayed(visible);
    }
    this.setLastVisible();
  };
  ColumnToolPanel.prototype.setLastVisible = function () {
    var eGui = this.getGui();
    var columnDrops = Array.prototype.slice.call(eGui.querySelectorAll('.ag-column-drop'));
    columnDrops.forEach(function (columnDrop) {
      return agGridCommunity._.removeCssClass(columnDrop, 'ag-last-column-drop');
    });
    var columnDropEls = eGui.querySelectorAll('.ag-column-drop:not(.ag-hidden)');
    var lastVisible = agGridCommunity._.last(columnDropEls);
    if (lastVisible) {
      agGridCommunity._.addCssClass(lastVisible, 'ag-last-column-drop');
    }
  };
  ColumnToolPanel.prototype.isRowGroupingModuleLoaded = function () {
    return agGridCommunity.ModuleRegistry.assertRegistered(agGridCommunity.ModuleNames.RowGroupingModule, 'Row Grouping');
  };
  ColumnToolPanel.prototype.expandColumnGroups = function (groupIds) {
    this.primaryColsPanel.expandGroups(groupIds);
  };
  ColumnToolPanel.prototype.collapseColumnGroups = function (groupIds) {
    this.primaryColsPanel.collapseGroups(groupIds);
  };
  ColumnToolPanel.prototype.setColumnLayout = function (colDefs) {
    this.primaryColsPanel.setColumnLayout(colDefs);
  };
  ColumnToolPanel.prototype.syncLayoutWithGrid = function () {
    this.primaryColsPanel.syncLayoutWithGrid();
  };
  ColumnToolPanel.prototype.destroyChildren = function () {
    this.childDestroyFuncs.forEach(function (func) {
      return func();
    });
    this.childDestroyFuncs.length = 0;
    agGridCommunity._.clearElement(this.getGui());
  };
  ColumnToolPanel.prototype.refresh = function () {
    this.destroyChildren();
    this.init(this.params);
  };
  // this is a user component, and IComponent has "public destroy()" as part of the interface.
  // so this must be public.
  ColumnToolPanel.prototype.destroy = function () {
    this.destroyChildren();
    _super.prototype.destroy.call(this);
  };
  ColumnToolPanel.TEMPLATE = "<div class=\"ag-column-panel\"></div>";
  __decorate$j([agGridCommunity.Autowired("gridApi")], ColumnToolPanel.prototype, "gridApi", void 0);
  __decorate$j([agGridCommunity.Autowired("columnApi")], ColumnToolPanel.prototype, "columnApi", void 0);
  return ColumnToolPanel;
}(agGridCommunity.Component);
var __extends$l =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$k =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HorizontalResizeComp = /** @class */function (_super) {
  __extends$l(HorizontalResizeComp, _super);
  function HorizontalResizeComp() {
    return _super.call(this, /* html */"<div class=\"ag-tool-panel-horizontal-resize\"></div>") || this;
  }
  HorizontalResizeComp.prototype.setElementToResize = function (elementToResize) {
    this.elementToResize = elementToResize;
  };
  HorizontalResizeComp.prototype.postConstruct = function () {
    var finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({
      eResizeBar: this.getGui(),
      dragStartPixels: 1,
      onResizeStart: this.onResizeStart.bind(this),
      onResizing: this.onResizing.bind(this),
      onResizeEnd: this.onResizing.bind(this)
    });
    this.addDestroyFunc(finishedWithResizeFunc);
    this.setInverted(this.gridOptionsWrapper.isEnableRtl());
  };
  HorizontalResizeComp.prototype.onResizeStart = function () {
    this.startingWidth = this.elementToResize.offsetWidth;
  };
  HorizontalResizeComp.prototype.onResizing = function (delta) {
    var direction = this.inverted ? -1 : 1;
    var newWidth = Math.max(100, Math.floor(this.startingWidth - delta * direction));
    this.elementToResize.style.width = newWidth + "px";
  };
  HorizontalResizeComp.prototype.setInverted = function (inverted) {
    this.inverted = inverted;
  };
  __decorate$k([agGridCommunity.Autowired('horizontalResizeService')], HorizontalResizeComp.prototype, "horizontalResizeService", void 0);
  __decorate$k([agGridCommunity.PostConstruct], HorizontalResizeComp.prototype, "postConstruct", null);
  return HorizontalResizeComp;
}(agGridCommunity.Component);
var __extends$m =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$l =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SideBarButtonsComp = /** @class */function (_super) {
  __extends$m(SideBarButtonsComp, _super);
  function SideBarButtonsComp() {
    var _this = _super.call(this, SideBarButtonsComp.TEMPLATE) || this;
    _this.buttonComps = [];
    return _this;
  }
  SideBarButtonsComp.prototype.postConstruct = function () {
    this.addManagedListener(this.getFocusableElement(), 'keydown', this.handleKeyDown.bind(this));
  };
  SideBarButtonsComp.prototype.handleKeyDown = function (e) {
    if (e.keyCode !== agGridCommunity.KeyCode.TAB || !e.shiftKey) {
      return;
    }
    var prevEl = this.focusController.findNextFocusableElement(this.getFocusableElement(), null, true);
    if (!prevEl) {
      var headerPosition = this.headerPositionUtils.findColAtEdgeForHeaderRow(0, 'start');
      if (!headerPosition) {
        return;
      }
      e.preventDefault();
      this.focusController.focusHeaderPosition(headerPosition);
    }
  };
  SideBarButtonsComp.prototype.setToolPanelDefs = function (toolPanelDefs) {
    toolPanelDefs.forEach(this.addButtonComp.bind(this));
  };
  SideBarButtonsComp.prototype.setActiveButton = function (id) {
    this.buttonComps.forEach(function (comp) {
      comp.setSelected(id === comp.getToolPanelId());
    });
  };
  SideBarButtonsComp.prototype.addButtonComp = function (def) {
    var _this = this;
    var buttonComp = this.createBean(new SideBarButtonComp(def));
    this.buttonComps.push(buttonComp);
    this.appendChild(buttonComp);
    buttonComp.addEventListener(SideBarButtonComp.EVENT_TOGGLE_BUTTON_CLICKED, function () {
      _this.dispatchEvent({
        type: SideBarButtonsComp.EVENT_SIDE_BAR_BUTTON_CLICKED,
        toolPanelId: def.id
      });
    });
  };
  SideBarButtonsComp.prototype.clearButtons = function () {
    this.buttonComps = this.destroyBeans(this.buttonComps);
    agGridCommunity._.clearElement(this.getGui());
  };
  SideBarButtonsComp.EVENT_SIDE_BAR_BUTTON_CLICKED = 'sideBarButtonClicked';
  SideBarButtonsComp.TEMPLATE = "<div class=\"ag-side-buttons\"></div>";
  __decorate$l([agGridCommunity.Autowired('focusController')], SideBarButtonsComp.prototype, "focusController", void 0);
  __decorate$l([agGridCommunity.Autowired('headerPositionUtils')], SideBarButtonsComp.prototype, "headerPositionUtils", void 0);
  __decorate$l([agGridCommunity.PostConstruct], SideBarButtonsComp.prototype, "postConstruct", null);
  __decorate$l([agGridCommunity.PreDestroy], SideBarButtonsComp.prototype, "clearButtons", null);
  return SideBarButtonsComp;
}(agGridCommunity.Component);
var SideBarButtonComp = /** @class */function (_super) {
  __extends$m(SideBarButtonComp, _super);
  function SideBarButtonComp(toolPanelDef) {
    var _this = _super.call(this) || this;
    _this.toolPanelDef = toolPanelDef;
    return _this;
  }
  SideBarButtonComp.prototype.getToolPanelId = function () {
    return this.toolPanelDef.id;
  };
  SideBarButtonComp.prototype.postConstruct = function () {
    var template = this.createTemplate();
    this.setTemplate(template);
    this.eIconWrapper.insertAdjacentElement('afterbegin', agGridCommunity._.createIconNoSpan(this.toolPanelDef.iconKey, this.gridOptionsWrapper));
    this.addManagedListener(this.eToggleButton, 'click', this.onButtonPressed.bind(this));
  };
  SideBarButtonComp.prototype.createTemplate = function () {
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    var def = this.toolPanelDef;
    var label = translate(def.labelKey, def.labelDefault);
    var res = "<div class=\"ag-side-button\">\n                <button type=\"button\" ref=\"eToggleButton\" class=\"ag-side-button-button\">\n                    <div ref=\"eIconWrapper\" class=\"ag-side-button-icon-wrapper\"></div>\n                    <span class=\"ag-side-button-label\">" + label + "</span>\n                </button>\n            </div>";
    return res;
  };
  SideBarButtonComp.prototype.onButtonPressed = function () {
    this.dispatchEvent({
      type: SideBarButtonComp.EVENT_TOGGLE_BUTTON_CLICKED
    });
  };
  SideBarButtonComp.prototype.setSelected = function (selected) {
    this.addOrRemoveCssClass('ag-selected', selected);
  };
  SideBarButtonComp.EVENT_TOGGLE_BUTTON_CLICKED = 'toggleButtonClicked';
  __decorate$l([agGridCommunity.RefSelector('eToggleButton')], SideBarButtonComp.prototype, "eToggleButton", void 0);
  __decorate$l([agGridCommunity.RefSelector('eIconWrapper')], SideBarButtonComp.prototype, "eIconWrapper", void 0);
  __decorate$l([agGridCommunity.PostConstruct], SideBarButtonComp.prototype, "postConstruct", null);
  return SideBarButtonComp;
}(agGridCommunity.Component);
var __extends$n =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$m =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ToolPanelWrapper = /** @class */function (_super) {
  __extends$n(ToolPanelWrapper, _super);
  function ToolPanelWrapper() {
    return _super.call(this, ToolPanelWrapper.TEMPLATE) || this;
  }
  ToolPanelWrapper.prototype.getToolPanelId = function () {
    return this.toolPanelId;
  };
  ToolPanelWrapper.prototype.setToolPanelDef = function (toolPanelDef) {
    this.toolPanelId = toolPanelDef.id;
    var params = {
      api: this.gridOptionsWrapper.getApi(),
      columnApi: this.gridOptionsWrapper.getColumnApi()
    };
    var componentPromise = this.userComponentFactory.newToolPanelComponent(toolPanelDef, params);
    if (componentPromise == null) {
      console.warn("ag-grid: error processing tool panel component " + toolPanelDef.id + ". You need to specify either 'toolPanel' or 'toolPanelFramework'");
      return;
    }
    componentPromise.then(this.setToolPanelComponent.bind(this));
  };
  ToolPanelWrapper.prototype.setupResize = function () {
    var resizeBar = this.resizeBar = new HorizontalResizeComp();
    this.getContext().createBean(resizeBar);
    resizeBar.setElementToResize(this.getGui());
    this.appendChild(resizeBar);
  };
  ToolPanelWrapper.prototype.setToolPanelComponent = function (compInstance) {
    var _this = this;
    this.toolPanelCompInstance = compInstance;
    this.appendChild(compInstance.getGui());
    this.addDestroyFunc(function () {
      _this.destroyBean(compInstance);
    });
  };
  ToolPanelWrapper.prototype.getToolPanelInstance = function () {
    return this.toolPanelCompInstance;
  };
  ToolPanelWrapper.prototype.setResizerSizerSide = function (side) {
    var isRtl = this.gridOptionsWrapper.isEnableRtl();
    var isLeft = side === 'left';
    var inverted = isRtl ? isLeft : !isLeft;
    this.resizeBar.setInverted(inverted);
  };
  ToolPanelWrapper.prototype.refresh = function () {
    this.toolPanelCompInstance.refresh();
  };
  ToolPanelWrapper.TEMPLATE = "<div class=\"ag-tool-panel-wrapper\"/>";
  __decorate$m([agGridCommunity.Autowired("userComponentFactory")], ToolPanelWrapper.prototype, "userComponentFactory", void 0);
  __decorate$m([agGridCommunity.PostConstruct], ToolPanelWrapper.prototype, "setupResize", null);
  return ToolPanelWrapper;
}(agGridCommunity.Component);
var __extends$o =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$n =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SideBarComp = /** @class */function (_super) {
  __extends$o(SideBarComp, _super);
  function SideBarComp() {
    var _this = _super.call(this, SideBarComp.TEMPLATE) || this;
    _this.toolPanelWrappers = [];
    return _this;
  }
  SideBarComp.prototype.postConstruct = function () {
    var _this = this;
    this.sideBarButtonsComp.addEventListener(SideBarButtonsComp.EVENT_SIDE_BAR_BUTTON_CLICKED, this.onToolPanelButtonClicked.bind(this));
    this.setSideBarDef();
    this.gridOptionsWrapper.addEventListener('sideBar', function () {
      _this.clearDownUi();
      _this.setSideBarDef();
    });
    this.gridApi.registerSideBarComp(this);
  };
  SideBarComp.prototype.onToolPanelButtonClicked = function (event) {
    var id = event.toolPanelId;
    var openedItem = this.openedItem();
    // if item was already open, we close it
    if (openedItem === id) {
      this.openToolPanel(undefined); // passing undefined closes
    } else {
      this.openToolPanel(id);
    }
  };
  SideBarComp.prototype.clearDownUi = function () {
    this.sideBarButtonsComp.clearButtons();
    this.destroyToolPanelWrappers();
  };
  SideBarComp.prototype.setSideBarDef = function () {
    // initially hide side bar
    this.setDisplayed(false);
    var sideBar = this.gridOptionsWrapper.getSideBar();
    var sideBarExists = !!sideBar && !!sideBar.toolPanels;
    if (!sideBarExists) {
      return;
    }
    var shouldDisplaySideBar = sideBarExists && !sideBar.hiddenByDefault;
    this.setDisplayed(shouldDisplaySideBar);
    var toolPanelDefs = sideBar.toolPanels;
    this.sideBarButtonsComp.setToolPanelDefs(toolPanelDefs);
    this.setupToolPanels(toolPanelDefs);
    this.setSideBarPosition(sideBar.position);
    if (!sideBar.hiddenByDefault) {
      this.openToolPanel(sideBar.defaultToolPanel);
    }
  };
  SideBarComp.prototype.setSideBarPosition = function (position) {
    if (!position) {
      position = 'right';
    }
    var isLeft = position === 'left';
    var resizerSide = isLeft ? 'right' : 'left';
    var eGui = this.getGui();
    agGridCommunity._.addOrRemoveCssClass(eGui, 'ag-side-bar-left', isLeft);
    agGridCommunity._.addOrRemoveCssClass(eGui, 'ag-side-bar-right', !isLeft);
    this.toolPanelWrappers.forEach(function (wrapper) {
      wrapper.setResizerSizerSide(resizerSide);
    });
    return this;
  };
  SideBarComp.prototype.setupToolPanels = function (defs) {
    var _this = this;
    defs.forEach(function (def) {
      if (def.id == null) {
        console.warn("ag-grid: please review all your toolPanel components, it seems like at least one of them doesn't have an id");
        return;
      }
      // helpers, in case user doesn't have the right module loaded
      if (def.toolPanel === 'agColumnsToolPanel') {
        var moduleMissing = !agGridCommunity.ModuleRegistry.assertRegistered(agGridCommunity.ModuleNames.ColumnToolPanelModule, 'Column Tool Panel');
        if (moduleMissing) {
          return;
        }
      }
      if (def.toolPanel === 'agFiltersToolPanel') {
        var moduleMissing = !agGridCommunity.ModuleRegistry.assertRegistered(agGridCommunity.ModuleNames.FiltersToolPanelModule, 'Filters Tool Panel');
        if (moduleMissing) {
          return;
        }
      }
      var wrapper = new ToolPanelWrapper();
      _this.getContext().createBean(wrapper);
      wrapper.setToolPanelDef(def);
      wrapper.setDisplayed(false);
      _this.getGui().appendChild(wrapper.getGui());
      _this.toolPanelWrappers.push(wrapper);
    });
  };
  SideBarComp.prototype.refresh = function () {
    this.toolPanelWrappers.forEach(function (wrapper) {
      return wrapper.refresh();
    });
  };
  SideBarComp.prototype.openToolPanel = function (key) {
    var currentlyOpenedKey = this.openedItem();
    if (currentlyOpenedKey === key) {
      return;
    }
    this.toolPanelWrappers.forEach(function (wrapper) {
      var show = key === wrapper.getToolPanelId();
      wrapper.setDisplayed(show);
    });
    var newlyOpenedKey = this.openedItem();
    var openToolPanelChanged = currentlyOpenedKey !== newlyOpenedKey;
    if (openToolPanelChanged) {
      this.sideBarButtonsComp.setActiveButton(key);
      this.raiseToolPanelVisibleEvent(key);
    }
  };
  SideBarComp.prototype.getToolPanelInstance = function (key) {
    var toolPanelWrapper = this.toolPanelWrappers.filter(function (toolPanel) {
      return toolPanel.getToolPanelId() === key;
    })[0];
    if (!toolPanelWrapper) {
      console.warn("ag-grid: unable to lookup Tool Panel as invalid key supplied: " + key);
      return;
    }
    return toolPanelWrapper.getToolPanelInstance();
  };
  SideBarComp.prototype.raiseToolPanelVisibleEvent = function (key) {
    var event = {
      type: agGridCommunity.Events.EVENT_TOOL_PANEL_VISIBLE_CHANGED,
      source: key,
      api: this.gridOptionsWrapper.getApi(),
      columnApi: this.gridOptionsWrapper.getColumnApi()
    };
    this.eventService.dispatchEvent(event);
  };
  SideBarComp.prototype.close = function () {
    this.openToolPanel(undefined);
  };
  SideBarComp.prototype.isToolPanelShowing = function () {
    return !!this.openedItem();
  };
  SideBarComp.prototype.openedItem = function () {
    var activeToolPanel = null;
    this.toolPanelWrappers.forEach(function (wrapper) {
      if (wrapper.isDisplayed()) {
        activeToolPanel = wrapper.getToolPanelId();
      }
    });
    return activeToolPanel;
  };
  SideBarComp.prototype.destroyToolPanelWrappers = function () {
    var _this = this;
    this.toolPanelWrappers.forEach(function (wrapper) {
      agGridCommunity._.removeFromParent(wrapper.getGui());
      _this.destroyBean(wrapper);
    });
    this.toolPanelWrappers.length = 0;
  };
  SideBarComp.prototype.destroy = function () {
    this.destroyToolPanelWrappers();
    _super.prototype.destroy.call(this);
  };
  SideBarComp.TEMPLATE = "<div class=\"ag-side-bar ag-unselectable\">\n            <ag-side-bar-buttons ref=\"sideBarButtons\"></ag-side-bar-buttons>\n        </div>";
  __decorate$n([agGridCommunity.RefSelector('sideBarButtons')], SideBarComp.prototype, "sideBarButtonsComp", void 0);
  __decorate$n([agGridCommunity.Autowired('gridApi')], SideBarComp.prototype, "gridApi", void 0);
  __decorate$n([agGridCommunity.PostConstruct], SideBarComp.prototype, "postConstruct", null);
  return SideBarComp;
}(agGridCommunity.Component);
var __extends$p =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$o =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ToolPanelColDefService = /** @class */function (_super) {
  __extends$p(ToolPanelColDefService, _super);
  function ToolPanelColDefService() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.isColGroupDef = function (colDef) {
      return colDef && typeof colDef.children !== 'undefined';
    };
    _this.getId = function (colDef) {
      return _this.isColGroupDef(colDef) ? colDef.groupId : colDef.colId;
    };
    return _this;
  }
  ToolPanelColDefService.prototype.createColumnTree = function (colDefs) {
    var _this = this;
    var invalidColIds = [];
    var createDummyColGroup = function (abstractColDef, depth) {
      if (_this.isColGroupDef(abstractColDef)) {
        // creating 'dummy' group which is not associated with grid column group
        var groupDef = abstractColDef;
        var groupId = typeof groupDef.groupId !== 'undefined' ? groupDef.groupId : groupDef.headerName;
        var group = new agGridCommunity.OriginalColumnGroup(groupDef, groupId, false, depth);
        var children_1 = [];
        groupDef.children.forEach(function (def) {
          var child = createDummyColGroup(def, depth + 1);
          // check column exists in case invalid colDef is supplied for primary column
          if (child) {
            children_1.push(child);
          }
        });
        group.setChildren(children_1);
        return group;
      } else {
        var colDef = abstractColDef;
        var key = colDef.colId ? colDef.colId : colDef.field;
        var column = _this.columnController.getPrimaryColumn(key);
        if (!column) {
          invalidColIds.push(colDef);
        }
        return column;
      }
    };
    var mappedResults = [];
    colDefs.forEach(function (colDef) {
      var result = createDummyColGroup(colDef, 0);
      if (result) {
        // only return correctly mapped colDef results
        mappedResults.push(result);
      }
    });
    if (invalidColIds.length > 0) {
      console.warn('AG Grid: unable to find grid columns for the supplied colDef(s):', invalidColIds);
    }
    return mappedResults;
  };
  ToolPanelColDefService.prototype.syncLayoutWithGrid = function (syncLayoutCallback) {
    // extract ordered list of leaf path trees (column group hierarchy for each individual leaf column)
    var leafPathTrees = this.getLeafPathTrees();
    // merge leaf path tree taking split column groups into account
    var mergedColumnTrees = this.mergeLeafPathTrees(leafPathTrees);
    // sync layout with merged column trees
    syncLayoutCallback(mergedColumnTrees);
  };
  ToolPanelColDefService.prototype.getLeafPathTrees = function () {
    // leaf tree paths are obtained by walking up the tree starting at a column until we reach the top level group.
    var getLeafPathTree = function (node, childDef) {
      var leafPathTree;
      // build up tree in reverse order
      if (node instanceof agGridCommunity.OriginalColumnGroup) {
        if (node.isPadding()) {
          // skip over padding groups
          leafPathTree = childDef;
        } else {
          var groupDef = agGridCommunity._.assign({}, node.getColGroupDef());
          // ensure group contains groupId
          groupDef.groupId = node.getGroupId();
          groupDef.children = [childDef];
          leafPathTree = groupDef;
        }
      } else {
        var colDef = agGridCommunity._.assign({}, node.getColDef());
        // ensure col contains colId
        colDef.colId = node.getColId();
        leafPathTree = colDef;
      }
      // walk tree
      var parent = node.getOriginalParent();
      if (parent) {
        // keep walking up the tree until we reach the root
        return getLeafPathTree(parent, leafPathTree);
      } else {
        // we have reached the root - exit with resulting leaf path tree
        return leafPathTree;
      }
    };
    // obtain a sorted list of all grid columns
    var allGridColumns = this.columnController.getAllGridColumns();
    // only primary columns and non row group columns should appear in the tool panel
    var allPrimaryGridColumns = allGridColumns.filter(function (column) {
      var colDef = column.getColDef();
      return column.isPrimary() && !colDef.showRowGroup;
    });
    // construct a leaf path tree for each column
    return allPrimaryGridColumns.map(function (col) {
      return getLeafPathTree(col, col.getColDef());
    });
  };
  ToolPanelColDefService.prototype.mergeLeafPathTrees = function (leafPathTrees) {
    var _this = this;
    var matchingRootGroupIds = function (pathA, pathB) {
      var bothPathsAreGroups = _this.isColGroupDef(pathA) && _this.isColGroupDef(pathB);
      return bothPathsAreGroups && _this.getId(pathA) === _this.getId(pathB);
    };
    var mergeTrees = function (treeA, treeB) {
      if (!_this.isColGroupDef(treeB)) {
        return treeA;
      }
      var mergeResult = treeA;
      var groupToMerge = treeB;
      if (groupToMerge.children && groupToMerge.groupId) {
        var added = _this.addChildrenToGroup(mergeResult, groupToMerge.groupId, groupToMerge.children[0]);
        if (added) {
          return mergeResult;
        }
      }
      groupToMerge.children.forEach(function (child) {
        return mergeTrees(mergeResult, child);
      });
      return mergeResult;
    };
    // we can't just merge the leaf path trees as groups can be split apart - instead only merge if leaf
    // path groups with the same root group id are contiguous.
    var mergeColDefs = [];
    for (var i = 1; i <= leafPathTrees.length; i++) {
      var first = leafPathTrees[i - 1];
      var second = leafPathTrees[i];
      if (matchingRootGroupIds(first, second)) {
        leafPathTrees[i] = mergeTrees(first, second);
      } else {
        mergeColDefs.push(first);
      }
    }
    return mergeColDefs;
  };
  ToolPanelColDefService.prototype.addChildrenToGroup = function (tree, groupId, colDef) {
    var _this = this;
    var subGroupIsSplit = function (currentSubGroup, currentSubGroupToAdd) {
      var existingChildIds = currentSubGroup.children.map(_this.getId);
      var childGroupAlreadyExists = agGridCommunity._.includes(existingChildIds, _this.getId(currentSubGroupToAdd));
      var lastChild = agGridCommunity._.last(currentSubGroup.children);
      var lastChildIsDifferent = lastChild && _this.getId(lastChild) !== _this.getId(currentSubGroupToAdd);
      return childGroupAlreadyExists && lastChildIsDifferent;
    };
    if (!this.isColGroupDef(tree)) {
      return true;
    }
    var currentGroup = tree;
    var groupToAdd = colDef;
    if (subGroupIsSplit(currentGroup, groupToAdd)) {
      currentGroup.children.push(groupToAdd);
      return true;
    }
    if (currentGroup.groupId === groupId) {
      // add children that don't already exist to group
      var existingChildIds = currentGroup.children.map(this.getId);
      var colDefAlreadyPresent = agGridCommunity._.includes(existingChildIds, this.getId(groupToAdd));
      if (!colDefAlreadyPresent) {
        currentGroup.children.push(groupToAdd);
        return true;
      }
    }
    // recurse until correct group is found to add children
    currentGroup.children.forEach(function (subGroup) {
      return _this.addChildrenToGroup(subGroup, groupId, colDef);
    });
    return false;
  };
  __decorate$o([agGridCommunity.Autowired('columnController')], ToolPanelColDefService.prototype, "columnController", void 0);
  ToolPanelColDefService = __decorate$o([agGridCommunity.Bean('toolPanelColDefService')], ToolPanelColDefService);
  return ToolPanelColDefService;
}(agGridCommunity.BeanStub);
var SideBarModule = {
  moduleName: agGridCommunity.ModuleNames.SideBarModule,
  beans: [ToolPanelColDefService],
  agStackComponents: [{
    componentName: 'AgHorizontalResize',
    componentClass: HorizontalResizeComp
  }, {
    componentName: 'AgSideBar',
    componentClass: SideBarComp
  }, {
    componentName: 'AgSideBarButtons',
    componentClass: SideBarButtonsComp
  }],
  dependantModules: [EnterpriseCoreModule]
};
var __decorate$p =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ModelItemUtils = /** @class */function () {
  function ModelItemUtils() {}
  ModelItemUtils.prototype.selectAllChildren = function (colTree, selectAllChecked, eventType) {
    var cols = this.extractAllLeafColumns(colTree);
    this.setAllColumns(cols, selectAllChecked, eventType);
  };
  ModelItemUtils.prototype.setColumn = function (col, selectAllChecked, eventType) {
    this.setAllColumns([col], selectAllChecked, eventType);
  };
  ModelItemUtils.prototype.setAllColumns = function (cols, selectAllChecked, eventType) {
    if (this.columnController.isPivotMode()) {
      this.setAllPivot(cols, selectAllChecked, eventType);
    } else {
      this.setAllVisible(cols, selectAllChecked, eventType);
    }
  };
  ModelItemUtils.prototype.extractAllLeafColumns = function (allItems) {
    var res = [];
    var recursiveFunc = function (items) {
      items.forEach(function (item) {
        if (!item.isPassesFilter()) {
          return;
        }
        if (item.isGroup()) {
          recursiveFunc(item.getChildren());
        } else {
          res.push(item.getColumn());
        }
      });
    };
    recursiveFunc(allItems);
    return res;
  };
  ModelItemUtils.prototype.setAllVisible = function (columns, visible, eventType) {
    var colStateItems = [];
    columns.forEach(function (col) {
      if (col.getColDef().lockVisible) {
        return;
      }
      if (col.isVisible() != visible) {
        colStateItems.push({
          colId: col.getId(),
          hide: !visible
        });
      }
    });
    if (colStateItems.length > 0) {
      this.columnController.applyColumnState({
        state: colStateItems
      }, eventType);
    }
  };
  ModelItemUtils.prototype.setAllPivot = function (columns, value, eventType) {
    if (this.gridOptionsWrapper.isFunctionsPassive()) {
      this.setAllPivotPassive(columns, value);
    } else {
      this.setAllPivotActive(columns, value, eventType);
    }
  };
  ModelItemUtils.prototype.setAllPivotPassive = function (columns, value) {
    var copyOfPivotColumns = this.columnController.getPivotColumns().slice();
    var copyOfValueColumns = this.columnController.getValueColumns().slice();
    var copyOfRowGroupColumns = this.columnController.getRowGroupColumns().slice();
    var pivotChanged = false;
    var valueChanged = false;
    var rowGroupChanged = false;
    var turnOnAction = function (col) {
      // don't change any column that's already got a function active
      if (col.isAnyFunctionActive()) {
        return;
      }
      if (col.isAllowValue()) {
        copyOfValueColumns.push(col);
        valueChanged = true;
      } else if (col.isAllowRowGroup()) {
        copyOfRowGroupColumns.push(col);
        pivotChanged = true;
      } else if (col.isAllowPivot()) {
        copyOfPivotColumns.push(col);
        rowGroupChanged = true;
      }
    };
    var turnOffAction = function (col) {
      if (!col.isAnyFunctionActive()) {
        return;
      }
      if (copyOfPivotColumns.indexOf(col) >= 0) {
        agGridCommunity._.removeFromArray(copyOfPivotColumns, col);
        pivotChanged = true;
      }
      if (copyOfValueColumns.indexOf(col) >= 0) {
        agGridCommunity._.removeFromArray(copyOfValueColumns, col);
        valueChanged = true;
      }
      if (copyOfRowGroupColumns.indexOf(col) >= 0) {
        agGridCommunity._.removeFromArray(copyOfRowGroupColumns, col);
        rowGroupChanged = true;
      }
    };
    var action = value ? turnOnAction : turnOffAction;
    columns.forEach(action);
    if (pivotChanged) {
      var event_1 = {
        type: agGridCommunity.Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST,
        columns: copyOfPivotColumns,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(event_1);
    }
    if (rowGroupChanged) {
      var event_2 = {
        type: agGridCommunity.Events.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST,
        columns: copyOfRowGroupColumns,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(event_2);
    }
    if (valueChanged) {
      var event_3 = {
        type: agGridCommunity.Events.EVENT_COLUMN_VALUE_CHANGE_REQUEST,
        columns: copyOfRowGroupColumns,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(event_3);
    }
  };
  ModelItemUtils.prototype.setAllPivotActive = function (columns, value, eventType) {
    var _this = this;
    var colStateItems = [];
    var turnOnAction = function (col) {
      // don't change any column that's already got a function active
      if (col.isAnyFunctionActive()) {
        return;
      }
      if (col.isAllowValue()) {
        var aggFunc = typeof col.getAggFunc() === 'string' ? col.getAggFunc() : _this.aggFuncService.getDefaultAggFunc(col);
        colStateItems.push({
          colId: col.getId(),
          aggFunc: aggFunc
        });
      } else if (col.isAllowRowGroup()) {
        colStateItems.push({
          colId: col.getId(),
          rowGroup: true
        });
      } else if (col.isAllowPivot()) {
        colStateItems.push({
          colId: col.getId(),
          pivot: true
        });
      }
    };
    var turnOffAction = function (col) {
      var isActive = col.isPivotActive() || col.isRowGroupActive() || col.isValueActive();
      if (isActive) {
        colStateItems.push({
          colId: col.getId(),
          pivot: false,
          rowGroup: false,
          aggFunc: null
        });
      }
    };
    var action = value ? turnOnAction : turnOffAction;
    columns.forEach(action);
    if (colStateItems.length > 0) {
      this.columnController.applyColumnState({
        state: colStateItems
      }, eventType);
    }
  };
  __decorate$p([agGridCommunity.Autowired('aggFuncService')], ModelItemUtils.prototype, "aggFuncService", void 0);
  __decorate$p([agGridCommunity.Autowired('columnController')], ModelItemUtils.prototype, "columnController", void 0);
  __decorate$p([agGridCommunity.Autowired('gridOptionsWrapper')], ModelItemUtils.prototype, "gridOptionsWrapper", void 0);
  __decorate$p([agGridCommunity.Autowired('columnApi')], ModelItemUtils.prototype, "columnApi", void 0);
  __decorate$p([agGridCommunity.Autowired('gridApi')], ModelItemUtils.prototype, "gridApi", void 0);
  __decorate$p([agGridCommunity.Autowired('eventService')], ModelItemUtils.prototype, "eventService", void 0);
  ModelItemUtils = __decorate$p([agGridCommunity.Bean('modelItemUtils')], ModelItemUtils);
  return ModelItemUtils;
}();
var ColumnsToolPanelModule = {
  moduleName: agGridCommunity.ModuleNames.ColumnToolPanelModule,
  beans: [ModelItemUtils],
  agStackComponents: [{
    componentName: 'AgPrimaryColsHeader',
    componentClass: PrimaryColsHeaderPanel
  }, {
    componentName: 'AgPrimaryColsList',
    componentClass: PrimaryColsListPanel
  }, {
    componentName: 'AgPrimaryCols',
    componentClass: PrimaryColsPanel
  }],
  userComponents: [{
    componentName: 'agColumnsToolPanel',
    componentClass: ColumnToolPanel
  }],
  dependantModules: [EnterpriseCoreModule, RowGroupingModule, SideBarModule]
};
var workbook = {
  getTemplate: function () {
    return {
      name: "Workbook",
      properties: {
        prefixedAttributes: [{
          prefix: "xmlns:",
          map: {
            o: "urn:schemas-microsoft-com:office:office",
            x: "urn:schemas-microsoft-com:office:excel",
            ss: "urn:schemas-microsoft-com:office:spreadsheet",
            html: "http://www.w3.org/TR/REC-html40"
          }
        }],
        rawMap: {
          xmlns: "urn:schemas-microsoft-com:office:spreadsheet"
        }
      }
    };
  }
};
var excelWorkbook = {
  getTemplate: function () {
    return {
      name: "ExcelWorkbook",
      properties: {
        rawMap: {
          xmlns: "urn:schemas-microsoft-com:office:excel"
        }
      },
      children: [{
        name: "WindowHeight",
        textNode: "8130"
      }, {
        name: "WindowWidth",
        textNode: "15135"
      }, {
        name: "WindowHeight",
        textNode: "8130"
      }, {
        name: "WindowTopX",
        textNode: "120"
      }, {
        name: "WindowTopY",
        textNode: "45"
      }, {
        name: "ProtectStructure",
        textNode: "False"
      }, {
        name: "ProtectWindow",
        textNode: "False"
      }]
    };
  }
};
var column = {
  getTemplate: function (c) {
    var width = c.width;
    return {
      name: "Column",
      properties: {
        prefixedAttributes: [{
          prefix: "ss:",
          map: {
            Width: width
          }
        }]
      }
    };
  }
};
var cell = {
  getTemplate: function (c) {
    var mergeAcross = c.mergeAcross,
      styleId = c.styleId,
      data = c.data;
    var properties = {};
    if (mergeAcross) {
      properties.MergeAcross = mergeAcross;
    }
    if (styleId) {
      properties.StyleID = styleId;
    }
    return {
      name: "Cell",
      properties: {
        prefixedAttributes: [{
          prefix: "ss:",
          map: properties
        }]
      },
      children: [{
        name: "Data",
        properties: {
          prefixedAttributes: [{
            prefix: "ss:",
            map: {
              Type: data.type
            }
          }]
        },
        textNode: data.value
      }]
    };
  }
};
var row = {
  getTemplate: function (r) {
    var cells = r.cells;
    return {
      name: "Row",
      children: cells.map(function (it) {
        return cell.getTemplate(it);
      })
    };
  }
};
var worksheet = {
  getTemplate: function (ws) {
    var table = ws.table,
      name = ws.name;
    var columns = table.columns,
      rows = table.rows;
    var c = columns.map(function (it) {
      return column.getTemplate(it);
    });
    var r = rows.map(function (it) {
      return row.getTemplate(it);
    });
    return {
      name: "Worksheet",
      children: [{
        name: "Table",
        children: c.concat(r)
      }],
      properties: {
        prefixedAttributes: [{
          prefix: "ss:",
          map: {
            Name: name
          }
        }]
      }
    };
  }
};
var documentProperties = {
  getTemplate: function () {
    return {
      name: "DocumentProperties",
      properties: {
        rawMap: {
          xmlns: "urn:schemas-microsoft-com:office:office"
        }
      },
      children: [{
        name: "Version",
        textNode: "12.00"
      }]
    };
  }
};
var alignment = {
  getTemplate: function (styleProperties) {
    var _a = styleProperties.alignment,
      vertical = _a.vertical,
      horizontal = _a.horizontal,
      indent = _a.indent,
      readingOrder = _a.readingOrder,
      rotate = _a.rotate,
      shrinkToFit = _a.shrinkToFit,
      verticalText = _a.verticalText,
      wrapText = _a.wrapText;
    return {
      name: 'Alignment',
      properties: {
        prefixedAttributes: [{
          prefix: "ss:",
          map: {
            Vertical: vertical,
            Horizontal: horizontal,
            Indent: indent,
            ReadingOrder: readingOrder,
            Rotate: rotate,
            ShrinkToFit: shrinkToFit,
            VerticalText: verticalText,
            WrapText: wrapText
          }
        }]
      }
    };
  }
};
var borders = {
  getTemplate: function (styleProperties) {
    var _a = styleProperties.borders,
      borderBottom = _a.borderBottom,
      borderLeft = _a.borderLeft,
      borderRight = _a.borderRight,
      borderTop = _a.borderTop;
    return {
      name: 'Borders',
      children: [borderBottom, borderLeft, borderRight, borderTop].map(function (it, index) {
        var current = index == 0 ? "Bottom" : index == 1 ? "Left" : index == 2 ? "Right" : "Top";
        return {
          name: 'Border',
          properties: {
            prefixedAttributes: [{
              prefix: 'ss:',
              map: {
                Position: current,
                LineStyle: it.lineStyle,
                Weight: it.weight,
                Color: it.color
              }
            }]
          }
        };
      })
    };
  }
};
var font = {
  getTemplate: function (styleProperties) {
    var _a = styleProperties.font,
      bold = _a.bold,
      fontName = _a.fontName,
      italic = _a.italic,
      color = _a.color,
      outline = _a.outline,
      shadow = _a.shadow,
      size = _a.size,
      strikeThrough = _a.strikeThrough,
      underline = _a.underline,
      verticalAlign = _a.verticalAlign,
      charSet = _a.charSet,
      family = _a.family;
    return {
      name: "Font",
      properties: {
        prefixedAttributes: [{
          prefix: "ss:",
          map: {
            Bold: bold,
            FontName: fontName,
            Italic: italic,
            Color: color,
            Outline: outline,
            Shadow: shadow,
            Size: size,
            StrikeThrough: strikeThrough,
            Underline: underline,
            VerticalAlign: verticalAlign
          }
        }, {
          prefix: "x:",
          map: {
            CharSet: charSet,
            Family: family
          }
        }]
      }
    };
  }
};
var interior = {
  getTemplate: function (styleProperties) {
    var _a = styleProperties.interior,
      color = _a.color,
      pattern = _a.pattern,
      patternColor = _a.patternColor;
    return {
      name: "Interior",
      properties: {
        prefixedAttributes: [{
          prefix: "ss:",
          map: {
            Color: color,
            Pattern: pattern,
            PatternColor: patternColor
          }
        }]
      }
    };
  }
};
var protection = {
  getTemplate: function (styleProperties) {
    return {
      name: "Protection",
      properties: {
        prefixedAttributes: [{
          prefix: "ss:",
          map: {
            Protected: styleProperties.protection.protected,
            HideFormula: styleProperties.protection.hideFormula
          }
        }]
      }
    };
  }
};
var numberFormat = {
  getTemplate: function (styleProperties) {
    var format = styleProperties.numberFormat.format;
    return {
      name: "NumberFormat",
      properties: {
        prefixedAttributes: [{
          prefix: "ss:",
          map: {
            Format: format
          }
        }]
      }
    };
  }
};
var style = {
  getTemplate: function (styleProperties) {
    var id = styleProperties.id,
      name = styleProperties.name;
    return {
      name: 'Style',
      properties: {
        prefixedAttributes: [{
          prefix: "ss:",
          map: {
            ID: id,
            Name: name ? name : id
          }
        }]
      }
    };
  }
};
var BaseCreator = /** @class */function () {
  function BaseCreator() {}
  BaseCreator.prototype.setBeans = function (beans) {
    this.beans = beans;
  };
  BaseCreator.prototype.getFileName = function (fileName) {
    var extension = this.getDefaultFileExtension();
    if (fileName == null || !fileName.length) {
      fileName = this.getDefaultFileName();
    }
    return fileName.indexOf('.') === -1 ? fileName + "." + extension : fileName;
  };
  BaseCreator.prototype.getMergedParamsAndData = function (userParams) {
    var mergedParams = this.mergeDefaultParams(userParams);
    var data = this.beans.gridSerializer.serialize(this.createSerializingSession(mergedParams), mergedParams);
    return {
      mergedParams: mergedParams,
      data: data
    };
  };
  BaseCreator.prototype.mergeDefaultParams = function (userParams) {
    var baseParams = this.getDefaultExportParams();
    var params = {};
    agGridCommunity._.assign(params, baseParams);
    agGridCommunity._.assign(params, userParams);
    return params;
  };
  return BaseCreator;
}();
var BaseGridSerializingSession = /** @class */function () {
  function BaseGridSerializingSession(config) {
    this.groupColumns = [];
    var columnController = config.columnController,
      valueService = config.valueService,
      gridOptionsWrapper = config.gridOptionsWrapper,
      processCellCallback = config.processCellCallback,
      processHeaderCallback = config.processHeaderCallback,
      processGroupHeaderCallback = config.processGroupHeaderCallback,
      processRowGroupCallback = config.processRowGroupCallback;
    this.columnController = columnController;
    this.valueService = valueService;
    this.gridOptionsWrapper = gridOptionsWrapper;
    this.processCellCallback = processCellCallback;
    this.processHeaderCallback = processHeaderCallback;
    this.processGroupHeaderCallback = processGroupHeaderCallback;
    this.processRowGroupCallback = processRowGroupCallback;
  }
  BaseGridSerializingSession.prototype.prepare = function (columnsToExport) {
    this.groupColumns = agGridCommunity._.filter(columnsToExport, function (col) {
      return !!col.getColDef().showRowGroup;
    });
  };
  BaseGridSerializingSession.prototype.extractHeaderValue = function (column) {
    var value = this.getHeaderName(this.processHeaderCallback, column);
    return value != null ? value : '';
  };
  BaseGridSerializingSession.prototype.extractRowCellValue = function (column, index, accumulatedRowIndex, type, node) {
    // we render the group summary text e.g. "-> Parent -> Child"...
    var groupIndex = this.gridOptionsWrapper.isGroupMultiAutoColumn() ? node.rowGroupIndex : 0;
    var renderGroupSummaryCell =
    // on group rows
    node && node.group && (
    // in the group column if groups appear in regular grid cells
    index === groupIndex && this.groupColumns.indexOf(column) !== -1
    // or the first cell in the row, if we're doing full width rows
    || index === 0 && this.gridOptionsWrapper.isGroupUseEntireRow(this.columnController.isPivotMode()));
    var valueForCell;
    if (renderGroupSummaryCell) {
      valueForCell = this.createValueForGroupNode(node);
    } else {
      valueForCell = this.valueService.getValue(column, node);
    }
    var value = this.processCell(accumulatedRowIndex, node, column, valueForCell, this.processCellCallback, type);
    return value != null ? value : '';
  };
  BaseGridSerializingSession.prototype.getHeaderName = function (callback, column) {
    if (callback) {
      return callback({
        column: column,
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        context: this.gridOptionsWrapper.getContext()
      });
    }
    return this.columnController.getDisplayNameForColumn(column, 'csv', true);
  };
  BaseGridSerializingSession.prototype.createValueForGroupNode = function (node) {
    if (this.processRowGroupCallback) {
      return this.processRowGroupCallback({
        node: node,
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        context: this.gridOptionsWrapper.getContext()
      });
    }
    var keys = [node.key];
    if (!this.gridOptionsWrapper.isGroupMultiAutoColumn()) {
      while (node.parent) {
        node = node.parent;
        keys.push(node.key);
      }
    }
    return keys.reverse().join(' -> ');
  };
  BaseGridSerializingSession.prototype.processCell = function (accumulatedRowIndex, rowNode, column, value, processCellCallback, type) {
    if (processCellCallback) {
      return processCellCallback({
        accumulatedRowIndex: accumulatedRowIndex,
        column: column,
        node: rowNode,
        value: value,
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        context: this.gridOptionsWrapper.getContext(),
        type: type
      });
    }
    return value != null ? value : '';
  };
  return BaseGridSerializingSession;
}();
var Downloader = /** @class */function () {
  function Downloader() {}
  Downloader.download = function (fileName, content) {
    var win = document.defaultView || window;
    if (!win) {
      console.warn('AG Grid: There is no `window` associated with the current `document`');
      return;
    }
    // Internet Explorer
    if (win.navigator.msSaveOrOpenBlob) {
      win.navigator.msSaveOrOpenBlob(content, fileName);
    } else {
      // Other Browsers
      var element = document.createElement('a');
      // @ts-ignore
      var url_1 = win.URL.createObjectURL(content);
      element.setAttribute('href', url_1);
      element.setAttribute('download', fileName);
      element.style.display = 'none';
      document.body.appendChild(element);
      element.dispatchEvent(new MouseEvent('click', {
        bubbles: false,
        cancelable: true,
        view: win
      }));
      document.body.removeChild(element);
      win.setTimeout(function () {
        // @ts-ignore
        win.URL.revokeObjectURL(url_1);
      }, 0);
    }
  };
  return Downloader;
}();
var __extends$q =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var LINE_SEPARATOR = '\r\n';
var CsvSerializingSession = /** @class */function (_super) {
  __extends$q(CsvSerializingSession, _super);
  function CsvSerializingSession(config) {
    var _this = _super.call(this, config) || this;
    _this.isFirstLine = true;
    _this.result = '';
    var suppressQuotes = config.suppressQuotes,
      columnSeparator = config.columnSeparator;
    _this.suppressQuotes = suppressQuotes;
    _this.columnSeparator = columnSeparator;
    return _this;
  }
  CsvSerializingSession.prototype.addCustomContent = function (content) {
    var _this = this;
    if (!content) {
      return;
    }
    if (typeof content === 'string') {
      if (!/^\s*\n/.test(content)) {
        this.beginNewLine();
      }
      // replace whatever newlines are supplied with the style we're using
      content = content.replace(/\r?\n/g, LINE_SEPARATOR);
      this.result += content;
    } else {
      content.forEach(function (row) {
        _this.beginNewLine();
        row.forEach(function (cell, index) {
          if (index !== 0) {
            _this.result += _this.columnSeparator;
          }
          _this.result += _this.putInQuotes(cell.data.value || '');
          if (cell.mergeAcross) {
            _this.appendEmptyCells(cell.mergeAcross);
          }
        });
      });
    }
  };
  CsvSerializingSession.prototype.onNewHeaderGroupingRow = function () {
    this.beginNewLine();
    return {
      onColumn: this.onNewHeaderGroupingRowColumn.bind(this)
    };
  };
  CsvSerializingSession.prototype.onNewHeaderGroupingRowColumn = function (header, index, span) {
    if (index != 0) {
      this.result += this.columnSeparator;
    }
    this.result += this.putInQuotes(header);
    this.appendEmptyCells(span);
  };
  CsvSerializingSession.prototype.appendEmptyCells = function (count) {
    for (var i = 1; i <= count; i++) {
      this.result += this.columnSeparator + this.putInQuotes("");
    }
  };
  CsvSerializingSession.prototype.onNewHeaderRow = function () {
    this.beginNewLine();
    return {
      onColumn: this.onNewHeaderRowColumn.bind(this)
    };
  };
  CsvSerializingSession.prototype.onNewHeaderRowColumn = function (column, index) {
    if (index != 0) {
      this.result += this.columnSeparator;
    }
    this.result += this.putInQuotes(this.extractHeaderValue(column));
  };
  CsvSerializingSession.prototype.onNewBodyRow = function () {
    this.beginNewLine();
    return {
      onColumn: this.onNewBodyRowColumn.bind(this)
    };
  };
  CsvSerializingSession.prototype.onNewBodyRowColumn = function (column, index, node) {
    if (index != 0) {
      this.result += this.columnSeparator;
    }
    this.result += this.putInQuotes(this.extractRowCellValue(column, index, index, agGridCommunity.Constants.EXPORT_TYPE_CSV, node));
  };
  CsvSerializingSession.prototype.putInQuotes = function (value) {
    if (this.suppressQuotes) {
      return value;
    }
    if (value === null || value === undefined) {
      return '""';
    }
    var stringValue;
    if (typeof value === 'string') {
      stringValue = value;
    } else if (typeof value.toString === 'function') {
      stringValue = value.toString();
    } else {
      console.warn('unknown value type during csv conversion');
      stringValue = '';
    }
    // replace each " with "" (ie two sets of double quotes is how to do double quotes in csv)
    var valueEscaped = stringValue.replace(/"/g, "\"\"");
    return '"' + valueEscaped + '"';
  };
  CsvSerializingSession.prototype.parse = function () {
    return this.result;
  };
  CsvSerializingSession.prototype.beginNewLine = function () {
    if (!this.isFirstLine) {
      this.result += LINE_SEPARATOR;
    }
    this.isFirstLine = false;
  };
  return CsvSerializingSession;
}(BaseGridSerializingSession);
var __extends$r =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$q =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CsvCreator = /** @class */function (_super) {
  __extends$r(CsvCreator, _super);
  function CsvCreator() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  CsvCreator.prototype.postConstruct = function () {
    this.setBeans({
      gridSerializer: this.gridSerializer,
      gridOptionsWrapper: this.gridOptionsWrapper
    });
  };
  CsvCreator.prototype.getDefaultExportParams = function () {
    return this.gridOptionsWrapper.getDefaultExportParams('csv');
  };
  CsvCreator.prototype.export = function (userParams) {
    if (this.isExportSuppressed()) {
      console.warn("ag-grid: Export cancelled. Export is not allowed as per your configuration.");
      return '';
    }
    var _a = this.getMergedParamsAndData(userParams),
      mergedParams = _a.mergedParams,
      data = _a.data;
    var packagedFile = new Blob(["\ufeff", data], {
      // @ts-ignore
      type: window.navigator.msSaveOrOpenBlob ? this.getMimeType() : 'octet/stream'
    });
    Downloader.download(this.getFileName(mergedParams.fileName), packagedFile);
    return data;
  };
  CsvCreator.prototype.exportDataAsCsv = function (params) {
    return this.export(params);
  };
  CsvCreator.prototype.getDataAsCsv = function (params) {
    return this.getMergedParamsAndData(params).data;
  };
  CsvCreator.prototype.getMimeType = function () {
    return 'text/csv;charset=utf-8;';
  };
  CsvCreator.prototype.getDefaultFileName = function () {
    return 'export.csv';
  };
  CsvCreator.prototype.getDefaultFileExtension = function () {
    return 'csv';
  };
  CsvCreator.prototype.createSerializingSession = function (params) {
    var _a = this,
      columnController = _a.columnController,
      valueService = _a.valueService,
      gridOptionsWrapper = _a.gridOptionsWrapper;
    var _b = params,
      processCellCallback = _b.processCellCallback,
      processHeaderCallback = _b.processHeaderCallback,
      processGroupHeaderCallback = _b.processGroupHeaderCallback,
      processRowGroupCallback = _b.processRowGroupCallback,
      suppressQuotes = _b.suppressQuotes,
      columnSeparator = _b.columnSeparator;
    return new CsvSerializingSession({
      columnController: columnController,
      valueService: valueService,
      gridOptionsWrapper: gridOptionsWrapper,
      processCellCallback: processCellCallback || undefined,
      processHeaderCallback: processHeaderCallback || undefined,
      processGroupHeaderCallback: processGroupHeaderCallback || undefined,
      processRowGroupCallback: processRowGroupCallback || undefined,
      suppressQuotes: suppressQuotes || false,
      columnSeparator: columnSeparator || ','
    });
  };
  CsvCreator.prototype.isExportSuppressed = function () {
    return this.gridOptionsWrapper.isSuppressCsvExport();
  };
  __decorate$q([agGridCommunity.Autowired('columnController')], CsvCreator.prototype, "columnController", void 0);
  __decorate$q([agGridCommunity.Autowired('valueService')], CsvCreator.prototype, "valueService", void 0);
  __decorate$q([agGridCommunity.Autowired('gridSerializer')], CsvCreator.prototype, "gridSerializer", void 0);
  __decorate$q([agGridCommunity.Autowired('gridOptionsWrapper')], CsvCreator.prototype, "gridOptionsWrapper", void 0);
  __decorate$q([agGridCommunity.PostConstruct], CsvCreator.prototype, "postConstruct", null);
  CsvCreator = __decorate$q([agGridCommunity.Bean('csvCreator')], CsvCreator);
  return CsvCreator;
}(BaseCreator);
var __extends$s =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$r =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RowType;
(function (RowType) {
  RowType[RowType["HEADER_GROUPING"] = 0] = "HEADER_GROUPING";
  RowType[RowType["HEADER"] = 1] = "HEADER";
  RowType[RowType["BODY"] = 2] = "BODY";
})(RowType || (RowType = {}));
var GridSerializer = /** @class */function (_super) {
  __extends$s(GridSerializer, _super);
  function GridSerializer() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  GridSerializer.prototype.serialize = function (gridSerializingSession, params) {
    if (params === void 0) {
      params = {};
    }
    var columnsToExport = this.getColumnsToExport(params.allColumns, params.columnKeys);
    var serializeChain = agGridCommunity._.compose(
    // first pass, put in the header names of the cols
    this.prepareSession(columnsToExport), this.prependContent(params), this.exportColumnGroups(params, columnsToExport), this.exportHeaders(params, columnsToExport), this.processPinnedTopRows(params, columnsToExport), this.processRows(params, columnsToExport), this.processPinnedBottomRows(params, columnsToExport), this.appendContent(params));
    return serializeChain(gridSerializingSession).parse();
  };
  GridSerializer.prototype.processRow = function (gridSerializingSession, params, columnsToExport, node) {
    var rowSkipper = params.shouldRowBeSkipped || function () {
      return false;
    };
    var gridOptionsWrapper = this.gridOptionsWrapper;
    var context = gridOptionsWrapper.getContext();
    var api = gridOptionsWrapper.getApi();
    var columnApi = gridOptionsWrapper.getColumnApi();
    var skipSingleChildrenGroup = gridOptionsWrapper.isGroupRemoveSingleChildren();
    var hideOpenParents = gridOptionsWrapper.isGroupHideOpenParents();
    var skipLowestSingleChildrenGroup = gridOptionsWrapper.isGroupRemoveLowestSingleChildren();
    var isLeafNode = this.columnController.isPivotMode() ? node.leafGroup : !node.group;
    var skipRowGroups = params.skipGroups || params.skipRowGroups;
    var shouldSkipLowestGroup = skipLowestSingleChildrenGroup && node.leafGroup;
    var shouldSkipCurrentGroup = node.allChildrenCount === 1 && (skipSingleChildrenGroup || shouldSkipLowestGroup);
    if (skipRowGroups && params.skipGroups) {
      agGridCommunity._.doOnce(function () {
        return console.warn('AG Grid: Since v25.2 `skipGroups` has been renamed to `skipRowGroups`.');
      }, 'gridSerializer-skipGroups');
    }
    if (!isLeafNode && (params.skipRowGroups || shouldSkipCurrentGroup || hideOpenParents) || params.onlySelected && !node.isSelected() || params.skipPinnedTop && node.rowPinned === 'top' || params.skipPinnedBottom && node.rowPinned === 'bottom') {
      return;
    }
    // if we are in pivotMode, then the grid will show the root node only
    // if it's not a leaf group
    var nodeIsRootNode = node.level === -1;
    if (nodeIsRootNode && !node.leafGroup) {
      return;
    }
    var shouldRowBeSkipped = rowSkipper({
      node: node,
      api: api,
      context: context
    });
    if (shouldRowBeSkipped) {
      return;
    }
    var rowAccumulator = gridSerializingSession.onNewBodyRow();
    columnsToExport.forEach(function (column, index) {
      rowAccumulator.onColumn(column, index, node);
    });
    if (params.getCustomContentBelowRow) {
      var content = params.getCustomContentBelowRow({
        node: node,
        api: api,
        columnApi: columnApi,
        context: context
      });
      if (content) {
        gridSerializingSession.addCustomContent(content);
      }
    }
  };
  GridSerializer.prototype.appendContent = function (params) {
    return function (gridSerializingSession) {
      var appendContent = params.customFooter || params.appendContent;
      if (appendContent) {
        if (params.customFooter) {
          agGridCommunity._.doOnce(function () {
            return console.warn('AG Grid: Since version 25.2.0 the `customFooter` param has been deprecated. Use `appendContent` instead.');
          }, 'gridSerializer-customFooter');
        }
        gridSerializingSession.addCustomContent(appendContent);
      }
      return gridSerializingSession;
    };
  };
  GridSerializer.prototype.prependContent = function (params) {
    return function (gridSerializingSession) {
      var prependContent = params.customHeader || params.prependContent;
      if (prependContent) {
        if (params.customHeader) {
          agGridCommunity._.doOnce(function () {
            return console.warn('AG Grid: Since version 25.2.0 the `customHeader` param has been deprecated. Use `prependContent` instead.');
          }, 'gridSerializer-customHeader');
        }
        gridSerializingSession.addCustomContent(prependContent);
      }
      return gridSerializingSession;
    };
  };
  GridSerializer.prototype.prepareSession = function (columnsToExport) {
    return function (gridSerializingSession) {
      gridSerializingSession.prepare(columnsToExport);
      return gridSerializingSession;
    };
  };
  GridSerializer.prototype.exportColumnGroups = function (params, columnsToExport) {
    var _this = this;
    return function (gridSerializingSession) {
      if (!params.skipColumnGroupHeaders) {
        var groupInstanceIdCreator = new agGridCommunity.GroupInstanceIdCreator();
        var displayedGroups = _this.displayedGroupCreator.createDisplayedGroups(columnsToExport, _this.columnController.getGridBalancedTree(), groupInstanceIdCreator, null);
        _this.recursivelyAddHeaderGroups(displayedGroups, gridSerializingSession, params.processGroupHeaderCallback);
      } else if (params.columnGroups) {
        agGridCommunity._.doOnce(function () {
          return console.warn('AG Grid: Since v25.2 the `columnGroups` param has deprecated, and groups are exported by default.');
        }, 'gridSerializer-columnGroups');
      }
      return gridSerializingSession;
    };
  };
  GridSerializer.prototype.exportHeaders = function (params, columnsToExport) {
    return function (gridSerializingSession) {
      if (!params.skipHeader && !params.skipColumnHeaders) {
        var gridRowIterator_1 = gridSerializingSession.onNewHeaderRow();
        columnsToExport.forEach(function (column, index) {
          gridRowIterator_1.onColumn(column, index, undefined);
        });
      } else if (params.skipHeader) {
        agGridCommunity._.doOnce(function () {
          return console.warn('AG Grid: Since v25.2 the `skipHeader` param has been renamed to `skipColumnHeaders`.');
        }, 'gridSerializer-skipHeader');
      }
      return gridSerializingSession;
    };
  };
  GridSerializer.prototype.processPinnedTopRows = function (params, columnsToExport) {
    var _this = this;
    return function (gridSerializingSession) {
      var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);
      _this.pinnedRowModel.forEachPinnedTopRow(processRow);
      return gridSerializingSession;
    };
  };
  GridSerializer.prototype.processRows = function (params, columnsToExport) {
    var _this = this;
    return function (gridSerializingSession) {
      // when in pivot mode, we always render cols on screen, never 'all columns'
      var rowModel = _this.rowModel;
      var rowModelType = rowModel.getType();
      var usingCsrm = rowModelType === agGridCommunity.Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
      var usingSsrm = rowModelType === agGridCommunity.Constants.ROW_MODEL_TYPE_SERVER_SIDE;
      var onlySelectedNonStandardModel = !usingCsrm && params.onlySelected;
      var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);
      if (_this.columnController.isPivotMode()) {
        if (usingCsrm) {
          rowModel.forEachPivotNode(processRow);
        } else {
          // must be enterprise, so we can just loop through all the nodes
          rowModel.forEachNode(processRow);
        }
      } else {
        // onlySelectedAllPages: user doing pagination and wants selected items from
        // other pages, so cannot use the standard row model as it won't have rows from
        // other pages.
        // onlySelectedNonStandardModel: if user wants selected in non standard row model
        // (eg viewport) then again RowModel cannot be used, so need to use selected instead.
        if (params.onlySelectedAllPages || onlySelectedNonStandardModel) {
          var selectedNodes = _this.selectionController.getSelectedNodes();
          selectedNodes.forEach(processRow);
        } else {
          // here is everything else - including standard row model and selected. we don't use
          // the selection model even when just using selected, so that the result is the order
          // of the rows appearing on the screen.
          if (usingCsrm) {
            rowModel.forEachNodeAfterFilterAndSort(processRow);
          } else if (usingSsrm) {
            rowModel.forEachNodeAfterFilterAndSort(processRow);
          } else {
            rowModel.forEachNode(processRow);
          }
        }
      }
      return gridSerializingSession;
    };
  };
  GridSerializer.prototype.processPinnedBottomRows = function (params, columnsToExport) {
    var _this = this;
    return function (gridSerializingSession) {
      var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);
      _this.pinnedRowModel.forEachPinnedBottomRow(processRow);
      return gridSerializingSession;
    };
  };
  GridSerializer.prototype.getColumnsToExport = function (allColumns, columnKeys) {
    if (allColumns === void 0) {
      allColumns = false;
    }
    var isPivotMode = this.columnController.isPivotMode();
    if (columnKeys && columnKeys.length) {
      return this.columnController.getGridColumns(columnKeys);
    }
    if (allColumns && !isPivotMode) {
      // add auto group column for tree data
      var columns = this.gridOptionsWrapper.isTreeData() ? this.columnController.getGridColumns([agGridCommunity.Constants.GROUP_AUTO_COLUMN_ID]) : [];
      return columns.concat(this.columnController.getAllPrimaryColumns() || []);
    }
    return this.columnController.getAllDisplayedColumns();
  };
  GridSerializer.prototype.recursivelyAddHeaderGroups = function (displayedGroups, gridSerializingSession, processGroupHeaderCallback) {
    var directChildrenHeaderGroups = [];
    displayedGroups.forEach(function (columnGroupChild) {
      var columnGroup = columnGroupChild;
      if (!columnGroup.getChildren) {
        return;
      }
      columnGroup.getChildren().forEach(function (it) {
        return directChildrenHeaderGroups.push(it);
      });
    });
    if (displayedGroups.length > 0 && displayedGroups[0] instanceof agGridCommunity.ColumnGroup) {
      this.doAddHeaderHeader(gridSerializingSession, displayedGroups, processGroupHeaderCallback);
    }
    if (directChildrenHeaderGroups && directChildrenHeaderGroups.length > 0) {
      this.recursivelyAddHeaderGroups(directChildrenHeaderGroups, gridSerializingSession, processGroupHeaderCallback);
    }
  };
  GridSerializer.prototype.doAddHeaderHeader = function (gridSerializingSession, displayedGroups, processGroupHeaderCallback) {
    var _this = this;
    var gridRowIterator = gridSerializingSession.onNewHeaderGroupingRow();
    var columnIndex = 0;
    displayedGroups.forEach(function (columnGroupChild) {
      var columnGroup = columnGroupChild;
      var name;
      if (processGroupHeaderCallback) {
        name = processGroupHeaderCallback({
          columnGroup: columnGroup,
          api: _this.gridOptionsWrapper.getApi(),
          columnApi: _this.gridOptionsWrapper.getColumnApi(),
          context: _this.gridOptionsWrapper.getContext()
        });
      } else {
        name = _this.columnController.getDisplayNameForColumnGroup(columnGroup, 'header');
      }
      gridRowIterator.onColumn(name || '', columnIndex++, columnGroup.getLeafColumns().length - 1);
    });
  };
  __decorate$r([agGridCommunity.Autowired('displayedGroupCreator')], GridSerializer.prototype, "displayedGroupCreator", void 0);
  __decorate$r([agGridCommunity.Autowired('columnController')], GridSerializer.prototype, "columnController", void 0);
  __decorate$r([agGridCommunity.Autowired('rowModel')], GridSerializer.prototype, "rowModel", void 0);
  __decorate$r([agGridCommunity.Autowired('pinnedRowModel')], GridSerializer.prototype, "pinnedRowModel", void 0);
  __decorate$r([agGridCommunity.Autowired('selectionController')], GridSerializer.prototype, "selectionController", void 0);
  GridSerializer = __decorate$r([agGridCommunity.Bean("gridSerializer")], GridSerializer);
  return GridSerializer;
}(agGridCommunity.BeanStub);
var CsvExportModule = {
  moduleName: agGridCommunity.ModuleNames.CsvExportModule,
  beans: [CsvCreator, GridSerializer]
};
var LINE_SEPARATOR$1 = '\r\n';
var XmlFactory = /** @class */function () {
  function XmlFactory() {}
  XmlFactory.createHeader = function (headerElement) {
    if (headerElement === void 0) {
      headerElement = {};
    }
    var headerStart = '<?';
    var headerEnd = '?>';
    var keys = ['version'];
    if (!headerElement.version) {
      headerElement.version = "1.0";
    }
    if (headerElement.encoding) {
      keys.push('encoding');
    }
    if (headerElement.standalone) {
      keys.push('standalone');
    }
    var att = keys.map(function (key) {
      return key + "=\"" + headerElement[key] + "\"";
    }).join(' ');
    return headerStart + "xml " + att + " " + headerEnd;
  };
  XmlFactory.createXml = function (xmlElement, booleanTransformer) {
    var _this = this;
    var props = '';
    if (xmlElement.properties) {
      if (xmlElement.properties.prefixedAttributes) {
        xmlElement.properties.prefixedAttributes.forEach(function (prefixedSet) {
          Object.keys(prefixedSet.map).forEach(function (key) {
            props += _this.returnAttributeIfPopulated(prefixedSet.prefix + key, prefixedSet.map[key], booleanTransformer);
          });
        });
      }
      if (xmlElement.properties.rawMap) {
        Object.keys(xmlElement.properties.rawMap).forEach(function (key) {
          props += _this.returnAttributeIfPopulated(key, xmlElement.properties.rawMap[key], booleanTransformer);
        });
      }
    }
    var result = '<' + xmlElement.name + props;
    if (!xmlElement.children && xmlElement.textNode == null) {
      return result + '/>' + LINE_SEPARATOR$1;
    }
    if (xmlElement.textNode != null) {
      return result + '>' + xmlElement.textNode + '</' + xmlElement.name + '>' + LINE_SEPARATOR$1;
    }
    result += '>' + LINE_SEPARATOR$1;
    if (xmlElement.children) {
      xmlElement.children.forEach(function (it) {
        result += _this.createXml(it, booleanTransformer);
      });
    }
    return result + '</' + xmlElement.name + '>' + LINE_SEPARATOR$1;
  };
  XmlFactory.returnAttributeIfPopulated = function (key, value, booleanTransformer) {
    if (!value && value !== '' && value !== 0) {
      return '';
    }
    var xmlValue = value;
    if (typeof value === 'boolean') {
      if (booleanTransformer) {
        xmlValue = booleanTransformer(value);
      }
    }
    return " " + key + "=\"" + xmlValue + "\"";
  };
  return XmlFactory;
}();

// table for crc calculation
// from: https://referencesource.microsoft.com/#System/sys/System/IO/compression/Crc32Helper.cs,3b31978c7d7f7246,references
var crcTable = new Uint32Array([0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f, 0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9, 0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d]);
var ZipContainer = /** @class */function () {
  function ZipContainer() {}
  ZipContainer.addFolders = function (paths) {
    paths.forEach(this.addFolder.bind(this));
  };
  ZipContainer.addFolder = function (path) {
    this.folders.push({
      path: path,
      created: new Date(),
      isBase64: false
    });
  };
  ZipContainer.addFile = function (path, content, isBase64) {
    if (isBase64 === void 0) {
      isBase64 = false;
    }
    this.files.push({
      path: path,
      created: new Date(),
      content: content,
      isBase64: isBase64
    });
  };
  ZipContainer.getContent = function (mimeType) {
    if (mimeType === void 0) {
      mimeType = 'application/zip';
    }
    var textOutput = this.buildFileStream();
    var uInt8Output = this.buildUint8Array(textOutput);
    this.clearStream();
    return new Blob([uInt8Output], {
      type: mimeType
    });
  };
  ZipContainer.clearStream = function () {
    this.folders = [];
    this.files = [];
  };
  ZipContainer.buildFileStream = function (fData) {
    if (fData === void 0) {
      fData = '';
    }
    var totalFiles = this.folders.concat(this.files);
    var len = totalFiles.length;
    var foData = '';
    var lL = 0;
    var cL = 0;
    for (var _i = 0, totalFiles_1 = totalFiles; _i < totalFiles_1.length; _i++) {
      var currentFile = totalFiles_1[_i];
      var _a = this.getHeader(currentFile, lL),
        fileHeader = _a.fileHeader,
        folderHeader = _a.folderHeader,
        content = _a.content;
      lL += fileHeader.length + content.length;
      cL += folderHeader.length;
      fData += fileHeader + content;
      foData += folderHeader;
    }
    var foEnd = this.buildFolderEnd(len, cL, lL);
    return fData + foData + foEnd;
  };
  ZipContainer.getHeader = function (currentFile, offset) {
    var content = currentFile.content,
      path = currentFile.path,
      created = currentFile.created,
      isBase64 = currentFile.isBase64;
    var utf8_encode = agGridCommunity._.utf8_encode,
      decToHex = agGridCommunity._.decToHex;
    var utfPath = utf8_encode(path);
    var isUTF8 = utfPath !== path;
    var time = this.convertTime(created);
    var dt = this.convertDate(created);
    var extraFields = '';
    if (isUTF8) {
      var uExtraFieldPath = decToHex(1, 1) + decToHex(this.getFromCrc32Table(utfPath), 4) + utfPath;
      extraFields = "\x75\x70" + decToHex(uExtraFieldPath.length, 2) + uExtraFieldPath;
    }
    var _a = !content ? {
        size: 0,
        content: ''
      } : this.getConvertedContent(content, isBase64),
      size = _a.size,
      convertedContent = _a.content;
    var header = '\x0A\x00' + (isUTF8 ? '\x00\x08' : '\x00\x00') + '\x00\x00' + decToHex(time, 2) +
    // last modified time
    decToHex(dt, 2) +
    // last modified date
    decToHex(size ? this.getFromCrc32Table(convertedContent) : 0, 4) + decToHex(size, 4) +
    // compressed size
    decToHex(size, 4) +
    // uncompressed size
    decToHex(utfPath.length, 2) +
    // file name length
    decToHex(extraFields.length, 2); // extra field length
    var fileHeader = 'PK\x03\x04' + header + utfPath + extraFields;
    var folderHeader = 'PK\x01\x02' +
    // central header
    '\x14\x00' + header +
    // file header
    '\x00\x00' + '\x00\x00' + '\x00\x00' + (content ? '\x00\x00\x00\x00' : '\x10\x00\x00\x00') +
    // external file attributes
    decToHex(offset, 4) +
    // relative offset of local header
    utfPath +
    // file name
    extraFields; // extra field
    return {
      fileHeader: fileHeader,
      folderHeader: folderHeader,
      content: convertedContent || ''
    };
  };
  ZipContainer.getConvertedContent = function (content, isBase64) {
    if (isBase64 === void 0) {
      isBase64 = false;
    }
    if (isBase64) {
      content = content.split(';base64,')[1];
    }
    content = isBase64 ? atob(content) : content;
    return {
      size: content.length,
      content: content
    };
  };
  ZipContainer.buildFolderEnd = function (tLen, cLen, lLen) {
    var decToHex = agGridCommunity._.decToHex;
    return 'PK\x05\x06' +
    // central folder end
    '\x00\x00' + '\x00\x00' + decToHex(tLen, 2) +
    // total number of entries in the central folder
    decToHex(tLen, 2) +
    // total number of entries in the central folder
    decToHex(cLen, 4) +
    // size of the central folder
    decToHex(lLen, 4) +
    // central folder start offset
    '\x00\x00';
  };
  ZipContainer.buildUint8Array = function (content) {
    var uint8 = new Uint8Array(content.length);
    for (var i = 0; i < uint8.length; i++) {
      uint8[i] = content.charCodeAt(i);
    }
    return uint8;
  };
  ZipContainer.getFromCrc32Table = function (content) {
    if (!content.length) {
      return 0;
    }
    var size = content.length;
    var iterable = new Uint8Array(size);
    for (var i = 0; i < size; i++) {
      iterable[i] = content.charCodeAt(i);
    }
    var crc = 0 ^ -1;
    var j = 0;
    var k = 0;
    var l = 0;
    for (var i = 0; i < size; i++) {
      j = iterable[i];
      k = (crc ^ j) & 0xFF;
      l = crcTable[k];
      crc = crc >>> 8 ^ l;
    }
    return crc ^ -1;
  };
  ZipContainer.convertTime = function (date) {
    var time = date.getHours();
    time <<= 6;
    time = time | date.getMinutes();
    time <<= 5;
    time = time | date.getSeconds() / 2;
    return time;
  };
  ZipContainer.convertDate = function (date) {
    var dt = date.getFullYear() - 1980;
    dt <<= 4;
    dt = dt | date.getMonth() + 1;
    dt <<= 5;
    dt = dt | date.getDate();
    return dt;
  };
  ZipContainer.folders = [];
  ZipContainer.files = [];
  return ZipContainer;
}();

/**
 * See https://msdn.microsoft.com/en-us/library/aa140066(v=office.10).aspx
 */
var ExcelXmlFactory = /** @class */function () {
  function ExcelXmlFactory() {}
  ExcelXmlFactory.createExcel = function (styles, currentWorksheet) {
    var header = this.excelXmlHeader();
    var docProps = documentProperties.getTemplate();
    var eWorkbook = excelWorkbook.getTemplate();
    var wb = this.workbook(docProps, eWorkbook, styles, currentWorksheet);
    return "" + header + XmlFactory.createXml(wb, function (boolean) {
      return boolean ? '1' : '0';
    });
  };
  ExcelXmlFactory.workbook = function (docProperties, eWorkbook, styles, currentWorksheet) {
    var children = [docProperties, eWorkbook, this.stylesXmlElement(styles)].concat(worksheet.getTemplate(currentWorksheet));
    return agGridCommunity._.assign({}, workbook.getTemplate(), {
      children: children
    });
  };
  ExcelXmlFactory.excelXmlHeader = function () {
    return "<?xml version=\"1.0\" ?>\n        <?mso-application progid=\"Excel.Sheet\" ?>\n        ";
  };
  ExcelXmlFactory.stylesXmlElement = function (styles) {
    var _this = this;
    return {
      name: 'Styles',
      children: styles ? styles.map(function (it) {
        return _this.styleXmlElement(it);
      }) : []
    };
  };
  ExcelXmlFactory.styleXmlElement = function (styleProperties) {
    var children = agGridCommunity._.compose(this.addProperty('alignment', styleProperties), this.addProperty('borders', styleProperties), this.addProperty('font', styleProperties), this.addProperty('interior', styleProperties), this.addProperty('protection', styleProperties), this.addProperty('numberFormat', styleProperties))([]);
    return agGridCommunity._.assign({}, style.getTemplate(styleProperties), {
      children: children
    });
  };
  ExcelXmlFactory.addProperty = function (property, styleProperties) {
    return function (children) {
      if (!styleProperties[property]) {
        return children;
      }
      var options = {
        alignment: alignment,
        borders: borders,
        font: font,
        interior: interior,
        numberFormat: numberFormat,
        protection: protection
      };
      return children.concat(options[property].getTemplate(styleProperties));
    };
  };
  ExcelXmlFactory.factoryMode = agGridCommunity.ExcelFactoryMode.SINGLE_SHEET;
  return ExcelXmlFactory;
}();
var INCH_TO_EMU = 9525;
var numberFormatMap = {
  '0': 1,
  '0.00': 2,
  '#,##0': 3,
  '#,##0.00': 4,
  '0%': 9,
  '0.00%': 10,
  '0.00E+00': 11,
  '# ?/?': 12,
  '# ??/??': 13,
  'mm-dd-yy': 14,
  'd-mmm-yy': 15,
  'd-mmm': 16,
  'mmm-yy': 17,
  'h:mm AM/PM': 18,
  'h:mm:ss AM/PM': 19,
  'h:mm': 20,
  'h:mm:ss': 21,
  'm/d/yy h:mm': 22,
  '#,##0 ;(#,##0)': 37,
  '#,##0 ;[Red](#,##0)': 38,
  '#,##0.00;(#,##0.00)': 39,
  '#,##0.00;[Red](#,##0.00)': 40,
  'mm:ss': 45,
  '[h]:mm:ss': 46,
  'mmss.0': 47,
  '##0.0E+0': 48,
  '@': 49
};
var pixelsToPoint = function (pixels) {
  return Math.round(pixels * 72 / 96);
};
var pointsToPixel = function (points) {
  return Math.round(points * 96 / 72);
};
var pixelsToEMU = function (value) {
  return Math.ceil(value * INCH_TO_EMU);
};
var getFontFamilyId = function (name) {
  if (name === undefined) {
    return;
  }
  var families = ['Automatic', 'Roman', 'Swiss', 'Modern', 'Script', 'Decorative'];
  var pos = families.indexOf(name || 'Automatic');
  return Math.max(pos, 0);
};
var getHeightFromProperty = function (rowIndex, height) {
  if (!height) {
    return;
  }
  var finalHeight;
  if (typeof height === 'number') {
    finalHeight = height;
  } else {
    var heightFunc = height;
    finalHeight = heightFunc({
      rowIndex: rowIndex
    });
  }
  return pixelsToPoint(finalHeight);
};
var setExcelImageTotalWidth = function (image, columnsToExport) {
  var _a = image.position,
    colSpan = _a.colSpan,
    column = _a.column;
  if (image.width) {
    if (colSpan) {
      var columnsInSpan = columnsToExport.slice(column - 1, column + colSpan - 1);
      var totalWidth = 0;
      for (var i = 0; i < columnsInSpan.length; i++) {
        var colWidth = columnsInSpan[i].getActualWidth();
        if (image.width < totalWidth + colWidth) {
          image.position.colSpan = i + 1;
          image.totalWidth = image.width;
          image.width = image.totalWidth - totalWidth;
          break;
        }
        totalWidth += colWidth;
      }
    } else {
      image.totalWidth = image.width;
    }
  }
};
var setExcelImageTotalHeight = function (image, rowHeight) {
  var _a = image.position,
    rowSpan = _a.rowSpan,
    row = _a.row;
  if (image.height) {
    if (rowSpan) {
      var totalHeight = 0;
      var counter = 0;
      for (var i = row; i < row + rowSpan; i++) {
        var nextRowHeight = pointsToPixel(getHeightFromProperty(i, rowHeight) || 20);
        if (image.height < totalHeight + nextRowHeight) {
          image.position.rowSpan = counter + 1;
          image.totalHeight = image.height;
          image.height = image.totalHeight - totalHeight;
          break;
        }
        totalHeight += nextRowHeight;
        counter++;
      }
    } else {
      image.totalHeight = image.height;
    }
  }
};
var createXmlPart = function (body) {
  var header = XmlFactory.createHeader({
    encoding: 'UTF-8',
    standalone: 'yes'
  });
  var xmlBody = XmlFactory.createXml(body);
  return "" + header + xmlBody;
};
var getExcelColumnName = function (colIdx) {
  var startCode = 65;
  var tableWidth = 26;
  var fromCharCode = String.fromCharCode;
  var pos = Math.floor(colIdx / tableWidth);
  var tableIdx = colIdx % tableWidth;
  if (!pos || colIdx === tableWidth) {
    return fromCharCode(startCode + colIdx - 1);
  }
  if (!tableIdx) {
    return getExcelColumnName(pos - 1) + 'Z';
  }
  if (pos < tableWidth) {
    return fromCharCode(startCode + pos - 1) + fromCharCode(startCode + tableIdx - 1);
  }
  return getExcelColumnName(pos) + fromCharCode(startCode + tableIdx - 1);
};
var __extends$t =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign =  false || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __spreadArrays$1 =  false || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
};
var BaseExcelSerializingSession = /** @class */function (_super) {
  __extends$t(BaseExcelSerializingSession, _super);
  function BaseExcelSerializingSession(config) {
    var _this = _super.call(this, config) || this;
    _this.mixedStyles = {};
    _this.mixedStyleCounter = 0;
    _this.rows = [];
    _this.config = agGridCommunity._.assign({}, config);
    _this.stylesByIds = {};
    _this.config.baseExcelStyles.forEach(function (style) {
      _this.stylesByIds[style.id] = style;
    });
    _this.excelStyles = __spreadArrays$1(_this.config.baseExcelStyles);
    return _this;
  }
  BaseExcelSerializingSession.prototype.addCustomContent = function (customContent) {
    var _this = this;
    customContent.forEach(function (row) {
      var rowLen = _this.rows.length + 1;
      _this.rows.push({
        height: getHeightFromProperty(rowLen, _this.config.rowHeight),
        cells: row.map(function (cell, idx) {
          var image = _this.addImage(rowLen, _this.columnsToExport[idx], cell.data.value);
          var ret = __assign({}, cell);
          if (image) {
            ret.data = {};
            if (image.value != null) {
              ret.data.value = image.value;
            } else {
              ret.data.type = 'e';
              ret.data.value = null;
            }
          }
          return ret;
        })
      });
    });
  };
  BaseExcelSerializingSession.prototype.onNewHeaderGroupingRow = function () {
    var _this = this;
    var currentCells = [];
    this.rows.push({
      cells: currentCells,
      height: getHeightFromProperty(this.rows.length + 1, this.config.headerRowHeight)
    });
    return {
      onColumn: function (header, index, span) {
        var styleIds = _this.config.styleLinker(RowType.HEADER_GROUPING, 1, "grouping-" + header, undefined, undefined);
        currentCells.push(_this.createMergedCell(_this.getStyleId(styleIds), _this.getDataTypeForValue('string'), header, span));
      }
    };
  };
  BaseExcelSerializingSession.prototype.onNewHeaderRow = function () {
    return this.onNewRow(this.onNewHeaderColumn, this.config.headerRowHeight);
  };
  BaseExcelSerializingSession.prototype.onNewBodyRow = function () {
    return this.onNewRow(this.onNewBodyColumn, this.config.rowHeight);
  };
  BaseExcelSerializingSession.prototype.prepare = function (columnsToExport) {
    var _this = this;
    _super.prototype.prepare.call(this, columnsToExport);
    this.columnsToExport = __spreadArrays$1(columnsToExport);
    this.cols = columnsToExport.map(function (col, i) {
      return _this.convertColumnToExcel(col, i);
    });
  };
  BaseExcelSerializingSession.prototype.parse = function () {
    // adding custom content might have made some rows wider than the grid, so add new columns
    var longestRow = this.rows.reduce(function (a, b) {
      return Math.max(a, b.cells.length);
    }, 0);
    while (this.cols.length < longestRow) {
      this.cols.push(this.convertColumnToExcel(null, this.cols.length + 1));
    }
    var data = {
      name: this.config.sheetName,
      table: {
        columns: this.cols,
        rows: this.rows
      }
    };
    return this.createExcel(data);
  };
  BaseExcelSerializingSession.prototype.isFormula = function (value) {
    if (value == null) {
      return false;
    }
    return this.config.autoConvertFormulas && agGridCommunity._.startsWith(value.toString(), '=');
  };
  BaseExcelSerializingSession.prototype.getStyleById = function (styleId) {
    if (styleId == null) {
      return null;
    }
    return this.stylesByIds[styleId] || null;
  };
  BaseExcelSerializingSession.prototype.convertColumnToExcel = function (column, index) {
    var columnWidth = this.config.columnWidth;
    if (columnWidth) {
      if (typeof columnWidth === 'number') {
        return {
          width: columnWidth
        };
      }
      return {
        width: columnWidth({
          column: column,
          index: index
        })
      };
    }
    if (column) {
      var smallestUsefulWidth = 75;
      return {
        width: Math.max(column.getActualWidth(), smallestUsefulWidth)
      };
    }
    return {};
  };
  BaseExcelSerializingSession.prototype.onNewHeaderColumn = function (rowIndex, currentCells) {
    var _this = this;
    return function (column, index) {
      var nameForCol = _this.extractHeaderValue(column);
      var styleIds = _this.config.styleLinker(RowType.HEADER, rowIndex, nameForCol, column, undefined);
      currentCells.push(_this.createCell(_this.getStyleId(styleIds), _this.getDataTypeForValue('string'), nameForCol));
    };
  };
  BaseExcelSerializingSession.prototype.onNewRow = function (onNewColumnAccumulator, height) {
    var currentCells = [];
    this.rows.push({
      cells: currentCells,
      height: getHeightFromProperty(this.rows.length + 1, height)
    });
    return {
      onColumn: onNewColumnAccumulator.bind(this, this.rows.length, currentCells)()
    };
  };
  BaseExcelSerializingSession.prototype.onNewBodyColumn = function (rowIndex, currentCells) {
    var _this = this;
    var skipCols = 0;
    return function (column, index, node) {
      if (skipCols > 0) {
        skipCols -= 1;
        return;
      }
      var valueForCell = _this.extractRowCellValue(column, index, rowIndex, agGridCommunity.Constants.EXPORT_TYPE_EXCEL, node);
      var styleIds = _this.config.styleLinker(RowType.BODY, rowIndex, valueForCell, column, node);
      var excelStyleId = _this.getStyleId(styleIds);
      var colSpan = column.getColSpan(node);
      var addedImage = _this.addImage(rowIndex, column, valueForCell);
      if (addedImage) {
        currentCells.push(_this.createCell(excelStyleId, _this.getDataTypeForValue(addedImage.value), addedImage.value == null ? '' : addedImage.value));
      } else if (colSpan > 1) {
        skipCols = colSpan - 1;
        currentCells.push(_this.createMergedCell(excelStyleId, _this.getDataTypeForValue(valueForCell), valueForCell, colSpan - 1));
      } else {
        currentCells.push(_this.createCell(excelStyleId, _this.getDataTypeForValue(valueForCell), valueForCell));
      }
    };
  };
  BaseExcelSerializingSession.prototype.getStyleId = function (styleIds) {
    if (!styleIds || !styleIds.length) {
      return null;
    }
    if (styleIds.length === 1) {
      return styleIds[0];
    }
    var key = styleIds.join("-");
    if (!this.mixedStyles[key]) {
      this.addNewMixedStyle(styleIds);
    }
    return this.mixedStyles[key].excelID;
  };
  BaseExcelSerializingSession.prototype.addNewMixedStyle = function (styleIds) {
    var _this = this;
    this.mixedStyleCounter += 1;
    var excelId = 'mixedStyle' + this.mixedStyleCounter;
    var resultantStyle = {};
    styleIds.forEach(function (styleId) {
      _this.excelStyles.forEach(function (excelStyle) {
        if (excelStyle.id === styleId) {
          agGridCommunity._.mergeDeep(resultantStyle, agGridCommunity._.deepCloneObject(excelStyle));
        }
      });
    });
    resultantStyle.id = excelId;
    resultantStyle.name = excelId;
    var key = styleIds.join("-");
    this.mixedStyles[key] = {
      excelID: excelId,
      key: key,
      result: resultantStyle
    };
    this.excelStyles.push(resultantStyle);
    this.stylesByIds[excelId] = resultantStyle;
  };
  return BaseExcelSerializingSession;
}(BaseGridSerializingSession);
var __extends$u =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ExcelXmlSerializingSession = /** @class */function (_super) {
  __extends$u(ExcelXmlSerializingSession, _super);
  function ExcelXmlSerializingSession() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ExcelXmlSerializingSession.prototype.createExcel = function (data) {
    return ExcelXmlFactory.createExcel(this.excelStyles, data);
  };
  ExcelXmlSerializingSession.prototype.getDataTypeForValue = function (valueForCell) {
    return agGridCommunity._.isNumeric(valueForCell) ? 'Number' : 'String';
  };
  ExcelXmlSerializingSession.prototype.getType = function (type, style, value) {
    if (this.isFormula(value)) {
      return 'Formula';
    }
    if (style && style.dataType) {
      switch (style.dataType.toLocaleLowerCase()) {
        case 'string':
          return 'Formula';
        case 'number':
          return 'Number';
        case 'datetime':
          return 'DateTime';
        case 'error':
          return 'Error';
        case 'boolean':
          return 'Boolean';
        default:
          console.warn("ag-grid: Unrecognized data type for excel export [" + style.id + ".dataType=" + style.dataType + "]");
      }
    }
    return type;
  };
  ExcelXmlSerializingSession.prototype.addImage = function () {
    return;
  };
  ExcelXmlSerializingSession.prototype.createCell = function (styleId, type, value) {
    var actualStyle = this.getStyleById(styleId);
    var typeTransformed = this.getType(type, actualStyle, value) || type;
    return {
      styleId: !!actualStyle ? styleId : undefined,
      data: {
        type: typeTransformed,
        value: this.getValueTransformed(typeTransformed, value)
      }
    };
  };
  ExcelXmlSerializingSession.prototype.getValueTransformed = function (typeTransformed, value) {
    var _this = this;
    var wrapText = function (val) {
      if (_this.config.suppressTextAsCDATA) {
        return agGridCommunity._.escapeString(val);
      }
      var cdataStart = '<![CDATA[';
      var cdataEnd = ']]>';
      var cdataEndRegex = new RegExp(cdataEnd, "g");
      return cdataStart
      // CDATA sections are closed by the character sequence ']]>' and there is no
      // way of escaping this, so if the text contains the offending sequence, emit
      // multiple CDATA sections and split the characters between them.
      + String(val).replace(cdataEndRegex, ']]' + cdataEnd + cdataStart + '>') + cdataEnd;
    };
    var convertBoolean = function (val) {
      if (!val || val === '0' || val === 'false') {
        return '0';
      }
      return '1';
    };
    switch (typeTransformed) {
      case 'String':
        return wrapText(value);
      case 'Number':
        return Number(value).valueOf() + '';
      case 'Boolean':
        return convertBoolean(value);
      default:
        return value;
    }
  };
  ExcelXmlSerializingSession.prototype.createMergedCell = function (styleId, type, value, numOfCells) {
    return {
      styleId: !!this.getStyleById(styleId) ? styleId : undefined,
      data: {
        type: type,
        value: value
      },
      mergeAcross: numOfCells
    };
  };
  return ExcelXmlSerializingSession;
}(BaseExcelSerializingSession);
var coreFactory = {
  getTemplate: function (author) {
    var dt = new Date();
    var jsonDate = dt.toJSON();
    return {
      name: 'cp:coreProperties',
      properties: {
        prefixedAttributes: [{
          prefix: "xmlns:",
          map: {
            cp: "http://schemas.openxmlformats.org/package/2006/metadata/core-properties",
            dc: 'http://purl.org/dc/elements/1.1/',
            dcterms: 'http://purl.org/dc/terms/',
            dcmitype: 'http://purl.org/dc/dcmitype/',
            xsi: 'http://www.w3.org/2001/XMLSchema-instance'
          }
        }]
      },
      children: [{
        name: 'dc:creator',
        textNode: author
      }, {
        name: 'dc:title',
        textNode: 'Workbook'
      }, {
        name: 'dcterms:created',
        properties: {
          rawMap: {
            'xsi:type': 'dcterms:W3CDTF'
          }
        },
        textNode: jsonDate
      }, {
        name: 'dcterms:modified',
        properties: {
          rawMap: {
            'xsi:type': 'dcterms:W3CDTF'
          }
        },
        textNode: jsonDate
      }]
    };
  }
};
var contentTypeFactory = {
  getTemplate: function (config) {
    var name = config.name,
      ContentType = config.ContentType,
      Extension = config.Extension,
      PartName = config.PartName;
    return {
      name: name,
      properties: {
        rawMap: {
          Extension: Extension,
          PartName: PartName,
          ContentType: ContentType
        }
      }
    };
  }
};
var __spreadArrays$2 =  false || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
};
var contentTypesFactory = {
  getTemplate: function (sheetLen) {
    var worksheets = agGridCommunity._.fill(new Array(sheetLen), undefined).map(function (v, i) {
      return {
        name: 'Override',
        ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml',
        PartName: "/xl/worksheets/sheet" + (i + 1) + ".xml"
      };
    });
    var sheetsWithImages = ExcelXlsxFactory.worksheetImages.size;
    var imageTypesObject = {};
    ExcelXlsxFactory.workbookImageIds.forEach(function (v) {
      imageTypesObject[v.type] = true;
    });
    var imageDocs = agGridCommunity._.fill(new Array(sheetsWithImages), undefined).map(function (v, i) {
      return {
        name: 'Override',
        ContentType: 'application/vnd.openxmlformats-officedocument.drawing+xml',
        PartName: "/xl/drawings/drawing" + (i + 1) + ".xml"
      };
    });
    var imageTypes = Object.keys(imageTypesObject).map(function (ext) {
      return {
        name: 'Default',
        ContentType: "image/" + ext,
        Extension: ext
      };
    });
    var children = __spreadArrays$2(imageTypes, [{
      name: 'Default',
      Extension: 'rels',
      ContentType: 'application/vnd.openxmlformats-package.relationships+xml'
    }, {
      name: 'Default',
      ContentType: 'application/xml',
      Extension: 'xml'
    }, {
      name: 'Override',
      ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml',
      PartName: "/xl/workbook.xml"
    }], worksheets, [{
      name: 'Override',
      ContentType: 'application/vnd.openxmlformats-officedocument.theme+xml',
      PartName: '/xl/theme/theme1.xml'
    }, {
      name: 'Override',
      ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml',
      PartName: '/xl/styles.xml'
    }, {
      name: 'Override',
      ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml',
      PartName: '/xl/sharedStrings.xml'
    }], imageDocs, [{
      name: 'Override',
      ContentType: 'application/vnd.openxmlformats-package.core-properties+xml',
      PartName: '/docProps/core.xml'
    }]).map(contentTypeFactory.getTemplate);
    return {
      name: "Types",
      properties: {
        rawMap: {
          xmlns: "http://schemas.openxmlformats.org/package/2006/content-types"
        }
      },
      children: children
    };
  }
};
var getAnchor = function (name, imageAnchor) {
  return {
    name: "xdr:" + name,
    children: [{
      name: 'xdr:col',
      textNode: imageAnchor.col.toString()
    }, {
      name: 'xdr:colOff',
      textNode: imageAnchor.offsetX.toString()
    }, {
      name: 'xdr:row',
      textNode: imageAnchor.row.toString()
    }, {
      name: 'xdr:rowOff',
      textNode: imageAnchor.offsetY.toString()
    }]
  };
};
var getExt = function (image) {
  var children = [{
    name: 'a:ext',
    properties: {
      rawMap: {
        uri: '{FF2B5EF4-FFF2-40B4-BE49-F238E27FC236}'
      }
    },
    children: [{
      name: 'a16:creationId',
      properties: {
        rawMap: {
          id: '{822E6D20-D7BC-2841-A643-D49A6EF008A2}',
          'xmlns:a16': 'http://schemas.microsoft.com/office/drawing/2014/main'
        }
      }
    }]
  }];
  var recolor = image.recolor && image.recolor.toLowerCase();
  switch (recolor) {
    case 'grayscale':
    case 'sepia':
    case 'washout':
      children.push({
        name: 'a:ext',
        properties: {
          rawMap: {
            uri: '{C183D7F6-B498-43B3-948B-1728B52AA6E4}'
          }
        },
        children: [{
          name: 'adec:decorative',
          properties: {
            rawMap: {
              val: '0',
              'xmlns:adec': 'http://schemas.microsoft.com/office/drawing/2017/decorative'
            }
          }
        }]
      });
  }
  return {
    name: 'a:extLst',
    children: children
  };
};
var getNvPicPr = function (image, index) {
  return {
    name: 'xdr:nvPicPr',
    children: [{
      name: 'xdr:cNvPr',
      properties: {
        rawMap: {
          id: index,
          name: image.id,
          descr: image.altText != null ? image.altText : undefined
        }
      },
      children: [getExt(image)]
    }, {
      name: 'xdr:cNvPicPr',
      properties: {
        rawMap: {
          preferRelativeResize: '0'
        }
      },
      children: [{
        name: 'a:picLocks'
      }]
    }]
  };
};
var getColorDetails = function (color) {
  if (!color.saturation && !color.tint) {
    return;
  }
  var ret = [];
  if (color.saturation) {
    ret.push({
      name: 'a:satMod',
      properties: {
        rawMap: {
          val: color.saturation * 1000
        }
      }
    });
  }
  if (color.tint) {
    ret.push({
      name: 'a:tint',
      properties: {
        rawMap: {
          val: color.tint * 1000
        }
      }
    });
  }
  return ret;
};
var getDuoTone = function (primaryColor, secondaryColor) {
  return {
    name: 'a:duotone',
    children: [{
      name: 'a:prstClr',
      properties: {
        rawMap: {
          val: primaryColor.color
        }
      },
      children: getColorDetails(primaryColor)
    }, {
      name: 'a:srgbClr',
      properties: {
        rawMap: {
          val: secondaryColor.color
        }
      },
      children: getColorDetails(secondaryColor)
    }]
  };
};
var getBlipFill = function (image, index) {
  var blipChildren;
  if (image.transparency) {
    var transparency = Math.min(Math.max(image.transparency, 0), 100);
    blipChildren = [{
      name: 'a:alphaModFix',
      properties: {
        rawMap: {
          amt: 100000 - Math.round(transparency * 1000)
        }
      }
    }];
  }
  if (image.recolor) {
    if (!blipChildren) {
      blipChildren = [];
    }
    switch (image.recolor.toLocaleLowerCase()) {
      case 'grayscale':
        blipChildren.push({
          name: 'a:grayscl'
        });
        break;
      case 'sepia':
        blipChildren.push(getDuoTone({
          color: 'black'
        }, {
          color: 'D9C3A5',
          tint: 50,
          saturation: 180
        }));
        break;
      case 'washout':
        blipChildren.push({
          name: 'a:lum',
          properties: {
            rawMap: {
              bright: '70000',
              contrast: '-70000'
            }
          }
        });
        break;
    }
  }
  return {
    name: 'xdr:blipFill',
    children: [{
      name: 'a:blip',
      properties: {
        rawMap: {
          cstate: 'print',
          'r:embed': "rId" + index,
          'xmlns:r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'
        }
      },
      children: blipChildren
    }, {
      name: 'a:stretch',
      children: [{
        name: 'a:fillRect'
      }]
    }]
  };
};
var getSpPr = function (image, imageBoxSize) {
  var xfrm = {
    name: 'a:xfrm',
    children: [{
      name: 'a:off',
      properties: {
        rawMap: {
          x: 0,
          y: 0
        }
      }
    }, {
      name: 'a:ext',
      properties: {
        rawMap: {
          cx: imageBoxSize.width,
          cy: imageBoxSize.height
        }
      }
    }]
  };
  if (image.rotation) {
    var rotation = image.rotation;
    xfrm.properties = {
      rawMap: {
        rot: Math.min(Math.max(rotation, 0), 360) * 60000
      }
    };
  }
  var prstGeom = {
    name: 'a:prstGeom',
    properties: {
      rawMap: {
        prst: 'rect'
      }
    },
    children: [{
      name: 'a:avLst'
    }]
  };
  var ret = {
    name: 'xdr:spPr',
    children: [xfrm, prstGeom]
  };
  return ret;
};
var getImageBoxSize = function (image) {
  image.fitCell = !!image.fitCell || !image.width || !image.height;
  var _a = image.position,
    position = _a === void 0 ? {} : _a,
    fitCell = image.fitCell,
    _b = image.width,
    width = _b === void 0 ? 0 : _b,
    _c = image.height,
    height = _c === void 0 ? 0 : _c,
    totalHeight = image.totalHeight,
    totalWidth = image.totalWidth;
  var _d = position.offsetX,
    offsetX = _d === void 0 ? 0 : _d,
    _e = position.offsetY,
    offsetY = _e === void 0 ? 0 : _e,
    _f = position.row,
    row = _f === void 0 ? 1 : _f,
    _g = position.rowSpan,
    rowSpan = _g === void 0 ? 1 : _g,
    _h = position.column,
    column = _h === void 0 ? 1 : _h,
    _j = position.colSpan,
    colSpan = _j === void 0 ? 1 : _j;
  return {
    from: {
      row: row - 1,
      col: column - 1,
      offsetX: pixelsToEMU(offsetX),
      offsetY: pixelsToEMU(offsetY)
    },
    to: {
      row: row - 1 + (fitCell ? 1 : rowSpan - 1),
      col: column - 1 + (fitCell ? 1 : colSpan - 1),
      offsetX: pixelsToEMU(width + offsetX),
      offsetY: pixelsToEMU(height + offsetY)
    },
    height: pixelsToEMU(totalHeight || height),
    width: pixelsToEMU(totalWidth || width)
  };
};
var getPicture = function (image, currentIndex, worksheetImageIndex, imageBoxSize) {
  return {
    name: 'xdr:pic',
    children: [getNvPicPr(image, currentIndex + 1), getBlipFill(image, worksheetImageIndex + 1), getSpPr(image, imageBoxSize)]
  };
};
var drawingFactory = {
  getTemplate: function (config) {
    var sheetIndex = config.sheetIndex;
    var sheetImages = ExcelXlsxFactory.worksheetImages.get(sheetIndex);
    var sheetImageIds = ExcelXlsxFactory.worksheetImageIds.get(sheetIndex);
    var children = sheetImages.map(function (image, idx) {
      var boxSize = getImageBoxSize(image);
      return {
        name: 'xdr:twoCellAnchor',
        properties: {
          rawMap: {
            editAs: 'absolute'
          }
        },
        children: [getAnchor('from', boxSize.from), getAnchor('to', boxSize.to), getPicture(image, idx, sheetImageIds.get(image.id).index, boxSize), {
          name: 'xdr:clientData'
        }]
      };
    });
    return {
      name: 'xdr:wsDr',
      properties: {
        rawMap: {
          'xmlns:a': 'http://schemas.openxmlformats.org/drawingml/2006/main',
          'xmlns:xdr': 'http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing'
        }
      },
      children: children
    };
  }
};
var getColorChildren = function (props) {
  var type = props[0],
    innerType = props[1],
    val = props[2],
    lastClr = props[3];
  return {
    name: "a:" + type,
    children: [{
      name: "a:" + innerType,
      properties: {
        rawMap: {
          val: val,
          lastClr: lastClr
        }
      }
    }]
  };
};
var colorScheme = {
  getTemplate: function () {
    return {
      name: "a:clrScheme",
      properties: {
        rawMap: {
          name: "Office"
        }
      },
      children: [getColorChildren(['dk1', 'sysClr', 'windowText', '000000']), getColorChildren(['lt1', 'sysClr', 'window', 'FFFFFF']), getColorChildren(['dk2', 'srgbClr', '44546A']), getColorChildren(['lt2', 'srgbClr', 'E7E6E6']), getColorChildren(['accent1', 'srgbClr', '4472C4']), getColorChildren(['accent2', 'srgbClr', 'ED7D31']), getColorChildren(['accent3', 'srgbClr', 'A5A5A5']), getColorChildren(['accent4', 'srgbClr', 'FFC000']), getColorChildren(['accent5', 'srgbClr', '5B9BD5']), getColorChildren(['accent6', 'srgbClr', '70AD47']), getColorChildren(['hlink', 'srgbClr', '0563C1']), getColorChildren(['folHlink', 'srgbClr', '954F72'])]
    };
  }
};
var getFont = function (props) {
  var type = props[0],
    typeface = props[1],
    script = props[2],
    panose = props[3];
  return {
    name: "a:" + type,
    properties: {
      rawMap: {
        script: script,
        typeface: typeface,
        panose: panose
      }
    }
  };
};
var fontScheme = {
  getTemplate: function () {
    var utf8_encode = agGridCommunity._.utf8_encode;
    return {
      name: "a:fontScheme",
      properties: {
        rawMap: {
          name: "Office"
        }
      },
      children: [{
        name: 'a:majorFont',
        children: [getFont(['latin', 'Calibri Light', undefined, '020F0302020204030204']), getFont(['ea', '']), getFont(['cs', '']), getFont(['font', utf8_encode('游ゴシック Light'), 'Jpan']), getFont(['font', utf8_encode('맑은 고딕'), 'Hang']), getFont(['font', utf8_encode('等线 Light'), 'Hans']), getFont(['font', utf8_encode('新細明體'), 'Hant']), getFont(['font', 'Times New Roman', 'Arab']), getFont(['font', 'Times New Roman', 'Hebr']), getFont(['font', 'Tahoma', 'Thai']), getFont(['font', 'Nyala', 'Ethi']), getFont(['font', 'Vrinda', 'Beng']), getFont(['font', 'Shruti', 'Gujr']), getFont(['font', 'MoolBoran', 'Khmr']), getFont(['font', 'Tunga', 'Knda']), getFont(['font', 'Raavi', 'Guru']), getFont(['font', 'Euphemia', 'Cans']), getFont(['font', 'Plantagenet Cherokee', 'Cher']), getFont(['font', 'Microsoft Yi Baiti', 'Yiii']), getFont(['font', 'Microsoft Himalaya', 'Tibt']), getFont(['font', 'MV Boli', 'Thaa']), getFont(['font', 'Mangal', 'Deva']), getFont(['font', 'Gautami', 'Telu']), getFont(['font', 'Latha', 'Taml']), getFont(['font', 'Estrangelo Edessa', 'Syrc']), getFont(['font', 'Kalinga', 'Orya']), getFont(['font', 'Kartika', 'Mlym']), getFont(['font', 'DokChampa', 'Laoo']), getFont(['font', 'Iskoola Pota', 'Sinh']), getFont(['font', 'Mongolian Baiti', 'Mong']), getFont(['font', 'Times New Roman', 'Viet']), getFont(['font', 'Microsoft Uighur', 'Uigh']), getFont(['font', 'Sylfaen', 'Geor']), getFont(['font', 'Arial', 'Armn']), getFont(['font', 'Leelawadee UI', 'Bugi']), getFont(['font', 'Microsoft JhengHei', 'Bopo']), getFont(['font', 'Javanese Text', 'Java']), getFont(['font', 'Segoe UI', 'Lisu']), getFont(['font', 'Myanmar Text', 'Mymr']), getFont(['font', 'Ebrima', 'Nkoo']), getFont(['font', 'Nirmala UI', 'Olck']), getFont(['font', 'Ebrima', 'Osma']), getFont(['font', 'Phagspa', 'Phag']), getFont(['font', 'Estrangelo Edessa', 'Syrn']), getFont(['font', 'Estrangelo Edessa', 'Syrj']), getFont(['font', 'Estrangelo Edessa', 'Syre']), getFont(['font', 'Nirmala UI', 'Sora']), getFont(['font', 'Microsoft Tai Le', 'Tale']), getFont(['font', 'Microsoft New Tai Lue', 'Talu']), getFont(['font', 'Ebrima', 'Tfng'])]
      }, {
        name: 'a:minorFont',
        children: [getFont(['latin', 'Calibri', undefined, '020F0502020204030204']), getFont(['ea', '']), getFont(['cs', '']), getFont(['font', utf8_encode('游ゴシック'), 'Jpan']), getFont(['font', utf8_encode('맑은 고딕'), 'Hang']), getFont(['font', utf8_encode('等线'), 'Hans']), getFont(['font', utf8_encode('新細明體'), 'Hant']), getFont(['font', 'Arial', 'Arab']), getFont(['font', 'Arial', 'Hebr']), getFont(['font', 'Tahoma', 'Thai']), getFont(['font', 'Nyala', 'Ethi']), getFont(['font', 'Vrinda', 'Beng']), getFont(['font', 'Shruti', 'Gujr']), getFont(['font', 'DaunPenh', 'Khmr']), getFont(['font', 'Tunga', 'Knda']), getFont(['font', 'Raavi', 'Guru']), getFont(['font', 'Euphemia', 'Cans']), getFont(['font', 'Plantagenet Cherokee', 'Cher']), getFont(['font', 'Microsoft Yi Baiti', 'Yiii']), getFont(['font', 'Microsoft Himalaya', 'Tibt']), getFont(['font', 'MV Boli', 'Thaa']), getFont(['font', 'Mangal', 'Deva']), getFont(['font', 'Gautami', 'Telu']), getFont(['font', 'Latha', 'Taml']), getFont(['font', 'Estrangelo Edessa', 'Syrc']), getFont(['font', 'Kalinga', 'Orya']), getFont(['font', 'Kartika', 'Mlym']), getFont(['font', 'DokChampa', 'Laoo']), getFont(['font', 'Iskoola Pota', 'Sinh']), getFont(['font', 'Mongolian Baiti', 'Mong']), getFont(['font', 'Arial', 'Viet']), getFont(['font', 'Microsoft Uighur', 'Uigh']), getFont(['font', 'Sylfaen', 'Geor']), getFont(['font', 'Arial', 'Armn']), getFont(['font', 'Leelawadee UI', 'Bugi']), getFont(['font', 'Microsoft JhengHei', 'Bopo']), getFont(['font', 'Javanese Text', 'Java']), getFont(['font', 'Segoe UI', 'Lisu']), getFont(['font', 'Myanmar Text', 'Mymr']), getFont(['font', 'Ebrima', 'Nkoo']), getFont(['font', 'Nirmala UI', 'Olck']), getFont(['font', 'Ebrima', 'Osma']), getFont(['font', 'Phagspa', 'Phag']), getFont(['font', 'Estrangelo Edessa', 'Syrn']), getFont(['font', 'Estrangelo Edessa', 'Syrj']), getFont(['font', 'Estrangelo Edessa', 'Syre']), getFont(['font', 'Nirmala UI', 'Sora']), getFont(['font', 'Microsoft Tai Le', 'Tale']), getFont(['font', 'Microsoft New Tai Lue', 'Talu']), getFont(['font', 'Ebrima', 'Tfng'])]
      }]
    };
  }
};
var getPropertyVal = function (name, val, children) {
  return {
    name: "a:" + name,
    properties: {
      rawMap: {
        val: val
      }
    },
    children: children
  };
};
var getGs = function (props) {
  var pos = props[0],
    schemeColor = props[1],
    satMod = props[2],
    lumMod = props[3],
    tint = props[4],
    shade = props[5];
  var children = [];
  children.push(getPropertyVal('satMod', satMod));
  if (lumMod) {
    children.push(getPropertyVal('lumMod', lumMod));
  }
  if (tint) {
    children.push(getPropertyVal('tint', tint));
  }
  if (shade) {
    children.push(getPropertyVal('shade', shade));
  }
  return {
    name: 'a:gs',
    properties: {
      rawMap: {
        pos: pos
      }
    },
    children: [{
      name: 'a:schemeClr',
      properties: {
        rawMap: {
          val: schemeColor
        }
      },
      children: children
    }]
  };
};
var getSolidFill = function (val, children) {
  return {
    name: 'a:solidFill',
    children: [getPropertyVal('schemeClr', val, children)]
  };
};
var getGradFill = function (props) {
  var rotWithShape = props[0],
    gs1 = props[1],
    gs2 = props[2],
    gs3 = props[3],
    lin = props[4];
  var ang = lin[0],
    scaled = lin[1];
  return {
    name: 'a:gradFill',
    properties: {
      rawMap: {
        rotWithShape: rotWithShape
      }
    },
    children: [{
      name: 'a:gsLst',
      children: [getGs(gs1), getGs(gs2), getGs(gs3)]
    }, {
      name: 'a:lin',
      properties: {
        rawMap: {
          ang: ang,
          scaled: scaled
        }
      }
    }]
  };
};
var getLine = function (props) {
  var w = props[0],
    cap = props[1],
    cmpd = props[2],
    algn = props[3];
  return {
    name: 'a:ln',
    properties: {
      rawMap: {
        w: w,
        cap: cap,
        cmpd: cmpd,
        algn: algn
      }
    },
    children: [getSolidFill('phClr'), getPropertyVal('prstDash', 'solid'), {
      name: 'a:miter',
      properties: {
        rawMap: {
          lim: '800000'
        }
      }
    }]
  };
};
var getEffectStyle = function (shadow) {
  var children = [];
  if (shadow) {
    var blurRad = shadow[0],
      dist = shadow[1],
      dir = shadow[2],
      algn = shadow[3],
      rotWithShape = shadow[4];
    children.push({
      name: 'a:outerShdw',
      properties: {
        rawMap: {
          blurRad: blurRad,
          dist: dist,
          dir: dir,
          algn: algn,
          rotWithShape: rotWithShape
        }
      },
      children: [getPropertyVal('srgbClr', '000000', [getPropertyVal('alpha', '63000')])]
    });
  }
  return {
    name: 'a:effectStyle',
    children: [agGridCommunity._.assign({}, {
      name: 'a:effectLst'
    }, children.length ? {
      children: children
    } : {})]
  };
};
var getFillStyleList = function () {
  return {
    name: 'a:fillStyleLst',
    children: [getSolidFill('phClr'), getGradFill(['1', ['0', 'phClr', '105000', '110000', '67000'], ['50000', 'phClr', '103000', '105000', '73000'], ['100000', 'phClr', '109000', '105000', '81000'], ['5400000', '0']]), getGradFill(['1', ['0', 'phClr', '103000', '102000', '94000'], ['50000', 'phClr', '110000', '100000', undefined, '100000'], ['100000', 'phClr', '120000', '99000', undefined, '78000'], ['5400000', '0']])]
  };
};
var getLineStyleList = function () {
  return {
    name: 'a:lnStyleLst',
    children: [getLine(['6350', 'flat', 'sng', 'ctr']), getLine(['12700', 'flat', 'sng', 'ctr']), getLine(['19050', 'flat', 'sng', 'ctr'])]
  };
};
var getEffectStyleList = function () {
  return {
    name: 'a:effectStyleLst',
    children: [getEffectStyle(), getEffectStyle(), getEffectStyle(['57150', '19050', '5400000', 'ctr', '0'])]
  };
};
var getBgFillStyleList = function () {
  return {
    name: 'a:bgFillStyleLst',
    children: [getSolidFill('phClr'), getSolidFill('phClr', [getPropertyVal('tint', '95000'), getPropertyVal('satMod', '170000')]), getGradFill(['1', ['0', 'phClr', '150000', '102000', '93000', '98000'], ['50000', 'phClr', '130000', '103000', '98000', '90000'], ['100000', 'phClr', '120000', undefined, undefined, '63000'], ['5400000', '0']])]
  };
};
var formatScheme = {
  getTemplate: function () {
    return {
      name: "a:fmtScheme",
      properties: {
        rawMap: {
          name: "Office"
        }
      },
      children: [getFillStyleList(), getLineStyleList(), getEffectStyleList(), getBgFillStyleList()]
    };
  }
};
var themeElements = {
  getTemplate: function () {
    return {
      name: "a:themeElements",
      children: [colorScheme.getTemplate(), fontScheme.getTemplate(), formatScheme.getTemplate()]
    };
  }
};
var officeTheme = {
  getTemplate: function () {
    return {
      name: "a:theme",
      properties: {
        prefixedAttributes: [{
          prefix: "xmlns:",
          map: {
            a: "http://schemas.openxmlformats.org/drawingml/2006/main"
          }
        }],
        rawMap: {
          name: "Office Theme"
        }
      },
      children: [themeElements.getTemplate(), {
        name: 'a:objectDefaults'
      }, {
        name: 'a:extraClrSchemeLst'
      }]
    };
  }
};
var buildSharedString = function (strMap) {
  var ret = [];
  strMap.forEach(function (val, key) {
    var textNode = key.toString();
    var child = {
      name: 't',
      textNode: agGridCommunity._.utf8_encode(agGridCommunity._.escapeString(textNode))
    };
    // if we have leading or trailing spaces, instruct Excel not to trim them
    var preserveSpaces = textNode.replace(/^\s*|\s*$/g, '').length !== textNode.length;
    if (preserveSpaces) {
      child.properties = {
        rawMap: {
          "xml:space": "preserve"
        }
      };
    }
    ret.push({
      name: 'si',
      children: [child]
    });
  });
  return ret;
};
var sharedStrings = {
  getTemplate: function (strings) {
    return {
      name: "sst",
      properties: {
        rawMap: {
          xmlns: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',
          count: strings.size,
          uniqueCount: strings.size
        }
      },
      children: buildSharedString(strings)
    };
  }
};
var numberFormatFactory = {
  getTemplate: function (numberFormat) {
    var formatCode = numberFormat.formatCode,
      numFmtId = numberFormat.numFmtId;
    return {
      name: "numFmt",
      properties: {
        rawMap: {
          formatCode: formatCode,
          numFmtId: numFmtId
        }
      }
    };
  }
};
var numberFormatsFactory = {
  getTemplate: function (numberFormats) {
    return {
      name: "numFmts",
      properties: {
        rawMap: {
          count: numberFormats.length
        }
      },
      children: numberFormats.map(numberFormatFactory.getTemplate)
    };
  }
};
var fontFactory = {
  getTemplate: function (font) {
    var size = font.size,
      colorTheme = font.colorTheme,
      _a = font.color,
      color = _a === void 0 ? 'FF000000' : _a,
      _b = font.fontName,
      fontName = _b === void 0 ? 'Calibri' : _b,
      family = font.family,
      scheme = font.scheme,
      italic = font.italic,
      bold = font.bold,
      strikeThrough = font.strikeThrough,
      outline = font.outline,
      shadow = font.shadow,
      underline = font.underline,
      verticalAlign = font.verticalAlign;
    var children = [{
      name: 'sz',
      properties: {
        rawMap: {
          val: size
        }
      }
    }, {
      name: 'color',
      properties: {
        rawMap: {
          theme: colorTheme,
          rgb: color
        }
      }
    }, {
      name: 'name',
      properties: {
        rawMap: {
          val: fontName
        }
      }
    }];
    if (family) {
      children.push({
        name: 'family',
        properties: {
          rawMap: {
            val: family
          }
        }
      });
    }
    if (scheme) {
      children.push({
        name: 'scheme',
        properties: {
          rawMap: {
            val: scheme
          }
        }
      });
    }
    if (italic) {
      children.push({
        name: 'i'
      });
    }
    if (bold) {
      children.push({
        name: 'b'
      });
    }
    if (strikeThrough) {
      children.push({
        name: 'strike'
      });
    }
    if (outline) {
      children.push({
        name: 'outline'
      });
    }
    if (shadow) {
      children.push({
        name: 'shadow'
      });
    }
    if (underline) {
      children.push({
        name: 'u',
        properties: {
          rawMap: {
            val: underline
          }
        }
      });
    }
    if (verticalAlign) {
      children.push({
        name: 'vertAlign',
        properties: {
          rawMap: {
            val: verticalAlign
          }
        }
      });
    }
    return {
      name: "font",
      children: children
    };
  }
};
var fontsFactory = {
  getTemplate: function (fonts) {
    return {
      name: "fonts",
      properties: {
        rawMap: {
          count: fonts.length
        }
      },
      children: fonts.map(fontFactory.getTemplate)
    };
  }
};
var fillFactory = {
  getTemplate: function (fill) {
    var patternType = fill.patternType,
      fgTheme = fill.fgTheme,
      fgTint = fill.fgTint,
      fgRgb = fill.fgRgb,
      bgRgb = fill.bgRgb,
      bgIndexed = fill.bgIndexed;
    var pf = {
      name: 'patternFill',
      properties: {
        rawMap: {
          patternType: patternType
        }
      }
    };
    if (fgTheme || fgTint || fgRgb) {
      pf.children = [{
        name: 'fgColor',
        properties: {
          rawMap: {
            theme: fgTheme,
            tint: fgTint,
            rgb: fgRgb
          }
        }
      }];
    }
    if (bgIndexed) {
      if (!pf.children) {
        pf.children = [];
      }
      pf.children.push({
        name: 'bgColor',
        properties: {
          rawMap: {
            indexed: bgIndexed,
            rgb: bgRgb
          }
        }
      });
    }
    return {
      name: "fill",
      children: [pf]
    };
  }
};
var fillsFactory = {
  getTemplate: function (fills) {
    return {
      name: "fills",
      properties: {
        rawMap: {
          count: fills.length
        }
      },
      children: fills.map(fillFactory.getTemplate)
    };
  }
};
var getWeightName = function (value) {
  switch (value) {
    case 1:
      return 'thin';
    case 2:
      return 'medium';
    case 3:
      return 'thick';
    default:
      return 'hair';
  }
};
var mappedBorderNames = {
  None: 'None',
  Dot: 'Dotted',
  Dash: 'Dashed',
  Double: 'Double',
  DashDot: 'DashDot',
  DashDotDot: 'DashDotDot',
  SlantDashDot: 'SlantDashDot'
};
var mediumBorders = ['Dashed', 'DashDot', 'DashDotDot'];
var colorMap = {
  None: 'none',
  Solid: 'solid',
  Gray50: 'mediumGray',
  Gray75: 'darkGray',
  Gray25: 'lightGray',
  HorzStripe: 'darkHorizontal',
  VertStripe: 'darkVertical',
  ReverseDiagStripe: 'darkDown',
  DiagStripe: 'darkUp',
  DiagCross: 'darkGrid',
  ThickDiagCross: 'darkTrellis',
  ThinHorzStripe: 'lightHorizontal',
  ThinVertStripe: 'lightVertical',
  ThinReverseDiagStripe: 'lightDown',
  ThinDiagStripe: 'lightUp',
  ThinHorzCross: 'lightGrid',
  ThinDiagCross: 'lightTrellis',
  Gray125: 'gray125',
  Gray0625: 'gray0625'
};
var horizontalAlignmentMap = {
  Automatic: 'general',
  Left: 'left',
  Center: 'center',
  Right: 'right',
  Fill: 'fill',
  Justify: 'justify',
  CenterAcrossSelection: 'centerContinuous',
  Distributed: 'distributed',
  JustifyDistributed: 'justify'
};
var verticalAlignmentMap = {
  Automatic: undefined,
  Top: 'top',
  Bottom: 'bottom',
  Center: 'center',
  Justify: 'justify',
  Distributed: 'distributed',
  JustifyDistributed: 'justify'
};
var convertLegacyPattern = function (name) {
  if (!name) {
    return 'none';
  }
  return colorMap[name] || name;
};
var convertLegacyColor = function (color) {
  if (color == undefined) {
    return color;
  }
  if (color.charAt(0) === '#') {
    color = color.substr(1);
  }
  return color.length === 6 ? 'FF' + color : color;
};
var convertLegacyBorder = function (type, weight) {
  if (!type) {
    return 'thin';
  }
  // Legacy Types are: None, Continuous, Dash, Dot, DashDot, DashDotDot, SlantDashDot, and Double
  // Weight represents: 0—Hairline, 1—Thin , 2—Medium, 3—Thick
  // New types: none, thin, medium, dashed, dotted, thick, double, hair, mediumDashed, dashDot, mediumDashDot,
  // dashDotDot, mediumDashDotDot, slantDashDot
  var namedWeight = getWeightName(weight);
  var mappedName = mappedBorderNames[type];
  if (type === 'Continuous') {
    return namedWeight;
  }
  if (namedWeight === 'medium' && mediumBorders.indexOf(mappedName) !== -1) {
    return "medium" + mappedName;
  }
  return mappedName.charAt(0).toLowerCase() + mappedName.substr(1);
};
var convertLegacyHorizontalAlignment = function (alignment) {
  return horizontalAlignmentMap[alignment] || 'general';
};
var convertLegacyVerticalAlignment = function (alignment) {
  return verticalAlignmentMap[alignment] || undefined;
};
var getBorderColor = function (color) {
  return {
    name: 'color',
    properties: {
      rawMap: {
        rgb: convertLegacyColor(color || '#000000')
      }
    }
  };
};
var borderFactory = {
  getTemplate: function (border) {
    var left = border.left,
      right = border.right,
      top = border.top,
      bottom = border.bottom,
      diagonal = border.diagonal;
    var leftChildren = left ? [getBorderColor(left.color)] : undefined;
    var rightChildren = right ? [getBorderColor(right.color)] : undefined;
    var topChildren = top ? [getBorderColor(top.color)] : undefined;
    var bottomChildren = bottom ? [getBorderColor(bottom.color)] : undefined;
    var diagonalChildren = diagonal ? [getBorderColor(diagonal.color)] : undefined;
    return {
      name: 'border',
      children: [{
        name: 'left',
        properties: {
          rawMap: {
            style: left && left.style
          }
        },
        children: leftChildren
      }, {
        name: 'right',
        properties: {
          rawMap: {
            style: right && right.style
          }
        },
        children: rightChildren
      }, {
        name: 'top',
        properties: {
          rawMap: {
            style: top && top.style
          }
        },
        children: topChildren
      }, {
        name: 'bottom',
        properties: {
          rawMap: {
            style: bottom && bottom.style
          }
        },
        children: bottomChildren
      }, {
        name: 'diagonal',
        properties: {
          rawMap: {
            style: diagonal && diagonal.style
          }
        },
        children: diagonalChildren
      }]
    };
  }
};
var bordersFactory = {
  getTemplate: function (borders) {
    return {
      name: "borders",
      properties: {
        rawMap: {
          count: borders.length
        }
      },
      children: borders.map(borderFactory.getTemplate)
    };
  }
};
var getReadingOrderId = function (readingOrder) {
  var order = ['Context', 'LeftToRight', 'RightToLeft'];
  var pos = order.indexOf(readingOrder);
  return Math.max(pos, 0);
};
var alignmentFactory = {
  getTemplate: function (alignment) {
    var horizontal = alignment.horizontal,
      indent = alignment.indent,
      readingOrder = alignment.readingOrder,
      rotate = alignment.rotate,
      shrinkToFit = alignment.shrinkToFit,
      vertical = alignment.vertical,
      wrapText = alignment.wrapText;
    return {
      name: 'alignment',
      properties: {
        rawMap: {
          horizontal: horizontal && convertLegacyHorizontalAlignment(horizontal),
          indent: indent,
          readingOrder: readingOrder && getReadingOrderId(readingOrder),
          textRotation: rotate,
          shrinkToFit: shrinkToFit,
          vertical: vertical && convertLegacyVerticalAlignment(vertical),
          wrapText: wrapText
        }
      }
    };
  }
};
var protectionFactory = {
  getTemplate: function (protection) {
    var locked = protection.protected === false ? 0 : 1;
    var hidden = protection.hideFormula === true ? 1 : 0;
    return {
      name: 'protection',
      properties: {
        rawMap: {
          hidden: hidden,
          locked: locked
        }
      }
    };
  }
};
var xfFactory = {
  getTemplate: function (xf) {
    var alignment = xf.alignment,
      borderId = xf.borderId,
      fillId = xf.fillId,
      fontId = xf.fontId,
      numFmtId = xf.numFmtId,
      protection = xf.protection,
      xfId = xf.xfId;
    var children = [];
    if (alignment) {
      children.push(alignmentFactory.getTemplate(alignment));
    }
    if (protection) {
      children.push(protectionFactory.getTemplate(protection));
    }
    return {
      name: "xf",
      properties: {
        rawMap: {
          applyAlignment: alignment ? 1 : undefined,
          applyProtection: protection ? 1 : undefined,
          applyBorder: borderId ? 1 : undefined,
          applyFill: fillId ? 1 : undefined,
          borderId: borderId,
          fillId: fillId,
          applyFont: fontId ? 1 : undefined,
          fontId: fontId,
          applyNumberFormat: numFmtId ? 1 : undefined,
          numFmtId: numFmtId,
          xfId: xfId
        }
      },
      children: children.length ? children : undefined
    };
  }
};
var cellStylesXfsFactory = {
  getTemplate: function (xf) {
    return {
      name: "cellStyleXfs",
      properties: {
        rawMap: {
          count: xf.length
        }
      },
      children: xf.map(xfFactory.getTemplate)
    };
  }
};
var cellXfsFactory = {
  getTemplate: function (xf) {
    return {
      name: "cellXfs",
      properties: {
        rawMap: {
          count: xf.length
        }
      },
      children: xf.map(xfFactory.getTemplate)
    };
  }
};
var borderFactory$1 = {
  getTemplate: function (cellStyle) {
    var builtinId = cellStyle.builtinId,
      name = cellStyle.name,
      xfId = cellStyle.xfId;
    return {
      name: "cellStyle",
      properties: {
        rawMap: {
          builtinId: builtinId,
          name: name,
          xfId: xfId
        }
      }
    };
  }
};
var cellStylesFactory = {
  getTemplate: function (cellStyles) {
    return {
      name: "cellStyles",
      properties: {
        rawMap: {
          count: cellStyles.length
        }
      },
      children: cellStyles.map(borderFactory$1.getTemplate)
    };
  }
};
var __assign$1 =  false || function () {
  __assign$1 = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$1.apply(this, arguments);
};
var stylesMap;
var registeredNumberFmts;
var registeredFonts;
var registeredFills;
var registeredBorders;
var registeredCellStyleXfs;
var registeredCellXfs;
var registeredCellStyles;
var resetStylesheetValues = function () {
  stylesMap = {
    base: 0
  };
  registeredNumberFmts = [];
  registeredFonts = [{
    fontName: 'Calibri',
    colorTheme: '1',
    family: '2',
    scheme: 'minor'
  }];
  registeredFills = [{
    patternType: 'none'
  }, {
    patternType: 'gray125'
  }];
  registeredBorders = [{
    left: undefined,
    right: undefined,
    top: undefined,
    bottom: undefined,
    diagonal: undefined
  }];
  registeredCellStyleXfs = [{
    borderId: 0,
    fillId: 0,
    fontId: 0,
    numFmtId: 0
  }];
  registeredCellXfs = [{
    borderId: 0,
    fillId: 0,
    fontId: 0,
    numFmtId: 0,
    xfId: 0
  }];
  registeredCellStyles = [{
    builtinId: 0,
    name: 'Normal',
    xfId: 0
  }];
};
var registerFill = function (fill) {
  var convertedPattern = convertLegacyPattern(fill.pattern);
  var convertedFillColor = convertLegacyColor(fill.color);
  var convertedPatternColor = convertLegacyColor(fill.patternColor);
  var pos = agGridCommunity._.findIndex(registeredFills, function (currentFill) {
    var patternType = currentFill.patternType,
      fgRgb = currentFill.fgRgb,
      bgRgb = currentFill.bgRgb;
    if (patternType != convertedPattern || fgRgb != convertedFillColor || bgRgb != convertedPatternColor) {
      return false;
    }
    return true;
  });
  if (pos === -1) {
    pos = registeredFills.length;
    registeredFills.push({
      patternType: convertedPattern,
      fgRgb: convertedFillColor,
      bgRgb: convertedPatternColor
    });
  }
  return pos;
};
var registerNumberFmt = function (format) {
  format = agGridCommunity._.utf8_encode(format);
  if (numberFormatMap[format]) {
    return numberFormatMap[format];
  }
  var pos = agGridCommunity._.findIndex(registeredNumberFmts, function (currentFormat) {
    return currentFormat.formatCode === format;
  });
  if (pos === -1) {
    pos = registeredNumberFmts.length + 164;
    registeredNumberFmts.push({
      formatCode: format,
      numFmtId: pos
    });
  } else {
    pos = registeredNumberFmts[pos].numFmtId;
  }
  return pos;
};
var registerBorders = function (borders) {
  var borderBottom = borders.borderBottom,
    borderTop = borders.borderTop,
    borderLeft = borders.borderLeft,
    borderRight = borders.borderRight;
  var bottomStyle;
  var topStyle;
  var leftStyle;
  var rightStyle;
  var bottomColor;
  var topColor;
  var leftColor;
  var rightColor;
  if (borderLeft) {
    leftStyle = convertLegacyBorder(borderLeft.lineStyle, borderLeft.weight);
    leftColor = convertLegacyColor(borderLeft.color);
  }
  if (borderRight) {
    rightStyle = convertLegacyBorder(borderRight.lineStyle, borderRight.weight);
    rightColor = convertLegacyColor(borderRight.color);
  }
  if (borderBottom) {
    bottomStyle = convertLegacyBorder(borderBottom.lineStyle, borderBottom.weight);
    bottomColor = convertLegacyColor(borderBottom.color);
  }
  if (borderTop) {
    topStyle = convertLegacyBorder(borderTop.lineStyle, borderTop.weight);
    topColor = convertLegacyColor(borderTop.color);
  }
  var pos = agGridCommunity._.findIndex(registeredBorders, function (currentBorder) {
    var left = currentBorder.left,
      right = currentBorder.right,
      top = currentBorder.top,
      bottom = currentBorder.bottom;
    if (!left && (leftStyle || leftColor)) {
      return false;
    }
    if (!right && (rightStyle || rightColor)) {
      return false;
    }
    if (!top && (topStyle || topColor)) {
      return false;
    }
    if (!bottom && (bottomStyle || bottomColor)) {
      return false;
    }
    var _a = left || {},
      clS = _a.style,
      clC = _a.color;
    var _b = right || {},
      crS = _b.style,
      crC = _b.color;
    var _c = top || {},
      ctS = _c.style,
      ctC = _c.color;
    var _d = bottom || {},
      cbS = _d.style,
      cbC = _d.color;
    if (clS != leftStyle || clC != leftColor) {
      return false;
    }
    if (crS != rightStyle || crC != rightColor) {
      return false;
    }
    if (ctS != topStyle || ctC != topColor) {
      return false;
    }
    if (cbS != bottomStyle || cbC != bottomColor) {
      return false;
    }
    return true;
  });
  if (pos === -1) {
    pos = registeredBorders.length;
    registeredBorders.push({
      left: {
        style: leftStyle,
        color: leftColor
      },
      right: {
        style: rightStyle,
        color: rightColor
      },
      top: {
        style: topStyle,
        color: topColor
      },
      bottom: {
        style: bottomStyle,
        color: bottomColor
      },
      diagonal: {
        style: undefined,
        color: undefined
      }
    });
  }
  return pos;
};
var registerFont = function (font) {
  var _a = font.fontName,
    name = _a === void 0 ? 'Calibri' : _a,
    color = font.color,
    size = font.size,
    bold = font.bold,
    italic = font.italic,
    outline = font.outline,
    shadow = font.shadow,
    strikeThrough = font.strikeThrough,
    underline = font.underline,
    family = font.family,
    verticalAlign = font.verticalAlign;
  var utf8Name = name ? agGridCommunity._.utf8_encode(name) : name;
  var convertedColor = convertLegacyColor(color);
  var familyId = getFontFamilyId(family);
  var convertedUnderline = underline ? underline.toLocaleLowerCase() : undefined;
  var convertedVerticalAlign = verticalAlign ? verticalAlign.toLocaleLowerCase() : undefined;
  var pos = agGridCommunity._.findIndex(registeredFonts, function (currentFont) {
    if (currentFont.fontName != utf8Name || currentFont.color != convertedColor || currentFont.size != size || currentFont.bold != bold || currentFont.italic != italic || currentFont.outline != outline || currentFont.shadow != shadow || currentFont.strikeThrough != strikeThrough || currentFont.underline != convertedUnderline || currentFont.verticalAlign != convertedVerticalAlign ||
    // @ts-ignore
    currentFont.family != familyId) {
      return false;
    }
    return true;
  });
  if (pos === -1) {
    pos = registeredFonts.length;
    registeredFonts.push({
      fontName: utf8Name,
      color: convertedColor,
      size: size,
      bold: bold,
      italic: italic,
      outline: outline,
      shadow: shadow,
      strikeThrough: strikeThrough,
      underline: convertedUnderline,
      verticalAlign: convertedVerticalAlign,
      family: familyId != null ? familyId.toString() : undefined
    });
  }
  return pos;
};
var registerStyle = function (config) {
  var id = config.id,
    alignment = config.alignment,
    borders = config.borders,
    font = config.font,
    interior = config.interior,
    numberFormat = config.numberFormat,
    protection = config.protection;
  var currentFill = 0;
  var currentBorder = 0;
  var currentFont = 0;
  var currentNumberFmt = 0;
  if (!id || stylesMap[id] != undefined) {
    return;
  }
  if (interior) {
    currentFill = registerFill(interior);
  }
  if (borders) {
    currentBorder = registerBorders(borders);
  }
  if (font) {
    currentFont = registerFont(font);
  }
  if (numberFormat) {
    currentNumberFmt = registerNumberFmt(numberFormat.format);
  }
  stylesMap[id] = registeredCellXfs.length;
  registeredCellXfs.push({
    alignment: alignment,
    borderId: currentBorder || 0,
    fillId: currentFill || 0,
    fontId: currentFont || 0,
    numFmtId: currentNumberFmt || 0,
    protection: protection,
    xfId: 0
  });
};
var stylesheetFactory = {
  getTemplate: function (defaultFontSize) {
    var numberFormats = numberFormatsFactory.getTemplate(registeredNumberFmts);
    var fonts = fontsFactory.getTemplate(registeredFonts.map(function (font) {
      return __assign$1(__assign$1({}, font), {
        size: font.size != null ? font.size : defaultFontSize
      });
    }));
    var fills = fillsFactory.getTemplate(registeredFills);
    var borders = bordersFactory.getTemplate(registeredBorders);
    var cellStylesXfs = cellStylesXfsFactory.getTemplate(registeredCellStyleXfs);
    var cellXfs = cellXfsFactory.getTemplate(registeredCellXfs);
    var cellStyles = cellStylesFactory.getTemplate(registeredCellStyles);
    resetStylesheetValues();
    return {
      name: 'styleSheet',
      properties: {
        rawMap: {
          'mc:Ignorable': 'x14ac x16r2 xr',
          'xmlns': 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',
          'xmlns:mc': 'http://schemas.openxmlformats.org/markup-compatibility/2006',
          'xmlns:x14ac': 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac',
          'xmlns:x16r2': 'http://schemas.microsoft.com/office/spreadsheetml/2015/02/main',
          'xmlns:xr': 'http://schemas.microsoft.com/office/spreadsheetml/2014/revision'
        }
      },
      children: [numberFormats, fonts, fills, borders, cellStylesXfs, cellXfs, cellStyles, {
        name: 'tableStyles',
        properties: {
          rawMap: {
            count: 0,
            defaultPivotStyle: 'PivotStyleLight16',
            defaultTableStyle: 'TableStyleMedium2'
          }
        }
      }]
    };
  }
};
var getStyleId = function (name) {
  return stylesMap[name] || 0;
};
var registerStyles = function (styles) {
  resetStylesheetValues();
  styles.forEach(registerStyle);
};
var sheetFactory = {
  getTemplate: function (name, idx) {
    var sheetId = (idx + 1).toString();
    return {
      name: "sheet",
      properties: {
        rawMap: {
          "name": name,
          "sheetId": sheetId,
          "r:id": "rId" + sheetId
        }
      }
    };
  }
};
var sheetsFactory = {
  getTemplate: function (names) {
    return {
      name: "sheets",
      children: names.map(sheetFactory.getTemplate)
    };
  }
};
var workbookFactory = {
  getTemplate: function (names) {
    return {
      name: "workbook",
      properties: {
        prefixedAttributes: [{
          prefix: "xmlns:",
          map: {
            r: "http://schemas.openxmlformats.org/officeDocument/2006/relationships"
          }
        }],
        rawMap: {
          xmlns: "http://schemas.openxmlformats.org/spreadsheetml/2006/main"
        }
      },
      children: [sheetsFactory.getTemplate(names)]
    };
  }
};

// https://docs.microsoft.com/en-us/office/troubleshoot/excel/determine-column-widths
var getExcelCellWidth = function (width) {
  return Math.ceil((width - 12) / 7 + 1);
};
var columnFactory = {
  getTemplate: function (config) {
    var min = config.min,
      max = config.max,
      s = config.s,
      width = config.width,
      hidden = config.hidden,
      bestFit = config.bestFit;
    var excelWidth = 1;
    var customWidth = '0';
    if (width > 1) {
      excelWidth = getExcelCellWidth(width);
      customWidth = '1';
    }
    return {
      name: 'col',
      properties: {
        rawMap: {
          min: min,
          max: max,
          width: excelWidth,
          style: s,
          hidden: hidden ? '1' : '0',
          bestFit: bestFit ? '1' : '0',
          customWidth: customWidth
        }
      }
    };
  }
};
var convertLegacyType = function (type) {
  var t = type.charAt(0).toLowerCase();
  return t === 's' ? 'inlineStr' : t;
};
var cellFactory = {
  getTemplate: function (config) {
    var ref = config.ref,
      data = config.data,
      styleId = config.styleId;
    var type = data.type,
      value = data.value;
    var convertedType = type;
    if (type === 'f') {
      convertedType = 'str';
    } else if (type.charAt(0) === type.charAt(0).toUpperCase()) {
      convertedType = convertLegacyType(type);
    }
    var obj = {
      name: 'c',
      properties: {
        rawMap: {
          r: ref,
          t: convertedType === 'empty' ? undefined : convertedType,
          s: styleId ? getStyleId(styleId) : undefined
        }
      }
    };
    if (convertedType === 'empty') {
      return obj;
    }
    var children;
    if (convertedType === 'str' && type === 'f') {
      children = [{
        name: 'f',
        textNode: value
      }];
    } else if (convertedType === 'inlineStr') {
      children = [{
        name: 'is',
        children: [{
          name: 't',
          textNode: agGridCommunity._.escapeString(agGridCommunity._.utf8_encode(value))
        }]
      }];
    } else {
      children = [{
        name: 'v',
        textNode: value
      }];
    }
    return agGridCommunity._.assign({}, obj, {
      children: children
    });
  }
};
var __spreadArrays$3 =  false || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
};
var addEmptyCells = function (cells, rowIdx) {
  var mergeMap = [];
  var posCounter = 0;
  for (var i = 0; i < cells.length; i++) {
    var cell = cells[i];
    if (cell.mergeAcross) {
      mergeMap.push({
        pos: i,
        excelPos: posCounter
      });
      posCounter += cell.mergeAcross;
    }
    posCounter++;
  }
  if (mergeMap.length) {
    for (var i = mergeMap.length - 1; i >= 0; i--) {
      var mergedCells = [];
      var cell = cells[mergeMap[i].pos];
      for (var j = 1; j <= cell.mergeAcross; j++) {
        mergedCells.push({
          ref: "" + getExcelColumnName(mergeMap[i].excelPos + 1 + j) + (rowIdx + 1),
          styleId: cell.styleId,
          data: {
            type: 'empty',
            value: null
          }
        });
      }
      if (mergedCells.length) {
        cells.splice.apply(cells, __spreadArrays$3([mergeMap[i].pos + 1, 0], mergedCells));
      }
    }
  }
};
var rowFactory = {
  getTemplate: function (config, idx) {
    var index = config.index,
      collapsed = config.collapsed,
      hidden = config.hidden,
      height = config.height,
      s = config.s,
      _a = config.cells,
      cells = _a === void 0 ? [] : _a;
    addEmptyCells(cells, idx);
    var children = cells.filter(function (cell) {
      return cell.data.value !== '';
    }).map(cellFactory.getTemplate);
    return {
      name: "row",
      properties: {
        rawMap: {
          r: index,
          collapsed: collapsed,
          hidden: hidden ? '1' : '0',
          ht: height,
          customHeight: height != null ? '1' : '0',
          s: s,
          customFormat: s != null ? '1' : '0'
        }
      },
      children: children
    };
  }
};
var mergeCell = {
  getTemplate: function (ref) {
    return {
      name: 'mergeCell',
      properties: {
        rawMap: {
          ref: ref
        }
      }
    };
  }
};
var updateColMinMax = function (col, min, range, prevCol) {
  if (!col.min) {
    col.min = min;
    col.max = min + range;
    return;
  }
  var currentMin = min;
  if (prevCol) {
    currentMin = Math.max(currentMin, prevCol.min);
  }
  col.min = Math.max(col.min, currentMin);
  col.max = Math.max(col.max, currentMin + range);
};
var getMergedCells = function (rows, cols) {
  var mergedCells = [];
  rows.forEach(function (currentRow, rowIdx) {
    var cells = currentRow.cells;
    var merges = 0;
    currentRow.index = rowIdx + 1;
    var lastCol;
    cells.forEach(function (currentCell, cellIdx) {
      var min = cellIdx + merges + 1;
      var start = getExcelColumnName(min);
      var outputRow = rowIdx + 1;
      if (currentCell.mergeAcross) {
        merges += currentCell.mergeAcross;
        var end = getExcelColumnName(cellIdx + merges + 1);
        mergedCells.push("" + start + outputRow + ":" + end + outputRow);
      }
      if (!cols[min - 1]) {
        cols[min - 1] = {};
      }
      updateColMinMax(cols[min - 1], min, merges, lastCol);
      lastCol = cols[min - 1];
      currentCell.ref = "" + start + outputRow;
    });
  });
  return mergedCells;
};
var getPageOrientation = function (orientation) {
  if (!orientation || orientation !== 'Portrait' && orientation !== 'Landscape') {
    return 'portrait';
  }
  return orientation.toLocaleLowerCase();
};
var getPageSize = function (pageSize) {
  if (pageSize == null) {
    return 1;
  }
  var positions = ['Letter', 'Letter Small', 'Tabloid', 'Ledger', 'Legal', 'Statement', 'Executive', 'A3', 'A4', 'A4 Small', 'A5', 'A6', 'B4', 'B5', 'Folio', 'Envelope', 'Envelope DL', 'Envelope C5', 'Envelope B5', 'Envelope C3', 'Envelope C4', 'Envelope C6', 'Envelope Monarch', 'Japanese Postcard', 'Japanese Double Postcard'];
  var pos = positions.indexOf(pageSize);
  return pos === -1 ? 1 : pos + 1;
};
var addColumns = function (columns) {
  return function (children) {
    if (columns.length) {
      children.push({
        name: 'cols',
        children: columns.map(columnFactory.getTemplate)
      });
    }
    return children;
  };
};
var addSheetData = function (rows) {
  return function (children) {
    if (rows.length) {
      children.push({
        name: 'sheetData',
        children: rows.map(rowFactory.getTemplate)
      });
    }
    return children;
  };
};
var addMergeCells = function (mergeCells) {
  return function (children) {
    if (mergeCells.length) {
      children.push({
        name: 'mergeCells',
        properties: {
          rawMap: {
            count: mergeCells.length
          }
        },
        children: mergeCells.map(mergeCell.getTemplate)
      });
    }
    return children;
  };
};
var addPageMargins = function (margins) {
  return function (children) {
    var _a = margins.top,
      top = _a === void 0 ? 0.75 : _a,
      _b = margins.right,
      right = _b === void 0 ? 0.7 : _b,
      _c = margins.bottom,
      bottom = _c === void 0 ? 0.75 : _c,
      _d = margins.left,
      left = _d === void 0 ? 0.7 : _d,
      _e = margins.header,
      header = _e === void 0 ? 0.3 : _e,
      _f = margins.footer,
      footer = _f === void 0 ? 0.3 : _f;
    children.push({
      name: 'pageMargins',
      properties: {
        rawMap: {
          bottom: bottom,
          footer: footer,
          header: header,
          left: left,
          right: right,
          top: top
        }
      }
    });
    return children;
  };
};
var addPageSetup = function (pageSetup) {
  return function (children) {
    if (pageSetup) {
      children.push({
        name: 'pageSetup',
        properties: {
          rawMap: {
            horizontalDpi: 0,
            verticalDpi: 0,
            orientation: getPageOrientation(pageSetup.orientation),
            paperSize: getPageSize(pageSetup.pageSize)
          }
        }
      });
    }
    return children;
  };
};
var replaceHeaderFooterTokens = function (value) {
  var map = {
    '&[Page]': '&P',
    '&[Pages]': '&N',
    '&[Date]': '&D',
    '&[Time]': '&T',
    '&[Tab]': '&A',
    '&[Path]': '&Z',
    '&[File]': '&F'
  };
  agGridCommunity._.iterateObject(map, function (key, val) {
    value = value.replace(key, val);
  });
  return value;
};
var getHeaderPosition = function (position) {
  if (position === 'Center') {
    return 'C';
  } else if (position === 'Right') {
    return 'R';
  }
  return 'L';
};
var applyHeaderFontStyle = function (headerString, font) {
  if (!font) {
    return headerString;
  }
  headerString += '&amp;&quot;';
  headerString += font.fontName || 'Calibri';
  if (font.bold !== font.italic) {
    headerString += font.bold ? ',Bold' : ',Italic';
  } else if (font.bold) {
    headerString += ',Bold Italic';
  } else {
    headerString += ',Regular';
  }
  headerString += '&quot;';
  if (font.size) {
    headerString += "&amp;" + font.size;
  }
  if (font.strikeThrough) {
    headerString += '&amp;S';
  }
  if (font.underline) {
    headerString += "&amp;" + (font.underline === 'Double' ? 'E' : 'U');
  }
  if (font.color) {
    headerString += "&amp;K" + font.color.replace('#', '').toUpperCase();
  }
  return headerString;
};
var processHeaderFooterContent = function (content) {
  return content.reduce(function (prev, curr) {
    var pos = getHeaderPosition(curr.position);
    var output = applyHeaderFontStyle(prev + "&amp;" + pos, curr.font);
    return "" + output + agGridCommunity._.escapeString(replaceHeaderFooterTokens(curr.value));
  }, '');
};
var buildHeaderFooter = function (headerFooterConfig) {
  var rules = ['all', 'first', 'even'];
  var headersAndFooters = [];
  rules.forEach(function (rule) {
    var headerFooter = headerFooterConfig[rule];
    var namePrefix = rule === 'all' ? 'odd' : rule;
    if (!headerFooter || !headerFooter.header && !headerFooter.footer) {
      return;
    }
    agGridCommunity._.iterateObject(headerFooter, function (key, value) {
      var nameSuffix = "" + key.charAt(0).toUpperCase() + key.slice(1);
      if (value) {
        headersAndFooters.push({
          name: "" + namePrefix + nameSuffix,
          properties: {
            rawMap: {
              'xml:space': 'preserve'
            }
          },
          textNode: processHeaderFooterContent(value)
        });
      }
    });
  });
  return headersAndFooters;
};
var addHeaderFooter = function (headerFooterConfig) {
  return function (children) {
    if (!headerFooterConfig) {
      return children;
    }
    var differentFirst = headerFooterConfig.first != null ? 1 : 0;
    var differentOddEven = headerFooterConfig.even != null ? 1 : 0;
    children.push({
      name: 'headerFooter',
      properties: {
        rawMap: {
          differentFirst: differentFirst,
          differentOddEven: differentOddEven
        }
      },
      children: buildHeaderFooter(headerFooterConfig)
    });
    return children;
  };
};
var addDrawingRel = function (currentSheet) {
  return function (children) {
    if (ExcelXlsxFactory.worksheetImages.get(currentSheet)) {
      children.push({
        name: 'drawing',
        properties: {
          rawMap: {
            'r:id': 'rId1'
          }
        }
      });
    }
    return children;
  };
};
var worksheetFactory = {
  getTemplate: function (params) {
    var worksheet = params.worksheet,
      currentSheet = params.currentSheet,
      _a = params.margins,
      margins = _a === void 0 ? {} : _a,
      pageSetup = params.pageSetup,
      headerFooterConfig = params.headerFooterConfig;
    var table = worksheet.table;
    var rows = table.rows,
      columns = table.columns;
    var mergedCells = columns && columns.length ? getMergedCells(rows, columns) : [];
    var createWorksheetChildren = agGridCommunity._.compose(addColumns(columns), addSheetData(rows), addMergeCells(mergedCells), addPageMargins(margins), addPageSetup(pageSetup), addHeaderFooter(headerFooterConfig), addDrawingRel(currentSheet));
    var children = createWorksheetChildren([]);
    return {
      name: "worksheet",
      properties: {
        prefixedAttributes: [{
          prefix: "xmlns:",
          map: {
            r: "http://schemas.openxmlformats.org/officeDocument/2006/relationships"
          }
        }],
        rawMap: {
          xmlns: "http://schemas.openxmlformats.org/spreadsheetml/2006/main"
        }
      },
      children: children
    };
  }
};
var relationshipFactory = {
  getTemplate: function (config) {
    var Id = config.Id,
      Type = config.Type,
      Target = config.Target;
    return {
      name: "Relationship",
      properties: {
        rawMap: {
          Id: Id,
          Type: Type,
          Target: Target
        }
      }
    };
  }
};
var relationshipsFactory = {
  getTemplate: function (c) {
    var children = c.map(relationshipFactory.getTemplate);
    return {
      name: "Relationships",
      properties: {
        rawMap: {
          xmlns: "http://schemas.openxmlformats.org/package/2006/relationships"
        }
      },
      children: children
    };
  }
};
var __spreadArrays$4 =  false || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
};
/**
 * See https://www.ecma-international.org/news/TC45_current_work/OpenXML%20White%20Paper.pdf
 */
var ExcelXlsxFactory = /** @class */function () {
  function ExcelXlsxFactory() {}
  ExcelXlsxFactory.createExcel = function (styles, worksheet, margins, pageSetup, headerFooterConfig) {
    this.addSheetName(worksheet);
    registerStyles(styles);
    return this.createWorksheet(worksheet, margins, pageSetup, headerFooterConfig);
  };
  ExcelXlsxFactory.buildImageMap = function (image, rowIndex, col, columnsToExport, rowHeight) {
    var currentSheetIndex = this.sheetNames.length;
    var registeredImage = this.images.get(image.id);
    if (!image.position || !image.position.row || !image.position.column) {
      if (!image.position) {
        image.position = {};
      }
      image.position = agGridCommunity._.assign({}, image.position, {
        row: rowIndex,
        column: columnsToExport.indexOf(col) + 1
      });
    }
    var calculatedImage = image;
    setExcelImageTotalWidth(calculatedImage, columnsToExport);
    setExcelImageTotalHeight(calculatedImage, rowHeight);
    if (registeredImage) {
      var currentSheetImages = agGridCommunity._.find(registeredImage, function (currentImage) {
        return currentImage.sheetId === currentSheetIndex;
      });
      if (currentSheetImages) {
        currentSheetImages.image.push(calculatedImage);
      } else {
        registeredImage.push({
          sheetId: currentSheetIndex,
          image: [calculatedImage]
        });
      }
    } else {
      this.images.set(calculatedImage.id, [{
        sheetId: currentSheetIndex,
        image: [calculatedImage]
      }]);
      this.workbookImageIds.set(calculatedImage.id, {
        type: calculatedImage.imageType,
        index: this.workbookImageIds.size
      });
    }
    this.buildSheetImageMap(currentSheetIndex, calculatedImage);
  };
  ExcelXlsxFactory.buildSheetImageMap = function (sheetIndex, image) {
    var worksheetImageIdMap = this.worksheetImageIds.get(sheetIndex);
    if (!worksheetImageIdMap) {
      worksheetImageIdMap = new Map();
      this.worksheetImageIds.set(sheetIndex, worksheetImageIdMap);
    }
    var sheetImages = this.worksheetImages.get(sheetIndex);
    if (!sheetImages) {
      this.worksheetImages.set(sheetIndex, [image]);
      worksheetImageIdMap.set(image.id, {
        index: 0,
        type: image.imageType
      });
    } else {
      sheetImages.push(image);
      if (!worksheetImageIdMap.get(image.id)) {
        worksheetImageIdMap.set(image.id, {
          index: worksheetImageIdMap.size,
          type: image.imageType
        });
      }
    }
  };
  ExcelXlsxFactory.addSheetName = function (worksheet) {
    var name = worksheet.name;
    var append = '';
    while (this.sheetNames.indexOf(name + append) !== -1) {
      if (append === '') {
        append = '_1';
      } else {
        var curr = parseInt(append.slice(1), 10);
        append = "_" + (curr + 1);
      }
    }
    worksheet.name += append;
    this.sheetNames.push(worksheet.name);
  };
  ExcelXlsxFactory.getStringPosition = function (str) {
    if (this.sharedStrings.has(str)) {
      return this.sharedStrings.get(str);
    }
    this.sharedStrings.set(str, this.sharedStrings.size);
    return this.sharedStrings.size - 1;
  };
  ExcelXlsxFactory.resetFactory = function () {
    this.sharedStrings = new Map();
    this.images = new Map();
    this.worksheetImages = new Map();
    this.workbookImageIds = new Map();
    this.worksheetImageIds = new Map();
    this.sheetNames = [];
    this.factoryMode = agGridCommunity.ExcelFactoryMode.SINGLE_SHEET;
  };
  ExcelXlsxFactory.createWorkbook = function () {
    return createXmlPart(workbookFactory.getTemplate(this.sheetNames));
  };
  ExcelXlsxFactory.createStylesheet = function (defaultFontSize) {
    return createXmlPart(stylesheetFactory.getTemplate(defaultFontSize));
  };
  ExcelXlsxFactory.createSharedStrings = function () {
    return createXmlPart(sharedStrings.getTemplate(this.sharedStrings));
  };
  ExcelXlsxFactory.createCore = function (author) {
    return createXmlPart(coreFactory.getTemplate(author));
  };
  ExcelXlsxFactory.createContentTypes = function (sheetLen) {
    return createXmlPart(contentTypesFactory.getTemplate(sheetLen));
  };
  ExcelXlsxFactory.createRels = function () {
    var rs = relationshipsFactory.getTemplate([{
      Id: 'rId1',
      Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument',
      Target: 'xl/workbook.xml'
    }, {
      Id: 'rId2',
      Type: 'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties',
      Target: 'docProps/core.xml'
    }]);
    return createXmlPart(rs);
  };
  ExcelXlsxFactory.createTheme = function () {
    return createXmlPart(officeTheme.getTemplate());
  };
  ExcelXlsxFactory.createWorkbookRels = function (sheetLen) {
    var worksheets = agGridCommunity._.fill(new Array(sheetLen), undefined).map(function (v, i) {
      return {
        Id: "rId" + (i + 1),
        Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet',
        Target: "worksheets/sheet" + (i + 1) + ".xml"
      };
    });
    var rs = relationshipsFactory.getTemplate(__spreadArrays$4(worksheets, [{
      Id: "rId" + (sheetLen + 1),
      Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme',
      Target: 'theme/theme1.xml'
    }, {
      Id: "rId" + (sheetLen + 2),
      Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles',
      Target: 'styles.xml'
    }, {
      Id: "rId" + (sheetLen + 3),
      Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings',
      Target: 'sharedStrings.xml'
    }]));
    return createXmlPart(rs);
  };
  ExcelXlsxFactory.createDrawing = function (sheetIndex) {
    return createXmlPart(drawingFactory.getTemplate({
      sheetIndex: sheetIndex
    }));
  };
  ExcelXlsxFactory.createDrawingRel = function (sheetIndex) {
    var _this = this;
    var worksheetImageIds = this.worksheetImageIds.get(sheetIndex);
    var XMLArr = [];
    worksheetImageIds.forEach(function (value, key) {
      XMLArr.push({
        Id: "rId" + (value.index + 1),
        Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/image',
        Target: "../media/image" + (_this.workbookImageIds.get(key).index + 1) + "." + value.type
      });
    });
    return createXmlPart(relationshipsFactory.getTemplate(XMLArr));
  };
  ExcelXlsxFactory.createWorksheetDrawingRel = function (currentRelationIndex) {
    var rs = relationshipsFactory.getTemplate([{
      Id: 'rId1',
      Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing',
      Target: "../drawings/drawing" + (currentRelationIndex + 1) + ".xml"
    }]);
    return createXmlPart(rs);
  };
  ExcelXlsxFactory.createWorksheet = function (worksheet, margins, pageSetup, headerFooterConfig) {
    return createXmlPart(worksheetFactory.getTemplate({
      worksheet: worksheet,
      currentSheet: this.sheetNames.length - 1,
      margins: margins,
      pageSetup: pageSetup,
      headerFooterConfig: headerFooterConfig
    }));
  };
  ExcelXlsxFactory.sharedStrings = new Map();
  ExcelXlsxFactory.sheetNames = [];
  /** Maps images to sheet */
  ExcelXlsxFactory.images = new Map();
  /** Maps sheets to images */
  ExcelXlsxFactory.worksheetImages = new Map();
  /** Maps all workbook images to a global Id */
  ExcelXlsxFactory.workbookImageIds = new Map();
  /** Maps all sheet images to unique Ids */
  ExcelXlsxFactory.worksheetImageIds = new Map();
  ExcelXlsxFactory.factoryMode = agGridCommunity.ExcelFactoryMode.SINGLE_SHEET;
  return ExcelXlsxFactory;
}();
var __extends$v =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ExcelXlsxSerializingSession = /** @class */function (_super) {
  __extends$v(ExcelXlsxSerializingSession, _super);
  function ExcelXlsxSerializingSession() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ExcelXlsxSerializingSession.prototype.createExcel = function (data) {
    var _a = this,
      excelStyles = _a.excelStyles,
      config = _a.config;
    var margins = config.margins,
      pageSetup = config.pageSetup,
      headerFooterConfig = config.headerFooterConfig;
    return ExcelXlsxFactory.createExcel(excelStyles, data, margins, pageSetup, headerFooterConfig);
  };
  ExcelXlsxSerializingSession.prototype.getDataTypeForValue = function (valueForCell) {
    if (valueForCell === undefined) {
      return 'empty';
    }
    return agGridCommunity._.isNumeric(valueForCell) ? 'n' : 's';
  };
  ExcelXlsxSerializingSession.prototype.getType = function (type, style, value) {
    if (this.isFormula(value)) {
      return 'f';
    }
    if (style && style.dataType) {
      switch (style.dataType.toLocaleLowerCase()) {
        case 'formula':
          return 'f';
        case 'string':
          return 's';
        case 'number':
          return 'n';
        case 'datetime':
          return 'd';
        case 'error':
          return 'e';
        case 'boolean':
          return 'b';
        default:
          console.warn("ag-grid: Unrecognized data type for excel export [" + style.id + ".dataType=" + style.dataType + "]");
      }
    }
    return type;
  };
  ExcelXlsxSerializingSession.prototype.addImage = function (rowIndex, column, value) {
    if (!this.config.addImageToCell) {
      return;
    }
    var addedImage = this.config.addImageToCell(rowIndex, column, value);
    if (!addedImage) {
      return;
    }
    ExcelXlsxFactory.buildImageMap(addedImage.image, rowIndex, column, this.columnsToExport, this.config.rowHeight);
    return addedImage;
  };
  ExcelXlsxSerializingSession.prototype.createCell = function (styleId, type, value) {
    var actualStyle = this.getStyleById(styleId);
    var typeTransformed = this.getType(type, actualStyle, value) || type;
    return {
      styleId: actualStyle ? styleId : undefined,
      data: {
        type: typeTransformed,
        value: this.getCellValue(typeTransformed, value)
      }
    };
  };
  ExcelXlsxSerializingSession.prototype.createMergedCell = function (styleId, type, value, numOfCells) {
    var valueToUse = value == null ? '' : value;
    return {
      styleId: !!this.getStyleById(styleId) ? styleId : undefined,
      data: {
        type: type,
        value: type === 's' ? ExcelXlsxFactory.getStringPosition(valueToUse).toString() : value
      },
      mergeAcross: numOfCells
    };
  };
  ExcelXlsxSerializingSession.prototype.getCellValue = function (type, value) {
    if (value == null) {
      return ExcelXlsxFactory.getStringPosition('').toString();
    }
    switch (type) {
      case 's':
        return value === '' ? '' : ExcelXlsxFactory.getStringPosition(value).toString();
      case 'f':
        return value.slice(1);
      case 'n':
        return Number(value).toString();
      default:
        return value;
    }
  };
  return ExcelXlsxSerializingSession;
}(BaseExcelSerializingSession);
var __extends$w =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$2 =  false || function () {
  __assign$2 = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$2.apply(this, arguments);
};
var __decorate$s =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var getMultipleSheetsAsExcel = function (params) {
  var data = params.data,
    _a = params.fontSize,
    fontSize = _a === void 0 ? 11 : _a,
    _b = params.author,
    author = _b === void 0 ? 'AG Grid' : _b;
  var hasImages = ExcelXlsxFactory.images.size > 0;
  ZipContainer.addFolders(['_rels/', 'docProps/', 'xl/', 'xl/theme/', 'xl/_rels/', 'xl/worksheets/']);
  if (hasImages) {
    ZipContainer.addFolders(['xl/worksheets/_rels', 'xl/drawings/', 'xl/drawings/_rels', 'xl/media/']);
    var imgCounter_1 = 0;
    ExcelXlsxFactory.images.forEach(function (value) {
      var firstImage = value[0].image[0];
      var ext = firstImage.imageType;
      ZipContainer.addFile("xl/media/image" + ++imgCounter_1 + "." + ext, firstImage.base64, true);
    });
  }
  if (!data || data.length === 0) {
    console.warn("AG Grid: Invalid params supplied to getMultipleSheetsAsExcel() - `ExcelExportParams.data` is empty.");
    ExcelXlsxFactory.resetFactory();
    return;
  }
  var sheetLen = data.length;
  var imageRelationCounter = 0;
  data.forEach(function (value, idx) {
    ZipContainer.addFile("xl/worksheets/sheet" + (idx + 1) + ".xml", value);
    if (hasImages && ExcelXlsxFactory.worksheetImages.get(idx)) {
      createImageRelationsForSheet(idx, imageRelationCounter++);
    }
  });
  ZipContainer.addFile('xl/workbook.xml', ExcelXlsxFactory.createWorkbook());
  ZipContainer.addFile('xl/styles.xml', ExcelXlsxFactory.createStylesheet(fontSize));
  ZipContainer.addFile('xl/sharedStrings.xml', ExcelXlsxFactory.createSharedStrings());
  ZipContainer.addFile('xl/theme/theme1.xml', ExcelXlsxFactory.createTheme());
  ZipContainer.addFile('xl/_rels/workbook.xml.rels', ExcelXlsxFactory.createWorkbookRels(sheetLen));
  ZipContainer.addFile('docProps/core.xml', ExcelXlsxFactory.createCore(author));
  ZipContainer.addFile('[Content_Types].xml', ExcelXlsxFactory.createContentTypes(sheetLen));
  ZipContainer.addFile('_rels/.rels', ExcelXlsxFactory.createRels());
  ExcelXlsxFactory.resetFactory();
  return ZipContainer.getContent('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
};
var exportMultipleSheetsAsExcel = function (params) {
  var _a = params.fileName,
    fileName = _a === void 0 ? 'export.xlsx' : _a;
  var contents = getMultipleSheetsAsExcel(params);
  if (contents) {
    Downloader.download(fileName, contents);
  }
};
var createImageRelationsForSheet = function (sheetIndex, currentRelationIndex) {
  var drawingFolder = 'xl/drawings';
  var drawingFileName = drawingFolder + "/drawing" + (currentRelationIndex + 1) + ".xml";
  var relFileName = drawingFolder + "/_rels/drawing" + (currentRelationIndex + 1) + ".xml.rels";
  var worksheetRelFile = "xl/worksheets/_rels/sheet" + (sheetIndex + 1) + ".xml.rels";
  ZipContainer.addFile(relFileName, ExcelXlsxFactory.createDrawingRel(sheetIndex));
  ZipContainer.addFile(drawingFileName, ExcelXlsxFactory.createDrawing(sheetIndex));
  ZipContainer.addFile(worksheetRelFile, ExcelXlsxFactory.createWorksheetDrawingRel(currentRelationIndex));
};
var ExcelCreator = /** @class */function (_super) {
  __extends$w(ExcelCreator, _super);
  function ExcelCreator() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.exportMode = 'xlsx';
    return _this;
  }
  ExcelCreator.prototype.postConstruct = function () {
    this.setBeans({
      gridSerializer: this.gridSerializer,
      gridOptionsWrapper: this.gridOptionsWrapper
    });
  };
  ExcelCreator.prototype.getDefaultExportParams = function () {
    return this.gridOptionsWrapper.getDefaultExportParams('excel');
  };
  ExcelCreator.prototype.export = function (userParams) {
    if (this.isExportSuppressed()) {
      console.warn("ag-grid: Export cancelled. Export is not allowed as per your configuration.");
      return '';
    }
    var _a = this.getMergedParamsAndData(userParams),
      mergedParams = _a.mergedParams,
      data = _a.data;
    var packageFile = this.packageFile({
      data: [data],
      fontSize: mergedParams.fontSize,
      author: mergedParams.author
    });
    if (packageFile) {
      Downloader.download(this.getFileName(mergedParams.fileName), packageFile);
    }
    return data;
  };
  ExcelCreator.prototype.exportDataAsExcel = function (params) {
    var exportMode = 'xlsx';
    if (params && params.exportMode) {
      exportMode = params.exportMode;
    }
    this.setExportMode(exportMode);
    return this.export(params);
  };
  ExcelCreator.prototype.getDataAsExcel = function (params) {
    var _a = this.getMergedParamsAndData(params),
      mergedParams = _a.mergedParams,
      data = _a.data;
    if (params && params.exportMode === 'xml') {
      return data;
    }
    return this.packageFile({
      data: [data],
      fontSize: mergedParams.fontSize,
      author: mergedParams.author
    });
  };
  ExcelCreator.prototype.setFactoryMode = function (factoryMode, exportMode) {
    if (exportMode === void 0) {
      exportMode = 'xlsx';
    }
    var factory = exportMode === 'xlsx' ? ExcelXlsxFactory : ExcelXmlFactory;
    factory.factoryMode = factoryMode;
  };
  ExcelCreator.prototype.getFactoryMode = function (exportMode) {
    var factory = exportMode === 'xlsx' ? ExcelXlsxFactory : ExcelXmlFactory;
    return factory.factoryMode;
  };
  ExcelCreator.prototype.getSheetDataForExcel = function (params) {
    return this.getMergedParamsAndData(params).data;
  };
  ExcelCreator.prototype.getMultipleSheetsAsExcel = function (params) {
    return getMultipleSheetsAsExcel(params);
  };
  ExcelCreator.prototype.exportMultipleSheetsAsExcel = function (params) {
    return exportMultipleSheetsAsExcel(params);
  };
  ExcelCreator.prototype.getMimeType = function () {
    return this.getExportMode() === 'xml' ? 'application/vnd.ms-excel' : 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
  };
  ExcelCreator.prototype.getDefaultFileName = function () {
    return "export." + this.getExportMode();
  };
  ExcelCreator.prototype.getDefaultFileExtension = function () {
    return this.getExportMode();
  };
  ExcelCreator.prototype.createSerializingSession = function (params) {
    var _a = this,
      columnController = _a.columnController,
      valueService = _a.valueService,
      gridOptionsWrapper = _a.gridOptionsWrapper;
    var isXlsx = this.getExportMode() === 'xlsx';
    var sheetName = 'ag-grid';
    if (params.sheetName != null) {
      sheetName = agGridCommunity._.utf8_encode(params.sheetName.toString().substr(0, 31));
    }
    var config = __assign$2(__assign$2({}, params), {
      sheetName: sheetName,
      columnController: columnController,
      valueService: valueService,
      gridOptionsWrapper: gridOptionsWrapper,
      headerRowHeight: params.headerRowHeight || params.rowHeight,
      baseExcelStyles: this.gridOptions.excelStyles || [],
      styleLinker: this.styleLinker.bind(this)
    });
    return new (isXlsx ? ExcelXlsxSerializingSession : ExcelXmlSerializingSession)(config);
  };
  ExcelCreator.prototype.styleLinker = function (rowType, rowIndex, value, column, node) {
    if (rowType === RowType.HEADER) {
      return ["header"];
    }
    if (rowType === RowType.HEADER_GROUPING) {
      return ["header", "headerGroup"];
    }
    var styles = this.gridOptions.excelStyles;
    var applicableStyles = ["cell"];
    if (!styles || !styles.length) {
      return applicableStyles;
    }
    var styleIds = styles.map(function (it) {
      return it.id;
    });
    this.stylingService.processAllCellClasses(column.getColDef(), {
      value: value,
      data: node.data,
      node: node,
      colDef: column.getColDef(),
      rowIndex: rowIndex,
      api: this.gridOptionsWrapper.getApi(),
      columnApi: this.gridOptionsWrapper.getColumnApi(),
      $scope: null,
      context: this.gridOptionsWrapper.getContext()
    }, function (className) {
      if (styleIds.indexOf(className) > -1) {
        applicableStyles.push(className);
      }
    });
    return applicableStyles.sort(function (left, right) {
      return styleIds.indexOf(left) < styleIds.indexOf(right) ? -1 : 1;
    });
  };
  ExcelCreator.prototype.isExportSuppressed = function () {
    return this.gridOptionsWrapper.isSuppressExcelExport();
  };
  ExcelCreator.prototype.setExportMode = function (exportMode) {
    this.exportMode = exportMode;
  };
  ExcelCreator.prototype.getExportMode = function () {
    return this.exportMode;
  };
  ExcelCreator.prototype.packageFile = function (params) {
    if (this.getExportMode() === 'xml') {
      return new Blob(["\ufeff", params.data[0]], {
        // @ts-ignore
        type: window.navigator.msSaveOrOpenBlob ? this.getMimeType() : 'octet/stream'
      });
    }
    return getMultipleSheetsAsExcel(params);
  };
  __decorate$s([agGridCommunity.Autowired('columnController')], ExcelCreator.prototype, "columnController", void 0);
  __decorate$s([agGridCommunity.Autowired('valueService')], ExcelCreator.prototype, "valueService", void 0);
  __decorate$s([agGridCommunity.Autowired('gridOptions')], ExcelCreator.prototype, "gridOptions", void 0);
  __decorate$s([agGridCommunity.Autowired('stylingService')], ExcelCreator.prototype, "stylingService", void 0);
  __decorate$s([agGridCommunity.Autowired('gridSerializer')], ExcelCreator.prototype, "gridSerializer", void 0);
  __decorate$s([agGridCommunity.Autowired('gridOptionsWrapper')], ExcelCreator.prototype, "gridOptionsWrapper", void 0);
  __decorate$s([agGridCommunity.PostConstruct], ExcelCreator.prototype, "postConstruct", null);
  ExcelCreator = __decorate$s([agGridCommunity.Bean('excelCreator')], ExcelCreator);
  return ExcelCreator;
}(BaseCreator);
var ExcelExportModule = {
  moduleName: agGridCommunity.ModuleNames.ExcelExportModule,
  beans: [
  // beans in this module
  ExcelCreator,
  // these beans are part of CSV Export module
  GridSerializer, CsvCreator],
  dependantModules: [CsvExportModule, EnterpriseCoreModule]
};
var __extends$x =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$t =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var EXPAND_STATE;
(function (EXPAND_STATE) {
  EXPAND_STATE[EXPAND_STATE["EXPANDED"] = 0] = "EXPANDED";
  EXPAND_STATE[EXPAND_STATE["COLLAPSED"] = 1] = "COLLAPSED";
  EXPAND_STATE[EXPAND_STATE["INDETERMINATE"] = 2] = "INDETERMINATE";
})(EXPAND_STATE || (EXPAND_STATE = {}));
var FiltersToolPanelHeaderPanel = /** @class */function (_super) {
  __extends$x(FiltersToolPanelHeaderPanel, _super);
  function FiltersToolPanelHeaderPanel() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  FiltersToolPanelHeaderPanel.prototype.preConstruct = function () {
    this.setTemplate( /* html */"<div class=\"ag-filter-toolpanel-search\" role=\"presentation\">\n                <div ref=\"eExpand\" class=\"ag-filter-toolpanel-expand\"></div>\n                <ag-input-text-field ref=\"eFilterTextField\" class=\"ag-filter-toolpanel-search-input\"></ag-input-text-field>\n            </div>");
  };
  FiltersToolPanelHeaderPanel.prototype.postConstruct = function () {
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    this.eFilterTextField.onValueChange(this.onSearchTextChanged.bind(this));
    this.eFilterTextField.setInputAriaLabel(translate('ariaSearch', 'Search'));
    this.createExpandIcons();
    this.setExpandState(EXPAND_STATE.EXPANDED);
    this.addManagedListener(this.eExpand, 'click', this.onExpandClicked.bind(this));
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_NEW_COLUMNS_LOADED, this.showOrHideOptions.bind(this));
  };
  FiltersToolPanelHeaderPanel.prototype.init = function (params) {
    this.params = params;
    if (this.columnController.isReady()) {
      this.showOrHideOptions();
    }
  };
  FiltersToolPanelHeaderPanel.prototype.createExpandIcons = function () {
    this.eExpand.appendChild(this.eExpandChecked = agGridCommunity._.createIconNoSpan('columnSelectOpen', this.gridOptionsWrapper));
    this.eExpand.appendChild(this.eExpandUnchecked = agGridCommunity._.createIconNoSpan('columnSelectClosed', this.gridOptionsWrapper));
    this.eExpand.appendChild(this.eExpandIndeterminate = agGridCommunity._.createIconNoSpan('columnSelectIndeterminate', this.gridOptionsWrapper));
  };
  // we only show expand / collapse if we are showing filters
  FiltersToolPanelHeaderPanel.prototype.showOrHideOptions = function () {
    var showFilterSearch = !this.params.suppressFilterSearch;
    var showExpand = !this.params.suppressExpandAll;
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    this.eFilterTextField.setInputPlaceholder(translate('searchOoo', 'Search...'));
    var isFilterGroupPresent = function (col) {
      return col.getOriginalParent() && col.isFilterAllowed();
    };
    var filterGroupsPresent = this.columnController.getAllGridColumns().some(isFilterGroupPresent);
    agGridCommunity._.setDisplayed(this.eFilterTextField.getGui(), showFilterSearch);
    agGridCommunity._.setDisplayed(this.eExpand, showExpand && filterGroupsPresent);
  };
  FiltersToolPanelHeaderPanel.prototype.onSearchTextChanged = function () {
    var _this = this;
    if (!this.onSearchTextChangedDebounced) {
      this.onSearchTextChangedDebounced = agGridCommunity._.debounce(function () {
        _this.dispatchEvent({
          type: 'searchChanged',
          searchText: _this.eFilterTextField.getValue()
        });
      }, 300);
    }
    this.onSearchTextChangedDebounced();
  };
  FiltersToolPanelHeaderPanel.prototype.onExpandClicked = function () {
    var event = this.currentExpandState === EXPAND_STATE.EXPANDED ? {
      type: 'collapseAll'
    } : {
      type: 'expandAll'
    };
    this.dispatchEvent(event);
  };
  FiltersToolPanelHeaderPanel.prototype.setExpandState = function (state) {
    this.currentExpandState = state;
    agGridCommunity._.setDisplayed(this.eExpandChecked, this.currentExpandState === EXPAND_STATE.EXPANDED);
    agGridCommunity._.setDisplayed(this.eExpandUnchecked, this.currentExpandState === EXPAND_STATE.COLLAPSED);
    agGridCommunity._.setDisplayed(this.eExpandIndeterminate, this.currentExpandState === EXPAND_STATE.INDETERMINATE);
  };
  __decorate$t([agGridCommunity.Autowired('columnController')], FiltersToolPanelHeaderPanel.prototype, "columnController", void 0);
  __decorate$t([agGridCommunity.RefSelector('eExpand')], FiltersToolPanelHeaderPanel.prototype, "eExpand", void 0);
  __decorate$t([agGridCommunity.RefSelector('eFilterTextField')], FiltersToolPanelHeaderPanel.prototype, "eFilterTextField", void 0);
  __decorate$t([agGridCommunity.PreConstruct], FiltersToolPanelHeaderPanel.prototype, "preConstruct", null);
  __decorate$t([agGridCommunity.PostConstruct], FiltersToolPanelHeaderPanel.prototype, "postConstruct", null);
  return FiltersToolPanelHeaderPanel;
}(agGridCommunity.Component);
var __extends$y =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$u =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ToolPanelFilterComp = /** @class */function (_super) {
  __extends$y(ToolPanelFilterComp, _super);
  function ToolPanelFilterComp(hideHeader) {
    if (hideHeader === void 0) {
      hideHeader = false;
    }
    var _this = _super.call(this, ToolPanelFilterComp.TEMPLATE) || this;
    _this.expanded = false;
    _this.hideHeader = hideHeader;
    return _this;
  }
  ToolPanelFilterComp.prototype.postConstruct = function () {
    this.eExpandChecked = agGridCommunity._.createIconNoSpan('columnSelectOpen', this.gridOptionsWrapper);
    this.eExpandUnchecked = agGridCommunity._.createIconNoSpan('columnSelectClosed', this.gridOptionsWrapper);
    this.eExpand.appendChild(this.eExpandChecked);
    this.eExpand.appendChild(this.eExpandUnchecked);
  };
  ToolPanelFilterComp.prototype.setColumn = function (column) {
    var _this = this;
    this.column = column;
    this.eFilterName.innerText = this.columnController.getDisplayNameForColumn(this.column, 'filterToolPanel', false) || '';
    this.addManagedListener(this.eFilterToolPanelHeader, 'click', this.toggleExpanded.bind(this));
    this.addManagedListener(this.eFilterToolPanelHeader, 'keydown', function (e) {
      if (e.keyCode === agGridCommunity.KeyCode.ENTER) {
        _this.toggleExpanded();
      }
    });
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_FILTER_OPENED, this.onFilterOpened.bind(this));
    this.addInIcon('filter', this.eFilterIcon, this.column);
    agGridCommunity._.addOrRemoveCssClass(this.eFilterIcon, 'ag-hidden', !this.isFilterActive());
    agGridCommunity._.addCssClass(this.eExpandChecked, 'ag-hidden');
    if (this.hideHeader) {
      agGridCommunity._.addOrRemoveCssClass(this.eFilterToolPanelHeader, 'ag-hidden', true);
      this.eFilterToolPanelHeader.removeAttribute('tabindex');
    } else {
      this.eFilterToolPanelHeader.setAttribute('tabindex', '0');
    }
    this.addManagedListener(this.column, agGridCommunity.Column.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
  };
  ToolPanelFilterComp.prototype.getColumn = function () {
    return this.column;
  };
  ToolPanelFilterComp.prototype.getColumnFilterName = function () {
    return this.columnController.getDisplayNameForColumn(this.column, 'filterToolPanel', false);
  };
  ToolPanelFilterComp.prototype.addCssClassToTitleBar = function (cssClass) {
    agGridCommunity._.addCssClass(this.eFilterToolPanelHeader, cssClass);
  };
  ToolPanelFilterComp.prototype.addInIcon = function (iconName, eParent, column) {
    if (eParent == null) {
      return;
    }
    var eIcon = agGridCommunity._.createIconNoSpan(iconName, this.gridOptionsWrapper, column);
    eParent.appendChild(eIcon);
  };
  ToolPanelFilterComp.prototype.isFilterActive = function () {
    return this.filterManager.isFilterActive(this.column);
  };
  ToolPanelFilterComp.prototype.onFilterChanged = function () {
    agGridCommunity._.addOrRemoveCssClass(this.eFilterIcon, 'ag-hidden', !this.isFilterActive());
    this.dispatchEvent({
      type: agGridCommunity.Column.EVENT_FILTER_CHANGED
    });
  };
  ToolPanelFilterComp.prototype.toggleExpanded = function () {
    this.expanded ? this.collapse() : this.expand();
  };
  ToolPanelFilterComp.prototype.expand = function () {
    var _this = this;
    if (this.expanded) {
      return;
    }
    this.expanded = true;
    var container = agGridCommunity._.loadTemplate( /* html */"<div class=\"ag-filter-toolpanel-instance-filter\"></div>");
    var filterPromise = this.filterManager.getOrCreateFilterWrapper(this.column, 'TOOLBAR').filterPromise;
    if (filterPromise) {
      filterPromise.then(function (filter) {
        _this.underlyingFilter = filter;
        if (!filter) {
          return;
        }
        container.appendChild(filter.getGui());
        _this.agFilterToolPanelBody.appendChild(container);
        if (filter.afterGuiAttached) {
          filter.afterGuiAttached({
            container: 'toolPanel'
          });
        }
      });
    }
    agGridCommunity._.setDisplayed(this.eExpandChecked, true);
    agGridCommunity._.setDisplayed(this.eExpandUnchecked, false);
  };
  ToolPanelFilterComp.prototype.collapse = function () {
    if (!this.expanded) {
      return;
    }
    this.expanded = false;
    this.agFilterToolPanelBody.removeChild(this.agFilterToolPanelBody.children[0]);
    agGridCommunity._.setDisplayed(this.eExpandChecked, false);
    agGridCommunity._.setDisplayed(this.eExpandUnchecked, true);
  };
  ToolPanelFilterComp.prototype.refreshFilter = function () {
    if (!this.expanded) {
      return;
    }
    var filter = this.underlyingFilter;
    if (!filter) {
      return;
    }
    // set filters should be updated when the filter has been changed elsewhere, i.e. via api. Note that we can't
    // use 'afterGuiAttached' to refresh the virtual list as it also focuses on the mini filter which changes the
    // scroll position in the filter list panel
    if (typeof filter.refreshVirtualList === 'function') {
      filter.refreshVirtualList();
    }
  };
  ToolPanelFilterComp.prototype.onFilterOpened = function (event) {
    if (event.source !== 'COLUMN_MENU') {
      return;
    }
    if (event.column !== this.column) {
      return;
    }
    if (!this.expanded) {
      return;
    }
    this.collapse();
  };
  ToolPanelFilterComp.TEMPLATE = "\n        <div class=\"ag-filter-toolpanel-instance\">\n            <div class=\"ag-filter-toolpanel-header ag-filter-toolpanel-instance-header\" ref=\"eFilterToolPanelHeader\">\n                <div ref=\"eExpand\" class=\"ag-filter-toolpanel-expand\"></div>\n                <span ref=\"eFilterName\" class=\"ag-header-cell-text\"></span>\n                <span ref=\"eFilterIcon\" class=\"ag-header-icon ag-filter-icon ag-filter-toolpanel-instance-header-icon\" aria-hidden=\"true\"></span>\n            </div>\n            <div class=\"ag-filter-toolpanel-instance-body ag-filter\" ref=\"agFilterToolPanelBody\"></div>\n        </div>";
  __decorate$u([agGridCommunity.RefSelector('eFilterToolPanelHeader')], ToolPanelFilterComp.prototype, "eFilterToolPanelHeader", void 0);
  __decorate$u([agGridCommunity.RefSelector('eFilterName')], ToolPanelFilterComp.prototype, "eFilterName", void 0);
  __decorate$u([agGridCommunity.RefSelector('agFilterToolPanelBody')], ToolPanelFilterComp.prototype, "agFilterToolPanelBody", void 0);
  __decorate$u([agGridCommunity.RefSelector('eFilterIcon')], ToolPanelFilterComp.prototype, "eFilterIcon", void 0);
  __decorate$u([agGridCommunity.RefSelector('eExpand')], ToolPanelFilterComp.prototype, "eExpand", void 0);
  __decorate$u([agGridCommunity.Autowired('filterManager')], ToolPanelFilterComp.prototype, "filterManager", void 0);
  __decorate$u([agGridCommunity.Autowired('columnController')], ToolPanelFilterComp.prototype, "columnController", void 0);
  __decorate$u([agGridCommunity.PostConstruct], ToolPanelFilterComp.prototype, "postConstruct", null);
  return ToolPanelFilterComp;
}(agGridCommunity.Component);
var __extends$z =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$v =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ToolPanelFilterGroupComp = /** @class */function (_super) {
  __extends$z(ToolPanelFilterGroupComp, _super);
  function ToolPanelFilterGroupComp(columnGroup, childFilterComps, expandedCallback, depth, showingColumn) {
    var _this = _super.call(this) || this;
    _this.columnGroup = columnGroup;
    _this.childFilterComps = childFilterComps;
    _this.depth = depth;
    _this.expandedCallback = expandedCallback;
    _this.showingColumn = showingColumn;
    return _this;
  }
  ToolPanelFilterGroupComp.prototype.preConstruct = function () {
    var groupParams = {
      cssIdentifier: 'filter-toolpanel',
      direction: 'vertical'
    };
    this.setTemplate(ToolPanelFilterGroupComp.TEMPLATE, {
      filterGroupComp: groupParams
    });
  };
  ToolPanelFilterGroupComp.prototype.init = function () {
    var _this = this;
    this.setGroupTitle();
    this.filterGroupComp.setAlignItems('stretch');
    agGridCommunity._.addCssClass(this.filterGroupComp.getGui(), "ag-filter-toolpanel-group-level-" + this.depth);
    this.filterGroupComp.addCssClassToTitleBar("ag-filter-toolpanel-group-level-" + this.depth + "-header");
    this.childFilterComps.forEach(function (filterComp) {
      _this.filterGroupComp.addItem(filterComp);
      filterComp.addCssClassToTitleBar("ag-filter-toolpanel-group-level-" + (_this.depth + 1) + "-header");
    });
    this.addExpandCollapseListeners();
    this.addFilterChangedListeners();
    this.setupTooltip();
  };
  ToolPanelFilterGroupComp.prototype.setupTooltip = function () {
    var _this = this;
    // we don't show tooltips for groups, as when the group expands, it's div contains the columns which also
    // have tooltips, so the tooltips would clash. Eg mouse over group, tooltip shows, mouse over column, another
    // tooltip shows but cos we didn't leave the group the group tooltip remains. this should be fixed in the future,
    // maye the group shouldn't contain the children form a DOM perspective.
    if (!this.showingColumn) {
      return;
    }
    var refresh = function () {
      var newTooltipText = _this.columnGroup.getColDef().headerTooltip;
      _this.setTooltip(agGridCommunity._.escapeString(newTooltipText));
    };
    refresh();
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_NEW_COLUMNS_LOADED, refresh);
  };
  ToolPanelFilterGroupComp.prototype.getTooltipParams = function () {
    var res = _super.prototype.getTooltipParams.call(this);
    res.location = 'filterToolPanelColumnGroup';
    return res;
  };
  ToolPanelFilterGroupComp.prototype.addCssClassToTitleBar = function (cssClass) {
    this.filterGroupComp.addCssClassToTitleBar(cssClass);
  };
  ToolPanelFilterGroupComp.prototype.refreshFilters = function () {
    this.childFilterComps.forEach(function (filterComp) {
      if (filterComp instanceof ToolPanelFilterGroupComp) {
        filterComp.refreshFilters();
      } else {
        filterComp.refreshFilter();
      }
    });
  };
  ToolPanelFilterGroupComp.prototype.isColumnGroup = function () {
    return this.columnGroup instanceof agGridCommunity.OriginalColumnGroup;
  };
  ToolPanelFilterGroupComp.prototype.isExpanded = function () {
    return this.filterGroupComp.isExpanded();
  };
  ToolPanelFilterGroupComp.prototype.getChildren = function () {
    return this.childFilterComps;
  };
  ToolPanelFilterGroupComp.prototype.getFilterGroupName = function () {
    return this.filterGroupName ? this.filterGroupName : '';
  };
  ToolPanelFilterGroupComp.prototype.getFilterGroupId = function () {
    return this.columnGroup.getId();
  };
  ToolPanelFilterGroupComp.prototype.hideGroupItem = function (hide, index) {
    this.filterGroupComp.hideItem(hide, index);
  };
  ToolPanelFilterGroupComp.prototype.hideGroup = function (hide) {
    agGridCommunity._.addOrRemoveCssClass(this.getGui(), 'ag-hidden', hide);
  };
  ToolPanelFilterGroupComp.prototype.forEachToolPanelFilterChild = function (action) {
    agGridCommunity._.forEach(this.childFilterComps, function (filterComp) {
      if (filterComp instanceof ToolPanelFilterComp) {
        action(filterComp);
      }
    });
  };
  ToolPanelFilterGroupComp.prototype.addExpandCollapseListeners = function () {
    var _this = this;
    var expandListener = this.isColumnGroup() ? function () {
      return _this.expandedCallback();
    } : function () {
      return _this.forEachToolPanelFilterChild(function (filterComp) {
        return filterComp.expand();
      });
    };
    var collapseListener = this.isColumnGroup() ? function () {
      return _this.expandedCallback();
    } : function () {
      return _this.forEachToolPanelFilterChild(function (filterComp) {
        return filterComp.collapse();
      });
    };
    this.addManagedListener(this.filterGroupComp, agGridCommunity.AgGroupComponent.EVENT_EXPANDED, expandListener);
    this.addManagedListener(this.filterGroupComp, agGridCommunity.AgGroupComponent.EVENT_COLLAPSED, collapseListener);
  };
  ToolPanelFilterGroupComp.prototype.addFilterChangedListeners = function () {
    var _this = this;
    if (this.columnGroup instanceof agGridCommunity.OriginalColumnGroup) {
      var group_1 = this.columnGroup;
      var anyChildFiltersActive_1 = function () {
        return group_1.getLeafColumns().some(function (col) {
          return col.isFilterActive();
        });
      };
      group_1.getLeafColumns().forEach(function (column) {
        _this.addManagedListener(column, agGridCommunity.Column.EVENT_FILTER_CHANGED, function () {
          agGridCommunity._.addOrRemoveCssClass(_this.filterGroupComp.getGui(), 'ag-has-filter', anyChildFiltersActive_1());
        });
      });
    } else {
      var column_1 = this.columnGroup;
      this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_FILTER_OPENED, this.onFilterOpened.bind(this));
      this.addManagedListener(column_1, agGridCommunity.Column.EVENT_FILTER_CHANGED, function () {
        agGridCommunity._.addOrRemoveCssClass(_this.filterGroupComp.getGui(), 'ag-has-filter', column_1.isFilterActive());
      });
    }
  };
  ToolPanelFilterGroupComp.prototype.onFilterOpened = function (event) {
    // when a filter is opened elsewhere, i.e. column menu we close the filter comp so we also need to collapse
    // the column group. This approach means we don't need to try and sync filter models on the same column.
    if (event.source !== 'COLUMN_MENU') {
      return;
    }
    if (event.column !== this.columnGroup) {
      return;
    }
    if (!this.isExpanded()) {
      return;
    }
    this.collapse();
  };
  ToolPanelFilterGroupComp.prototype.expand = function () {
    this.filterGroupComp.toggleGroupExpand(true);
  };
  ToolPanelFilterGroupComp.prototype.collapse = function () {
    this.filterGroupComp.toggleGroupExpand(false);
  };
  ToolPanelFilterGroupComp.prototype.setGroupTitle = function () {
    this.filterGroupName = this.columnGroup instanceof agGridCommunity.OriginalColumnGroup ? this.getColumnGroupName(this.columnGroup) : this.getColumnName(this.columnGroup);
    this.filterGroupComp.setTitle(this.filterGroupName || '');
  };
  ToolPanelFilterGroupComp.prototype.getColumnGroupName = function (columnGroup) {
    return this.columnController.getDisplayNameForOriginalColumnGroup(null, columnGroup, 'filterToolPanel');
  };
  ToolPanelFilterGroupComp.prototype.getColumnName = function (column) {
    return this.columnController.getDisplayNameForColumn(column, 'filterToolPanel', false);
  };
  ToolPanelFilterGroupComp.prototype.destroyFilters = function () {
    this.childFilterComps = this.destroyBeans(this.childFilterComps);
    agGridCommunity._.clearElement(this.getGui());
  };
  ToolPanelFilterGroupComp.prototype.destroy = function () {
    this.destroyFilters();
    _super.prototype.destroy.call(this);
  };
  ToolPanelFilterGroupComp.TEMPLATE = "<div class=\"ag-filter-toolpanel-group-wrapper\">\n            <ag-group-component ref=\"filterGroupComp\"></ag-group-component>\n        </div>";
  __decorate$v([agGridCommunity.RefSelector('filterGroupComp')], ToolPanelFilterGroupComp.prototype, "filterGroupComp", void 0);
  __decorate$v([agGridCommunity.Autowired('columnController')], ToolPanelFilterGroupComp.prototype, "columnController", void 0);
  __decorate$v([agGridCommunity.PreConstruct], ToolPanelFilterGroupComp.prototype, "preConstruct", null);
  __decorate$v([agGridCommunity.PostConstruct], ToolPanelFilterGroupComp.prototype, "init", null);
  return ToolPanelFilterGroupComp;
}(agGridCommunity.Component);
var __extends$A =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$w =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FiltersToolPanelListPanel = /** @class */function (_super) {
  __extends$A(FiltersToolPanelListPanel, _super);
  function FiltersToolPanelListPanel() {
    var _this = _super.call(this, FiltersToolPanelListPanel.TEMPLATE) || this;
    _this.initialised = false;
    _this.filterGroupComps = [];
    return _this;
  }
  FiltersToolPanelListPanel.prototype.init = function (params) {
    var _this = this;
    this.initialised = true;
    var defaultParams = {
      suppressExpandAll: false,
      suppressFilterSearch: false,
      suppressSyncLayoutWithGrid: false,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    agGridCommunity._.mergeDeep(defaultParams, params);
    this.params = defaultParams;
    if (!this.params.suppressSyncLayoutWithGrid) {
      this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_COLUMN_MOVED, function () {
        return _this.onColumnsChanged();
      });
    }
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_NEW_COLUMNS_LOADED, function () {
      return _this.onColumnsChanged();
    });
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_TOOL_PANEL_VISIBLE_CHANGED, function (event) {
      // when re-entering the filters tool panel we need to refresh the virtual lists in the set filters in case
      // filters have been changed elsewhere, i.e. via an api call.
      if (event.source === 'filters') {
        _this.refreshFilters();
      }
    });
    if (this.columnController.isReady()) {
      this.onColumnsChanged();
    }
  };
  FiltersToolPanelListPanel.prototype.onColumnsChanged = function () {
    var pivotModeActive = this.columnController.isPivotMode();
    var shouldSyncColumnLayoutWithGrid = !this.params.suppressSyncLayoutWithGrid && !pivotModeActive;
    shouldSyncColumnLayoutWithGrid ? this.syncFilterLayout() : this.buildTreeFromProvidedColumnDefs();
  };
  FiltersToolPanelListPanel.prototype.syncFilterLayout = function () {
    this.toolPanelColDefService.syncLayoutWithGrid(this.setFiltersLayout.bind(this));
  };
  FiltersToolPanelListPanel.prototype.buildTreeFromProvidedColumnDefs = function () {
    var _this = this;
    this.destroyFilters();
    var columnTree = this.columnController.getPrimaryColumnTree();
    this.filterGroupComps = this.recursivelyAddComps(columnTree, 0);
    var len = this.filterGroupComps.length;
    if (len) {
      this.filterGroupComps.forEach(function (comp) {
        return _this.appendChild(comp);
      });
      this.setFirstAndLastVisible(0, len - 1);
    }
    // perform search if searchFilterText exists
    if (agGridCommunity._.exists(this.searchFilterText)) {
      this.searchFilters(this.searchFilterText);
    }
    // notify header of expand
    this.fireExpandedEvent();
  };
  FiltersToolPanelListPanel.prototype.setFiltersLayout = function (colDefs) {
    var _this = this;
    this.destroyFilters();
    var columnTree = this.toolPanelColDefService.createColumnTree(colDefs);
    this.filterGroupComps = this.recursivelyAddComps(columnTree, 0);
    var len = this.filterGroupComps.length;
    if (len) {
      this.filterGroupComps.forEach(function (comp) {
        return _this.appendChild(comp);
      });
      this.setFirstAndLastVisible(0, len - 1);
    }
    // perform search if searchFilterText exists
    if (agGridCommunity._.exists(this.searchFilterText)) {
      this.searchFilters(this.searchFilterText);
    }
    // notify header of expand
    this.fireExpandedEvent();
  };
  FiltersToolPanelListPanel.prototype.recursivelyAddComps = function (tree, depth) {
    var _this = this;
    return agGridCommunity._.flatten(tree.map(function (child) {
      if (child instanceof agGridCommunity.OriginalColumnGroup) {
        return agGridCommunity._.flatten(_this.recursivelyAddFilterGroupComps(child, depth));
      }
      var column = child;
      if (!_this.shouldDisplayFilter(column)) {
        return [];
      }
      var hideFilterCompHeader = depth === 0;
      var filterComp = new ToolPanelFilterComp(hideFilterCompHeader);
      _this.getContext().createBean(filterComp);
      filterComp.setColumn(column);
      if (depth > 0) {
        return filterComp;
      }
      var filterGroupComp = _this.createBean(new ToolPanelFilterGroupComp(column, [filterComp], _this.onGroupExpanded.bind(_this), depth, true));
      filterGroupComp.addCssClassToTitleBar('ag-filter-toolpanel-header');
      filterGroupComp.collapse();
      return filterGroupComp;
    }));
  };
  FiltersToolPanelListPanel.prototype.recursivelyAddFilterGroupComps = function (columnGroup, depth) {
    if (!this.filtersExistInChildren(columnGroup.getChildren())) {
      return;
    }
    var colGroupDef = columnGroup.getColGroupDef();
    if (colGroupDef && colGroupDef.suppressFiltersToolPanel) {
      return [];
    }
    var newDepth = columnGroup.isPadding() ? depth : depth + 1;
    var childFilterComps = agGridCommunity._.flatten(this.recursivelyAddComps(columnGroup.getChildren(), newDepth));
    if (columnGroup.isPadding()) {
      return childFilterComps;
    }
    var filterGroupComp = new ToolPanelFilterGroupComp(columnGroup, childFilterComps, this.onGroupExpanded.bind(this), depth, false);
    this.getContext().createBean(filterGroupComp);
    filterGroupComp.addCssClassToTitleBar('ag-filter-toolpanel-header');
    return [filterGroupComp];
  };
  FiltersToolPanelListPanel.prototype.filtersExistInChildren = function (tree) {
    var _this = this;
    return tree.some(function (child) {
      if (child instanceof agGridCommunity.OriginalColumnGroup) {
        return _this.filtersExistInChildren(child.getChildren());
      }
      return _this.shouldDisplayFilter(child);
    });
  };
  FiltersToolPanelListPanel.prototype.shouldDisplayFilter = function (column) {
    var suppressFiltersToolPanel = column.getColDef() && column.getColDef().suppressFiltersToolPanel;
    return column.isFilterAllowed() && !suppressFiltersToolPanel;
  };
  // we don't support refreshing, but must implement because it's on the tool panel interface
  FiltersToolPanelListPanel.prototype.refresh = function () {};
  // lazy initialise the panel
  FiltersToolPanelListPanel.prototype.setVisible = function (visible) {
    _super.prototype.setDisplayed.call(this, visible);
    if (visible && !this.initialised) {
      this.init(this.params);
    }
  };
  FiltersToolPanelListPanel.prototype.expandFilterGroups = function (expand, groupIds) {
    var updatedGroupIds = [];
    var updateGroupExpandState = function (filterGroup) {
      var groupId = filterGroup.getFilterGroupId();
      var shouldExpandOrCollapse = !groupIds || agGridCommunity._.includes(groupIds, groupId);
      if (shouldExpandOrCollapse) {
        // don't expand 'column groups', i.e. top level columns wrapped in a group
        if (expand && filterGroup.isColumnGroup()) {
          filterGroup.expand();
        } else {
          filterGroup.collapse();
        }
        updatedGroupIds.push(groupId);
      }
      // recursively look for more groups to expand / collapse
      filterGroup.getChildren().forEach(function (child) {
        if (child instanceof ToolPanelFilterGroupComp) {
          updateGroupExpandState(child);
        }
      });
    };
    this.filterGroupComps.forEach(updateGroupExpandState);
    // update header expand / collapse icon
    this.onGroupExpanded();
    if (groupIds) {
      var unrecognisedGroupIds = groupIds.filter(function (groupId) {
        return updatedGroupIds.indexOf(groupId) < 0;
      });
      if (unrecognisedGroupIds.length > 0) {
        console.warn('AG Grid: unable to find groups for these supplied groupIds:', unrecognisedGroupIds);
      }
    }
  };
  FiltersToolPanelListPanel.prototype.expandFilters = function (expand, colIds) {
    var updatedColIds = [];
    var updateGroupExpandState = function (filterComp) {
      if (filterComp instanceof ToolPanelFilterGroupComp) {
        var anyChildrenChanged_1 = false;
        filterComp.getChildren().forEach(function (child) {
          var childUpdated = updateGroupExpandState(child);
          if (childUpdated) {
            if (expand) {
              filterComp.expand();
              anyChildrenChanged_1 = true;
            } else if (!filterComp.isColumnGroup()) {
              // we only collapse columns wrapped in groups
              filterComp.collapse();
            }
          }
        });
        return anyChildrenChanged_1;
      }
      var colId = filterComp.getColumn().getColId();
      var updateFilterExpandState = !colIds || agGridCommunity._.includes(colIds, colId);
      if (updateFilterExpandState) {
        expand ? filterComp.expand() : filterComp.collapse();
        updatedColIds.push(colId);
      }
      return updateFilterExpandState;
    };
    this.filterGroupComps.forEach(updateGroupExpandState);
    // update header expand / collapse icon
    this.onGroupExpanded();
    if (colIds) {
      var unrecognisedColIds = colIds.filter(function (colId) {
        return updatedColIds.indexOf(colId) < 0;
      });
      if (unrecognisedColIds.length > 0) {
        console.warn('AG Grid: unable to find columns for these supplied colIds:', unrecognisedColIds);
      }
    }
  };
  FiltersToolPanelListPanel.prototype.onGroupExpanded = function () {
    this.fireExpandedEvent();
  };
  FiltersToolPanelListPanel.prototype.fireExpandedEvent = function () {
    var expandedCount = 0;
    var notExpandedCount = 0;
    var updateExpandCounts = function (filterGroup) {
      if (!filterGroup.isColumnGroup()) {
        return;
      }
      filterGroup.isExpanded() ? expandedCount++ : notExpandedCount++;
      filterGroup.getChildren().forEach(function (child) {
        if (child instanceof ToolPanelFilterGroupComp) {
          updateExpandCounts(child);
        }
      });
    };
    this.filterGroupComps.forEach(updateExpandCounts);
    var state;
    if (expandedCount > 0 && notExpandedCount > 0) {
      state = EXPAND_STATE.INDETERMINATE;
    } else if (notExpandedCount > 0) {
      state = EXPAND_STATE.COLLAPSED;
    } else {
      state = EXPAND_STATE.EXPANDED;
    }
    this.dispatchEvent({
      type: 'groupExpanded',
      state: state
    });
  };
  FiltersToolPanelListPanel.prototype.performFilterSearch = function (searchText) {
    this.searchFilterText = agGridCommunity._.exists(searchText) ? searchText.toLowerCase() : null;
    this.searchFilters(this.searchFilterText);
  };
  FiltersToolPanelListPanel.prototype.searchFilters = function (searchFilter) {
    var passesFilter = function (groupName) {
      return !agGridCommunity._.exists(searchFilter) || groupName.toLowerCase().indexOf(searchFilter) !== -1;
    };
    var recursivelySearch = function (filterItem, parentPasses) {
      if (!(filterItem instanceof ToolPanelFilterGroupComp)) {
        return passesFilter(filterItem.getColumnFilterName() || '');
      }
      var children = filterItem.getChildren();
      var groupNamePasses = passesFilter(filterItem.getFilterGroupName());
      // if group or parent already passed - ensure this group and all children are visible
      var alreadyPassed = parentPasses || groupNamePasses;
      if (alreadyPassed) {
        // ensure group visible
        filterItem.hideGroup(false);
        // ensure all children are visible
        for (var i = 0; i < children.length; i++) {
          recursivelySearch(children[i], alreadyPassed);
          filterItem.hideGroupItem(false, i);
        }
        return true;
      }
      // hide group item filters
      var anyChildPasses = false;
      children.forEach(function (child, index) {
        var childPasses = recursivelySearch(child, parentPasses);
        filterItem.hideGroupItem(!childPasses, index);
        if (childPasses) {
          anyChildPasses = true;
        }
      });
      // hide group if no children pass
      filterItem.hideGroup(!anyChildPasses);
      return anyChildPasses;
    };
    var firstVisible;
    var lastVisible;
    this.filterGroupComps.forEach(function (filterGroup, idx) {
      recursivelySearch(filterGroup, false);
      if (firstVisible === undefined) {
        if (!agGridCommunity._.containsClass(filterGroup.getGui(), 'ag-hidden')) {
          firstVisible = idx;
          lastVisible = idx;
        }
      } else if (!agGridCommunity._.containsClass(filterGroup.getGui(), 'ag-hidden') && lastVisible !== idx) {
        lastVisible = idx;
      }
    });
    this.setFirstAndLastVisible(firstVisible, lastVisible);
  };
  FiltersToolPanelListPanel.prototype.setFirstAndLastVisible = function (firstIdx, lastIdx) {
    this.filterGroupComps.forEach(function (filterGroup, idx) {
      agGridCommunity._.removeCssClass(filterGroup.getGui(), 'ag-first-group-visible');
      agGridCommunity._.removeCssClass(filterGroup.getGui(), 'ag-last-group-visible');
      if (idx === firstIdx) {
        agGridCommunity._.addCssClass(filterGroup.getGui(), 'ag-first-group-visible');
      }
      if (idx === lastIdx) {
        agGridCommunity._.addCssClass(filterGroup.getGui(), 'ag-last-group-visible');
      }
    });
  };
  FiltersToolPanelListPanel.prototype.refreshFilters = function () {
    this.filterGroupComps.forEach(function (filterGroupComp) {
      return filterGroupComp.refreshFilters();
    });
  };
  FiltersToolPanelListPanel.prototype.destroyFilters = function () {
    this.filterGroupComps = this.destroyBeans(this.filterGroupComps);
    agGridCommunity._.clearElement(this.getGui());
  };
  FiltersToolPanelListPanel.prototype.destroy = function () {
    this.destroyFilters();
    _super.prototype.destroy.call(this);
  };
  FiltersToolPanelListPanel.TEMPLATE = "<div class=\"ag-filter-list-panel\"></div>";
  __decorate$w([agGridCommunity.Autowired("gridApi")], FiltersToolPanelListPanel.prototype, "gridApi", void 0);
  __decorate$w([agGridCommunity.Autowired("columnApi")], FiltersToolPanelListPanel.prototype, "columnApi", void 0);
  __decorate$w([agGridCommunity.Autowired('toolPanelColDefService')], FiltersToolPanelListPanel.prototype, "toolPanelColDefService", void 0);
  __decorate$w([agGridCommunity.Autowired('columnController')], FiltersToolPanelListPanel.prototype, "columnController", void 0);
  return FiltersToolPanelListPanel;
}(agGridCommunity.Component);
var __extends$B =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$x =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FiltersToolPanel = /** @class */function (_super) {
  __extends$B(FiltersToolPanel, _super);
  function FiltersToolPanel() {
    var _this = _super.call(this, FiltersToolPanel.TEMPLATE) || this;
    _this.initialised = false;
    _this.listenerDestroyFuncs = [];
    return _this;
  }
  FiltersToolPanel.prototype.init = function (params) {
    // if initialised is true, means this is a refresh
    if (this.initialised) {
      this.listenerDestroyFuncs.forEach(function (func) {
        return func();
      });
      this.listenerDestroyFuncs = [];
    }
    this.initialised = true;
    var defaultParams = {
      suppressExpandAll: false,
      suppressFilterSearch: false,
      suppressSyncLayoutWithGrid: false,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    agGridCommunity._.mergeDeep(defaultParams, params);
    this.params = defaultParams;
    this.filtersToolPanelHeaderPanel.init(this.params);
    this.filtersToolPanelListPanel.init(this.params);
    var hideExpand = this.params.suppressExpandAll;
    var hideSearch = this.params.suppressFilterSearch;
    if (hideExpand && hideSearch) {
      this.filtersToolPanelHeaderPanel.setDisplayed(false);
    }
    // this is necessary to prevent a memory leak while refreshing the tool panel
    this.listenerDestroyFuncs.push(this.addManagedListener(this.filtersToolPanelHeaderPanel, 'expandAll', this.onExpandAll.bind(this)), this.addManagedListener(this.filtersToolPanelHeaderPanel, 'collapseAll', this.onCollapseAll.bind(this)), this.addManagedListener(this.filtersToolPanelHeaderPanel, 'searchChanged', this.onSearchChanged.bind(this)), this.addManagedListener(this.filtersToolPanelListPanel, 'groupExpanded', this.onGroupExpanded.bind(this)));
  };
  // lazy initialise the panel
  FiltersToolPanel.prototype.setVisible = function (visible) {
    _super.prototype.setDisplayed.call(this, visible);
    if (visible && !this.initialised) {
      this.init(this.params);
    }
  };
  FiltersToolPanel.prototype.onExpandAll = function () {
    this.filtersToolPanelListPanel.expandFilterGroups(true);
  };
  FiltersToolPanel.prototype.onCollapseAll = function () {
    this.filtersToolPanelListPanel.expandFilterGroups(false);
  };
  FiltersToolPanel.prototype.onSearchChanged = function (event) {
    this.filtersToolPanelListPanel.performFilterSearch(event.searchText);
  };
  FiltersToolPanel.prototype.setFilterLayout = function (colDefs) {
    this.filtersToolPanelListPanel.setFiltersLayout(colDefs);
  };
  FiltersToolPanel.prototype.onGroupExpanded = function (event) {
    this.filtersToolPanelHeaderPanel.setExpandState(event.state);
  };
  FiltersToolPanel.prototype.expandFilterGroups = function (groupIds) {
    this.filtersToolPanelListPanel.expandFilterGroups(true, groupIds);
  };
  FiltersToolPanel.prototype.collapseFilterGroups = function (groupIds) {
    this.filtersToolPanelListPanel.expandFilterGroups(false, groupIds);
  };
  FiltersToolPanel.prototype.expandFilters = function (colIds) {
    this.filtersToolPanelListPanel.expandFilters(true, colIds);
  };
  FiltersToolPanel.prototype.collapseFilters = function (colIds) {
    this.filtersToolPanelListPanel.expandFilters(false, colIds);
  };
  FiltersToolPanel.prototype.syncLayoutWithGrid = function () {
    this.filtersToolPanelListPanel.syncFilterLayout();
  };
  FiltersToolPanel.prototype.refresh = function () {
    this.init(this.params);
  };
  // this is a user component, and IComponent has "public destroy()" as part of the interface.
  // so we need to override destroy() just to make the method public.
  FiltersToolPanel.prototype.destroy = function () {
    _super.prototype.destroy.call(this);
  };
  FiltersToolPanel.TEMPLATE = "<div class=\"ag-filter-toolpanel\">\n            <ag-filters-tool-panel-header ref=\"filtersToolPanelHeaderPanel\"></ag-filters-tool-panel-header>\n            <ag-filters-tool-panel-list ref=\"filtersToolPanelListPanel\"></ag-filters-tool-panel-list>\n         </div>";
  __decorate$x([agGridCommunity.RefSelector('filtersToolPanelHeaderPanel')], FiltersToolPanel.prototype, "filtersToolPanelHeaderPanel", void 0);
  __decorate$x([agGridCommunity.RefSelector('filtersToolPanelListPanel')], FiltersToolPanel.prototype, "filtersToolPanelListPanel", void 0);
  __decorate$x([agGridCommunity.Autowired('gridApi')], FiltersToolPanel.prototype, "gridApi", void 0);
  __decorate$x([agGridCommunity.Autowired('columnApi')], FiltersToolPanel.prototype, "columnApi", void 0);
  return FiltersToolPanel;
}(agGridCommunity.Component);
var FiltersToolPanelModule = {
  moduleName: agGridCommunity.ModuleNames.FiltersToolPanelModule,
  beans: [],
  agStackComponents: [{
    componentName: 'AgFiltersToolPanelHeader',
    componentClass: FiltersToolPanelHeaderPanel
  }, {
    componentName: 'AgFiltersToolPanelList',
    componentClass: FiltersToolPanelListPanel
  }],
  userComponents: [{
    componentName: 'agFiltersToolPanel',
    componentClass: FiltersToolPanel
  }],
  dependantModules: [SideBarModule, EnterpriseCoreModule]
};
var __extends$C =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$y =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ChartDatasource = /** @class */function (_super) {
  __extends$C(ChartDatasource, _super);
  function ChartDatasource() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ChartDatasource.prototype.getData = function (params) {
    if (params.crossFiltering) {
      if (params.grouping) {
        console.warn("ag-grid: crossing filtering with row grouping is not supported.");
        return {
          data: [],
          columnNames: {}
        };
      }
      if (!this.gridOptionsWrapper.isRowModelDefault()) {
        console.warn("ag-grid: crossing filtering is only supported in the client side row model.");
        return {
          data: [],
          columnNames: {}
        };
      }
    }
    var isServerSide = this.gridOptionsWrapper.isRowModelServerSide();
    if (isServerSide && params.pivoting) {
      this.updatePivotKeysForSSRM();
    }
    var result = this.extractRowsFromGridRowModel(params);
    result.data = this.aggregateRowsByDimension(params, result.data);
    return result;
  };
  ChartDatasource.prototype.extractRowsFromGridRowModel = function (params) {
    var _this = this;
    var extractedRowData = [];
    var columnNames = {};
    // maps used to keep track of expanded groups that need to be removed
    var groupNodeIndexes = {};
    var groupsToRemove = {};
    // only used when cross filtering
    var filteredNodes = {};
    var allRowNodes = [];
    var numRows;
    if (params.crossFiltering) {
      filteredNodes = this.getFilteredRowNodes();
      allRowNodes = this.getAllRowNodes();
      numRows = allRowNodes.length;
    } else {
      // make sure enough rows in range to chart. if user filters and less rows, then end row will be
      // the last displayed row, not where the range ends.
      var modelLastRow = this.gridRowModel.getRowCount() - 1;
      var rangeLastRow = params.endRow >= 0 ? Math.min(params.endRow, modelLastRow) : modelLastRow;
      numRows = rangeLastRow - params.startRow + 1;
    }
    var _loop_1 = function (i) {
      var data = {};
      var rowNode = params.crossFiltering ? allRowNodes[i] : this_1.gridRowModel.getRow(i + params.startRow);
      // first get data for dimensions columns
      params.dimensionCols.forEach(function (col) {
        var colId = col.colId;
        var column = _this.columnController.getGridColumn(colId);
        if (column) {
          var valueObject = _this.valueService.getValue(column, rowNode);
          // when grouping we also need to build up multi category labels for charts
          if (params.grouping) {
            var valueString = valueObject && valueObject.toString ? String(valueObject.toString()) : '';
            // traverse parents to extract group label path
            var labels = ChartDatasource.getGroupLabels(rowNode, valueString);
            data[colId] = {
              labels: labels,
              toString: function () {
                return this.labels.filter(function (l) {
                  return !!l;
                }).reverse().join(' - ');
              }
            };
            // keep track of group node indexes so they can be padded when other groups are expanded
            if (rowNode.group) {
              groupNodeIndexes[labels.toString()] = i;
            }
            // if node (group or leaf) has parents then it is expanded and should be removed
            var groupKey = labels.slice(1, labels.length).toString();
            if (groupKey) {
              groupsToRemove[groupKey] = groupNodeIndexes[groupKey];
            }
          } else {
            // leaf nodes can be directly added to dimension columns
            data[colId] = valueObject;
          }
        } else {
          // introduce a default category when no dimensions exist with a value based off row index (+1)
          data[ChartDataModel.DEFAULT_CATEGORY] = i + 1;
        }
      });
      // then get data for value columns
      params.valueCols.forEach(function (col) {
        var columnNamesArr = [];
        // pivot keys should be added first
        var pivotKeys = col.getColDef().pivotKeys;
        if (pivotKeys) {
          columnNamesArr = pivotKeys.slice();
        }
        // then add column header name to results
        var headerName = col.getColDef().headerName;
        if (headerName) {
          columnNamesArr.push(headerName);
        }
        // add array of column names to results
        if (columnNamesArr.length > 0) {
          columnNames[col.getId()] = columnNamesArr;
        }
        var colId = col.getColId();
        if (params.crossFiltering) {
          var filteredOutColId = colId + '-filtered-out';
          // add data value to value column
          var value = _this.valueService.getValue(col, rowNode);
          var actualValue = value != null && typeof value.toNumber === 'function' ? value.toNumber() : value;
          if (filteredNodes[rowNode.id]) {
            data[colId] = actualValue;
            data[filteredOutColId] = params.aggFunc || params.isScatter ? undefined : 0;
          } else {
            data[colId] = params.aggFunc || params.isScatter ? undefined : 0;
            data[filteredOutColId] = actualValue;
          }
        } else {
          // add data value to value column
          var value = _this.valueService.getValue(col, rowNode);
          data[colId] = value != null && typeof value.toNumber === 'function' ? value.toNumber() : value;
        }
      });
      // add data to results
      extractedRowData.push(data);
    };
    var this_1 = this;
    for (var i = 0; i < numRows; i++) {
      _loop_1(i);
    }
    if (params.grouping) {
      var groupIndexesToRemove_1 = agGridCommunity._.values(groupsToRemove);
      extractedRowData = extractedRowData.filter(function (_1, index) {
        return !agGridCommunity._.includes(groupIndexesToRemove_1, index);
      });
    }
    return {
      data: extractedRowData,
      columnNames: columnNames
    };
  };
  ChartDatasource.prototype.aggregateRowsByDimension = function (params, dataFromGrid) {
    var _this = this;
    var dimensionCols = params.dimensionCols;
    if (!params.aggFunc || dimensionCols.length === 0) {
      return dataFromGrid;
    }
    var lastCol = agGridCommunity._.last(dimensionCols);
    var lastColId = lastCol && lastCol.colId;
    var map = {};
    var dataAggregated = [];
    dataFromGrid.forEach(function (data) {
      var currentMap = map;
      dimensionCols.forEach(function (col) {
        var colId = col.colId;
        var key = data[colId];
        if (colId === lastColId) {
          var groupItem_1 = currentMap[key];
          if (!groupItem_1) {
            groupItem_1 = {
              __children: []
            };
            dimensionCols.forEach(function (dimCol) {
              var dimColId = dimCol.colId;
              groupItem_1[dimColId] = data[dimColId];
            });
            currentMap[key] = groupItem_1;
            dataAggregated.push(groupItem_1);
          }
          groupItem_1.__children.push(data);
        } else {
          // map of maps
          if (!currentMap[key]) {
            currentMap[key] = {};
          }
          currentMap = currentMap[key];
        }
      });
    });
    if (agGridCommunity.ModuleRegistry.assertRegistered(agGridCommunity.ModuleNames.RowGroupingModule, 'Charting Aggregation')) {
      dataAggregated.forEach(function (groupItem) {
        return params.valueCols.forEach(function (col) {
          if (params.crossFiltering) {
            params.valueCols.forEach(function (valueCol) {
              // filtered data
              var dataToAgg = groupItem.__children.filter(function (child) {
                return typeof child[valueCol.getColId()] !== 'undefined';
              }).map(function (child) {
                return child[valueCol.getColId()];
              });
              var aggResult = _this.aggregationStage.aggregateValues(dataToAgg, params.aggFunc);
              groupItem[valueCol.getId()] = aggResult && typeof aggResult.value !== 'undefined' ? aggResult.value : aggResult;
              // filtered out data
              var filteredOutColId = valueCol.getId() + '-filtered-out';
              var dataToAggFiltered = groupItem.__children.filter(function (child) {
                return typeof child[filteredOutColId] !== 'undefined';
              }).map(function (child) {
                return child[filteredOutColId];
              });
              var aggResultFiltered = _this.aggregationStage.aggregateValues(dataToAggFiltered, params.aggFunc);
              groupItem[filteredOutColId] = aggResultFiltered && typeof aggResultFiltered.value !== 'undefined' ? aggResultFiltered.value : aggResultFiltered;
            });
          } else {
            var dataToAgg = groupItem.__children.map(function (child) {
              return child[col.getId()];
            });
            var aggResult = 0;
            if (agGridCommunity.ModuleRegistry.assertRegistered(agGridCommunity.ModuleNames.RowGroupingModule, 'Charting Aggregation')) {
              aggResult = _this.aggregationStage.aggregateValues(dataToAgg, params.aggFunc);
            }
            groupItem[col.getId()] = aggResult && typeof aggResult.value !== 'undefined' ? aggResult.value : aggResult;
          }
        });
      });
    }
    return dataAggregated;
  };
  ChartDatasource.prototype.updatePivotKeysForSSRM = function () {
    var secondaryColumns = this.columnController.getSecondaryColumns();
    if (!secondaryColumns) {
      return;
    }
    // we don't know what the application will use for the pivot key separator (i.e. '_' or '|' ) as the
    // secondary columns are provided to grid by the application via columnApi.setSecondaryColumns()
    var pivotKeySeparator = this.extractPivotKeySeparator(secondaryColumns);
    // 'pivotKeys' is not used by the SSRM for pivoting so it is safe to reuse this colDef property, this way
    // the same logic can be used for CSRM and SSRM to extract legend names in extractRowsFromGridRowModel()
    secondaryColumns.forEach(function (col) {
      var keys = col.getColId().split(pivotKeySeparator);
      col.getColDef().pivotKeys = keys.slice(0, keys.length - 1);
    });
  };
  ChartDatasource.prototype.extractPivotKeySeparator = function (secondaryColumns) {
    if (secondaryColumns.length === 0) {
      return "";
    }
    var extractSeparator = function (columnGroup, childId) {
      var groupId = columnGroup.getGroupId();
      if (!columnGroup.getParent()) {
        // removing groupId ('2000') from childId ('2000|Swimming') yields '|Swimming' so first char is separator
        return childId.split(groupId)[1][0];
      }
      return extractSeparator(columnGroup.getParent(), groupId);
    };
    var firstSecondaryCol = secondaryColumns[0];
    return extractSeparator(firstSecondaryCol.getParent(), firstSecondaryCol.getColId());
  };
  ChartDatasource.getGroupLabels = function (rowNode, initialLabel) {
    var labels = [initialLabel];
    while (rowNode && rowNode.level !== 0) {
      rowNode = rowNode.parent;
      if (rowNode) {
        labels.push(rowNode.key);
      }
    }
    return labels;
  };
  ChartDatasource.prototype.getFilteredRowNodes = function () {
    var filteredNodes = {};
    this.gridRowModel.forEachNodeAfterFilterAndSort(function (rowNode) {
      filteredNodes[rowNode.id] = rowNode;
    });
    return filteredNodes;
  };
  ChartDatasource.prototype.getAllRowNodes = function () {
    var allRowNodes = [];
    this.gridRowModel.forEachNode(function (rowNode) {
      allRowNodes.push(rowNode);
    });
    return this.sortRowNodes(allRowNodes);
  };
  ChartDatasource.prototype.sortRowNodes = function (rowNodes) {
    var sortOptions = this.sortController.getSortOptions();
    var noSort = !sortOptions || sortOptions.length == 0;
    if (noSort) return rowNodes;
    return this.rowNodeSorter.doFullSort(rowNodes, sortOptions);
  };
  __decorate$y([agGridCommunity.Autowired('rowModel')], ChartDatasource.prototype, "gridRowModel", void 0);
  __decorate$y([agGridCommunity.Autowired('valueService')], ChartDatasource.prototype, "valueService", void 0);
  __decorate$y([agGridCommunity.Autowired('columnController')], ChartDatasource.prototype, "columnController", void 0);
  __decorate$y([agGridCommunity.Autowired('rowNodeSorter')], ChartDatasource.prototype, "rowNodeSorter", void 0);
  __decorate$y([agGridCommunity.Autowired('sortController')], ChartDatasource.prototype, "sortController", void 0);
  __decorate$y([agGridCommunity.Optional('aggregationStage')], ChartDatasource.prototype, "aggregationStage", void 0);
  return ChartDatasource;
}(agGridCommunity.BeanStub);
var __extends$D =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$z =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __spreadArrays$5 =  false || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
};
var ChartDataModel = /** @class */function (_super) {
  __extends$D(ChartDataModel, _super);
  function ChartDataModel(params) {
    var _this = _super.call(this) || this;
    _this.dimensionColState = [];
    _this.valueColState = [];
    _this.unlinked = false;
    _this.grouping = false;
    _this.crossFiltering = false;
    _this.columnNames = {};
    _this.pivotChart = params.pivotChart;
    _this.chartType = params.chartType;
    _this.chartThemeName = params.chartThemeName;
    _this.aggFunc = params.aggFunc;
    _this.referenceCellRange = params.cellRange;
    _this.suppliedCellRange = params.cellRange;
    _this.suppressChartRanges = params.suppressChartRanges;
    _this.unlinked = !!params.unlinkChart;
    _this.crossFiltering = !!params.crossFiltering;
    // this is used to associate chart ranges with charts
    _this.chartId = _this.generateId();
    return _this;
  }
  ChartDataModel.prototype.init = function () {
    this.datasource = this.createManagedBean(new ChartDatasource());
    this.updateCellRanges();
  };
  ChartDataModel.prototype.updateCellRanges = function (updatedColState) {
    if (this.valueCellRange) {
      this.referenceCellRange = this.valueCellRange;
    }
    var _a = this.getAllChartColumns(),
      dimensionCols = _a.dimensionCols,
      valueCols = _a.valueCols;
    var allColsFromRanges = this.getAllColumnsFromRanges();
    if (updatedColState) {
      this.updateColumnState(updatedColState);
    }
    this.setDimensionCellRange(dimensionCols, allColsFromRanges, updatedColState);
    this.setValueCellRange(valueCols, allColsFromRanges, updatedColState);
    if (!updatedColState) {
      this.resetColumnState();
      // dimension / category cell range could be out of sync after resetting column state when row grouping
      this.syncDimensionCellRange();
    }
    this.updateData();
  };
  ChartDataModel.prototype.getData = function () {
    return this.chartData;
  };
  ChartDataModel.prototype.isGroupActive = function () {
    var usingTreeData = this.gridOptionsWrapper.isTreeData();
    var groupedCols = usingTreeData ? null : this.columnController.getRowGroupColumns();
    return usingTreeData || groupedCols && groupedCols.length > 0;
  };
  ChartDataModel.prototype.isGrouping = function () {
    // charts only group when the selected category is a group column
    var colId = this.getSelectedDimension().colId;
    var displayedGroupCols = this.columnController.getGroupDisplayColumns();
    var groupDimensionSelected = displayedGroupCols.map(function (col) {
      return col.getColId();
    }).some(function (id) {
      return id === colId;
    });
    return !!this.isGroupActive() && groupDimensionSelected;
  };
  ChartDataModel.prototype.isPivotActive = function () {
    return this.columnController.isPivotActive();
  };
  ChartDataModel.prototype.isPivotMode = function () {
    return this.columnController.isPivotMode();
  };
  ChartDataModel.prototype.isPivotChart = function () {
    return this.pivotChart;
  };
  ChartDataModel.prototype.getChartId = function () {
    return this.chartId;
  };
  ChartDataModel.prototype.getValueColState = function () {
    return this.valueColState.map(this.displayNameMapper.bind(this));
  };
  ChartDataModel.prototype.getDimensionColState = function () {
    return this.dimensionColState;
  };
  ChartDataModel.prototype.getCellRanges = function () {
    return [this.dimensionCellRange, this.valueCellRange].filter(function (r) {
      return r;
    });
  };
  ChartDataModel.prototype.getCellRangeParams = function () {
    var cellRanges = this.getCellRanges();
    var firstCellRange = cellRanges[0];
    var startRow = firstCellRange && firstCellRange.startRow || null;
    var endRow = firstCellRange && firstCellRange.endRow || null;
    return {
      rowStartIndex: startRow && startRow.rowIndex,
      rowStartPinned: startRow && startRow.rowPinned,
      rowEndIndex: endRow && endRow.rowIndex,
      rowEndPinned: endRow && endRow.rowPinned,
      columns: cellRanges.reduce(function (columns, value) {
        return columns.concat(value.columns.map(function (c) {
          return c.getId();
        }));
      }, [])
    };
  };
  ChartDataModel.prototype.setChartType = function (chartType) {
    this.chartType = chartType;
  };
  ChartDataModel.prototype.getChartType = function () {
    return this.chartType;
  };
  ChartDataModel.prototype.setChartThemeName = function (chartThemeName) {
    this.chartThemeName = chartThemeName;
  };
  ChartDataModel.prototype.getChartThemeName = function () {
    return this.chartThemeName;
  };
  ChartDataModel.prototype.isSuppressChartRanges = function () {
    return this.suppressChartRanges;
  };
  ChartDataModel.prototype.isUnlinked = function () {
    return this.unlinked;
  };
  ChartDataModel.prototype.toggleUnlinked = function () {
    this.unlinked = !this.unlinked;
  };
  ChartDataModel.prototype.getAggFunc = function () {
    return this.aggFunc;
  };
  ChartDataModel.prototype.getSelectedValueColState = function () {
    return this.getValueColState().filter(function (cs) {
      return cs.selected;
    });
  };
  ChartDataModel.prototype.getSelectedValueCols = function () {
    return this.valueColState.filter(function (cs) {
      return cs.selected;
    }).map(function (cs) {
      return cs.column;
    });
  };
  ChartDataModel.prototype.getSelectedDimension = function () {
    return this.dimensionColState.filter(function (cs) {
      return cs.selected;
    })[0];
  };
  ChartDataModel.prototype.createCellRange = function (type) {
    var columns = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      columns[_i - 1] = arguments[_i];
    }
    return {
      id: this.chartId,
      startRow: this.referenceCellRange.startRow,
      endRow: this.referenceCellRange.endRow,
      columns: columns,
      startColumn: type === agGridCommunity.CellRangeType.DIMENSION ? columns[0] : this.referenceCellRange.startColumn,
      type: type
    };
  };
  ChartDataModel.prototype.getAllColumnsFromRanges = function () {
    if (this.pivotChart) {
      return agGridCommunity._.convertToSet(this.columnController.getAllDisplayedColumns());
    }
    var columns = this.dimensionCellRange || this.valueCellRange ? [] : this.referenceCellRange.columns;
    if (this.dimensionCellRange) {
      columns.push.apply(columns, this.dimensionCellRange.columns);
    }
    if (this.valueCellRange) {
      columns.push.apply(columns, this.valueCellRange.columns);
    }
    return agGridCommunity._.convertToSet(columns);
  };
  ChartDataModel.prototype.getColDisplayName = function (col) {
    return this.columnController.getDisplayNameForColumn(col, 'chart');
  };
  ChartDataModel.prototype.getRowIndexes = function () {
    var startRow = 0,
      endRow = 0;
    var rangeController = this.rangeController;
    var range = this.valueCellRange;
    if (rangeController && range) {
      startRow = rangeController.getRangeStartRow(range).rowIndex;
      endRow = rangeController.getRangeEndRow(range).rowIndex;
    }
    return {
      startRow: startRow,
      endRow: endRow
    };
  };
  ChartDataModel.prototype.getAllChartColumns = function () {
    var _this = this;
    var displayedCols = this.columnController.getAllDisplayedColumns();
    var dimensionCols = new Set();
    var valueCols = new Set();
    displayedCols.forEach(function (col) {
      var colDef = col.getColDef();
      var chartDataType = colDef.chartDataType;
      if (chartDataType) {
        // chart data type was specified explicitly
        switch (chartDataType) {
          case 'category':
          case 'time':
            dimensionCols.add(col);
            return;
          case 'series':
            valueCols.add(col);
            return;
          case 'excluded':
            return;
          default:
            console.warn("AG Grid: unexpected chartDataType value '" + chartDataType + "' supplied, instead use 'category', 'series' or 'excluded'");
            break;
        }
      }
      if (colDef.colId === 'ag-Grid-AutoColumn') {
        dimensionCols.add(col);
        return;
      }
      if (!col.isPrimary()) {
        valueCols.add(col);
        return;
      }
      // if 'chartDataType' is not provided then infer type based data contained in first row
      (_this.isNumberCol(col) ? valueCols : dimensionCols).add(col);
    });
    return {
      dimensionCols: dimensionCols,
      valueCols: valueCols
    };
  };
  ChartDataModel.prototype.isNumberCol = function (col) {
    if (col.getColId() === 'ag-Grid-AutoColumn') {
      return false;
    }
    var row = this.rowRenderer.getRowNode({
      rowIndex: 0,
      rowPinned: null
    });
    if (!row) {
      return false;
    }
    var cellValue = this.valueService.getValue(col, row);
    if (cellValue == null) {
      cellValue = this.extractLeafData(row, col);
    }
    if (cellValue != null && typeof cellValue.toNumber === 'function') {
      cellValue = cellValue.toNumber();
    }
    return typeof cellValue === 'number';
  };
  ChartDataModel.prototype.extractLeafData = function (row, col) {
    if (!row.allLeafChildren) {
      return null;
    }
    for (var i = 0; i < row.allLeafChildren.length; i++) {
      var childRow = row.allLeafChildren[i];
      var value = this.valueService.getValue(col, childRow);
      if (value != null) {
        return value;
      }
    }
    return null;
  };
  ChartDataModel.prototype.displayNameMapper = function (col) {
    var columnNames = this.columnNames[col.colId];
    col.displayName = columnNames ? columnNames.join(' - ') : this.getColDisplayName(col.column);
    return col;
  };
  ChartDataModel.prototype.generateId = function () {
    return 'id-' + Math.random().toString(36).substr(2, 16);
  };
  ChartDataModel.prototype.updateData = function () {
    var _a = this.getRowIndexes(),
      startRow = _a.startRow,
      endRow = _a.endRow;
    if (this.pivotChart) {
      this.resetColumnState();
    }
    this.grouping = this.isGrouping();
    var params = {
      aggFunc: this.aggFunc,
      dimensionCols: [this.getSelectedDimension()],
      grouping: this.grouping,
      pivoting: this.isPivotActive(),
      crossFiltering: this.crossFiltering,
      valueCols: this.getSelectedValueCols(),
      startRow: startRow,
      endRow: endRow,
      isScatter: agGridCommunity._.includes([agGridCommunity.ChartType.Scatter, agGridCommunity.ChartType.Bubble], this.chartType)
    };
    var result = this.datasource.getData(params);
    this.chartData = result.data;
    this.columnNames = result.columnNames;
  };
  ChartDataModel.prototype.resetColumnState = function () {
    var _this = this;
    var _a = this.getAllChartColumns(),
      dimensionCols = _a.dimensionCols,
      valueCols = _a.valueCols;
    var allCols = this.getAllColumnsFromRanges();
    var isInitialising = this.valueColState.length < 1;
    this.dimensionColState = [];
    this.valueColState = [];
    var hasSelectedDimension = false;
    var order = 1;
    var aggFuncDimension = this.suppliedCellRange.columns[0]; //TODO
    dimensionCols.forEach(function (column) {
      var isAutoGroupCol = column.getColId() === 'ag-Grid-AutoColumn';
      var selected = false;
      if (_this.crossFiltering && _this.aggFunc) {
        if (aggFuncDimension.getColId() === column.getColId()) {
          selected = true;
        }
      } else {
        selected = isAutoGroupCol ? true : !hasSelectedDimension && allCols.has(column);
      }
      _this.dimensionColState.push({
        column: column,
        colId: column.getColId(),
        displayName: _this.getColDisplayName(column),
        selected: selected,
        order: order++
      });
      if (selected) {
        hasSelectedDimension = true;
      }
    });
    var defaultCategory = {
      colId: ChartDataModel.DEFAULT_CATEGORY,
      displayName: this.chartTranslator.translate('defaultCategory'),
      selected: !hasSelectedDimension,
      order: 0
    };
    this.dimensionColState.unshift(defaultCategory);
    var valueColumnsFromReferenceRange = this.referenceCellRange.columns.filter(function (c) {
      return valueCols.has(c);
    });
    valueCols.forEach(function (column) {
      // first time the value cell range is set, preserve the column order from the supplied range
      if (isInitialising && agGridCommunity._.includes(_this.referenceCellRange.columns, column)) {
        column = valueColumnsFromReferenceRange.shift();
      }
      _this.valueColState.push({
        column: column,
        colId: column.getColId(),
        displayName: _this.getColDisplayName(column),
        selected: allCols.has(column),
        order: order++
      });
    });
  };
  ChartDataModel.prototype.updateColumnState = function (updatedCol) {
    var idsMatch = function (cs) {
      return cs.colId === updatedCol.colId;
    };
    var _a = this,
      dimensionColState = _a.dimensionColState,
      valueColState = _a.valueColState;
    if (dimensionColState.filter(idsMatch).length > 0) {
      // only one dimension should be selected
      dimensionColState.forEach(function (cs) {
        return cs.selected = idsMatch(cs);
      });
    } else {
      // just update the selected value on the supplied value column
      valueColState.filter(idsMatch).forEach(function (cs) {
        return cs.selected = updatedCol.selected;
      });
    }
    var allColumns = __spreadArrays$5(dimensionColState, valueColState);
    var orderedColIds = [];
    // calculate new order
    allColumns.forEach(function (col, i) {
      if (i === updatedCol.order) {
        orderedColIds.push(updatedCol.colId);
      }
      if (col.colId !== updatedCol.colId) {
        orderedColIds.push(col.colId);
      }
    });
    // update col state with new order
    allColumns.forEach(function (col) {
      var order = orderedColIds.indexOf(col.colId);
      col.order = order >= 0 ? orderedColIds.indexOf(col.colId) : allColumns.length - 1;
    });
    this.reorderColState();
  };
  ChartDataModel.prototype.reorderColState = function () {
    var _a = this,
      dimensionColState = _a.dimensionColState,
      valueColState = _a.valueColState;
    dimensionColState.sort(function (a, b) {
      return a.order - b.order;
    });
    valueColState.sort(function (a, b) {
      return a.order - b.order;
    });
  };
  ChartDataModel.prototype.setDimensionCellRange = function (dimensionCols, colsInRange, updatedColState) {
    var _this = this;
    this.dimensionCellRange = undefined;
    var dimensionColState = this.dimensionColState;
    if (!updatedColState && !dimensionColState.length) {
      // use first dimension column in range by default
      dimensionCols.forEach(function (col) {
        if (_this.dimensionCellRange || !colsInRange.has(col)) {
          return;
        }
        _this.dimensionCellRange = _this.createCellRange(agGridCommunity.CellRangeType.DIMENSION, col);
      });
      return;
    }
    var selectedDimensionColState = updatedColState;
    if (this.crossFiltering && this.aggFunc) {
      var aggFuncDimension_1 = this.suppliedCellRange.columns[0]; //TODO
      selectedDimensionColState = this.dimensionColState.filter(function (cs) {
        return cs.colId === aggFuncDimension_1.getColId();
      })[0];
    } else if (!selectedDimensionColState || !dimensionCols.has(selectedDimensionColState.column)) {
      selectedDimensionColState = this.dimensionColState.filter(function (cs) {
        return cs.selected;
      })[0];
    }
    if (selectedDimensionColState && selectedDimensionColState.colId !== ChartDataModel.DEFAULT_CATEGORY) {
      this.dimensionCellRange = this.createCellRange(agGridCommunity.CellRangeType.DIMENSION, selectedDimensionColState.column);
    }
  };
  ChartDataModel.prototype.setValueCellRange = function (valueCols, colsInRange, updatedColState) {
    this.valueCellRange = undefined;
    var selectedValueCols = [];
    valueCols.forEach(function (col) {
      if (updatedColState && updatedColState.colId === col.getColId()) {
        if (updatedColState.selected) {
          selectedValueCols.push(updatedColState.column);
        }
      } else if (colsInRange.has(col)) {
        selectedValueCols.push(col);
      }
    });
    if (selectedValueCols.length > 0) {
      var orderedColIds_1 = [];
      if (this.valueColState.length > 0) {
        orderedColIds_1 = this.valueColState.map(function (c) {
          return c.colId;
        });
      } else {
        colsInRange.forEach(function (c) {
          return orderedColIds_1.push(c.getColId());
        });
      }
      selectedValueCols.sort(function (a, b) {
        return orderedColIds_1.indexOf(a.getColId()) - orderedColIds_1.indexOf(b.getColId());
      });
      this.valueCellRange = this.createCellRange.apply(this, __spreadArrays$5([agGridCommunity.CellRangeType.VALUE], selectedValueCols));
    }
  };
  ChartDataModel.prototype.syncDimensionCellRange = function () {
    var selectedDimension = this.getSelectedDimension();
    if (selectedDimension && selectedDimension.column) {
      this.dimensionCellRange = this.createCellRange(agGridCommunity.CellRangeType.DIMENSION, selectedDimension.column);
    }
  };
  ChartDataModel.DEFAULT_CATEGORY = 'AG-GRID-DEFAULT-CATEGORY';
  __decorate$z([agGridCommunity.Autowired('columnController')], ChartDataModel.prototype, "columnController", void 0);
  __decorate$z([agGridCommunity.Autowired('valueService')], ChartDataModel.prototype, "valueService", void 0);
  __decorate$z([agGridCommunity.Autowired('rangeController')], ChartDataModel.prototype, "rangeController", void 0);
  __decorate$z([agGridCommunity.Autowired('rowRenderer')], ChartDataModel.prototype, "rowRenderer", void 0);
  __decorate$z([agGridCommunity.Autowired('chartTranslator')], ChartDataModel.prototype, "chartTranslator", void 0);
  __decorate$z([agGridCommunity.PostConstruct], ChartDataModel.prototype, "init", null);
  return ChartDataModel;
}(agGridCommunity.BeanStub);
var Padding = /** @class */function () {
  function Padding(top, right, bottom, left) {
    if (top === void 0) {
      top = 0;
    }
    if (right === void 0) {
      right = top;
    }
    if (bottom === void 0) {
      bottom = top;
    }
    if (left === void 0) {
      left = right;
    }
    this.top = top;
    this.right = right;
    this.bottom = bottom;
    this.left = left;
  }
  Padding.prototype.clear = function () {
    this.top = this.right = this.bottom = this.left = 0;
  };
  return Padding;
}();

// For small data structs like a bounding box, objects are superior to arrays
// in terms of performance (by 3-4% in Chrome 71, Safari 12 and by 20% in Firefox 64).
// They are also self descriptive and harder to abuse.
// For example, one has to do:
// `ctx.strokeRect(bbox.x, bbox.y, bbox.width, bbox.height);`
// rather than become enticed by the much slower:
// `ctx.strokeRect(...bbox);`
// https://jsperf.com/array-vs-object-create-access
var BBox = /** @class */function () {
  function BBox(x, y, width, height) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
  }
  BBox.prototype.isValid = function () {
    return isFinite(this.x) && isFinite(this.y) && isFinite(this.width) && isFinite(this.height);
  };
  BBox.prototype.dilate = function (value) {
    this.x -= value;
    this.y -= value;
    this.width += value * 2;
    this.height += value * 2;
  };
  BBox.prototype.containsPoint = function (x, y) {
    return x >= this.x && x <= this.x + this.width && y >= this.y && y <= this.y + this.height;
  };
  BBox.prototype.render = function (ctx, params) {
    if (params === void 0) {
      params = BBox.noParams;
    }
    ctx.save();
    if (params.resetTransform) {
      ctx.setTransform(1, 0, 0, 1, 0, 0);
    }
    ctx.strokeStyle = params.strokeStyle || 'cyan';
    ctx.lineWidth = params.lineWidth || 1;
    ctx.strokeRect(this.x, this.y, this.width, this.height);
    if (params.label) {
      ctx.fillStyle = params.fillStyle || 'black';
      ctx.textBaseline = 'bottom';
      ctx.fillText(params.label, this.x, this.y);
    }
    ctx.restore();
  };
  BBox.noParams = {};
  return BBox;
}();

/**
 * As of Jan 8, 2019, Firefox still doesn't implement
 * `getTransform(): DOMMatrix;`
 * `setTransform(transform?: DOMMatrix2DInit)`
 * in the `CanvasRenderingContext2D`.
 * Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=928150
 * IE11 and Edge 44 also don't have the support.
 * Thus this class, to keep track of the current transform and
 * combine transformations.
 * Standards:
 * https://html.spec.whatwg.org/dev/canvas.html
 * https://www.w3.org/TR/geometry-1/
 */
var Matrix = /** @class */function () {
  function Matrix(elements) {
    if (elements === void 0) {
      elements = [1, 0, 0, 1, 0, 0];
    }
    this.elements = elements;
  }
  Matrix.prototype.setElements = function (elements) {
    var e = this.elements;
    // `this.elements = elements.slice()` is 4-5 times slower
    // (in Chrome 71 and FF 64) than manually copying elements,
    // since slicing allocates new memory.
    // The performance of passing parameters individually
    // vs as an array is about the same in both browsers, so we
    // go with a single (array of elements) parameter, because
    // `setElements(elements)` and `setElements([a, b, c, d, e, f])`
    // calls give us roughly the same performance, versus
    // `setElements(...elements)` and `setElements(a, b, c, d, e, f)`,
    // where the spread operator causes a 20-30x performance drop
    // (30x when compiled to ES5's `.apply(this, elements)`
    //  20x when used natively).
    e[0] = elements[0];
    e[1] = elements[1];
    e[2] = elements[2];
    e[3] = elements[3];
    e[4] = elements[4];
    e[5] = elements[5];
    return this;
  };
  Matrix.prototype.setIdentityElements = function () {
    var e = this.elements;
    e[0] = 1;
    e[1] = 0;
    e[2] = 0;
    e[3] = 1;
    e[4] = 0;
    e[5] = 0;
    return this;
  };
  Object.defineProperty(Matrix.prototype, "identity", {
    get: function () {
      var e = this.elements;
      return e[0] === 1 && e[1] === 0 && e[2] === 0 && e[3] === 1 && e[4] === 0 && e[5] === 0;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Matrix.prototype, "a", {
    get: function () {
      return this.elements[0];
    },
    set: function (value) {
      this.elements[0] = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Matrix.prototype, "b", {
    get: function () {
      return this.elements[1];
    },
    set: function (value) {
      this.elements[1] = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Matrix.prototype, "c", {
    get: function () {
      return this.elements[2];
    },
    set: function (value) {
      this.elements[2] = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Matrix.prototype, "d", {
    get: function () {
      return this.elements[3];
    },
    set: function (value) {
      this.elements[3] = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Matrix.prototype, "e", {
    get: function () {
      return this.elements[4];
    },
    set: function (value) {
      this.elements[4] = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Matrix.prototype, "f", {
    get: function () {
      return this.elements[5];
    },
    set: function (value) {
      this.elements[5] = value;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Performs the AxB matrix multiplication and saves the result
   * to `C`, if given, or to `A` otherwise.
   */
  Matrix.prototype.AxB = function (A, B, C) {
    var m11 = A[0],
      m12 = A[1],
      m21 = A[2],
      m22 = A[3],
      m31 = A[4],
      m32 = A[5];
    var o11 = B[0],
      o12 = B[1],
      o21 = B[2],
      o22 = B[3],
      o31 = B[4],
      o32 = B[5];
    C = C || A;
    C[0] = m11 * o11 + m21 * o12;
    C[1] = m12 * o11 + m22 * o12;
    C[2] = m11 * o21 + m21 * o22;
    C[3] = m12 * o21 + m22 * o22;
    C[4] = m11 * o31 + m21 * o32 + m31;
    C[5] = m12 * o31 + m22 * o32 + m32;
  };
  /**
   * The `other` matrix gets post-multiplied to the current matrix.
   * Returns the current matrix.
   * @param other
   */
  Matrix.prototype.multiplySelf = function (other) {
    this.AxB(this.elements, other.elements);
    return this;
  };
  /**
   * The `other` matrix gets post-multiplied to the current matrix.
   * Returns a new matrix.
   * @param other
   */
  Matrix.prototype.multiply = function (other) {
    var elements = new Array(6);
    this.AxB(this.elements, other.elements, elements);
    return new Matrix(elements);
  };
  Matrix.prototype.preMultiplySelf = function (other) {
    this.AxB(other.elements, this.elements, this.elements);
    return this;
  };
  /**
   * Returns the inverse of this matrix as a new matrix.
   */
  Matrix.prototype.inverse = function () {
    var _a = this.elements,
      a = _a[0],
      b = _a[1],
      c = _a[2],
      d = _a[3],
      e = _a[4],
      f = _a[5];
    var rD = 1 / (a * d - b * c); // reciprocal of determinant
    a *= rD;
    b *= rD;
    c *= rD;
    d *= rD;
    return new Matrix([d, -b, -c, a, c * f - d * e, b * e - a * f]);
  };
  /**
   * Save the inverse of this matrix to the given matrix.
   */
  Matrix.prototype.inverseTo = function (other) {
    var _a = this.elements,
      a = _a[0],
      b = _a[1],
      c = _a[2],
      d = _a[3],
      e = _a[4],
      f = _a[5];
    var rD = 1 / (a * d - b * c); // reciprocal of determinant
    a *= rD;
    b *= rD;
    c *= rD;
    d *= rD;
    other.setElements([d, -b, -c, a, c * f - d * e, b * e - a * f]);
    return this;
  };
  Matrix.prototype.invertSelf = function () {
    var elements = this.elements;
    var a = elements[0],
      b = elements[1],
      c = elements[2],
      d = elements[3],
      e = elements[4],
      f = elements[5];
    var rD = 1 / (a * d - b * c); // reciprocal of determinant
    a *= rD;
    b *= rD;
    c *= rD;
    d *= rD;
    elements[0] = d;
    elements[1] = -b;
    elements[2] = -c;
    elements[3] = a;
    elements[4] = c * f - d * e;
    elements[5] = b * e - a * f;
    return this;
  };
  Matrix.prototype.clone = function () {
    return new Matrix(this.elements.slice());
  };
  Matrix.prototype.transformPoint = function (x, y) {
    var e = this.elements;
    return {
      x: x * e[0] + y * e[2] + e[4],
      y: x * e[1] + y * e[3] + e[5]
    };
  };
  Matrix.prototype.transformBBox = function (bbox, radius, target) {
    if (radius === void 0) {
      radius = 0;
    }
    var elements = this.elements;
    var xx = elements[0];
    var xy = elements[1];
    var yx = elements[2];
    var yy = elements[3];
    var h_w = bbox.width * 0.5;
    var h_h = bbox.height * 0.5;
    var cx = bbox.x + h_w;
    var cy = bbox.y + h_h;
    var w, h;
    if (radius) {
      h_w -= radius;
      h_h -= radius;
      var sx = Math.sqrt(xx * xx + yx * yx);
      var sy = Math.sqrt(xy * xy + yy * yy);
      w = Math.abs(h_w * xx) + Math.abs(h_h * yx) + Math.abs(sx * radius);
      h = Math.abs(h_w * xy) + Math.abs(h_h * yy) + Math.abs(sy * radius);
    } else {
      w = Math.abs(h_w * xx) + Math.abs(h_h * yx);
      h = Math.abs(h_w * xy) + Math.abs(h_h * yy);
    }
    if (!target) {
      target = new BBox(0, 0, 0, 0);
    }
    target.x = cx * xx + cy * yx + elements[4] - w;
    target.y = cx * xy + cy * yy + elements[5] - h;
    target.width = w + w;
    target.height = h + h;
    return target;
  };
  Matrix.prototype.toContext = function (ctx) {
    // It's fair to say that matrix multiplications are not cheap.
    // However, updating path definitions on every frame isn't either, so
    // it may be cheaper to just translate paths. It's also fair to
    // say, that most paths will have to be re-rendered anyway, say
    // rectangle paths in a bar chart, where an animation would happen when
    // the data set changes and existing bars are morphed into new ones.
    // Or a pie chart, where old sectors are also morphed into new ones.
    // Same for the line chart. The only plausible case where translating
    // existing paths would be enough, is the scatter chart, where marker
    // icons, typically circles, stay the same size. But if circle radii
    // are bound to some data points, even circle paths would have to be
    // updated. And thus it makes sense to optimize for fewer matrix
    // transforms, where transform matrices of paths are mostly identity
    // matrices and `x`/`y`, `centerX`/`centerY` and similar properties
    // are used to define a path at specific coordinates. And only groups
    // are used to collectively apply a transform to a set of nodes.
    // If the matrix is mostly identity (95% of the time),
    // the `if (this.isIdentity)` check can make this call 3-4 times
    // faster on average: https://jsperf.com/matrix-check-first-vs-always-set
    if (this.identity) {
      return;
    }
    var e = this.elements;
    ctx.transform(e[0], e[1], e[2], e[3], e[4], e[5]);
  };
  Matrix.flyweight = function (elements) {
    if (elements) {
      if (elements instanceof Matrix) {
        Matrix.matrix.setElements(elements.elements);
      } else {
        Matrix.matrix.setElements(elements);
      }
    } else {
      Matrix.matrix.setIdentityElements();
    }
    return Matrix.matrix;
  };
  Matrix.matrix = new Matrix();
  return Matrix;
}();
function createId(instance) {
  var constructor = instance.constructor;
  var className = constructor.className;
  if (!className) {
    throw new Error("The " + constructor + " is missing the 'className' property.");
  }
  return className + '-' + (constructor.id = (constructor.id || 0) + 1);
}
var PointerEvents;
(function (PointerEvents) {
  PointerEvents[PointerEvents["All"] = 0] = "All";
  PointerEvents[PointerEvents["None"] = 1] = "None";
})(PointerEvents || (PointerEvents = {}));
/**
 * Abstract scene graph node.
 * Each node can have zero or one parent and belong to zero or one scene.
 */
var Node = /** @class */function () {
  function Node() {
    /**
     * Unique node ID in the form `ClassName-NaturalNumber`.
     */
    this.id = createId(this);
    /**
     * Some number to identify this node, typically within a `Group` node.
     * Usually this will be some enum value used as a selector.
     */
    this.tag = NaN;
    /**
     * To simplify the type system (especially in Selections) we don't have the `Parent` node
     * (one that has children). Instead, we mimic HTML DOM, where any node can have children.
     * But we still need to distinguish regular leaf nodes from container leafs somehow.
     */
    this.isContainerNode = false;
    this._children = [];
    // Used to check for duplicate nodes.
    this.childSet = {}; // new Set<Node>()
    // These matrices may need to have package level visibility
    // for performance optimization purposes.
    this.matrix = new Matrix();
    this.inverseMatrix = new Matrix();
    this._dirtyTransform = false;
    this._scalingX = 1;
    this._scalingY = 1;
    /**
     * The center of scaling.
     * The default value of `null` means the scaling center will be
     * determined automatically, as the center of the bounding box
     * of a node.
     */
    this._scalingCenterX = null;
    this._scalingCenterY = null;
    this._rotationCenterX = null;
    this._rotationCenterY = null;
    /**
     * Rotation angle in radians.
     * The value is set as is. No normalization to the [-180, 180) or [0, 360)
     * interval is performed.
     */
    this._rotation = 0;
    this._translationX = 0;
    this._translationY = 0;
    /**
     * Each time a property of the node that effects how it renders changes
     * the `dirty` property of the node should be set to `true`. The change
     * to the `dirty` property of the node will propagate up to its parents
     * and eventually to the scene, at which point an animation frame callback
     * will be scheduled to rerender the scene and its nodes and reset the `dirty`
     * flags of all nodes and the {@link Scene._dirty | Scene} back to `false`.
     * Since changes to node properties are not rendered immediately, it's possible
     * to change as many properties on as many nodes as needed and the rendering
     * will still only happen once in the next animation frame callback.
     * The animation frame callback is only scheduled if it hasn't been already.
     */
    this._dirty = true;
    this._visible = true;
    this.pointerEvents = PointerEvents.All;
  }
  /**
   * This is meaningfully faster than `instanceof` and should be the preferred way
   * of checking inside loops.
   * @param node
   */
  Node.isNode = function (node) {
    return node ? node.matrix !== undefined : false;
  };
  Node.prototype._setScene = function (value) {
    this._scene = value;
    var children = this.children;
    var n = children.length;
    for (var i = 0; i < n; i++) {
      children[i]._setScene(value);
    }
  };
  Object.defineProperty(Node.prototype, "scene", {
    get: function () {
      return this._scene;
    },
    enumerable: true,
    configurable: true
  });
  Node.prototype._setParent = function (value) {
    this._parent = value;
  };
  Object.defineProperty(Node.prototype, "parent", {
    get: function () {
      return this._parent;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Node.prototype, "children", {
    get: function () {
      return this._children;
    },
    enumerable: true,
    configurable: true
  });
  Node.prototype.countChildren = function (depth) {
    if (depth === void 0) {
      depth = Node.MAX_SAFE_INTEGER;
    }
    if (depth <= 0) {
      return 0;
    }
    var children = this.children;
    var n = children.length;
    var size = n;
    for (var i = 0; i < n; i++) {
      size += children[i].countChildren(depth - 1);
    }
    return size;
  };
  /**
   * Appends one or more new node instances to this parent.
   * If one needs to:
   * - move a child to the end of the list of children
   * - move a child from one parent to another (including parents in other scenes)
   * one should use the {@link insertBefore} method instead.
   * @param nodes A node or nodes to append.
   */
  Node.prototype.append = function (nodes) {
    // Passing a single parameter to an open-ended version of `append`
    // would be 30-35% slower than this.
    if (Node.isNode(nodes)) {
      nodes = [nodes];
    }
    // The function takes an array rather than having open-ended
    // arguments like `...nodes: Node[]` because the latter is
    // transpiled to a function where the `arguments` object
    // is copied to a temporary array inside a loop.
    // So an array is created either way. And if we already have
    // an array of nodes we want to add, we have to use the prohibitively
    // expensive spread operator to pass it to the function,
    // and, on top of that, the copy of the `arguments` is still made.
    var n = nodes.length;
    for (var i = 0; i < n; i++) {
      var node = nodes[i];
      if (node.parent) {
        throw new Error(node + " already belongs to another parent: " + node.parent + ".");
      }
      if (node.scene) {
        throw new Error(node + " already belongs a scene: " + node.scene + ".");
      }
      if (this.childSet[node.id]) {
        // Cast to `any` to avoid `Property 'name' does not exist on type 'Function'`.
        throw new Error("Duplicate " + node.constructor.name + " node: " + node);
      }
      this._children.push(node);
      this.childSet[node.id] = true;
      node._setParent(this);
      node._setScene(this.scene);
    }
    this.dirty = true;
  };
  Node.prototype.appendChild = function (node) {
    if (node.parent) {
      throw new Error(node + " already belongs to another parent: " + node.parent + ".");
    }
    if (node.scene) {
      throw new Error(node + " already belongs a scene: " + node.scene + ".");
    }
    if (this.childSet[node.id]) {
      // Cast to `any` to avoid `Property 'name' does not exist on type 'Function'`.
      throw new Error("Duplicate " + node.constructor.name + " node: " + node);
    }
    this._children.push(node);
    this.childSet[node.id] = true;
    node._setParent(this);
    node._setScene(this.scene);
    this.dirty = true;
    return node;
  };
  Node.prototype.removeChild = function (node) {
    if (node.parent === this) {
      var i = this.children.indexOf(node);
      if (i >= 0) {
        this._children.splice(i, 1);
        delete this.childSet[node.id];
        node._setParent();
        node._setScene();
        this.dirty = true;
        return node;
      }
    }
    throw new Error("The node to be removed is not a child of this node.");
  };
  /**
   * Inserts the node `node` before the existing child node `nextNode`.
   * If `nextNode` is null, insert `node` at the end of the list of children.
   * If the `node` belongs to another parent, it is first removed.
   * Returns the `node`.
   * @param node
   * @param nextNode
   */
  Node.prototype.insertBefore = function (node, nextNode) {
    var parent = node.parent;
    if (node.parent) {
      node.parent.removeChild(node);
    }
    if (nextNode && nextNode.parent === this) {
      var i = this.children.indexOf(nextNode);
      if (i >= 0) {
        this._children.splice(i, 0, node);
        this.childSet[node.id] = true;
        node._setParent(this);
        node._setScene(this.scene);
      } else {
        throw new Error(nextNode + " has " + parent + " as the parent, " + "but is not in its list of children.");
      }
      this.dirty = true;
    } else {
      this.append(node);
    }
    return node;
  };
  Object.defineProperty(Node.prototype, "nextSibling", {
    get: function () {
      var parent = this.parent;
      if (parent) {
        var children = parent.children;
        var index = children.indexOf(this);
        if (index >= 0 && index <= children.length - 1) {
          return children[index + 1];
        }
      }
    },
    enumerable: true,
    configurable: true
  });
  Node.prototype.transformPoint = function (x, y) {
    var matrix = Matrix.flyweight(this.matrix);
    var parent = this.parent;
    while (parent) {
      matrix.preMultiplySelf(parent.matrix);
      parent = parent.parent;
    }
    return matrix.invertSelf().transformPoint(x, y);
  };
  Node.prototype.inverseTransformPoint = function (x, y) {
    var matrix = Matrix.flyweight(this.matrix);
    var parent = this.parent;
    while (parent) {
      matrix.preMultiplySelf(parent.matrix);
      parent = parent.parent;
    }
    return matrix.transformPoint(x, y);
  };
  Object.defineProperty(Node.prototype, "dirtyTransform", {
    get: function () {
      return this._dirtyTransform;
    },
    set: function (value) {
      this._dirtyTransform = value;
      if (value) {
        this.dirty = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Node.prototype, "scalingX", {
    get: function () {
      return this._scalingX;
    },
    set: function (value) {
      if (this._scalingX !== value) {
        this._scalingX = value;
        this.dirtyTransform = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Node.prototype, "scalingY", {
    get: function () {
      return this._scalingY;
    },
    set: function (value) {
      if (this._scalingY !== value) {
        this._scalingY = value;
        this.dirtyTransform = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Node.prototype, "scalingCenterX", {
    get: function () {
      return this._scalingCenterX;
    },
    set: function (value) {
      if (this._scalingCenterX !== value) {
        this._scalingCenterX = value;
        this.dirtyTransform = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Node.prototype, "scalingCenterY", {
    get: function () {
      return this._scalingCenterY;
    },
    set: function (value) {
      if (this._scalingCenterY !== value) {
        this._scalingCenterY = value;
        this.dirtyTransform = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Node.prototype, "rotationCenterX", {
    get: function () {
      return this._rotationCenterX;
    },
    set: function (value) {
      if (this._rotationCenterX !== value) {
        this._rotationCenterX = value;
        this.dirtyTransform = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Node.prototype, "rotationCenterY", {
    get: function () {
      return this._rotationCenterY;
    },
    set: function (value) {
      if (this._rotationCenterY !== value) {
        this._rotationCenterY = value;
        this.dirtyTransform = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Node.prototype, "rotation", {
    get: function () {
      return this._rotation;
    },
    set: function (value) {
      if (this._rotation !== value) {
        this._rotation = value;
        this.dirtyTransform = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Node.prototype, "rotationDeg", {
    get: function () {
      return this.rotation / Math.PI * 180;
    },
    /**
     * For performance reasons the rotation angle's internal representation
     * is in radians. Therefore, don't expect to get the same number you set.
     * Even with integer angles about a quarter of them from 0 to 359 cannot
     * be converted to radians and back without precision loss.
     * For example:
     *
     *     node.rotationDeg = 11;
     *     console.log(node.rotationDeg); // 10.999999999999998
     *
     * @param value Rotation angle in degrees.
     */
    set: function (value) {
      this.rotation = value / 180 * Math.PI;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Node.prototype, "translationX", {
    get: function () {
      return this._translationX;
    },
    set: function (value) {
      if (this._translationX !== value) {
        this._translationX = value;
        this.dirtyTransform = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Node.prototype, "translationY", {
    get: function () {
      return this._translationY;
    },
    set: function (value) {
      if (this._translationY !== value) {
        this._translationY = value;
        this.dirtyTransform = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Node.prototype.containsPoint = function (x, y) {
    return false;
  };
  /**
   * Hit testing method.
   * Recursively checks if the given point is inside this node or any of its children.
   * Returns the first matching node or `undefined`.
   * Nodes that render later (show on top) are hit tested first.
   * @param x
   * @param y
   */
  Node.prototype.pickNode = function (x, y) {
    if (!this.visible || this.pointerEvents === PointerEvents.None || !this.containsPoint(x, y)) {
      return;
    }
    var children = this.children;
    if (children.length) {
      // Nodes added later should be hit-tested first,
      // as they are rendered on top of the previously added nodes.
      for (var i = children.length - 1; i >= 0; i--) {
        var hit = children[i].pickNode(x, y);
        if (hit) {
          return hit;
        }
      }
    } else if (!this.isContainerNode) {
      // a leaf node, but not a container leaf
      return this;
    }
  };
  Node.prototype.computeBBox = function () {
    return;
  };
  Node.prototype.computeBBoxCenter = function () {
    var bbox = this.computeBBox && this.computeBBox();
    if (bbox) {
      return [bbox.x + bbox.width * 0.5, bbox.y + bbox.height * 0.5];
    }
    return [0, 0];
  };
  Node.prototype.computeTransformMatrix = function () {
    // TODO: transforms without center of scaling and rotation correspond directly
    //       to `setAttribute('transform', 'translate(tx, ty) rotate(rDeg) scale(sx, sy)')`
    //       in SVG. Our use cases will mostly require positioning elements (rects, circles)
    //       within a group, rotating groups at right angles (e.g. for axis) and translating
    //       groups. We shouldn't even need `scale(1, -1)` (invert vertically), since this
    //       can be done using D3-like scales already by inverting the output range.
    //       So for now, just assume that centers of scaling and rotation are at the origin.
    // const [bbcx, bbcy] = this.computeBBoxCenter();
    var _a = [0, 0],
      bbcx = _a[0],
      bbcy = _a[1];
    var sx = this.scalingX;
    var sy = this.scalingY;
    var scx;
    var scy;
    if (sx === 1 && sy === 1) {
      scx = 0;
      scy = 0;
    } else {
      scx = this.scalingCenterX === null ? bbcx : this.scalingCenterX;
      scy = this.scalingCenterY === null ? bbcy : this.scalingCenterY;
    }
    var r = this.rotation;
    var cos = Math.cos(r);
    var sin = Math.sin(r);
    var rcx;
    var rcy;
    if (r === 0) {
      rcx = 0;
      rcy = 0;
    } else {
      rcx = this.rotationCenterX === null ? bbcx : this.rotationCenterX;
      rcy = this.rotationCenterY === null ? bbcy : this.rotationCenterY;
    }
    var tx = this.translationX;
    var ty = this.translationY;
    // The transform matrix `M` is a result of the following transformations:
    // 1) translate the center of scaling to the origin
    // 2) scale
    // 3) translate back
    // 4) translate the center of rotation to the origin
    // 5) rotate
    // 6) translate back
    // 7) translate
    //         (7)          (6)             (5)             (4)           (3)           (2)           (1)
    //     | 1 0 tx |   | 1 0 rcx |   | cos -sin 0 |   | 1 0 -rcx |   | 1 0 scx |   | sx 0 0 |   | 1 0 -scx |
    // M = | 0 1 ty | * | 0 1 rcy | * | sin  cos 0 | * | 0 1 -rcy | * | 0 1 scy | * | 0 sy 0 | * | 0 1 -scy |
    //     | 0 0  1 |   | 0 0  1  |   |  0    0  1 |   | 0 0  1   |   | 0 0  1  |   | 0  0 0 |   | 0 0  1   |
    // Translation after steps 1-4 above:
    var tx4 = scx * (1 - sx) - rcx;
    var ty4 = scy * (1 - sy) - rcy;
    this.dirtyTransform = false;
    this.matrix.setElements([cos * sx, sin * sx, -sin * sy, cos * sy, cos * tx4 - sin * ty4 + rcx + tx, sin * tx4 + cos * ty4 + rcy + ty]).inverseTo(this.inverseMatrix);
  };
  Object.defineProperty(Node.prototype, "dirty", {
    get: function () {
      return this._dirty;
    },
    set: function (value) {
      // TODO: check if we are already dirty (e.g. if (this._dirty !== value))
      //       if we are, then all parents and the scene have been
      //       notified already, and we are doing redundant work
      //       (but test if this is indeed the case)
      this._dirty = value;
      if (value) {
        if (this.parent) {
          this.parent.dirty = true;
        } else if (this.scene) {
          this.scene.dirty = true;
        }
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Node.prototype, "visible", {
    get: function () {
      return this._visible;
    },
    set: function (value) {
      if (this._visible !== value) {
        this._visible = value;
        this.dirty = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Node.MAX_SAFE_INTEGER = Math.pow(2, 53) - 1; // Number.MAX_SAFE_INTEGER
  return Node;
}();

/**
 * Creates a new object with a `parent` as its prototype
 * and copies properties from the `child` into it.
 * @param parent
 * @param child
 */
function chainObjects(parent, child) {
  var obj = Object.create(parent);
  for (var prop in child) {
    if (child.hasOwnProperty(prop)) {
      obj[prop] = child[prop];
    }
  }
  return obj;
}
function getValue(object, path, defaultValue) {
  var parts = Array.isArray(path) ? path : path.split('.');
  var value = object;
  try {
    parts.forEach(function (part) {
      value = value[part];
    });
  } catch (e) {
    if (arguments.length === 3) {
      value = defaultValue;
    } else {
      throw e;
    }
  }
  return value;
}
function emptyTarget(value) {
  return Array.isArray(value) ? [] : {};
}
function cloneUnlessOtherwiseSpecified(value, options) {
  return options.clone !== false && options.isMergeableObject(value) ? deepMerge(emptyTarget(value), value, options) : value;
}
function defaultArrayMerge(target, source, options) {
  return target.concat(source).map(function (element) {
    return cloneUnlessOtherwiseSpecified(element, options);
  });
}
function getMergeFunction(key, options) {
  if (!options.customMerge) {
    return deepMerge;
  }
  var customMerge = options.customMerge(key);
  return typeof customMerge === 'function' ? customMerge : deepMerge;
}
function getEnumerableOwnPropertySymbols(target) {
  return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function (symbol) {
    return target.propertyIsEnumerable(symbol);
  }) : [];
}
function getKeys(target) {
  return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
}
function propertyIsOnObject(object, property) {
  try {
    return property in object;
  } catch (_) {
    return false;
  }
}
// Protects from prototype poisoning and unexpected merging up the prototype chain.
function propertyIsUnsafe(target, key) {
  return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,
  && !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
  && Object.propertyIsEnumerable.call(target, key)); // and also unsafe if they're nonenumerable.
}

function mergeObject(target, source, options) {
  var destination = {};
  if (options.isMergeableObject(target)) {
    getKeys(target).forEach(function (key) {
      destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
    });
  }
  getKeys(source).forEach(function (key) {
    if (propertyIsUnsafe(target, key)) {
      return;
    }
    if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
      destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
    } else {
      destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
    }
  });
  return destination;
}
function defaultIsMergeableObject(value) {
  return isNonNullObject(value) && !isSpecial(value);
}
function isNonNullObject(value) {
  return !!value && typeof value === 'object';
}
function isSpecial(value) {
  var stringValue = Object.prototype.toString.call(value);
  return stringValue === '[object RegExp]' || stringValue === '[object Date]';
}
function deepMerge(target, source, options) {
  options = options || {};
  options.arrayMerge = options.arrayMerge || defaultArrayMerge;
  options.isMergeableObject = options.isMergeableObject || defaultIsMergeableObject;
  // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
  // implementations can use it. The caller may not replace it.
  options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
  var sourceIsArray = Array.isArray(source);
  var targetIsArray = Array.isArray(target);
  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
  if (!sourceAndTargetTypesMatch) {
    return cloneUnlessOtherwiseSpecified(source, options);
  } else if (sourceIsArray) {
    return options.arrayMerge(target, source, options);
  } else {
    return mergeObject(target, source, options);
  }
}
function isObject(value) {
  return typeof value === 'object' && !Array.isArray(value);
}
var __extends$E =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Shape = /** @class */function (_super) {
  __extends$E(Shape, _super);
  function Shape() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.lastInstanceId = 0;
    _this._fillOpacity = 1;
    _this._strokeOpacity = 1;
    _this._fill = Shape.defaultStyles.fill;
    /**
     * Note that `strokeStyle = null` means invisible stroke,
     * while `lineWidth = 0` means no stroke, and sometimes this can mean different things.
     * For example, a rect shape with an invisible stroke may not align to the pixel grid
     * properly because the stroke affects the rules of alignment, and arc shapes forming
     * a pie chart will have a gap between them if they have an invisible stroke, whereas
     * there would be not gap if there was no stroke at all.
     * The preferred way of making the stroke invisible is setting the `lineWidth` to zero,
     * unless specific looks that is achieved by having an invisible stroke is desired.
     */
    _this._stroke = Shape.defaultStyles.stroke;
    _this._strokeWidth = Shape.defaultStyles.strokeWidth;
    _this._lineDash = Shape.defaultStyles.lineDash;
    _this._lineDashOffset = Shape.defaultStyles.lineDashOffset;
    _this._lineCap = Shape.defaultStyles.lineCap;
    _this._lineJoin = Shape.defaultStyles.lineJoin;
    _this._opacity = Shape.defaultStyles.opacity;
    _this.onShadowChange = function () {
      _this.dirty = true;
    };
    _this._fillShadow = Shape.defaultStyles.fillShadow;
    _this._strokeShadow = Shape.defaultStyles.strokeShadow;
    return _this;
  }
  /**
   * Creates a light-weight instance of the given shape (that serves as a template).
   * The created instance only stores the properites set on the instance itself
   * and the rest of the properties come via the prototype chain from the template.
   * This can greatly reduce memory usage in cases where one has many simular shapes,
   * for example, circles of different size, position and color. The exact memory usage
   * reduction will depend on the size of the template and the number of own properties
   * set on its lightweight instances, but will typically be around an order of magnitude
   * or more.
   *
   * Note: template shapes are not supposed to be part of the scene graph (they should not
   * have a parent).
   *
   * @param template
   */
  Shape.createInstance = function (template) {
    var shape = Object.create(template);
    shape._setParent(undefined);
    shape.id = template.id + '-Instance-' + String(++template.lastInstanceId);
    return shape;
  };
  /**
   * Restores the default styles introduced by this subclass.
   */
  Shape.prototype.restoreOwnStyles = function () {
    var styles = this.constructor.defaultStyles;
    var keys = Object.getOwnPropertyNames(styles);
    // getOwnPropertyNames is about 2.5 times faster than
    // for..in with the hasOwnProperty check and in this
    // case, where most properties are inherited, can be
    // more then an order of magnitude faster.
    for (var i = 0, n = keys.length; i < n; i++) {
      var key = keys[i];
      this[key] = styles[key];
    }
  };
  Shape.prototype.restoreAllStyles = function () {
    var styles = this.constructor.defaultStyles;
    for (var property in styles) {
      this[property] = styles[property];
    }
  };
  /**
   * Restores the base class default styles that have been overridden by this subclass.
   */
  Shape.prototype.restoreOverriddenStyles = function () {
    var styles = this.constructor.defaultStyles;
    var protoStyles = Object.getPrototypeOf(styles);
    for (var property in styles) {
      if (styles.hasOwnProperty(property) && protoStyles.hasOwnProperty(property)) {
        this[property] = styles[property];
      }
    }
  };
  Object.defineProperty(Shape.prototype, "fillOpacity", {
    get: function () {
      return this._fillOpacity;
    },
    set: function (value) {
      if (this._fillOpacity !== value) {
        this._fillOpacity = value;
        this.dirty = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Shape.prototype, "strokeOpacity", {
    get: function () {
      return this._strokeOpacity;
    },
    set: function (value) {
      if (this._strokeOpacity !== value) {
        this._strokeOpacity = value;
        this.dirty = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Shape.prototype, "fill", {
    get: function () {
      return this._fill;
    },
    set: function (value) {
      if (this._fill !== value) {
        this._fill = value;
        this.dirty = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Shape.prototype, "stroke", {
    get: function () {
      return this._stroke;
    },
    set: function (value) {
      if (this._stroke !== value) {
        this._stroke = value;
        this.dirty = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Shape.prototype, "strokeWidth", {
    get: function () {
      return this._strokeWidth;
    },
    set: function (value) {
      if (this._strokeWidth !== value) {
        this._strokeWidth = value;
        this.dirty = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Shape.prototype, "alignment", {
    // An offset value to align to the pixel grid.
    get: function () {
      return Math.floor(this.strokeWidth) % 2 / 2;
    },
    enumerable: true,
    configurable: true
  });
  // Returns the aligned `start` or `length` value.
  // For example: `start` could be `y` and `length` could be `height` of a rectangle.
  Shape.prototype.align = function (alignment, start, length) {
    if (length != undefined) {
      return Math.floor(length) + Math.floor(start % 1 + length % 1);
    }
    return Math.floor(start) + alignment;
  };
  Object.defineProperty(Shape.prototype, "lineDash", {
    get: function () {
      return this._lineDash;
    },
    set: function (value) {
      var oldValue = this._lineDash;
      if (oldValue !== value) {
        if (oldValue && value && oldValue.length === value.length) {
          var identical = true;
          var n = value.length;
          for (var i = 0; i < n; i++) {
            if (oldValue[i] !== value[i]) {
              identical = false;
              break;
            }
          }
          if (identical) {
            return;
          }
        }
        this._lineDash = value;
        this.dirty = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Shape.prototype, "lineDashOffset", {
    get: function () {
      return this._lineDashOffset;
    },
    set: function (value) {
      if (this._lineDashOffset !== value) {
        this._lineDashOffset = value;
        this.dirty = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Shape.prototype, "lineCap", {
    get: function () {
      return this._lineCap;
    },
    set: function (value) {
      if (this._lineCap !== value) {
        this._lineCap = value;
        this.dirty = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Shape.prototype, "lineJoin", {
    get: function () {
      return this._lineJoin;
    },
    set: function (value) {
      if (this._lineJoin !== value) {
        this._lineJoin = value;
        this.dirty = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Shape.prototype, "opacity", {
    get: function () {
      return this._opacity;
    },
    set: function (value) {
      value = Math.min(1, Math.max(0, value));
      if (this._opacity !== value) {
        this._opacity = value;
        this.dirty = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Shape.prototype, "fillShadow", {
    get: function () {
      return this._fillShadow;
    },
    set: function (value) {
      var oldValue = this._fillShadow;
      if (oldValue !== value) {
        if (oldValue) {
          oldValue.removeEventListener('change', this.onShadowChange);
        }
        if (value) {
          value.addEventListener('change', this.onShadowChange);
        }
        this._fillShadow = value;
        this.dirty = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Shape.prototype, "strokeShadow", {
    get: function () {
      return this._strokeShadow;
    },
    set: function (value) {
      var oldValue = this._strokeShadow;
      if (oldValue !== value) {
        if (oldValue) {
          oldValue.removeEventListener('change', this.onShadowChange);
        }
        if (value) {
          value.addEventListener('change', this.onShadowChange);
        }
        this._strokeShadow = value;
        this.dirty = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Shape.prototype.fillStroke = function (ctx) {
    if (!this.scene) {
      return;
    }
    var pixelRatio = this.scene.canvas.pixelRatio || 1;
    if (this.fill) {
      ctx.fillStyle = this.fill;
      ctx.globalAlpha = this.opacity * this.fillOpacity;
      // The canvas context scaling (depends on the device's pixel ratio)
      // has no effect on shadows, so we have to account for the pixel ratio
      // manually here.
      var fillShadow = this.fillShadow;
      if (fillShadow && fillShadow.enabled) {
        ctx.shadowColor = fillShadow.color;
        ctx.shadowOffsetX = fillShadow.xOffset * pixelRatio;
        ctx.shadowOffsetY = fillShadow.yOffset * pixelRatio;
        ctx.shadowBlur = fillShadow.blur * pixelRatio;
      }
      ctx.fill();
    }
    ctx.shadowColor = 'rgba(0, 0, 0, 0)';
    if (this.stroke && this.strokeWidth) {
      ctx.strokeStyle = this.stroke;
      ctx.globalAlpha = this.opacity * this.strokeOpacity;
      ctx.lineWidth = this.strokeWidth;
      if (this.lineDash) {
        ctx.setLineDash(this.lineDash);
      }
      if (this.lineDashOffset) {
        ctx.lineDashOffset = this.lineDashOffset;
      }
      if (this.lineCap) {
        ctx.lineCap = this.lineCap;
      }
      if (this.lineJoin) {
        ctx.lineJoin = this.lineJoin;
      }
      var strokeShadow = this.strokeShadow;
      if (strokeShadow && strokeShadow.enabled) {
        ctx.shadowColor = strokeShadow.color;
        ctx.shadowOffsetX = strokeShadow.xOffset * pixelRatio;
        ctx.shadowOffsetY = strokeShadow.yOffset * pixelRatio;
        ctx.shadowBlur = strokeShadow.blur * pixelRatio;
      }
      ctx.stroke();
    }
  };
  Shape.prototype.containsPoint = function (x, y) {
    return this.isPointInPath(x, y);
  };
  /**
   * Defaults for style properties. Note that properties that affect the position
   * and shape of the node are not considered style properties, for example:
   * `x`, `y`, `width`, `height`, `radius`, `rotation`, etc.
   * Can be used to reset to the original styling after some custom styling
   * has been applied (using the `restoreOwnStyles` and `restoreAllStyles` methods).
   * These static defaults are meant to be inherited by subclasses.
   */
  Shape.defaultStyles = chainObjects({}, {
    fill: 'black',
    stroke: undefined,
    strokeWidth: 0,
    lineDash: undefined,
    lineDashOffset: 0,
    lineCap: undefined,
    lineJoin: undefined,
    opacity: 1,
    fillShadow: undefined,
    strokeShadow: undefined
  });
  return Shape;
}(Node);

/**
 * Wraps the native Canvas element and overrides its CanvasRenderingContext2D to
 * provide resolution independent rendering based on `window.devicePixelRatio`.
 */
var HdpiCanvas = /** @class */function () {
  // The width/height attributes of the Canvas element default to
  // 300/150 according to w3.org.
  function HdpiCanvas(document, width, height) {
    if (document === void 0) {
      document = window.document;
    }
    if (width === void 0) {
      width = 600;
    }
    if (height === void 0) {
      height = 300;
    }
    this._container = undefined;
    // `NaN` is deliberate here, so that overrides are always applied
    // and the `resetTransform` inside the `resize` method works in IE11.
    this._pixelRatio = NaN;
    this.document = document;
    this.element = document.createElement('canvas');
    this.context = this.element.getContext('2d');
    this.element.style.userSelect = 'none';
    this.element.style.display = 'block';
    this.setPixelRatio();
    this.resize(width, height);
  }
  Object.defineProperty(HdpiCanvas.prototype, "container", {
    get: function () {
      return this._container;
    },
    set: function (value) {
      if (this._container !== value) {
        this.remove();
        if (value) {
          value.appendChild(this.element);
        }
        this._container = value;
      }
    },
    enumerable: true,
    configurable: true
  });
  HdpiCanvas.prototype.remove = function () {
    var parentNode = this.element.parentNode;
    if (parentNode != null) {
      parentNode.removeChild(this.element);
    }
  };
  HdpiCanvas.prototype.destroy = function () {
    this.element.remove();
    this._canvas = undefined;
    Object.freeze(this);
  };
  HdpiCanvas.prototype.toImage = function () {
    var img = this.document.createElement('img');
    img.src = this.getDataURL();
    return img;
  };
  HdpiCanvas.prototype.getDataURL = function (type) {
    return this.element.toDataURL(type);
  };
  /**
   * @param options.fileName The `.png` extension is going to be added automatically.
   * @param [options.background] Defaults to `white`.
   */
  HdpiCanvas.prototype.download = function (fileName) {
    fileName = ((fileName || '').trim() || 'image') + '.png';
    // Chart images saved as JPEG are a few times larger at 50% quality than PNG images,
    // so we don't support saving to JPEG.
    var type = 'image/png';
    var dataUrl = this.getDataURL(type);
    var document = this.document;
    if (navigator.msSaveOrOpenBlob) {
      // IE11
      var binary = atob(dataUrl.split(',')[1]); // strip the `data:image/png;base64,` part
      var array = [];
      for (var i = 0, n = binary.length; i < n; i++) {
        array.push(binary.charCodeAt(i));
      }
      var blob = new Blob([new Uint8Array(array)], {
        type: type
      });
      navigator.msSaveOrOpenBlob(blob, fileName);
    } else {
      var a = document.createElement('a');
      a.href = dataUrl;
      a.download = fileName;
      a.style.display = 'none';
      document.body.appendChild(a); // required for the `click` to work in Firefox
      a.click();
      document.body.removeChild(a);
    }
  };
  Object.defineProperty(HdpiCanvas.prototype, "pixelRatio", {
    get: function () {
      return this._pixelRatio;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Changes the pixel ratio of the Canvas element to the given value,
   * or uses the window.devicePixelRatio (default), then resizes the Canvas
   * element accordingly (default).
   */
  HdpiCanvas.prototype.setPixelRatio = function (ratio) {
    var pixelRatio = ratio || window.devicePixelRatio;
    if (pixelRatio === this.pixelRatio) {
      return;
    }
    HdpiCanvas.overrideScale(this.context, pixelRatio);
    this._pixelRatio = pixelRatio;
    this.resize(this.width, this.height);
  };
  Object.defineProperty(HdpiCanvas.prototype, "pixelated", {
    get: function () {
      return this.element.style.imageRendering === 'pixelated';
    },
    set: function (value) {
      this.element.style.imageRendering = value ? 'pixelated' : 'auto';
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(HdpiCanvas.prototype, "width", {
    get: function () {
      return this._width;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(HdpiCanvas.prototype, "height", {
    get: function () {
      return this._height;
    },
    enumerable: true,
    configurable: true
  });
  HdpiCanvas.prototype.resize = function (width, height) {
    var _a = this,
      element = _a.element,
      context = _a.context,
      pixelRatio = _a.pixelRatio;
    element.width = Math.round(width * pixelRatio);
    element.height = Math.round(height * pixelRatio);
    element.style.width = width + 'px';
    element.style.height = height + 'px';
    context.resetTransform();
    this._width = width;
    this._height = height;
  };
  Object.defineProperty(HdpiCanvas, "textMeasuringContext", {
    get: function () {
      if (this._textMeasuringContext) {
        return this._textMeasuringContext;
      }
      var canvas = document.createElement('canvas');
      return this._textMeasuringContext = canvas.getContext('2d');
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(HdpiCanvas, "svgText", {
    get: function () {
      if (this._svgText) {
        return this._svgText;
      }
      var xmlns = 'http://www.w3.org/2000/svg';
      var svg = document.createElementNS(xmlns, 'svg');
      svg.setAttribute('width', '100');
      svg.setAttribute('height', '100');
      // Add a descriptive class name in case someone sees this SVG element
      // in devtools and wonders about its purpose:
      if (svg.classList) {
        svg.classList.add('text-measuring-svg');
      } else {
        svg.setAttribute('class', 'text-measuring-svg');
      }
      svg.style.position = 'absolute';
      svg.style.top = '-1000px';
      svg.style.visibility = 'hidden';
      var svgText = document.createElementNS(xmlns, 'text');
      svgText.setAttribute('x', '0');
      svgText.setAttribute('y', '30');
      svgText.setAttribute('text', 'black');
      svg.appendChild(svgText);
      document.body.appendChild(svg);
      this._svgText = svgText;
      return svgText;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(HdpiCanvas, "has", {
    get: function () {
      if (this._has) {
        return this._has;
      }
      var isChrome = navigator.userAgent.indexOf('Chrome') > -1;
      var isFirefox = navigator.userAgent.indexOf('Firefox') > -1;
      var isSafari = !isChrome && navigator.userAgent.indexOf('Safari') > -1;
      return this._has = Object.freeze({
        textMetrics: this.textMeasuringContext.measureText('test').actualBoundingBoxDescent !== undefined
        // Firefox implemented advanced TextMetrics object in v74:
        // https://bugzilla.mozilla.org/show_bug.cgi?id=1102584
        // but it's buggy, so we'll keed using the SVG for text measurement in Firefox for now.
        && !isFirefox && !isSafari,
        getTransform: this.textMeasuringContext.getTransform !== undefined
      });
    },
    enumerable: true,
    configurable: true
  });
  HdpiCanvas.measureText = function (text, font, textBaseline, textAlign) {
    var ctx = this.textMeasuringContext;
    ctx.font = font;
    ctx.textBaseline = textBaseline;
    ctx.textAlign = textAlign;
    return ctx.measureText(text);
  };
  /**
   * Returns the width and height of the measured text.
   * @param text The single-line text to measure.
   * @param font The font shorthand string.
   */
  HdpiCanvas.getTextSize = function (text, font) {
    if (this.has.textMetrics) {
      var ctx = this.textMeasuringContext;
      ctx.font = font;
      var metrics = ctx.measureText(text);
      return {
        width: metrics.width,
        height: metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent
      };
    } else {
      return this.measureSvgText(text, font);
    }
  };
  HdpiCanvas.measureSvgText = function (text, font) {
    var cache = this.textSizeCache;
    var fontCache = cache[font];
    // Note: consider not caching the size of numeric strings.
    // For example: if (isNaN(+text)) { // skip
    if (fontCache) {
      var size_1 = fontCache[text];
      if (size_1) {
        return size_1;
      }
    } else {
      cache[font] = {};
    }
    var svgText = this.svgText;
    svgText.style.font = font;
    svgText.textContent = text;
    // `getBBox` returns an instance of `SVGRect` with the same `width` and `height`
    // measurements as `DOMRect` instance returned by the `getBoundingClientRect`.
    // But the `SVGRect` instance has half the properties of the `DOMRect`,
    // so we use the `getBBox` method.
    var bbox = svgText.getBBox();
    var size = {
      width: bbox.width,
      height: bbox.height
    };
    cache[font][text] = size;
    return size;
  };
  HdpiCanvas.overrideScale = function (ctx, scale) {
    var depth = 0;
    var overrides = {
      save: function () {
        this.$save();
        depth++;
      },
      restore: function () {
        if (depth > 0) {
          this.$restore();
          depth--;
        }
      },
      setTransform: function (a, b, c, d, e, f) {
        this.$setTransform(a * scale, b * scale, c * scale, d * scale, e * scale, f * scale);
      },
      resetTransform: function () {
        // As of Jan 8, 2019, `resetTransform` is still an "experimental technology",
        // and doesn't work in IE11 and Edge 44.
        this.$setTransform(scale, 0, 0, scale, 0, 0);
        this.save();
        depth = 0;
        // The scale above will be impossible to restore,
        // because we override the `ctx.restore` above and
        // check `depth` there.
      }
    };

    for (var name_1 in overrides) {
      if (overrides.hasOwnProperty(name_1)) {
        // Save native methods under prefixed names,
        // if this hasn't been done by the previous overrides already.
        if (!ctx['$' + name_1]) {
          ctx['$' + name_1] = ctx[name_1];
        }
        // Replace native methods with overrides,
        // or previous overrides with the new ones.
        ctx[name_1] = overrides[name_1];
      }
    }
  };
  HdpiCanvas.textSizeCache = {};
  return HdpiCanvas;
}();
var __extends$F =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Text = /** @class */function (_super) {
  __extends$F(Text, _super);
  function Text() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this._x = 0;
    _this._y = 0;
    _this.lineBreakRegex = /\r?\n/g;
    _this.lines = [];
    _this._text = '';
    _this._dirtyFont = true;
    _this._fontSize = 10;
    _this._fontFamily = 'sans-serif';
    _this._textAlign = Text.defaultStyles.textAlign;
    _this._textBaseline = Text.defaultStyles.textBaseline;
    _this._lineHeight = 14;
    return _this;
  }
  Object.defineProperty(Text.prototype, "x", {
    get: function () {
      return this._x;
    },
    set: function (value) {
      if (this._x !== value) {
        this._x = value;
        this.dirty = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Text.prototype, "y", {
    get: function () {
      return this._y;
    },
    set: function (value) {
      if (this._y !== value) {
        this._y = value;
        this.dirty = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Text.prototype.splitText = function () {
    this.lines = this._text.split(this.lineBreakRegex);
  };
  Object.defineProperty(Text.prototype, "text", {
    get: function () {
      return this._text;
    },
    set: function (value) {
      var str = String(value); // `value` can be an object here
      if (this._text !== str) {
        this._text = str;
        this.splitText();
        this.dirty = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Text.prototype, "font", {
    get: function () {
      if (this.dirtyFont) {
        this.dirtyFont = false;
        this._font = [this.fontStyle || '', this.fontWeight || '', this.fontSize + 'px', this.fontFamily].join(' ').trim();
      }
      return this._font;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Text.prototype, "dirtyFont", {
    get: function () {
      return this._dirtyFont;
    },
    set: function (value) {
      if (this._dirtyFont !== value) {
        this._dirtyFont = value;
        if (value) {
          this.dirty = true;
        }
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Text.prototype, "fontStyle", {
    get: function () {
      return this._fontStyle;
    },
    set: function (value) {
      if (this._fontStyle !== value) {
        this._fontStyle = value;
        this.dirtyFont = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Text.prototype, "fontWeight", {
    get: function () {
      return this._fontWeight;
    },
    set: function (value) {
      if (this._fontWeight !== value) {
        this._fontWeight = value;
        this.dirtyFont = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Text.prototype, "fontSize", {
    get: function () {
      return this._fontSize;
    },
    set: function (value) {
      if (!isFinite(value)) {
        value = 10;
      }
      if (this._fontSize !== value) {
        this._fontSize = value;
        this.dirtyFont = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Text.prototype, "fontFamily", {
    get: function () {
      return this._fontFamily;
    },
    set: function (value) {
      if (this._fontFamily !== value) {
        this._fontFamily = value;
        this.dirtyFont = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Text.prototype, "textAlign", {
    get: function () {
      return this._textAlign;
    },
    set: function (value) {
      if (this._textAlign !== value) {
        this._textAlign = value;
        this.dirty = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Text.prototype, "textBaseline", {
    get: function () {
      return this._textBaseline;
    },
    set: function (value) {
      if (this._textBaseline !== value) {
        this._textBaseline = value;
        this.dirty = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Text.prototype, "lineHeight", {
    get: function () {
      return this._lineHeight;
    },
    set: function (value) {
      // Multi-line text is complicated because:
      // - Canvas does not support it natively, so we have to implement it manually
      // - need to know the height of each line -> need to parse the font shorthand ->
      //   generally impossible to do because font size may not be in pixels
      // - so, need to measure the text instead, each line individually -> expensive
      // - or make the user provide the line height manually for multi-line text
      // - computeBBox should use the lineHeight for multi-line text but ignore it otherwise
      // - textBaseline kind of loses its meaning for multi-line text
      if (this._lineHeight !== value) {
        this._lineHeight = value;
        this.dirty = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Text.prototype.computeBBox = function () {
    return HdpiCanvas.has.textMetrics ? this.getPreciseBBox() : this.getApproximateBBox();
  };
  Text.prototype.getPreciseBBox = function () {
    var metrics = HdpiCanvas.measureText(this.text, this.font, this.textBaseline, this.textAlign);
    return new BBox(this.x - metrics.actualBoundingBoxLeft, this.y - metrics.actualBoundingBoxAscent, metrics.width, metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent);
  };
  Text.prototype.getApproximateBBox = function () {
    var size = HdpiCanvas.getTextSize(this.text, this.font);
    var _a = this,
      x = _a.x,
      y = _a.y;
    switch (this.textAlign) {
      case 'end':
      case 'right':
        x -= size.width;
        break;
      case 'center':
        x -= size.width / 2;
    }
    switch (this.textBaseline) {
      case 'alphabetic':
        y -= size.height * 0.7;
        break;
      case 'middle':
        y -= size.height * 0.45;
        break;
      case 'ideographic':
        y -= size.height;
        break;
      case 'hanging':
        y -= size.height * 0.2;
        break;
      case 'bottom':
        y -= size.height;
        break;
    }
    return new BBox(x, y, size.width, size.height);
  };
  Text.prototype.isPointInPath = function (x, y) {
    var point = this.transformPoint(x, y);
    var bbox = this.computeBBox();
    return bbox ? bbox.containsPoint(point.x, point.y) : false;
  };
  Text.prototype.isPointInStroke = function (x, y) {
    return false;
  };
  Text.prototype.render = function (ctx) {
    if (!this.lines.length || !this.scene) {
      return;
    }
    if (this.dirtyTransform) {
      this.computeTransformMatrix();
    }
    // this.matrix.transformBBox(this.computeBBox!()).render(ctx); // debug
    this.matrix.toContext(ctx);
    var _a = this,
      fill = _a.fill,
      stroke = _a.stroke,
      strokeWidth = _a.strokeWidth;
    ctx.font = this.font;
    ctx.textAlign = this.textAlign;
    ctx.textBaseline = this.textBaseline;
    var pixelRatio = this.scene.canvas.pixelRatio || 1;
    if (fill) {
      ctx.fillStyle = fill;
      ctx.globalAlpha = this.opacity * this.fillOpacity;
      var _b = this,
        fillShadow = _b.fillShadow,
        text = _b.text,
        x = _b.x,
        y = _b.y;
      if (fillShadow && fillShadow.enabled) {
        ctx.shadowColor = fillShadow.color;
        ctx.shadowOffsetX = fillShadow.xOffset * pixelRatio;
        ctx.shadowOffsetY = fillShadow.yOffset * pixelRatio;
        ctx.shadowBlur = fillShadow.blur * pixelRatio;
      }
      ctx.fillText(text, x, y);
    }
    if (stroke && strokeWidth) {
      ctx.strokeStyle = stroke;
      ctx.lineWidth = strokeWidth;
      ctx.globalAlpha = this.opacity * this.strokeOpacity;
      var _c = this,
        lineDash = _c.lineDash,
        lineDashOffset = _c.lineDashOffset,
        lineCap = _c.lineCap,
        lineJoin = _c.lineJoin,
        strokeShadow = _c.strokeShadow,
        text = _c.text,
        x = _c.x,
        y = _c.y;
      if (lineDash) {
        ctx.setLineDash(lineDash);
      }
      if (lineDashOffset) {
        ctx.lineDashOffset = lineDashOffset;
      }
      if (lineCap) {
        ctx.lineCap = lineCap;
      }
      if (lineJoin) {
        ctx.lineJoin = lineJoin;
      }
      if (strokeShadow && strokeShadow.enabled) {
        ctx.shadowColor = strokeShadow.color;
        ctx.shadowOffsetX = strokeShadow.xOffset * pixelRatio;
        ctx.shadowOffsetY = strokeShadow.yOffset * pixelRatio;
        ctx.shadowBlur = strokeShadow.blur * pixelRatio;
      }
      ctx.strokeText(text, x, y);
    }
    this.dirty = false;
  };
  Text.className = 'Text';
  Text.defaultStyles = chainObjects(Shape.defaultStyles, {
    textAlign: 'start',
    fontStyle: undefined,
    fontWeight: undefined,
    fontSize: 10,
    fontFamily: 'sans-serif',
    textBaseline: 'alphabetic'
  });
  return Text;
}(Shape);
var __assign$3 =  false || function () {
  __assign$3 = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$3.apply(this, arguments);
};
var Observable = /** @class */function () {
  function Observable() {
    // Note that these maps can't be specified generically, so they are kept untyped.
    // Some methods in this class only need generics in their signatures, the generics inside the methods
    // are just for clarity. The generics in signatures allow for static type checking of user provided
    // listeners and for type inference, so that the users wouldn't have to specify the type of parameters
    // of their inline lambdas.
    this.allPropertyListeners = new Map(); // property name => property change listener => scopes
    this.allEventListeners = new Map(); // event type => event listener => scopes
  }

  Observable.prototype.addPropertyListener = function (name, listener, scope) {
    if (scope === void 0) {
      scope = this;
    }
    var allPropertyListeners = this.allPropertyListeners;
    var propertyListeners = allPropertyListeners.get(name);
    if (!propertyListeners) {
      propertyListeners = new Map();
      allPropertyListeners.set(name, propertyListeners);
    }
    if (!propertyListeners.has(listener)) {
      var scopes_1 = new Set();
      propertyListeners.set(listener, scopes_1);
    }
    var scopes = propertyListeners.get(listener);
    if (scopes) {
      scopes.add(scope);
    }
  };
  Observable.prototype.removePropertyListener = function (name, listener, scope) {
    if (scope === void 0) {
      scope = this;
    }
    var allPropertyListeners = this.allPropertyListeners;
    var propertyListeners = allPropertyListeners.get(name);
    if (propertyListeners) {
      if (listener) {
        var scopes = propertyListeners.get(listener);
        if (scopes) {
          scopes.delete(scope);
          if (!scopes.size) {
            propertyListeners.delete(listener);
          }
        }
      } else {
        propertyListeners.clear();
      }
    }
  };
  Observable.prototype.notifyPropertyListeners = function (name, oldValue, value) {
    var _this = this;
    var allPropertyListeners = this.allPropertyListeners;
    var propertyListeners = allPropertyListeners.get(name);
    if (propertyListeners) {
      propertyListeners.forEach(function (scopes, listener) {
        scopes.forEach(function (scope) {
          return listener.call(scope, {
            type: name,
            source: _this,
            value: value,
            oldValue: oldValue
          });
        });
      });
    }
  };
  Observable.prototype.addEventListener = function (type, listener, scope) {
    if (scope === void 0) {
      scope = this;
    }
    var allEventListeners = this.allEventListeners;
    var eventListeners = allEventListeners.get(type);
    if (!eventListeners) {
      eventListeners = new Map();
      allEventListeners.set(type, eventListeners);
    }
    if (!eventListeners.has(listener)) {
      var scopes_2 = new Set();
      eventListeners.set(listener, scopes_2);
    }
    var scopes = eventListeners.get(listener);
    if (scopes) {
      scopes.add(scope);
    }
  };
  Observable.prototype.removeEventListener = function (type, listener, scope) {
    if (scope === void 0) {
      scope = this;
    }
    var allEventListeners = this.allEventListeners;
    var eventListeners = allEventListeners.get(type);
    if (eventListeners) {
      if (listener) {
        var scopes = eventListeners.get(listener);
        if (scopes) {
          scopes.delete(scope);
          if (!scopes.size) {
            eventListeners.delete(listener);
          }
        }
      } else {
        eventListeners.clear();
      }
    }
  };
  Observable.prototype.notifyEventListeners = function (types) {
    var _this = this;
    var allEventListeners = this.allEventListeners;
    types.forEach(function (type) {
      var listeners = allEventListeners.get(type);
      if (listeners) {
        listeners.forEach(function (scopes, listener) {
          scopes.forEach(function (scope) {
            return listener.call(scope, {
              type: type,
              source: _this
            });
          });
        });
      }
    });
  };
  // 'source' is added automatically and is always the object this method belongs to.
  Observable.prototype.fireEvent = function (event) {
    var _this = this;
    var listeners = this.allEventListeners.get(event.type);
    if (listeners) {
      listeners.forEach(function (scopes, listener) {
        scopes.forEach(function (scope) {
          return listener.call(scope, __assign$3(__assign$3({}, event), {
            source: _this
          }));
        });
      });
    }
  };
  Observable.privateKeyPrefix = '_';
  return Observable;
}();
function reactive() {
  var events = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    events[_i] = arguments[_i];
  }
  var debug = events.indexOf('debugger') >= 0;
  return function (target, key) {
    // `target` is either a constructor (static member) or prototype (instance member)
    var privateKey = Observable.privateKeyPrefix + key;
    var privateKeyEvents = privateKey + 'Events';
    if (!target[key]) {
      if (events) {
        target[privateKeyEvents] = events;
      }
      Object.defineProperty(target, key, {
        set: function (value) {
          var oldValue = this[privateKey];
          // This is a way to stop inside the setter by adding the special
          // 'debugger' event to a reactive property, for example:
          //  @reactive('layoutChange', 'debugger') title?: Caption;
          if (debug) {
            // DO NOT REMOVE
            debugger;
          }
          if (value !== oldValue || typeof value === 'object' && value !== null) {
            this[privateKey] = value;
            this.notifyPropertyListeners(key, oldValue, value);
            var events_1 = this[privateKeyEvents];
            if (events_1) {
              this.notifyEventListeners(events_1);
            }
          }
        },
        get: function () {
          return this[privateKey];
        },
        enumerable: true,
        configurable: true
      });
    }
  };
}
var __extends$G =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$A =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Caption = /** @class */function (_super) {
  __extends$G(Caption, _super);
  function Caption() {
    var _this = _super.call(this) || this;
    _this.node = new Text();
    _this.enabled = false;
    _this.padding = new Padding(10);
    var node = _this.node;
    node.textAlign = 'center';
    node.textBaseline = 'top';
    node.pointerEvents = PointerEvents.None;
    return _this;
  }
  Object.defineProperty(Caption.prototype, "text", {
    get: function () {
      return this.node.text;
    },
    set: function (value) {
      if (this.node.text !== value) {
        this.node.text = value;
        this.fireEvent({
          type: 'change'
        });
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Caption.prototype, "fontStyle", {
    get: function () {
      return this.node.fontStyle;
    },
    set: function (value) {
      if (this.node.fontStyle !== value) {
        this.node.fontStyle = value;
        this.fireEvent({
          type: 'change'
        });
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Caption.prototype, "fontWeight", {
    get: function () {
      return this.node.fontWeight;
    },
    set: function (value) {
      if (this.node.fontWeight !== value) {
        this.node.fontWeight = value;
        this.fireEvent({
          type: 'change'
        });
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Caption.prototype, "fontSize", {
    get: function () {
      return this.node.fontSize;
    },
    set: function (value) {
      if (this.node.fontSize !== value) {
        this.node.fontSize = value;
        this.fireEvent({
          type: 'change'
        });
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Caption.prototype, "fontFamily", {
    get: function () {
      return this.node.fontFamily;
    },
    set: function (value) {
      if (this.node.fontFamily !== value) {
        this.node.fontFamily = value;
        this.fireEvent({
          type: 'change'
        });
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Caption.prototype, "color", {
    get: function () {
      return this.node.fill;
    },
    set: function (value) {
      if (this.node.fill !== value) {
        this.node.fill = value;
        this.fireEvent({
          type: 'change'
        });
      }
    },
    enumerable: true,
    configurable: true
  });
  __decorate$A([reactive('change')], Caption.prototype, "enabled", void 0);
  __decorate$A([reactive('change')], Caption.prototype, "padding", void 0);
  return Caption;
}(Observable);
var constant = function (x) {
  return function () {
    return x;
  };
};
function interpolateNumber(a, b) {
  a = +a;
  b = +b;
  return function (t) {
    return a * (1 - t) + b * t;
  };
}
function date(a, b) {
  var date = new Date();
  var msA = +a;
  var msB = +b;
  return function (t) {
    date.setTime(msA * (1 - t) + msB * t);
    return date;
  };
}
function array(a, b) {
  var nb = b ? b.length : 0;
  var na = a ? Math.min(nb, a.length) : 0;
  var x = new Array(na);
  var c = new Array(nb);
  var i;
  for (i = 0; i < na; ++i) {
    x[i] = interpolateValue(a[i], b[i]);
  }
  for (; i < nb; ++i) {
    c[i] = b[i];
  }
  return function (t) {
    for (i = 0; i < na; ++i) {
      c[i] = x[i](t);
    }
    return c;
  };
}
function object(a, b) {
  var i = {};
  var c = {};
  var k;
  if (a === null || typeof a !== 'object') {
    a = {};
  }
  if (b === null || typeof b !== 'object') {
    b = {};
  }
  for (k in b) {
    if (k in a) {
      i[k] = interpolateValue(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }
  return function (t) {
    for (k in i) {
      c[k] = i[k](t);
    }
    return c;
  };
}
var Color = /** @class */function () {
  /**
   * Every color component should be in the [0, 1] range.
   * Some easing functions (such as elastic easing) can overshoot the target value by some amount.
   * So, when animating colors, if the source or target color components are already near
   * or at the edge of the allowed [0, 1] range, it is possible for the intermediate color
   * component value to end up outside of that range mid-animation. For this reason the constructor
   * performs range checking/constraining.
   * @param r Red component.
   * @param g Green component.
   * @param b Blue component.
   * @param a Alpha (opacity) component.
   */
  function Color(r, g, b, a) {
    if (a === void 0) {
      a = 1;
    }
    // NaN is treated as 0.
    this.r = Math.min(1, Math.max(0, r || 0));
    this.g = Math.min(1, Math.max(0, g || 0));
    this.b = Math.min(1, Math.max(0, b || 0));
    this.a = Math.min(1, Math.max(0, a || 0));
  }
  /**
   * The given string can be in one of the following formats:
   * - #rgb
   * - #rrggbb
   * - rgb(r, g, b)
   * - rgba(r, g, b, a)
   * - CSS color name such as 'white', 'orange', 'cyan', etc.
   * @param str
   */
  Color.fromString = function (str) {
    // hexadecimal notation
    if (str.indexOf('#') >= 0) {
      // there can be some leading whitespace
      return Color.fromHexString(str);
    }
    // color name
    var hex = Color.nameToHex[str];
    if (hex) {
      return Color.fromHexString(hex);
    }
    // rgb(a) notation
    if (str.indexOf('rgb') >= 0) {
      return Color.fromRgbaString(str);
    }
    throw new Error("Invalid color string: '" + str + "'");
  };
  // Using separate RegExp for the short hex notation because strings like `#abcd`
  // are matched as ['#abcd', 'ab', 'c', 'd', undefined] when the `{1,2}` quantifier is used.
  Color.fromHexString = function (str) {
    var values = str.match(Color.hexRe);
    if (values) {
      var r = parseInt(values[1], 16);
      var g = parseInt(values[2], 16);
      var b = parseInt(values[3], 16);
      var a = values[4] !== undefined ? parseInt(values[4], 16) : 255;
      return new Color(r / 255, g / 255, b / 255, a / 255);
    }
    values = str.match(Color.shortHexRe);
    if (values) {
      var r = parseInt(values[1], 16);
      var g = parseInt(values[2], 16);
      var b = parseInt(values[3], 16);
      var a = values[4] !== undefined ? parseInt(values[4], 16) : 15;
      r += r * 16;
      g += g * 16;
      b += b * 16;
      a += a * 16;
      return new Color(r / 255, g / 255, b / 255, a / 255);
    }
    throw new Error("Malformed hexadecimal color string: '" + str + "'");
  };
  Color.fromRgbaString = function (str) {
    var values = str.match(Color.rgbRe);
    if (values) {
      return new Color(+values[1] / 255, +values[2] / 255, +values[3] / 255);
    }
    values = str.match(Color.rgbaRe);
    if (values) {
      return new Color(+values[1] / 255, +values[2] / 255, +values[3] / 255, +values[4]);
    }
    throw new Error("Malformed rgb/rgba color string: '" + str + "'");
  };
  Color.fromArray = function (arr) {
    if (arr.length === 4) {
      return new Color(arr[0], arr[1], arr[2], arr[3]);
    }
    if (arr.length === 3) {
      return new Color(arr[0], arr[1], arr[2]);
    }
    throw new Error('The given array should contain 3 or 4 color components (numbers).');
  };
  Color.fromHSB = function (h, s, b, alpha) {
    if (alpha === void 0) {
      alpha = 1;
    }
    var rgb = Color.HSBtoRGB(h, s, b);
    return new Color(rgb[0], rgb[1], rgb[2], alpha);
  };
  Color.padHex = function (str) {
    // Can't use `padStart(2, '0')` here because of IE.
    return str.length === 1 ? '0' + str : str;
  };
  Color.prototype.toHexString = function () {
    var hex = '#' + Color.padHex(Math.round(this.r * 255).toString(16)) + Color.padHex(Math.round(this.g * 255).toString(16)) + Color.padHex(Math.round(this.b * 255).toString(16));
    if (this.a < 1) {
      hex += Color.padHex(Math.round(this.a * 255).toString(16));
    }
    return hex;
  };
  Color.prototype.toRgbaString = function (fractionDigits) {
    if (fractionDigits === void 0) {
      fractionDigits = 3;
    }
    var components = [Math.round(this.r * 255), Math.round(this.g * 255), Math.round(this.b * 255)];
    var k = Math.pow(10, fractionDigits);
    if (this.a !== 1) {
      components.push(Math.round(this.a * k) / k);
      return "rgba(" + components.join(', ') + ")";
    }
    return "rgb(" + components.join(', ') + ")";
  };
  Color.prototype.toString = function () {
    if (this.a === 1) {
      return this.toHexString();
    }
    return this.toRgbaString();
  };
  Color.prototype.toHSB = function () {
    return Color.RGBtoHSB(this.r, this.g, this.b);
  };
  /**
   * Converts the given RGB triple to an array of HSB (HSV) components.
   * The hue component will be `NaN` for achromatic colors.
   */
  Color.RGBtoHSB = function (r, g, b) {
    var min = Math.min(r, g, b);
    var max = Math.max(r, g, b);
    var S = max !== 0 ? (max - min) / max : 0;
    var H = NaN;
    // min == max, means all components are the same
    // and the color is a shade of gray with no hue (H is NaN)
    if (min !== max) {
      var delta = max - min;
      var rc = (max - r) / delta;
      var gc = (max - g) / delta;
      var bc = (max - b) / delta;
      if (r === max) {
        H = bc - gc;
      } else if (g === max) {
        H = 2.0 + rc - bc;
      } else {
        H = 4.0 + gc - rc;
      }
      H /= 6.0;
      if (H < 0) {
        H = H + 1.0;
      }
    }
    return [H * 360, S, max];
  };
  /**
   * Converts the given HSB (HSV) triple to an array of RGB components.
   */
  Color.HSBtoRGB = function (H, S, B) {
    if (isNaN(H)) {
      H = 0;
    }
    H = (H % 360 + 360) % 360 / 360; // normalize hue to [0, 360] interval, then scale to [0, 1]
    var r = 0;
    var g = 0;
    var b = 0;
    if (S === 0) {
      r = g = b = B;
    } else {
      var h = (H - Math.floor(H)) * 6;
      var f = h - Math.floor(h);
      var p = B * (1 - S);
      var q = B * (1 - S * f);
      var t = B * (1 - S * (1 - f));
      switch (h >> 0) {
        // discard the floating point part of the number
        case 0:
          r = B;
          g = t;
          b = p;
          break;
        case 1:
          r = q;
          g = B;
          b = p;
          break;
        case 2:
          r = p;
          g = B;
          b = t;
          break;
        case 3:
          r = p;
          g = q;
          b = B;
          break;
        case 4:
          r = t;
          g = p;
          b = B;
          break;
        case 5:
          r = B;
          g = p;
          b = q;
          break;
      }
    }
    return [r, g, b];
  };
  Color.prototype.derive = function (hueShift, saturationFactor, brightnessFactor, opacityFactor) {
    var hsb = Color.RGBtoHSB(this.r, this.g, this.b);
    var b = hsb[2];
    if (b == 0 && brightnessFactor > 1.0) {
      b = 0.05;
    }
    var h = ((hsb[0] + hueShift) % 360 + 360) % 360;
    var s = Math.max(Math.min(hsb[1] * saturationFactor, 1.0), 0.0);
    b = Math.max(Math.min(b * brightnessFactor, 1.0), 0.0);
    var a = Math.max(Math.min(this.a * opacityFactor, 1.0), 0.0);
    var rgba = Color.HSBtoRGB(h, s, b);
    rgba.push(a);
    return Color.fromArray(rgba);
  };
  Color.prototype.brighter = function () {
    return this.derive(0, 1.0, 1.0 / 0.7, 1.0);
  };
  Color.prototype.darker = function () {
    return this.derive(0, 1.0, 0.7, 1.0);
  };
  // See https://drafts.csswg.org/css-color/#hex-notation
  Color.hexRe = /\s*#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})?\s*$/;
  Color.shortHexRe = /\s*#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])?\s*$/;
  Color.rgbRe = /\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)\s*/;
  Color.rgbaRe = /\s*rgba\((\d+),\s*(\d+),\s*(\d+),\s*([.\d]+)\)\s*/;
  /**
   * CSS Color Module Level 4:
   * https://drafts.csswg.org/css-color/#named-colors
   */
  Color.nameToHex = Object.freeze({
    aliceblue: '#F0F8FF',
    antiquewhite: '#FAEBD7',
    aqua: '#00FFFF',
    aquamarine: '#7FFFD4',
    azure: '#F0FFFF',
    beige: '#F5F5DC',
    bisque: '#FFE4C4',
    black: '#000000',
    blanchedalmond: '#FFEBCD',
    blue: '#0000FF',
    blueviolet: '#8A2BE2',
    brown: '#A52A2A',
    burlywood: '#DEB887',
    cadetblue: '#5F9EA0',
    chartreuse: '#7FFF00',
    chocolate: '#D2691E',
    coral: '#FF7F50',
    cornflowerblue: '#6495ED',
    cornsilk: '#FFF8DC',
    crimson: '#DC143C',
    cyan: '#00FFFF',
    darkblue: '#00008B',
    darkcyan: '#008B8B',
    darkgoldenrod: '#B8860B',
    darkgray: '#A9A9A9',
    darkgreen: '#006400',
    darkgrey: '#A9A9A9',
    darkkhaki: '#BDB76B',
    darkmagenta: '#8B008B',
    darkolivegreen: '#556B2F',
    darkorange: '#FF8C00',
    darkorchid: '#9932CC',
    darkred: '#8B0000',
    darksalmon: '#E9967A',
    darkseagreen: '#8FBC8F',
    darkslateblue: '#483D8B',
    darkslategray: '#2F4F4F',
    darkslategrey: '#2F4F4F',
    darkturquoise: '#00CED1',
    darkviolet: '#9400D3',
    deeppink: '#FF1493',
    deepskyblue: '#00BFFF',
    dimgray: '#696969',
    dimgrey: '#696969',
    dodgerblue: '#1E90FF',
    firebrick: '#B22222',
    floralwhite: '#FFFAF0',
    forestgreen: '#228B22',
    fuchsia: '#FF00FF',
    gainsboro: '#DCDCDC',
    ghostwhite: '#F8F8FF',
    gold: '#FFD700',
    goldenrod: '#DAA520',
    gray: '#808080',
    green: '#008000',
    greenyellow: '#ADFF2F',
    grey: '#808080',
    honeydew: '#F0FFF0',
    hotpink: '#FF69B4',
    indianred: '#CD5C5C',
    indigo: '#4B0082',
    ivory: '#FFFFF0',
    khaki: '#F0E68C',
    lavender: '#E6E6FA',
    lavenderblush: '#FFF0F5',
    lawngreen: '#7CFC00',
    lemonchiffon: '#FFFACD',
    lightblue: '#ADD8E6',
    lightcoral: '#F08080',
    lightcyan: '#E0FFFF',
    lightgoldenrodyellow: '#FAFAD2',
    lightgray: '#D3D3D3',
    lightgreen: '#90EE90',
    lightgrey: '#D3D3D3',
    lightpink: '#FFB6C1',
    lightsalmon: '#FFA07A',
    lightseagreen: '#20B2AA',
    lightskyblue: '#87CEFA',
    lightslategray: '#778899',
    lightslategrey: '#778899',
    lightsteelblue: '#B0C4DE',
    lightyellow: '#FFFFE0',
    lime: '#00FF00',
    limegreen: '#32CD32',
    linen: '#FAF0E6',
    magenta: '#FF00FF',
    maroon: '#800000',
    mediumaquamarine: '#66CDAA',
    mediumblue: '#0000CD',
    mediumorchid: '#BA55D3',
    mediumpurple: '#9370DB',
    mediumseagreen: '#3CB371',
    mediumslateblue: '#7B68EE',
    mediumspringgreen: '#00FA9A',
    mediumturquoise: '#48D1CC',
    mediumvioletred: '#C71585',
    midnightblue: '#191970',
    mintcream: '#F5FFFA',
    mistyrose: '#FFE4E1',
    moccasin: '#FFE4B5',
    navajowhite: '#FFDEAD',
    navy: '#000080',
    oldlace: '#FDF5E6',
    olive: '#808000',
    olivedrab: '#6B8E23',
    orange: '#FFA500',
    orangered: '#FF4500',
    orchid: '#DA70D6',
    palegoldenrod: '#EEE8AA',
    palegreen: '#98FB98',
    paleturquoise: '#AFEEEE',
    palevioletred: '#DB7093',
    papayawhip: '#FFEFD5',
    peachpuff: '#FFDAB9',
    peru: '#CD853F',
    pink: '#FFC0CB',
    plum: '#DDA0DD',
    powderblue: '#B0E0E6',
    purple: '#800080',
    rebeccapurple: '#663399',
    red: '#FF0000',
    rosybrown: '#BC8F8F',
    royalblue: '#4169E1',
    saddlebrown: '#8B4513',
    salmon: '#FA8072',
    sandybrown: '#F4A460',
    seagreen: '#2E8B57',
    seashell: '#FFF5EE',
    sienna: '#A0522D',
    silver: '#C0C0C0',
    skyblue: '#87CEEB',
    slateblue: '#6A5ACD',
    slategray: '#708090',
    slategrey: '#708090',
    snow: '#FFFAFA',
    springgreen: '#00FF7F',
    steelblue: '#4682B4',
    tan: '#D2B48C',
    teal: '#008080',
    thistle: '#D8BFD8',
    tomato: '#FF6347',
    turquoise: '#40E0D0',
    violet: '#EE82EE',
    wheat: '#F5DEB3',
    white: '#FFFFFF',
    whitesmoke: '#F5F5F5',
    yellow: '#FFFF00',
    yellowgreen: '#9ACD32'
  });
  return Color;
}();
function color(a, b) {
  if (typeof a === 'string') {
    try {
      a = Color.fromString(a);
    } catch (e) {
      a = Color.fromArray([0, 0, 0]);
    }
  }
  if (typeof b === 'string') {
    try {
      b = Color.fromString(b);
    } catch (e) {
      b = Color.fromArray([0, 0, 0]);
    }
  }
  var red = interpolateNumber(a.r, b.r);
  var green = interpolateNumber(a.g, b.g);
  var blue = interpolateNumber(a.b, b.b);
  var alpha = interpolateNumber(a.a, b.a);
  return function (t) {
    return Color.fromArray([red(t), green(t), blue(t), alpha(t)]).toRgbaString();
  };
}
function interpolateValue(a, b) {
  var t = typeof b;
  var c;
  if (b == null || t === 'boolean') {
    return constant(b);
  }
  if (t === 'number') {
    return interpolateNumber(a, b);
  }
  if (t === 'string') {
    try {
      c = Color.fromString(b);
      b = c;
      return color(a, b);
    } catch (e) {
      // return string(a, b);
    }
  }
  if (b instanceof Color) {
    return color(a, b);
  }
  if (b instanceof Date) {
    return date(a, b);
  }
  if (Array.isArray(b)) {
    return array(a, b);
  }
  if (typeof b.valueOf !== 'function' && typeof b.toString !== 'function' || isNaN(b)) {
    return object(a, b);
  }
  return interpolateNumber(a, b);
}
function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
function bisectRight(list, x, comparator, lo, hi) {
  if (lo === void 0) {
    lo = 0;
  }
  if (hi === void 0) {
    hi = list.length;
  }
  while (lo < hi) {
    var mid = lo + hi >>> 1;
    if (comparator(list[mid], x) > 0) {
      // list[mid] > x
      hi = mid;
    } else {
      lo = mid + 1;
    }
  }
  return lo;
}
function complexBisectRight(list, x, map, lo, hi) {
  if (lo === void 0) {
    lo = 0;
  }
  if (hi === void 0) {
    hi = list.length;
  }
  var comparator = ascendingComparator(map);
  while (lo < hi) {
    var mid = lo + hi >>> 1;
    if (comparator(list[mid], x) < 0) {
      lo = mid + 1;
    } else {
      hi = mid;
    }
  }
  return lo;
}
function ascendingComparator(map) {
  return function (item, x) {
    return ascending(map(item), x);
  };
}
var constant$1 = function (x) {
  return function () {
    return x;
  };
};
var identity = function (x) {
  return x;
};
function clamper(domain) {
  var _a;
  var a = domain[0];
  var b = domain[domain.length - 1];
  if (a > b) {
    _a = [b, a], a = _a[0], b = _a[1];
  }
  return function (x) {
    return Math.max(a, Math.min(b, x));
  };
}
var ContinuousScale = /** @class */function () {
  function ContinuousScale() {
    /**
     * The output value of the scale for `undefined` or `NaN` input values.
     */
    this.unknown = undefined;
    this._clamp = identity;
    this._domain = [0, 1];
    this._range = [0, 1];
    this.transform = identity; // transforms domain value
    this.untransform = identity; // untransforms domain value
    this._interpolate = interpolateValue;
    this.rescale();
  }
  Object.defineProperty(ContinuousScale.prototype, "clamp", {
    get: function () {
      return this._clamp !== identity;
    },
    set: function (value) {
      this._clamp = value ? clamper(this.domain) : identity;
    },
    enumerable: true,
    configurable: true
  });
  ContinuousScale.prototype.setDomain = function (values) {
    this._domain = Array.prototype.map.call(values, function (v) {
      return +v;
    });
    if (this._clamp !== identity) {
      this._clamp = clamper(this.domain);
    }
    this.rescale();
  };
  ContinuousScale.prototype.getDomain = function () {
    return this._domain.slice();
  };
  Object.defineProperty(ContinuousScale.prototype, "domain", {
    get: function () {
      return this.getDomain();
    },
    set: function (values) {
      this.setDomain(values);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ContinuousScale.prototype, "range", {
    get: function () {
      return this._range.slice();
    },
    set: function (values) {
      this._range = Array.prototype.slice.call(values);
      this.rescale();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ContinuousScale.prototype, "interpolate", {
    get: function () {
      return this._interpolate;
    },
    set: function (value) {
      this._interpolate = value;
      this.rescale();
    },
    enumerable: true,
    configurable: true
  });
  ContinuousScale.prototype.rescale = function () {
    if (Math.min(this.domain.length, this.range.length) > 2) {
      this.piecewise = this.polymap;
    } else {
      this.piecewise = this.bimap;
    }
    this.output = undefined;
    this.input = undefined;
  };
  /**
   * Returns a function that converts `x` in `[a, b]` to `t` in `[0, 1]`. Non-clamping.
   * @param a
   * @param b
   */
  ContinuousScale.prototype.normalize = function (a, b) {
    return (b -= a = +a) ? function (x) {
      return (x - a) / b;
    } : constant$1(isNaN(b) ? NaN : 0.5);
  };
  ContinuousScale.prototype.bimap = function (domain, range, interpolate) {
    var x0 = domain[0];
    var x1 = domain[1];
    var y0 = range[0];
    var y1 = range[1];
    var xt;
    var ty;
    if (x1 < x0) {
      xt = this.normalize(x1, x0);
      ty = interpolate(y1, y0);
    } else {
      xt = this.normalize(x0, x1);
      ty = interpolate(y0, y1);
    }
    return function (x) {
      return ty(xt(x));
    }; // domain value x --> t in [0, 1] --> range value y
  };

  ContinuousScale.prototype.polymap = function (domain, range, interpolate) {
    var _this = this;
    // number of segments in the polylinear scale
    var n = Math.min(domain.length, range.length) - 1;
    if (domain[n] < domain[0]) {
      domain = domain.slice().reverse();
      range = range.slice().reverse();
    }
    // deinterpolators from domain segment value to t
    var dt = Array.from({
      length: n
    }, function (_, i) {
      return _this.normalize(domain[i], domain[i + 1]);
    });
    // reinterpolators from t to range segment value
    var tr = Array.from({
      length: n
    }, function (_, i) {
      return interpolate(range[i], range[i + 1]);
    });
    return function (x) {
      var i = bisectRight(domain, x, ascending, 1, n) - 1; // Find the domain segment that `x` belongs to.
      // This also tells us which deinterpolator/reinterpolator pair to use.
      return tr[i](dt[i](x));
    };
  };
  ContinuousScale.prototype.convert = function (x) {
    x = +x;
    if (isNaN(x)) {
      return this.unknown;
    } else {
      if (!this.output) {
        this.output = this.piecewise(this.domain.map(this.transform), this.range, this.interpolate);
      }
      return this.output(this.transform(this._clamp(x)));
    }
  };
  ContinuousScale.prototype.invert = function (y) {
    if (!this.input) {
      this.input = this.piecewise(this.range, this.domain.map(this.transform), interpolateNumber);
    }
    return this._clamp(this.untransform(this.input(y)));
  };
  return ContinuousScale;
}();
var __extends$H =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
function ticks(a, b, count) {
  var step = tickStep(a, b, count);
  a = Math.ceil(a / step) * step;
  b = Math.floor(b / step) * step + step / 2;
  // Add half a step here so that the array returned by `range` includes the last tick.
  return range(a, b, step);
}
var e10 = Math.sqrt(50);
var e5 = Math.sqrt(10);
var e2 = Math.sqrt(2);
function tickStep(a, b, count) {
  var rawStep = Math.abs(b - a) / Math.max(0, count);
  var step = Math.pow(10, Math.floor(Math.log(rawStep) / Math.LN10)); // = Math.log10(rawStep)
  var error = rawStep / step;
  if (error >= e10) {
    step *= 10;
  } else if (error >= e5) {
    step *= 5;
  } else if (error >= e2) {
    step *= 2;
  }
  return b < a ? -step : step;
}
function tickIncrement(a, b, count) {
  var rawStep = (b - a) / Math.max(0, count);
  var power = Math.floor(Math.log(rawStep) / Math.LN10);
  var error = rawStep / Math.pow(10, power);
  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}
var NumericTicks = /** @class */function (_super) {
  __extends$H(NumericTicks, _super);
  function NumericTicks(fractionDigits, elements) {
    var _this = _super.call(this) || this;
    if (elements) {
      for (var i = 0, n = elements.length; i < n; i++) {
        _this[i] = elements[i];
      }
    }
    _this.fractionDigits = fractionDigits;
    return _this;
  }
  return NumericTicks;
}(Array);
function range(a, b, step) {
  if (step === void 0) {
    step = 1;
  }
  var absStep = Math.abs(step);
  var fractionDigits = absStep > 0 && absStep < 1 ? Math.abs(Math.floor(Math.log(absStep) / Math.LN10)) : 0;
  var f = Math.pow(10, fractionDigits);
  var n = Math.max(0, Math.ceil((b - a) / step)) || 0;
  var values = new NumericTicks(fractionDigits);
  for (var i = 0; i < n; i++) {
    var value = a + step * i;
    values[i] = Math.round(value * f) / f;
  }
  return values;
}
var formatTypes = {
  // Multiply by 100, and then decimal notation with a percent sign.
  '%': function (x, p) {
    return (x * 100).toFixed(p);
  },
  // Binary notation, rounded to integer.
  'b': function (x) {
    return Math.round(x).toString(2);
  },
  // Converts the integer to the corresponding unicode character before printing.
  'c': function (x) {
    return String(x);
  },
  // Decimal notation, rounded to integer.
  'd': formatDecimal,
  // Exponent notation.
  'e': function (x, p) {
    return x.toExponential(p);
  },
  // Fixed point notation.
  'f': function (x, p) {
    return x.toFixed(p);
  },
  // Either decimal or exponent notation, rounded to significant digits.
  'g': function (x, p) {
    return x.toPrecision(p);
  },
  // Octal notation, rounded to integer.
  'o': function (x) {
    return Math.round(x).toString(8);
  },
  // Multiply by 100, round to significant digits, and then decimal notation with a percent sign.
  'p': function (x, p) {
    return formatRounded(x * 100, p);
  },
  // Decimal notation, rounded to significant digits.
  'r': formatRounded,
  // Decimal notation with a SI prefix, rounded to significant digits.
  's': formatPrefixAuto,
  // Hexadecimal notation, using upper-case letters, rounded to integer.
  'X': function (x) {
    return Math.round(x).toString(16).toUpperCase();
  },
  // Hexadecimal notation, using lower-case letters, rounded to integer.
  'x': function (x) {
    return Math.round(x).toString(16);
  }
};
var prefixes = ['y', 'z', 'a', 'f', 'p', 'n', '\xB5', 'm', '', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];
/**
 * [[fill]align][sign][#][0][width][grouping_option][.precision][type]
 */
var FormatSpecifier = /** @class */function () {
  function FormatSpecifier(specifier) {
    if (specifier instanceof FormatSpecifier) {
      this.fill = specifier.fill;
      this.align = specifier.align;
      this.sign = specifier.sign;
      this.symbol = specifier.symbol;
      this.zero = specifier.zero;
      this.width = specifier.width;
      this.comma = specifier.comma;
      this.precision = specifier.precision;
      this.trim = specifier.trim;
      this.type = specifier.type;
      this.string = specifier.string;
    } else {
      this.fill = specifier.fill === undefined ? ' ' : String(specifier.fill);
      this.align = specifier.align === undefined ? '>' : String(specifier.align);
      this.sign = specifier.sign === undefined ? '-' : String(specifier.sign);
      this.symbol = specifier.symbol === undefined ? '' : String(specifier.symbol);
      this.zero = !!specifier.zero;
      this.width = specifier.width === undefined ? undefined : +specifier.width;
      this.comma = !!specifier.comma;
      this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
      this.trim = !!specifier.trim;
      this.type = specifier.type === undefined ? '' : String(specifier.type);
      this.string = specifier.string;
    }
  }
  return FormatSpecifier;
}();
// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var formatRegEx = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
var interpolateRegEx = /(#\{(.*?)\})/g;
function makeFormatSpecifier(specifier) {
  if (specifier instanceof FormatSpecifier) {
    return new FormatSpecifier(specifier);
  }
  var found = false;
  var string = specifier.replace(interpolateRegEx, function () {
    if (!found) {
      specifier = arguments[2];
      found = true;
    }
    return '#{}';
  });
  var match = formatRegEx.exec(specifier);
  if (!match) {
    throw new Error("Invalid format: " + specifier);
  }
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10],
    string: found ? string : undefined
  });
}
function tickFormat(start, stop, count, specifier) {
  var step = tickStep(start, stop, count);
  var formatSpecifier = makeFormatSpecifier(specifier == undefined ? ',f' : specifier);
  switch (formatSpecifier.type) {
    case 's':
      {
        var value = Math.max(Math.abs(start), Math.abs(stop));
        if (formatSpecifier.precision == null) {
          var precision = precisionPrefix(step, value);
          if (!isNaN(precision)) {
            formatSpecifier.precision = precision;
          }
        }
        return formatPrefix(formatSpecifier, value);
      }
    case '':
    case 'e':
    case 'g':
    case 'p':
    case 'r':
      {
        if (formatSpecifier.precision == null) {
          var precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop)));
          if (!isNaN(precision)) {
            formatSpecifier.precision = precision - Number(formatSpecifier.type === 'e');
          }
        }
        break;
      }
    case 'f':
    case '%':
      {
        if (formatSpecifier.precision == null) {
          var precision = precisionFixed(step);
          if (!isNaN(precision)) {
            formatSpecifier.precision = precision - Number(formatSpecifier.type === '%') * 2;
          }
        }
        break;
      }
  }
  return format(formatSpecifier);
}
var prefixExponent;
function formatPrefixAuto(x, p) {
  var d = formatDecimalParts(x, p);
  if (!d) {
    return String(x);
  }
  var coefficient = d[0];
  var exponent = d[1];
  prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3;
  var i = exponent - prefixExponent + 1;
  var n = coefficient.length;
  if (i === n) {
    return coefficient;
  } else {
    if (i > n) {
      return coefficient + new Array(i - n + 1).join('0');
    }
    if (i > 0) {
      return coefficient.slice(0, i) + '.' + coefficient.slice(i);
    } else {
      var parts = formatDecimalParts(x, Math.max(0, p + i - 1));
      return '0.' + new Array(1 - i).join('0') + parts[0]; // less than 1y!
    }
  }
}

function formatDecimal(x) {
  return Math.abs(x = Math.round(x)) >= 1e21 ? x.toLocaleString('en').replace(/,/g, '') : x.toString(10);
}
function formatGroup(grouping, thousands) {
  return function (value, width) {
    var t = [];
    var i = value.length;
    var j = 0;
    var g = grouping[0];
    var length = 0;
    while (i > 0 && g > 0) {
      if (length + g + 1 > width) {
        g = Math.max(1, width - length);
      }
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) {
        break;
      }
      g = grouping[j = (j + 1) % grouping.length];
    }
    return t.reverse().join(thousands);
  };
}
function formatNumerals(numerals) {
  return function (value) {
    return value.replace(/[0-9]/g, function (i) {
      return numerals[+i];
    });
  };
}
// Trim insignificant zeros.
function formatTrim(s) {
  var n = s.length;
  var i = 1;
  var i0 = -1;
  var i1 = NaN;
  out: for (; i < n; i++) {
    switch (s[i]) {
      case '.':
        i0 = i1 = i;
        break;
      case '0':
        if (i0 === 0) {
          i0 = i;
          i1 = i;
        }
        break;
      default:
        if (!+s[i]) {
          break out;
        }
        if (i0 > 0) {
          i0 = 0;
          break;
        }
    }
  }
  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}
function formatRounded(x, p) {
  var d = formatDecimalParts(x, p);
  if (!d) {
    return String(x);
  }
  var coefficient = d[0];
  var exponent = d[1];
  if (exponent < 0) {
    return '0.' + new Array(-exponent).join('0') + coefficient;
  } else {
    if (coefficient.length > exponent + 1) {
      return coefficient.slice(0, exponent + 1) + '.' + coefficient.slice(exponent + 1);
    } else {
      return coefficient + new Array(exponent - coefficient.length + 2).join('0');
    }
  }
}
// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimalParts(1.23) returns ['123', 0].
function formatDecimalParts(x, p) {
  var sx = p ? x.toExponential(p - 1) : x.toExponential();
  var i = sx.indexOf('e');
  if (i < 0) {
    // NaN, ±Infinity
    return undefined;
  }
  var coefficient = sx.slice(0, i);
  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
  return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +sx.slice(i + 1)];
}
function identity$1(x) {
  return x;
}
var formatDefaultLocale;
var format;
var formatPrefix;
defaultLocale({
  thousands: ',',
  grouping: [3],
  currency: ['$', '']
});
function defaultLocale(definition) {
  formatDefaultLocale = formatLocale(definition);
  format = formatDefaultLocale.format;
  formatPrefix = formatDefaultLocale.formatPrefix;
}
function exponent(x) {
  var parts = formatDecimalParts(Math.abs(x));
  if (parts) {
    return parts[1];
  }
  return NaN;
}
function precisionFixed(step) {
  return Math.max(0, -exponent(Math.abs(step)));
}
function precisionPrefix(step, value) {
  var x = Math.floor(exponent(value) / 3);
  x = Math.min(8, x);
  x = Math.max(-8, x);
  return Math.max(0, x * 3 - exponent(Math.abs(step)));
}
function precisionRound(step, max) {
  step = Math.abs(step);
  max = Math.abs(max) - step;
  return Math.max(0, exponent(max) - exponent(step)) + 1;
}
function formatLocale(locale) {
  var group = locale.grouping === undefined || locale.thousands === undefined ? identity$1 : formatGroup(Array.prototype.map.call(locale.grouping, Number), String(locale.thousands));
  var currencyPrefix = locale.currency === undefined ? '' : String(locale.currency[0]);
  var currencySuffix = locale.currency === undefined ? '' : String(locale.currency[1]);
  var decimal = locale.decimal === undefined ? '.' : String(locale.decimal);
  var numerals = locale.numerals === undefined ? identity$1 : formatNumerals(Array.prototype.map.call(locale.numerals, String));
  var percent = locale.percent === undefined ? '%' : String(locale.percent);
  var minus = locale.minus === undefined ? '\u2212' : String(locale.minus);
  var nan = locale.nan === undefined ? 'NaN' : String(locale.nan);
  function newFormat(specifier) {
    var formatSpecifier = makeFormatSpecifier(specifier);
    var fill = formatSpecifier.fill;
    var align = formatSpecifier.align;
    var sign = formatSpecifier.sign;
    var symbol = formatSpecifier.symbol;
    var zero = formatSpecifier.zero;
    var width = formatSpecifier.width;
    var comma = formatSpecifier.comma;
    var precision = formatSpecifier.precision;
    var trim = formatSpecifier.trim;
    var type = formatSpecifier.type;
    // The 'n' type is an alias for ',g'.
    if (type === 'n') {
      comma = true;
      type = 'g';
    } else if (!type || !formatTypes[type]) {
      // The '' type, and any invalid type, is an alias for '.12~g'.
      if (precision === undefined) {
        precision = 12;
      }
      trim = true;
      type = 'g';
    }
    // If zero fill is specified, padding goes after sign and before digits.
    if (zero || fill === '0' && align === '=') {
      zero = true;
      fill = '0';
      align = '=';
    }
    // Compute the prefix and suffix.
    // For SI-prefix, the suffix is lazily computed.
    var prefix = symbol === '$' ? currencyPrefix : symbol === '#' && /[boxX]/.test(type) ? '0' + type.toLowerCase() : '';
    var suffix = symbol === '$' ? currencySuffix : /[%p]/.test(type) ? percent : '';
    // What format function should we use?
    // Is this an integer type?
    // Can this type generate exponential notation?
    var formatType = formatTypes[type];
    var maybeSuffix = /[defgprs%]/.test(type);
    // Set the default precision if not specified,
    // or clamp the specified precision to the supported range.
    // For significant precision, it must be in [1, 21].
    // For fixed precision, it must be in [0, 20].
    if (precision === undefined) {
      precision = 6;
    } else if (/[gprs]/.test(type)) {
      precision = Math.max(1, Math.min(21, precision));
    } else {
      precision = Math.max(0, Math.min(20, precision));
    }
    function format(x) {
      var valuePrefix = prefix;
      var valueSuffix = suffix;
      var value;
      if (type === 'c') {
        valueSuffix = formatType(x) + valueSuffix;
        value = '';
      } else {
        x = +x;
        // Determine the sign. -0 is not less than 0, but 1 / -0 is!
        var valueNegative = x < 0 || 1 / x < 0;
        // Perform the initial formatting.
        value = isNaN(x) ? nan : formatType(Math.abs(x), precision);
        // Trim insignificant zeros.
        if (trim) {
          value = formatTrim(value);
        }
        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
        if (valueNegative && +value === 0 && sign !== '+') {
          valueNegative = false;
        }
        // Compute the prefix and suffix.
        var signPrefix = valueNegative ? sign === '(' ? sign : minus : sign === '-' || sign === '(' ? '' : sign;
        var signSuffix = valueNegative && sign === '(' ? ')' : '';
        valuePrefix = signPrefix + valuePrefix;
        valueSuffix = (type === 's' ? prefixes[8 + prefixExponent / 3] : '') + valueSuffix + signSuffix;
        // Break the formatted value into the integer “value” part that can be
        // grouped, and fractional or exponential “suffix” part that is not.
        if (maybeSuffix) {
          for (var i = 0, n = value.length; i < n; i++) {
            var c = value.charCodeAt(i);
            if (48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }
      // If the fill character is not '0', grouping is applied before padding.
      if (comma && !zero) value = group(value, Infinity);
      // Compute the padding.
      var length = valuePrefix.length + value.length + valueSuffix.length;
      var padding = length < width ? new Array(width - length + 1).join(fill) : '';
      // If the fill character is '0', grouping is applied after padding.
      if (comma && zero) {
        value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity);
        padding = '';
      }
      // Reconstruct the final output based on the desired alignment.
      switch (align) {
        case '<':
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case '=':
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case '^':
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      var string = formatSpecifier.string;
      if (string) {
        return string.replace(interpolateRegEx, function () {
          return numerals(value);
        });
      }
      return numerals(value);
    }
    return format;
  }
  function formatPrefix(specifier, value) {
    var formatSpecifier = makeFormatSpecifier(specifier);
    formatSpecifier.type = 'f';
    var f = newFormat(formatSpecifier);
    var e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3;
    var k = Math.pow(10, -e);
    var prefix = prefixes[8 + e / 3];
    return function (value) {
      return f(k * value) + prefix;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix
  };
}
var __extends$I =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
/**
 * Maps continuous domain to a continuous range.
 */
var LinearScale = /** @class */function (_super) {
  __extends$I(LinearScale, _super);
  function LinearScale() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.type = 'linear';
    return _this;
  }
  LinearScale.prototype.ticks = function (count) {
    if (count === void 0) {
      count = 10;
    }
    var d = this._domain;
    return ticks(d[0], d[d.length - 1], count);
  };
  /**
   * Extends the domain so that it starts and ends on nice round values.
   * @param count Tick count.
   */
  LinearScale.prototype.nice = function (count) {
    if (count === void 0) {
      count = 10;
    }
    var d = this.domain;
    var i0 = 0;
    var i1 = d.length - 1;
    var start = d[i0];
    var stop = d[i1];
    var step;
    if (stop < start) {
      step = start;
      start = stop;
      stop = step;
      step = i0;
      i0 = i1;
      i1 = step;
    }
    step = tickIncrement(start, stop, count);
    if (step > 0) {
      start = Math.floor(start / step) * step;
      stop = Math.ceil(stop / step) * step;
      step = tickIncrement(start, stop, count);
    } else if (step < 0) {
      start = Math.ceil(start * step) / step;
      stop = Math.floor(stop * step) / step;
      step = tickIncrement(start, stop, count);
    }
    if (step > 0) {
      d[i0] = Math.floor(start / step) * step;
      d[i1] = Math.ceil(stop / step) * step;
      this.domain = d;
    } else if (step < 0) {
      d[i0] = Math.ceil(start * step) / step;
      d[i1] = Math.floor(stop * step) / step;
      this.domain = d;
    }
  };
  LinearScale.prototype.tickFormat = function (count, specifier) {
    var d = this.domain;
    return tickFormat(d[0], d[d.length - 1], count == undefined ? 10 : count, specifier);
  };
  return LinearScale;
}(ContinuousScale);
var __extends$J =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Group = /** @class */function (_super) {
  __extends$J(Group, _super);
  function Group() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.isContainerNode = true;
    return _this;
  }
  // We consider a group to be boundless, thus any point belongs to it.
  Group.prototype.containsPoint = function (x, y) {
    return true;
  };
  Group.prototype.computeBBox = function () {
    var left = Infinity;
    var right = -Infinity;
    var top = Infinity;
    var bottom = -Infinity;
    if (this.dirtyTransform) {
      this.computeTransformMatrix();
    }
    this.children.forEach(function (child) {
      if (!child.visible) {
        return;
      }
      var bbox = child.computeBBox();
      if (!bbox) {
        return;
      }
      if (!(child instanceof Group)) {
        if (child.dirtyTransform) {
          child.computeTransformMatrix();
        }
        var matrix = Matrix.flyweight(child.matrix);
        var parent_1 = child.parent;
        while (parent_1) {
          matrix.preMultiplySelf(parent_1.matrix);
          parent_1 = parent_1.parent;
        }
        matrix.transformBBox(bbox, 0, bbox);
      }
      var x = bbox.x;
      var y = bbox.y;
      if (x < left) {
        left = x;
      }
      if (y < top) {
        top = y;
      }
      if (x + bbox.width > right) {
        right = x + bbox.width;
      }
      if (y + bbox.height > bottom) {
        bottom = y + bbox.height;
      }
    });
    return new BBox(left, top, right - left, bottom - top);
  };
  Group.prototype.render = function (ctx) {
    // A group can have `scaling`, `rotation`, `translation` properties
    // that are applied to the canvas context before children are rendered,
    // so all children can be transformed at once.
    if (this.dirtyTransform) {
      this.computeTransformMatrix();
    }
    this.matrix.toContext(ctx);
    var children = this.children;
    var n = children.length;
    for (var i = 0; i < n; i++) {
      ctx.save();
      var child = children[i];
      if (child.visible) {
        child.render(ctx);
      }
      ctx.restore();
    }
    // debug
    // this.computeBBox().render(ctx, {
    //     label: this.id,
    //     resetTransform: true,
    //     fillStyle: 'rgba(0, 0, 0, 0.5)'
    // });
  };

  Group.className = 'Group';
  return Group;
}(Node);
var EnterNode = /** @class */function () {
  function EnterNode(parent, datum) {
    this.next = null;
    this.scene = parent.scene;
    this.parent = parent;
    this.datum = datum;
  }
  EnterNode.prototype.appendChild = function (node) {
    // This doesn't work without the `strict: true` in the `tsconfig.json`,
    // so we must have two `if` checks below, instead of this single one.
    // if (this.next && !Node.isNode(this.next)) {
    //     throw new Error(`${this.next} is not a Node.`);
    // }
    if (this.next === null) {
      return this.parent.insertBefore(node, null);
    }
    if (!Node.isNode(this.next)) {
      throw new Error(this.next + " is not a Node.");
    }
    return this.parent.insertBefore(node, this.next);
  };
  EnterNode.prototype.insertBefore = function (node, nextNode) {
    return this.parent.insertBefore(node, nextNode);
  };
  return EnterNode;
}();
/**
 * G - type of the selected node(s).
 * GDatum - type of the datum of the selected node(s).
 * P - type of the parent node(s).
 * PDatum - type of the datum of the parent node(s).
 */
var Selection = /** @class */function () {
  function Selection(groups, parents) {
    this.groups = groups;
    this.parents = parents;
  }
  Selection.select = function (node) {
    return new Selection([[typeof node === 'function' ? node() : node]], [undefined]);
  };
  Selection.selectAll = function (nodes) {
    return new Selection([nodes == null ? [] : nodes], [undefined]);
  };
  /**
   * Creates new nodes, appends them to the nodes of this selection and returns them
   * as a new selection. The created nodes inherit the datums and the parents of the nodes
   * they replace.
   * @param Class The constructor function to use to create the new nodes.
   */
  Selection.prototype.append = function (Class) {
    return this.select(function (node) {
      return node.appendChild(new Class());
    });
  };
  /**
   * Same as the {@link append}, but accepts a custom creator function with the
   * {@link NodeSelector} signature rather than a constructor function.
   * @param creator
   */
  Selection.prototype.appendFn = function (creator) {
    return this.select(function (node, data, index, group) {
      return node.appendChild(creator(node, data, index, group));
    });
  };
  /**
   * Runs the given selector that returns a single node for every node in each group.
   * The original nodes are then replaced by the nodes returned by the selector
   * and returned as a new selection.
   * The selected nodes inherit the datums and the parents of the original nodes.
   */
  Selection.prototype.select = function (selector) {
    var groups = this.groups;
    var numGroups = groups.length;
    var subgroups = [];
    for (var j = 0; j < numGroups; j++) {
      var group = groups[j];
      var groupSize = group.length;
      var subgroup = subgroups[j] = new Array(groupSize);
      for (var i = 0; i < groupSize; i++) {
        var node = group[i];
        if (node) {
          var subnode = selector(node, node.datum, i, group);
          if (subnode) {
            subnode.datum = node.datum;
          }
          subgroup[i] = subnode;
        }
        // else this can be a group of the `enter` selection,
        // for example, with no nodes at the i-th position,
        // only nodes at the end of the group
      }
    }

    return new Selection(subgroups, this.parents);
  };
  /**
   * Same as {@link select}, but uses the given {@param Class} (constructor) as a selector.
   * @param Class The constructor function to use to find matching nodes.
   */
  Selection.prototype.selectByClass = function (Class) {
    return this.select(function (node) {
      if (Node.isNode(node)) {
        var children = node.children;
        var n = children.length;
        for (var i = 0; i < n; i++) {
          var child = children[i];
          if (child instanceof Class) {
            return child;
          }
        }
      }
    });
  };
  Selection.prototype.selectByTag = function (tag) {
    return this.select(function (node) {
      if (Node.isNode(node)) {
        var children = node.children;
        var n = children.length;
        for (var i = 0; i < n; i++) {
          var child = children[i];
          if (child.tag === tag) {
            return child;
          }
        }
      }
    });
  };
  Selection.prototype.selectAllByClass = function (Class) {
    return this.selectAll(function (node) {
      var nodes = [];
      if (Node.isNode(node)) {
        var children = node.children;
        var n = children.length;
        for (var i = 0; i < n; i++) {
          var child = children[i];
          if (child instanceof Class) {
            nodes.push(child);
          }
        }
      }
      return nodes;
    });
  };
  Selection.prototype.selectAllByTag = function (tag) {
    return this.selectAll(function (node) {
      var nodes = [];
      if (Node.isNode(node)) {
        var children = node.children;
        var n = children.length;
        for (var i = 0; i < n; i++) {
          var child = children[i];
          if (child.tag === tag) {
            nodes.push(child);
          }
        }
      }
      return nodes;
    });
  };
  Selection.prototype.selectNone = function () {
    return [];
  };
  /**
   * Runs the given selector that returns a group of nodes for every node in each group.
   * The original nodes are then replaced by the groups of nodes returned by the selector
   * and returned as a new selection. The original nodes become the parent nodes for each
   * group in the new selection. The selected nodes do not inherit the datums of the original nodes.
   * If called without any parameters, creates a new selection with an empty group for each
   * node in this selection.
   */
  Selection.prototype.selectAll = function (selectorAll) {
    if (!selectorAll) {
      selectorAll = this.selectNone;
    }
    // Each subgroup is populated with the selector (run on each group node) results.
    var subgroups = [];
    // In the new selection that we return, subgroups become groups,
    // and group nodes become parents.
    var parents = [];
    var groups = this.groups;
    var groupCount = groups.length;
    for (var j = 0; j < groupCount; j++) {
      var group = groups[j];
      var groupLength = group.length;
      for (var i = 0; i < groupLength; i++) {
        var node = group[i];
        if (node) {
          subgroups.push(selectorAll(node, node.datum, i, group));
          parents.push(node);
        }
      }
    }
    return new Selection(subgroups, parents);
  };
  /**
   * Runs the given callback for every node in this selection and returns this selection.
   * @param cb
   */
  Selection.prototype.each = function (cb) {
    var groups = this.groups;
    var numGroups = groups.length;
    for (var j = 0; j < numGroups; j++) {
      var group = groups[j];
      var groupSize = group.length;
      for (var i = 0; i < groupSize; i++) {
        var node = group[i];
        if (node) {
          cb(node, node.datum, i, group);
        }
      }
    }
    return this;
  };
  Selection.prototype.remove = function () {
    return this.each(function (node) {
      if (Node.isNode(node)) {
        var parent_1 = node.parent;
        if (parent_1) {
          parent_1.removeChild(node);
        }
      }
    });
  };
  Selection.prototype.merge = function (other) {
    var groups0 = this.groups;
    var groups1 = other.groups;
    var m0 = groups0.length;
    var m1 = groups1.length;
    var m = Math.min(m0, m1);
    var merges = new Array(m0);
    var j = 0;
    for (; j < m; j++) {
      var group0 = groups0[j];
      var group1 = groups1[j];
      var n = group0.length;
      var merge = merges[j] = new Array(n);
      for (var i = 0; i < n; i++) {
        var node = group0[i] || group1[i];
        merge[i] = node || undefined;
      }
    }
    for (; j < m0; j++) {
      merges[j] = groups0[j];
    }
    return new Selection(merges, this.parents);
  };
  /**
   * Return the first non-null element in this selection.
   * If the selection is empty, returns null.
   */
  Selection.prototype.node = function () {
    var groups = this.groups;
    var numGroups = groups.length;
    for (var j = 0; j < numGroups; j++) {
      var group = groups[j];
      var groupSize = group.length;
      for (var i = 0; i < groupSize; i++) {
        var node = group[i];
        if (node) {
          return node;
        }
      }
    }
    return null;
  };
  Selection.prototype.attr = function (name, value) {
    this.each(function (node) {
      node[name] = value;
    });
    return this;
  };
  Selection.prototype.attrFn = function (name, value) {
    this.each(function (node, datum, index, group) {
      node[name] = value(node, datum, index, group);
    });
    return this;
  };
  /**
   * Invokes the given function once, passing in this selection.
   * Returns this selection. Facilitates method chaining.
   * @param cb
   */
  Selection.prototype.call = function (cb) {
    cb(this);
    return this;
  };
  Object.defineProperty(Selection.prototype, "size", {
    /**
     * Returns the total number of nodes in this selection.
     */
    get: function () {
      var size = 0;
      this.each(function () {
        return size++;
      });
      return size;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Selection.prototype, "data", {
    /**
     * Returns the array of data for the selected elements.
     */
    get: function () {
      var data = [];
      this.each(function (_, datum) {
        return data.push(datum);
      });
      return data;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Selection.prototype, "enter", {
    get: function () {
      return new Selection(this.enterGroups ? this.enterGroups : [[]], this.parents);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Selection.prototype, "exit", {
    get: function () {
      return new Selection(this.exitGroups ? this.exitGroups : [[]], this.parents);
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Binds the given value to each selected node and returns this selection
   * with its {@link GDatum} type changed to the type of the given value.
   * This method doesn't compute a join and doesn't affect indexes or the enter and exit selections.
   * This method can also be used to clear bound data.
   * @param value
   */
  Selection.prototype.setDatum = function (value) {
    return this.each(function (node) {
      node.datum = value;
    });
  };
  Object.defineProperty(Selection.prototype, "datum", {
    /**
     * Returns the bound datum for the first non-null element in the selection.
     * This is generally useful only if you know the selection contains exactly one element.
     */
    get: function () {
      var node = this.node();
      return node ? node.datum : null;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Binds the specified array of values with the selected nodes, returning a new selection
   * that represents the _update_ selection: the nodes successfully bound to the values.
   * Also defines the {@link enter} and {@link exit} selections on the returned selection,
   * which can be used to add or remove the nodes to correspond to the new data.
   * The `values` is an array of values of a particular type, or a function that returns
   * an array of values for each group.
   * When values are assigned to the nodes, they are stored in the {@link Node.datum} property.
   * @param values
   * @param key
   */
  Selection.prototype.setData = function (values, key) {
    if (typeof values !== 'function') {
      var data_1 = values;
      values = function () {
        return data_1;
      };
    }
    var groups = this.groups;
    var parents = this.parents;
    var numGroups = groups.length;
    var updateGroups = new Array(numGroups);
    var enterGroups = new Array(numGroups);
    var exitGroups = new Array(numGroups);
    for (var j = 0; j < numGroups; j++) {
      var group = groups[j];
      var parent_2 = parents[j];
      if (!parent_2) {
        throw new Error("Group #" + j + " has no parent: " + group);
      }
      var groupSize = group.length;
      var data = values(parent_2, parent_2.datum, j, parents);
      var dataSize = data.length;
      var enterGroup = enterGroups[j] = new Array(dataSize);
      var updateGroup = updateGroups[j] = new Array(dataSize);
      var exitGroup = exitGroups[j] = new Array(groupSize);
      if (key) {
        this.bindKey(parent_2, group, enterGroup, updateGroup, exitGroup, data, key);
      } else {
        this.bindIndex(parent_2, group, enterGroup, updateGroup, exitGroup, data);
      }
      // Now connect the enter nodes to their following update node, such that
      // appendChild can insert the materialized enter node before this node,
      // rather than at the end of the parent node.
      for (var i0 = 0, i1 = 0; i0 < dataSize; i0++) {
        var previous = enterGroup[i0];
        if (previous) {
          if (i0 >= i1) {
            i1 = i0 + 1;
          }
          var next = void 0;
          while (!(next = updateGroup[i1]) && i1 < dataSize) {
            i1++;
          }
          previous.next = next || null;
        }
      }
    }
    var result = new Selection(updateGroups, parents);
    result.enterGroups = enterGroups;
    result.exitGroups = exitGroups;
    return result;
  };
  Selection.prototype.bindIndex = function (parent, group, enter, update, exit, data) {
    var groupSize = group.length;
    var dataSize = data.length;
    var i = 0;
    for (; i < dataSize; i++) {
      var node = group[i];
      if (node) {
        node.datum = data[i];
        update[i] = node;
      } else {
        // more datums than group nodes
        enter[i] = new EnterNode(parent, data[i]);
      }
    }
    // more group nodes than datums
    for (; i < groupSize; i++) {
      var node = group[i];
      if (node) {
        exit[i] = node;
      }
    }
  };
  Selection.prototype.bindKey = function (parent, group, enter, update, exit, data, key) {
    var groupSize = group.length;
    var dataSize = data.length;
    var keyValues = new Array(groupSize);
    var nodeByKeyValue = {};
    // Compute the key for each node.
    // If multiple nodes have the same key, the duplicates are added to exit.
    for (var i = 0; i < groupSize; i++) {
      var node = group[i];
      if (node) {
        var keyValue = keyValues[i] = Selection.keyPrefix + key(node, node.datum, i, group);
        if (keyValue in nodeByKeyValue) {
          exit[i] = node;
        } else {
          nodeByKeyValue[keyValue] = node;
        }
      }
    }
    // Compute the key for each datum.
    // If there is a node associated with this key, join and add it to update.
    // If there is not (or the key is a duplicate), add it to enter.
    for (var i = 0; i < dataSize; i++) {
      var keyValue = Selection.keyPrefix + key(parent, data[i], i, data);
      var node = nodeByKeyValue[keyValue];
      if (node) {
        update[i] = node;
        node.datum = data[i];
        nodeByKeyValue[keyValue] = undefined;
      } else {
        enter[i] = new EnterNode(parent, data[i]);
      }
    }
    // Add any remaining nodes that were not bound to data to exit.
    for (var i = 0; i < groupSize; i++) {
      var node = group[i];
      if (node && nodeByKeyValue[keyValues[i]] === node) {
        exit[i] = node;
      }
    }
  };
  Selection.keyPrefix = '$'; // Protect against keys like '__proto__'.
  return Selection;
}();
var __extends$K =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Line = /** @class */function (_super) {
  __extends$K(Line, _super);
  function Line() {
    var _this = _super.call(this) || this;
    _this._x1 = 0;
    _this._y1 = 0;
    _this._x2 = 0;
    _this._y2 = 0;
    _this.restoreOwnStyles();
    return _this;
  }
  Object.defineProperty(Line.prototype, "x1", {
    get: function () {
      // TODO: Investigate getter performance further in the context
      //       of the scene graph.
      //       In isolated benchmarks using a getter has the same
      //       performance as a direct property access in Firefox 64.
      //       But in Chrome 71 the getter is 60% slower than direct access.
      //       Direct read is 4.5+ times slower in Chrome than it is in Firefox.
      //       Property access and direct read have the same performance
      //       in Safari 12, which is 2+ times faster than Firefox at this.
      // https://jsperf.com/es5-getters-setters-versus-getter-setter-methods/18
      // This is a know Chrome issue. They say it's not a regression, since
      // the behavior is observed since M60, but jsperf.com history shows the
      // 10x slowdown happened between Chrome 48 and Chrome 57.
      // https://bugs.chromium.org/p/chromium/issues/detail?id=908743
      return this._x1;
    },
    set: function (value) {
      if (this._x1 !== value) {
        this._x1 = value;
        this.dirty = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Line.prototype, "y1", {
    get: function () {
      return this._y1;
    },
    set: function (value) {
      if (this._y1 !== value) {
        this._y1 = value;
        this.dirty = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Line.prototype, "x2", {
    get: function () {
      return this._x2;
    },
    set: function (value) {
      if (this._x2 !== value) {
        this._x2 = value;
        this.dirty = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Line.prototype, "y2", {
    get: function () {
      return this._y2;
    },
    set: function (value) {
      if (this._y2 !== value) {
        this._y2 = value;
        this.dirty = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Line.prototype.computeBBox = function () {
    return new BBox(this.x1, this.y1, this.x2 - this.x1, this.y2 - this.y1);
  };
  Line.prototype.isPointInPath = function (x, y) {
    return false;
  };
  Line.prototype.isPointInStroke = function (x, y) {
    return false;
  };
  Line.prototype.render = function (ctx) {
    if (this.dirtyTransform) {
      this.computeTransformMatrix();
    }
    this.matrix.toContext(ctx);
    var x1 = this.x1;
    var y1 = this.y1;
    var x2 = this.x2;
    var y2 = this.y2;
    // Align to the pixel grid if the line is strictly vertical
    // or horizontal (but not both, i.e. a dot).
    if (x1 === x2) {
      var x = Math.round(x1) + Math.floor(this.strokeWidth) % 2 / 2;
      x1 = x;
      x2 = x;
    } else if (y1 === y2) {
      var y = Math.round(y1) + Math.floor(this.strokeWidth) % 2 / 2;
      y1 = y;
      y2 = y;
    }
    ctx.beginPath();
    ctx.moveTo(x1, y1);
    ctx.lineTo(x2, y2);
    this.fillStroke(ctx);
    this.dirty = false;
  };
  Line.className = 'Line';
  Line.defaultStyles = chainObjects(Shape.defaultStyles, {
    fill: undefined,
    strokeWidth: 1
  });
  return Line;
}(Shape);

// @ts-ignore Suppress tsc error: Property 'sign' does not exist on type 'Math'
var sign = Math.sign ? Math.sign : function (x) {
  x = +x;
  if (x === 0 || isNaN(x)) {
    return x;
  }
  return x > 0 ? 1 : -1;
};
/**
 * Finds the roots of a parametric linear equation in `t`,
 * where `t` lies in the interval of `[0,1]`.
 */
function linearRoot(a, b) {
  var t = -b / a;
  return a !== 0 && t >= 0 && t <= 1 ? [t] : [];
}
/**
 * Finds the roots of a parametric quadratic equation in `t`,
 * where `t` lies in the interval of `[0,1]`.
 */
function quadraticRoots(a, b, c) {
  if (a === 0) {
    return linearRoot(b, c);
  }
  var D = b * b - 4 * a * c; // The polynomial's discriminant.
  var roots = [];
  if (D === 0) {
    // A single real root.
    var t = -b / (2 * a);
    if (t >= 0 && t <= 1) {
      roots.push(t);
    }
  } else if (D > 0) {
    // A pair of distinct real roots.
    var rD = Math.sqrt(D);
    var t1 = (-b - rD) / (2 * a);
    var t2 = (-b + rD) / (2 * a);
    if (t1 >= 0 && t1 <= 1) {
      roots.push(t1);
    }
    if (t2 >= 0 && t2 <= 1) {
      roots.push(t2);
    }
  }
  // else -> Complex roots.
  return roots;
}
/**
 * Finds the roots of a parametric cubic equation in `t`,
 * where `t` lies in the interval of `[0,1]`.
 * Returns an array of parametric intersection locations along the cubic,
 * excluding out-of-bounds intersections (before or after the end point
 * or in the imaginary plane).
 * An adaptation of http://www.particleincell.com/blog/2013/cubic-line-intersection/
 */
function cubicRoots(a, b, c, d) {
  if (a === 0) {
    return quadraticRoots(b, c, d);
  }
  var A = b / a;
  var B = c / a;
  var C = d / a;
  var Q = (3 * B - A * A) / 9;
  var R = (9 * A * B - 27 * C - 2 * A * A * A) / 54;
  var D = Q * Q * Q + R * R; // The polynomial's discriminant.
  var third = 1 / 3;
  var roots = [];
  if (D >= 0) {
    // Complex or duplicate roots.
    var rD = Math.sqrt(D);
    var S = sign(R + rD) * Math.pow(Math.abs(R + rD), third);
    var T = sign(R - rD) * Math.pow(Math.abs(R - rD), third);
    var Im = Math.abs(Math.sqrt(3) * (S - T) / 2); // Complex part of the root pair.
    var t = -third * A + (S + T); // A real root.
    if (t >= 0 && t <= 1) {
      roots.push(t);
    }
    if (Im === 0) {
      var t_1 = -third * A - (S + T) / 2; // The real part of a complex root.
      if (t_1 >= 0 && t_1 <= 1) {
        roots.push(t_1);
      }
    }
  } else {
    // Distinct real roots.
    var theta = Math.acos(R / Math.sqrt(-Q * Q * Q));
    var thirdA = third * A;
    var twoSqrtQ = 2 * Math.sqrt(-Q);
    var t1 = twoSqrtQ * Math.cos(third * theta) - thirdA;
    var t2 = twoSqrtQ * Math.cos(third * (theta + 2 * Math.PI)) - thirdA;
    var t3 = twoSqrtQ * Math.cos(third * (theta + 4 * Math.PI)) - thirdA;
    if (t1 >= 0 && t1 <= 1) {
      roots.push(t1);
    }
    if (t2 >= 0 && t2 <= 1) {
      roots.push(t2);
    }
    if (t3 >= 0 && t3 <= 1) {
      roots.push(t3);
    }
  }
  return roots;
}

/**
 * Returns the intersection point for the given pair of line segments, or null,
 * if the segments are parallel or don't intersect.
 * Based on http://paulbourke.net/geometry/pointlineplane/
 */
function segmentIntersection(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2) {
  var d = (ax2 - ax1) * (by2 - by1) - (ay2 - ay1) * (bx2 - bx1);
  if (d === 0) {
    // The lines are parallel.
    return null;
  }
  var ua = ((bx2 - bx1) * (ay1 - by1) - (ax1 - bx1) * (by2 - by1)) / d;
  var ub = ((ax2 - ax1) * (ay1 - by1) - (ay2 - ay1) * (ax1 - bx1)) / d;
  if (ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {
    return {
      x: ax1 + ua * (ax2 - ax1),
      y: ay1 + ua * (ay2 - ay1)
    };
  }
  return null; // The intersection point is outside either or both segments.
}
/**
 * Returns intersection points of the given cubic curve and the line segment.
 * Takes in x/y components of cubic control points and line segment start/end points
 * as parameters.
 */
function cubicSegmentIntersections(px1, py1, px2, py2, px3, py3, px4, py4, x1, y1, x2, y2) {
  var intersections = [];
  // Find line equation coefficients.
  var A = y1 - y2;
  var B = x2 - x1;
  var C = x1 * (y2 - y1) - y1 * (x2 - x1);
  // Find cubic Bezier curve equation coefficients from control points.
  var bx = bezierCoefficients(px1, px2, px3, px4);
  var by = bezierCoefficients(py1, py2, py3, py4);
  var a = A * bx[0] + B * by[0]; // t^3
  var b = A * bx[1] + B * by[1]; // t^2
  var c = A * bx[2] + B * by[2]; // t
  var d = A * bx[3] + B * by[3] + C; // 1
  var roots = cubicRoots(a, b, c, d);
  // Verify that the roots are within bounds of the linear segment.
  for (var i = 0; i < roots.length; i++) {
    var t = roots[i];
    var tt = t * t;
    var ttt = t * tt;
    // Find the cartesian plane coordinates for the parametric root `t`.
    var x = bx[0] * ttt + bx[1] * tt + bx[2] * t + bx[3];
    var y = by[0] * ttt + by[1] * tt + by[2] * t + by[3];
    // The parametric cubic roots we found are intersection points
    // with an infinite line, and so the x/y coordinates above are as well.
    // Make sure the x/y is also within the bounds of the given segment.
    var s = void 0;
    if (x1 !== x2) {
      s = (x - x1) / (x2 - x1);
    } else {
      // the line is vertical
      s = (y - y1) / (y2 - y1);
    }
    if (s >= 0 && s <= 1) {
      intersections.push({
        x: x,
        y: y
      });
    }
  }
  return intersections;
}
/**
 * Returns the given coordinates vector multiplied by the coefficient matrix
 * of the parametric cubic Bézier equation.
 */
function bezierCoefficients(P1, P2, P3, P4) {
  return [-P1 + 3 * P2 - 3 * P3 + P4, 3 * P1 - 6 * P2 + 3 * P3, -3 * P1 + 3 * P2, P1 //                 | 1  0  0  0| |P4|
  ];
}

var Path2D = /** @class */function () {
  function Path2D() {
    // The methods of this class will likely be called many times per animation frame,
    // and any allocation can trigger a GC cycle during animation, so we attempt
    // to minimize the number of allocations.
    this.commands = [];
    this.params = [];
    this._closedPath = false;
  }
  Path2D.prototype.moveTo = function (x, y) {
    if (this.xy) {
      this.xy[0] = x;
      this.xy[1] = y;
    } else {
      this.xy = [x, y];
    }
    this.commands.push('M');
    this.params.push(x, y);
  };
  Path2D.prototype.lineTo = function (x, y) {
    if (this.xy) {
      this.commands.push('L');
      this.params.push(x, y);
      this.xy[0] = x;
      this.xy[1] = y;
    } else {
      this.moveTo(x, y);
    }
  };
  Path2D.prototype.rect = function (x, y, width, height) {
    this.moveTo(x, y);
    this.lineTo(x + width, y);
    this.lineTo(x + width, y + height);
    this.lineTo(x, y + height);
    this.closePath();
  };
  /**
   * Adds an arc segment to the path definition.
   * https://www.w3.org/TR/SVG11/paths.html#PathDataEllipticalArcCommands
   * @param rx The major-axis radius.
   * @param ry The minor-axis radius.
   * @param rotation The x-axis rotation, expressed in radians.
   * @param fA The large arc flag. `1` to use angle > π.
   * @param fS The sweep flag. `1` for the arc that goes to `x`/`y` clockwise.
   * @param x2 The x coordinate to arc to.
   * @param y2 The y coordinate to arc to.
   */
  Path2D.prototype.arcTo = function (rx, ry, rotation, fA, fS, x2, y2) {
    // Convert from endpoint to center parametrization:
    // https://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes
    var xy = this.xy;
    if (!xy) {
      return;
    }
    if (rx < 0) {
      rx = -rx;
    }
    if (ry < 0) {
      ry = -ry;
    }
    var x1 = xy[0];
    var y1 = xy[1];
    var hdx = (x1 - x2) / 2;
    var hdy = (y1 - y2) / 2;
    var sinPhi = Math.sin(rotation);
    var cosPhi = Math.cos(rotation);
    var xp = cosPhi * hdx + sinPhi * hdy;
    var yp = -sinPhi * hdx + cosPhi * hdy;
    var ratX = xp / rx;
    var ratY = yp / ry;
    var lambda = ratX * ratX + ratY * ratY;
    var cx = (x1 + x2) / 2;
    var cy = (y1 + y2) / 2;
    var cpx = 0;
    var cpy = 0;
    if (lambda >= 1) {
      lambda = Math.sqrt(lambda);
      rx *= lambda;
      ry *= lambda;
      // me gives lambda == cpx == cpy == 0;
    } else {
      lambda = Math.sqrt(1 / lambda - 1);
      if (fA === fS) {
        lambda = -lambda;
      }
      cpx = lambda * rx * ratY;
      cpy = -lambda * ry * ratX;
      cx += cosPhi * cpx - sinPhi * cpy;
      cy += sinPhi * cpx + cosPhi * cpy;
    }
    var theta1 = Math.atan2((yp - cpy) / ry, (xp - cpx) / rx);
    var deltaTheta = Math.atan2((-yp - cpy) / ry, (-xp - cpx) / rx) - theta1;
    // if (fS) {
    //     if (deltaTheta <= 0) {
    //         deltaTheta += Math.PI * 2;
    //     }
    // }
    // else {
    //     if (deltaTheta >= 0) {
    //         deltaTheta -= Math.PI * 2;
    //     }
    // }
    this.cubicArc(cx, cy, rx, ry, rotation, theta1, theta1 + deltaTheta, 1 - fS);
  };
  /**
   * Approximates an elliptical arc with up to four cubic Bézier curves.
   * @param commands The string array to write SVG command letters to.
   * @param params The number array to write SVG command parameters (cubic control points) to.
   * @param cx The x-axis coordinate for the ellipse's center.
   * @param cy The y-axis coordinate for the ellipse's center.
   * @param rx The ellipse's major-axis radius.
   * @param ry The ellipse's minor-axis radius.
   * @param phi The rotation for this ellipse, expressed in radians.
   * @param theta1 The starting angle, measured clockwise from the positive x-axis and expressed in radians.
   * @param theta2 The ending angle, measured clockwise from the positive x-axis and expressed in radians.
   * @param anticlockwise The arc control points are always placed clockwise from `theta1` to `theta2`,
   * even when `theta1 > theta2`, unless this flag is set to `1`.
   */
  Path2D.cubicArc = function (commands, params, cx, cy, rx, ry, phi, theta1, theta2, anticlockwise) {
    if (anticlockwise) {
      var temp = theta1;
      theta1 = theta2;
      theta2 = temp;
    }
    var start = params.length;
    // See https://pomax.github.io/bezierinfo/#circles_cubic
    // Arc of unit circle (start angle = 0, end angle <= π/2) in cubic Bézier coordinates:
    // S = [1, 0]
    // C1 = [1, f]
    // C2 = [cos(θ) + f * sin(θ), sin(θ) - f * cos(θ)]
    // E = [cos(θ), sin(θ)]
    // f = 4/3 * tan(θ/4)
    var f90 = 0.5522847498307935; // f for θ = π/2 is 4/3 * (Math.sqrt(2) - 1)
    var sinTheta1 = Math.sin(theta1);
    var cosTheta1 = Math.cos(theta1);
    var sinPhi = Math.sin(phi);
    var cosPhi = Math.cos(phi);
    var rightAngle = Math.PI / 2;
    // Since we know how to draw an arc of a unit circle with a cubic Bézier,
    // to draw an elliptical arc with arbitrary rotation and radii we:
    // 1) rotate the Bézier coordinates that represent a circular arc by θ
    // 2) scale the circular arc separately along the x/y axes, making it elliptical
    // 3) rotate elliptical arc by φ
    // |cos(φ) -sin(φ)| |sx  0| |cos(θ) -sin(θ)| -> |xx xy|
    // |sin(φ)  cos(φ)| | 0 sy| |sin(θ)  cos(θ)| -> |yx yy|
    var xx = cosPhi * cosTheta1 * rx - sinPhi * sinTheta1 * ry;
    var yx = sinPhi * cosTheta1 * rx + cosPhi * sinTheta1 * ry;
    var xy = -cosPhi * sinTheta1 * rx - sinPhi * cosTheta1 * ry;
    var yy = -sinPhi * sinTheta1 * rx + cosPhi * cosTheta1 * ry;
    // TODO: what if delta between θ1 and θ2 is greater than 2π?
    // Always draw clockwise from θ1 to θ2.
    theta2 -= theta1;
    if (theta2 < 0) {
      theta2 += Math.PI * 2;
    }
    // Multiplying each point [x, y] by:
    // |xx xy cx| |x|
    // |yx yy cy| |y|
    // | 0  0  1| |1|
    // TODO: This move command may be redundant, if we are already at this point.
    // The coordinates of the point calculated here may differ ever so slightly
    // because of precision error.
    commands.push('M');
    params.push(xx + cx, yx + cy);
    while (theta2 >= rightAngle) {
      theta2 -= rightAngle;
      commands.push('C');
      // Temp workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=993330
      // Revert this commit when fixed ^^.
      var lastX = xy + cx;
      params.push(xx + xy * f90 + cx, yx + yy * f90 + cy, xx * f90 + xy + cx, yx * f90 + yy + cy, Math.abs(lastX) < 1e-8 ? 0 : lastX, yy + cy);
      // Prepend π/2 rotation matrix.
      // |xx xy| | 0 1| -> | xy -xx|
      // |yx yy| |-1 0| -> | yy -yx|
      // [xx, yx, xy, yy] = [xy, yy, -xx, -yx];
      // Compared to swapping with a temp variable, destructuring is:
      // - 10% faster in Chrome 70
      // - 99% slower in Firefox 63
      // Temp variable solution is 45% faster in FF than Chrome.
      // https://jsperf.com/multi-swap
      // https://bugzilla.mozilla.org/show_bug.cgi?id=1165569
      var temp = xx;
      xx = xy;
      xy = -temp;
      temp = yx;
      yx = yy;
      yy = -temp;
    }
    if (theta2) {
      var f = 4 / 3 * Math.tan(theta2 / 4);
      var sinPhi2 = Math.sin(theta2);
      var cosPhi2 = Math.cos(theta2);
      var C2x = cosPhi2 + f * sinPhi2;
      var C2y = sinPhi2 - f * cosPhi2;
      commands.push('C');
      // Temp workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=993330
      // Revert this commit when fixed ^^.
      var lastX = xx * cosPhi2 + xy * sinPhi2 + cx;
      params.push(xx + xy * f + cx, yx + yy * f + cy, xx * C2x + xy * C2y + cx, yx * C2x + yy * C2y + cy, Math.abs(lastX) < 1e-8 ? 0 : lastX, yx * cosPhi2 + yy * sinPhi2 + cy);
    }
    if (anticlockwise) {
      for (var i = start, j = params.length - 2; i < j; i += 2, j -= 2) {
        var temp = params[i];
        params[i] = params[j];
        params[j] = temp;
        temp = params[i + 1];
        params[i + 1] = params[j + 1];
        params[j + 1] = temp;
      }
    }
  };
  Path2D.prototype.cubicArc = function (cx, cy, rx, ry, phi, theta1, theta2, anticlockwise) {
    var commands = this.commands;
    var params = this.params;
    var start = commands.length;
    Path2D.cubicArc(commands, params, cx, cy, rx, ry, phi, theta1, theta2, anticlockwise);
    var x = params[params.length - 2];
    var y = params[params.length - 1];
    if (this.xy) {
      commands[start] = 'L';
      this.xy[0] = x;
      this.xy[1] = y;
    } else {
      this.xy = [x, y];
    }
  };
  /**
   * Returns the `[x, y]` coordinates of the curve at `t`.
   * @param points `(n + 1) * 2` control point coordinates for a Bézier curve of n-th order.
   * @param t
   */
  Path2D.prototype.deCasteljau = function (points, t) {
    var n = points.length;
    if (n < 2 || n % 2 === 1) {
      throw new Error('Fewer than two points or not an even count.');
    } else if (n === 2 || t === 0) {
      return points.slice(0, 2);
    } else if (t === 1) {
      return points.slice(-2);
    } else {
      var newPoints = [];
      var last = n - 2;
      for (var i = 0; i < last; i += 2) {
        newPoints.push((1 - t) * points[i] + t * points[i + 2],
        // x
        (1 - t) * points[i + 1] + t * points[i + 3] // y
        );
      }

      return this.deCasteljau(newPoints, t);
    }
  };
  /**
   * Approximates the given curve using `n` line segments.
   * @param points `(n + 1) * 2` control point coordinates for a Bézier curve of n-th order.
   * @param n
   */
  Path2D.prototype.approximateCurve = function (points, n) {
    var xy = this.deCasteljau(points, 0);
    this.moveTo(xy[0], xy[1]);
    var step = 1 / n;
    for (var t = step; t <= 1; t += step) {
      var xy_1 = this.deCasteljau(points, t);
      this.lineTo(xy_1[0], xy_1[1]);
    }
  };
  /**
   * Adds a quadratic curve segment to the path definition.
   * Note: the given quadratic segment is converted and stored as a cubic one.
   * @param cx x-component of the curve's control point
   * @param cy y-component of the curve's control point
   * @param x x-component of the end point
   * @param y y-component of the end point
   */
  Path2D.prototype.quadraticCurveTo = function (cx, cy, x, y) {
    if (!this.xy) {
      this.moveTo(cx, cy);
    }
    // See https://pomax.github.io/bezierinfo/#reordering
    this.cubicCurveTo((this.xy[0] + 2 * cx) / 3, (this.xy[1] + 2 * cy) / 3,
    // 1/3 start + 2/3 control
    (2 * cx + x) / 3, (2 * cy + y) / 3,
    // 2/3 control + 1/3 end
    x, y);
  };
  Path2D.prototype.cubicCurveTo = function (cx1, cy1, cx2, cy2, x, y) {
    if (!this.xy) {
      this.moveTo(cx1, cy1);
    }
    this.commands.push('C');
    this.params.push(cx1, cy1, cx2, cy2, x, y);
    this.xy[0] = x;
    this.xy[1] = y;
  };
  Object.defineProperty(Path2D.prototype, "closedPath", {
    get: function () {
      return this._closedPath;
    },
    enumerable: true,
    configurable: true
  });
  Path2D.prototype.closePath = function () {
    if (this.xy) {
      this.xy = undefined;
      this.commands.push('Z');
      this._closedPath = true;
    }
  };
  Path2D.prototype.clear = function () {
    this.commands.length = 0;
    this.params.length = 0;
    this.xy = undefined;
    this._closedPath = false;
  };
  Path2D.prototype.isPointInPath = function (x, y) {
    var commands = this.commands;
    var params = this.params;
    var cn = commands.length;
    // Hit testing using ray casting method, where the ray's origin is some point
    // outside the path. In this case, an offscreen point that is remote enough, so that
    // even if the path itself is large and is partially offscreen, the ray's origin
    // will likely be outside the path anyway. To test if the given point is inside the
    // path or not, we cast a ray from the origin to the given point and check the number
    // of intersections of this segment with the path. If the number of intersections is
    // even, then the ray both entered and exited the path an equal number of times,
    // therefore the point is outside the path, and inside the path, if the number of
    // intersections is odd. Since the path is compound, we check if the ray segment
    // intersects with each of the path's segments, which can be either a line segment
    // (one or no intersection points) or a Bézier curve segment (up to 3 intersection
    // points).
    var ox = -10000;
    var oy = -10000;
    // the starting point of the  current path
    var sx = NaN;
    var sy = NaN;
    // the previous point of the current path
    var px = 0;
    var py = 0;
    var intersectionCount = 0;
    for (var ci = 0, pi = 0; ci < cn; ci++) {
      switch (commands[ci]) {
        case 'M':
          if (!isNaN(sx)) {
            if (segmentIntersection(sx, sy, px, py, ox, oy, x, y)) {
              intersectionCount++;
            }
          }
          sx = px = params[pi++];
          sy = py = params[pi++];
          break;
        case 'L':
          if (segmentIntersection(px, py, px = params[pi++], py = params[pi++], ox, oy, x, y)) {
            intersectionCount++;
          }
          break;
        case 'C':
          intersectionCount += cubicSegmentIntersections(px, py, params[pi++], params[pi++], params[pi++], params[pi++], px = params[pi++], py = params[pi++], ox, oy, x, y).length;
          break;
        case 'Z':
          if (!isNaN(sx)) {
            if (segmentIntersection(sx, sy, px, py, ox, oy, x, y)) {
              intersectionCount++;
            }
          }
          break;
      }
    }
    return intersectionCount % 2 === 1;
  };
  Path2D.fromString = function (value) {
    var path = new Path2D();
    path.setFromString(value);
    return path;
  };
  /**
   * Split the SVG path at command letters,
   * then extract the command letter and parameters from each substring.
   * @param value
   */
  Path2D.parseSvgPath = function (value) {
    return value.trim().split(Path2D.splitCommandsRe).map(function (part) {
      var strParams = part.match(Path2D.matchParamsRe);
      return {
        command: part.substr(0, 1),
        params: strParams ? strParams.map(parseFloat) : []
      };
    });
  };
  Path2D.prettifySvgPath = function (value) {
    return Path2D.parseSvgPath(value).map(function (d) {
      return d.command + d.params.join(',');
    }).join('\n');
  };
  /**
   * See https://www.w3.org/TR/SVG11/paths.html
   * @param value
   */
  Path2D.prototype.setFromString = function (value) {
    var _this = this;
    this.clear();
    var parts = Path2D.parseSvgPath(value);
    // Current point.
    var x;
    var y;
    // Last control point. Used to calculate the reflection point
    // for `S`, `s`, `T`, `t` commands.
    var cpx;
    var cpy;
    var lastCommand;
    function checkQuadraticCP() {
      if (!lastCommand.match(Path2D.quadraticCommandRe)) {
        cpx = x;
        cpy = y;
      }
    }
    function checkCubicCP() {
      if (!lastCommand.match(Path2D.cubicCommandRe)) {
        cpx = x;
        cpy = y;
      }
    }
    // But that will make compiler complain about x/y, cpx/cpy
    // being used without being set first.
    parts.forEach(function (part) {
      var p = part.params;
      var n = p.length;
      var i = 0;
      switch (part.command) {
        case 'M':
          _this.moveTo(x = p[i++], y = p[i++]);
          while (i < n) {
            _this.lineTo(x = p[i++], y = p[i++]);
          }
          break;
        case 'm':
          _this.moveTo(x += p[i++], y += p[i++]);
          while (i < n) {
            _this.lineTo(x += p[i++], y += p[i++]);
          }
          break;
        case 'L':
          while (i < n) {
            _this.lineTo(x = p[i++], y = p[i++]);
          }
          break;
        case 'l':
          while (i < n) {
            _this.lineTo(x += p[i++], y += p[i++]);
          }
          break;
        case 'C':
          while (i < n) {
            _this.cubicCurveTo(p[i++], p[i++], cpx = p[i++], cpy = p[i++], x = p[i++], y = p[i++]);
          }
          break;
        case 'c':
          while (i < n) {
            _this.cubicCurveTo(x + p[i++], y + p[i++], cpx = x + p[i++], cpy = y + p[i++], x += p[i++], y += p[i++]);
          }
          break;
        case 'S':
          checkCubicCP();
          while (i < n) {
            _this.cubicCurveTo(x + x - cpx, y + y - cpy, cpx = p[i++], cpy = p[i++], x = p[i++], y = p[i++]);
          }
          break;
        case 's':
          checkCubicCP();
          while (i < n) {
            _this.cubicCurveTo(x + x - cpx, y + y - cpy, cpx = x + p[i++], cpy = y + p[i++], x += p[i++], y += p[i++]);
          }
          break;
        case 'Q':
          while (i < n) {
            _this.quadraticCurveTo(cpx = p[i++], cpy = p[i++], x = p[i++], y = p[i++]);
          }
          break;
        case 'q':
          while (i < n) {
            _this.quadraticCurveTo(cpx = x + p[i++], cpy = y + p[i++], x += p[i++], y += p[i++]);
          }
          break;
        case 'T':
          checkQuadraticCP();
          while (i < n) {
            _this.quadraticCurveTo(cpx = x + x - cpx, cpy = y + y - cpy, x = p[i++], y = p[i++]);
          }
          break;
        case 't':
          checkQuadraticCP();
          while (i < n) {
            _this.quadraticCurveTo(cpx = x + x - cpx, cpy = y + y - cpy, x += p[i++], y += p[i++]);
          }
          break;
        case 'A':
          while (i < n) {
            _this.arcTo(p[i++], p[i++], p[i++] * Math.PI / 180, p[i++], p[i++], x = p[i++], y = p[i++]);
          }
          break;
        case 'a':
          while (i < n) {
            _this.arcTo(p[i++], p[i++], p[i++] * Math.PI / 180, p[i++], p[i++], x += p[i++], y += p[i++]);
          }
          break;
        case 'Z':
        case 'z':
          _this.closePath();
          break;
        case 'H':
          while (i < n) {
            _this.lineTo(x = p[i++], y);
          }
          break;
        case 'h':
          while (i < n) {
            _this.lineTo(x += p[i++], y);
          }
          break;
        case 'V':
          while (i < n) {
            _this.lineTo(x, y = p[i++]);
          }
          break;
        case 'v':
          while (i < n) {
            _this.lineTo(x, y += p[i++]);
          }
          break;
      }
      lastCommand = part.command;
    });
  };
  Path2D.prototype.toString = function () {
    var c = this.commands;
    var p = this.params;
    var cn = c.length;
    var out = [];
    for (var ci = 0, pi = 0; ci < cn; ci++) {
      switch (c[ci]) {
        case 'M':
          out.push('M' + p[pi++] + ',' + p[pi++]);
          break;
        case 'L':
          out.push('L' + p[pi++] + ',' + p[pi++]);
          break;
        case 'C':
          out.push('C' + p[pi++] + ',' + p[pi++] + ' ' + p[pi++] + ',' + p[pi++] + ' ' + p[pi++] + ',' + p[pi++]);
          break;
        case 'Z':
          out.push('Z');
          break;
      }
    }
    return out.join('');
  };
  Path2D.prototype.toPrettyString = function () {
    return Path2D.prettifySvgPath(this.toString());
  };
  Path2D.prototype.toSvg = function () {
    return Path2D.xmlDeclaration + "\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 50 50\" version=\"1.1\" xmlns=\"" + Path2D.xmlns + "\">\n    <path d=\"" + this.toString() + "\" style=\"fill:none;stroke:#000;stroke-width:0.5;\"/>\n</svg>";
  };
  Path2D.prototype.toDebugSvg = function () {
    var d = Path2D.prettifySvgPath(this.toString());
    return Path2D.xmlDeclaration + "\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\" version=\"1.1\" xmlns=\"" + Path2D.xmlns + "\">\n    <path d=\"" + d + "\" style=\"fill:none;stroke:#000;stroke-width:0.5;\"/>\n</svg>";
  };
  /**
   * Returns an array of sub-paths of this Path,
   * where each sub-path is represented exclusively by cubic segments.
   */
  Path2D.prototype.toCubicPaths = function () {
    // Each sub-path is an array of `(n * 3 + 1) * 2` numbers,
    // where `n` is the number of segments.
    var paths = [];
    var params = this.params;
    // current path
    var path;
    // the starting point of the  current path
    var sx;
    var sy;
    // the previous point of the current path
    var px;
    var py;
    var i = 0; // current parameter
    this.commands.forEach(function (command) {
      switch (command) {
        case 'M':
          path = [sx = px = params[i++], sy = py = params[i++]];
          paths.push(path);
          break;
        case 'L':
          var x = params[i++];
          var y = params[i++];
          // Place control points along the line `a + (b - a) * t`
          // at t = 1/3 and 2/3:
          path.push((px + px + x) / 3, (py + py + y) / 3, (px + x + x) / 3, (py + y + y) / 3, px = x, py = y);
          break;
        case 'C':
          path.push(params[i++], params[i++], params[i++], params[i++], px = params[i++], py = params[i++]);
          break;
        case 'Z':
          path.push((px + px + sx) / 3, (py + py + sy) / 3, (px + sx + sx) / 3, (py + sy + sy) / 3, px = sx, py = sy);
          break;
      }
    });
    return paths;
  };
  Path2D.cubicPathToString = function (path) {
    var n = path.length;
    if (!(n % 2 === 0 && (n / 2 - 1) / 2 >= 1)) {
      throw new Error('Invalid path.');
    }
    return 'M' + path.slice(0, 2).join(',') + 'C' + path.slice(2).join(',');
  };
  Path2D.splitCommandsRe = /(?=[AaCcHhLlMmQqSsTtVvZz])/g;
  Path2D.matchParamsRe = /-?[0-9]*\.?\d+/g;
  Path2D.quadraticCommandRe = /[QqTt]/;
  Path2D.cubicCommandRe = /[CcSs]/;
  Path2D.xmlDeclaration = '<?xml version="1.0" encoding="UTF-8"?>';
  Path2D.xmlns = 'http://www.w3.org/2000/svg';
  return Path2D;
}();
var __extends$L =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Path = /** @class */function (_super) {
  __extends$L(Path, _super);
  function Path() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    /**
     * Declare a path to retain for later rendering and hit testing
     * using custom Path2D class. Think of it as a TypeScript version
     * of the native Path2D (with some differences) that works in all browsers.
     */
    _this.path = new Path2D();
    /**
    * The path only has to be updated when certain attributes change.
    * For example, if transform attributes (such as `translationX`)
    * are changed, we don't have to update the path. The `dirtyPath` flag
    * is how we keep track if the path has to be updated or not.
    */
    _this._dirtyPath = true;
    /**
     * Path definition in SVG path syntax:
     * https://www.w3.org/TR/SVG11/paths.html#DAttribute
     */
    _this._svgPath = '';
    return _this;
  }
  Object.defineProperty(Path.prototype, "dirtyPath", {
    get: function () {
      return this._dirtyPath;
    },
    set: function (value) {
      if (this._dirtyPath !== value) {
        this._dirtyPath = value;
        if (value) {
          this.dirty = true;
        }
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Path.prototype, "svgPath", {
    get: function () {
      return this._svgPath;
    },
    set: function (value) {
      if (this._svgPath !== value) {
        this._svgPath = value;
        this.path.setFromString(value);
        this.dirty = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Path.prototype.isPointInPath = function (x, y) {
    var point = this.transformPoint(x, y);
    return this.path.closedPath && this.path.isPointInPath(point.x, point.y);
  };
  Path.prototype.isPointInStroke = function (x, y) {
    return false;
  };
  Path.prototype.updatePath = function () {};
  Path.prototype.render = function (ctx) {
    var scene = this.scene;
    if (this.dirtyTransform) {
      this.computeTransformMatrix();
    }
    // if (scene.debug.renderBoundingBoxes) {
    //     const bbox = this.computeBBox();
    //     if (bbox) {
    //         this.matrix.transformBBox(bbox).render(ctx);
    //     }
    // }
    this.matrix.toContext(ctx);
    if (this.dirtyPath) {
      this.updatePath();
      this.dirtyPath = false;
    }
    scene.appendPath(this.path);
    this.fillStroke(ctx);
    this.dirty = false;
  };
  Path.className = 'Path';
  return Path;
}(Shape);
var twoPi = Math.PI * 2;
/**
 * Normalize the given angle to be in the [0, 2π) interval.
 * @param radians Angle in radians.
 */
function normalizeAngle360(radians) {
  radians %= twoPi;
  radians += twoPi;
  radians %= twoPi;
  return radians;
}
function normalizeAngle360Inclusive(radians) {
  radians %= twoPi;
  radians += twoPi;
  if (radians !== twoPi) {
    radians %= twoPi;
  }
  return radians;
}
/**
 * Normalize the given angle to be in the [-π, π) interval.
 * @param radians Angle in radians.
 */
function normalizeAngle180(radians) {
  radians %= twoPi;
  if (radians < -Math.PI) {
    radians += twoPi;
  } else if (radians >= Math.PI) {
    radians -= twoPi;
  }
  return radians;
}
function toRadians(degrees) {
  return degrees / 180 * Math.PI;
}
function isEqual(a, b, epsilon) {
  if (epsilon === void 0) {
    epsilon = 1e-10;
  }
  return Math.abs(a - b) < epsilon;
}
/**
 * `Number.toFixed(n)` always formats a number so that it has `n` digits after the decimal point.
 * For example, `Number(0.00003427).toFixed(2)` returns `0.00`.
 * That's not very helpful, because all the meaningful information is lost.
 * In this case we would want the formatted value to have at least two significant digits: `0.000034`,
 * not two fraction digits.
 * @param value
 * @param fractionOrSignificantDigits
 */
function toFixed(value, fractionOrSignificantDigits) {
  if (fractionOrSignificantDigits === void 0) {
    fractionOrSignificantDigits = 2;
  }
  var power = Math.floor(Math.log(Math.abs(value)) / Math.LN10);
  if (power >= 0 || !isFinite(power)) {
    return value.toFixed(fractionOrSignificantDigits); // fraction digits
  }

  return value.toFixed(Math.abs(power) - 1 + fractionOrSignificantDigits); // significant digits
}

var __extends$M =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ArcType;
(function (ArcType) {
  ArcType[ArcType["Open"] = 0] = "Open";
  ArcType[ArcType["Chord"] = 1] = "Chord";
  ArcType[ArcType["Round"] = 2] = "Round";
})(ArcType || (ArcType = {}));
/**
 * Elliptical arc node.
 */
var Arc = /** @class */function (_super) {
  __extends$M(Arc, _super);
  function Arc() {
    var _this = _super.call(this) || this;
    _this._centerX = 0;
    _this._centerY = 0;
    _this._radiusX = 10;
    _this._radiusY = 10;
    _this._startAngle = 0;
    _this._endAngle = Math.PI * 2;
    _this._counterClockwise = false;
    /**
     * The type of arc to render:
     * - {@link ArcType.Open} - end points of the arc segment are not connected (default)
     * - {@link ArcType.Chord} - end points of the arc segment are connected by a line segment
     * - {@link ArcType.Round} - each of the end points of the arc segment are connected
     *                           to the center of the arc
     * Arcs with {@link ArcType.Open} do not support hit testing, even if they have their
     * {@link Shape.fillStyle} set, because they are not closed paths. Hit testing support
     * would require using two paths - one for rendering, another for hit testing - and there
     * doesn't seem to be a compelling reason to do that, when one can just use {@link ArcType.Chord}
     * to create a closed path.
     */
    _this._type = ArcType.Open;
    _this.restoreOwnStyles();
    return _this;
  }
  Object.defineProperty(Arc.prototype, "centerX", {
    get: function () {
      return this._centerX;
    },
    set: function (value) {
      if (this._centerX !== value) {
        this._centerX = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Arc.prototype, "centerY", {
    get: function () {
      return this._centerY;
    },
    set: function (value) {
      if (this._centerY !== value) {
        this._centerY = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Arc.prototype, "radiusX", {
    get: function () {
      return this._radiusX;
    },
    set: function (value) {
      if (this._radiusX !== value) {
        this._radiusX = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Arc.prototype, "radiusY", {
    get: function () {
      return this._radiusY;
    },
    set: function (value) {
      if (this._radiusY !== value) {
        this._radiusY = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Arc.prototype, "startAngle", {
    get: function () {
      return this._startAngle;
    },
    set: function (value) {
      if (this._startAngle !== value) {
        this._startAngle = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Arc.prototype, "endAngle", {
    get: function () {
      return this._endAngle;
    },
    set: function (value) {
      if (this._endAngle !== value) {
        this._endAngle = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Arc.prototype, "fullPie", {
    get: function () {
      return isEqual(normalizeAngle360(this.startAngle), normalizeAngle360(this.endAngle));
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Arc.prototype, "counterClockwise", {
    get: function () {
      return this._counterClockwise;
    },
    set: function (value) {
      if (this._counterClockwise !== value) {
        this._counterClockwise = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Arc.prototype, "type", {
    get: function () {
      return this._type;
    },
    set: function (value) {
      if (this._type !== value) {
        this._type = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Arc.prototype.updatePath = function () {
    var path = this.path;
    path.clear(); // No need to recreate the Path, can simply clear the existing one.
    // This is much faster than the native Path2D implementation even though this `cubicArc`
    // method is pure TypeScript and actually produces the definition of an elliptical arc,
    // where you can specify two radii and rotation, while Path2D's `arc` method simply produces
    // a circular arc. Maybe it's due to the experimental nature of the Path2D class,
    // maybe it's because we have to create a new instance of it on each render, who knows...
    path.cubicArc(this.centerX, this.centerY, this.radiusX, this.radiusY, 0, this.startAngle, this.endAngle, this.counterClockwise ? 1 : 0);
    if (this.type === ArcType.Chord) {
      path.closePath();
    } else if (this.type === ArcType.Round && !this.fullPie) {
      path.lineTo(this.centerX, this.centerY);
      path.closePath();
    }
  };
  Arc.prototype.computeBBox = function () {
    // Only works with full arcs (circles) and untransformed ellipses.
    return new BBox(this.centerX - this.radiusX, this.centerY - this.radiusY, this.radiusX * 2, this.radiusY * 2);
  };
  Arc.prototype.isPointInPath = function (x, y) {
    var point = this.transformPoint(x, y);
    var bbox = this.computeBBox();
    return this.type !== ArcType.Open && bbox.containsPoint(point.x, point.y) && this.path.isPointInPath(point.x, point.y);
  };
  Arc.className = 'Arc';
  Arc.defaultStyles = chainObjects(Shape.defaultStyles, {
    lineWidth: 1,
    fillStyle: null
  });
  return Arc;
}(Path);

// import { Rect } from "./scene/shape/rect"; // debug (bbox)
var Tags;
(function (Tags) {
  Tags[Tags["Tick"] = 0] = "Tick";
  Tags[Tags["GridLine"] = 1] = "GridLine";
})(Tags || (Tags = {}));
var AxisTick = /** @class */function () {
  function AxisTick() {
    /**
     * The line width to be used by axis ticks.
     */
    this.width = 1;
    /**
     * The line length to be used by axis ticks.
     */
    this.size = 6;
    /**
     * The color of the axis ticks.
     * Use `undefined` rather than `rgba(0, 0, 0, 0)` to make the ticks invisible.
     */
    this.color = 'rgba(195, 195, 195, 1)';
    /**
     * A hint of how many ticks to use (the exact number of ticks might differ),
     * a `TimeInterval` or a `CountableTimeInterval`.
     * For example:
     *
     *     axis.tick.count = 5;
     *     axis.tick.count = year;
     *     axis.tick.count = month.every(6);
     */
    this.count = 10;
  }
  return AxisTick;
}();
var AxisLabel = /** @class */function () {
  function AxisLabel() {
    this.fontSize = 12;
    this.fontFamily = 'Verdana, sans-serif';
    /**
     * The padding between the labels and the ticks.
     */
    this.padding = 5;
    /**
     * The color of the labels.
     * Use `undefined` rather than `rgba(0, 0, 0, 0)` to make labels invisible.
     */
    this.color = 'rgba(87, 87, 87, 1)';
    /**
     * Custom label rotation in degrees.
     * Labels are rendered perpendicular to the axis line by default.
     * Or parallel to the axis line, if the {@link parallel} is set to `true`.
     * The value of this config is used as the angular offset/deflection
     * from the default rotation.
     */
    this.rotation = 0;
    /**
     * By default labels and ticks are positioned to the left of the axis line.
     * `true` positions the labels to the right of the axis line.
     * However, if the axis is rotated, its easier to think in terms
     * of this side or the opposite side, rather than left and right.
     * We use the term `mirror` for conciseness, although it's not
     * true mirroring - for example, when a label is rotated, so that
     * it is inclined at the 45 degree angle, text flowing from north-west
     * to south-east, ending at the tick to the left of the axis line,
     * and then we set this config to `true`, the text will still be flowing
     * from north-west to south-east, _starting_ at the tick to the right
     * of the axis line.
     */
    this.mirrored = false;
    /**
     * Labels are rendered perpendicular to the axis line by default.
     * Setting this config to `true` makes labels render parallel to the axis line
     * and center aligns labels' text at the ticks.
     */
    this.parallel = false;
  }
  Object.defineProperty(AxisLabel.prototype, "format", {
    get: function () {
      return this._format;
    },
    set: function (value) {
      // See `TimeLocaleObject` docs for the list of supported format directives.
      if (this._format !== value) {
        this._format = value;
        if (this.onFormatChange) {
          this.onFormatChange(value);
        }
      }
    },
    enumerable: true,
    configurable: true
  });
  return AxisLabel;
}();
/**
 * A general purpose linear axis with no notion of orientation.
 * The axis is always rendered vertically, with horizontal labels positioned to the left
 * of the axis line by default. The axis can be {@link rotation | rotated} by an arbitrary angle,
 * so that it can be used as a top, right, bottom, left, radial or any other kind
 * of linear axis.
 * The generic `D` parameter is the type of the domain of the axis' scale.
 * The output range of the axis' scale is always numeric (screen coordinates).
 */
var Axis = /** @class */function () {
  function Axis() {
    // debug (bbox)
    // private bboxRect = (() => {
    //     const rect = new Rect();
    //     rect.fill = undefined;
    //     rect.stroke = 'red';
    //     rect.strokeWidth = 1;
    //     rect.strokeOpacity = 0.2;
    //     return rect;
    // })();
    this.id = createId(this);
    this.lineNode = new Line();
    this.group = new Group();
    this.line = {
      width: 1,
      color: 'rgba(195, 195, 195, 1)'
    };
    this.tick = new AxisTick();
    this.label = new AxisLabel();
    this.translation = {
      x: 0,
      y: 0
    };
    this.rotation = 0; // axis rotation angle in degrees
    this._visibleRange = [0, 1];
    this._title = undefined;
    /**
     * The length of the grid. The grid is only visible in case of a non-zero value.
     * In case {@link radialGrid} is `true`, the value is interpreted as an angle
     * (in degrees).
     */
    this._gridLength = 0;
    /**
     * The array of styles to cycle through when rendering grid lines.
     * For example, use two {@link GridStyle} objects for alternating styles.
     * Contains only one {@link GridStyle} object by default, meaning all grid lines
     * have the same style.
     */
    this.gridStyle = [{
      stroke: 'rgba(219, 219, 219, 1)',
      lineDash: [4, 2]
    }];
    /**
     * `false` - render grid as lines of {@link gridLength} that extend the ticks
     *           on the opposite side of the axis
     * `true` - render grid as concentric circles that go through the ticks
     */
    this._radialGrid = false;
    this.fractionDigits = 0;
    this.thickness = 0;
    this.groupSelection = Selection.select(this.group).selectAll();
    this.label.onFormatChange = this.onLabelFormatChange.bind(this);
    this.group.append(this.lineNode);
    // this.group.append(this.bboxRect); // debug (bbox)
  }

  Object.defineProperty(Axis.prototype, "scale", {
    get: function () {
      return this._scale;
    },
    set: function (value) {
      this._scale = value;
      this.requestedRange = value.range.slice();
      this.onLabelFormatChange();
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Meant to be overridden in subclasses to provide extra context the the label formatter.
   * The return value of this function will be passed to the laber.formatter as the `axis` parameter.
   */
  Axis.prototype.getMeta = function () {};
  Axis.prototype.updateRange = function () {
    var _a = this,
      rr = _a.requestedRange,
      vr = _a.visibleRange,
      scale = _a.scale;
    var span = (rr[1] - rr[0]) / (vr[1] - vr[0]);
    var shift = span * vr[0];
    var start = rr[0] - shift;
    scale.range = [start, start + span];
  };
  /**
   * Checks if a point or an object is in range.
   * @param x A point (or object's starting point).
   * @param width Object's width.
   * @param tolerance Expands the range on both ends by this amount.
   */
  Axis.prototype.inRange = function (x, width, tolerance) {
    if (width === void 0) {
      width = 0;
    }
    if (tolerance === void 0) {
      tolerance = 0;
    }
    return this.inRangeEx(x, width, tolerance) === 0;
  };
  Axis.prototype.inRangeEx = function (x, width, tolerance) {
    if (width === void 0) {
      width = 0;
    }
    if (tolerance === void 0) {
      tolerance = 0;
    }
    var range = this.range;
    if (x + width < range[0] - tolerance) {
      return -1; // left or range
    }

    if (x > range[1] + tolerance) {
      return 1; // right of range
    }

    return 0; // in range
  };

  Object.defineProperty(Axis.prototype, "range", {
    get: function () {
      return this.requestedRange.slice();
    },
    set: function (value) {
      this.requestedRange = value.slice();
      this.updateRange();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Axis.prototype, "visibleRange", {
    get: function () {
      return this._visibleRange.slice();
    },
    set: function (value) {
      if (value && value.length === 2) {
        var min = value[0],
          max = value[1];
        min = Math.max(0, min);
        max = Math.min(1, max);
        min = Math.min(min, max);
        max = Math.max(min, max);
        this._visibleRange = [min, max];
        this.updateRange();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Axis.prototype, "domain", {
    get: function () {
      return this.scale.domain.slice();
    },
    set: function (value) {
      this.scale.domain = value.slice();
    },
    enumerable: true,
    configurable: true
  });
  Axis.prototype.onLabelFormatChange = function (format) {
    if (format) {
      if (this.scale && this.scale.tickFormat) {
        this.labelFormatter = this.scale.tickFormat(this.tick.count, format);
      }
    } else {
      this.labelFormatter = undefined;
    }
  };
  Object.defineProperty(Axis.prototype, "title", {
    get: function () {
      return this._title;
    },
    set: function (value) {
      var oldTitle = this._title;
      if (oldTitle !== value) {
        if (oldTitle) {
          this.group.removeChild(oldTitle.node);
        }
        if (value) {
          value.node.rotation = -Math.PI / 2;
          this.group.appendChild(value.node);
        }
        this._title = value;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Axis.prototype, "gridLength", {
    get: function () {
      return this._gridLength;
    },
    set: function (value) {
      // Was visible and now invisible, or was invisible and now visible.
      if (this._gridLength && !value || !this._gridLength && value) {
        this.groupSelection = this.groupSelection.remove().setData([]);
      }
      this._gridLength = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Axis.prototype, "radialGrid", {
    get: function () {
      return this._radialGrid;
    },
    set: function (value) {
      if (this._radialGrid !== value) {
        this._radialGrid = value;
        this.groupSelection = this.groupSelection.remove().setData([]);
      }
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Creates/removes/updates the scene graph nodes that constitute the axis.
   * Supposed to be called _manually_ after changing _any_ of the axis properties.
   * This allows to bulk set axis properties before updating the nodes.
   * The node changes made by this method are rendered on the next animation frame.
   * We could schedule this method call automatically on the next animation frame
   * when any of the axis properties change (the way we do when properties of scene graph's
   * nodes change), but this will mean that we first wait for the next animation
   * frame to make changes to the nodes of the axis, then wait for another animation
   * frame to render those changes. It's nice to have everything update automatically,
   * but this extra level of async indirection will not just introduce an unwanted delay,
   * it will also make it harder to reason about the program.
   */
  Axis.prototype.update = function () {
    var _this = this;
    var _a = this,
      group = _a.group,
      scale = _a.scale,
      tick = _a.tick,
      label = _a.label,
      gridStyle = _a.gridStyle,
      requestedRange = _a.requestedRange;
    var requestedRangeMin = Math.min(requestedRange[0], requestedRange[1]);
    var requestedRangeMax = Math.max(requestedRange[0], requestedRange[1]);
    var rotation = toRadians(this.rotation);
    var parallelLabels = label.parallel;
    var labelRotation = normalizeAngle360(toRadians(label.rotation));
    group.translationX = this.translation.x;
    group.translationY = this.translation.y;
    group.rotation = rotation;
    var halfBandwidth = (scale.bandwidth || 0) / 2;
    // The side of the axis line to position the labels on.
    // -1 = left (default)
    //  1 = right
    var sideFlag = label.mirrored ? 1 : -1;
    // When labels are parallel to the axis line, the `parallelFlipFlag` is used to
    // flip the labels to avoid upside-down text, when the axis is rotated
    // such that it is in the right hemisphere, i.e. the angle of rotation
    // is in the [0, π] interval.
    // The rotation angle is normalized, so that we have an easier time checking
    // if it's in the said interval. Since the axis is always rendered vertically
    // and then rotated, zero rotation means 12 (not 3) o-clock.
    // -1 = flip
    //  1 = don't flip (default)
    var parallelFlipRotation = normalizeAngle360(rotation);
    var parallelFlipFlag = !labelRotation && parallelFlipRotation >= 0 && parallelFlipRotation <= Math.PI ? -1 : 1;
    var regularFlipRotation = normalizeAngle360(rotation - Math.PI / 2);
    // Flip if the axis rotation angle is in the top hemisphere.
    var regularFlipFlag = !labelRotation && regularFlipRotation >= 0 && regularFlipRotation <= Math.PI ? -1 : 1;
    var alignFlag = labelRotation >= 0 && labelRotation <= Math.PI ? -1 : 1;
    var ticks = scale.ticks(this.tick.count);
    var update = this.groupSelection.setData(ticks);
    update.exit.remove();
    var enter = update.enter.append(Group);
    // Line auto-snaps to pixel grid if vertical or horizontal.
    enter.append(Line).each(function (node) {
      return node.tag = Tags.Tick;
    });
    if (this.gridLength) {
      if (this.radialGrid) {
        enter.append(Arc).each(function (node) {
          return node.tag = Tags.GridLine;
        });
      } else {
        enter.append(Line).each(function (node) {
          return node.tag = Tags.GridLine;
        });
      }
    }
    enter.append(Text);
    var groupSelection = update.merge(enter);
    groupSelection.attrFn('translationY', function (_, datum) {
      return Math.round(scale.convert(datum) + halfBandwidth);
    }).attrFn('visible', function (node) {
      return node.translationY >= requestedRangeMin && node.translationY <= requestedRangeMax;
    });
    groupSelection.selectByTag(Tags.Tick).each(function (line) {
      line.strokeWidth = tick.width;
      line.stroke = tick.color;
    }).attr('x1', sideFlag * tick.size).attr('x2', 0).attr('y1', 0).attr('y2', 0);
    if (this.gridLength && gridStyle.length) {
      var styleCount_1 = gridStyle.length;
      var gridLines = void 0;
      if (this.radialGrid) {
        var angularGridLength_1 = normalizeAngle360Inclusive(toRadians(this.gridLength));
        gridLines = groupSelection.selectByTag(Tags.GridLine).each(function (arc, datum) {
          var radius = Math.round(scale.convert(datum) + halfBandwidth);
          arc.centerX = 0;
          arc.centerY = scale.range[0] - radius;
          arc.endAngle = angularGridLength_1;
          arc.radiusX = radius;
          arc.radiusY = radius;
        });
      } else {
        gridLines = groupSelection.selectByTag(Tags.GridLine).each(function (line) {
          line.x1 = 0;
          line.x2 = -sideFlag * _this.gridLength;
          line.y1 = 0;
          line.y2 = 0;
          line.visible = Math.abs(line.parent.translationY - scale.range[0]) > 1;
        });
      }
      gridLines.each(function (gridLine, _, index) {
        var style = gridStyle[index % styleCount_1];
        gridLine.stroke = style.stroke;
        gridLine.strokeWidth = tick.width;
        gridLine.lineDash = style.lineDash;
        gridLine.fill = undefined;
      });
    }
    // `ticks instanceof NumericTicks` doesn't work here, so we feature detect.
    this.fractionDigits = ticks.fractionDigits >= 0 ? ticks.fractionDigits : 0;
    var labelSelection = groupSelection.selectByClass(Text).each(function (node, datum, index) {
      node.fontStyle = label.fontStyle;
      node.fontWeight = label.fontWeight;
      node.fontSize = label.fontSize;
      node.fontFamily = label.fontFamily;
      node.fill = label.color;
      node.textBaseline = parallelLabels && !labelRotation ? sideFlag * parallelFlipFlag === -1 ? 'hanging' : 'bottom' : 'middle';
      node.text = _this.formatTickDatum(datum, index);
      node.textAlign = parallelLabels ? labelRotation ? sideFlag * alignFlag === -1 ? 'end' : 'start' : 'center' : sideFlag * regularFlipFlag === -1 ? 'end' : 'start';
    });
    var labelX = sideFlag * (tick.size + label.padding);
    var autoRotation = parallelLabels ? parallelFlipFlag * Math.PI / 2 : regularFlipFlag === -1 ? Math.PI : 0;
    labelSelection.each(function (label) {
      label.x = labelX;
      label.rotationCenterX = labelX;
      label.rotation = autoRotation + labelRotation;
    });
    this.groupSelection = groupSelection;
    // Render axis line.
    var lineNode = this.lineNode;
    lineNode.x1 = 0;
    lineNode.x2 = 0;
    lineNode.y1 = requestedRange[0];
    lineNode.y2 = requestedRange[1];
    lineNode.strokeWidth = this.line.width;
    lineNode.stroke = this.line.color;
    lineNode.visible = ticks.length > 0;
    var title = this.title;
    var titleVisible = false;
    if (title && title.enabled) {
      titleVisible = true;
      var padding = title.padding.bottom;
      var titleNode = title.node;
      var bbox = this.computeBBox({
        excludeTitle: true
      });
      var titleRotationFlag = sideFlag === -1 && parallelFlipRotation > Math.PI && parallelFlipRotation < Math.PI * 2 ? -1 : 1;
      titleNode.rotation = titleRotationFlag * sideFlag * Math.PI / 2;
      titleNode.x = titleRotationFlag * sideFlag * (lineNode.y1 + lineNode.y2) / 2;
      titleNode.x = titleRotationFlag * sideFlag * (requestedRange[0] + requestedRange[1]) / 2;
      if (sideFlag === -1) {
        titleNode.y = titleRotationFlag * (-padding - bbox.width + Math.max(bbox.x + bbox.width, 0));
      } else {
        titleNode.y = -padding - bbox.width - Math.min(bbox.x, 0);
      }
      titleNode.textBaseline = titleRotationFlag === 1 ? 'bottom' : 'top';
    }
    if (title) {
      title.node.visible = titleVisible;
    }
    // debug (bbox)
    // const bbox = this.computeBBox();
    // const bboxRect = this.bboxRect;
    // bboxRect.x = bbox.x;
    // bboxRect.y = bbox.y;
    // bboxRect.width = bbox.width;
    // bboxRect.height = bbox.height;
  };
  // For formatting (nice rounded) tick values.
  Axis.prototype.formatTickDatum = function (datum, index) {
    var _a = this,
      label = _a.label,
      labelFormatter = _a.labelFormatter,
      fractionDigits = _a.fractionDigits;
    var meta = this.getMeta();
    return label.formatter ? label.formatter({
      value: fractionDigits >= 0 ? datum : String(datum),
      index: index,
      fractionDigits: fractionDigits,
      formatter: labelFormatter,
      axis: meta
    }) : labelFormatter ? labelFormatter(datum) : typeof datum === 'number' && fractionDigits >= 0
    // the `datum` is a floating point number
    ? datum.toFixed(fractionDigits)
    // the`datum` is an integer, a string or an object
    : String(datum);
  };
  // For formatting arbitrary values between the ticks.
  Axis.prototype.formatDatum = function (datum) {
    return String(datum);
  };
  Axis.prototype.computeBBox = function (options) {
    var _a = this,
      title = _a.title,
      lineNode = _a.lineNode;
    var labels = this.groupSelection.selectByClass(Text);
    var left = Infinity;
    var right = -Infinity;
    var top = Infinity;
    var bottom = -Infinity;
    labels.each(function (label) {
      // The label itself is rotated, but not translated, the group that
      // contains it is. So to capture the group transform in the label bbox
      // calculation we combine the transform matrices of the label and the group.
      // Depending on the timing of the `axis.computeBBox()` method call, we may
      // not have the group's and the label's transform matrices updated yet (because
      // the transform matrix is not recalculated whenever a node's transform attributes
      // change, instead it's marked for recalculation on the next frame by setting
      // the node's `dirtyTransform` flag to `true`), so we force them to update
      // right here by calling `computeTransformMatrix`.
      label.computeTransformMatrix();
      var matrix = Matrix.flyweight(label.matrix);
      var group = label.parent;
      group.computeTransformMatrix();
      matrix.preMultiplySelf(group.matrix);
      var labelBBox = label.computeBBox();
      if (labelBBox) {
        var bbox = matrix.transformBBox(labelBBox);
        left = Math.min(left, bbox.x);
        right = Math.max(right, bbox.x + bbox.width);
        top = Math.min(top, bbox.y);
        bottom = Math.max(bottom, bbox.y + bbox.height);
      }
    });
    if (title && title.enabled && (!options || !options.excludeTitle)) {
      var label = title.node;
      label.computeTransformMatrix();
      var matrix = Matrix.flyweight(label.matrix);
      var labelBBox = label.computeBBox();
      if (labelBBox) {
        var bbox = matrix.transformBBox(labelBBox);
        left = Math.min(left, bbox.x);
        right = Math.max(right, bbox.x + bbox.width);
        top = Math.min(top, bbox.y);
        bottom = Math.max(bottom, bbox.y + bbox.height);
      }
    }
    left = Math.min(left, 0);
    right = Math.max(right, 0);
    top = Math.min(top, lineNode.y1, lineNode.y2);
    bottom = Math.max(bottom, lineNode.y1, lineNode.y2);
    return new BBox(left, top, right - left, bottom - top);
  };
  return Axis;
}();
var __extends$N =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ChartAxisDirection;
(function (ChartAxisDirection) {
  ChartAxisDirection["X"] = "x";
  ChartAxisDirection["Y"] = "y"; // means 'radius' in polar charts
})(ChartAxisDirection || (ChartAxisDirection = {}));
function flipChartAxisDirection(direction) {
  if (direction === ChartAxisDirection.X) {
    return ChartAxisDirection.Y;
  } else {
    return ChartAxisDirection.X;
  }
}
var ChartAxisPosition;
(function (ChartAxisPosition) {
  ChartAxisPosition["Top"] = "top";
  ChartAxisPosition["Right"] = "right";
  ChartAxisPosition["Bottom"] = "bottom";
  ChartAxisPosition["Left"] = "left";
  ChartAxisPosition["Angle"] = "angle";
  ChartAxisPosition["Radius"] = "radius";
})(ChartAxisPosition || (ChartAxisPosition = {}));
var ChartAxis = /** @class */function (_super) {
  __extends$N(ChartAxis, _super);
  function ChartAxis() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.keys = [];
    _this.boundSeries = [];
    return _this;
  }
  Object.defineProperty(ChartAxis.prototype, "type", {
    get: function () {
      return this.constructor.type || '';
    },
    enumerable: true,
    configurable: true
  });
  ChartAxis.prototype.getMeta = function () {
    return {
      id: this.id,
      direction: this.direction,
      boundSeries: this.boundSeries
    };
  };
  Object.defineProperty(ChartAxis.prototype, "position", {
    get: function () {
      return this._position;
    },
    set: function (value) {
      if (this._position !== value) {
        this._position = value;
        switch (value) {
          case ChartAxisPosition.Top:
            this.direction = ChartAxisDirection.X;
            this.rotation = -90;
            this.label.mirrored = true;
            this.label.parallel = true;
            break;
          case ChartAxisPosition.Right:
            this.direction = ChartAxisDirection.Y;
            this.rotation = 0;
            this.label.mirrored = true;
            this.label.parallel = false;
            break;
          case ChartAxisPosition.Bottom:
            this.direction = ChartAxisDirection.X;
            this.rotation = -90;
            this.label.mirrored = false;
            this.label.parallel = true;
            break;
          case ChartAxisPosition.Left:
            this.direction = ChartAxisDirection.Y;
            this.rotation = 0;
            this.label.mirrored = false;
            this.label.parallel = false;
            break;
        }
      }
    },
    enumerable: true,
    configurable: true
  });
  return ChartAxis;
}(Axis);
var __extends$O =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var NumberAxis = /** @class */function (_super) {
  __extends$O(NumberAxis, _super);
  function NumberAxis() {
    var _this = _super.call(this) || this;
    _this._nice = true;
    _this._min = NaN;
    _this._max = NaN;
    _this.scale = new LinearScale();
    return _this;
  }
  Object.defineProperty(NumberAxis.prototype, "nice", {
    get: function () {
      return this._nice;
    },
    set: function (value) {
      if (this._nice !== value) {
        this._nice = value;
        if (value && this.scale.nice) {
          this.scale.nice(this.tick.count);
        }
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(NumberAxis.prototype, "domain", {
    get: function () {
      return this.scale.domain;
    },
    set: function (value) {
      var _a = this,
        scale = _a.scale,
        min = _a.min,
        max = _a.max;
      value = [isNaN(min) ? value[0] : min, isNaN(max) ? value[1] : max];
      scale.domain = value;
      scale.clamp = true;
      if (this.nice && this.scale.nice) {
        this.scale.nice(this.tick.count);
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(NumberAxis.prototype, "min", {
    get: function () {
      return this._min;
    },
    set: function (value) {
      if (this._min !== value) {
        this._min = value;
        if (!isNaN(value)) {
          this.scale.domain = [value, this.scale.domain[1]];
        }
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(NumberAxis.prototype, "max", {
    get: function () {
      return this._max;
    },
    set: function (value) {
      if (this._max !== value) {
        this._max = value;
        if (!isNaN(value)) {
          this.scale.domain = [this.scale.domain[0], value];
        }
      }
    },
    enumerable: true,
    configurable: true
  });
  NumberAxis.prototype.formatDatum = function (datum) {
    return datum.toFixed(2);
  };
  NumberAxis.className = 'NumberAxis';
  NumberAxis.type = 'number';
  return NumberAxis;
}(ChartAxis);

/**
 * Maps a discrete domain to a continuous numeric range.
 * See https://github.com/d3/d3-scale#band-scales for more info.
 */
var BandScale = /** @class */function () {
  function BandScale() {
    this.type = 'band';
    /**
     * Maps datum to its index in the {@link domain} array.
     * Used to check for duplicate datums (not allowed).
     */
    this.index = new Map();
    /**
     * The output range values for datum at each index.
     */
    this.ordinalRange = [];
    /**
     * Contains unique datums only. Since `{}` is used in place of `Map`
     * for IE11 compatibility, the datums are converted `toString` before
     * the uniqueness check.
     */
    this._domain = [];
    this._range = [0, 1];
    this._bandwidth = 1;
    /**
     * The ratio of the range that is reserved for space between bands.
     */
    this._paddingInner = 0;
    /**
     * The ratio of the range that is reserved for space before the first
     * and after the last band.
     */
    this._paddingOuter = 0;
    this._round = false;
    /**
     * How the leftover range is distributed.
     * `0.5` - equal distribution of space before the first and after the last band,
     * with bands effectively centered within the range.
     */
    this._align = 0.5;
  }
  Object.defineProperty(BandScale.prototype, "domain", {
    get: function () {
      return this._domain;
    },
    set: function (values) {
      var domain = this._domain;
      domain.length = 0;
      this.index = new Map();
      var index = this.index;
      // In case one wants to have duplicate domain values, for example, two 'Italy' categories,
      // one should use objects rather than strings for domain values like so:
      // { toString: () => 'Italy' }
      // { toString: () => 'Italy' }
      values.forEach(function (value) {
        if (index.get(value) === undefined) {
          index.set(value, domain.push(value) - 1);
        }
      });
      this.rescale();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(BandScale.prototype, "range", {
    get: function () {
      return this._range;
    },
    set: function (values) {
      this._range[0] = values[0];
      this._range[1] = values[1];
      this.rescale();
    },
    enumerable: true,
    configurable: true
  });
  BandScale.prototype.ticks = function () {
    return this._domain;
  };
  BandScale.prototype.convert = function (d) {
    var i = this.index.get(d);
    if (i === undefined) {
      return NaN;
    }
    var r = this.ordinalRange[i];
    if (r === undefined) {
      return NaN;
    }
    return r;
  };
  Object.defineProperty(BandScale.prototype, "bandwidth", {
    get: function () {
      return this._bandwidth;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(BandScale.prototype, "padding", {
    get: function () {
      return this._paddingInner;
    },
    set: function (value) {
      value = Math.max(0, Math.min(1, value));
      this._paddingInner = value;
      this._paddingOuter = value;
      this.rescale();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(BandScale.prototype, "paddingInner", {
    get: function () {
      return this._paddingInner;
    },
    set: function (value) {
      this._paddingInner = Math.max(0, Math.min(1, value)); // [0, 1]
      this.rescale();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(BandScale.prototype, "paddingOuter", {
    get: function () {
      return this._paddingOuter;
    },
    set: function (value) {
      this._paddingOuter = Math.max(0, Math.min(1, value)); // [0, 1]
      this.rescale();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(BandScale.prototype, "round", {
    get: function () {
      return this._round;
    },
    set: function (value) {
      this._round = value;
      this.rescale();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(BandScale.prototype, "align", {
    get: function () {
      return this._align;
    },
    set: function (value) {
      this._align = Math.max(0, Math.min(1, value)); // [0, 1]
      this.rescale();
    },
    enumerable: true,
    configurable: true
  });
  BandScale.prototype.rescale = function () {
    var _a;
    var n = this._domain.length;
    if (!n) {
      return;
    }
    var _b = this._range,
      a = _b[0],
      b = _b[1];
    var reversed = b < a;
    if (reversed) {
      _a = [b, a], a = _a[0], b = _a[1];
    }
    var step = (b - a) / Math.max(1, n - this._paddingInner + this._paddingOuter * 2);
    if (this._round) {
      step = Math.floor(step);
    }
    a += (b - a - step * (n - this._paddingInner)) * this._align;
    this._bandwidth = step * (1 - this._paddingInner);
    if (this._round) {
      a = Math.round(a);
      this._bandwidth = Math.round(this._bandwidth);
    }
    var values = [];
    for (var i = 0; i < n; i++) {
      values.push(a + step * i);
    }
    this.ordinalRange = reversed ? values.reverse() : values;
  };
  return BandScale;
}();
var __extends$P =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var CategoryAxis = /** @class */function (_super) {
  __extends$P(CategoryAxis, _super);
  function CategoryAxis() {
    var _this = _super.call(this) || this;
    var scale = new BandScale();
    scale.paddingInner = 0.2;
    scale.paddingOuter = 0.3;
    _this.scale = scale;
    return _this;
  }
  Object.defineProperty(CategoryAxis.prototype, "paddingInner", {
    get: function () {
      return this.scale.paddingInner;
    },
    set: function (value) {
      this.scale.paddingInner = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(CategoryAxis.prototype, "paddingOuter", {
    get: function () {
      return this.scale.paddingOuter;
    },
    set: function (value) {
      this.scale.paddingOuter = value;
    },
    enumerable: true,
    configurable: true
  });
  CategoryAxis.className = 'CategoryAxis';
  CategoryAxis.type = 'category';
  return CategoryAxis;
}(ChartAxis);

// Custom `Array.find` implementation for legacy browsers.
function find(arr, predicate) {
  for (var i = 0; i < arr.length; i++) {
    var value = arr[i];
    if (predicate(value, i, arr)) {
      return value;
    }
  }
}
function finiteExtent(values) {
  var n = values.length;
  var i = -1;
  var value;
  var min;
  var max;
  while (++i < n) {
    // Find the first comparable finite value.
    if ((value = values[i]) != null && value >= value && isFinite(value)) {
      min = max = value;
      while (++i < n) {
        // Compare the remaining values.
        if ((value = values[i]) != null && isFinite(value)) {
          if (min > value) {
            min = value;
          }
          if (max < value) {
            max = value;
          }
        }
      }
    }
  }
  return min === undefined || max === undefined ? undefined : [min, max];
}
/**
 * This method will only return `undefined` if there's not a single valid finite number present
 * in the given array of values. Date values will be converted to timestamps.
 * @param values
 */
function numericExtent(values) {
  var calculatedExtent = finiteExtent(values);
  if (typeof calculatedExtent === 'undefined') {
    return;
  }
  var a = calculatedExtent[0],
    b = calculatedExtent[1];
  var min = a instanceof Date ? a.getTime() : a;
  var max = b instanceof Date ? b.getTime() : b;
  if (typeof min === 'number' && isFinite(min) && typeof max === 'number' && isFinite(max)) {
    return [min, max];
  }
}
/**
 * finds the min and max using a process appropriate for stacked values. Ie,
 * summing up the positive and negative numbers, and returning the totals of each
 */
function findMinMax(values) {
  var min = 0;
  var max = 0;
  for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
    var value = values_1[_i];
    if (value < 0) {
      min += value;
    } else {
      max += value;
    }
  }
  return {
    min: min,
    max: max
  };
}
function copy(array, start, count) {
  if (start === void 0) {
    start = 0;
  }
  if (count === void 0) {
    count = array.length;
  }
  var result = [];
  var n = array.length;
  if (n) {
    for (var i = 0; i < count; i++) {
      result.push(array[(start + i) % n]);
    }
  }
  return result;
}

/**
 * The tree layout is calculated in abstract x/y coordinates, where the root is at (0, 0)
 * and the tree grows downward from the root.
 */
var TreeNode = /** @class */function () {
  function TreeNode(label, parent, number) {
    if (label === void 0) {
      label = '';
    }
    if (number === void 0) {
      number = 0;
    }
    this.x = 0;
    this.y = 0;
    this.subtreeLeft = NaN;
    this.subtreeRight = NaN;
    this.screenX = 0;
    this.screenY = 0;
    this.children = [];
    this.leafCount = 0;
    this.prelim = 0;
    this.mod = 0;
    this.ancestor = this;
    this.change = 0;
    this.shift = 0;
    this.label = label;
    // screenX and screenY are meant to be recomputed from (layout) x and y
    // when the tree is resized (without performing another layout)
    this.parent = parent;
    this.depth = parent ? parent.depth + 1 : 0;
    this.number = number;
  }
  TreeNode.prototype.getLeftSibling = function () {
    return this.number > 0 && this.parent ? this.parent.children[this.number - 1] : undefined;
  };
  TreeNode.prototype.getLeftmostSibling = function () {
    return this.number > 0 && this.parent ? this.parent.children[0] : undefined;
  };
  // traverse the left contour of a subtree, return the successor of v on this contour
  TreeNode.prototype.nextLeft = function () {
    return this.children ? this.children[0] : this.thread;
  };
  // traverse the right contour of a subtree, return the successor of v on this contour
  TreeNode.prototype.nextRight = function () {
    return this.children ? this.children[this.children.length - 1] : this.thread;
  };
  TreeNode.prototype.getSiblings = function () {
    var _this = this;
    return this.parent ? this.parent.children.filter(function (_, i) {
      return i !== _this.number;
    }) : [];
  };
  return TreeNode;
}();
/**
 * Converts an array of ticks, where each tick has an array of labels, to a label tree.
 * If `pad` is `true`, will ensure that every branch matches the depth of the tree by
 * creating empty labels.
 */
function ticksToTree(ticks, pad) {
  if (pad === void 0) {
    pad = true;
  }
  var root = new TreeNode();
  var depth = 0;
  if (pad) {
    ticks.forEach(function (tick) {
      return depth = Math.max(depth, tick.labels.length);
    });
  }
  ticks.forEach(function (tick) {
    if (pad) {
      while (tick.labels.length < depth) {
        tick.labels.unshift('');
      }
    }
    insertTick(root, tick);
  });
  return root;
}
function insertTick(root, tick) {
  var pathParts = tick.labels.slice().reverse(); // path elements from root to leaf label
  var lastPartIndex = pathParts.length - 1;
  pathParts.forEach(function (pathPart, partIndex) {
    var children = root.children;
    var existingNode = find(children, function (child) {
      return child.label === pathPart;
    });
    var isNotLeaf = partIndex !== lastPartIndex;
    if (existingNode && isNotLeaf) {
      // the isNotLeaf check is to allow duplicate leafs
      root = existingNode;
    } else {
      var node = new TreeNode(pathPart, root);
      node.number = children.length;
      children.push(node);
      if (isNotLeaf) {
        root = node;
      }
    }
  });
}
// Shift the subtree.
function moveSubtree(wm, wp, shift) {
  var subtrees = wp.number - wm.number;
  var ratio = shift / subtrees;
  wp.change -= ratio;
  wp.shift += shift;
  wm.change += ratio;
  wp.prelim += shift;
  wp.mod += shift;
}
function ancestor(vim, v, defaultAncestor) {
  return v.getSiblings().indexOf(vim.ancestor) >= 0 ? vim.ancestor : defaultAncestor;
}
// Spaces out the children.
function executeShifts(v) {
  var children = v.children;
  if (children) {
    var shift = 0;
    var change = 0;
    for (var i = children.length - 1; i >= 0; i--) {
      var w = children[i];
      w.prelim += shift;
      w.mod += shift;
      change += w.change;
      shift += w.shift + change;
    }
  }
}
// Moves current subtree with v as the root if some nodes are conflicting in space.
function apportion(v, defaultAncestor, distance) {
  var w = v.getLeftSibling();
  if (w) {
    var vop = v;
    var vip = v;
    var vim = w;
    var vom = vip.getLeftmostSibling();
    var sip = vip.mod;
    var sop = vop.mod;
    var sim = vim.mod;
    var som = vom.mod;
    while (vim.nextRight() && vip.nextLeft()) {
      vim = vim.nextRight();
      vip = vip.nextLeft();
      vom = vom.nextLeft();
      vop = vop.nextRight();
      vop.ancestor = v;
      var shift = vim.prelim + sim - (vip.prelim + sip) + distance;
      if (shift > 0) {
        moveSubtree(ancestor(vim, v, defaultAncestor), v, shift);
        sip += shift;
        sop += shift;
      }
      sim += vim.mod;
      sip += vip.mod;
      som += vom.mod;
      sop += vop.mod;
    }
    if (vim.nextRight() && !vop.nextRight()) {
      vop.thread = vim.nextRight();
      vop.mod += sim - sop;
    } else {
      if (vip.nextLeft() && !vom.nextLeft()) {
        vom.thread = vip.nextLeft();
        vom.mod += sip - som;
      }
      defaultAncestor = v;
    }
  }
  return defaultAncestor;
}
// Compute the preliminary x-coordinate of node and its children (recursively).
function firstWalk(node, distance) {
  var children = node.children;
  if (children.length) {
    var defaultAncestor_1 = children[0];
    children.forEach(function (child) {
      firstWalk(child, distance);
      defaultAncestor_1 = apportion(child, defaultAncestor_1, distance);
    });
    executeShifts(node);
    var midpoint = (children[0].prelim + children[children.length - 1].prelim) / 2;
    var leftSibling = node.getLeftSibling();
    if (leftSibling) {
      node.prelim = leftSibling.prelim + distance;
      node.mod = node.prelim - midpoint;
    } else {
      node.prelim = midpoint;
    }
  } else {
    var leftSibling = node.getLeftSibling();
    node.prelim = leftSibling ? leftSibling.prelim + distance : 0;
  }
}
var Dimensions = /** @class */function () {
  function Dimensions() {
    this.top = Infinity;
    this.right = -Infinity;
    this.bottom = -Infinity;
    this.left = Infinity;
  }
  Dimensions.prototype.update = function (node, xy) {
    var _a = xy(node),
      x = _a.x,
      y = _a.y;
    if (x > this.right) {
      this.right = x;
    }
    if (x < this.left) {
      this.left = x;
    }
    if (y > this.bottom) {
      this.bottom = y;
    }
    if (y < this.top) {
      this.top = y;
    }
  };
  return Dimensions;
}();
function secondWalk(v, m, layout) {
  v.x = v.prelim + m;
  v.y = v.depth;
  layout.update(v);
  v.children.forEach(function (w) {
    return secondWalk(w, m + v.mod, layout);
  });
}
// After the second walk the parent nodes are positioned at the center of their immediate children.
// If we want the parent nodes to be positioned at the center of the subtree for which they are roots,
// we need a third walk to adjust the positions.
function thirdWalk(v) {
  var children = v.children;
  var leafCount = 0;
  children.forEach(function (w) {
    thirdWalk(w);
    if (w.children.length) {
      leafCount += w.leafCount;
    } else {
      leafCount++;
    }
  });
  v.leafCount = leafCount;
  if (children.length) {
    v.subtreeLeft = children[0].subtreeLeft;
    v.subtreeRight = children[v.children.length - 1].subtreeRight;
    v.x = (v.subtreeLeft + v.subtreeRight) / 2;
  } else {
    v.subtreeLeft = v.x;
    v.subtreeRight = v.x;
  }
}
function treeLayout(root) {
  var layout = new TreeLayout();
  firstWalk(root, 1);
  secondWalk(root, -root.prelim, layout);
  thirdWalk(root);
  return layout;
}
var TreeLayout = /** @class */function () {
  function TreeLayout() {
    this.dimensions = new Dimensions();
    this.leafCount = 0;
    this.nodes = [];
    // One might want to process leaf nodes separately from the rest of the tree.
    // For example, position labels corresponding to leafs vertically, rather than horizontally.
    this.leafNodes = [];
    this.nonLeafNodes = [];
    this.depth = 0;
  }
  TreeLayout.prototype.update = function (node) {
    this.dimensions.update(node, function (node) {
      return {
        x: node.x,
        y: node.y
      };
    });
    if (!node.children.length) {
      this.leafCount++;
      this.leafNodes.push(node);
    } else {
      this.nonLeafNodes.push(node);
    }
    if (node.depth > this.depth) {
      this.depth = node.depth;
    }
    this.nodes.push(node);
  };
  TreeLayout.prototype.resize = function (width, height, shiftX, shiftY, flipX) {
    if (shiftX === void 0) {
      shiftX = 0;
    }
    if (shiftY === void 0) {
      shiftY = 0;
    }
    if (flipX === void 0) {
      flipX = false;
    }
    var xSteps = this.leafCount - 1;
    var ySteps = this.depth;
    var dimensions = this.dimensions;
    var scalingX = 1;
    var scalingY = 1;
    if (width > 0 && xSteps) {
      var existingSpacingX = (dimensions.right - dimensions.left) / xSteps;
      var desiredSpacingX = width / xSteps;
      scalingX = desiredSpacingX / existingSpacingX;
      if (flipX) {
        scalingX = -scalingX;
      }
    }
    if (height > 0 && ySteps) {
      var existingSpacingY = (dimensions.bottom - dimensions.top) / ySteps;
      var desiredSpacingY = height / ySteps;
      scalingY = desiredSpacingY / existingSpacingY;
    }
    var screenDimensions = new Dimensions();
    this.nodes.forEach(function (node) {
      node.screenX = node.x * scalingX;
      node.screenY = node.y * scalingY;
      screenDimensions.update(node, function (node) {
        return {
          x: node.screenX,
          y: node.screenY
        };
      });
    });
    // Normalize so that root top and leftmost leaf left start at zero.
    var offsetX = -screenDimensions.left;
    var offsetY = -screenDimensions.top;
    this.nodes.forEach(function (node) {
      node.screenX += offsetX + shiftX;
      node.screenY += offsetY + shiftY;
    });
  };
  return TreeLayout;
}();
var __extends$Q =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var GroupedCategoryAxisLabel = /** @class */function (_super) {
  __extends$Q(GroupedCategoryAxisLabel, _super);
  function GroupedCategoryAxisLabel() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.grid = false;
    return _this;
  }
  return GroupedCategoryAxisLabel;
}(AxisLabel);
/**
 * A general purpose linear axis with no notion of orientation.
 * The axis is always rendered vertically, with horizontal labels positioned to the left
 * of the axis line by default. The axis can be {@link rotation | rotated} by an arbitrary angle,
 * so that it can be used as a top, right, bottom, left, radial or any other kind
 * of linear axis.
 * The generic `D` parameter is the type of the domain of the axis' scale.
 * The output range of the axis' scale is always numeric (screen coordinates).
 */
var GroupedCategoryAxis = /** @class */function (_super) {
  __extends$Q(GroupedCategoryAxis, _super);
  function GroupedCategoryAxis() {
    var _this = _super.call(this) || this;
    _this.id = createId(_this);
    // Label scale (labels are positionsed between ticks, tick count = label count + 1).
    // We don't call is `labelScale` for consistency with other axes.
    _this.tickScale = new BandScale();
    _this.group = new Group();
    _this.longestSeparatorLength = 0;
    _this.translation = {
      x: 0,
      y: 0
    };
    /**
     * Axis rotation angle in degrees.
     */
    _this.rotation = 0;
    _this.line = {
      width: 1,
      color: 'rgba(195, 195, 195, 1)'
    };
    // readonly tick = new AxisTick();
    _this.label = new GroupedCategoryAxisLabel();
    /**
     * The color of the labels.
     * Use `undefined` rather than `rgba(0, 0, 0, 0)` to make labels invisible.
     */
    _this.labelColor = 'rgba(87, 87, 87, 1)';
    var _a = _this,
      group = _a.group,
      tickScale = _a.tickScale;
    var scale = new BandScale();
    scale.paddingOuter = 0.1;
    scale.paddingInner = scale.paddingOuter * 2;
    _this.requestedRange = scale.range.slice();
    _this.scale = scale;
    tickScale.paddingInner = 1;
    tickScale.paddingOuter = 0;
    _this.gridLineSelection = Selection.select(group).selectAll();
    _this.axisLineSelection = Selection.select(group).selectAll();
    _this.separatorSelection = Selection.select(group).selectAll();
    _this.labelSelection = Selection.select(group).selectAll();
    return _this;
    // this.group.append(this.bboxRect); // debug (bbox)
  }

  Object.defineProperty(GroupedCategoryAxis.prototype, "domain", {
    get: function () {
      return this.scale.domain;
    },
    set: function (value) {
      this.scale.domain = value;
      var tickTree = ticksToTree(value);
      this.tickTreeLayout = treeLayout(tickTree);
      var domain = value.slice();
      domain.push('');
      this.tickScale.domain = domain;
      this.resizeTickTree();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(GroupedCategoryAxis.prototype, "range", {
    get: function () {
      return this.requestedRange.slice();
    },
    set: function (value) {
      this.requestedRange = value.slice();
      this.updateRange();
    },
    enumerable: true,
    configurable: true
  });
  GroupedCategoryAxis.prototype.updateRange = function () {
    var _a = this,
      rr = _a.requestedRange,
      vr = _a.visibleRange,
      scale = _a.scale;
    var span = (rr[1] - rr[0]) / (vr[1] - vr[0]);
    var shift = span * vr[0];
    var start = rr[0] - shift;
    this.tickScale.range = scale.range = [start, start + span];
    this.resizeTickTree();
  };
  GroupedCategoryAxis.prototype.resizeTickTree = function () {
    var s = this.scale;
    var range = s.domain.length ? [s.convert(s.domain[0]), s.convert(s.domain[s.domain.length - 1])] : s.range;
    var layout = this.tickTreeLayout;
    var lineHeight = this.lineHeight;
    if (layout) {
      layout.resize(Math.abs(range[1] - range[0]), layout.depth * lineHeight, (Math.min(range[0], range[1]) || 0) + (s.bandwidth || 0) / 2, -layout.depth * lineHeight, range[1] - range[0] < 0);
    }
  };
  Object.defineProperty(GroupedCategoryAxis.prototype, "lineHeight", {
    get: function () {
      return this.label.fontSize * 1.5;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(GroupedCategoryAxis.prototype, "gridLength", {
    get: function () {
      return this._gridLength;
    },
    /**
     * The length of the grid. The grid is only visible in case of a non-zero value.
     */
    set: function (value) {
      // Was visible and now invisible, or was invisible and now visible.
      if (this._gridLength && !value || !this._gridLength && value) {
        this.gridLineSelection = this.gridLineSelection.remove().setData([]);
        this.labelSelection = this.labelSelection.remove().setData([]);
      }
      this._gridLength = value;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Creates/removes/updates the scene graph nodes that constitute the axis.
   * Supposed to be called _manually_ after changing _any_ of the axis properties.
   * This allows to bulk set axis properties before updating the nodes.
   * The node changes made by this method are rendered on the next animation frame.
   * We could schedule this method call automatically on the next animation frame
   * when any of the axis properties change (the way we do when properties of scene graph's
   * nodes change), but this will mean that we first wait for the next animation
   * frame to make changes to the nodes of the axis, then wait for another animation
   * frame to render those changes. It's nice to have everything update automatically,
   * but this extra level of async indirection will not just introduce an unwanted delay,
   * it will also make it harder to reason about the program.
   */
  GroupedCategoryAxis.prototype.update = function () {
    var _this = this;
    var _a = this,
      group = _a.group,
      scale = _a.scale,
      label = _a.label,
      tickScale = _a.tickScale,
      requestedRange = _a.requestedRange;
    var rangeStart = scale.range[0];
    var rangeEnd = scale.range[1];
    var rangeLength = Math.abs(rangeEnd - rangeStart);
    var bandwidth = rangeLength / scale.domain.length || 0;
    var parallelLabels = label.parallel;
    var rotation = toRadians(this.rotation);
    var isHorizontal = Math.abs(Math.cos(rotation)) < 1e-8;
    var labelRotation = normalizeAngle360(toRadians(this.label.rotation));
    group.translationX = this.translation.x;
    group.translationY = this.translation.y;
    group.rotation = rotation;
    var title = this.title;
    // The Text `node` of the Caption is not used to render the title of the grouped category axis.
    // The phantom root of the tree layout is used instead.
    if (title) {
      title.node.visible = false;
    }
    var lineHeight = this.lineHeight;
    // Render ticks and labels.
    var tickTreeLayout = this.tickTreeLayout;
    var labels = scale.ticks();
    var treeLabels = tickTreeLayout ? tickTreeLayout.nodes : [];
    var isLabelTree = tickTreeLayout ? tickTreeLayout.depth > 1 : false;
    var ticks = tickScale.ticks();
    // The side of the axis line to position the labels on.
    // -1 = left (default)
    //  1 = right
    var sideFlag = label.mirrored ? 1 : -1;
    // When labels are parallel to the axis line, the `parallelFlipFlag` is used to
    // flip the labels to avoid upside-down text, when the axis is rotated
    // such that it is in the right hemisphere, i.e. the angle of rotation
    // is in the [0, π] interval.
    // The rotation angle is normalized, so that we have an easier time checking
    // if it's in the said interval. Since the axis is always rendered vertically
    // and then rotated, zero rotation means 12 (not 3) o-clock.
    // -1 = flip
    //  1 = don't flip (default)
    var parallelFlipRotation = normalizeAngle360(rotation);
    var parallelFlipFlag = !labelRotation && parallelFlipRotation >= 0 && parallelFlipRotation <= Math.PI ? -1 : 1;
    var regularFlipRotation = normalizeAngle360(rotation - Math.PI / 2);
    // Flip if the axis rotation angle is in the top hemisphere.
    var regularFlipFlag = !labelRotation && regularFlipRotation >= 0 && regularFlipRotation <= Math.PI ? -1 : 1;
    var updateGridLines = this.gridLineSelection.setData(this.gridLength ? ticks : []);
    updateGridLines.exit.remove();
    var enterGridLines = updateGridLines.enter.append(Line);
    var gridLineSelection = updateGridLines.merge(enterGridLines);
    var updateLabels = this.labelSelection.setData(treeLabels);
    updateLabels.exit.remove();
    var enterLabels = updateLabels.enter.append(Text);
    var labelSelection = updateLabels.merge(enterLabels);
    var labelFormatter = label.formatter;
    var maxLeafLabelWidth = 0;
    labelSelection.each(function (node, datum, index) {
      node.fontStyle = label.fontStyle;
      node.fontWeight = label.fontWeight;
      node.fontSize = label.fontSize;
      node.fontFamily = label.fontFamily;
      node.fill = label.color;
      node.textBaseline = parallelFlipFlag === -1 ? 'bottom' : 'hanging';
      // label.textBaseline = parallelLabels && !labelRotation
      //     ? (sideFlag * parallelFlipFlag === -1 ? 'hanging' : 'bottom')
      //     : 'middle';
      node.textAlign = 'center';
      node.translationX = datum.screenY - label.fontSize * 0.25;
      node.translationY = datum.screenX;
      if (index === 0) {
        // use the phantom root as the axis title
        if (title && title.enabled && labels.length > 0) {
          node.visible = true;
          node.text = title.text;
          node.fontSize = title.fontSize;
          node.fontStyle = title.fontStyle;
          node.fontWeight = title.fontWeight;
          node.fontFamily = title.fontFamily;
          node.textBaseline = 'hanging';
        } else {
          node.visible = false;
        }
      } else {
        node.text = labelFormatter ? labelFormatter({
          value: String(datum.label),
          index: index
        }) : String(datum.label);
        node.visible = datum.screenX >= requestedRange[0] && datum.screenX <= requestedRange[1];
      }
      var bbox = node.computeBBox();
      if (bbox && bbox.width > maxLeafLabelWidth) {
        maxLeafLabelWidth = bbox.width;
      }
    });
    var labelX = sideFlag * label.padding;
    var autoRotation = parallelLabels ? parallelFlipFlag * Math.PI / 2 : regularFlipFlag === -1 ? Math.PI : 0;
    var labelGrid = this.label.grid;
    var separatorData = [];
    labelSelection.each(function (label, datum, index) {
      label.x = labelX;
      label.rotationCenterX = labelX;
      if (!datum.children.length) {
        label.rotation = labelRotation;
        label.textAlign = 'end';
        label.textBaseline = 'middle';
      } else {
        label.translationX -= maxLeafLabelWidth - lineHeight + _this.label.padding;
        if (isHorizontal) {
          label.rotation = autoRotation;
        } else {
          label.rotation = -Math.PI / 2;
        }
      }
      // Calculate positions of label separators for all nodes except the root.
      // Each separator is placed to the top of the current label.
      if (datum.parent && isLabelTree) {
        var y = !datum.children.length ? datum.screenX - bandwidth / 2 : datum.screenX - datum.leafCount * bandwidth / 2;
        if (!datum.children.length) {
          if (datum.number !== datum.children.length - 1 || labelGrid) {
            separatorData.push({
              y: y,
              x1: 0,
              x2: -maxLeafLabelWidth - _this.label.padding * 2,
              toString: function () {
                return String(index);
              }
            });
          }
        } else {
          var x = -maxLeafLabelWidth - _this.label.padding * 2 + datum.screenY;
          separatorData.push({
            y: y,
            x1: x + lineHeight,
            x2: x,
            toString: function () {
              return String(index);
            }
          });
        }
      }
    });
    // Calculate the position of the long separator on the far bottom of the axis.
    var minX = 0;
    separatorData.forEach(function (d) {
      return minX = Math.min(minX, d.x2);
    });
    this.longestSeparatorLength = Math.abs(minX);
    separatorData.push({
      y: Math.max(rangeStart, rangeEnd),
      x1: 0,
      x2: minX,
      toString: function () {
        return String(separatorData.length);
      }
    });
    var updateSeparators = this.separatorSelection.setData(separatorData);
    updateSeparators.exit.remove();
    var enterSeparators = updateSeparators.enter.append(Line);
    var separatorSelection = updateSeparators.merge(enterSeparators);
    this.separatorSelection = separatorSelection;
    var epsilon = 0.0000001;
    separatorSelection.each(function (line, datum, i) {
      line.x1 = datum.x1;
      line.x2 = datum.x2;
      line.y1 = datum.y;
      line.y2 = datum.y;
      line.visible = datum.y >= requestedRange[0] - epsilon && datum.y <= requestedRange[1] + epsilon;
      line.stroke = _this.tick.color;
      line.fill = undefined;
      line.strokeWidth = 1;
    });
    this.gridLineSelection = gridLineSelection;
    this.labelSelection = labelSelection;
    // Render axis lines.
    var lineCount = tickTreeLayout ? tickTreeLayout.depth + 1 : 1;
    var lines = [];
    for (var i = 0; i < lineCount; i++) {
      lines.push(i);
    }
    var updateAxisLines = this.axisLineSelection.setData(lines);
    updateAxisLines.exit.remove();
    var enterAxisLines = updateAxisLines.enter.append(Line);
    var axisLineSelection = updateAxisLines.merge(enterAxisLines);
    this.axisLineSelection = axisLineSelection;
    axisLineSelection.each(function (line, _, index) {
      var x = index > 0 ? -maxLeafLabelWidth - _this.label.padding * 2 - (index - 1) * lineHeight : 0;
      line.x1 = x;
      line.x2 = x;
      line.y1 = requestedRange[0];
      line.y2 = requestedRange[1];
      line.strokeWidth = _this.line.width;
      line.stroke = _this.line.color;
      line.visible = labels.length > 0 && (index === 0 || labelGrid && isLabelTree);
    });
    if (this.gridLength) {
      var styles_1 = this.gridStyle;
      var styleCount_1 = styles_1.length;
      gridLineSelection.each(function (line, datum, index) {
        var y = Math.round(tickScale.convert(datum));
        line.x1 = 0;
        line.x2 = -sideFlag * _this.gridLength;
        line.y1 = y;
        line.y2 = y;
        line.visible = y >= requestedRange[0] && y <= requestedRange[1] && Math.abs(line.parent.translationY - rangeStart) > 1;
        var style = styles_1[index % styleCount_1];
        line.stroke = style.stroke;
        line.strokeWidth = _this.tick.width;
        line.lineDash = style.lineDash;
        line.fill = undefined;
      });
    }
    // debug (bbox)
    // const bbox = this.computeBBox();
    // const bboxRect = this.bboxRect;
    // bboxRect.x = bbox.x;
    // bboxRect.y = bbox.y;
    // bboxRect.width = bbox.width;
    // bboxRect.height = bbox.height;
  };

  GroupedCategoryAxis.prototype.computeBBox = function (options) {
    var includeTitle = !options || !options.excludeTitle;
    var left = Infinity;
    var right = -Infinity;
    var top = Infinity;
    var bottom = -Infinity;
    this.labelSelection.each(function (label, _, index) {
      // The label itself is rotated, but not translated, the group that
      // contains it is. So to capture the group transform in the label bbox
      // calculation we combine the transform matrices of the label and the group.
      // Depending on the timing of the `axis.computeBBox()` method call, we may
      // not have the group's and the label's transform matrices updated yet (because
      // the transform matrix is not recalculated whenever a node's transform attributes
      // change, instead it's marked for recalculation on the next frame by setting
      // the node's `dirtyTransform` flag to `true`), so we force them to update
      // right here by calling `computeTransformMatrix`.
      if (index > 0 || includeTitle) {
        // first node is the root (title)
        label.computeTransformMatrix();
        var matrix = Matrix.flyweight(label.matrix);
        var labelBBox = label.computeBBox();
        if (labelBBox) {
          var bbox = matrix.transformBBox(labelBBox);
          left = Math.min(left, bbox.x);
          right = Math.max(right, bbox.x + bbox.width);
          top = Math.min(top, bbox.y);
          bottom = Math.max(bottom, bbox.y + bbox.height);
        }
      }
    });
    return new BBox(left, top, Math.max(right - left, this.longestSeparatorLength), bottom - top);
  };
  // debug (bbox)
  // private bboxRect = (() => {
  //     const rect = new Rect();
  //     rect.fill = undefined;
  //     rect.stroke = 'red';
  //     rect.strokeWidth = 1;
  //     rect.strokeOpacity = 0.7;
  //     return rect;
  // })();
  GroupedCategoryAxis.className = 'GroupedCategoryAxis';
  GroupedCategoryAxis.type = 'groupedCategory';
  return GroupedCategoryAxis;
}(ChartAxis);
var __extends$R =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var t0 = new Date();
var t1 = new Date();
/**
 * The interval methods don't mutate Date parameters.
 */
var TimeInterval = /** @class */function () {
  function TimeInterval(floor, offset) {
    this._floor = floor;
    this._offset = offset;
  }
  /**
   * Returns a new date representing the latest interval boundary date before or equal to date.
   * For example, `day.floor(date)` typically returns 12:00 AM local time on the given date.
   * @param date
   */
  TimeInterval.prototype.floor = function (date) {
    date = new Date(+date);
    this._floor(date);
    return date;
  };
  /**
   * Returns a new date representing the earliest interval boundary date after or equal to date.
   * @param date
   */
  TimeInterval.prototype.ceil = function (date) {
    date = new Date(+date - 1);
    this._floor(date);
    this._offset(date, 1);
    this._floor(date);
    return date;
  };
  /**
   * Returns a new date representing the closest interval boundary date to date.
   * @param date
   */
  TimeInterval.prototype.round = function (date) {
    var d0 = this.floor(date);
    var d1 = this.ceil(date);
    var ms = +date;
    return ms - d0.getTime() < d1.getTime() - ms ? d0 : d1;
  };
  /**
   * Returns a new date equal to date plus step intervals.
   * @param date
   * @param step
   */
  TimeInterval.prototype.offset = function (date, step) {
    if (step === void 0) {
      step = 1;
    }
    date = new Date(+date);
    this._offset(date, Math.floor(step));
    return date;
  };
  /**
   * Returns an array of dates representing every interval boundary after or equal to start (inclusive) and before stop (exclusive).
   * @param start
   * @param stop
   * @param step
   */
  TimeInterval.prototype.range = function (start, stop, step) {
    if (step === void 0) {
      step = 1;
    }
    var range = [];
    start = this.ceil(start);
    step = Math.floor(step);
    if (start > stop || step <= 0) {
      return range;
    }
    var previous;
    do {
      previous = new Date(+start);
      range.push(previous);
      this._offset(start, step);
      this._floor(start);
    } while (previous < start && start < stop);
    return range;
  };
  // Returns an interval that is a subset of this interval.
  // For example, to create an interval that return 1st, 11th, 21st and 31st of each month:
  // day.filter(date => (date.getDate() - 1) % 10 === 0)
  TimeInterval.prototype.filter = function (test) {
    var _this = this;
    var floor = function (date) {
      if (date >= date) {
        while (_this._floor(date), !test(date)) {
          date.setTime(date.getTime() - 1);
        }
      }
      return date;
    };
    var offset = function (date, step) {
      if (date >= date) {
        if (step < 0) {
          while (++step <= 0) {
            do {
              _this._offset(date, -1);
            } while (!test(date));
          }
        } else {
          while (--step >= 0) {
            do {
              _this._offset(date, 1);
            } while (!test(date));
          }
        }
      }
      return date;
    };
    return new TimeInterval(floor, offset);
  };
  return TimeInterval;
}();
var CountableTimeInterval = /** @class */function (_super) {
  __extends$R(CountableTimeInterval, _super);
  function CountableTimeInterval(floor, offset, count, field) {
    var _this = _super.call(this, floor, offset) || this;
    _this._count = count;
    _this._field = field;
    return _this;
  }
  /**
   * Returns the number of interval boundaries after start (exclusive) and before or equal to end (inclusive).
   * @param start
   * @param end
   */
  CountableTimeInterval.prototype.count = function (start, end) {
    t0.setTime(+start);
    t1.setTime(+end);
    this._floor(t0);
    this._floor(t1);
    return Math.floor(this._count(t0, t1));
  };
  /**
   * Returns a filtered view of this interval representing every step'th date.
   * The meaning of step is dependent on this interval’s parent interval as defined by the `field` function.
   * @param step
   */
  CountableTimeInterval.prototype.every = function (step) {
    var _this = this;
    var result;
    step = Math.floor(step);
    if (isFinite(step) && step > 0) {
      if (step > 1) {
        var field_1 = this._field;
        if (field_1) {
          result = this.filter(function (d) {
            return field_1(d) % step === 0;
          });
        } else {
          result = this.filter(function (d) {
            return _this.count(0, d) % step === 0;
          });
        }
      } else {
        result = this;
      }
    }
    return result;
  };
  return CountableTimeInterval;
}(TimeInterval);
function floor(date) {
  return date;
}
function offset(date, milliseconds) {
  date.setTime(date.getTime() + milliseconds);
}
function count(start, end) {
  return end.getTime() - start.getTime();
}
var millisecond = new CountableTimeInterval(floor, offset, count);

// Common time unit sizes in milliseconds.
var durationSecond = 1000;
var durationMinute = durationSecond * 60;
var durationHour = durationMinute * 60;
var durationDay = durationHour * 24;
var durationWeek = durationDay * 7;
var durationMonth = durationDay * 30;
var durationYear = durationDay * 365;
function floor$1(date) {
  date.setTime(date.getTime() - date.getMilliseconds());
}
function offset$1(date, seconds) {
  date.setTime(date.getTime() + seconds * durationSecond);
}
function count$1(start, end) {
  return (end.getTime() - start.getTime()) / durationSecond;
}
var second = new CountableTimeInterval(floor$1, offset$1, count$1);
function floor$2(date) {
  date.setTime(date.getTime() - date.getMilliseconds() - date.getSeconds() * durationSecond);
}
function offset$2(date, minutes) {
  date.setTime(date.getTime() + minutes * durationMinute);
}
function count$2(start, end) {
  return (end.getTime() - start.getTime()) / durationMinute;
}
function field(date) {
  return date.getMinutes();
}
var minute = new CountableTimeInterval(floor$2, offset$2, count$2, field);
function floor$3(date) {
  date.setTime(date.getTime() - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
}
function offset$3(date, hours) {
  date.setTime(date.getTime() + hours * durationHour);
}
function count$3(start, end) {
  return (end.getTime() - start.getTime()) / durationHour;
}
function field$1(date) {
  return date.getHours();
}
var hour = new CountableTimeInterval(floor$3, offset$3, count$3, field$1);
function floor$4(date) {
  date.setHours(0, 0, 0, 0);
}
function offset$4(date, days) {
  date.setDate(date.getDate() + days);
}
function count$4(start, end) {
  var tzMinuteDelta = end.getTimezoneOffset() - start.getTimezoneOffset();
  return (end.getTime() - start.getTime() - tzMinuteDelta * durationMinute) / durationDay;
}
function field$2(date) {
  return date.getDate() - 1;
}
var day = new CountableTimeInterval(floor$4, offset$4, count$4, field$2);

// Set date to n-th day of the week.
function weekday(n) {
  // Sets the `date` to the start of the `n`-th day of the current week.
  // n == 0 is Sunday.
  function floor(date) {
    //                  1..31            1..7
    date.setDate(date.getDate() - (date.getDay() + 7 - n) % 7);
    date.setHours(0, 0, 0, 0); // h, m, s, ms
  }
  // Offset the date by the given number of weeks.
  function offset(date, weeks) {
    date.setDate(date.getDate() + weeks * 7);
  }
  // Count the number of weeks between the start and end dates.
  function count(start, end) {
    var msDelta = end.getTime() - start.getTime();
    var tzMinuteDelta = end.getTimezoneOffset() - start.getTimezoneOffset();
    return (msDelta - tzMinuteDelta * durationMinute) / durationWeek;
  }
  return new CountableTimeInterval(floor, offset, count);
}
var sunday = weekday(0);
var monday = weekday(1);
var tuesday = weekday(2);
var wednesday = weekday(3);
var thursday = weekday(4);
var friday = weekday(5);
var saturday = weekday(6);
function floor$5(date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}
function offset$5(date, months) {
  date.setMonth(date.getMonth() + months);
}
function count$5(start, end) {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}
function field$3(date) {
  return date.getMonth();
}
var month = new CountableTimeInterval(floor$5, offset$5, count$5, field$3);
function floor$6(date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}
function offset$6(date, years) {
  date.setFullYear(date.getFullYear() + years);
}
function count$6(start, end) {
  return end.getFullYear() - start.getFullYear();
}
function field$4(date) {
  return date.getFullYear();
}
var year = new CountableTimeInterval(floor$6, offset$6, count$6, field$4);
function floor$7(date) {
  date.setUTCHours(0, 0, 0, 0);
}
function offset$7(date, days) {
  date.setUTCDate(date.getUTCDate() + days);
}
function count$7(start, end) {
  return (end.getTime() - start.getTime()) / durationDay;
}
function field$5(date) {
  return date.getUTCDate() - 1;
}
var utcDay = new CountableTimeInterval(floor$7, offset$7, count$7, field$5);
function floor$8(date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}
function offset$8(date, years) {
  date.setUTCFullYear(date.getUTCFullYear() + years);
}
function count$8(start, end) {
  return end.getUTCFullYear() - start.getUTCFullYear();
}
function field$6(date) {
  return date.getUTCFullYear();
}
var utcYear = new CountableTimeInterval(floor$8, offset$8, count$8, field$6);

// Set date to n-th day of the week.
function weekday$1(n) {
  // Sets the `date` to the start of the `n`-th day of the current week.
  // n == 0 is Sunday.
  function floor(date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - n) % 7);
    date.setHours(0, 0, 0, 0); // h, m, s, ms
  }
  // Offset the date by the given number of weeks.
  function offset(date, weeks) {
    date.setUTCDate(date.getUTCDate() + weeks * 7);
  }
  // Count the number of weeks between the start and end dates.
  function count(start, end) {
    return (end.getTime() - start.getTime()) / durationWeek;
  }
  return new CountableTimeInterval(floor, offset, count);
}
var utcSunday = weekday$1(0);
var utcMonday = weekday$1(1);
var utcTuesday = weekday$1(2);
var utcWednesday = weekday$1(3);
var utcThursday = weekday$1(4);
var utcFriday = weekday$1(5);
var utcSaturday = weekday$1(6);
function localDate(d) {
  // For JS Dates the [0, 100) interval is a time warp, a fast forward to the 20th century.
  // For example, -1 is -0001 BC, 0 is already 1900 AD.
  if (d.y >= 0 && d.y < 100) {
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
  }
  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}
function utcDate(d) {
  if (d.y >= 0 && d.y < 100) {
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
  }
  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}
/**
 * Creates a lookup map for array of names to go from a name to index.
 * @param names
 */
function formatLookup(names) {
  var map = {};
  for (var i = 0, n = names.length; i < n; i++) {
    map[names[i].toLowerCase()] = i;
  }
  return map;
}
function newYear(y) {
  return {
    y: y,
    m: 0,
    d: 1,
    H: 0,
    M: 0,
    S: 0,
    L: 0
  };
}
var percentCharCode = 37;
var numberRe = /^\s*\d+/; // ignores next directive
var percentRe = /^%/;
var requoteRe = /[\\^$*+?|[\]().{}]/g;
/**
 * Prepends any character in the `requoteRe` set with a backslash.
 * @param s
 */
var requote = function (s) {
  return s.replace(requoteRe, '\\$&');
}; // $& - matched substring
/**
 * Returns a RegExp that matches any string that starts with any of the given names (case insensitive).
 * @param names
 */
var formatRe = function (names) {
  return new RegExp('^(?:' + names.map(requote).join('|') + ')', 'i');
};
// A map of padding modifiers to padding strings. Default is `0`.
var pads = {
  '-': '',
  '_': ' ',
  '0': '0'
};
function pad(value, fill, width) {
  var sign = value < 0 ? '-' : '';
  var string = String(sign ? -value : value);
  var length = string.length;
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}
/**
 * Create a new time-locale-based object which exposes time-formatting
 * methods for the specified locale definition.
 *
 * @param timeLocale A time locale definition.
 */
function formatLocale$1(timeLocale) {
  var lDateTime = timeLocale.dateTime;
  var lDate = timeLocale.date;
  var lTime = timeLocale.time;
  var lPeriods = timeLocale.periods;
  var lWeekdays = timeLocale.days;
  var lShortWeekdays = timeLocale.shortDays;
  var lMonths = timeLocale.months;
  var lShortMonths = timeLocale.shortMonths;
  var periodRe = formatRe(lPeriods);
  var periodLookup = formatLookup(lPeriods);
  var weekdayRe = formatRe(lWeekdays);
  var weekdayLookup = formatLookup(lWeekdays);
  var shortWeekdayRe = formatRe(lShortWeekdays);
  var shortWeekdayLookup = formatLookup(lShortWeekdays);
  var monthRe = formatRe(lMonths);
  var monthLookup = formatLookup(lMonths);
  var shortMonthRe = formatRe(lShortMonths);
  var shortMonthLookup = formatLookup(lShortMonths);
  var formats = {
    'a': formatShortWeekday,
    'A': formatWeekday,
    'b': formatShortMonth,
    'B': formatMonth,
    'c': undefined,
    'd': formatDayOfMonth,
    'e': formatDayOfMonth,
    'f': formatMicroseconds,
    'H': formatHour24,
    'I': formatHour12,
    'j': formatDayOfYear,
    'L': formatMilliseconds,
    'm': formatMonthNumber,
    'M': formatMinutes,
    'p': formatPeriod,
    'Q': formatUnixTimestamp,
    's': formatUnixTimestampSeconds,
    'S': formatSeconds,
    'u': formatWeekdayNumberMonday,
    'U': formatWeekNumberSunday,
    'V': formatWeekNumberISO,
    'w': formatWeekdayNumberSunday,
    'W': formatWeekNumberMonday,
    'x': undefined,
    'X': undefined,
    'y': formatYear,
    'Y': formatFullYear,
    'Z': formatZone,
    '%': formatLiteralPercent
  };
  var utcFormats = {
    'a': formatUTCShortWeekday,
    'A': formatUTCWeekday,
    'b': formatUTCShortMonth,
    'B': formatUTCMonth,
    'c': undefined,
    'd': formatUTCDayOfMonth,
    'e': formatUTCDayOfMonth,
    'f': formatUTCMicroseconds,
    'H': formatUTCHour24,
    'I': formatUTCHour12,
    'j': formatUTCDayOfYear,
    'L': formatUTCMilliseconds,
    'm': formatUTCMonthNumber,
    'M': formatUTCMinutes,
    'p': formatUTCPeriod,
    'Q': formatUnixTimestamp,
    's': formatUnixTimestampSeconds,
    'S': formatUTCSeconds,
    'u': formatUTCWeekdayNumberMonday,
    'U': formatUTCWeekNumberSunday,
    'V': formatUTCWeekNumberISO,
    'w': formatUTCWeekdayNumberSunday,
    'W': formatUTCWeekNumberMonday,
    'x': undefined,
    'X': undefined,
    'y': formatUTCYear,
    'Y': formatUTCFullYear,
    'Z': formatUTCZone,
    '%': formatLiteralPercent
  };
  var parses = {
    'a': parseShortWeekday,
    'A': parseWeekday,
    'b': parseShortMonth,
    'B': parseMonth,
    'c': parseLocaleDateTime,
    'd': parseDayOfMonth,
    'e': parseDayOfMonth,
    'f': parseMicroseconds,
    'H': parseHour24,
    'I': parseHour24,
    'j': parseDayOfYear,
    'L': parseMilliseconds,
    'm': parseMonthNumber,
    'M': parseMinutes,
    'p': parsePeriod,
    'Q': parseUnixTimestamp,
    's': parseUnixTimestampSeconds,
    'S': parseSeconds,
    'u': parseWeekdayNumberMonday,
    'U': parseWeekNumberSunday,
    'V': parseWeekNumberISO,
    'w': parseWeekdayNumberSunday,
    'W': parseWeekNumberMonday,
    'x': parseLocaleDate,
    'X': parseLocaleTime,
    'y': parseYear,
    'Y': parseFullYear,
    'Z': parseZone,
    '%': parseLiteralPercent
  };
  // Recursive definitions.
  formats.x = newFormat(lDate, formats);
  formats.X = newFormat(lTime, formats);
  formats.c = newFormat(lDateTime, formats);
  utcFormats.x = newFormat(lDate, utcFormats);
  utcFormats.X = newFormat(lTime, utcFormats);
  utcFormats.c = newFormat(lDateTime, utcFormats);
  function newParse(specifier, newDate) {
    return function (str) {
      var d = newYear(1900);
      var i = parseSpecifier(d, specifier, str += '', 0);
      if (i != str.length) {
        return undefined;
      }
      // If a UNIX timestamp is specified, return it.
      if ('Q' in d) {
        return new Date(d.Q);
      }
      // The am-pm flag is 0 for AM, and 1 for PM.
      if ('p' in d) {
        d.H = d.H % 12 + d.p * 12;
      }
      // Convert day-of-week and week-of-year to day-of-year.
      if ('V' in d) {
        if (d.V < 1 || d.V > 53) {
          return undefined;
        }
        if (!('w' in d)) {
          d.w = 1;
        }
        if ('Z' in d) {
          var week = utcDate(newYear(d.y));
          var day$1 = week.getUTCDay();
          week = day$1 > 4 || day$1 === 0 ? utcMonday.ceil(week) : utcMonday.floor(week);
          week = utcDay.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          var week = newDate(newYear(d.y));
          var day$1 = week.getDay();
          week = day$1 > 4 || day$1 === 0 ? monday.ceil(week) : monday.floor(week);
          week = day.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ('W' in d || 'U' in d) {
        if (!('w' in d)) {
          d.w = 'u' in d ? d.u % 7 : 'W' in d ? 1 : 0;
        }
        var day$1 = 'Z' in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();
        d.m = 0;
        d.d = 'W' in d ? (d.w + 6) % 7 + d.W * 7 - (day$1 + 5) % 7 : d.w + d.U * 7 - (day$1 + 6) % 7;
      }
      // If a time zone is specified, all fields are interpreted as UTC and then
      // offset according to the specified time zone.
      if ('Z' in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      }
      // Otherwise, all fields are in local time.
      return newDate(d);
    };
  }
  /**
   * Creates a new function that formats the given Date or timestamp according to specifier.
   * @param specifier
   * @param formats
   */
  function newFormat(specifier, formats) {
    return function (date) {
      var string = [];
      var n = specifier.length;
      var i = -1;
      var j = 0;
      if (!(date instanceof Date)) {
        date = new Date(+date);
      }
      while (++i < n) {
        if (specifier.charCodeAt(i) === percentCharCode) {
          string.push(specifier.slice(j, i)); // copy the chunks of specifier with no directives as is
          var c = specifier.charAt(++i);
          var pad_1 = pads[c];
          if (pad_1 != undefined) {
            // if format directive has a padding modifier in front of it
            c = specifier.charAt(++i); // fetch the directive itself
          } else {
            pad_1 = c === 'e' ? ' ' : '0'; // use the default padding modifier
          }

          var format = formats[c];
          if (format) {
            // if the directive has a corresponding formatting function
            c = format(date, pad_1); // replace the directive with the formatted date
          }

          string.push(c);
          j = i + 1;
        }
      }
      string.push(specifier.slice(j, i));
      return string.join('');
    };
  }
  // Simultaneously walks over the specifier and the parsed string, populating the `d` map with parsed values.
  // The returned number is expected to equal the length of the parsed `string`, if parsing succeeded.
  function parseSpecifier(d, specifier, string, j) {
    // i - `specifier` string index
    // j - parsed `string` index
    var i = 0;
    var n = specifier.length;
    var m = string.length;
    while (i < n) {
      if (j >= m) {
        return -1;
      }
      var code = specifier.charCodeAt(i++);
      if (code === percentCharCode) {
        var char = specifier.charAt(i++);
        var parse = parses[char in pads ? specifier.charAt(i++) : char];
        if (!parse || (j = parse(d, string, j)) < 0) {
          return -1;
        }
      } else if (code != string.charCodeAt(j++)) {
        return -1;
      }
    }
    return j;
  }
  // ----------------------------- formats ----------------------------------
  function formatMicroseconds(date, fill) {
    return formatMilliseconds(date, fill) + '000';
  }
  function formatMilliseconds(date, fill) {
    return pad(date.getMilliseconds(), fill, 3);
  }
  function formatSeconds(date, fill) {
    return pad(date.getSeconds(), fill, 2);
  }
  function formatMinutes(date, fill) {
    return pad(date.getMinutes(), fill, 2);
  }
  function formatHour12(date, fill) {
    return pad(date.getHours() % 12 || 12, fill, 2);
  }
  function formatHour24(date, fill) {
    return pad(date.getHours(), fill, 2);
  }
  function formatPeriod(date) {
    return lPeriods[date.getHours() >= 12 ? 1 : 0];
  }
  function formatShortWeekday(date) {
    return lShortWeekdays[date.getDay()];
  }
  function formatWeekday(date) {
    return lWeekdays[date.getDay()];
  }
  function formatWeekdayNumberMonday(date) {
    var dayOfWeek = date.getDay();
    return dayOfWeek === 0 ? 7 : dayOfWeek;
  }
  function formatWeekNumberSunday(date, fill) {
    return pad(sunday.count(year.floor(date), date), fill, 2);
  }
  function formatWeekNumberISO(date, fill) {
    var day = date.getDay();
    date = day >= 4 || day === 0 ? thursday.floor(date) : thursday.ceil(date);
    var yearStart = year.floor(date);
    return pad(thursday.count(yearStart, date) + (yearStart.getDay() === 4 ? 1 : 0), fill, 2);
  }
  function formatWeekdayNumberSunday(date) {
    return date.getDay();
  }
  function formatWeekNumberMonday(date, fill) {
    return pad(monday.count(year.floor(date), date), fill, 2);
  }
  function formatDayOfMonth(date, fill) {
    return pad(date.getDate(), fill, 2);
  }
  function formatDayOfYear(date, fill) {
    return pad(1 + day.count(year.floor(date), date), fill, 3);
  }
  function formatShortMonth(date) {
    return lShortMonths[date.getMonth()];
  }
  function formatMonth(date) {
    return lMonths[date.getMonth()];
  }
  function formatMonthNumber(date, fill) {
    return pad(date.getMonth() + 1, fill, 2);
  }
  function formatYear(date, fill) {
    return pad(date.getFullYear() % 100, fill, 2);
  }
  function formatFullYear(date, fill) {
    return pad(date.getFullYear() % 10000, fill, 4);
  }
  function formatZone(date) {
    var z = date.getTimezoneOffset();
    return (z > 0 ? '-' : (z *= -1, '+')) + pad(Math.floor(z / 60), '0', 2) + pad(z % 60, '0', 2);
  }
  // -------------------------- UTC formats -----------------------------------
  function formatUTCMicroseconds(date, fill) {
    return formatUTCMilliseconds(date, fill) + '000';
  }
  function formatUTCMilliseconds(date, fill) {
    return pad(date.getUTCMilliseconds(), fill, 3);
  }
  function formatUTCSeconds(date, fill) {
    return pad(date.getUTCSeconds(), fill, 2);
  }
  function formatUTCMinutes(date, fill) {
    return pad(date.getUTCMinutes(), fill, 2);
  }
  function formatUTCHour12(date, fill) {
    return pad(date.getUTCHours() % 12 || 12, fill, 2);
  }
  function formatUTCHour24(date, fill) {
    return pad(date.getUTCHours(), fill, 2);
  }
  function formatUTCPeriod(date) {
    return lPeriods[date.getUTCHours() >= 12 ? 1 : 0];
  }
  function formatUTCDayOfMonth(date, fill) {
    return pad(date.getUTCDate(), fill, 2);
  }
  function formatUTCDayOfYear(date, fill) {
    return pad(1 + utcDay.count(utcYear.floor(date), date), fill, 3);
  }
  function formatUTCMonthNumber(date, fill) {
    return pad(date.getUTCMonth() + 1, fill, 2);
  }
  function formatUTCShortMonth(date) {
    return lShortMonths[date.getUTCMonth()];
  }
  function formatUTCMonth(date) {
    return lMonths[date.getUTCMonth()];
  }
  function formatUTCShortWeekday(date) {
    return lShortWeekdays[date.getUTCDay()];
  }
  function formatUTCWeekday(date) {
    return lWeekdays[date.getUTCDay()];
  }
  function formatUTCWeekdayNumberMonday(date) {
    var dayOfWeek = date.getUTCDay();
    return dayOfWeek === 0 ? 7 : dayOfWeek;
  }
  function formatUTCWeekNumberSunday(date, fill) {
    return pad(utcSunday.count(utcYear.floor(date), date), fill, 2);
  }
  function formatUTCWeekNumberISO(date, fill) {
    var day = date.getUTCDay();
    date = day >= 4 || day === 0 ? utcThursday.floor(date) : utcThursday.ceil(date);
    var yearStart = utcYear.floor(date);
    return pad(utcThursday.count(yearStart, date) + (yearStart.getUTCDay() === 4 ? 1 : 0), fill, 4);
  }
  function formatUTCWeekdayNumberSunday(date) {
    return date.getUTCDay();
  }
  function formatUTCWeekNumberMonday(date, fill) {
    return pad(utcMonday.count(utcYear.floor(date), date), fill, 2);
  }
  function formatUTCYear(date, fill) {
    return pad(date.getUTCFullYear() % 100, fill, 2);
  }
  function formatUTCFullYear(date, fill) {
    return pad(date.getUTCFullYear() % 10000, fill, 4);
  }
  function formatUTCZone() {
    return '+0000';
  }
  function formatLiteralPercent(date) {
    return '%';
  }
  function formatUnixTimestamp(date) {
    return date.getTime();
  }
  function formatUnixTimestampSeconds(date) {
    return Math.floor(date.getTime() / 1000);
  }
  // ------------------------------- parsers ------------------------------------
  function parseMicroseconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 6));
    return n ? (d.L = Math.floor(parseFloat(n[0]) / 1000), i + n[0].length) : -1;
  }
  function parseMilliseconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 3));
    return n ? (d.L = +n[0], i + n[0].length) : -1;
  }
  function parseSeconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.S = +n[0], i + n[0].length) : -1;
  }
  function parseMinutes(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.M = +n[0], i + n[0].length) : -1;
  }
  function parseHour24(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.H = +n[0], i + n[0].length) : -1;
  }
  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }
  function parseDayOfMonth(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.d = +n[0], i + n[0].length) : -1;
  }
  function parseDayOfYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 3));
    return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
  }
  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }
  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }
  function parseWeekdayNumberMonday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 1));
    return n ? (d.u = +n[0], i + n[0].length) : -1;
  }
  function parseWeekNumberSunday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.U = +n[0], i + n[0].length) : -1;
  }
  function parseWeekNumberISO(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.V = +n[0], i + n[0].length) : -1;
  }
  function parseWeekNumberMonday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.W = +n[0], i + n[0].length) : -1;
  }
  function parseWeekdayNumberSunday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 1));
    return n ? (d.w = +n[0], i + n[0].length) : -1;
  }
  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }
  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }
  function parseMonthNumber(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.m = parseFloat(n[0]) - 1, i + n[0].length) : -1;
  }
  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, lDateTime, string, i);
  }
  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, lDate, string, i);
  }
  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, lTime, string, i);
  }
  function parseUnixTimestamp(d, string, i) {
    var n = numberRe.exec(string.slice(i));
    return n ? (d.Q = +n[0], i + n[0].length) : -1;
  }
  function parseUnixTimestampSeconds(d, string, i) {
    var n = numberRe.exec(string.slice(i));
    return n ? (d.Q = +n[0] * 1000, i + n[0].length) : -1;
  }
  function parseYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
  }
  function parseFullYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 4));
    return n ? (d.y = +n[0], i + n[0].length) : -1;
  }
  function parseZone(d, string, i) {
    var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
    return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || '00')), i + n[0].length) : -1;
  }
  function parseLiteralPercent(d, string, i) {
    var n = percentRe.exec(string.slice(i, i + 1));
    return n ? i + n[0].length : -1;
  }
  return {
    format: function (specifier) {
      var f = newFormat(specifier, formats);
      f.toString = function () {
        return specifier;
      };
      return f;
    },
    parse: function (specifier) {
      var p = newParse(specifier, localDate);
      p.toString = function () {
        return specifier;
      };
      return p;
    },
    utcFormat: function (specifier) {
      var f = newFormat(specifier, utcFormats);
      f.toString = function () {
        return specifier;
      };
      return f;
    },
    utcParse: function (specifier) {
      var p = newParse(specifier, utcDate);
      p.toString = function () {
        return specifier;
      };
      return p;
    }
  };
}
var locale;
setDefaultLocale({
  dateTime: '%x, %X',
  date: '%-m/%-d/%Y',
  time: '%-I:%M:%S %p',
  periods: ['AM', 'PM'],
  days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
  shortDays: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
  months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
  shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
});
function setDefaultLocale(definition) {
  return locale = formatLocale$1(definition);
}
var __extends$S =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var TimeScale = /** @class */function (_super) {
  __extends$S(TimeScale, _super);
  function TimeScale() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.type = 'time';
    _this.year = year;
    _this.month = month;
    _this.week = sunday;
    _this.day = day;
    _this.hour = hour;
    _this.minute = minute;
    _this.second = second;
    _this.millisecond = millisecond;
    _this.format = locale.format;
    /**
     * Array of default tick intervals in the following format:
     *
     *     [
     *         interval (unit of time),
     *         number of units (step),
     *         the length of that number of units in milliseconds
     *     ]
     */
    _this.tickIntervals = [[_this.second, 1, durationSecond], [_this.second, 5, 5 * durationSecond], [_this.second, 15, 15 * durationSecond], [_this.second, 30, 30 * durationSecond], [_this.minute, 1, durationMinute], [_this.minute, 5, 5 * durationMinute], [_this.minute, 15, 15 * durationMinute], [_this.minute, 30, 30 * durationMinute], [_this.hour, 1, durationHour], [_this.hour, 3, 3 * durationHour], [_this.hour, 6, 6 * durationHour], [_this.hour, 12, 12 * durationHour], [_this.day, 1, durationDay], [_this.day, 2, 2 * durationDay], [_this.week, 1, durationWeek], [_this.month, 1, durationMonth], [_this.month, 3, 3 * durationMonth], [_this.year, 1, durationYear]];
    _this.formatMillisecond = _this.format('.%L');
    _this.formatSecond = _this.format(':%S');
    _this.formatMinute = _this.format('%I:%M');
    _this.formatHour = _this.format('%I %p');
    _this.formatDay = _this.format('%a %d');
    _this.formatWeek = _this.format('%b %d');
    _this.formatMonth = _this.format('%B');
    _this.formatYear = _this.format('%Y');
    _this._domain = [new Date(2000, 0, 1), new Date(2000, 0, 2)];
    return _this;
  }
  TimeScale.prototype.defaultTickFormat = function (date) {
    return (this.second.floor(date) < date ? this.formatMillisecond : this.minute.floor(date) < date ? this.formatSecond : this.hour.floor(date) < date ? this.formatMinute : this.day.floor(date) < date ? this.formatHour : this.month.floor(date) < date ? this.week.floor(date) < date ? this.formatDay : this.formatWeek : this.year.floor(date) < date ? this.formatMonth : this.formatYear)(date);
  };
  /**
   *
   * @param interval If the `interval` is a number, it's interpreted as the desired tick count
   * and the method tries to pick an appropriate interval automatically, based on the extent of the domain.
   * If the `interval` is `undefined`, it defaults to `10`.
   * If the `interval` is a time interval, simply use it.
   * @param start The start time (timestamp).
   * @param stop The end time (timestamp).
   * @param step Number of intervals between ticks.
   */
  TimeScale.prototype.tickInterval = function (interval, start, stop, step) {
    var _a;
    if (typeof interval === 'number') {
      var tickCount = interval;
      var tickIntervals = this.tickIntervals;
      var target = Math.abs(stop - start) / tickCount;
      var i = complexBisectRight(tickIntervals, target, function (interval) {
        return interval[2];
      });
      if (i === tickIntervals.length) {
        step = tickStep(start / durationYear, stop / durationYear, tickCount);
        interval = this.year;
      } else if (i) {
        _a = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i], interval = _a[0], step = _a[1];
      } else {
        step = Math.max(tickStep(start, stop, interval), 1);
        interval = this.millisecond;
      }
    }
    return step == undefined ? interval : interval.every(step);
  };
  Object.defineProperty(TimeScale.prototype, "domain", {
    get: function () {
      return _super.prototype.getDomain.call(this).map(function (t) {
        return new Date(t);
      });
    },
    set: function (values) {
      _super.prototype.setDomain.call(this, Array.prototype.map.call(values, function (t) {
        return t instanceof Date ? +t : +new Date(+t);
      }));
    },
    enumerable: true,
    configurable: true
  });
  TimeScale.prototype.invert = function (y) {
    return new Date(_super.prototype.invert.call(this, y));
  };
  /**
   * Returns uniformly-spaced dates that represent the scale's domain.
   * @param interval The desired tick count or a time interval object.
   */
  TimeScale.prototype.ticks = function (interval) {
    if (interval === void 0) {
      interval = 10;
    }
    var d = _super.prototype.getDomain.call(this);
    var t0 = d[0];
    var t1 = d[d.length - 1];
    var reverse = t1 < t0;
    if (reverse) {
      var _ = t0;
      t0 = t1;
      t1 = _;
    }
    var t = this.tickInterval(interval, t0, t1);
    var i = t ? t.range(t0, t1 + 1) : []; // inclusive stop
    return reverse ? i.reverse() : i;
  };
  /**
   * Returns a time format function suitable for displaying tick values.
   * @param count Ignored. Used only to satisfy the {@link Scale} interface.
   * @param specifier If the specifier string is provided, this method is equivalent to
   * the {@link TimeLocaleObject.format} method.
   * If no specifier is provided, this method returns the default time format function.
   */
  TimeScale.prototype.tickFormat = function (count, specifier) {
    return specifier == undefined ? this.defaultTickFormat.bind(this) : this.format(specifier);
  };
  /**
   * Extends the domain so that it starts and ends on nice round values.
   * This method typically modifies the scale’s domain, and may only extend the bounds to the nearest round value.
   * @param interval
   */
  TimeScale.prototype.nice = function (interval) {
    if (interval === void 0) {
      interval = 10;
    }
    var d = _super.prototype.getDomain.call(this);
    var i = this.tickInterval(interval, d[0], d[d.length - 1]);
    if (i) {
      this.domain = this._nice(d, i);
    }
  };
  TimeScale.prototype._nice = function (domain, interval) {
    var _a, _b;
    domain = domain.slice();
    var i0 = 0;
    var i1 = domain.length - 1;
    var x0 = domain[i0];
    var x1 = domain[i1];
    if (x1 < x0) {
      _a = [i1, i0], i0 = _a[0], i1 = _a[1];
      _b = [x1, x0], x0 = _b[0], x1 = _b[1];
    }
    domain[i0] = interval.floor(x0);
    domain[i1] = interval.ceil(x1);
    return domain;
  };
  return TimeScale;
}(ContinuousScale);
var __extends$T =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var TimeAxis = /** @class */function (_super) {
  __extends$T(TimeAxis, _super);
  function TimeAxis() {
    var _this = _super.call(this) || this;
    _this.datumFormat = '%m/%d/%y, %H:%M:%S';
    _this._nice = true;
    var scale = new TimeScale();
    scale.clamp = true;
    _this.scale = scale;
    _this.datumFormatter = scale.tickFormat(_this.tick.count, _this.datumFormat);
    return _this;
  }
  Object.defineProperty(TimeAxis.prototype, "nice", {
    get: function () {
      return this._nice;
    },
    set: function (value) {
      if (this._nice !== value) {
        this._nice = value;
        if (value && this.scale.nice) {
          this.scale.nice(10);
        }
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TimeAxis.prototype, "domain", {
    get: function () {
      return this.scale.domain;
    },
    set: function (value) {
      this.scale.domain = value;
      if (this.nice && this.scale.nice) {
        this.scale.nice(10);
      }
    },
    enumerable: true,
    configurable: true
  });
  TimeAxis.prototype.onLabelFormatChange = function (format) {
    if (format) {
      _super.prototype.onLabelFormatChange.call(this, format);
    } else {
      // For time axis labels to look nice, even if date format wasn't set.
      this.labelFormatter = this.scale.tickFormat(this.tick.count, undefined);
    }
  };
  TimeAxis.prototype.formatDatum = function (datum) {
    return this.datumFormatter(datum);
  };
  TimeAxis.className = 'TimeAxis';
  TimeAxis.type = 'time';
  return TimeAxis;
}(ChartAxis);
var Scene = /** @class */function () {
  // As a rule of thumb, constructors with no parameters are preferred.
  // A few exceptions are:
  // - we absolutely need to know something at construction time (document)
  // - knowing something at construction time meaningfully improves performance (width, height)
  function Scene(document, width, height) {
    var _this = this;
    if (document === void 0) {
      document = window.document;
    }
    this.id = createId(this);
    this._dirty = false;
    this.animationFrameId = 0;
    this._root = null;
    this.debug = {
      renderFrameIndex: false,
      renderBoundingBoxes: false
    };
    this._frameIndex = 0;
    this.render = function () {
      var _a;
      var _b = _this,
        ctx = _b.ctx,
        root = _b.root,
        pendingSize = _b.pendingSize;
      _this.animationFrameId = 0;
      if (pendingSize) {
        (_a = _this.canvas).resize.apply(_a, pendingSize);
        _this.pendingSize = undefined;
      }
      if (root && !root.visible) {
        _this.dirty = false;
        return;
      }
      // start with a blank canvas, clear previous drawing
      ctx.clearRect(0, 0, _this.width, _this.height);
      if (root) {
        ctx.save();
        if (root.visible) {
          root.render(ctx);
        }
        ctx.restore();
      }
      _this._frameIndex++;
      if (_this.debug.renderFrameIndex) {
        ctx.fillStyle = 'white';
        ctx.fillRect(0, 0, 40, 15);
        ctx.fillStyle = 'black';
        ctx.fillText(_this.frameIndex.toString(), 2, 10);
      }
      _this.dirty = false;
    };
    this.canvas = new HdpiCanvas(document, width, height);
    this.ctx = this.canvas.context;
  }
  Object.defineProperty(Scene.prototype, "container", {
    get: function () {
      return this.canvas.container;
    },
    set: function (value) {
      this.canvas.container = value;
    },
    enumerable: true,
    configurable: true
  });
  Scene.prototype.download = function (fileName) {
    this.canvas.download(fileName);
  };
  Scene.prototype.getDataURL = function (type) {
    return this.canvas.getDataURL(type);
  };
  Object.defineProperty(Scene.prototype, "width", {
    get: function () {
      return this.pendingSize ? this.pendingSize[0] : this.canvas.width;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Scene.prototype, "height", {
    get: function () {
      return this.pendingSize ? this.pendingSize[1] : this.canvas.height;
    },
    enumerable: true,
    configurable: true
  });
  Scene.prototype.resize = function (width, height) {
    width = Math.round(width);
    height = Math.round(height);
    if (width === this.width && height === this.height) {
      return;
    }
    this.pendingSize = [width, height];
    this.dirty = true;
  };
  Object.defineProperty(Scene.prototype, "dirty", {
    get: function () {
      return this._dirty;
    },
    set: function (dirty) {
      if (dirty && !this._dirty) {
        this.animationFrameId = requestAnimationFrame(this.render);
      }
      this._dirty = dirty;
    },
    enumerable: true,
    configurable: true
  });
  Scene.prototype.cancelRender = function () {
    if (this.animationFrameId) {
      cancelAnimationFrame(this.animationFrameId);
      this.animationFrameId = 0;
      this._dirty = false;
    }
  };
  Object.defineProperty(Scene.prototype, "root", {
    get: function () {
      return this._root;
    },
    set: function (node) {
      if (node === this._root) {
        return;
      }
      if (this._root) {
        this._root._setScene();
      }
      this._root = node;
      if (node) {
        // If `node` is the root node of another scene ...
        if (node.parent === null && node.scene && node.scene !== this) {
          node.scene.root = null;
        }
        node._setScene(this);
      }
      this.dirty = true;
    },
    enumerable: true,
    configurable: true
  });
  Scene.prototype.appendPath = function (path) {
    var ctx = this.ctx;
    var commands = path.commands;
    var params = path.params;
    var n = commands.length;
    var j = 0;
    ctx.beginPath();
    for (var i = 0; i < n; i++) {
      switch (commands[i]) {
        case 'M':
          ctx.moveTo(params[j++], params[j++]);
          break;
        case 'L':
          ctx.lineTo(params[j++], params[j++]);
          break;
        case 'C':
          ctx.bezierCurveTo(params[j++], params[j++], params[j++], params[j++], params[j++], params[j++]);
          break;
        case 'Z':
          ctx.closePath();
          break;
      }
    }
  };
  Object.defineProperty(Scene.prototype, "frameIndex", {
    get: function () {
      return this._frameIndex;
    },
    enumerable: true,
    configurable: true
  });
  Scene.className = 'Scene';
  return Scene;
}();
var Gradient = /** @class */function () {
  function Gradient() {
    this.stops = [];
  }
  return Gradient;
}();
var __extends$U =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var LinearGradient = /** @class */function (_super) {
  __extends$U(LinearGradient, _super);
  function LinearGradient() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.angle = 0;
    return _this;
  }
  LinearGradient.prototype.generateGradient = function (ctx, bbox) {
    var stops = this.stops;
    var radians = this.angle % 360 * Math.PI / 180;
    var cos = Math.cos(radians);
    var sin = Math.sin(radians);
    var w = bbox.width;
    var h = bbox.height;
    var cx = bbox.x + w * 0.5;
    var cy = bbox.y + h * 0.5;
    if (w > 0 && h > 0) {
      var l = Math.sqrt(h * h + w * w) * Math.abs(Math.cos(radians - Math.atan(h / w))) / 2;
      var gradient_1 = ctx.createLinearGradient(cx + cos * l, cy + sin * l, cx - cos * l, cy - sin * l);
      stops.forEach(function (stop) {
        gradient_1.addColorStop(stop.offset, stop.color);
      });
      return gradient_1;
    }
    return 'black';
  };
  return LinearGradient;
}(Gradient);
var __extends$V =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var RectSizing;
(function (RectSizing) {
  RectSizing[RectSizing["Content"] = 0] = "Content";
  RectSizing[RectSizing["Border"] = 1] = "Border";
})(RectSizing || (RectSizing = {}));
var Rect = /** @class */function (_super) {
  __extends$V(Rect, _super);
  function Rect() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this._x = 0;
    _this._y = 0;
    _this._width = 10;
    _this._height = 10;
    _this._radius = 0;
    /**
     * If `true`, the rect is aligned to the pixel grid for crisp looking lines.
     * Animated rects may not look nice with this option enabled, for example
     * when a rect is translated by a sub-pixel value on each frame.
     */
    _this._crisp = false;
    _this._gradient = false;
    _this.effectiveStrokeWidth = Shape.defaultStyles.strokeWidth;
    /**
     * Similar to https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing
     */
    _this._sizing = RectSizing.Content;
    return _this;
  }
  Object.defineProperty(Rect.prototype, "x", {
    get: function () {
      return this._x;
    },
    set: function (value) {
      if (this._x !== value) {
        this._x = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Rect.prototype, "y", {
    get: function () {
      return this._y;
    },
    set: function (value) {
      if (this._y !== value) {
        this._y = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Rect.prototype, "width", {
    get: function () {
      return this._width;
    },
    set: function (value) {
      if (this._width !== value) {
        this._width = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Rect.prototype, "height", {
    get: function () {
      return this._height;
    },
    set: function (value) {
      if (this._height !== value) {
        this._height = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Rect.prototype, "radius", {
    get: function () {
      return this._radius;
    },
    set: function (value) {
      if (this._radius !== value) {
        this._radius = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Rect.prototype, "crisp", {
    get: function () {
      return this._crisp;
    },
    set: function (value) {
      if (this._crisp !== value) {
        this._crisp = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Rect.prototype, "gradient", {
    get: function () {
      return this._gradient;
    },
    set: function (value) {
      if (this._gradient !== value) {
        this._gradient = value;
        this.updateGradientInstance();
        this.dirty = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Rect.prototype.updateGradientInstance = function () {
    if (this.gradient) {
      var fill = this.fill;
      if (fill) {
        var gradient = new LinearGradient();
        gradient.angle = 270;
        gradient.stops = [{
          offset: 0,
          color: Color.fromString(fill).brighter().toString()
        }, {
          offset: 1,
          color: Color.fromString(fill).darker().toString()
        }];
        this.gradientInstance = gradient;
      }
    } else {
      this.gradientInstance = undefined;
    }
  };
  Object.defineProperty(Rect.prototype, "fill", {
    get: function () {
      return this._fill;
    },
    set: function (value) {
      if (this._fill !== value) {
        this._fill = value;
        this.updateGradientInstance();
        this.dirty = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Rect.prototype, "strokeWidth", {
    get: function () {
      return this._strokeWidth;
    },
    set: function (value) {
      if (this._strokeWidth !== value) {
        this._strokeWidth = value;
        // Normally, when the `lineWidth` changes, we only need to repaint the rect
        // without updating the path. If the `isCrisp` is set to `true` however,
        // we need to update the path to make sure the new stroke aligns to
        // the pixel grid. This is the reason we override the `lineWidth` setter
        // and getter here.
        if (this.crisp || this.sizing === RectSizing.Border) {
          this.dirtyPath = true;
        } else {
          this.effectiveStrokeWidth = value;
          this.dirty = true;
        }
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Rect.prototype, "sizing", {
    get: function () {
      return this._sizing;
    },
    set: function (value) {
      if (this._sizing !== value) {
        this._sizing = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Rect.prototype.updatePath = function () {
    var borderSizing = this.sizing === RectSizing.Border;
    var path = this.path;
    path.clear();
    var x = this.x;
    var y = this.y;
    var width = this.width;
    var height = this.height;
    var strokeWidth;
    if (borderSizing) {
      var halfWidth = width / 2;
      var halfHeight = height / 2;
      strokeWidth = Math.min(this.strokeWidth, halfWidth, halfHeight);
      x = Math.min(x + strokeWidth / 2, x + halfWidth);
      y = Math.min(y + strokeWidth / 2, y + halfHeight);
      width = Math.max(width - strokeWidth, 0);
      height = Math.max(height - strokeWidth, 0);
    } else {
      strokeWidth = this.strokeWidth;
    }
    this.effectiveStrokeWidth = strokeWidth;
    if (this.crisp && !borderSizing) {
      var _a = this,
        a = _a.alignment,
        al = _a.align;
      path.rect(al(a, x), al(a, y), al(a, x, width), al(a, y, height));
    } else {
      path.rect(x, y, width, height);
    }
  };
  Rect.prototype.computeBBox = function () {
    var _a = this,
      x = _a.x,
      y = _a.y,
      width = _a.width,
      height = _a.height;
    return new BBox(x, y, width, height);
  };
  Rect.prototype.isPointInPath = function (x, y) {
    var point = this.transformPoint(x, y);
    var bbox = this.computeBBox();
    return bbox.containsPoint(point.x, point.y);
  };
  Rect.prototype.isPointInStroke = function (x, y) {
    return false;
  };
  Rect.prototype.fillStroke = function (ctx) {
    if (!this.scene) {
      return;
    }
    var pixelRatio = this.scene.canvas.pixelRatio || 1;
    if (this.fill) {
      if (this.gradientInstance) {
        ctx.fillStyle = this.gradientInstance.generateGradient(ctx, this.computeBBox());
      } else {
        ctx.fillStyle = this.fill;
      }
      ctx.globalAlpha = this.opacity * this.fillOpacity;
      // The canvas context scaling (depends on the device's pixel ratio)
      // has no effect on shadows, so we have to account for the pixel ratio
      // manually here.
      var fillShadow = this.fillShadow;
      if (fillShadow && fillShadow.enabled) {
        ctx.shadowColor = fillShadow.color;
        ctx.shadowOffsetX = fillShadow.xOffset * pixelRatio;
        ctx.shadowOffsetY = fillShadow.yOffset * pixelRatio;
        ctx.shadowBlur = fillShadow.blur * pixelRatio;
      }
      ctx.fill();
    }
    ctx.shadowColor = 'rgba(0, 0, 0, 0)';
    if (this.stroke && this.effectiveStrokeWidth) {
      ctx.strokeStyle = this.stroke;
      ctx.globalAlpha = this.opacity * this.strokeOpacity;
      ctx.lineWidth = this.effectiveStrokeWidth;
      if (this.lineDash) {
        ctx.setLineDash(this.lineDash);
      }
      if (this.lineDashOffset) {
        ctx.lineDashOffset = this.lineDashOffset;
      }
      if (this.lineCap) {
        ctx.lineCap = this.lineCap;
      }
      if (this.lineJoin) {
        ctx.lineJoin = this.lineJoin;
      }
      var strokeShadow = this.strokeShadow;
      if (strokeShadow && strokeShadow.enabled) {
        ctx.shadowColor = strokeShadow.color;
        ctx.shadowOffsetX = strokeShadow.xOffset * pixelRatio;
        ctx.shadowOffsetY = strokeShadow.yOffset * pixelRatio;
        ctx.shadowBlur = strokeShadow.blur * pixelRatio;
      }
      ctx.stroke();
    }
  };
  Rect.className = 'Rect';
  return Rect;
}(Path);
var __extends$W =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Marker = /** @class */function (_super) {
  __extends$W(Marker, _super);
  function Marker() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this._x = 0;
    _this._y = 0;
    _this._size = 12;
    return _this;
  }
  Object.defineProperty(Marker.prototype, "x", {
    get: function () {
      return this._x;
    },
    set: function (value) {
      if (this._x !== value) {
        this._x = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Marker.prototype, "y", {
    get: function () {
      return this._y;
    },
    set: function (value) {
      if (this._y !== value) {
        this._y = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Marker.prototype, "size", {
    get: function () {
      return this._size;
    },
    set: function (value) {
      if (this._size !== value) {
        this._size = Math.abs(value);
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Marker.prototype.computeBBox = function () {
    var _a = this,
      x = _a.x,
      y = _a.y,
      size = _a.size;
    var half = size / 2;
    return new BBox(x - half, y - half, size, size);
  };
  return Marker;
}(Path);
var __extends$X =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Square = /** @class */function (_super) {
  __extends$X(Square, _super);
  function Square() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Square.prototype.updatePath = function () {
    var _a = this,
      path = _a.path,
      x = _a.x,
      y = _a.y;
    var hs = this.size / 2;
    var _b = this,
      a = _b.alignment,
      al = _b.align;
    path.clear();
    path.moveTo(al(a, x - hs), al(a, y - hs));
    path.lineTo(al(a, x + hs), al(a, y - hs));
    path.lineTo(al(a, x + hs), al(a, y + hs));
    path.lineTo(al(a, x - hs), al(a, y + hs));
    path.closePath();
  };
  Square.className = 'Square';
  return Square;
}(Marker);
var __extends$Y =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var MarkerLabel = /** @class */function (_super) {
  __extends$Y(MarkerLabel, _super);
  function MarkerLabel() {
    var _this = _super.call(this) || this;
    _this.label = new Text();
    _this._marker = new Square();
    _this._markerSize = 15;
    _this._spacing = 8;
    var label = _this.label;
    label.textBaseline = 'middle';
    label.fontSize = 12;
    label.fontFamily = 'Verdana, sans-serif';
    label.fill = 'black';
    // For better looking vertical alignment of labels to markers.
    label.y = HdpiCanvas.has.textMetrics ? 1 : 0;
    _this.append([_this.marker, label]);
    _this.update();
    return _this;
  }
  Object.defineProperty(MarkerLabel.prototype, "text", {
    get: function () {
      return this.label.text;
    },
    set: function (value) {
      this.label.text = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MarkerLabel.prototype, "fontStyle", {
    get: function () {
      return this.label.fontStyle;
    },
    set: function (value) {
      this.label.fontStyle = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MarkerLabel.prototype, "fontWeight", {
    get: function () {
      return this.label.fontWeight;
    },
    set: function (value) {
      this.label.fontWeight = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MarkerLabel.prototype, "fontSize", {
    get: function () {
      return this.label.fontSize;
    },
    set: function (value) {
      this.label.fontSize = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MarkerLabel.prototype, "fontFamily", {
    get: function () {
      return this.label.fontFamily;
    },
    set: function (value) {
      this.label.fontFamily = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MarkerLabel.prototype, "color", {
    get: function () {
      return this.label.fill;
    },
    set: function (value) {
      this.label.fill = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MarkerLabel.prototype, "marker", {
    get: function () {
      return this._marker;
    },
    set: function (value) {
      if (this._marker !== value) {
        this.removeChild(this._marker);
        this._marker = value;
        this.appendChild(value);
        this.update();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MarkerLabel.prototype, "markerSize", {
    get: function () {
      return this._markerSize;
    },
    set: function (value) {
      if (this._markerSize !== value) {
        this._markerSize = value;
        this.update();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MarkerLabel.prototype, "markerFill", {
    get: function () {
      return this.marker.fill;
    },
    set: function (value) {
      this.marker.fill = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MarkerLabel.prototype, "markerStroke", {
    get: function () {
      return this.marker.stroke;
    },
    set: function (value) {
      this.marker.stroke = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MarkerLabel.prototype, "markerStrokeWidth", {
    get: function () {
      return this.marker.strokeWidth;
    },
    set: function (value) {
      this.marker.strokeWidth = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MarkerLabel.prototype, "markerFillOpacity", {
    get: function () {
      return this.marker.fillOpacity;
    },
    set: function (value) {
      this.marker.fillOpacity = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MarkerLabel.prototype, "markerStrokeOpacity", {
    get: function () {
      return this.marker.strokeOpacity;
    },
    set: function (value) {
      this.marker.strokeOpacity = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MarkerLabel.prototype, "opacity", {
    get: function () {
      return this.marker.opacity;
    },
    set: function (value) {
      this.marker.opacity = value;
      this.label.opacity = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MarkerLabel.prototype, "spacing", {
    get: function () {
      return this._spacing;
    },
    set: function (value) {
      if (this._spacing !== value) {
        this._spacing = value;
        this.update();
      }
    },
    enumerable: true,
    configurable: true
  });
  MarkerLabel.prototype.update = function () {
    var marker = this.marker;
    var markerSize = this.markerSize;
    marker.size = markerSize;
    this.label.x = markerSize / 2 + this.spacing;
  };
  MarkerLabel.className = 'MarkerLabel';
  return MarkerLabel;
}(Group);
var __extends$Z =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Circle = /** @class */function (_super) {
  __extends$Z(Circle, _super);
  function Circle() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Circle.prototype.updatePath = function () {
    var _a = this,
      x = _a.x,
      y = _a.y,
      path = _a.path,
      size = _a.size;
    var r = size / 2;
    path.clear();
    path.cubicArc(x, y, r, r, 0, 0, Math.PI * 2, 0);
    path.closePath();
  };
  Circle.className = 'Circle';
  return Circle;
}(Marker);
var __extends$_ =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Cross = /** @class */function (_super) {
  __extends$_(Cross, _super);
  function Cross() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Cross.prototype.updatePath = function () {
    var _a = this,
      x = _a.x,
      y = _a.y;
    var _b = this,
      path = _b.path,
      size = _b.size;
    var s = size / 4.2;
    path.clear();
    path.moveTo(x -= s, y);
    path.lineTo(x -= s, y -= s);
    path.lineTo(x += s, y -= s);
    path.lineTo(x += s, y += s);
    path.lineTo(x += s, y -= s);
    path.lineTo(x += s, y += s);
    path.lineTo(x -= s, y += s);
    path.lineTo(x += s, y += s);
    path.lineTo(x -= s, y += s);
    path.lineTo(x -= s, y -= s);
    path.lineTo(x -= s, y += s);
    path.lineTo(x -= s, y -= s);
    path.closePath();
  };
  Cross.className = 'Cross';
  return Cross;
}(Marker);
var __extends$$ =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Diamond = /** @class */function (_super) {
  __extends$$(Diamond, _super);
  function Diamond() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Diamond.prototype.updatePath = function () {
    var _a = this,
      x = _a.x,
      y = _a.y;
    var _b = this,
      path = _b.path,
      size = _b.size;
    var s = size / 2;
    path.clear();
    path.moveTo(x, y -= s);
    path.lineTo(x += s, y += s);
    path.lineTo(x -= s, y += s);
    path.lineTo(x -= s, y -= s);
    path.lineTo(x += s, y -= s);
    path.closePath();
  };
  Diamond.className = 'Diamond';
  return Diamond;
}(Marker);
var __extends$10 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Heart = /** @class */function (_super) {
  __extends$10(Heart, _super);
  function Heart() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Heart.prototype.rad = function (degree) {
    return degree / 180 * Math.PI;
  };
  Heart.prototype.updatePath = function () {
    var _a = this,
      x = _a.x,
      path = _a.path,
      size = _a.size,
      rad = _a.rad;
    var r = size / 4;
    var y = this.y + r / 2;
    path.clear();
    path.cubicArc(x - r, y - r, r, r, 0, rad(130), rad(330), 0);
    path.cubicArc(x + r, y - r, r, r, 0, rad(220), rad(50), 0);
    path.lineTo(x, y + r);
    path.closePath();
  };
  Heart.className = 'Heart';
  return Heart;
}(Marker);
var __extends$11 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Plus = /** @class */function (_super) {
  __extends$11(Plus, _super);
  function Plus() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Plus.prototype.updatePath = function () {
    var _a = this,
      x = _a.x,
      y = _a.y;
    var _b = this,
      path = _b.path,
      size = _b.size;
    var s = size / 3;
    var hs = s / 2;
    path.clear();
    path.moveTo(x -= hs, y -= hs);
    path.lineTo(x, y -= s);
    path.lineTo(x += s, y);
    path.lineTo(x, y += s);
    path.lineTo(x += s, y);
    path.lineTo(x, y += s);
    path.lineTo(x -= s, y);
    path.lineTo(x, y += s);
    path.lineTo(x -= s, y);
    path.lineTo(x, y -= s);
    path.lineTo(x -= s, y);
    path.lineTo(x, y -= s);
    path.closePath();
  };
  Plus.className = 'Plus';
  return Plus;
}(Marker);
var __extends$12 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Triangle = /** @class */function (_super) {
  __extends$12(Triangle, _super);
  function Triangle() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Triangle.prototype.updatePath = function () {
    var _a = this,
      x = _a.x,
      y = _a.y;
    var _b = this,
      path = _b.path,
      size = _b.size;
    var s = size * 1.1;
    path.clear();
    path.moveTo(x, y -= s * 0.48);
    path.lineTo(x += s * 0.5, y += s * 0.87);
    path.lineTo(x -= s, y);
    path.closePath();
  };
  Triangle.className = 'Triangle';
  return Triangle;
}(Marker);

// This function is in its own file because putting it into SeriesMarker makes the Legend
// suddenly aware of the series (it's an agnostic component), and putting it into Marker
// introduces circular dependencies.
function getMarker(shape) {
  if (shape === void 0) {
    shape = Square;
  }
  if (typeof shape === 'string') {
    switch (shape) {
      case 'circle':
        return Circle;
      case 'cross':
        return Cross;
      case 'diamond':
        return Diamond;
      case 'heart':
        return Heart;
      case 'plus':
        return Plus;
      case 'triangle':
        return Triangle;
      default:
        return Square;
    }
  }
  if (typeof shape === 'function') {
    return shape;
  }
  return Square;
}
var __extends$13 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$B =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var LegendOrientation;
(function (LegendOrientation) {
  LegendOrientation[LegendOrientation["Vertical"] = 0] = "Vertical";
  LegendOrientation[LegendOrientation["Horizontal"] = 1] = "Horizontal";
})(LegendOrientation || (LegendOrientation = {}));
var LegendPosition;
(function (LegendPosition) {
  LegendPosition["Top"] = "top";
  LegendPosition["Right"] = "right";
  LegendPosition["Bottom"] = "bottom";
  LegendPosition["Left"] = "left";
})(LegendPosition || (LegendPosition = {}));
var LegendLabel = /** @class */function (_super) {
  __extends$13(LegendLabel, _super);
  function LegendLabel() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.color = 'black';
    _this.fontSize = 12;
    _this.fontFamily = 'Verdana, sans-serif';
    return _this;
  }
  __decorate$B([reactive('change')], LegendLabel.prototype, "color", void 0);
  __decorate$B([reactive('layoutChange')], LegendLabel.prototype, "fontStyle", void 0);
  __decorate$B([reactive('layoutChange')], LegendLabel.prototype, "fontWeight", void 0);
  __decorate$B([reactive('layoutChange')], LegendLabel.prototype, "fontSize", void 0);
  __decorate$B([reactive('layoutChange')], LegendLabel.prototype, "fontFamily", void 0);
  __decorate$B([reactive()], LegendLabel.prototype, "formatter", void 0);
  return LegendLabel;
}(Observable);
var LegendMarker = /** @class */function (_super) {
  __extends$13(LegendMarker, _super);
  function LegendMarker() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.size = 15;
    /**
     * Padding between the marker and the label within each legend item.
     */
    _this.padding = 8;
    _this.strokeWidth = 1;
    return _this;
  }
  __decorate$B([reactive('layoutChange')], LegendMarker.prototype, "size", void 0);
  __decorate$B([reactive('layoutChange')], LegendMarker.prototype, "shape", void 0);
  __decorate$B([reactive('layoutChange')], LegendMarker.prototype, "padding", void 0);
  __decorate$B([reactive('change')], LegendMarker.prototype, "strokeWidth", void 0);
  return LegendMarker;
}(Observable);
var LegendItem = /** @class */function (_super) {
  __extends$13(LegendItem, _super);
  function LegendItem() {
    var _this = _super.call(this) || this;
    _this.marker = new LegendMarker();
    _this.label = new LegendLabel();
    /**
     * The legend uses grid layout for its items, occupying as few columns as possible when positioned to left or right,
     * and as few rows as possible when positioned to top or bottom. This config specifies the amount of horizontal
     * padding between legend items.
     */
    _this.paddingX = 16;
    /**
     * The legend uses grid layout for its items, occupying as few columns as possible when positioned to left or right,
     * and as few rows as possible when positioned to top or bottom. This config specifies the amount of vertical
     * padding between legend items.
     */
    _this.paddingY = 8;
    var changeListener = function () {
      return _this.fireEvent({
        type: 'change'
      });
    };
    _this.marker.addEventListener('change', changeListener);
    _this.label.addEventListener('change', changeListener);
    var layoutChangeListener = function () {
      return _this.fireEvent({
        type: 'layoutChange'
      });
    };
    _this.marker.addEventListener('layoutChange', layoutChangeListener);
    _this.label.addEventListener('layoutChange', layoutChangeListener);
    return _this;
  }
  __decorate$B([reactive('layoutChange')], LegendItem.prototype, "paddingX", void 0);
  __decorate$B([reactive('layoutChange')], LegendItem.prototype, "paddingY", void 0);
  return LegendItem;
}(Observable);
var Legend = /** @class */function (_super) {
  __extends$13(Legend, _super);
  function Legend() {
    var _this = _super.call(this) || this;
    _this.id = createId(_this);
    _this.group = new Group();
    _this.itemSelection = Selection.select(_this.group).selectAll();
    _this.oldSize = [0, 0];
    _this.item = new LegendItem();
    _this.data = [];
    _this.enabled = true;
    _this.orientation = LegendOrientation.Vertical;
    _this.position = LegendPosition.Right;
    /**
     * Spacing between the legend and the edge of the chart's element.
     */
    _this.spacing = 20;
    _this._size = [0, 0];
    _this.addPropertyListener('data', _this.onDataChange);
    _this.addPropertyListener('enabled', _this.onEnabledChange);
    _this.addPropertyListener('position', _this.onPositionChange);
    _this.item.marker.addPropertyListener('shape', _this.onMarkerShapeChange, _this);
    _this.addEventListener('change', _this.update);
    _this.item.addEventListener('change', function () {
      return _this.fireEvent({
        type: 'change'
      });
    });
    _this.item.addEventListener('layoutChange', function () {
      return _this.fireEvent({
        type: 'layoutChange'
      });
    });
    return _this;
  }
  Object.defineProperty(Legend.prototype, "layoutHorizontalSpacing", {
    get: function () {
      return this.item.paddingX;
    },
    /**
     * @deprecated Please use {@link item.paddingX} instead.
     */
    set: function (value) {
      this.item.paddingX = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Legend.prototype, "layoutVerticalSpacing", {
    get: function () {
      return this.item.paddingY;
    },
    /**
     * @deprecated Please use {@link item.paddingY} instead.
     */
    set: function (value) {
      this.item.paddingY = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Legend.prototype, "itemSpacing", {
    get: function () {
      return this.item.marker.padding;
    },
    /**
     * @deprecated Please use {@link item.marker.padding} instead.
     */
    set: function (value) {
      this.item.marker.padding = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Legend.prototype, "markerShape", {
    get: function () {
      return this.item.marker.shape;
    },
    /**
     * @deprecated Please use {@link item.marker.shape} instead.
     */
    set: function (value) {
      this.item.marker.shape = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Legend.prototype, "markerSize", {
    get: function () {
      return this.item.marker.size;
    },
    /**
     * @deprecated Please use {@link item.marker.size} instead.
     */
    set: function (value) {
      this.item.marker.size = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Legend.prototype, "strokeWidth", {
    get: function () {
      return this.item.marker.strokeWidth;
    },
    /**
     * @deprecated Please use {@link item.marker.strokeWidth} instead.
     */
    set: function (value) {
      this.item.marker.strokeWidth = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Legend.prototype, "color", {
    get: function () {
      return this.item.label.color;
    },
    /**
     * @deprecated Please use {@link item.label.color} instead.
     */
    set: function (value) {
      this.item.label.color = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Legend.prototype, "fontStyle", {
    get: function () {
      return this.item.label.fontStyle;
    },
    /**
     * @deprecated Please use {@link item.label.fontStyle} instead.
     */
    set: function (value) {
      this.item.label.fontStyle = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Legend.prototype, "fontWeight", {
    get: function () {
      return this.item.label.fontWeight;
    },
    /**
     * @deprecated Please use {@link item.label.fontWeight} instead.
     */
    set: function (value) {
      this.item.label.fontWeight = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Legend.prototype, "fontSize", {
    get: function () {
      return this.item.label.fontSize;
    },
    /**
     * @deprecated Please use {@link item.label.fontSize} instead.
     */
    set: function (value) {
      this.item.label.fontSize = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Legend.prototype, "fontFamily", {
    get: function () {
      return this.item.label.fontFamily;
    },
    /**
     * @deprecated Please use {@link item.label.fontFamily} instead.
     */
    set: function (value) {
      this.item.label.fontFamily = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Legend.prototype, "size", {
    get: function () {
      return this._size;
    },
    enumerable: true,
    configurable: true
  });
  Legend.prototype.onDataChange = function (event) {
    this.group.visible = event.value.length > 0 && this.enabled;
  };
  Legend.prototype.onEnabledChange = function (event) {
    this.group.visible = event.value && this.data.length > 0;
  };
  Legend.prototype.onPositionChange = function (event) {
    switch (event.value) {
      case 'right':
      case 'left':
        this.orientation = LegendOrientation.Vertical;
        break;
      case 'bottom':
      case 'top':
        this.orientation = LegendOrientation.Horizontal;
        break;
    }
  };
  Legend.prototype.onMarkerShapeChange = function () {
    this.itemSelection = this.itemSelection.setData([]);
    this.itemSelection.exit.remove();
    if (this.group.scene) {
      this.group.scene.cancelRender();
    }
  };
  /**
   * The method is given the desired size of the legend, which only serves as a hint.
   * The vertically oriented legend will take as much horizontal space as needed, but will
   * respect the height constraints, and the horizontal legend will take as much vertical
   * space as needed in an attempt not to exceed the given width.
   * After the layout is done, the {@link size} will contain the actual size of the legend.
   * If the actual size is not the same as the previous actual size, the legend will fire
   * the 'layoutChange' event to communicate that another layout is needed, and the above
   * process should be repeated.
   * @param width
   * @param height
   */
  Legend.prototype.performLayout = function (width, height) {
    var item = this.item;
    var marker = item.marker,
      paddingX = item.paddingX,
      paddingY = item.paddingY;
    var updateSelection = this.itemSelection.setData(this.data, function (_, datum) {
      var MarkerShape = getMarker(marker.shape || datum.marker.shape);
      return datum.id + '-' + datum.itemId + '-' + MarkerShape.name;
    });
    updateSelection.exit.remove();
    var enterSelection = updateSelection.enter.append(MarkerLabel).each(function (node, datum) {
      var MarkerShape = getMarker(marker.shape || datum.marker.shape);
      node.marker = new MarkerShape();
    });
    var itemSelection = this.itemSelection = updateSelection.merge(enterSelection);
    var itemCount = itemSelection.size;
    // Update properties that affect the size of the legend items and measure them.
    var bboxes = [];
    var itemMarker = this.item.marker;
    var itemLabel = this.item.label;
    itemSelection.each(function (markerLabel, datum) {
      // TODO: measure only when one of these properties or data change (in a separate routine)
      markerLabel.markerSize = itemMarker.size;
      markerLabel.spacing = itemMarker.padding;
      markerLabel.fontStyle = itemLabel.fontStyle;
      markerLabel.fontWeight = itemLabel.fontWeight;
      markerLabel.fontSize = itemLabel.fontSize;
      markerLabel.fontFamily = itemLabel.fontFamily;
      markerLabel.text = datum.label.text;
      bboxes.push(markerLabel.computeBBox());
    });
    var itemHeight = bboxes.length && bboxes[0].height;
    var rowCount = 0;
    var columnWidth = 0;
    var paddedItemsWidth = 0;
    var paddedItemsHeight = 0;
    switch (this.orientation) {
      case LegendOrientation.Horizontal:
        if (!(isFinite(width) && width > 0)) {
          return false;
        }
        rowCount = 0;
        var columnCount = 0;
        // Split legend items into columns until the width is suitable.
        do {
          var itemsWidth = 0;
          columnCount = 0;
          columnWidth = 0;
          rowCount++;
          var i = 0;
          while (i < itemCount) {
            var bbox = bboxes[i];
            if (bbox.width > columnWidth) {
              columnWidth = bbox.width;
            }
            i++;
            if (i % rowCount === 0) {
              itemsWidth += columnWidth;
              columnWidth = 0;
              columnCount++;
            }
          }
          if (i % rowCount !== 0) {
            itemsWidth += columnWidth;
            columnCount++;
          }
          paddedItemsWidth = itemsWidth + (columnCount - 1) * paddingX;
        } while (paddedItemsWidth > width && columnCount > 1);
        paddedItemsHeight = itemHeight * rowCount + (rowCount - 1) * paddingY;
        break;
      case LegendOrientation.Vertical:
        if (!(isFinite(height) && height > 0)) {
          return false;
        }
        rowCount = itemCount * 2;
        // Split legend items into columns until the height is suitable.
        do {
          rowCount = (rowCount >> 1) + rowCount % 2;
          columnWidth = 0;
          var itemsWidth = 0;
          var itemsHeight = 0;
          var columnCount_1 = 0;
          var i = 0;
          while (i < itemCount) {
            var bbox = bboxes[i];
            if (!columnCount_1) {
              itemsHeight += bbox.height;
            }
            if (bbox.width > columnWidth) {
              columnWidth = bbox.width;
            }
            i++;
            if (i % rowCount === 0) {
              itemsWidth += columnWidth;
              columnWidth = 0;
              columnCount_1++;
            }
          }
          if (i % rowCount !== 0) {
            itemsWidth += columnWidth;
            columnCount_1++;
          }
          paddedItemsWidth = itemsWidth + (columnCount_1 - 1) * paddingX;
          paddedItemsHeight = itemsHeight + (rowCount - 1) * paddingY;
        } while (paddedItemsHeight > height && rowCount > 1);
        break;
    }
    // Top-left corner of the first legend item.
    var startX = (width - paddedItemsWidth) / 2;
    var startY = (height - paddedItemsHeight) / 2;
    var x = 0;
    var y = 0;
    columnWidth = 0;
    // Position legend items using the layout computed above.
    itemSelection.each(function (markerLabel, datum, i) {
      // Round off for pixel grid alignment to work properly.
      markerLabel.translationX = Math.floor(startX + x);
      markerLabel.translationY = Math.floor(startY + y);
      var bbox = bboxes[i];
      if (bbox.width > columnWidth) {
        columnWidth = bbox.width;
      }
      if ((i + 1) % rowCount === 0) {
        x += columnWidth + paddingX;
        y = 0;
        columnWidth = 0;
      } else {
        y += bbox.height + paddingY;
      }
    });
    // Update legend item properties that don't affect the layout.
    this.update();
    var size = this._size;
    var oldSize = this.oldSize;
    size[0] = paddedItemsWidth;
    size[1] = paddedItemsHeight;
    if (size[0] !== oldSize[0] || size[1] !== oldSize[1]) {
      oldSize[0] = size[0];
      oldSize[1] = size[1];
    }
  };
  Legend.prototype.update = function () {
    var _this = this;
    this.itemSelection.each(function (markerLabel, datum) {
      var marker = datum.marker;
      markerLabel.markerFill = marker.fill;
      markerLabel.markerStroke = marker.stroke;
      markerLabel.markerStrokeWidth = _this.item.marker.strokeWidth;
      markerLabel.markerFillOpacity = marker.fillOpacity;
      markerLabel.markerStrokeOpacity = marker.strokeOpacity;
      markerLabel.opacity = datum.enabled ? 1 : 0.5;
      markerLabel.color = _this.item.label.color;
    });
  };
  Legend.prototype.getDatumForPoint = function (x, y) {
    var node = this.group.pickNode(x, y);
    if (node && node.parent) {
      return node.parent.datum;
    }
  };
  Legend.className = 'Legend';
  __decorate$B([reactive('layoutChange')], Legend.prototype, "data", void 0);
  __decorate$B([reactive('layoutChange')], Legend.prototype, "enabled", void 0);
  __decorate$B([reactive('layoutChange')], Legend.prototype, "orientation", void 0);
  __decorate$B([reactive('layoutChange')], Legend.prototype, "position", void 0);
  __decorate$B([reactive('layoutChange')], Legend.prototype, "spacing", void 0);
  return Legend;
}(Observable);
var SizeMonitor = /** @class */function () {
  function SizeMonitor() {}
  SizeMonitor.init = function () {
    var _this = this;
    var NativeResizeObserver = window.ResizeObserver;
    if (NativeResizeObserver) {
      this.resizeObserver = new NativeResizeObserver(function (entries) {
        for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
          var entry = entries_1[_i];
          var _a = entry.contentRect,
            width = _a.width,
            height = _a.height;
          _this.checkSize(_this.elements.get(entry.target), entry.target, width, height);
        }
      });
    } else {
      // polyfill (more reliable even in browsers that support ResizeObserver)
      var step = function () {
        _this.elements.forEach(function (entry, element) {
          var width = element.clientWidth ? element.clientWidth : 0;
          var height = element.clientHeight ? element.clientHeight : 0;
          _this.checkSize(entry, element, width, height);
        });
      };
      window.setInterval(step, 100);
    }
    this.ready = true;
  };
  SizeMonitor.checkSize = function (entry, element, width, height) {
    if (entry) {
      if (!entry.size || width !== entry.size.width || height !== entry.size.height) {
        entry.size = {
          width: width,
          height: height
        };
        entry.cb(entry.size, element);
      }
    }
  };
  // Only a single callback is supported.
  SizeMonitor.observe = function (element, cb) {
    if (!this.ready) {
      this.init();
    }
    this.unobserve(element);
    if (this.resizeObserver) {
      this.resizeObserver.observe(element);
    }
    this.elements.set(element, {
      cb: cb
    });
  };
  SizeMonitor.unobserve = function (element) {
    if (this.resizeObserver) {
      this.resizeObserver.unobserve(element);
    }
    this.elements.delete(element);
  };
  SizeMonitor.elements = new Map();
  SizeMonitor.requestAnimationFrameId = 0;
  SizeMonitor.ready = false;
  return SizeMonitor;
}();
var __extends$14 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$C =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SeriesTooltip = /** @class */function (_super) {
  __extends$14(SeriesTooltip, _super);
  function SeriesTooltip() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.enabled = true;
    return _this;
  }
  __decorate$C([reactive('change')], SeriesTooltip.prototype, "enabled", void 0);
  return SeriesTooltip;
}(Observable);
var Series = /** @class */function (_super) {
  __extends$14(Series, _super);
  function Series() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.id = createId(_this);
    /**
     * The group node that contains all the nodes used to render this series.
     */
    _this.group = new Group();
    _this.directions = [ChartAxisDirection.X, ChartAxisDirection.Y];
    /**
     * @deprecated Use {@link tooltip.enabled} instead.
     */
    _this.tooltipEnabled = true;
    _this.data = undefined;
    _this.visible = true;
    _this.showInLegend = true;
    _this.cursor = 'default';
    _this.scheduleLayout = function () {
      _this.fireEvent({
        type: 'layoutChange'
      });
    };
    _this.scheduleData = function () {
      _this.fireEvent({
        type: 'dataChange'
      });
    };
    return _this;
  }
  Object.defineProperty(Series.prototype, "type", {
    get: function () {
      return this.constructor.type || '';
    },
    enumerable: true,
    configurable: true
  });
  Series.prototype.setColors = function (fills, strokes) {};
  /**
   * Returns the actual keys used (to fetch the values from `data` items) for the given direction.
   */
  Series.prototype.getKeys = function (direction) {
    var _this = this;
    var directionKeys = this.directionKeys;
    var keys = directionKeys && directionKeys[direction];
    var values = [];
    if (keys) {
      keys.forEach(function (key) {
        var value = _this[key];
        if (value) {
          if (Array.isArray(value)) {
            values.push.apply(values, value);
          } else {
            values.push(value);
          }
        }
      });
    }
    return values;
  };
  // Returns node data associated with the rendered portion of the series' data.
  Series.prototype.getNodeData = function () {
    return [];
  };
  Series.prototype.fireNodeClickEvent = function (event, datum) {};
  Series.prototype.toggleSeriesItem = function (itemId, enabled) {
    this.visible = enabled;
  };
  // Each series is expected to have its own logic to efficiently update its nodes
  // on hightlight changes.
  Series.prototype.onHighlightChange = function () {};
  Series.prototype.fixNumericExtent = function (extent, type) {
    if (!extent) {
      // if (type) {
      //     console.warn(`The ${type}-domain could not be found (no valid values), using the default of [0, 1].`);
      // }
      return [0, 1];
    }
    var min = extent[0],
      max = extent[1];
    if (min instanceof Date) {
      min = min.getTime();
    }
    if (max instanceof Date) {
      max = max.getTime();
    }
    if (min === max) {
      var padding = Math.abs(min * 0.01);
      min -= padding;
      max += padding;
      // if (type) {
      //     console.warn(`The ${type}-domain has zero length and has been automatically expanded`
      //         + ` by 1 in each direction (from the single valid ${type}-value: ${min}).`);
      // }
    }

    if (!isFinite(min) || !isFinite(max)) {
      min = 0;
      max = 1;
      // if (type) {
      //     console.warn(`The ${type}-domain has infinite length, using the default of [0, 1].`);
      // }
    }

    return [min, max];
  };
  __decorate$C([reactive('dataChange')], Series.prototype, "data", void 0);
  __decorate$C([reactive('dataChange')], Series.prototype, "visible", void 0);
  __decorate$C([reactive('layoutChange')], Series.prototype, "showInLegend", void 0);
  return Series;
}(Observable);
var __extends$15 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$D =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SeriesMarker = /** @class */function (_super) {
  __extends$15(SeriesMarker, _super);
  function SeriesMarker() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.enabled = true;
    /**
     * One of the predefined marker names, or a marker constructor function (for user-defined markers).
     * A series will create one marker instance per data point.
     */
    _this.shape = Circle;
    _this.size = 6;
    /**
     * In case a series has the `sizeKey` set, the `sizeKey` values along with the `size` and `maxSize` configs
     * will be used to determine the size of the marker. All values will be mapped to a marker size
     * within the `[size, maxSize]` range, where the largest values will correspond to the `maxSize`
     * and the lowest to the `size`.
     */
    _this.maxSize = 30;
    _this.strokeWidth = 1;
    return _this;
  }
  __decorate$D([reactive('change')], SeriesMarker.prototype, "enabled", void 0);
  __decorate$D([reactive('change')], SeriesMarker.prototype, "shape", void 0);
  __decorate$D([reactive('change')], SeriesMarker.prototype, "size", void 0);
  __decorate$D([reactive('change')], SeriesMarker.prototype, "maxSize", void 0);
  __decorate$D([reactive('change')], SeriesMarker.prototype, "domain", void 0);
  __decorate$D([reactive('change')], SeriesMarker.prototype, "fill", void 0);
  __decorate$D([reactive('change')], SeriesMarker.prototype, "stroke", void 0);
  __decorate$D([reactive('change')], SeriesMarker.prototype, "strokeWidth", void 0);
  return SeriesMarker;
}(Observable);
var __extends$16 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var CartesianSeries = /** @class */function (_super) {
  __extends$16(CartesianSeries, _super);
  function CartesianSeries() {
    var _a;
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.directionKeys = (_a = {}, _a[ChartAxisDirection.X] = ['xKey'], _a[ChartAxisDirection.Y] = ['yKey'], _a);
    return _this;
  }
  return CartesianSeries;
}(Series);
var CartesianSeriesMarker = /** @class */function (_super) {
  __extends$16(CartesianSeriesMarker, _super);
  function CartesianSeriesMarker() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return CartesianSeriesMarker;
}(SeriesMarker);
var __extends$17 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$4 =  false || function () {
  __assign$4 = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$4.apply(this, arguments);
};
var __decorate$E =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var defaultTooltipCss = "\n.ag-chart-tooltip {\n    display: table;\n    position: absolute;\n    user-select: none;\n    pointer-events: none;\n    white-space: nowrap;\n    z-index: 99999;\n    font: 12px Verdana, sans-serif;\n    color: black;\n    background: rgb(244, 244, 244);\n    border-radius: 5px;\n    box-shadow: 0 0 1px rgba(3, 3, 3, 0.7), 0.5vh 0.5vh 1vh rgba(3, 3, 3, 0.25);\n}\n\n.ag-chart-tooltip-hidden {\n    top: -10000px !important;\n}\n\n.ag-chart-tooltip-title {\n    font-weight: bold;\n    padding: 7px;\n    border-top-left-radius: 5px;\n    border-top-right-radius: 5px;\n    color: white;\n    background-color: #888888;\n    border-top-left-radius: 5px;\n    border-top-right-radius: 5px;\n}\n\n.ag-chart-tooltip-content {\n    padding: 7px;\n    line-height: 1.7em;\n    border-bottom-left-radius: 5px;\n    border-bottom-right-radius: 5px;\n    overflow: hidden;\n}\n\n.ag-chart-tooltip-content:empty {\n    padding: 0;\n    height: 7px;\n}\n\n.ag-chart-tooltip-arrow::before {\n    content: \"\";\n\n    position: absolute;\n    top: 100%;\n    left: 50%;\n    transform: translateX(-50%);\n\n    border: 6px solid #989898;\n\n    border-left-color: transparent;\n    border-right-color: transparent;\n    border-top-color: #989898;\n    border-bottom-color: transparent;\n\n    width: 0;\n    height: 0;\n\n    margin: 0 auto;\n}\n\n.ag-chart-tooltip-arrow::after {\n    content: \"\";\n\n    position: absolute;\n    top: 100%;\n    left: 50%;\n    transform: translateX(-50%);\n\n    border: 5px solid black;\n\n    border-left-color: transparent;\n    border-right-color: transparent;\n    border-top-color: rgb(244, 244, 244);\n    border-bottom-color: transparent;\n\n    width: 0;\n    height: 0;\n\n    margin: 0 auto;\n}\n\n.ag-chart-wrapper {\n    box-sizing: border-box;\n    overflow: hidden;\n}\n";
function toTooltipHtml(input, defaults) {
  if (typeof input === 'string') {
    return input;
  }
  defaults = defaults || {};
  var _a = input.content,
    content = _a === void 0 ? defaults.content || '' : _a,
    _b = input.title,
    title = _b === void 0 ? defaults.title || undefined : _b,
    _c = input.color,
    color = _c === void 0 ? defaults.color || 'white' : _c,
    _d = input.backgroundColor,
    backgroundColor = _d === void 0 ? defaults.backgroundColor || '#888' : _d;
  var titleHtml = title ? "<div class=\"" + Chart.defaultTooltipClass + "-title\"\n        style=\"color: " + color + "; background-color: " + backgroundColor + "\">" + title + "</div>" : '';
  return titleHtml + "<div class=\"" + Chart.defaultTooltipClass + "-content\">" + content + "</div>";
}
var ChartTooltip = /** @class */function (_super) {
  __extends$17(ChartTooltip, _super);
  function ChartTooltip(chart) {
    var _this = _super.call(this) || this;
    _this.element = document.createElement('div');
    _this.enabled = true;
    _this.class = Chart.defaultTooltipClass;
    _this.delay = 0;
    /**
     * If `true`, the tooltip will be shown for the marker closest to the mouse cursor.
     * Only has effect on series with markers.
     */
    _this.tracking = true;
    _this.showTimeout = 0;
    _this.constrained = false;
    _this.chart = chart;
    _this.class = '';
    var tooltipRoot = document.body;
    tooltipRoot.appendChild(_this.element);
    // Detect when the chart becomes invisible and hide the tooltip as well.
    if (window.IntersectionObserver) {
      var target_1 = _this.chart.scene.canvas.element;
      var observer = new IntersectionObserver(function (entries) {
        for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
          var entry = entries_1[_i];
          if (entry.target === target_1 && entry.intersectionRatio === 0) {
            _this.toggle(false);
          }
        }
      }, {
        root: tooltipRoot
      });
      observer.observe(target_1);
      _this.observer = observer;
    }
    return _this;
  }
  ChartTooltip.prototype.isVisible = function () {
    var element = this.element;
    if (element.classList) {
      // if not IE11
      return !element.classList.contains(Chart.defaultTooltipClass + '-hidden');
    }
    // IE11 part.
    var classes = element.getAttribute('class');
    if (classes) {
      return classes.split(' ').indexOf(Chart.defaultTooltipClass + '-hidden') < 0;
    }
    return false;
  };
  ChartTooltip.prototype.updateClass = function (visible, constrained) {
    var classList = [Chart.defaultTooltipClass, this.class];
    if (visible !== true) {
      classList.push(Chart.defaultTooltipClass + "-hidden");
    }
    if (constrained !== true) {
      classList.push(Chart.defaultTooltipClass + "-arrow");
    }
    this.element.setAttribute('class', classList.join(' '));
  };
  /**
   * Shows tooltip at the given event's coordinates.
   * If the `html` parameter is missing, moves the existing tooltip to the new position.
   */
  ChartTooltip.prototype.show = function (meta, html, instantly) {
    var _this = this;
    if (instantly === void 0) {
      instantly = false;
    }
    var el = this.element;
    if (html !== undefined) {
      el.innerHTML = html;
    } else if (!el.innerHTML) {
      return;
    }
    var left = meta.pageX - el.clientWidth / 2;
    var top = meta.pageY - el.clientHeight - 8;
    this.constrained = false;
    if (this.chart.container) {
      var tooltipRect = el.getBoundingClientRect();
      var minLeft = 0;
      var maxLeft = window.innerWidth - tooltipRect.width;
      if (left < minLeft) {
        left = minLeft;
        this.updateClass(true, this.constrained = true);
      } else if (left > maxLeft) {
        left = maxLeft;
        this.updateClass(true, this.constrained = true);
      }
      if (top < window.pageYOffset) {
        top = meta.pageY + 20;
        this.updateClass(true, this.constrained = true);
      }
    }
    el.style.left = left + "px";
    el.style.top = top + "px";
    if (this.delay > 0 && !instantly) {
      this.toggle(false);
      this.showTimeout = window.setTimeout(function () {
        _this.toggle(true);
      }, this.delay);
      return;
    }
    this.toggle(true);
  };
  ChartTooltip.prototype.toggle = function (visible) {
    if (!visible) {
      window.clearTimeout(this.showTimeout);
      if (this.chart.lastPick && !this.delay) {
        this.chart.dehighlightDatum();
        this.chart.lastPick = undefined;
      }
    }
    this.updateClass(visible, this.constrained);
  };
  ChartTooltip.prototype.destroy = function () {
    var parentNode = this.element.parentNode;
    if (parentNode) {
      parentNode.removeChild(this.element);
    }
    if (this.observer) {
      this.observer.unobserve(this.chart.scene.canvas.element);
    }
  };
  __decorate$E([reactive()], ChartTooltip.prototype, "enabled", void 0);
  __decorate$E([reactive()], ChartTooltip.prototype, "class", void 0);
  __decorate$E([reactive()], ChartTooltip.prototype, "delay", void 0);
  __decorate$E([reactive()], ChartTooltip.prototype, "tracking", void 0);
  return ChartTooltip;
}(Observable);
var Chart = /** @class */function (_super) {
  __extends$17(Chart, _super);
  function Chart(document) {
    if (document === void 0) {
      document = window.document;
    }
    var _this = _super.call(this) || this;
    _this.id = createId(_this);
    _this.background = new Rect();
    _this.legend = new Legend();
    _this.legendAutoPadding = new Padding();
    _this.captionAutoPadding = 0; // top padding only
    _this._container = undefined;
    _this._data = [];
    _this._autoSize = false;
    _this._tooltipClass = Chart.defaultTooltipClass;
    /**
     * @deprecated Please use {@link tooltip.tracking} instead.
     */
    _this.tooltipTracking = true;
    _this.padding = new Padding(20);
    _this._axes = [];
    _this._series = [];
    _this._axesChanged = false;
    _this._seriesChanged = false;
    _this.layoutCallbackId = 0;
    _this._performLayout = function () {
      _this.layoutCallbackId = 0;
      _this.background.width = _this.width;
      _this.background.height = _this.height;
      _this.performLayout();
      if (!_this.layoutPending) {
        _this.fireEvent({
          type: 'layoutDone'
        });
      }
    };
    _this.dataCallbackId = 0;
    _this._onMouseDown = _this.onMouseDown.bind(_this);
    _this._onMouseUp = _this.onMouseUp.bind(_this);
    _this._onMouseMove = _this.onMouseMove.bind(_this);
    _this._onMouseOut = _this.onMouseOut.bind(_this);
    _this._onClick = _this.onClick.bind(_this);
    var root = new Group();
    var background = _this.background;
    background.fill = 'white';
    root.appendChild(background);
    var element = _this._element = document.createElement('div');
    element.setAttribute('class', 'ag-chart-wrapper');
    var scene = new Scene(document);
    _this.scene = scene;
    scene.root = root;
    scene.container = element;
    _this.autoSize = true;
    var legend = _this.legend;
    legend.addEventListener('layoutChange', _this.onLayoutChange, _this);
    legend.item.label.addPropertyListener('formatter', _this.updateLegend, _this);
    legend.addPropertyListener('position', _this.onLegendPositionChange, _this);
    _this.tooltip = new ChartTooltip(_this);
    _this.tooltip.addPropertyListener('class', function () {
      return _this.tooltip.toggle();
    });
    if (Chart.tooltipDocuments.indexOf(document) < 0) {
      var styleElement = document.createElement('style');
      styleElement.innerHTML = defaultTooltipCss;
      // Make sure the default tooltip style goes before other styles so it can be overridden.
      document.head.insertBefore(styleElement, document.head.querySelector('style'));
      Chart.tooltipDocuments.push(document);
    }
    _this.setupDomListeners(scene.canvas.element);
    _this.addPropertyListener('title', _this.onCaptionChange);
    _this.addPropertyListener('subtitle', _this.onCaptionChange);
    _this.addEventListener('layoutChange', function () {
      return _this.layoutPending = true;
    });
    return _this;
  }
  Object.defineProperty(Chart.prototype, "container", {
    get: function () {
      return this._container;
    },
    set: function (value) {
      if (this._container !== value) {
        var parentNode = this.element.parentNode;
        if (parentNode != null) {
          parentNode.removeChild(this.element);
        }
        if (value) {
          value.appendChild(this.element);
        }
        this._container = value;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Chart.prototype, "data", {
    get: function () {
      return this._data;
    },
    set: function (data) {
      this._data = data;
      this.series.forEach(function (series) {
        return series.data = data;
      });
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Chart.prototype, "width", {
    get: function () {
      return this.scene.width;
    },
    set: function (value) {
      this.autoSize = false;
      if (this.width !== value) {
        this.scene.resize(value, this.height);
        this.fireEvent({
          type: 'layoutChange'
        });
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Chart.prototype, "height", {
    get: function () {
      return this.scene.height;
    },
    set: function (value) {
      this.autoSize = false;
      if (this.height !== value) {
        this.scene.resize(this.width, value);
        this.fireEvent({
          type: 'layoutChange'
        });
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Chart.prototype, "autoSize", {
    get: function () {
      return this._autoSize;
    },
    set: function (value) {
      if (this._autoSize !== value) {
        this._autoSize = value;
        var style = this.element.style;
        if (value) {
          var chart_1 = this; // capture `this` for IE11
          SizeMonitor.observe(this.element, function (size) {
            if (size.width !== chart_1.width || size.height !== chart_1.height) {
              chart_1.scene.resize(size.width, size.height);
              chart_1.fireEvent({
                type: 'layoutChange'
              });
            }
          });
          style.display = 'block';
          style.width = '100%';
          style.height = '100%';
        } else {
          SizeMonitor.unobserve(this.element);
          style.display = 'inline-block';
          style.width = 'auto';
          style.height = 'auto';
        }
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Chart.prototype, "tooltipClass", {
    get: function () {
      return this.tooltip.class;
    },
    /**
     * @deprecated Please use {@link tooltip.class} instead.
     */
    set: function (value) {
      this.tooltip.class = value;
    },
    enumerable: true,
    configurable: true
  });
  Chart.prototype.download = function (fileName) {
    this.scene.download(fileName);
  };
  Chart.prototype.destroy = function () {
    this.tooltip.destroy();
    SizeMonitor.unobserve(this.element);
    this.container = undefined;
    this.cleanupDomListeners(this.scene.canvas.element);
    this.scene.container = undefined;
  };
  Chart.prototype.onLayoutChange = function () {
    this.layoutPending = true;
  };
  Chart.prototype.onLegendPositionChange = function () {
    this.legendAutoPadding.clear();
    this.layoutPending = true;
  };
  Chart.prototype.onCaptionChange = function (event) {
    var value = event.value,
      oldValue = event.oldValue;
    if (oldValue) {
      oldValue.removeEventListener('change', this.onLayoutChange, this);
      this.scene.root.removeChild(oldValue.node);
    }
    if (value) {
      value.addEventListener('change', this.onLayoutChange, this);
      this.scene.root.appendChild(value.node);
    }
  };
  Object.defineProperty(Chart.prototype, "element", {
    get: function () {
      return this._element;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Chart.prototype, "axes", {
    get: function () {
      return this._axes;
    },
    set: function (values) {
      var _this = this;
      this._axes.forEach(function (axis) {
        return _this.detachAxis(axis);
      });
      // make linked axes go after the regular ones (simulates stable sort by `linkedTo` property)
      this._axes = values.filter(function (a) {
        return !a.linkedTo;
      }).concat(values.filter(function (a) {
        return a.linkedTo;
      }));
      this._axes.forEach(function (axis) {
        return _this.attachAxis(axis);
      });
      this.axesChanged = true;
    },
    enumerable: true,
    configurable: true
  });
  Chart.prototype.attachAxis = function (axis) {
    this.scene.root.insertBefore(axis.group, this.seriesRoot);
  };
  Chart.prototype.detachAxis = function (axis) {
    this.scene.root.removeChild(axis.group);
  };
  Object.defineProperty(Chart.prototype, "series", {
    get: function () {
      return this._series;
    },
    set: function (values) {
      var _this = this;
      this.removeAllSeries();
      values.forEach(function (series) {
        return _this.addSeries(series);
      });
    },
    enumerable: true,
    configurable: true
  });
  Chart.prototype.scheduleLayout = function () {
    this.layoutPending = true;
  };
  Chart.prototype.scheduleData = function () {
    // To prevent the chart from thinking the cursor is over the same node
    // after a change to data (the nodes are reused on data changes).
    this.dehighlightDatum();
    this.dataPending = true;
  };
  Chart.prototype.addSeries = function (series, before) {
    var _a = this,
      allSeries = _a.series,
      seriesRoot = _a.seriesRoot;
    var canAdd = allSeries.indexOf(series) < 0;
    if (canAdd) {
      var beforeIndex = before ? allSeries.indexOf(before) : -1;
      if (beforeIndex >= 0) {
        allSeries.splice(beforeIndex, 0, series);
        seriesRoot.insertBefore(series.group, before.group);
      } else {
        allSeries.push(series);
        seriesRoot.append(series.group);
      }
      this.initSeries(series);
      this.seriesChanged = true;
      this.axesChanged = true;
      return true;
    }
    return false;
  };
  Chart.prototype.initSeries = function (series) {
    series.chart = this;
    if (!series.data) {
      series.data = this.data;
    }
    series.addEventListener('layoutChange', this.scheduleLayout, this);
    series.addEventListener('dataChange', this.scheduleData, this);
    series.addEventListener('legendChange', this.updateLegend, this);
    series.addEventListener('nodeClick', this.onSeriesNodeClick, this);
  };
  Chart.prototype.freeSeries = function (series) {
    series.chart = undefined;
    series.removeEventListener('layoutChange', this.scheduleLayout, this);
    series.removeEventListener('dataChange', this.scheduleData, this);
    series.removeEventListener('legendChange', this.updateLegend, this);
    series.removeEventListener('nodeClick', this.onSeriesNodeClick, this);
  };
  Chart.prototype.addSeriesAfter = function (series, after) {
    var _a = this,
      allSeries = _a.series,
      seriesRoot = _a.seriesRoot;
    var canAdd = allSeries.indexOf(series) < 0;
    if (canAdd) {
      var afterIndex = after ? this.series.indexOf(after) : -1;
      if (afterIndex >= 0) {
        if (afterIndex + 1 < allSeries.length) {
          seriesRoot.insertBefore(series.group, allSeries[afterIndex + 1].group);
        } else {
          seriesRoot.append(series.group);
        }
        this.initSeries(series);
        allSeries.splice(afterIndex + 1, 0, series);
      } else {
        if (allSeries.length > 0) {
          seriesRoot.insertBefore(series.group, allSeries[0].group);
        } else {
          seriesRoot.append(series.group);
        }
        this.initSeries(series);
        allSeries.unshift(series);
      }
      this.seriesChanged = true;
      this.axesChanged = true;
    }
    return false;
  };
  Chart.prototype.removeSeries = function (series) {
    var index = this.series.indexOf(series);
    if (index >= 0) {
      this.series.splice(index, 1);
      this.freeSeries(series);
      this.seriesRoot.removeChild(series.group);
      this.seriesChanged = true;
      return true;
    }
    return false;
  };
  Chart.prototype.removeAllSeries = function () {
    var _this = this;
    this.series.forEach(function (series) {
      _this.freeSeries(series);
      _this.seriesRoot.removeChild(series.group);
    });
    this._series = []; // using `_series` instead of `series` to prevent infinite recursion
    this.seriesChanged = true;
  };
  Chart.prototype.assignSeriesToAxes = function () {
    var _this = this;
    this.axes.forEach(function (axis) {
      var axisName = axis.direction + 'Axis';
      var boundSeries = [];
      _this.series.forEach(function (series) {
        if (series[axisName] === axis) {
          boundSeries.push(series);
        }
      });
      axis.boundSeries = boundSeries;
    });
    this.seriesChanged = false;
  };
  Chart.prototype.assignAxesToSeries = function (force) {
    var _this = this;
    if (force === void 0) {
      force = false;
    }
    // This method has to run before `assignSeriesToAxes`.
    var directionToAxesMap = {};
    this.axes.forEach(function (axis) {
      var direction = axis.direction;
      var directionAxes = directionToAxesMap[direction] || (directionToAxesMap[direction] = []);
      directionAxes.push(axis);
    });
    this.series.forEach(function (series) {
      series.directions.forEach(function (direction) {
        var axisName = direction + 'Axis';
        if (!series[axisName] || force) {
          var directionAxes = directionToAxesMap[direction];
          if (directionAxes) {
            var axis = _this.findMatchingAxis(directionAxes, series.getKeys(direction));
            if (axis) {
              series[axisName] = axis;
            }
          }
        }
      });
      if (series instanceof CartesianSeries) {
        if (!series.xAxis) {
          console.warn("Could not find a matching xAxis for the " + series.id + " series.");
          return;
        }
        if (!series.yAxis) {
          console.warn("Could not find a matching yAxis for the " + series.id + " series.");
          return;
        }
      }
    });
    this.axesChanged = false;
  };
  Chart.prototype.findMatchingAxis = function (directionAxes, directionKeys) {
    for (var i = 0; i < directionAxes.length; i++) {
      var axis = directionAxes[i];
      var axisKeys = axis.keys;
      if (!axisKeys.length) {
        return axis;
      } else if (directionKeys) {
        for (var j = 0; j < directionKeys.length; j++) {
          if (axisKeys.indexOf(directionKeys[j]) >= 0) {
            return axis;
          }
        }
      }
    }
  };
  Object.defineProperty(Chart.prototype, "axesChanged", {
    get: function () {
      return this._axesChanged;
    },
    set: function (value) {
      this._axesChanged = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Chart.prototype, "seriesChanged", {
    get: function () {
      return this._seriesChanged;
    },
    set: function (value) {
      this._seriesChanged = value;
      if (value) {
        this.dataPending = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Chart.prototype, "layoutPending", {
    /**
     * Only `true` while we are waiting for the layout to start.
     * This will be `false` if the layout has already started and is ongoing.
     */
    get: function () {
      return !!this.layoutCallbackId;
    },
    set: function (value) {
      if (value) {
        if (!(this.layoutCallbackId || this.dataPending)) {
          this.layoutCallbackId = requestAnimationFrame(this._performLayout);
        }
      } else if (this.layoutCallbackId) {
        cancelAnimationFrame(this.layoutCallbackId);
        this.layoutCallbackId = 0;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Chart.prototype, "dataPending", {
    get: function () {
      return !!this.dataCallbackId;
    },
    set: function (value) {
      var _this = this;
      if (this.dataCallbackId) {
        clearTimeout(this.dataCallbackId);
        this.dataCallbackId = 0;
      }
      if (value) {
        this.dataCallbackId = window.setTimeout(function () {
          _this.dataPending = false;
          _this.processData();
        }, 0);
      }
    },
    enumerable: true,
    configurable: true
  });
  Chart.prototype.processData = function () {
    this.layoutPending = false;
    if (this.axesChanged) {
      this.assignAxesToSeries(true);
      this.assignSeriesToAxes();
    }
    if (this.seriesChanged) {
      this.assignSeriesToAxes();
    }
    this.series.filter(function (s) {
      return s.visible;
    }).forEach(function (series) {
      return series.processData();
    });
    this.updateLegend();
    this.layoutPending = true;
  };
  Chart.prototype.updateLegend = function () {
    var legendData = [];
    this.series.filter(function (s) {
      return s.showInLegend;
    }).forEach(function (series) {
      return series.listSeriesItems(legendData);
    });
    var formatter = this.legend.item.label.formatter;
    if (formatter) {
      legendData.forEach(function (datum) {
        return datum.label.text = formatter({
          id: datum.id,
          itemId: datum.itemId,
          value: datum.label.text
        });
      });
    }
    this.legend.data = legendData;
  };
  Chart.prototype.positionCaptions = function () {
    var _a = this,
      title = _a.title,
      subtitle = _a.subtitle;
    var titleVisible = false;
    var subtitleVisible = false;
    var spacing = 10;
    var paddingTop = spacing;
    if (title && title.enabled) {
      title.node.x = this.width / 2;
      title.node.y = paddingTop;
      titleVisible = true;
      var titleBBox = title.node.computeBBox(); // make sure to set node's x/y, then computeBBox
      if (titleBBox) {
        paddingTop = titleBBox.y + titleBBox.height;
      }
      if (subtitle && subtitle.enabled) {
        subtitle.node.x = this.width / 2;
        subtitle.node.y = paddingTop + spacing;
        subtitleVisible = true;
        var subtitleBBox = subtitle.node.computeBBox();
        if (subtitleBBox) {
          paddingTop = subtitleBBox.y + subtitleBBox.height;
        }
      }
    }
    if (title) {
      title.node.visible = titleVisible;
    }
    if (subtitle) {
      subtitle.node.visible = subtitleVisible;
    }
    this.captionAutoPadding = Math.floor(paddingTop);
  };
  Chart.prototype.positionLegend = function () {
    if (!this.legend.enabled || !this.legend.data.length) {
      return;
    }
    var _a = this,
      legend = _a.legend,
      captionAutoPadding = _a.captionAutoPadding,
      legendAutoPadding = _a.legendAutoPadding;
    var width = this.width;
    var height = this.height - captionAutoPadding;
    var legendGroup = legend.group;
    var legendSpacing = legend.spacing;
    var translationX = 0;
    var translationY = 0;
    var legendBBox;
    switch (legend.position) {
      case 'bottom':
        legend.performLayout(width - legendSpacing * 2, 0);
        legendBBox = legendGroup.computeBBox();
        translationX = (width - legendBBox.width) / 2 - legendBBox.x;
        translationY = captionAutoPadding + height - legendBBox.height - legendBBox.y - legendSpacing;
        legendAutoPadding.bottom = legendBBox.height;
        break;
      case 'top':
        legend.performLayout(width - legendSpacing * 2, 0);
        legendBBox = legendGroup.computeBBox();
        translationX = (width - legendBBox.width) / 2 - legendBBox.x;
        translationY = captionAutoPadding + legendSpacing - legendBBox.y;
        legendAutoPadding.top = legendBBox.height;
        break;
      case 'left':
        legend.performLayout(0, height - legendSpacing * 2);
        legendBBox = legendGroup.computeBBox();
        translationX = legendSpacing - legendBBox.x;
        translationY = captionAutoPadding + (height - legendBBox.height) / 2 - legendBBox.y;
        legendAutoPadding.left = legendBBox.width;
        break;
      default:
        // case 'right':
        legend.performLayout(0, height - legendSpacing * 2);
        legendBBox = legendGroup.computeBBox();
        translationX = width - legendBBox.width - legendBBox.x - legendSpacing;
        translationY = captionAutoPadding + (height - legendBBox.height) / 2 - legendBBox.y;
        legendAutoPadding.right = legendBBox.width;
        break;
    }
    // Round off for pixel grid alignment to work properly.
    legendGroup.translationX = Math.floor(translationX + legendGroup.translationX);
    legendGroup.translationY = Math.floor(translationY + legendGroup.translationY);
  };
  Chart.prototype.setupDomListeners = function (chartElement) {
    chartElement.addEventListener('mousedown', this._onMouseDown);
    chartElement.addEventListener('mousemove', this._onMouseMove);
    chartElement.addEventListener('mouseup', this._onMouseUp);
    chartElement.addEventListener('mouseout', this._onMouseOut);
    chartElement.addEventListener('click', this._onClick);
  };
  Chart.prototype.cleanupDomListeners = function (chartElement) {
    chartElement.removeEventListener('mousedown', this._onMouseDown);
    chartElement.removeEventListener('mousemove', this._onMouseMove);
    chartElement.removeEventListener('mouseup', this._onMouseUp);
    chartElement.removeEventListener('mouseout', this._onMouseOut);
    chartElement.removeEventListener('click', this._onClick);
  };
  Chart.prototype.getSeriesRect = function () {
    return this.seriesRect;
  };
  // x/y are local canvas coordinates in CSS pixels, not actual pixels
  Chart.prototype.pickSeriesNode = function (x, y) {
    if (!this.seriesRect || !this.seriesRect.containsPoint(x, y)) {
      return undefined;
    }
    var allSeries = this.series;
    var node = undefined;
    for (var i = allSeries.length - 1; i >= 0; i--) {
      var series = allSeries[i];
      node = series.group.pickNode(x, y);
      if (node) {
        return {
          series: series,
          node: node
        };
      }
    }
  };
  // Provided x/y are in canvas coordinates.
  Chart.prototype.pickClosestSeriesNodeDatum = function (x, y) {
    if (!this.seriesRect || !this.seriesRect.containsPoint(x, y)) {
      return undefined;
    }
    var allSeries = this.series;
    function getDistance(p1, p2) {
      return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
    }
    var minDistance = Infinity;
    var closestDatum;
    var _loop_1 = function (i) {
      var series = allSeries[i];
      if (!series.visible) {
        return "continue";
      }
      var hitPoint = series.group.transformPoint(x, y);
      series.getNodeData().forEach(function (datum) {
        if (!datum.point) {
          return;
        }
        var distance = getDistance(hitPoint, datum.point);
        if (distance < minDistance) {
          minDistance = distance;
          closestDatum = datum;
        }
      });
    };
    for (var i = allSeries.length - 1; i >= 0; i--) {
      _loop_1(i);
    }
    if (closestDatum) {
      return closestDatum;
    }
  };
  Chart.prototype.onMouseMove = function (event) {
    if (this.tooltip.enabled) {
      if (this.tooltip.delay > 0) {
        this.tooltip.toggle(false);
      }
      this.handleTooltip(event);
    }
  };
  Chart.prototype.handleTooltip = function (event) {
    var _a = this,
      lastPick = _a.lastPick,
      tooltipTracking = _a.tooltip.tracking;
    var offsetX = event.offsetX,
      offsetY = event.offsetY;
    var pick = this.pickSeriesNode(offsetX, offsetY);
    var nodeDatum;
    if (pick && pick.node instanceof Shape) {
      var node = pick.node;
      nodeDatum = node.datum;
      if (lastPick && lastPick.datum === nodeDatum) {
        lastPick.node = node;
        lastPick.event = event;
      }
      // Marker nodes will have the `point` info in their datums.
      // Highlight if not a marker node or, if not in the tracking mode, highlight markers too.
      if (!node.datum.point || !tooltipTracking) {
        if (!lastPick // cursor moved from empty space to a node
        || lastPick.node !== node) {
          // cursor moved from one node to another
          this.onSeriesDatumPick(event, node.datum, node, event);
        } else if (pick.series.tooltip.enabled) {
          // cursor moved within the same node
          this.tooltip.show(event);
        }
        // A non-marker node (takes precedence over marker nodes) was highlighted.
        // Or we are not in the tracking mode.
        // Either way, we are done at this point.
        return;
      }
    }
    var hideTooltip = false;
    // In tracking mode a tooltip is shown for the closest rendered datum.
    // This makes it easier to show tooltips when markers are small and/or plentiful
    // and also gives the ability to show tooltips even when the series were configured
    // to not render markers.
    if (tooltipTracking) {
      var closestDatum = this.pickClosestSeriesNodeDatum(offsetX, offsetY);
      if (closestDatum && closestDatum.point) {
        var _b = closestDatum.point,
          x = _b.x,
          y = _b.y;
        var canvas = this.scene.canvas;
        var point = closestDatum.series.group.inverseTransformPoint(x, y);
        var canvasRect = canvas.element.getBoundingClientRect();
        this.onSeriesDatumPick({
          pageX: Math.round(canvasRect.left + window.pageXOffset + point.x),
          pageY: Math.round(canvasRect.top + window.pageYOffset + point.y)
        }, closestDatum, nodeDatum === closestDatum && pick ? pick.node : undefined, event);
      } else {
        hideTooltip = true;
      }
    }
    if (lastPick && (hideTooltip || !tooltipTracking)) {
      // Cursor moved from a non-marker node to empty space.
      this.dehighlightDatum();
      this.tooltip.toggle(false);
      this.lastPick = undefined;
    }
  };
  Chart.prototype.onMouseDown = function (event) {};
  Chart.prototype.onMouseUp = function (event) {};
  Chart.prototype.onMouseOut = function (event) {
    this.tooltip.toggle(false);
  };
  Chart.prototype.onClick = function (event) {
    if (this.checkSeriesNodeClick()) {
      return;
    }
    if (this.checkLegendClick(event)) {
      return;
    }
    this.fireEvent({
      type: 'click',
      event: event
    });
  };
  Chart.prototype.checkSeriesNodeClick = function () {
    var lastPick = this.lastPick;
    if (lastPick && lastPick.event && lastPick.node) {
      var event_1 = lastPick.event,
        datum = lastPick.datum;
      datum.series.fireNodeClickEvent(event_1, datum);
      return true;
    }
    return false;
  };
  Chart.prototype.onSeriesNodeClick = function (event) {
    this.fireEvent(__assign$4(__assign$4({}, event), {
      type: 'seriesNodeClick'
    }));
  };
  Chart.prototype.checkLegendClick = function (event) {
    var datum = this.legend.getDatumForPoint(event.offsetX, event.offsetY);
    if (datum) {
      var id_1 = datum.id,
        itemId = datum.itemId,
        enabled = datum.enabled;
      var series = find(this.series, function (series) {
        return series.id === id_1;
      });
      if (series) {
        series.toggleSeriesItem(itemId, !enabled);
        if (enabled) {
          this.tooltip.toggle(false);
        }
        this.legend.fireEvent({
          type: 'click',
          event: event,
          itemId: itemId,
          enabled: !enabled
        });
        return true;
      }
    }
    return false;
  };
  Chart.prototype.onSeriesDatumPick = function (meta, datum, node, event) {
    if (this.lastPick) {
      this.dehighlightDatum();
    }
    this.lastPick = {
      datum: datum,
      node: node,
      event: event
    };
    this.highlightDatum(datum, node);
    var html = datum.series.tooltip.enabled && datum.series.getTooltipHtml(datum);
    if (html) {
      this.tooltip.show(meta, html);
    }
  };
  Chart.prototype.highlightDatum = function (datum, node) {
    var style = this.scene.canvas.element.style;
    this.highlightedDatum = datum;
    this.series.forEach(function (s) {
      if (node) {
        style.cursor = s.cursor;
      }
      s.onHighlightChange();
    });
  };
  Chart.prototype.dehighlightDatum = function () {
    if (this.highlightedDatum) {
      this.scene.canvas.element.style.cursor = 'default';
      this.highlightedDatum = undefined;
      this.series.forEach(function (s) {
        return s.onHighlightChange();
      });
    }
  };
  Chart.defaultTooltipClass = 'ag-chart-tooltip';
  Chart.tooltipDocuments = [];
  __decorate$E([reactive('layoutChange')], Chart.prototype, "padding", void 0);
  __decorate$E([reactive('layoutChange')], Chart.prototype, "title", void 0);
  __decorate$E([reactive('layoutChange')], Chart.prototype, "subtitle", void 0);
  return Chart;
}(Observable);
var __extends$18 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
/**
 * Acts as `Group` node but with specified bounds that form a rectangle.
 * Any parts of the child nodes outside that rectangle will not be visible.
 * Unlike the `Group` node, the `ClipRect` node cannot be transformed.
 */
var ClipRect = /** @class */function (_super) {
  __extends$18(ClipRect, _super);
  function ClipRect() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.isContainerNode = true;
    _this.path = new Path2D();
    _this._enabled = true;
    _this._dirtyPath = true;
    _this._x = 0;
    _this._y = 0;
    _this._width = 10;
    _this._height = 10;
    return _this;
  }
  ClipRect.prototype.containsPoint = function (x, y) {
    var point = this.transformPoint(x, y);
    return point.x >= this.x && point.x <= this.x + this.width && point.y >= this.y && point.y <= this.y + this.height;
  };
  Object.defineProperty(ClipRect.prototype, "enabled", {
    get: function () {
      return this._enabled;
    },
    set: function (value) {
      if (this._enabled !== value) {
        this._enabled = value;
        this.dirty = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ClipRect.prototype, "dirtyPath", {
    get: function () {
      return this._dirtyPath;
    },
    set: function (value) {
      if (this._dirtyPath !== value) {
        this._dirtyPath = value;
        if (value) {
          this.dirty = true;
        }
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ClipRect.prototype, "x", {
    get: function () {
      return this._x;
    },
    set: function (value) {
      if (this._x !== value) {
        this._x = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ClipRect.prototype, "y", {
    get: function () {
      return this._y;
    },
    set: function (value) {
      if (this._y !== value) {
        this._y = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ClipRect.prototype, "width", {
    get: function () {
      return this._width;
    },
    set: function (value) {
      if (this._width !== value) {
        this._width = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ClipRect.prototype, "height", {
    get: function () {
      return this._height;
    },
    set: function (value) {
      if (this._height !== value) {
        this._height = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  ClipRect.prototype.updatePath = function () {
    var path = this.path;
    path.clear();
    path.rect(this.x, this.y, this.width, this.height);
    this.dirtyPath = false;
  };
  ClipRect.prototype.computeBBox = function () {
    var _a = this,
      x = _a.x,
      y = _a.y,
      width = _a.width,
      height = _a.height;
    return new BBox(x, y, width, height);
  };
  ClipRect.prototype.render = function (ctx) {
    if (this.enabled) {
      if (this.dirtyPath) {
        this.updatePath();
      }
      this.scene.appendPath(this.path);
      ctx.clip();
    }
    var children = this.children;
    var n = children.length;
    for (var i = 0; i < n; i++) {
      ctx.save();
      var child = children[i];
      if (child.visible) {
        child.render(ctx);
      }
      ctx.restore();
    }
    // debug
    // this.computeBBox().render(ctx, {
    //     label: this.id,
    //     resetTransform: true,
    //     fillStyle: 'rgba(0, 0, 0, 0.5)'
    // });
  };

  ClipRect.className = 'ClipRect';
  return ClipRect;
}(Node);
var __extends$19 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var RangeHandle = /** @class */function (_super) {
  __extends$19(RangeHandle, _super);
  function RangeHandle() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this._fill = '#f2f2f2';
    _this._stroke = '#999999';
    _this._strokeWidth = 1;
    _this._lineCap = 'square';
    _this._centerX = 0;
    _this._centerY = 0;
    // Use an even number for better looking results.
    _this._width = 8;
    // Use an even number for better looking results.
    _this._gripLineGap = 2;
    // Use an even number for better looking results.
    _this._gripLineLength = 8;
    _this._height = 16;
    return _this;
  }
  Object.defineProperty(RangeHandle.prototype, "centerX", {
    get: function () {
      return this._centerX;
    },
    set: function (value) {
      if (this._centerX !== value) {
        this._centerX = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(RangeHandle.prototype, "centerY", {
    get: function () {
      return this._centerY;
    },
    set: function (value) {
      if (this._centerY !== value) {
        this._centerY = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(RangeHandle.prototype, "width", {
    get: function () {
      return this._width;
    },
    set: function (value) {
      if (this._width !== value) {
        this._width = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(RangeHandle.prototype, "gripLineGap", {
    get: function () {
      return this._gripLineGap;
    },
    set: function (value) {
      if (this._gripLineGap !== value) {
        this._gripLineGap = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(RangeHandle.prototype, "gripLineLength", {
    get: function () {
      return this._gripLineLength;
    },
    set: function (value) {
      if (this._gripLineLength !== value) {
        this._gripLineLength = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(RangeHandle.prototype, "height", {
    get: function () {
      return this._height;
    },
    set: function (value) {
      if (this._height !== value) {
        this._height = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  RangeHandle.prototype.computeBBox = function () {
    var _a = this,
      centerX = _a.centerX,
      centerY = _a.centerY,
      width = _a.width,
      height = _a.height;
    var x = centerX - width / 2;
    var y = centerY - height / 2;
    return new BBox(x, y, width, height);
  };
  RangeHandle.prototype.isPointInPath = function (x, y) {
    var point = this.transformPoint(x, y);
    var bbox = this.computeBBox();
    return bbox.containsPoint(point.x, point.y);
  };
  RangeHandle.prototype.updatePath = function () {
    var _a = this,
      path = _a.path,
      centerX = _a.centerX,
      centerY = _a.centerY,
      width = _a.width,
      height = _a.height;
    var _b = this,
      a = _b.alignment,
      al = _b.align;
    path.clear();
    var x = centerX - width / 2;
    var y = centerY - height / 2;
    var ax = al(a, x);
    var ay = al(a, y);
    var axw = ax + al(a, x, width);
    var ayh = ay + al(a, y, height);
    // Handle.
    path.moveTo(ax, ay);
    path.lineTo(axw, ay);
    path.lineTo(axw, ayh);
    path.lineTo(ax, ayh);
    path.lineTo(ax, ay);
    // Grip lines.
    var dx = this.gripLineGap / 2;
    var dy = this.gripLineLength / 2;
    path.moveTo(al(a, centerX - dx), al(a, centerY - dy));
    path.lineTo(al(a, centerX - dx), al(a, centerY + dy));
    path.moveTo(al(a, centerX + dx), al(a, centerY - dy));
    path.lineTo(al(a, centerX + dx), al(a, centerY + dy));
  };
  RangeHandle.className = 'RangeHandle';
  return RangeHandle;
}(Path);
var __extends$1a =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var RangeMask = /** @class */function (_super) {
  __extends$1a(RangeMask, _super);
  function RangeMask() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this._stroke = '#999999';
    _this._strokeWidth = 1;
    _this._fill = '#999999';
    _this._fillOpacity = 0.2;
    _this._lineCap = 'square';
    _this._x = 0;
    _this._y = 0;
    _this._width = 200;
    _this._height = 30;
    _this.minRange = 0.05;
    _this._min = 0;
    _this._max = 1;
    return _this;
  }
  Object.defineProperty(RangeMask.prototype, "x", {
    get: function () {
      return this._x;
    },
    set: function (value) {
      if (this._x !== value) {
        this._x = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(RangeMask.prototype, "y", {
    get: function () {
      return this._y;
    },
    set: function (value) {
      if (this._y !== value) {
        this._y = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(RangeMask.prototype, "width", {
    get: function () {
      return this._width;
    },
    set: function (value) {
      if (this._width !== value) {
        this._width = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(RangeMask.prototype, "height", {
    get: function () {
      return this._height;
    },
    set: function (value) {
      if (this._height !== value) {
        this._height = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(RangeMask.prototype, "min", {
    get: function () {
      return this._min;
    },
    set: function (value) {
      value = Math.min(Math.max(value, 0), this.max - this.minRange);
      if (isNaN(value)) {
        return;
      }
      if (this._min !== value) {
        this._min = value;
        this.dirtyPath = true;
        this.onRangeChange && this.onRangeChange(value, this.max);
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(RangeMask.prototype, "max", {
    get: function () {
      return this._max;
    },
    set: function (value) {
      value = Math.max(Math.min(value, 1), this.min + this.minRange);
      if (isNaN(value)) {
        return;
      }
      if (this._max !== value) {
        this._max = value;
        this.dirtyPath = true;
        this.onRangeChange && this.onRangeChange(this.min, value);
      }
    },
    enumerable: true,
    configurable: true
  });
  RangeMask.prototype.computeBBox = function () {
    var _a = this,
      x = _a.x,
      y = _a.y,
      width = _a.width,
      height = _a.height;
    return new BBox(x, y, width, height);
  };
  RangeMask.prototype.computeVisibleRangeBBox = function () {
    var _a = this,
      x = _a.x,
      y = _a.y,
      width = _a.width,
      height = _a.height,
      min = _a.min,
      max = _a.max;
    var minX = x + width * min;
    var maxX = x + width * max;
    return new BBox(minX, y, maxX - minX, height);
  };
  RangeMask.prototype.updatePath = function () {
    var _a = this,
      path = _a.path,
      x = _a.x,
      y = _a.y,
      width = _a.width,
      height = _a.height,
      min = _a.min,
      max = _a.max;
    var _b = this,
      a = _b.alignment,
      al = _b.align;
    path.clear();
    var ax = al(a, x);
    var ay = al(a, y);
    var axw = ax + al(a, x, width);
    var ayh = ay + al(a, y, height);
    // Whole range.
    path.moveTo(ax, ay);
    path.lineTo(axw, ay);
    path.lineTo(axw, ayh);
    path.lineTo(ax, ayh);
    path.lineTo(ax, ay);
    var minX = al(a, x + width * min);
    var maxX = al(a, x + width * max);
    // Visible range.
    path.moveTo(minX, ay);
    path.lineTo(minX, ayh);
    path.lineTo(maxX, ayh);
    path.lineTo(maxX, ay);
    path.lineTo(minX, ay);
  };
  RangeMask.className = 'RangeMask';
  return RangeMask;
}(Path);
var __extends$1b =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var RangeSelector = /** @class */function (_super) {
  __extends$1b(RangeSelector, _super);
  function RangeSelector() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.isContainerNode = true;
    _this.minHandle = new RangeHandle();
    _this.maxHandle = new RangeHandle();
    _this.mask = function () {
      var _a = RangeSelector.defaults,
        x = _a.x,
        y = _a.y,
        width = _a.width,
        height = _a.height,
        min = _a.min,
        max = _a.max;
      var mask = new RangeMask();
      mask.x = x;
      mask.y = y;
      mask.width = width;
      mask.height = height;
      mask.min = min;
      mask.max = max;
      var _b = _this,
        minHandle = _b.minHandle,
        maxHandle = _b.maxHandle;
      minHandle.centerX = x;
      maxHandle.centerX = x + width;
      minHandle.centerY = maxHandle.centerY = y + height / 2;
      _this.append([mask, minHandle, maxHandle]);
      mask.onRangeChange = function (min, max) {
        _this.updateHandles();
        _this.onRangeChange && _this.onRangeChange(min, max);
      };
      return mask;
    }();
    _this._x = RangeSelector.defaults.x;
    _this._y = RangeSelector.defaults.y;
    _this._width = RangeSelector.defaults.width;
    _this._height = RangeSelector.defaults.height;
    _this._min = RangeSelector.defaults.min;
    _this._max = RangeSelector.defaults.max;
    return _this;
  }
  Object.defineProperty(RangeSelector.prototype, "x", {
    get: function () {
      return this.mask.x;
    },
    set: function (value) {
      this.mask.x = value;
      this.updateHandles();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(RangeSelector.prototype, "y", {
    get: function () {
      return this.mask.y;
    },
    set: function (value) {
      this.mask.y = value;
      this.updateHandles();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(RangeSelector.prototype, "width", {
    get: function () {
      return this.mask.width;
    },
    set: function (value) {
      this.mask.width = value;
      this.updateHandles();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(RangeSelector.prototype, "height", {
    get: function () {
      return this.mask.height;
    },
    set: function (value) {
      this.mask.height = value;
      this.updateHandles();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(RangeSelector.prototype, "min", {
    get: function () {
      return this.mask.min;
    },
    set: function (value) {
      this.mask.min = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(RangeSelector.prototype, "max", {
    get: function () {
      return this.mask.max;
    },
    set: function (value) {
      this.mask.max = value;
    },
    enumerable: true,
    configurable: true
  });
  RangeSelector.prototype.updateHandles = function () {
    var _a = this,
      minHandle = _a.minHandle,
      maxHandle = _a.maxHandle,
      x = _a.x,
      y = _a.y,
      width = _a.width,
      height = _a.height,
      mask = _a.mask;
    minHandle.centerX = x + width * mask.min;
    maxHandle.centerX = x + width * mask.max;
    minHandle.centerY = maxHandle.centerY = y + height / 2;
  };
  RangeSelector.prototype.computeBBox = function () {
    return this.mask.computeBBox();
  };
  RangeSelector.prototype.computeVisibleRangeBBox = function () {
    return this.mask.computeVisibleRangeBBox();
  };
  RangeSelector.prototype.render = function (ctx) {
    if (this.dirtyTransform) {
      this.computeTransformMatrix();
    }
    this.matrix.toContext(ctx);
    var _a = this,
      mask = _a.mask,
      minHandle = _a.minHandle,
      maxHandle = _a.maxHandle;
    [mask, minHandle, maxHandle].forEach(function (child) {
      ctx.save();
      if (child.visible) {
        child.render(ctx);
      }
      ctx.restore();
    });
  };
  RangeSelector.className = 'Range';
  RangeSelector.defaults = {
    x: 0,
    y: 0,
    width: 200,
    height: 30,
    min: 0,
    max: 1
  };
  return RangeSelector;
}(Group);
var NavigatorMask = /** @class */function () {
  function NavigatorMask(rangeMask) {
    this.rm = rangeMask;
  }
  Object.defineProperty(NavigatorMask.prototype, "fill", {
    get: function () {
      return this.rm.fill;
    },
    set: function (value) {
      this.rm.fill = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(NavigatorMask.prototype, "stroke", {
    get: function () {
      return this.rm.stroke;
    },
    set: function (value) {
      this.rm.stroke = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(NavigatorMask.prototype, "strokeWidth", {
    get: function () {
      return this.rm.strokeWidth;
    },
    set: function (value) {
      this.rm.strokeWidth = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(NavigatorMask.prototype, "fillOpacity", {
    get: function () {
      return this.rm.fillOpacity;
    },
    set: function (value) {
      this.rm.fillOpacity = value;
    },
    enumerable: true,
    configurable: true
  });
  return NavigatorMask;
}();
var NavigatorHandle = /** @class */function () {
  function NavigatorHandle(rangeHandle) {
    this.rh = rangeHandle;
  }
  Object.defineProperty(NavigatorHandle.prototype, "fill", {
    get: function () {
      return this.rh.fill;
    },
    set: function (value) {
      this.rh.fill = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(NavigatorHandle.prototype, "stroke", {
    get: function () {
      return this.rh.stroke;
    },
    set: function (value) {
      this.rh.stroke = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(NavigatorHandle.prototype, "strokeWidth", {
    get: function () {
      return this.rh.strokeWidth;
    },
    set: function (value) {
      this.rh.strokeWidth = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(NavigatorHandle.prototype, "width", {
    get: function () {
      return this.rh.width;
    },
    set: function (value) {
      this.rh.width = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(NavigatorHandle.prototype, "height", {
    get: function () {
      return this.rh.height;
    },
    set: function (value) {
      this.rh.height = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(NavigatorHandle.prototype, "gripLineGap", {
    get: function () {
      return this.rh.gripLineGap;
    },
    set: function (value) {
      this.rh.gripLineGap = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(NavigatorHandle.prototype, "gripLineLength", {
    get: function () {
      return this.rh.gripLineLength;
    },
    set: function (value) {
      this.rh.gripLineLength = value;
    },
    enumerable: true,
    configurable: true
  });
  return NavigatorHandle;
}();
var Navigator = /** @class */function () {
  function Navigator(chart) {
    var _this = this;
    this.rs = new RangeSelector();
    this.mask = new NavigatorMask(this.rs.mask);
    this.minHandle = new NavigatorHandle(this.rs.minHandle);
    this.maxHandle = new NavigatorHandle(this.rs.maxHandle);
    this.minHandleDragging = false;
    this.maxHandleDragging = false;
    this.panHandleOffset = NaN;
    this._margin = 10;
    this.chart = chart;
    chart.scene.root.append(this.rs);
    this.rs.onRangeChange = function (min, max) {
      return _this.updateAxes(min, max);
    };
  }
  Object.defineProperty(Navigator.prototype, "enabled", {
    get: function () {
      return this.rs.visible;
    },
    set: function (value) {
      this.rs.visible = value;
      this.chart.layoutPending = true;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Navigator.prototype, "x", {
    get: function () {
      return this.rs.x;
    },
    set: function (value) {
      this.rs.x = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Navigator.prototype, "y", {
    get: function () {
      return this.rs.y;
    },
    set: function (value) {
      this.rs.y = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Navigator.prototype, "width", {
    get: function () {
      return this.rs.width;
    },
    set: function (value) {
      this.rs.width = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Navigator.prototype, "height", {
    get: function () {
      return this.rs.height;
    },
    set: function (value) {
      this.rs.height = value;
      this.chart.layoutPending = true;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Navigator.prototype, "margin", {
    get: function () {
      return this._margin;
    },
    set: function (value) {
      this._margin = value;
      this.chart.layoutPending = true;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Navigator.prototype, "min", {
    get: function () {
      return this.rs.min;
    },
    set: function (value) {
      this.rs.min = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Navigator.prototype, "max", {
    get: function () {
      return this.rs.max;
    },
    set: function (value) {
      this.rs.max = value;
    },
    enumerable: true,
    configurable: true
  });
  Navigator.prototype.updateAxes = function (min, max) {
    var chart = this.chart;
    var clipSeries = false;
    chart.axes.forEach(function (axis) {
      if (axis.direction === ChartAxisDirection.X) {
        if (!clipSeries && (min > 0 || max < 1)) {
          clipSeries = true;
        }
        axis.visibleRange = [min, max];
        axis.update();
      }
    });
    chart.seriesRoot.enabled = clipSeries;
    chart.series.forEach(function (series) {
      return series.update();
    });
  };
  Navigator.prototype.onDragStart = function (offset) {
    if (!this.enabled) {
      return;
    }
    var offsetX = offset.offsetX,
      offsetY = offset.offsetY;
    var rs = this.rs;
    var minHandle = rs.minHandle,
      maxHandle = rs.maxHandle,
      x = rs.x,
      width = rs.width,
      min = rs.min;
    var visibleRange = rs.computeVisibleRangeBBox();
    if (!(this.minHandleDragging || this.maxHandleDragging)) {
      if (minHandle.containsPoint(offsetX, offsetY)) {
        this.minHandleDragging = true;
      } else if (maxHandle.containsPoint(offsetX, offsetY)) {
        this.maxHandleDragging = true;
      } else if (visibleRange.containsPoint(offsetX, offsetY)) {
        this.panHandleOffset = (offsetX - x) / width - min;
      }
    }
  };
  Navigator.prototype.onDrag = function (offset) {
    if (!this.enabled) {
      return;
    }
    var _a = this,
      rs = _a.rs,
      panHandleOffset = _a.panHandleOffset;
    var x = rs.x,
      y = rs.y,
      width = rs.width,
      height = rs.height,
      minHandle = rs.minHandle,
      maxHandle = rs.maxHandle;
    var style = this.chart.element.style;
    var offsetX = offset.offsetX,
      offsetY = offset.offsetY;
    var minX = x + width * rs.min;
    var maxX = x + width * rs.max;
    var visibleRange = new BBox(minX, y, maxX - minX, height);
    function getRatio() {
      return Math.min(Math.max((offsetX - x) / width, 0), 1);
    }
    if (minHandle.containsPoint(offsetX, offsetY)) {
      style.cursor = 'ew-resize';
    } else if (maxHandle.containsPoint(offsetX, offsetY)) {
      style.cursor = 'ew-resize';
    } else if (visibleRange.containsPoint(offsetX, offsetY)) {
      style.cursor = 'grab';
    } else {
      style.cursor = 'default';
    }
    if (this.minHandleDragging) {
      rs.min = getRatio();
    } else if (this.maxHandleDragging) {
      rs.max = getRatio();
    } else if (!isNaN(panHandleOffset)) {
      var span = rs.max - rs.min;
      var min = Math.min(getRatio() - panHandleOffset, 1 - span);
      if (min <= rs.min) {
        // pan left
        rs.min = min;
        rs.max = rs.min + span;
      } else {
        // pan right
        rs.max = min + span;
        rs.min = rs.max - span;
      }
    }
  };
  Navigator.prototype.onDragStop = function () {
    this.stopHandleDragging();
  };
  Navigator.prototype.stopHandleDragging = function () {
    this.minHandleDragging = this.maxHandleDragging = false;
    this.panHandleOffset = NaN;
  };
  return Navigator;
}();
var __extends$1c =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var CartesianChart = /** @class */function (_super) {
  __extends$1c(CartesianChart, _super);
  function CartesianChart(document) {
    if (document === void 0) {
      document = window.document;
    }
    var _this = _super.call(this, document) || this;
    _this._seriesRoot = new ClipRect();
    _this.navigator = new Navigator(_this);
    // Prevent the scene from rendering chart components in an invalid state
    // (before first layout is performed).
    _this.scene.root.visible = false;
    var root = _this.scene.root;
    root.append(_this.seriesRoot);
    root.append(_this.legend.group);
    _this.navigator.enabled = false;
    return _this;
  }
  Object.defineProperty(CartesianChart.prototype, "seriesRoot", {
    get: function () {
      return this._seriesRoot;
    },
    enumerable: true,
    configurable: true
  });
  CartesianChart.prototype.performLayout = function () {
    if (this.dataPending) {
      return;
    }
    this.scene.root.visible = true;
    var _a = this,
      width = _a.width,
      height = _a.height,
      axes = _a.axes,
      legend = _a.legend,
      navigator = _a.navigator;
    var shrinkRect = new BBox(0, 0, width, height);
    this.positionCaptions();
    this.positionLegend();
    if (legend.enabled && legend.data.length) {
      var legendAutoPadding = this.legendAutoPadding;
      var legendPadding = this.legend.spacing;
      shrinkRect.x += legendAutoPadding.left;
      shrinkRect.y += legendAutoPadding.top;
      shrinkRect.width -= legendAutoPadding.left + legendAutoPadding.right;
      shrinkRect.height -= legendAutoPadding.top + legendAutoPadding.bottom;
      switch (this.legend.position) {
        case 'right':
          shrinkRect.width -= legendPadding;
          break;
        case 'bottom':
          shrinkRect.height -= legendPadding;
          break;
        case 'left':
          shrinkRect.x += legendPadding;
          shrinkRect.width -= legendPadding;
          break;
        case 'top':
          shrinkRect.y += legendPadding;
          shrinkRect.height -= legendPadding;
          break;
      }
    }
    var _b = this,
      captionAutoPadding = _b.captionAutoPadding,
      padding = _b.padding;
    this.updateAxes();
    shrinkRect.x += padding.left;
    shrinkRect.width -= padding.left + padding.right;
    shrinkRect.y += padding.top + captionAutoPadding;
    shrinkRect.height -= padding.top + captionAutoPadding + padding.bottom;
    if (navigator.enabled) {
      shrinkRect.height -= navigator.height + navigator.margin;
    }
    var bottomAxesHeight = 0;
    axes.forEach(function (axis) {
      axis.group.visible = true;
      var axisThickness = Math.floor(axis.thickness || axis.computeBBox().width);
      switch (axis.position) {
        case ChartAxisPosition.Top:
          shrinkRect.y += axisThickness;
          shrinkRect.height -= axisThickness;
          axis.translation.y = Math.floor(shrinkRect.y + 1);
          axis.label.mirrored = true;
          break;
        case ChartAxisPosition.Right:
          shrinkRect.width -= axisThickness;
          axis.translation.x = Math.floor(shrinkRect.x + shrinkRect.width);
          axis.label.mirrored = true;
          break;
        case ChartAxisPosition.Bottom:
          shrinkRect.height -= axisThickness;
          bottomAxesHeight += axisThickness;
          axis.translation.y = Math.floor(shrinkRect.y + shrinkRect.height + 1);
          break;
        case ChartAxisPosition.Left:
          shrinkRect.x += axisThickness;
          shrinkRect.width -= axisThickness;
          axis.translation.x = Math.floor(shrinkRect.x);
          break;
      }
    });
    axes.forEach(function (axis) {
      switch (axis.position) {
        case ChartAxisPosition.Top:
        case ChartAxisPosition.Bottom:
          axis.translation.x = Math.floor(shrinkRect.x);
          axis.range = [0, shrinkRect.width];
          axis.gridLength = shrinkRect.height;
          break;
        case ChartAxisPosition.Left:
        case ChartAxisPosition.Right:
          axis.translation.y = Math.floor(shrinkRect.y);
          if (axis instanceof CategoryAxis || axis instanceof GroupedCategoryAxis) {
            axis.range = [0, shrinkRect.height];
          } else {
            axis.range = [shrinkRect.height, 0];
          }
          axis.gridLength = shrinkRect.width;
          break;
      }
    });
    this.seriesRect = shrinkRect;
    this.series.forEach(function (series) {
      series.group.translationX = Math.floor(shrinkRect.x);
      series.group.translationY = Math.floor(shrinkRect.y);
      series.update(); // this has to happen after the `updateAxes` call
    });

    var seriesRoot = this.seriesRoot;
    seriesRoot.x = shrinkRect.x;
    seriesRoot.y = shrinkRect.y;
    seriesRoot.width = shrinkRect.width;
    seriesRoot.height = shrinkRect.height;
    if (navigator.enabled) {
      navigator.x = shrinkRect.x;
      navigator.y = shrinkRect.y + shrinkRect.height + bottomAxesHeight + navigator.margin;
      navigator.width = shrinkRect.width;
    }
    this.axes.forEach(function (axis) {
      return axis.update();
    });
  };
  CartesianChart.prototype.initSeries = function (series) {
    _super.prototype.initSeries.call(this, series);
    series.addEventListener('dataProcessed', this.updateAxes, this);
  };
  CartesianChart.prototype.freeSeries = function (series) {
    _super.prototype.freeSeries.call(this, series);
    series.removeEventListener('dataProcessed', this.updateAxes, this);
  };
  CartesianChart.prototype.setupDomListeners = function (chartElement) {
    _super.prototype.setupDomListeners.call(this, chartElement);
    this._onTouchStart = this.onTouchStart.bind(this);
    this._onTouchMove = this.onTouchMove.bind(this);
    this._onTouchEnd = this.onTouchEnd.bind(this);
    this._onTouchCancel = this.onTouchCancel.bind(this);
    chartElement.addEventListener('touchstart', this._onTouchStart);
    chartElement.addEventListener('touchmove', this._onTouchMove);
    chartElement.addEventListener('touchend', this._onTouchEnd);
    chartElement.addEventListener('touchcancel', this._onTouchCancel);
  };
  CartesianChart.prototype.cleanupDomListeners = function (chartElement) {
    _super.prototype.cleanupDomListeners.call(this, chartElement);
    chartElement.removeEventListener('touchstart', this._onTouchStart);
    chartElement.removeEventListener('touchmove', this._onTouchMove);
    chartElement.removeEventListener('touchend', this._onTouchEnd);
    chartElement.removeEventListener('touchcancel', this._onTouchCancel);
  };
  CartesianChart.prototype.getTouchOffset = function (event) {
    var rect = this.scene.canvas.element.getBoundingClientRect();
    var touch = event.touches[0];
    return touch ? {
      offsetX: touch.clientX - rect.left,
      offsetY: touch.clientY - rect.top
    } : undefined;
  };
  CartesianChart.prototype.onTouchStart = function (event) {
    var offset = this.getTouchOffset(event);
    if (offset) {
      this.navigator.onDragStart(offset);
    }
  };
  CartesianChart.prototype.onTouchMove = function (event) {
    var offset = this.getTouchOffset(event);
    if (offset) {
      this.navigator.onDrag(offset);
    }
  };
  CartesianChart.prototype.onTouchEnd = function (event) {
    this.navigator.onDragStop();
  };
  CartesianChart.prototype.onTouchCancel = function (event) {
    this.navigator.onDragStop();
  };
  CartesianChart.prototype.onMouseDown = function (event) {
    _super.prototype.onMouseDown.call(this, event);
    this.navigator.onDragStart(event);
  };
  CartesianChart.prototype.onMouseMove = function (event) {
    _super.prototype.onMouseMove.call(this, event);
    this.navigator.onDrag(event);
  };
  CartesianChart.prototype.onMouseUp = function (event) {
    _super.prototype.onMouseUp.call(this, event);
    this.navigator.onDragStop();
  };
  CartesianChart.prototype.onMouseOut = function (event) {
    _super.prototype.onMouseOut.call(this, event);
    this.navigator.onDragStop();
  };
  CartesianChart.prototype.updateAxes = function () {
    var navigator = this.navigator;
    var clipSeries = false;
    this.axes.forEach(function (axis) {
      var _a;
      var direction = axis.direction,
        boundSeries = axis.boundSeries;
      if (axis.linkedTo) {
        axis.domain = axis.linkedTo.domain;
      } else {
        var domains_1 = [];
        boundSeries.filter(function (s) {
          return s.visible;
        }).forEach(function (series) {
          domains_1.push(series.getDomain(direction));
        });
        var domain = (_a = new Array()).concat.apply(_a, domains_1);
        axis.domain = numericExtent(domain) || domain; // if numeric extent can't be found, it's categories
      }

      if (axis.direction === ChartAxisDirection.X) {
        axis.visibleRange = [navigator.min, navigator.max];
      }
      if (!clipSeries && (axis.visibleRange[0] > 0 || axis.visibleRange[1] < 1)) {
        clipSeries = true;
      }
      axis.update();
    });
    this.seriesRoot.enabled = clipSeries;
  };
  CartesianChart.className = 'CartesianChart';
  CartesianChart.type = 'cartesian';
  return CartesianChart;
}(Chart);
var __extends$1d =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var HierarchyChart = /** @class */function (_super) {
  __extends$1d(HierarchyChart, _super);
  function HierarchyChart(document) {
    if (document === void 0) {
      document = window.document;
    }
    var _this = _super.call(this, document) || this;
    _this._data = {};
    _this._seriesRoot = new ClipRect();
    // Prevent the scene from rendering chart components in an invalid state
    // (before first layout is performed).
    _this.scene.root.visible = false;
    var root = _this.scene.root;
    root.append(_this.seriesRoot);
    root.append(_this.legend.group);
    return _this;
  }
  Object.defineProperty(HierarchyChart.prototype, "seriesRoot", {
    get: function () {
      return this._seriesRoot;
    },
    enumerable: true,
    configurable: true
  });
  HierarchyChart.prototype.performLayout = function () {
    if (this.dataPending) {
      return;
    }
    this.scene.root.visible = true;
    var _a = this,
      width = _a.width,
      height = _a.height,
      legend = _a.legend;
    var shrinkRect = new BBox(0, 0, width, height);
    this.positionCaptions();
    this.positionLegend();
    if (legend.enabled && legend.data.length) {
      var legendAutoPadding = this.legendAutoPadding;
      var legendPadding = this.legend.spacing;
      shrinkRect.x += legendAutoPadding.left;
      shrinkRect.y += legendAutoPadding.top;
      shrinkRect.width -= legendAutoPadding.left + legendAutoPadding.right;
      shrinkRect.height -= legendAutoPadding.top + legendAutoPadding.bottom;
      switch (this.legend.position) {
        case 'right':
          shrinkRect.width -= legendPadding;
          break;
        case 'bottom':
          shrinkRect.height -= legendPadding;
          break;
        case 'left':
          shrinkRect.x += legendPadding;
          shrinkRect.width -= legendPadding;
          break;
        case 'top':
          shrinkRect.y += legendPadding;
          shrinkRect.height -= legendPadding;
          break;
      }
    }
    var _b = this,
      captionAutoPadding = _b.captionAutoPadding,
      padding = _b.padding;
    shrinkRect.x += padding.left;
    shrinkRect.width -= padding.left + padding.right;
    shrinkRect.y += padding.top + captionAutoPadding;
    shrinkRect.height -= padding.top + captionAutoPadding + padding.bottom;
    this.seriesRect = shrinkRect;
    this.series.forEach(function (series) {
      series.group.translationX = Math.floor(shrinkRect.x);
      series.group.translationY = Math.floor(shrinkRect.y);
      series.update(); // this has to happen after the `updateAxes` call
    });

    var seriesRoot = this.seriesRoot;
    seriesRoot.x = shrinkRect.x;
    seriesRoot.y = shrinkRect.y;
    seriesRoot.width = shrinkRect.width;
    seriesRoot.height = shrinkRect.height;
  };
  HierarchyChart.className = 'HierarchyChart';
  HierarchyChart.type = 'hierarchy';
  return HierarchyChart;
}(Chart);
var __extends$1e =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var GroupedCategoryChart = /** @class */function (_super) {
  __extends$1e(GroupedCategoryChart, _super);
  function GroupedCategoryChart() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  GroupedCategoryChart.prototype.updateAxes = function () {
    this.axes.forEach(function (axis) {
      var _a;
      var direction = axis.direction,
        boundSeries = axis.boundSeries;
      var domains = [];
      var isNumericX = undefined;
      boundSeries.filter(function (s) {
        return s.visible;
      }).forEach(function (series) {
        if (direction === ChartAxisDirection.X) {
          if (isNumericX === undefined) {
            // always add first X domain
            var domain_1 = series.getDomain(direction);
            domains.push(domain_1);
            isNumericX = typeof domain_1[0] === 'number';
          } else if (isNumericX) {
            // only add further X domains if the axis is numeric
            domains.push(series.getDomain(direction));
          }
        } else {
          domains.push(series.getDomain(direction));
        }
      });
      var domain = (_a = new Array()).concat.apply(_a, domains);
      axis.domain = numericExtent(domain) || domain;
      axis.update();
    });
  };
  GroupedCategoryChart.className = 'GroupedCategoryChart';
  GroupedCategoryChart.type = 'groupedCategory';
  return GroupedCategoryChart;
}(CartesianChart);
var __extends$1f =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PolarSeries = /** @class */function (_super) {
  __extends$1f(PolarSeries, _super);
  function PolarSeries() {
    var _a;
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.directionKeys = (_a = {}, _a[ChartAxisDirection.X] = ['angleKey'], _a[ChartAxisDirection.Y] = ['radiusKey'], _a);
    /**
     * The center of the polar series (for example, the center of a pie).
     * If the polar chart has multiple series, all of them will have their
     * center set to the same value as a result of the polar chart layout.
     * The center coordinates are not supposed to be set by the user.
     */
    _this.centerX = 0;
    _this.centerY = 0;
    /**
     * The maximum radius the series can use.
     * This value is set automatically as a result of the polar chart layout
     * and is not supposed to be set by the user.
     */
    _this.radius = 0;
    return _this;
  }
  return PolarSeries;
}(Series);
var PolarSeriesMarker = /** @class */function (_super) {
  __extends$1f(PolarSeriesMarker, _super);
  function PolarSeriesMarker() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return PolarSeriesMarker;
}(SeriesMarker);
var __extends$1g =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$F =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PolarChart = /** @class */function (_super) {
  __extends$1g(PolarChart, _super);
  function PolarChart(document) {
    if (document === void 0) {
      document = window.document;
    }
    var _this = _super.call(this, document) || this;
    _this.padding = new Padding(40);
    _this.scene.root.append(_this.legend.group);
    return _this;
  }
  Object.defineProperty(PolarChart.prototype, "seriesRoot", {
    get: function () {
      return this.scene.root;
    },
    enumerable: true,
    configurable: true
  });
  PolarChart.prototype.performLayout = function () {
    var shrinkRect = new BBox(0, 0, this.width, this.height);
    this.positionCaptions();
    this.positionLegend();
    var captionAutoPadding = this.captionAutoPadding;
    shrinkRect.y += captionAutoPadding;
    shrinkRect.height -= captionAutoPadding;
    if (this.legend.enabled && this.legend.data.length) {
      var legendAutoPadding = this.legendAutoPadding;
      shrinkRect.x += legendAutoPadding.left;
      shrinkRect.y += legendAutoPadding.top;
      shrinkRect.width -= legendAutoPadding.left + legendAutoPadding.right;
      shrinkRect.height -= legendAutoPadding.top + legendAutoPadding.bottom;
      var legendPadding = this.legend.spacing;
      switch (this.legend.position) {
        case 'right':
          shrinkRect.width -= legendPadding;
          break;
        case 'bottom':
          shrinkRect.height -= legendPadding;
          break;
        case 'left':
          shrinkRect.x += legendPadding;
          shrinkRect.width -= legendPadding;
          break;
        case 'top':
          shrinkRect.y += legendPadding;
          shrinkRect.height -= legendPadding;
          break;
      }
    }
    var padding = this.padding;
    shrinkRect.x += padding.left;
    shrinkRect.y += padding.top;
    shrinkRect.width -= padding.left + padding.right;
    shrinkRect.height -= padding.top + padding.bottom;
    this.seriesRect = shrinkRect;
    var centerX = shrinkRect.x + shrinkRect.width / 2;
    var centerY = shrinkRect.y + shrinkRect.height / 2;
    var radius = Math.min(shrinkRect.width, shrinkRect.height) / 2;
    this.series.forEach(function (series) {
      if (series instanceof PolarSeries) {
        series.centerX = centerX;
        series.centerY = centerY;
        series.radius = radius;
        series.update();
      }
    });
  };
  PolarChart.className = 'PolarChart';
  PolarChart.type = 'polar';
  __decorate$F([reactive('layoutChange')], PolarChart.prototype, "padding", void 0);
  return PolarChart;
}(Chart);
function equal(a, b) {
  if (a === b) return true;
  if (a && b && typeof a == 'object' && typeof b == 'object') {
    if (a.constructor !== b.constructor) return false;
    var length_1,
      i = void 0;
    if (Array.isArray(a)) {
      length_1 = a.length;
      if (length_1 != b.length) return false;
      for (i = length_1; i-- !== 0;) if (!equal(a[i], b[i])) return false;
      return true;
    }
    // if ((a instanceof Map) && (b instanceof Map)) {
    //     if (a.size !== b.size) return false;
    //     for (i of a.entries())
    //         if (!b.has(i[0])) return false;
    //     for (i of a.entries())
    //         if (!equal(i[1], b.get(i[0]))) return false;
    //     return true;
    // }
    //
    // if ((a instanceof Set) && (b instanceof Set)) {
    //     if (a.size !== b.size) return false;
    //     for (i of a.entries())
    //         if (!b.has(i[0])) return false;
    //     return true;
    // }
    //
    // if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
    //     length = a.length;
    //     if (length != b.length) return false;
    //     for (i = length; i-- !== 0;)
    //         if (a[i] !== b[i]) return false;
    //     return true;
    // }
    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
    var keys = Object.keys(a);
    length_1 = keys.length;
    if (length_1 !== Object.keys(b).length) return false;
    for (i = length_1; i-- !== 0;) if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
    for (i = length_1; i-- !== 0;) {
      var key = keys[i];
      if (!equal(a[key], b[key])) return false;
    }
    return true;
  }
  // true if both NaN, false otherwise
  return a !== a && b !== b;
}
var interpolatePattern = /(#\{(.*?)\})/g;
function interpolate(input, values, formats) {
  return input.replace(interpolatePattern, function () {
    var name = arguments[2];
    var _a = name.split(':'),
      valueName = _a[0],
      formatName = _a[1];
    var value = values[valueName];
    if (typeof value === 'number') {
      var format = formatName && formats && formats[formatName];
      if (format) {
        var _b = format,
          locales = _b.locales,
          options = _b.options;
        return value.toLocaleString(locales, options);
      }
      return String(value);
    }
    if (value instanceof Date) {
      var format = formatName && formats && formats[formatName];
      if (typeof format === 'string') {
        var formatter = locale.format(format);
        return formatter(value);
      }
      return value.toDateString();
    }
    if (typeof value === 'string' || value && value.toString) {
      return String(value);
    }
    return '';
  });
}
var __extends$1h =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$G =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AreaSeriesTooltip = /** @class */function (_super) {
  __extends$1h(AreaSeriesTooltip, _super);
  function AreaSeriesTooltip() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  __decorate$G([reactive('change')], AreaSeriesTooltip.prototype, "renderer", void 0);
  __decorate$G([reactive('change')], AreaSeriesTooltip.prototype, "format", void 0);
  return AreaSeriesTooltip;
}(SeriesTooltip);
var AreaSeries = /** @class */function (_super) {
  __extends$1h(AreaSeries, _super);
  function AreaSeries() {
    var _this = _super.call(this) || this;
    _this.tooltip = new AreaSeriesTooltip();
    _this.areaGroup = _this.group.appendChild(new Group());
    _this.strokeGroup = _this.group.appendChild(new Group());
    _this.markerGroup = _this.group.appendChild(new Group());
    _this.areaSelection = Selection.select(_this.areaGroup).selectAll();
    _this.strokeSelection = Selection.select(_this.strokeGroup).selectAll();
    _this.markerSelection = Selection.select(_this.markerGroup).selectAll();
    _this.markerSelectionData = [];
    /**
     * The assumption is that the values will be reset (to `true`)
     * in the {@link yKeys} setter.
     */
    _this.seriesItemEnabled = new Map();
    _this.xData = [];
    _this.yData = [];
    _this.yDomain = [];
    _this.directionKeys = {
      x: ['xKey'],
      y: ['yKeys']
    };
    _this.marker = new CartesianSeriesMarker();
    _this.fills = ['#c16068', '#a2bf8a', '#ebcc87', '#80a0c3', '#b58dae', '#85c0d1'];
    _this.strokes = ['#874349', '#718661', '#a48f5f', '#5a7088', '#7f637a', '#5d8692'];
    _this.fillOpacity = 1;
    _this.strokeOpacity = 1;
    _this.lineDash = undefined;
    _this.lineDashOffset = 0;
    _this._xKey = '';
    _this.xName = '';
    _this._yKeys = [];
    _this.yNames = [];
    _this.strokeWidth = 2;
    _this.highlightStyle = {
      fill: 'yellow'
    };
    _this.addEventListener('update', _this.update);
    _this.marker.enabled = false;
    _this.marker.addPropertyListener('shape', _this.onMarkerShapeChange, _this);
    _this.marker.addEventListener('change', _this.update, _this);
    return _this;
  }
  AreaSeries.prototype.onMarkerShapeChange = function () {
    this.markerSelection = this.markerSelection.setData([]);
    this.markerSelection.exit.remove();
    this.update();
    this.fireEvent({
      type: 'legendChange'
    });
  };
  Object.defineProperty(AreaSeries.prototype, "xKey", {
    get: function () {
      return this._xKey;
    },
    set: function (value) {
      if (this._xKey !== value) {
        this._xKey = value;
        this.xData = [];
        this.scheduleData();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(AreaSeries.prototype, "yKeys", {
    get: function () {
      return this._yKeys;
    },
    set: function (values) {
      if (!equal(this._yKeys, values)) {
        this._yKeys = values;
        this.yData = [];
        var seriesItemEnabled_1 = this.seriesItemEnabled;
        seriesItemEnabled_1.clear();
        values.forEach(function (key) {
          return seriesItemEnabled_1.set(key, true);
        });
        this.scheduleData();
      }
    },
    enumerable: true,
    configurable: true
  });
  AreaSeries.prototype.setColors = function (fills, strokes) {
    this.fills = fills;
    this.strokes = strokes;
  };
  Object.defineProperty(AreaSeries.prototype, "normalizedTo", {
    get: function () {
      return this._normalizedTo;
    },
    set: function (value) {
      var absValue = value ? Math.abs(value) : undefined;
      if (this._normalizedTo !== absValue) {
        this._normalizedTo = absValue;
        this.scheduleData();
      }
    },
    enumerable: true,
    configurable: true
  });
  AreaSeries.prototype.onHighlightChange = function () {
    this.updateMarkerNodes();
  };
  AreaSeries.prototype.processData = function () {
    var _a = this,
      xKey = _a.xKey,
      yKeys = _a.yKeys,
      seriesItemEnabled = _a.seriesItemEnabled;
    var data = xKey && yKeys.length && this.data ? this.data : [];
    // if (!(chart && chart.xAxis && chart.yAxis)) {
    //     return false;
    // }
    // If the data is an array of rows like so:
    //
    // [{
    //   xKy: 'Jan',
    //   yKey1: 5,
    //   yKey2: 7,
    //   yKey3: -9,
    // }, {
    //   xKey: 'Feb',
    //   yKey1: 10,
    //   yKey2: -15,
    //   yKey3: 20
    // }]
    //
    var keysFound = true; // only warn once
    this.xData = data.map(function (datum) {
      if (keysFound && !(xKey in datum)) {
        keysFound = false;
        console.warn("The key '" + xKey + "' was not found in the data: ", datum);
      }
      return datum[xKey];
    });
    this.yData = data.map(function (datum) {
      return yKeys.map(function (yKey) {
        if (keysFound && !(yKey in datum)) {
          keysFound = false;
          console.warn("The key '" + yKey + "' was not found in the data: ", datum);
        }
        var value = datum[yKey];
        return isFinite(value) && seriesItemEnabled.get(yKey) ? value : 0;
      });
    });
    // xData: ['Jan', 'Feb']
    //
    // yData: [
    //   [5, 7, -9],
    //   [10, -15, 20]
    // ]
    var _b = this,
      yData = _b.yData,
      normalizedTo = _b.normalizedTo;
    var yMinMax = yData.map(function (values) {
      return findMinMax(values);
    }); // used for normalization
    var yLargestMinMax = this.findLargestMinMax(yMinMax);
    var yMin;
    var yMax;
    if (normalizedTo && isFinite(normalizedTo)) {
      yMin = yLargestMinMax.min < 0 ? -normalizedTo : 0;
      yMax = normalizedTo;
      yData.forEach(function (stack, i) {
        return stack.forEach(function (y, j) {
          if (y < 0) {
            stack[j] = -y / yMinMax[i].min * normalizedTo;
          } else {
            stack[j] = y / yMinMax[i].max * normalizedTo;
          }
        });
      });
    } else {
      yMin = yLargestMinMax.min;
      yMax = yLargestMinMax.max;
    }
    if (yMin === 0 && yMax === 0) {
      yMax = 1;
    }
    this.yDomain = this.fixNumericExtent([yMin, yMax], 'y');
    this.fireEvent({
      type: 'dataProcessed'
    });
    return true;
  };
  AreaSeries.prototype.findLargestMinMax = function (totals) {
    var min = 0;
    var max = 0;
    for (var _i = 0, totals_1 = totals; _i < totals_1.length; _i++) {
      var total = totals_1[_i];
      if (total.min < min) {
        min = total.min;
      }
      if (total.max > max) {
        max = total.max;
      }
    }
    return {
      min: min,
      max: max
    };
  };
  AreaSeries.prototype.getDomain = function (direction) {
    if (direction === ChartAxisDirection.X) {
      return this.xData;
    } else {
      return this.yDomain;
    }
  };
  AreaSeries.prototype.update = function () {
    var _a = this,
      visible = _a.visible,
      chart = _a.chart,
      xAxis = _a.xAxis,
      yAxis = _a.yAxis,
      xData = _a.xData,
      yData = _a.yData;
    this.group.visible = visible && !!(xData.length && yData.length);
    if (!xAxis || !yAxis || !visible || !chart || chart.layoutPending || chart.dataPending || !xData.length || !yData.length) {
      return;
    }
    var selectionData = this.generateSelectionData();
    if (!selectionData) {
      return;
    }
    var areaSelectionData = selectionData.areaSelectionData,
      markerSelectionData = selectionData.markerSelectionData;
    this.updateAreaSelection(areaSelectionData);
    this.updateStrokeSelection(areaSelectionData);
    this.updateMarkerSelection(markerSelectionData);
    this.updateMarkerNodes();
    this.markerSelectionData = markerSelectionData;
  };
  AreaSeries.prototype.generateSelectionData = function () {
    var _this = this;
    if (!this.data) {
      return;
    }
    var _a = this,
      yKeys = _a.yKeys,
      data = _a.data,
      xData = _a.xData,
      yData = _a.yData,
      marker = _a.marker,
      fills = _a.fills,
      strokes = _a.strokes,
      xScale = _a.xAxis.scale,
      yScale = _a.yAxis.scale;
    var xOffset = (xScale.bandwidth || 0) / 2;
    var yOffset = (yScale.bandwidth || 0) / 2;
    var areaSelectionData = [];
    var markerSelectionData = [];
    var last = xData.length * 2 - 1;
    xData.forEach(function (xDatum, i) {
      var yDatum = yData[i];
      var seriesDatum = data[i];
      var x = xScale.convert(xDatum) + xOffset;
      var prevMin = 0;
      var prevMax = 0;
      yDatum.forEach(function (curr, j) {
        var prev = curr < 0 ? prevMin : prevMax;
        var y = yScale.convert(prev + curr) + yOffset;
        var yKey = yKeys[j];
        var yValue = seriesDatum[yKey];
        if (marker) {
          markerSelectionData.push({
            index: i,
            series: _this,
            seriesDatum: seriesDatum,
            yValue: yValue,
            yKey: yKey,
            point: {
              x: x,
              y: y
            },
            fill: fills[j % fills.length],
            stroke: strokes[j % strokes.length]
          });
        }
        var areaDatum = areaSelectionData[j] || (areaSelectionData[j] = {
          yKey: yKey,
          points: []
        });
        var areaPoints = areaDatum.points;
        areaPoints[i] = {
          x: x,
          y: y
        };
        areaPoints[last - i] = {
          x: x,
          y: yScale.convert(prev) + yOffset
        }; // bottom y
        if (curr < 0) {
          prevMin += curr;
        } else {
          prevMax += curr;
        }
      });
    });
    return {
      areaSelectionData: areaSelectionData,
      markerSelectionData: markerSelectionData
    };
  };
  AreaSeries.prototype.updateAreaSelection = function (areaSelectionData) {
    var _this = this;
    var _a = this,
      fills = _a.fills,
      fillOpacity = _a.fillOpacity,
      strokes = _a.strokes,
      strokeOpacity = _a.strokeOpacity,
      strokeWidth = _a.strokeWidth,
      seriesItemEnabled = _a.seriesItemEnabled,
      shadow = _a.shadow;
    var updateAreas = this.areaSelection.setData(areaSelectionData);
    updateAreas.exit.remove();
    var enterAreas = updateAreas.enter.append(Path).each(function (path) {
      path.lineJoin = 'round';
      path.stroke = undefined;
      path.pointerEvents = PointerEvents.None;
    });
    var areaSelection = updateAreas.merge(enterAreas);
    areaSelection.each(function (shape, datum, index) {
      var path = shape.path;
      shape.fill = fills[index % fills.length];
      shape.fillOpacity = fillOpacity;
      shape.stroke = strokes[index % strokes.length];
      shape.strokeOpacity = strokeOpacity;
      shape.strokeWidth = strokeWidth;
      shape.lineDash = _this.lineDash;
      shape.lineDashOffset = _this.lineDashOffset;
      shape.fillShadow = shadow;
      shape.visible = !!seriesItemEnabled.get(datum.yKey);
      path.clear();
      var points = datum.points;
      points.forEach(function (_a, i) {
        var x = _a.x,
          y = _a.y;
        if (i > 0) {
          path.lineTo(x, y);
        } else {
          path.moveTo(x, y);
        }
      });
      path.closePath();
    });
    this.areaSelection = areaSelection;
  };
  AreaSeries.prototype.updateStrokeSelection = function (areaSelectionData) {
    var _this = this;
    if (!this.data) {
      return;
    }
    var _a = this,
      strokes = _a.strokes,
      strokeWidth = _a.strokeWidth,
      strokeOpacity = _a.strokeOpacity,
      data = _a.data,
      seriesItemEnabled = _a.seriesItemEnabled;
    var updateStrokes = this.strokeSelection.setData(areaSelectionData);
    updateStrokes.exit.remove();
    var enterStrokes = updateStrokes.enter.append(Path).each(function (path) {
      path.fill = undefined;
      path.lineJoin = path.lineCap = 'round';
      path.pointerEvents = PointerEvents.None;
    });
    var strokeSelection = updateStrokes.merge(enterStrokes);
    strokeSelection.each(function (shape, datum, index) {
      var path = shape.path;
      shape.stroke = strokes[index % strokes.length];
      shape.strokeWidth = strokeWidth;
      shape.visible = !!seriesItemEnabled.get(datum.yKey);
      shape.strokeOpacity = strokeOpacity;
      shape.lineDash = _this.lineDash;
      shape.lineDashOffset = _this.lineDashOffset;
      path.clear();
      var points = datum.points;
      // The stroke doesn't go all the way around the fill, only on top,
      // that's why we iterate until `data.length` (rather than `points.length`) and stop.
      for (var i = 0; i < data.length; i++) {
        var _a = points[i],
          x = _a.x,
          y = _a.y;
        if (i > 0) {
          path.lineTo(x, y);
        } else {
          path.moveTo(x, y);
        }
      }
    });
    this.strokeSelection = strokeSelection;
  };
  AreaSeries.prototype.updateMarkerSelection = function (markerSelectionData) {
    var marker = this.marker;
    var data = marker.shape ? markerSelectionData : [];
    var MarkerShape = getMarker(marker.shape);
    var updateMarkers = this.markerSelection.setData(data);
    updateMarkers.exit.remove();
    var enterMarkers = updateMarkers.enter.append(MarkerShape);
    this.markerSelection = updateMarkers.merge(enterMarkers);
  };
  AreaSeries.prototype.updateMarkerNodes = function () {
    if (!this.chart) {
      return;
    }
    var marker = this.marker;
    var markerFormatter = marker.formatter;
    var markerStrokeWidth = marker.strokeWidth !== undefined ? marker.strokeWidth : this.strokeWidth;
    var markerSize = marker.size;
    var _a = this,
      xKey = _a.xKey,
      seriesItemEnabled = _a.seriesItemEnabled;
    var highlightedDatum = this.chart.highlightedDatum;
    var _b = this.highlightStyle,
      highlightFill = _b.fill,
      highlightStroke = _b.stroke;
    this.markerSelection.each(function (node, datum) {
      var highlighted = datum === highlightedDatum;
      var markerFill = highlighted && highlightFill !== undefined ? highlightFill : marker.fill || datum.fill;
      var markerStroke = highlighted && highlightStroke !== undefined ? highlightStroke : marker.stroke || datum.stroke;
      var markerFormat = undefined;
      if (markerFormatter) {
        markerFormat = markerFormatter({
          datum: datum.seriesDatum,
          xKey: xKey,
          yKey: datum.yKey,
          fill: markerFill,
          stroke: markerStroke,
          strokeWidth: markerStrokeWidth,
          size: markerSize,
          highlighted: highlighted
        });
      }
      node.fill = markerFormat && markerFormat.fill || markerFill;
      node.stroke = markerFormat && markerFormat.stroke || markerStroke;
      node.strokeWidth = markerFormat && markerFormat.strokeWidth !== undefined ? markerFormat.strokeWidth : markerStrokeWidth;
      node.size = markerFormat && markerFormat.size !== undefined ? markerFormat.size : markerSize;
      node.translationX = datum.point.x;
      node.translationY = datum.point.y;
      node.visible = marker.enabled && node.size > 0 && !!seriesItemEnabled.get(datum.yKey);
    });
  };
  AreaSeries.prototype.getNodeData = function () {
    return this.markerSelectionData;
  };
  AreaSeries.prototype.fireNodeClickEvent = function (event, datum) {
    this.fireEvent({
      type: 'nodeClick',
      event: event,
      series: this,
      datum: datum.seriesDatum,
      xKey: this.xKey,
      yKey: datum.yKey
    });
  };
  AreaSeries.prototype.getTooltipHtml = function (nodeDatum) {
    var _a = this,
      xKey = _a.xKey,
      xAxis = _a.xAxis,
      yAxis = _a.yAxis;
    var yKey = nodeDatum.yKey;
    if (!xKey || !yKey) {
      return '';
    }
    var _b = this,
      xName = _b.xName,
      yKeys = _b.yKeys,
      yNames = _b.yNames,
      yData = _b.yData,
      fills = _b.fills,
      tooltip = _b.tooltip;
    var yGroup = yData[nodeDatum.index];
    var _c = tooltip.renderer,
      tooltipRenderer = _c === void 0 ? this.tooltipRenderer : _c,
      tooltipFormat = tooltip.format;
    var datum = nodeDatum.seriesDatum;
    var yKeyIndex = yKeys.indexOf(yKey);
    var xValue = datum[xKey];
    var yValue = datum[yKey];
    var processedYValue = yGroup[yKeyIndex];
    var yName = yNames[yKeyIndex];
    var color = fills[yKeyIndex % fills.length];
    var xString = xAxis.formatDatum(xValue);
    var yString = yAxis.formatDatum(yValue);
    var title = yName;
    var content = xString + ': ' + yString;
    var defaults = {
      title: title,
      backgroundColor: color,
      content: content
    };
    if (tooltipFormat || tooltipRenderer) {
      var params = {
        datum: datum,
        xKey: xKey,
        xName: xName,
        xValue: xValue,
        yKey: yKey,
        yValue: yValue,
        processedYValue: processedYValue,
        yName: yName,
        color: color
      };
      if (tooltipFormat) {
        return toTooltipHtml({
          content: interpolate(tooltipFormat, params)
        }, defaults);
      }
      if (tooltipRenderer) {
        return toTooltipHtml(tooltipRenderer(params), defaults);
      }
    }
    return toTooltipHtml(defaults);
  };
  AreaSeries.prototype.listSeriesItems = function (legendData) {
    var _a = this,
      data = _a.data,
      id = _a.id,
      xKey = _a.xKey,
      yKeys = _a.yKeys,
      yNames = _a.yNames,
      seriesItemEnabled = _a.seriesItemEnabled,
      marker = _a.marker,
      fills = _a.fills,
      strokes = _a.strokes,
      fillOpacity = _a.fillOpacity,
      strokeOpacity = _a.strokeOpacity;
    if (data && data.length && xKey && yKeys.length) {
      yKeys.forEach(function (yKey, index) {
        legendData.push({
          id: id,
          itemId: yKey,
          enabled: seriesItemEnabled.get(yKey) || false,
          label: {
            text: yNames[index] || yKeys[index]
          },
          marker: {
            shape: marker.shape,
            fill: marker.fill || fills[index % fills.length],
            stroke: marker.stroke || strokes[index % strokes.length],
            fillOpacity: fillOpacity,
            strokeOpacity: strokeOpacity
          }
        });
      });
    }
  };
  AreaSeries.prototype.toggleSeriesItem = function (itemId, enabled) {
    this.seriesItemEnabled.set(itemId, enabled);
    this.scheduleData();
  };
  AreaSeries.className = 'AreaSeries';
  AreaSeries.type = 'area';
  __decorate$G([reactive('dataChange')], AreaSeries.prototype, "fills", void 0);
  __decorate$G([reactive('dataChange')], AreaSeries.prototype, "strokes", void 0);
  __decorate$G([reactive('update')], AreaSeries.prototype, "fillOpacity", void 0);
  __decorate$G([reactive('update')], AreaSeries.prototype, "strokeOpacity", void 0);
  __decorate$G([reactive('update')], AreaSeries.prototype, "lineDash", void 0);
  __decorate$G([reactive('update')], AreaSeries.prototype, "lineDashOffset", void 0);
  __decorate$G([reactive('update')], AreaSeries.prototype, "xName", void 0);
  __decorate$G([reactive('update')], AreaSeries.prototype, "yNames", void 0);
  __decorate$G([reactive('update')], AreaSeries.prototype, "strokeWidth", void 0);
  __decorate$G([reactive('update')], AreaSeries.prototype, "shadow", void 0);
  return AreaSeries;
}(CartesianSeries);
var __extends$1i =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$H =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Label = /** @class */function (_super) {
  __extends$1i(Label, _super);
  function Label() {
    var _this = _super.call(this) || this;
    _this.enabled = true;
    _this.fontSize = 12;
    _this.fontFamily = 'Verdana, sans-serif';
    _this.color = 'rgba(70, 70, 70, 1)';
    return _this;
  }
  __decorate$H([reactive('change', 'dataChange')], Label.prototype, "enabled", void 0);
  __decorate$H([reactive('change')], Label.prototype, "fontStyle", void 0);
  __decorate$H([reactive('change')], Label.prototype, "fontWeight", void 0);
  __decorate$H([reactive('change')], Label.prototype, "fontSize", void 0);
  __decorate$H([reactive('change')], Label.prototype, "fontFamily", void 0);
  __decorate$H([reactive('change')], Label.prototype, "color", void 0);
  return Label;
}(Observable);
var __extends$1j =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$I =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var BarSeriesNodeTag;
(function (BarSeriesNodeTag) {
  BarSeriesNodeTag[BarSeriesNodeTag["Bar"] = 0] = "Bar";
  BarSeriesNodeTag[BarSeriesNodeTag["Label"] = 1] = "Label";
})(BarSeriesNodeTag || (BarSeriesNodeTag = {}));
var BarLabelPlacement;
(function (BarLabelPlacement) {
  BarLabelPlacement["Inside"] = "inside";
  BarLabelPlacement["Outside"] = "outside";
})(BarLabelPlacement || (BarLabelPlacement = {}));
var BarSeriesLabel = /** @class */function (_super) {
  __extends$1j(BarSeriesLabel, _super);
  function BarSeriesLabel() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.placement = BarLabelPlacement.Inside;
    return _this;
  }
  __decorate$I([reactive('change')], BarSeriesLabel.prototype, "formatter", void 0);
  __decorate$I([reactive('change')], BarSeriesLabel.prototype, "placement", void 0);
  return BarSeriesLabel;
}(Label);
var BarSeriesTooltip = /** @class */function (_super) {
  __extends$1j(BarSeriesTooltip, _super);
  function BarSeriesTooltip() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  __decorate$I([reactive('change')], BarSeriesTooltip.prototype, "renderer", void 0);
  return BarSeriesTooltip;
}(SeriesTooltip);
function flat(arr, target) {
  if (target === void 0) {
    target = [];
  }
  arr.forEach(function (v) {
    if (Array.isArray(v)) {
      flat(v, target);
    } else {
      target.push(v);
    }
  });
  return target;
}
var BarSeries = /** @class */function (_super) {
  __extends$1j(BarSeries, _super);
  function BarSeries() {
    var _a;
    var _this = _super.call(this) || this;
    // Need to put bar and label nodes into separate groups, because even though label nodes are
    // created after the bar nodes, this only guarantees that labels will always be on top of bars
    // on the first run. If on the next run more bars are added, they might clip the labels
    // rendered during the previous run.
    _this.rectGroup = _this.group.appendChild(new Group());
    _this.textGroup = _this.group.appendChild(new Group());
    _this.rectSelection = Selection.select(_this.rectGroup).selectAll();
    _this.textSelection = Selection.select(_this.textGroup).selectAll();
    _this.xData = [];
    _this.yData = [];
    _this.yDomain = [];
    _this.label = new BarSeriesLabel();
    /**
     * The assumption is that the values will be reset (to `true`)
     * in the {@link yKeys} setter.
     */
    _this.seriesItemEnabled = new Map();
    _this.tooltip = new BarSeriesTooltip();
    _this.flipXY = false;
    _this.fills = ['#c16068', '#a2bf8a', '#ebcc87', '#80a0c3', '#b58dae', '#85c0d1'];
    _this.strokes = ['#874349', '#718661', '#a48f5f', '#5a7088', '#7f637a', '#5d8692'];
    _this.fillOpacity = 1;
    _this.strokeOpacity = 1;
    _this.lineDash = undefined;
    _this.lineDashOffset = 0;
    /**
     * Used to get the position of bars within each group.
     */
    _this.groupScale = new BandScale();
    _this.directionKeys = (_a = {}, _a[ChartAxisDirection.X] = ['xKey'], _a[ChartAxisDirection.Y] = ['yKeys'], _a);
    _this._xKey = '';
    _this._xName = '';
    _this.cumYKeyCount = [];
    _this.flatYKeys = undefined; // only set when a user used a flat array for yKeys
    _this.hideInLegend = [];
    /**
     * yKeys: [['coffee']] - regular bars, each category has a single bar that shows a value for coffee
     * yKeys: [['coffee'], ['tea'], ['milk']] - each category has three bars that show values for coffee, tea and milk
     * yKeys: [['coffee', 'tea', 'milk']] - each category has a single bar with three stacks that show values for coffee, tea and milk
     * yKeys: [['coffee', 'tea', 'milk'], ['paper', 'ink']] - each category has 2 stacked bars,
     *     first showing values for coffee, tea and milk and second values for paper and ink
     */
    _this._yKeys = [];
    _this._grouped = false;
    /**
     * A map of `yKeys` to their names (used in legends and tooltips).
     * For example, if a key is `product_name` it's name can be a more presentable `Product Name`.
     */
    _this._yNames = {};
    _this._strokeWidth = 1;
    _this.highlightStyle = {
      fill: 'yellow'
    };
    _this.addEventListener('update', _this.update);
    _this.label.enabled = false;
    _this.label.addEventListener('change', _this.update, _this);
    return _this;
  }
  BarSeries.prototype.getKeys = function (direction) {
    var _this = this;
    var directionKeys = this.directionKeys;
    var keys = directionKeys && directionKeys[this.flipXY ? flipChartAxisDirection(direction) : direction];
    var values = [];
    if (keys) {
      keys.forEach(function (key) {
        var value = _this[key];
        if (value) {
          if (Array.isArray(value)) {
            values = values.concat(flat(value));
          } else {
            values.push(value);
          }
        }
      });
    }
    return values;
  };
  Object.defineProperty(BarSeries.prototype, "xKey", {
    get: function () {
      return this._xKey;
    },
    set: function (value) {
      if (this._xKey !== value) {
        this._xKey = value;
        this.xData = [];
        this.scheduleData();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(BarSeries.prototype, "xName", {
    get: function () {
      return this._xName;
    },
    set: function (value) {
      if (this._xName !== value) {
        this._xName = value;
        this.update();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(BarSeries.prototype, "yKeys", {
    get: function () {
      return this._yKeys;
    },
    set: function (yKeys) {
      var _this = this;
      if (!equal(this._yKeys, yKeys)) {
        // Convert from flat y-keys to grouped y-keys.
        if (yKeys.length && !Array.isArray(yKeys[0])) {
          var keys = this.flatYKeys = yKeys;
          if (this.grouped) {
            yKeys = keys.map(function (k) {
              return [k];
            });
          } else {
            yKeys = [keys];
          }
        } else {
          this.flatYKeys = undefined;
        }
        this._yKeys = yKeys;
        var prevYKeyCount_1 = 0;
        this.cumYKeyCount = [];
        var visibleStacks_1 = [];
        yKeys.forEach(function (stack, index) {
          if (stack.length > 0) {
            visibleStacks_1.push(String(index));
          }
          _this.cumYKeyCount.push(prevYKeyCount_1);
          prevYKeyCount_1 += stack.length;
        });
        this.yData = [];
        var seriesItemEnabled_1 = this.seriesItemEnabled;
        seriesItemEnabled_1.clear();
        yKeys.forEach(function (stack) {
          stack.forEach(function (yKey) {
            return seriesItemEnabled_1.set(yKey, true);
          });
        });
        var groupScale = this.groupScale;
        groupScale.domain = visibleStacks_1;
        groupScale.padding = 0.1;
        groupScale.round = true;
        this.scheduleData();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(BarSeries.prototype, "grouped", {
    get: function () {
      return this._grouped;
    },
    set: function (value) {
      if (this._grouped !== value) {
        this._grouped = value;
        if (this.flatYKeys) {
          this.yKeys = this.flatYKeys;
        }
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(BarSeries.prototype, "yNames", {
    get: function () {
      return this._yNames;
    },
    set: function (values) {
      if (Array.isArray(values) && this.flatYKeys) {
        var map_1 = {};
        this.flatYKeys.forEach(function (k, i) {
          map_1[k] = values[i];
        });
        values = map_1;
      }
      this._yNames = values;
      this.scheduleData();
    },
    enumerable: true,
    configurable: true
  });
  BarSeries.prototype.setColors = function (fills, strokes) {
    this.fills = fills;
    this.strokes = strokes;
  };
  Object.defineProperty(BarSeries.prototype, "normalizedTo", {
    get: function () {
      return this._normalizedTo;
    },
    set: function (value) {
      var absValue = value ? Math.abs(value) : undefined;
      if (this._normalizedTo !== absValue) {
        this._normalizedTo = absValue;
        this.scheduleData();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(BarSeries.prototype, "strokeWidth", {
    get: function () {
      return this._strokeWidth;
    },
    set: function (value) {
      if (this._strokeWidth !== value) {
        this._strokeWidth = value;
        this.update();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(BarSeries.prototype, "shadow", {
    get: function () {
      return this._shadow;
    },
    set: function (value) {
      if (this._shadow !== value) {
        this._shadow = value;
        this.update();
      }
    },
    enumerable: true,
    configurable: true
  });
  BarSeries.prototype.onHighlightChange = function () {
    this.updateRectNodes();
  };
  BarSeries.prototype.processData = function () {
    var _a = this,
      xKey = _a.xKey,
      yKeys = _a.yKeys,
      seriesItemEnabled = _a.seriesItemEnabled;
    var data = xKey && yKeys.length && this.data ? this.data : [];
    var keysFound = true; // only warn once
    this.xData = data.map(function (datum) {
      if (keysFound && !(xKey in datum)) {
        keysFound = false;
        console.warn("The key '" + xKey + "' was not found in the data: ", datum);
      }
      return datum[xKey];
    });
    this.yData = data.map(function (datum) {
      return yKeys.map(function (stack) {
        return stack.map(function (yKey) {
          if (keysFound && !(yKey in datum)) {
            keysFound = false;
            console.warn("The key '" + yKey + "' was not found in the data: ", datum);
          }
          var value = datum[yKey];
          return isFinite(value) && seriesItemEnabled.get(yKey) ? value : 0;
        });
      });
    });
    // Used for normalization of stacked bars. Contains min/max values for each stack in each group,
    // where min is zero and max is a positive total of all values in the stack
    // or min is a negative total of all values in the stack and max is zero.
    var yMinMax = this.yData.map(function (group) {
      return group.map(function (stack) {
        return findMinMax(stack);
      });
    });
    var _b = this,
      yData = _b.yData,
      normalizedTo = _b.normalizedTo;
    var yLargestMinMax = this.findLargestMinMax(yMinMax);
    var yMin;
    var yMax;
    if (normalizedTo && isFinite(normalizedTo)) {
      yMin = yLargestMinMax.min < 0 ? -normalizedTo : 0;
      yMax = normalizedTo;
      yData.forEach(function (group, i) {
        group.forEach(function (stack, j) {
          stack.forEach(function (y, k) {
            if (y < 0) {
              stack[k] = -y / yMinMax[i][j].min * normalizedTo;
            } else {
              stack[k] = y / yMinMax[i][j].max * normalizedTo;
            }
          });
        });
      });
    } else {
      yMin = yLargestMinMax.min;
      yMax = yLargestMinMax.max;
    }
    this.yDomain = this.fixNumericExtent([yMin, yMax], 'y');
    this.fireEvent({
      type: 'dataProcessed'
    });
    return true;
  };
  BarSeries.prototype.findLargestMinMax = function (groups) {
    var tallestStackMin = 0;
    var tallestStackMax = 0;
    for (var _i = 0, groups_1 = groups; _i < groups_1.length; _i++) {
      var group = groups_1[_i];
      for (var _a = 0, group_1 = group; _a < group_1.length; _a++) {
        var stack = group_1[_a];
        if (stack.min < tallestStackMin) {
          tallestStackMin = stack.min;
        }
        if (stack.max > tallestStackMax) {
          tallestStackMax = stack.max;
        }
      }
    }
    return {
      min: tallestStackMin,
      max: tallestStackMax
    };
  };
  BarSeries.prototype.getDomain = function (direction) {
    if (this.flipXY) {
      direction = flipChartAxisDirection(direction);
    }
    if (direction === ChartAxisDirection.X) {
      return this.xData;
    } else {
      return this.yDomain;
    }
  };
  BarSeries.prototype.fireNodeClickEvent = function (event, datum) {
    this.fireEvent({
      type: 'nodeClick',
      event: event,
      series: this,
      datum: datum.seriesDatum,
      xKey: this.xKey,
      yKey: datum.yKey
    });
  };
  BarSeries.prototype.getCategoryAxis = function () {
    return this.flipXY ? this.yAxis : this.xAxis;
  };
  BarSeries.prototype.getValueAxis = function () {
    return this.flipXY ? this.xAxis : this.yAxis;
  };
  BarSeries.prototype.generateNodeData = function () {
    var _this = this;
    if (!this.data) {
      return [];
    }
    var flipXY = this.flipXY;
    var xAxis = this.getCategoryAxis();
    var yAxis = this.getValueAxis();
    var xScale = xAxis.scale;
    var yScale = yAxis.scale;
    var _a = this,
      groupScale = _a.groupScale,
      yKeys = _a.yKeys,
      cumYKeyCount = _a.cumYKeyCount,
      fills = _a.fills,
      strokes = _a.strokes,
      strokeWidth = _a.strokeWidth,
      seriesItemEnabled = _a.seriesItemEnabled,
      data = _a.data,
      xData = _a.xData,
      yData = _a.yData,
      label = _a.label;
    var labelFontStyle = label.fontStyle;
    var labelFontWeight = label.fontWeight;
    var labelFontSize = label.fontSize;
    var labelFontFamily = label.fontFamily;
    var labelColor = label.color;
    var labelFormatter = label.formatter;
    var labelPlacement = label.placement;
    groupScale.range = [0, xScale.bandwidth];
    var barWidth = groupScale.bandwidth;
    var nodeData = [];
    xData.forEach(function (group, groupIndex) {
      var seriesDatum = data[groupIndex];
      var x = xScale.convert(group);
      var groupYs = yData[groupIndex]; // y-data for groups of stacks
      for (var stackIndex = 0; stackIndex < groupYs.length; stackIndex++) {
        var stackYs = groupYs[stackIndex]; // y-data for a stack withing a group
        var prevMinY = 0;
        var prevMaxY = 0;
        for (var levelIndex = 0; levelIndex < stackYs.length; levelIndex++) {
          var currY = stackYs[levelIndex];
          var yKey = yKeys[stackIndex][levelIndex];
          var barX = x + groupScale.convert(String(stackIndex));
          // Bars outside of visible range are not rendered, so we generate node data
          // only for the visible subset of user data.
          if (!xAxis.inRange(barX, barWidth)) {
            continue;
          }
          var prevY = currY < 0 ? prevMinY : prevMaxY;
          var y = yScale.convert(prevY + currY);
          var bottomY = yScale.convert(prevY);
          var yValue = seriesDatum[yKey]; // unprocessed y-value
          var yValueIsNumber = typeof yValue === 'number';
          var labelText = void 0;
          if (labelFormatter) {
            labelText = labelFormatter({
              value: yValueIsNumber ? yValue : undefined
            });
          } else {
            labelText = yValueIsNumber && isFinite(yValue) ? yValue.toFixed(2) : '';
          }
          var labelX = void 0;
          var labelY = void 0;
          if (flipXY) {
            labelY = barX + barWidth / 2;
            if (labelPlacement === BarLabelPlacement.Inside) {
              labelX = y + (yValue >= 0 ? -1 : 1) * Math.abs(bottomY - y) / 2;
            } else {
              labelX = y + (yValue >= 0 ? 1 : -1) * 4;
            }
          } else {
            labelX = barX + barWidth / 2;
            if (labelPlacement === BarLabelPlacement.Inside) {
              labelY = y + (yValue >= 0 ? 1 : -1) * Math.abs(bottomY - y) / 2;
            } else {
              labelY = y + (yValue >= 0 ? -3 : 4);
            }
          }
          var labelTextAlign = void 0;
          var labelTextBaseline = void 0;
          if (labelPlacement === BarLabelPlacement.Inside) {
            labelTextAlign = 'center';
            labelTextBaseline = 'middle';
          } else {
            labelTextAlign = flipXY ? yValue >= 0 ? 'start' : 'end' : 'center';
            labelTextBaseline = flipXY ? 'middle' : yValue >= 0 ? 'bottom' : 'top';
          }
          var colorIndex = cumYKeyCount[stackIndex] + levelIndex;
          nodeData.push({
            index: groupIndex,
            series: _this,
            seriesDatum: seriesDatum,
            yValue: yValue,
            yKey: yKey,
            x: flipXY ? Math.min(y, bottomY) : barX,
            y: flipXY ? barX : Math.min(y, bottomY),
            width: flipXY ? Math.abs(bottomY - y) : barWidth,
            height: flipXY ? barWidth : Math.abs(bottomY - y),
            fill: fills[colorIndex % fills.length],
            stroke: strokes[colorIndex % strokes.length],
            strokeWidth: strokeWidth,
            label: seriesItemEnabled.get(yKey) && labelText ? {
              text: labelText,
              fontStyle: labelFontStyle,
              fontWeight: labelFontWeight,
              fontSize: labelFontSize,
              fontFamily: labelFontFamily,
              textAlign: labelTextAlign,
              textBaseline: labelTextBaseline,
              fill: labelColor,
              x: labelX,
              y: labelY
            } : undefined
          });
          if (currY < 0) {
            prevMinY += currY;
          } else {
            prevMaxY += currY;
          }
        }
      }
    });
    return nodeData;
  };
  BarSeries.prototype.update = function () {
    var _a = this,
      visible = _a.visible,
      chart = _a.chart,
      xAxis = _a.xAxis,
      yAxis = _a.yAxis,
      xData = _a.xData,
      yData = _a.yData;
    this.group.visible = visible;
    if (!chart || chart.layoutPending || chart.dataPending || !xAxis || !yAxis || !visible || !xData.length || !yData.length) {
      return;
    }
    var nodeData = this.generateNodeData();
    this.updateRectSelection(nodeData);
    this.updateRectNodes();
    this.updateTextSelection(nodeData);
    this.updateTextNodes();
  };
  BarSeries.prototype.updateRectSelection = function (selectionData) {
    var updateRects = this.rectSelection.setData(selectionData);
    updateRects.exit.remove();
    var enterRects = updateRects.enter.append(Rect).each(function (rect) {
      rect.tag = BarSeriesNodeTag.Bar;
      rect.crisp = true;
    });
    this.rectSelection = updateRects.merge(enterRects);
  };
  BarSeries.prototype.updateRectNodes = function () {
    var _this = this;
    if (!this.chart) {
      return;
    }
    var _a = this,
      fillOpacity = _a.fillOpacity,
      strokeOpacity = _a.strokeOpacity,
      _b = _a.highlightStyle,
      fill = _b.fill,
      stroke = _b.stroke,
      shadow = _a.shadow,
      formatter = _a.formatter,
      xKey = _a.xKey,
      flipXY = _a.flipXY;
    var highlightedDatum = this.chart.highlightedDatum;
    this.rectSelection.each(function (rect, datum) {
      var highlighted = datum === highlightedDatum;
      var rectFill = highlighted && fill !== undefined ? fill : datum.fill;
      var rectStroke = highlighted && stroke !== undefined ? stroke : datum.stroke;
      var format = undefined;
      if (formatter) {
        format = formatter({
          datum: datum.seriesDatum,
          fill: rectFill,
          stroke: rectStroke,
          strokeWidth: datum.strokeWidth,
          highlighted: highlighted,
          xKey: xKey,
          yKey: datum.yKey
        });
      }
      rect.x = datum.x;
      rect.y = datum.y;
      rect.width = datum.width;
      rect.height = datum.height;
      rect.fill = format && format.fill || rectFill;
      rect.stroke = format && format.stroke || rectStroke;
      rect.strokeWidth = format && format.strokeWidth !== undefined ? format.strokeWidth : datum.strokeWidth;
      rect.fillOpacity = fillOpacity;
      rect.strokeOpacity = strokeOpacity;
      rect.lineDash = _this.lineDash;
      rect.lineDashOffset = _this.lineDashOffset;
      rect.fillShadow = shadow;
      // Prevent stroke from rendering for zero height columns and zero width bars.
      rect.visible = flipXY ? datum.width > 0 : datum.height > 0;
    });
  };
  BarSeries.prototype.updateTextSelection = function (selectionData) {
    var updateTexts = this.textSelection.setData(selectionData);
    updateTexts.exit.remove();
    var enterTexts = updateTexts.enter.append(Text).each(function (text) {
      text.tag = BarSeriesNodeTag.Label;
      text.pointerEvents = PointerEvents.None;
    });
    this.textSelection = updateTexts.merge(enterTexts);
  };
  BarSeries.prototype.updateTextNodes = function () {
    var labelEnabled = this.label.enabled;
    this.textSelection.each(function (text, datum) {
      var label = datum.label;
      if (label && labelEnabled) {
        text.fontStyle = label.fontStyle;
        text.fontWeight = label.fontWeight;
        text.fontSize = label.fontSize;
        text.fontFamily = label.fontFamily;
        text.textAlign = label.textAlign;
        text.textBaseline = label.textBaseline;
        text.text = label.text;
        text.x = label.x;
        text.y = label.y;
        text.fill = label.fill;
        text.visible = true;
      } else {
        text.visible = false;
      }
    });
  };
  BarSeries.prototype.getTooltipHtml = function (nodeDatum) {
    var _a = this,
      xKey = _a.xKey,
      yKeys = _a.yKeys,
      yData = _a.yData;
    var xAxis = this.getCategoryAxis();
    var yAxis = this.getValueAxis();
    var yKey = nodeDatum.yKey;
    if (!xKey || !yKey || !yData.length) {
      return '';
    }
    var yGroup = yData[nodeDatum.index];
    var fillIndex = 0;
    var i = 0;
    var j = 0;
    for (; j < yKeys.length; j++) {
      var stack = yKeys[j];
      i = stack.indexOf(yKey);
      if (i >= 0) {
        fillIndex += i;
        break;
      }
      fillIndex += stack.length;
    }
    var _b = this,
      xName = _b.xName,
      yNames = _b.yNames,
      fills = _b.fills,
      tooltip = _b.tooltip;
    var _c = tooltip.renderer,
      tooltipRenderer = _c === void 0 ? this.tooltipRenderer : _c; // TODO: remove deprecated tooltipRenderer
    var datum = nodeDatum.seriesDatum;
    var yName = yNames[yKey];
    var color = fills[fillIndex % fills.length];
    var xValue = datum[xKey];
    var yValue = datum[yKey];
    var processedYValue = yGroup[j][i];
    var xString = xAxis.formatDatum(xValue);
    var yString = yAxis.formatDatum(yValue);
    var title = yName;
    var content = xString + ': ' + yString;
    var defaults = {
      title: title,
      backgroundColor: color,
      content: content
    };
    if (tooltipRenderer) {
      return toTooltipHtml(tooltipRenderer({
        datum: datum,
        xKey: xKey,
        xValue: xValue,
        xName: xName,
        yKey: yKey,
        yValue: yValue,
        processedYValue: processedYValue,
        yName: yName,
        color: color
      }), defaults);
    }
    return toTooltipHtml(defaults);
  };
  BarSeries.prototype.listSeriesItems = function (legendData) {
    var _a = this,
      id = _a.id,
      data = _a.data,
      xKey = _a.xKey,
      yKeys = _a.yKeys,
      yNames = _a.yNames,
      cumYKeyCount = _a.cumYKeyCount,
      seriesItemEnabled = _a.seriesItemEnabled,
      hideInLegend = _a.hideInLegend,
      fills = _a.fills,
      strokes = _a.strokes,
      fillOpacity = _a.fillOpacity,
      strokeOpacity = _a.strokeOpacity;
    if (data && data.length && xKey && yKeys.length) {
      this.yKeys.forEach(function (stack, stackIndex) {
        stack.forEach(function (yKey, levelIndex) {
          if (hideInLegend.indexOf(yKey) < 0) {
            var colorIndex = cumYKeyCount[stackIndex] + levelIndex;
            legendData.push({
              id: id,
              itemId: yKey,
              enabled: seriesItemEnabled.get(yKey) || false,
              label: {
                text: yNames[yKey] || yKey
              },
              marker: {
                fill: fills[colorIndex % fills.length],
                stroke: strokes[colorIndex % strokes.length],
                fillOpacity: fillOpacity,
                strokeOpacity: strokeOpacity
              }
            });
          }
        });
      });
    }
  };
  BarSeries.prototype.toggleSeriesItem = function (itemId, enabled) {
    var seriesItemEnabled = this.seriesItemEnabled;
    seriesItemEnabled.set(itemId, enabled);
    var yKeys = this.yKeys.map(function (stack) {
      return stack.slice();
    }); // deep clone
    seriesItemEnabled.forEach(function (enabled, yKey) {
      if (!enabled) {
        yKeys.forEach(function (stack) {
          var index = stack.indexOf(yKey);
          if (index >= 0) {
            stack.splice(index, 1);
          }
        });
      }
    });
    var visibleStacks = [];
    yKeys.forEach(function (stack, index) {
      if (stack.length > 0) {
        visibleStacks.push(String(index));
      }
    });
    this.groupScale.domain = visibleStacks;
    this.scheduleData();
  };
  BarSeries.className = 'BarSeries';
  BarSeries.type = 'bar';
  __decorate$I([reactive('dataChange')], BarSeries.prototype, "flipXY", void 0);
  __decorate$I([reactive('dataChange')], BarSeries.prototype, "fills", void 0);
  __decorate$I([reactive('dataChange')], BarSeries.prototype, "strokes", void 0);
  __decorate$I([reactive('layoutChange')], BarSeries.prototype, "fillOpacity", void 0);
  __decorate$I([reactive('layoutChange')], BarSeries.prototype, "strokeOpacity", void 0);
  __decorate$I([reactive('update')], BarSeries.prototype, "lineDash", void 0);
  __decorate$I([reactive('update')], BarSeries.prototype, "lineDashOffset", void 0);
  __decorate$I([reactive('update')], BarSeries.prototype, "formatter", void 0);
  __decorate$I([reactive('layoutChange')], BarSeries.prototype, "hideInLegend", void 0);
  return BarSeries;
}(CartesianSeries);
var __extends$1k =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$J =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var LineSeriesTooltip = /** @class */function (_super) {
  __extends$1k(LineSeriesTooltip, _super);
  function LineSeriesTooltip() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  __decorate$J([reactive('change')], LineSeriesTooltip.prototype, "renderer", void 0);
  __decorate$J([reactive('change')], LineSeriesTooltip.prototype, "format", void 0);
  return LineSeriesTooltip;
}(SeriesTooltip);
var LineSeries = /** @class */function (_super) {
  __extends$1k(LineSeries, _super);
  function LineSeries() {
    var _this = _super.call(this) || this;
    _this.xDomain = [];
    _this.yDomain = [];
    _this.xData = [];
    _this.yData = [];
    _this.lineNode = new Path();
    // We use groups for this selection even though each group only contains a marker ATM
    // because in the future we might want to add label support as well.
    _this.nodeSelection = Selection.select(_this.group).selectAll();
    _this.nodeData = [];
    _this.marker = new CartesianSeriesMarker();
    _this.stroke = '#874349';
    _this.lineDash = undefined;
    _this.lineDashOffset = 0;
    _this.strokeWidth = 2;
    _this.strokeOpacity = 1;
    _this.tooltip = new LineSeriesTooltip();
    _this._xKey = '';
    _this.xName = '';
    _this._yKey = '';
    _this.yName = '';
    _this.highlightStyle = {
      fill: 'yellow'
    };
    var lineNode = _this.lineNode;
    lineNode.fill = undefined;
    lineNode.lineJoin = 'round';
    lineNode.pointerEvents = PointerEvents.None;
    _this.group.append(lineNode);
    _this.addEventListener('update', _this.update);
    var marker = _this.marker;
    marker.fill = '#c16068';
    marker.stroke = '#874349';
    marker.addPropertyListener('shape', _this.onMarkerShapeChange, _this);
    marker.addPropertyListener('enabled', _this.onMarkerEnabledChange, _this);
    marker.addEventListener('change', _this.update, _this);
    return _this;
  }
  LineSeries.prototype.onMarkerShapeChange = function () {
    this.nodeSelection = this.nodeSelection.setData([]);
    this.nodeSelection.exit.remove();
    this.update();
    this.fireEvent({
      type: 'legendChange'
    });
  };
  LineSeries.prototype.onMarkerEnabledChange = function (event) {
    if (!event.value) {
      this.nodeSelection = this.nodeSelection.setData([]);
      this.nodeSelection.exit.remove();
    }
  };
  LineSeries.prototype.setColors = function (fills, strokes) {
    this.stroke = fills[0];
    this.marker.stroke = strokes[0];
    this.marker.fill = fills[0];
  };
  Object.defineProperty(LineSeries.prototype, "xKey", {
    get: function () {
      return this._xKey;
    },
    set: function (value) {
      if (this._xKey !== value) {
        this._xKey = value;
        this.xData = [];
        this.scheduleData();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(LineSeries.prototype, "yKey", {
    get: function () {
      return this._yKey;
    },
    set: function (value) {
      if (this._yKey !== value) {
        this._yKey = value;
        this.yData = [];
        this.scheduleData();
      }
    },
    enumerable: true,
    configurable: true
  });
  LineSeries.prototype.processData = function () {
    var _a = this,
      xAxis = _a.xAxis,
      yAxis = _a.yAxis,
      xKey = _a.xKey,
      yKey = _a.yKey,
      xData = _a.xData,
      yData = _a.yData;
    var data = xKey && yKey && this.data ? this.data : [];
    if (!xAxis) {
      return false;
    }
    var isContinuousX = xAxis.scale instanceof ContinuousScale;
    var isContinuousY = yAxis.scale instanceof ContinuousScale;
    xData.length = 0;
    yData.length = 0;
    for (var i = 0, n = data.length; i < n; i++) {
      var datum = data[i];
      var x = datum[xKey];
      var y = datum[yKey];
      xData.push(x);
      yData.push(y);
    }
    this.xDomain = isContinuousX ? this.fixNumericExtent(numericExtent(xData), 'x') : xData;
    this.yDomain = isContinuousY ? this.fixNumericExtent(numericExtent(yData), 'y') : yData;
    return true;
  };
  LineSeries.prototype.getDomain = function (direction) {
    if (direction === ChartAxisDirection.X) {
      return this.xDomain;
    }
    return this.yDomain;
  };
  LineSeries.prototype.onHighlightChange = function () {
    this.updateNodes();
  };
  LineSeries.prototype.update = function () {
    this.group.visible = this.visible;
    var _a = this,
      chart = _a.chart,
      xAxis = _a.xAxis,
      yAxis = _a.yAxis;
    if (!chart || chart.layoutPending || chart.dataPending || !xAxis || !yAxis) {
      return;
    }
    this.updateLinePath(); // this will generate node data too
    this.updateNodeSelection();
    this.updateNodes();
  };
  LineSeries.prototype.getXYDatums = function (i, xData, yData, xScale, yScale) {
    var isContinuousX = xScale instanceof ContinuousScale;
    var isContinuousY = yScale instanceof ContinuousScale;
    var xDatum = xData[i];
    var yDatum = yData[i];
    var noDatum = yDatum == null || isContinuousY && (isNaN(yDatum) || !isFinite(yDatum)) || xDatum == null || isContinuousX && (isNaN(xDatum) || !isFinite(xDatum));
    return noDatum ? undefined : [xDatum, yDatum];
  };
  LineSeries.prototype.updateLinePath = function () {
    if (!this.data) {
      return;
    }
    var _a = this,
      xAxis = _a.xAxis,
      yAxis = _a.yAxis,
      data = _a.data,
      xData = _a.xData,
      yData = _a.yData,
      lineNode = _a.lineNode;
    var xScale = xAxis.scale;
    var yScale = yAxis.scale;
    var xOffset = (xScale.bandwidth || 0) / 2;
    var yOffset = (yScale.bandwidth || 0) / 2;
    var linePath = lineNode.path;
    var nodeData = [];
    linePath.clear();
    var moveTo = true;
    var prevXInRange = undefined;
    var nextXYDatums = undefined;
    for (var i = 0; i < xData.length; i++) {
      var xyDatums = nextXYDatums || this.getXYDatums(i, xData, yData, xScale, yScale);
      if (!xyDatums) {
        prevXInRange = undefined;
        moveTo = true;
      } else {
        var xDatum = xyDatums[0],
          yDatum = xyDatums[1];
        var x = xScale.convert(xDatum) + xOffset;
        var tolerance = (xScale.bandwidth || this.marker.size * 0.5 + (this.marker.strokeWidth || 0)) + 1;
        nextXYDatums = this.getXYDatums(i + 1, xData, yData, xScale, yScale);
        var xInRange = xAxis.inRangeEx(x, 0, tolerance);
        var nextXInRange = nextXYDatums && xAxis.inRangeEx(xScale.convert(nextXYDatums[0]) + xOffset, 0, tolerance);
        if (xInRange === -1 && nextXInRange === -1) {
          moveTo = true;
          continue;
        }
        if (xInRange === 1 && prevXInRange === 1) {
          moveTo = true;
          continue;
        }
        prevXInRange = xInRange;
        var y = yScale.convert(yDatum) + yOffset;
        if (moveTo) {
          linePath.moveTo(x, y);
          moveTo = false;
        } else {
          linePath.lineTo(x, y);
        }
        nodeData.push({
          series: this,
          seriesDatum: data[i],
          point: {
            x: x,
            y: y
          }
        });
      }
    }
    lineNode.stroke = this.stroke;
    lineNode.strokeWidth = this.strokeWidth;
    lineNode.lineDash = this.lineDash;
    lineNode.lineDashOffset = this.lineDashOffset;
    lineNode.strokeOpacity = this.strokeOpacity;
    // Used by marker nodes and for hit-testing even when not using markers
    // when `chart.tooltipTracking` is true.
    this.nodeData = nodeData;
  };
  LineSeries.prototype.updateNodeSelection = function () {
    var marker = this.marker;
    var nodeData = marker.shape ? this.nodeData : [];
    var MarkerShape = getMarker(marker.shape);
    var updateSelection = this.nodeSelection.setData(nodeData);
    updateSelection.exit.remove();
    var enterSelection = updateSelection.enter.append(Group);
    enterSelection.append(MarkerShape);
    this.nodeSelection = updateSelection.merge(enterSelection);
  };
  LineSeries.prototype.updateNodes = function () {
    if (!this.chart) {
      return;
    }
    var _a = this,
      marker = _a.marker,
      xKey = _a.xKey,
      yKey = _a.yKey,
      stroke = _a.stroke,
      strokeWidth = _a.strokeWidth;
    var MarkerShape = getMarker(marker.shape);
    var highlightedDatum = this.chart.highlightedDatum;
    var _b = this.highlightStyle,
      highlightFill = _b.fill,
      highlightStroke = _b.stroke;
    var markerFormatter = marker.formatter;
    var markerSize = marker.size;
    var markerStrokeWidth = marker.strokeWidth !== undefined ? marker.strokeWidth : strokeWidth;
    this.nodeSelection.selectByClass(MarkerShape).each(function (node, datum) {
      var highlighted = datum === highlightedDatum;
      var markerFill = highlighted && highlightFill !== undefined ? highlightFill : marker.fill;
      var markerStroke = highlighted && highlightStroke !== undefined ? highlightStroke : marker.stroke || stroke;
      var markerFormat = undefined;
      if (markerFormatter) {
        markerFormat = markerFormatter({
          datum: datum.seriesDatum,
          xKey: xKey,
          yKey: yKey,
          fill: markerFill,
          stroke: markerStroke,
          strokeWidth: markerStrokeWidth,
          size: markerSize,
          highlighted: highlighted
        });
      }
      node.fill = markerFormat && markerFormat.fill || markerFill;
      node.stroke = markerFormat && markerFormat.stroke || markerStroke;
      node.strokeWidth = markerFormat && markerFormat.strokeWidth !== undefined ? markerFormat.strokeWidth : markerStrokeWidth;
      node.size = markerFormat && markerFormat.size !== undefined ? markerFormat.size : markerSize;
      node.translationX = datum.point.x;
      node.translationY = datum.point.y;
      node.visible = marker.enabled && node.size > 0;
    });
  };
  LineSeries.prototype.getNodeData = function () {
    return this.nodeData;
  };
  LineSeries.prototype.fireNodeClickEvent = function (event, datum) {
    this.fireEvent({
      type: 'nodeClick',
      event: event,
      series: this,
      datum: datum.seriesDatum,
      xKey: this.xKey,
      yKey: this.yKey
    });
  };
  LineSeries.prototype.getTooltipHtml = function (nodeDatum) {
    var _a = this,
      xKey = _a.xKey,
      yKey = _a.yKey,
      xAxis = _a.xAxis,
      yAxis = _a.yAxis;
    if (!xKey || !yKey) {
      return '';
    }
    var _b = this,
      xName = _b.xName,
      yName = _b.yName,
      color = _b.stroke,
      tooltip = _b.tooltip;
    var _c = tooltip.renderer,
      tooltipRenderer = _c === void 0 ? this.tooltipRenderer : _c,
      tooltipFormat = tooltip.format;
    var datum = nodeDatum.seriesDatum;
    var xValue = datum[xKey];
    var yValue = datum[yKey];
    var xString = xAxis.formatDatum(xValue);
    var yString = yAxis.formatDatum(yValue);
    var title = this.title || yName;
    var content = xString + ': ' + yString;
    var defaults = {
      title: title,
      backgroundColor: color,
      content: content
    };
    if (tooltipFormat || tooltipRenderer) {
      var params = {
        datum: datum,
        xKey: xKey,
        xValue: xValue,
        xName: xName,
        yKey: yKey,
        yValue: yValue,
        yName: yName,
        title: title,
        color: color
      };
      if (tooltipFormat) {
        return toTooltipHtml({
          content: interpolate(tooltipFormat, params)
        }, defaults);
      }
      if (tooltipRenderer) {
        return toTooltipHtml(tooltipRenderer(params), defaults);
      }
    }
    return toTooltipHtml(defaults);
  };
  LineSeries.prototype.listSeriesItems = function (legendData) {
    var _a = this,
      id = _a.id,
      data = _a.data,
      xKey = _a.xKey,
      yKey = _a.yKey,
      yName = _a.yName,
      visible = _a.visible,
      title = _a.title,
      marker = _a.marker,
      stroke = _a.stroke,
      strokeOpacity = _a.strokeOpacity;
    if (data && data.length && xKey && yKey) {
      legendData.push({
        id: id,
        itemId: undefined,
        enabled: visible,
        label: {
          text: title || yName || yKey
        },
        marker: {
          shape: marker.shape,
          fill: marker.fill || 'rgba(0, 0, 0, 0)',
          stroke: marker.stroke || stroke || 'rgba(0, 0, 0, 0)',
          fillOpacity: 1,
          strokeOpacity: strokeOpacity
        }
      });
    }
  };
  LineSeries.className = 'LineSeries';
  LineSeries.type = 'line';
  __decorate$J([reactive('layoutChange')], LineSeries.prototype, "title", void 0);
  __decorate$J([reactive('update')], LineSeries.prototype, "stroke", void 0);
  __decorate$J([reactive('update')], LineSeries.prototype, "lineDash", void 0);
  __decorate$J([reactive('update')], LineSeries.prototype, "lineDashOffset", void 0);
  __decorate$J([reactive('update')], LineSeries.prototype, "strokeWidth", void 0);
  __decorate$J([reactive('update')], LineSeries.prototype, "strokeOpacity", void 0);
  __decorate$J([reactive('update')], LineSeries.prototype, "xName", void 0);
  __decorate$J([reactive('update')], LineSeries.prototype, "yName", void 0);
  return LineSeries;
}(CartesianSeries);
var __extends$1l =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$K =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ScatterSeriesTooltip = /** @class */function (_super) {
  __extends$1l(ScatterSeriesTooltip, _super);
  function ScatterSeriesTooltip() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  __decorate$K([reactive('change')], ScatterSeriesTooltip.prototype, "renderer", void 0);
  return ScatterSeriesTooltip;
}(SeriesTooltip);
var ScatterSeries = /** @class */function (_super) {
  __extends$1l(ScatterSeries, _super);
  function ScatterSeries() {
    var _this = _super.call(this) || this;
    _this.xDomain = [];
    _this.yDomain = [];
    _this.xData = [];
    _this.yData = [];
    _this.sizeData = [];
    _this.sizeScale = new LinearScale();
    _this.nodeSelection = Selection.select(_this.group).selectAll();
    _this.nodeData = [];
    _this.marker = new CartesianSeriesMarker();
    _this._fill = '#c16068';
    _this._stroke = '#874349';
    _this._strokeWidth = 2;
    _this._fillOpacity = 1;
    _this._strokeOpacity = 1;
    _this.highlightStyle = {
      fill: 'yellow'
    };
    _this.xKey = '';
    _this.yKey = '';
    _this.xName = '';
    _this.yName = '';
    _this.sizeName = 'Size';
    _this.labelName = 'Label';
    _this.tooltip = new ScatterSeriesTooltip();
    var marker = _this.marker;
    marker.addPropertyListener('shape', _this.onMarkerShapeChange, _this);
    marker.addEventListener('change', _this.update, _this);
    _this.addPropertyListener('xKey', function () {
      return _this.xData = [];
    });
    _this.addPropertyListener('yKey', function () {
      return _this.yData = [];
    });
    _this.addPropertyListener('sizeKey', function () {
      return _this.sizeData = [];
    });
    return _this;
  }
  Object.defineProperty(ScatterSeries.prototype, "fill", {
    get: function () {
      return this._fill;
    },
    set: function (value) {
      if (this._fill !== value) {
        this._fill = value;
        this.scheduleData();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ScatterSeries.prototype, "stroke", {
    get: function () {
      return this._stroke;
    },
    set: function (value) {
      if (this._stroke !== value) {
        this._stroke = value;
        this.scheduleData();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ScatterSeries.prototype, "strokeWidth", {
    get: function () {
      return this._strokeWidth;
    },
    set: function (value) {
      if (this._strokeWidth !== value) {
        this._strokeWidth = value;
        this.update();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ScatterSeries.prototype, "fillOpacity", {
    get: function () {
      return this._fillOpacity;
    },
    set: function (value) {
      if (this._fillOpacity !== value) {
        this._fillOpacity = value;
        this.scheduleLayout();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ScatterSeries.prototype, "strokeOpacity", {
    get: function () {
      return this._strokeOpacity;
    },
    set: function (value) {
      if (this._strokeOpacity !== value) {
        this._strokeOpacity = value;
        this.scheduleLayout();
      }
    },
    enumerable: true,
    configurable: true
  });
  ScatterSeries.prototype.onHighlightChange = function () {
    this.updateNodes();
  };
  ScatterSeries.prototype.onMarkerShapeChange = function () {
    this.nodeSelection = this.nodeSelection.setData([]);
    this.nodeSelection.exit.remove();
    this.update();
    this.fireEvent({
      type: 'legendChange'
    });
  };
  ScatterSeries.prototype.setColors = function (fills, strokes) {
    this.fill = fills[0];
    this.stroke = strokes[0];
    this.marker.fill = fills[0];
    this.marker.stroke = strokes[0];
  };
  ScatterSeries.prototype.processData = function () {
    var _a = this,
      xKey = _a.xKey,
      yKey = _a.yKey,
      sizeKey = _a.sizeKey,
      xAxis = _a.xAxis,
      yAxis = _a.yAxis,
      marker = _a.marker;
    var data = xKey && yKey && this.data ? this.data : [];
    this.xData = data.map(function (d) {
      return d[xKey];
    });
    this.yData = data.map(function (d) {
      return d[yKey];
    });
    if (sizeKey) {
      this.sizeData = data.map(function (d) {
        return d[sizeKey];
      });
    } else {
      this.sizeData = [];
    }
    this.sizeScale.domain = marker.domain ? marker.domain : finiteExtent(this.sizeData) || [1, 1];
    if (xAxis.scale instanceof ContinuousScale) {
      this.xDomain = this.fixNumericExtent(finiteExtent(this.xData), 'x');
    } else {
      this.xDomain = this.xData;
    }
    if (yAxis.scale instanceof ContinuousScale) {
      this.yDomain = this.fixNumericExtent(finiteExtent(this.yData), 'y');
    } else {
      this.yDomain = this.yData;
    }
    return true;
  };
  ScatterSeries.prototype.getDomain = function (direction) {
    if (direction === ChartAxisDirection.X) {
      return this.xDomain;
    } else {
      return this.yDomain;
    }
  };
  ScatterSeries.prototype.getNodeData = function () {
    return this.nodeData;
  };
  ScatterSeries.prototype.fireNodeClickEvent = function (event, datum) {
    this.fireEvent({
      type: 'nodeClick',
      event: event,
      series: this,
      datum: datum.seriesDatum,
      xKey: this.xKey,
      yKey: this.yKey,
      sizeKey: this.sizeKey
    });
  };
  ScatterSeries.prototype.generateNodeData = function () {
    if (!this.data) {
      return [];
    }
    var _a = this,
      xAxis = _a.xAxis,
      yAxis = _a.yAxis;
    var xScale = xAxis.scale;
    var yScale = yAxis.scale;
    var isContinuousX = xScale instanceof ContinuousScale;
    var isContinuousY = yScale instanceof ContinuousScale;
    var xOffset = (xScale.bandwidth || 0) / 2;
    var yOffset = (yScale.bandwidth || 0) / 2;
    var _b = this,
      data = _b.data,
      xData = _b.xData,
      yData = _b.yData,
      sizeData = _b.sizeData,
      sizeScale = _b.sizeScale,
      marker = _b.marker;
    sizeScale.range = [marker.size, marker.maxSize];
    var nodeData = [];
    for (var i = 0; i < xData.length; i++) {
      var xDatum = xData[i];
      var yDatum = yData[i];
      var noDatum = yDatum == null || isContinuousY && (isNaN(yDatum) || !isFinite(yDatum)) || xDatum == null || isContinuousX && (isNaN(xDatum) || !isFinite(xDatum));
      if (noDatum) {
        continue;
      }
      var x = xScale.convert(xDatum) + xOffset;
      if (!xAxis.inRange(x)) {
        continue;
      }
      nodeData.push({
        series: this,
        seriesDatum: data[i],
        point: {
          x: x,
          y: yScale.convert(yData[i]) + yOffset
        },
        size: sizeData.length ? sizeScale.convert(sizeData[i]) : marker.size
      });
    }
    return nodeData;
  };
  ScatterSeries.prototype.update = function () {
    var _a = this,
      visible = _a.visible,
      chart = _a.chart,
      xAxis = _a.xAxis,
      yAxis = _a.yAxis;
    this.group.visible = visible;
    if (!visible || !chart || chart.layoutPending || chart.dataPending || !xAxis || !yAxis) {
      return;
    }
    var nodeData = this.nodeData = this.generateNodeData();
    this.updateNodeSelection(nodeData);
    this.updateNodes();
  };
  ScatterSeries.prototype.updateNodeSelection = function (nodeData) {
    var MarkerShape = getMarker(this.marker.shape);
    var updateSelection = this.nodeSelection.setData(nodeData);
    updateSelection.exit.remove();
    var enterSelection = updateSelection.enter.append(Group);
    enterSelection.append(MarkerShape);
    this.nodeSelection = updateSelection.merge(enterSelection);
  };
  ScatterSeries.prototype.updateNodes = function () {
    if (!this.chart) {
      return;
    }
    var highlightedDatum = this.chart.highlightedDatum;
    var _a = this,
      marker = _a.marker,
      xKey = _a.xKey,
      yKey = _a.yKey,
      fill = _a.fill,
      stroke = _a.stroke,
      strokeWidth = _a.strokeWidth,
      fillOpacity = _a.fillOpacity,
      strokeOpacity = _a.strokeOpacity;
    var _b = this.highlightStyle,
      highlightFill = _b.fill,
      highlightStroke = _b.stroke;
    var markerStrokeWidth = marker.strokeWidth !== undefined ? marker.strokeWidth : strokeWidth;
    var MarkerShape = getMarker(marker.shape);
    var markerFormatter = marker.formatter;
    this.nodeSelection.selectByClass(MarkerShape).each(function (node, datum) {
      var highlighted = datum === highlightedDatum;
      var markerFill = highlighted && highlightFill !== undefined ? highlightFill : marker.fill || fill;
      var markerStroke = highlighted && highlightStroke !== undefined ? highlightStroke : marker.stroke || stroke;
      var markerFormat = undefined;
      if (markerFormatter) {
        markerFormat = markerFormatter({
          datum: datum.seriesDatum,
          xKey: xKey,
          yKey: yKey,
          fill: markerFill,
          stroke: markerStroke,
          strokeWidth: markerStrokeWidth,
          size: datum.size,
          highlighted: highlighted
        });
      }
      node.fill = markerFormat && markerFormat.fill || markerFill;
      node.stroke = markerFormat && markerFormat.stroke || markerStroke;
      node.strokeWidth = markerFormat && markerFormat.strokeWidth !== undefined ? markerFormat.strokeWidth : markerStrokeWidth;
      node.size = markerFormat && markerFormat.size !== undefined ? markerFormat.size : datum.size;
      node.fillOpacity = fillOpacity;
      node.strokeOpacity = strokeOpacity;
      node.translationX = datum.point.x;
      node.translationY = datum.point.y;
      node.visible = marker.enabled && node.size > 0;
    });
  };
  ScatterSeries.prototype.getTooltipHtml = function (nodeDatum) {
    var _a = this,
      xKey = _a.xKey,
      yKey = _a.yKey,
      xAxis = _a.xAxis,
      yAxis = _a.yAxis;
    if (!xKey || !yKey) {
      return '';
    }
    var _b = this,
      tooltip = _b.tooltip,
      xName = _b.xName,
      yName = _b.yName,
      sizeKey = _b.sizeKey,
      sizeName = _b.sizeName,
      labelKey = _b.labelKey,
      labelName = _b.labelName;
    var _c = tooltip.renderer,
      tooltipRenderer = _c === void 0 ? this.tooltipRenderer : _c;
    var color = this.marker.fill || this.fill || 'gray';
    var title = this.title || yName;
    var datum = nodeDatum.seriesDatum;
    var xValue = datum[xKey];
    var yValue = datum[yKey];
    var xString = xAxis.formatDatum(xValue);
    var yString = yAxis.formatDatum(yValue);
    var content = "<b>" + (xName || xKey) + "</b>: " + xString + ("<br><b>" + (yName || yKey) + "</b>: " + yString);
    if (sizeKey) {
      content += "<br><b>" + sizeName + "</b>: " + datum[sizeKey];
    }
    if (labelKey) {
      content = "<b>" + labelName + "</b>: " + datum[labelKey] + "<br>" + content;
    }
    var defaults = {
      title: title,
      backgroundColor: color,
      content: content
    };
    if (tooltipRenderer) {
      return toTooltipHtml(tooltipRenderer({
        datum: datum,
        xKey: xKey,
        xValue: xValue,
        xName: xName,
        yKey: yKey,
        yValue: yValue,
        yName: yName,
        sizeKey: sizeKey,
        sizeName: sizeName,
        labelKey: labelKey,
        labelName: labelName,
        title: title,
        color: color
      }), defaults);
    }
    return toTooltipHtml(defaults);
  };
  ScatterSeries.prototype.listSeriesItems = function (legendData) {
    var _a = this,
      id = _a.id,
      data = _a.data,
      xKey = _a.xKey,
      yKey = _a.yKey,
      yName = _a.yName,
      title = _a.title,
      visible = _a.visible,
      marker = _a.marker,
      fill = _a.fill,
      stroke = _a.stroke,
      fillOpacity = _a.fillOpacity,
      strokeOpacity = _a.strokeOpacity;
    if (data && data.length && xKey && yKey) {
      legendData.push({
        id: id,
        itemId: undefined,
        enabled: visible,
        label: {
          text: title || yName || yKey
        },
        marker: {
          shape: marker.shape,
          fill: marker.fill || fill || 'rgba(0, 0, 0, 0)',
          stroke: marker.stroke || stroke || 'rgba(0, 0, 0, 0)',
          fillOpacity: fillOpacity,
          strokeOpacity: strokeOpacity
        }
      });
    }
  };
  ScatterSeries.className = 'ScatterSeries';
  ScatterSeries.type = 'scatter';
  __decorate$K([reactive('layoutChange')], ScatterSeries.prototype, "title", void 0);
  __decorate$K([reactive('dataChange')], ScatterSeries.prototype, "xKey", void 0);
  __decorate$K([reactive('dataChange')], ScatterSeries.prototype, "yKey", void 0);
  __decorate$K([reactive('dataChange')], ScatterSeries.prototype, "sizeKey", void 0);
  __decorate$K([reactive('dataChange')], ScatterSeries.prototype, "labelKey", void 0);
  return ScatterSeries;
}(CartesianSeries);
var __extends$1m =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$L =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __spreadArrays$6 =  false || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
};
var HistogramSeriesNodeTag;
(function (HistogramSeriesNodeTag) {
  HistogramSeriesNodeTag[HistogramSeriesNodeTag["Bin"] = 0] = "Bin";
  HistogramSeriesNodeTag[HistogramSeriesNodeTag["Label"] = 1] = "Label";
})(HistogramSeriesNodeTag || (HistogramSeriesNodeTag = {}));
var HistogramSeriesLabel = /** @class */function (_super) {
  __extends$1m(HistogramSeriesLabel, _super);
  function HistogramSeriesLabel() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  __decorate$L([reactive('change')], HistogramSeriesLabel.prototype, "formatter", void 0);
  return HistogramSeriesLabel;
}(Label);
var defaultBinCount = 10;
var aggregationFunctions = {
  count: function (bin) {
    return bin.data.length;
  },
  sum: function (bin, yKey) {
    return bin.data.reduce(function (acc, datum) {
      return acc + datum[yKey];
    }, 0);
  },
  mean: function (bin, yKey) {
    return aggregationFunctions.sum(bin, yKey) / aggregationFunctions.count(bin, yKey);
  }
};
var HistogramBin = /** @class */function () {
  function HistogramBin(_a) {
    var domainMin = _a[0],
      domainMax = _a[1];
    this.data = [];
    this.aggregatedValue = 0;
    this.frequency = 0;
    this.domain = [domainMin, domainMax];
  }
  HistogramBin.prototype.addDatum = function (datum) {
    this.data.push(datum);
    this.frequency++;
  };
  Object.defineProperty(HistogramBin.prototype, "domainWidth", {
    get: function () {
      var _a = this.domain,
        domainMin = _a[0],
        domainMax = _a[1];
      return domainMax - domainMin;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(HistogramBin.prototype, "relativeHeight", {
    get: function () {
      return this.aggregatedValue / this.domainWidth;
    },
    enumerable: true,
    configurable: true
  });
  HistogramBin.prototype.calculateAggregatedValue = function (aggregationName, yKey) {
    if (!yKey) {
      // not having a yKey forces us into a frequency plot
      aggregationName = 'count';
    }
    var aggregationFunction = aggregationFunctions[aggregationName];
    this.aggregatedValue = aggregationFunction(this, yKey);
  };
  HistogramBin.prototype.getY = function (areaPlot) {
    return areaPlot ? this.relativeHeight : this.aggregatedValue;
  };
  return HistogramBin;
}();
var HistogramSeriesTooltip = /** @class */function (_super) {
  __extends$1m(HistogramSeriesTooltip, _super);
  function HistogramSeriesTooltip() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  __decorate$L([reactive('change')], HistogramSeriesTooltip.prototype, "renderer", void 0);
  return HistogramSeriesTooltip;
}(SeriesTooltip);
var HistogramSeries = /** @class */function (_super) {
  __extends$1m(HistogramSeries, _super);
  function HistogramSeries() {
    var _a;
    var _this = _super.call(this) || this;
    // Need to put column and label nodes into separate groups, because even though label nodes are
    // created after the column nodes, this only guarantees that labels will always be on top of columns
    // on the first run. If on the next run more columns are added, they might clip the labels
    // rendered during the previous run.
    _this.rectGroup = _this.group.appendChild(new Group());
    _this.textGroup = _this.group.appendChild(new Group());
    _this.rectSelection = Selection.select(_this.rectGroup).selectAll();
    _this.textSelection = Selection.select(_this.textGroup).selectAll();
    _this.binnedData = [];
    _this.xDomain = [];
    _this.yDomain = [];
    _this.label = new HistogramSeriesLabel();
    _this.seriesItemEnabled = true;
    _this.tooltip = new HistogramSeriesTooltip();
    _this.fill = undefined;
    _this.stroke = undefined;
    _this.fillOpacity = 1;
    _this.strokeOpacity = 1;
    _this.lineDash = undefined;
    _this.lineDashOffset = 0;
    _this.directionKeys = (_a = {}, _a[ChartAxisDirection.X] = ['xKey'], _a[ChartAxisDirection.Y] = ['yKey'], _a);
    _this._xKey = '';
    _this._areaPlot = false;
    _this._bins = undefined;
    _this._aggregation = 'count';
    _this._binCount = undefined;
    _this._xName = '';
    _this._yKey = '';
    _this._yName = '';
    _this._strokeWidth = 1;
    _this.highlightStyle = {
      fill: 'yellow'
    };
    _this.label.enabled = false;
    _this.label.addEventListener('change', _this.update, _this);
    return _this;
  }
  HistogramSeries.prototype.getKeys = function (direction) {
    var _this = this;
    var directionKeys = this.directionKeys;
    var keys = directionKeys && directionKeys[direction];
    var values = [];
    if (keys) {
      keys.forEach(function (key) {
        var value = _this[key];
        if (value) {
          if (Array.isArray(value)) {
            values.push.apply(values, value);
          } else {
            values.push(value);
          }
        }
      });
    }
    return values;
  };
  Object.defineProperty(HistogramSeries.prototype, "xKey", {
    get: function () {
      return this._xKey;
    },
    set: function (value) {
      if (this._xKey !== value) {
        this._xKey = value;
        this.scheduleData();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(HistogramSeries.prototype, "areaPlot", {
    get: function () {
      return this._areaPlot;
    },
    set: function (c) {
      this._areaPlot = c;
      this.scheduleData();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(HistogramSeries.prototype, "bins", {
    get: function () {
      return this._bins;
    },
    set: function (bins) {
      this._bins = bins;
      this.scheduleData();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(HistogramSeries.prototype, "aggregation", {
    get: function () {
      return this._aggregation;
    },
    set: function (aggregation) {
      this._aggregation = aggregation;
      this.scheduleData();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(HistogramSeries.prototype, "binCount", {
    get: function () {
      return this._binCount;
    },
    set: function (binCount) {
      this._binCount = binCount;
      this.scheduleData();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(HistogramSeries.prototype, "xName", {
    get: function () {
      return this._xName;
    },
    set: function (value) {
      if (this._xName !== value) {
        this._xName = value;
        this.update();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(HistogramSeries.prototype, "yKey", {
    get: function () {
      return this._yKey;
    },
    set: function (yKey) {
      this._yKey = yKey;
      this.seriesItemEnabled = true;
      this.scheduleData();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(HistogramSeries.prototype, "yName", {
    get: function () {
      return this._yName;
    },
    set: function (values) {
      this._yName = values;
      this.scheduleData();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(HistogramSeries.prototype, "strokeWidth", {
    get: function () {
      return this._strokeWidth;
    },
    set: function (value) {
      if (this._strokeWidth !== value) {
        this._strokeWidth = value;
        this.update();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(HistogramSeries.prototype, "shadow", {
    get: function () {
      return this._shadow;
    },
    set: function (value) {
      if (this._shadow !== value) {
        this._shadow = value;
        this.update();
      }
    },
    enumerable: true,
    configurable: true
  });
  HistogramSeries.prototype.onHighlightChange = function () {
    this.updateRectNodes();
  };
  HistogramSeries.prototype.setColors = function (fills, strokes) {
    this.fill = fills[0];
    this.stroke = strokes[0];
  };
  // During processData phase, used to unify different ways of the user specifying
  // the bins. Returns bins in format[[min1, max1], [min2, max2], ... ].
  HistogramSeries.prototype.deriveBins = function () {
    var _this = this;
    var _a = this,
      bins = _a.bins,
      binCount = _a.binCount;
    if (!this.data) {
      return [];
    }
    if (bins) {
      return bins;
    }
    var xData = this.data.map(function (datum) {
      return datum[_this.xKey];
    });
    var xDomain = this.fixNumericExtent(finiteExtent(xData), 'x');
    var binStarts = ticks(xDomain[0], xDomain[1], this.binCount || defaultBinCount);
    var binSize = tickStep(xDomain[0], xDomain[1], this.binCount || defaultBinCount);
    var firstBinEnd = binStarts[0];
    var expandStartToBin = function (n) {
      return [n, n + binSize];
    };
    return __spreadArrays$6([[firstBinEnd - binSize, firstBinEnd]], binStarts.map(expandStartToBin));
  };
  HistogramSeries.prototype.placeDataInBins = function (data) {
    var _this = this;
    var xKey = this.xKey;
    var derivedBins = this.deriveBins();
    // creating a sorted copy allows binning in O(n) rather than O(n²)
    // but at the expense of more temporary memory
    var sortedData = data.slice().sort(function (a, b) {
      if (a[xKey] < b[xKey]) {
        return -1;
      }
      if (a[xKey] > b[xKey]) {
        return 1;
      }
      return 0;
    });
    var currentBin = 0;
    var bins = [new HistogramBin(derivedBins[0])];
    loop: for (var i = 0, ln = sortedData.length; i < ln; i++) {
      var datum = sortedData[i];
      while (datum[xKey] > derivedBins[currentBin][1]) {
        currentBin++;
        var bin = derivedBins[currentBin];
        if (!bin) {
          break loop;
        }
        bins.push(new HistogramBin(bin));
      }
      bins[currentBin].addDatum(datum);
    }
    bins.forEach(function (b) {
      return b.calculateAggregatedValue(_this._aggregation, _this.yKey);
    });
    return bins;
  };
  Object.defineProperty(HistogramSeries.prototype, "xMax", {
    get: function () {
      var _this = this;
      return this.data && this.data.reduce(function (acc, datum) {
        return Math.max(acc, datum[_this.xKey]);
      }, Number.NEGATIVE_INFINITY);
    },
    enumerable: true,
    configurable: true
  });
  HistogramSeries.prototype.processData = function () {
    var _this = this;
    var _a = this,
      xKey = _a.xKey,
      data = _a.data;
    this.binnedData = this.placeDataInBins(xKey && data ? data : []);
    var yData = this.binnedData.map(function (b) {
      return b.getY(_this.areaPlot);
    });
    var yMinMax = numericExtent(yData);
    this.yDomain = this.fixNumericExtent([0, yMinMax ? yMinMax[1] : 1], 'y');
    var firstBin = this.binnedData[0];
    var lastBin = this.binnedData[this.binnedData.length - 1];
    var xMin = firstBin.domain[0];
    var xMax = lastBin.domain[1];
    this.xDomain = [xMin, xMax];
    this.fireEvent({
      type: 'dataProcessed'
    });
    return true;
  };
  HistogramSeries.prototype.getDomain = function (direction) {
    if (direction === ChartAxisDirection.X) {
      return this.xDomain;
    } else {
      return this.yDomain;
    }
  };
  HistogramSeries.prototype.fireNodeClickEvent = function (event, datum) {
    this.fireEvent({
      type: 'nodeClick',
      event: event,
      series: this,
      datum: datum.seriesDatum,
      xKey: this.xKey
    });
  };
  HistogramSeries.prototype.update = function () {
    var _a = this,
      visible = _a.visible,
      chart = _a.chart,
      xAxis = _a.xAxis,
      yAxis = _a.yAxis;
    this.group.visible = visible;
    if (!xAxis || !yAxis || !visible || !chart || chart.layoutPending || chart.dataPending) {
      return;
    }
    var nodeData = this.generateNodeData();
    this.updateRectSelection(nodeData);
    this.updateRectNodes();
    this.updateTextSelection(nodeData);
    this.updateTextNodes();
  };
  HistogramSeries.prototype.generateNodeData = function () {
    var _this = this;
    if (!this.seriesItemEnabled) {
      return [];
    }
    var _a = this,
      xScale = _a.xAxis.scale,
      yScale = _a.yAxis.scale,
      fill = _a.fill,
      stroke = _a.stroke,
      strokeWidth = _a.strokeWidth;
    var nodeData = [];
    var defaultLabelFormatter = function (params) {
      return String(params.value);
    };
    var _b = this.label,
      _c = _b.formatter,
      labelFormatter = _c === void 0 ? defaultLabelFormatter : _c,
      labelFontStyle = _b.fontStyle,
      labelFontWeight = _b.fontWeight,
      labelFontSize = _b.fontSize,
      labelFontFamily = _b.fontFamily,
      labelColor = _b.color;
    this.binnedData.forEach(function (binOfData) {
      var total = binOfData.aggregatedValue,
        frequency = binOfData.frequency,
        _a = binOfData.domain,
        xDomainMin = _a[0],
        xDomainMax = _a[1],
        relativeHeight = binOfData.relativeHeight;
      var xMinPx = xScale.convert(xDomainMin),
        xMaxPx = xScale.convert(xDomainMax),
        // note: assuming can't be negative:
        y = _this.areaPlot ? relativeHeight : _this.yKey ? total : frequency,
        yZeroPx = yScale.convert(0),
        yMaxPx = yScale.convert(y),
        w = xMaxPx - xMinPx,
        h = Math.abs(yMaxPx - yZeroPx);
      var selectionDatumLabel = y !== 0 ? {
        text: labelFormatter({
          value: binOfData.aggregatedValue
        }),
        fontStyle: labelFontStyle,
        fontWeight: labelFontWeight,
        fontSize: labelFontSize,
        fontFamily: labelFontFamily,
        fill: labelColor,
        x: xMinPx + w / 2,
        y: yMaxPx + h / 2
      } : undefined;
      nodeData.push({
        series: _this,
        seriesDatum: binOfData,
        // since each selection is an aggregation of multiple data.
        x: xMinPx,
        y: yMaxPx,
        width: w,
        height: h,
        fill: fill,
        stroke: stroke,
        strokeWidth: strokeWidth,
        label: selectionDatumLabel
      });
    });
    return nodeData;
  };
  HistogramSeries.prototype.updateRectSelection = function (nodeData) {
    var updateRects = this.rectSelection.setData(nodeData);
    updateRects.exit.remove();
    var enterRects = updateRects.enter.append(Rect).each(function (rect) {
      rect.tag = HistogramSeriesNodeTag.Bin;
      rect.crisp = true;
    });
    this.rectSelection = updateRects.merge(enterRects);
  };
  HistogramSeries.prototype.updateRectNodes = function () {
    var _this = this;
    if (!this.chart) {
      return;
    }
    var highlightedDatum = this.chart.highlightedDatum;
    var _a = this,
      fillOpacity = _a.fillOpacity,
      strokeOpacity = _a.strokeOpacity,
      shadow = _a.shadow,
      _b = _a.highlightStyle,
      fill = _b.fill,
      stroke = _b.stroke;
    this.rectSelection.each(function (rect, datum) {
      var highlighted = datum === highlightedDatum;
      rect.x = datum.x;
      rect.y = datum.y;
      rect.width = datum.width;
      rect.height = datum.height;
      rect.fill = highlighted && fill !== undefined ? fill : datum.fill;
      rect.stroke = highlighted && stroke !== undefined ? stroke : datum.stroke;
      rect.fillOpacity = fillOpacity;
      rect.strokeOpacity = strokeOpacity;
      rect.strokeWidth = datum.strokeWidth;
      rect.lineDash = _this.lineDash;
      rect.lineDashOffset = _this.lineDashOffset;
      rect.fillShadow = shadow;
      rect.visible = datum.height > 0; // prevent stroke from rendering for zero height columns
    });
  };

  HistogramSeries.prototype.updateTextSelection = function (nodeData) {
    var updateTexts = this.textSelection.setData(nodeData);
    updateTexts.exit.remove();
    var enterTexts = updateTexts.enter.append(Text).each(function (text) {
      text.tag = HistogramSeriesNodeTag.Label;
      text.pointerEvents = PointerEvents.None;
      text.textAlign = 'center';
      text.textBaseline = 'middle';
    });
    this.textSelection = updateTexts.merge(enterTexts);
  };
  HistogramSeries.prototype.updateTextNodes = function () {
    var labelEnabled = this.label.enabled;
    this.textSelection.each(function (text, datum) {
      var label = datum.label;
      if (label && labelEnabled) {
        text.text = label.text;
        text.x = label.x;
        text.y = label.y;
        text.fontStyle = label.fontStyle;
        text.fontWeight = label.fontWeight;
        text.fontSize = label.fontSize;
        text.fontFamily = label.fontFamily;
        text.fill = label.fill;
        text.visible = true;
      } else {
        text.visible = false;
      }
    });
  };
  HistogramSeries.prototype.getTooltipHtml = function (nodeDatum) {
    var _a = this,
      xKey = _a.xKey,
      yKey = _a.yKey,
      xAxis = _a.xAxis,
      yAxis = _a.yAxis;
    if (!xKey) {
      return '';
    }
    var _b = this,
      xName = _b.xName,
      yName = _b.yName,
      color = _b.fill,
      tooltip = _b.tooltip,
      aggregation = _b.aggregation;
    var _c = tooltip.renderer,
      tooltipRenderer = _c === void 0 ? this.tooltipRenderer : _c;
    var bin = nodeDatum.seriesDatum;
    var aggregatedValue = bin.aggregatedValue,
      frequency = bin.frequency,
      _d = bin.domain,
      rangeMin = _d[0],
      rangeMax = _d[1];
    var title = (xName || xKey) + ": " + xAxis.formatDatum(rangeMin) + " - " + xAxis.formatDatum(rangeMax);
    var content = yKey ? "<b>" + (yName || yKey) + " (" + aggregation + ")</b>: " + yAxis.formatDatum(aggregatedValue) + "<br>" : '';
    content += "<b>Frequency</b>: " + frequency;
    var defaults = {
      title: title,
      backgroundColor: color,
      content: content
    };
    if (tooltipRenderer) {
      return toTooltipHtml(tooltipRenderer({
        datum: bin,
        xKey: xKey,
        xValue: bin.domain,
        xName: xName,
        yKey: yKey,
        yValue: bin.aggregatedValue,
        yName: yName,
        color: color
      }), defaults);
    }
    return toTooltipHtml(defaults);
  };
  HistogramSeries.prototype.listSeriesItems = function (legendData) {
    var _a = this,
      id = _a.id,
      data = _a.data,
      yKey = _a.yKey,
      yName = _a.yName,
      seriesItemEnabled = _a.seriesItemEnabled,
      fill = _a.fill,
      stroke = _a.stroke,
      fillOpacity = _a.fillOpacity,
      strokeOpacity = _a.strokeOpacity;
    if (data && data.length) {
      legendData.push({
        id: id,
        itemId: yKey,
        enabled: seriesItemEnabled,
        label: {
          text: yName || yKey || 'Frequency'
        },
        marker: {
          fill: fill || 'rgba(0, 0, 0, 0)',
          stroke: stroke || 'rgba(0, 0, 0, 0)',
          fillOpacity: fillOpacity,
          strokeOpacity: strokeOpacity
        }
      });
    }
  };
  HistogramSeries.prototype.toggleSeriesItem = function (itemId, enabled) {
    if (itemId === this.yKey) {
      this.seriesItemEnabled = enabled;
    }
    this.scheduleData();
  };
  HistogramSeries.className = 'HistogramSeries';
  HistogramSeries.type = 'histogram';
  __decorate$L([reactive('dataChange')], HistogramSeries.prototype, "fill", void 0);
  __decorate$L([reactive('dataChange')], HistogramSeries.prototype, "stroke", void 0);
  __decorate$L([reactive('layoutChange')], HistogramSeries.prototype, "fillOpacity", void 0);
  __decorate$L([reactive('layoutChange')], HistogramSeries.prototype, "strokeOpacity", void 0);
  __decorate$L([reactive('update')], HistogramSeries.prototype, "lineDash", void 0);
  __decorate$L([reactive('update')], HistogramSeries.prototype, "lineDashOffset", void 0);
  return HistogramSeries;
}(CartesianSeries);
var __extends$1n =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$M =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HierarchySeries = /** @class */function (_super) {
  __extends$1n(HierarchySeries, _super);
  function HierarchySeries() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.data = undefined;
    return _this;
  }
  __decorate$M([reactive('dataChange')], HierarchySeries.prototype, "data", void 0);
  return HierarchySeries;
}(Series);
var __extends$1o =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$N =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DropShadow = /** @class */function (_super) {
  __extends$1o(DropShadow, _super);
  function DropShadow() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.enabled = true;
    _this.color = 'rgba(0, 0, 0, 0.5)';
    _this.xOffset = 0;
    _this.yOffset = 0;
    _this.blur = 5;
    return _this;
  }
  __decorate$N([reactive('change')], DropShadow.prototype, "enabled", void 0);
  __decorate$N([reactive('change')], DropShadow.prototype, "color", void 0);
  __decorate$N([reactive('change')], DropShadow.prototype, "xOffset", void 0);
  __decorate$N([reactive('change')], DropShadow.prototype, "yOffset", void 0);
  __decorate$N([reactive('change')], DropShadow.prototype, "blur", void 0);
  return DropShadow;
}(Observable);
function slice(parent, x0, y0, x1, y1) {
  var nodes = parent.children;
  var k = parent.value && (y1 - y0) / parent.value;
  nodes.forEach(function (node) {
    node.x0 = x0;
    node.x1 = x1;
    node.y0 = y0;
    node.y1 = y0 += node.value * k;
  });
}
function dice(parent, x0, y0, x1, y1) {
  var nodes = parent.children;
  var k = parent.value && (x1 - x0) / parent.value;
  nodes.forEach(function (node) {
    node.x0 = x0;
    node.x1 = x0 += node.value * k;
    node.y0 = y0;
    node.y1 = y1;
  });
}
function roundNode(node) {
  node.x0 = Math.round(node.x0);
  node.y0 = Math.round(node.y0);
  node.x1 = Math.round(node.x1);
  node.y1 = Math.round(node.y1);
}
function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
  var rows = [];
  var nodes = parent.children;
  var n = nodes.length;
  var value = parent.value;
  var i0 = 0;
  var i1 = 0;
  var dx;
  var dy;
  var nodeValue;
  var sumValue;
  var minValue;
  var maxValue;
  var newRatio;
  var minRatio;
  var alpha;
  var beta;
  while (i0 < n) {
    dx = x1 - x0;
    dy = y1 - y0;
    // Find the next non-empty node.
    do {
      sumValue = nodes[i1++].value;
    } while (!sumValue && i1 < n);
    minValue = maxValue = sumValue;
    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
    beta = sumValue * sumValue * alpha;
    minRatio = Math.max(maxValue / beta, beta / minValue);
    // Keep adding nodes while the aspect ratio maintains or improves.
    for (; i1 < n; ++i1) {
      nodeValue = nodes[i1].value;
      sumValue += nodeValue;
      if (nodeValue < minValue) {
        minValue = nodeValue;
      }
      if (nodeValue > maxValue) {
        maxValue = nodeValue;
      }
      beta = sumValue * sumValue * alpha;
      newRatio = Math.max(maxValue / beta, beta / minValue);
      if (newRatio > minRatio) {
        sumValue -= nodeValue;
        break;
      }
      minRatio = newRatio;
    }
    // Position and record the row orientation.
    var row = {
      value: sumValue,
      dice: dx < dy,
      children: nodes.slice(i0, i1)
    };
    rows.push(row);
    if (row.dice) {
      dice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);
    } else {
      slice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
    }
    value -= sumValue;
    i0 = i1;
  }
  return rows;
}
var phi = (1 + Math.sqrt(5)) / 2;
var squarify = function custom(ratio) {
  function squarify(parent, x0, y0, x1, y1) {
    squarifyRatio(ratio, parent, x0, y0, x1, y1);
  }
  squarify.ratio = function (x) {
    return custom((x = +x) > 1 ? x : 1);
  };
  return squarify;
}(phi);
var Treemap = /** @class */function () {
  function Treemap() {
    this.paddingStack = [0];
    this.dx = 1;
    this.dy = 1;
    this.round = true;
    this.tile = squarify;
    this.paddingInner = function (_) {
      return 0;
    };
    this.paddingTop = function (_) {
      return 0;
    };
    this.paddingRight = function (_) {
      return 0;
    };
    this.paddingBottom = function (_) {
      return 0;
    };
    this.paddingLeft = function (_) {
      return 0;
    };
  }
  Object.defineProperty(Treemap.prototype, "size", {
    get: function () {
      return [this.dx, this.dy];
    },
    set: function (size) {
      this.dx = size[0];
      this.dy = size[1];
    },
    enumerable: true,
    configurable: true
  });
  Treemap.prototype.processData = function (root) {
    root.x0 = 0;
    root.y0 = 0;
    root.x1 = this.dx;
    root.y1 = this.dy;
    root.eachBefore(this.positionNode.bind(this));
    this.paddingStack = [0];
    if (this.round) {
      root.eachBefore(roundNode);
    }
    return root;
  };
  Treemap.prototype.positionNode = function (node) {
    var p = this.paddingStack[node.depth];
    var x0 = node.x0 + p;
    var y0 = node.y0 + p;
    var x1 = node.x1 - p;
    var y1 = node.y1 - p;
    if (x1 < x0) {
      x0 = x1 = (x0 + x1) / 2;
    }
    if (y1 < y0) {
      y0 = y1 = (y0 + y1) / 2;
    }
    node.x0 = x0;
    node.y0 = y0;
    node.x1 = x1;
    node.y1 = y1;
    if (node.children) {
      p = this.paddingStack[node.depth + 1] = this.paddingInner(node) / 2;
      x0 += this.paddingLeft(node) - p;
      y0 += this.paddingTop(node) - p;
      x1 -= this.paddingRight(node) - p;
      y1 -= this.paddingBottom(node) - p;
      if (x1 < x0) {
        x0 = x1 = (x0 + x1) / 2;
      }
      if (y1 < y0) {
        y0 = y1 = (y0 + y1) / 2;
      }
      this.tile(node, x0, y0, x1, y1);
    }
  };
  return Treemap;
}();
var HierarchyNode = /** @class */function () {
  function HierarchyNode(data) {
    this.value = 0;
    this.depth = 0;
    this.height = 0;
    this.parent = undefined;
    this.children = undefined;
    this.data = data;
  }
  HierarchyNode.prototype.countFn = function (node) {
    var sum = 0,
      children = node.children;
    if (!children || !children.length) {
      sum = 1;
    } else {
      var i = children.length;
      while (--i >= 0) {
        sum += children[i].value;
      }
    }
    node.value = sum;
  };
  HierarchyNode.prototype.count = function () {
    return this.eachAfter(this.countFn);
  };
  HierarchyNode.prototype.each = function (callback, scope) {
    var _this = this;
    var index = -1;
    this.iterator(function (node) {
      callback.call(scope, node, ++index, _this);
    });
    return this;
  };
  /**
   * Invokes the given callback for each node in post-order traversal.
   * @param callback
   * @param scope
   */
  HierarchyNode.prototype.eachAfter = function (callback, scope) {
    var node = this;
    var nodes = [node];
    var next = [];
    while (node = nodes.pop()) {
      next.push(node);
      var children = node.children;
      if (children) {
        for (var i = 0, n = children.length; i < n; ++i) {
          nodes.push(children[i]);
        }
      }
    }
    var index = -1;
    while (node = next.pop()) {
      callback.call(scope, node, ++index, this);
    }
    return this;
  };
  /**
   * Invokes the given callback for each node in pre-order traversal.
   * @param callback
   * @param scope
   */
  HierarchyNode.prototype.eachBefore = function (callback, scope) {
    var node = this;
    var nodes = [node];
    var index = -1;
    while (node = nodes.pop()) {
      callback.call(scope, node, ++index, this);
      var children = node.children;
      if (children) {
        for (var i = children.length - 1; i >= 0; --i) {
          var child = children[i];
          nodes.push(child);
        }
      }
    }
    return this;
  };
  HierarchyNode.prototype.find = function (callback, scope) {
    var _this = this;
    var index = -1;
    var result;
    this.iterator(function (node) {
      if (callback.call(scope, node, ++index, _this)) {
        result = node;
        return false;
      }
    });
    return result;
  };
  HierarchyNode.prototype.sum = function (value) {
    return this.eachAfter(function (node) {
      var sum = +value(node.data) || 0;
      var children = node.children;
      if (children) {
        var i = children.length;
        while (--i >= 0) {
          sum += children[i].value;
        }
      }
      node.value = sum;
    });
  };
  HierarchyNode.prototype.sort = function (compare) {
    return this.eachBefore(function (node) {
      if (node.children) {
        node.children.sort(compare);
      }
    });
  };
  HierarchyNode.prototype.path = function (end) {
    var start = this;
    var ancestor = leastCommonAncestor(start, end);
    var nodes = [start];
    while (start !== ancestor) {
      start = start.parent;
      nodes.push(start);
    }
    var k = nodes.length;
    while (end !== ancestor) {
      nodes.splice(k, 0, end);
      end = end.parent;
    }
    // const otherBranch = [];
    // while (end !== ancestor) {
    //     otherBranch.push(end);
    //     end = end.parent;
    // }
    // nodes.concat(otherBranch.reverse());
    return nodes;
  };
  HierarchyNode.prototype.ancestors = function () {
    var node = this;
    var nodes = [node];
    while (node = node.parent) {
      nodes.push(node);
    }
    return nodes;
  };
  HierarchyNode.prototype.descendants = function () {
    var nodes = [];
    this.iterator(function (node) {
      return nodes.push(node);
    });
    return nodes;
  };
  HierarchyNode.prototype.leaves = function () {
    var leaves = [];
    this.eachBefore(function (node) {
      if (!node.children) {
        leaves.push(node);
      }
    });
    return leaves;
  };
  HierarchyNode.prototype.links = function () {
    var root = this;
    var links = [];
    root.each(function (node) {
      if (node !== root) {
        // Don’t include the root’s parent, if any.
        links.push({
          source: node.parent,
          target: node
        });
      }
    });
    return links;
  };
  HierarchyNode.prototype.copy = function () {
    // TODO
  };
  HierarchyNode.prototype.iterator = function (callback) {
    var node = this;
    var next = [node];
    var current;
    doLoop: do {
      current = next.reverse();
      next = [];
      while (node = current.pop()) {
        if (callback(node) === false) {
          break doLoop;
        }
        var children = node.children;
        if (children) {
          for (var i = 0, n = children.length; i < n; ++i) {
            next.push(children[i]);
          }
        }
      }
    } while (next.length);
  };
  return HierarchyNode;
}();
function hierarchy(data, children) {
  if (data instanceof Map) {
    data = [undefined, data];
    if (children === undefined) {
      children = mapChildren;
    }
  } else if (children === undefined) {
    children = objectChildren;
  }
  var root = new HierarchyNode(data);
  var nodes = [root];
  var node;
  var child, childs, i, n;
  while (node = nodes.pop()) {
    if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {
      node.children = childs;
      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = childs[i] = new HierarchyNode(childs[i]));
        child.parent = node;
        child.depth = node.depth + 1;
      }
    }
  }
  return root.eachBefore(computeHeight);
}
function computeHeight(node) {
  var height = 0;
  do {
    node.height = height;
  } while ((node = node.parent) && node.height < ++height);
}
function mapChildren(d) {
  return Array.isArray(d) ? d[1] : undefined;
}
function objectChildren(d) {
  return d.children;
}
function leastCommonAncestor(a, b) {
  if (!(a && b)) {
    return undefined;
  }
  if (a === b) {
    return a;
  }
  var aNodes = a.ancestors();
  var bNodes = b.ancestors();
  var c = undefined;
  a = aNodes.pop();
  b = bNodes.pop();
  while (a === b) {
    c = a;
    a = aNodes.pop();
    b = bNodes.pop();
  }
  return c;
}
var __extends$1p =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$O =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TreemapSeriesTooltip = /** @class */function (_super) {
  __extends$1p(TreemapSeriesTooltip, _super);
  function TreemapSeriesTooltip() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  __decorate$O([reactive('change')], TreemapSeriesTooltip.prototype, "renderer", void 0);
  return TreemapSeriesTooltip;
}(SeriesTooltip);
var TreemapSeriesLabel = /** @class */function (_super) {
  __extends$1p(TreemapSeriesLabel, _super);
  function TreemapSeriesLabel() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.padding = 10;
    return _this;
  }
  __decorate$O([reactive('change')], TreemapSeriesLabel.prototype, "padding", void 0);
  return TreemapSeriesLabel;
}(Label);
var TextNodeTag;
(function (TextNodeTag) {
  TextNodeTag[TextNodeTag["Name"] = 0] = "Name";
  TextNodeTag[TextNodeTag["Value"] = 1] = "Value";
})(TextNodeTag || (TextNodeTag = {}));
var TreemapSeries = /** @class */function (_super) {
  __extends$1p(TreemapSeries, _super);
  function TreemapSeries() {
    var _this = _super.call(this) || this;
    _this.groupSelection = Selection.select(_this.group).selectAll();
    _this.labelMap = new Map();
    _this.layout = new Treemap();
    _this.title = function () {
      var label = new TreemapSeriesLabel();
      label.color = 'white';
      label.fontWeight = 'bold';
      label.fontSize = 12;
      label.fontFamily = 'Verdana, sans-serif';
      label.padding = 15;
      return label;
    }();
    _this.subtitle = function () {
      var label = new TreemapSeriesLabel();
      label.color = 'white';
      label.fontSize = 9;
      label.fontFamily = 'Verdana, sans-serif';
      label.padding = 13;
      return label;
    }();
    _this.labels = {
      large: function () {
        var label = new Label();
        label.color = 'white';
        label.fontWeight = 'bold';
        label.fontSize = 18;
        return label;
      }(),
      medium: function () {
        var label = new Label();
        label.color = 'white';
        label.fontWeight = 'bold';
        label.fontSize = 14;
        return label;
      }(),
      small: function () {
        var label = new Label();
        label.color = 'white';
        label.fontWeight = 'bold';
        label.fontSize = 10;
        return label;
      }(),
      color: function () {
        var label = new Label();
        label.color = 'white';
        return label;
      }()
    };
    _this._nodePadding = 2;
    _this.labelKey = 'label';
    _this.sizeKey = 'size';
    _this.colorKey = 'color';
    _this.colorDomain = [-5, 5];
    _this.colorRange = ['#cb4b3f', '#6acb64'];
    _this.colorParents = false;
    _this.gradient = true;
    _this.colorName = 'Change';
    _this.rootName = 'Root';
    _this._shadow = function () {
      var shadow = new DropShadow();
      shadow.color = 'rgba(0, 0, 0, 0.4)';
      shadow.xOffset = 1.5;
      shadow.yOffset = 1.5;
      return shadow;
    }();
    _this.highlightStyle = {
      fill: 'yellow'
    };
    _this.tooltip = new TreemapSeriesTooltip();
    _this.shadow.addEventListener('change', _this.update, _this);
    _this.title.addEventListener('change', _this.update, _this);
    _this.subtitle.addEventListener('change', _this.update, _this);
    _this.labels.small.addEventListener('change', _this.update, _this);
    _this.labels.medium.addEventListener('change', _this.update, _this);
    _this.labels.large.addEventListener('change', _this.update, _this);
    _this.labels.color.addEventListener('change', _this.update, _this);
    return _this;
  }
  Object.defineProperty(TreemapSeries.prototype, "nodePadding", {
    get: function () {
      return this._nodePadding;
    },
    set: function (value) {
      if (this._nodePadding !== value) {
        this._nodePadding = value;
        this.updateLayoutPadding();
        this.update();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TreemapSeries.prototype, "shadow", {
    get: function () {
      return this._shadow;
    },
    set: function (value) {
      if (this._shadow !== value) {
        this._shadow = value;
        this.update();
      }
    },
    enumerable: true,
    configurable: true
  });
  TreemapSeries.prototype.onHighlightChange = function () {
    this.updateNodes();
  };
  TreemapSeries.prototype.updateLayoutPadding = function () {
    var _a = this,
      title = _a.title,
      subtitle = _a.subtitle,
      nodePadding = _a.nodePadding,
      labelKey = _a.labelKey;
    this.layout.paddingRight = function (_) {
      return nodePadding;
    };
    this.layout.paddingBottom = function (_) {
      return nodePadding;
    };
    this.layout.paddingLeft = function (_) {
      return nodePadding;
    };
    this.layout.paddingTop = function (node) {
      var name = node.data[labelKey] || '';
      if (node.children) {
        name = name.toUpperCase();
      }
      var font = node.depth > 1 ? subtitle : title;
      var textSize = HdpiCanvas.getTextSize(name, [font.fontWeight, font.fontSize + 'px', font.fontFamily].join(' ').trim());
      var innerNodeWidth = node.x1 - node.x0 - nodePadding * 2;
      var hasTitle = node.depth > 0 && node.children && textSize.width <= innerNodeWidth;
      node.hasTitle = hasTitle;
      return hasTitle ? textSize.height + nodePadding * 2 : nodePadding;
    };
  };
  TreemapSeries.prototype.processData = function () {
    if (!this.data) {
      return false;
    }
    var _a = this,
      data = _a.data,
      sizeKey = _a.sizeKey,
      labelKey = _a.labelKey,
      colorKey = _a.colorKey,
      colorDomain = _a.colorDomain,
      colorRange = _a.colorRange,
      colorParents = _a.colorParents;
    var dataRoot;
    if (sizeKey) {
      dataRoot = hierarchy(data).sum(function (datum) {
        return datum.children ? 1 : datum[sizeKey];
      });
    } else {
      dataRoot = hierarchy(data).sum(function (datum) {
        return datum.children ? 0 : 1;
      });
    }
    this.dataRoot = dataRoot;
    var colorScale = new LinearScale();
    colorScale.domain = colorDomain;
    colorScale.range = colorRange;
    var series = this;
    function traverse(root, depth) {
      if (depth === void 0) {
        depth = 0;
      }
      var children = root.children,
        data = root.data;
      var label = data[labelKey];
      var colorValue = colorKey ? data[colorKey] : depth;
      root.series = series;
      root.fill = !children || colorParents ? colorScale.convert(colorValue) : '#272931';
      root.colorValue = colorValue;
      if (label) {
        root.label = children ? label.toUpperCase() : label;
      } else {
        root.label = '';
      }
      if (children) {
        children.forEach(function (child) {
          return traverse(child, depth + 1);
        });
      }
    }
    traverse(this.dataRoot);
    return true;
  };
  TreemapSeries.prototype.getLabelCenterX = function (datum) {
    return (datum.x0 + datum.x1) / 2;
  };
  TreemapSeries.prototype.getLabelCenterY = function (datum) {
    return (datum.y0 + datum.y1) / 2 + 2;
  };
  TreemapSeries.prototype.update = function () {
    var _a = this,
      chart = _a.chart,
      dataRoot = _a.dataRoot;
    if (!chart || !dataRoot) {
      return;
    }
    var seriesRect = chart.getSeriesRect();
    if (!seriesRect) {
      return;
    }
    this.layout.size = [seriesRect.width, seriesRect.height];
    this.updateLayoutPadding();
    var descendants = this.layout.processData(dataRoot).descendants();
    var updateGroups = this.groupSelection.setData(descendants);
    updateGroups.exit.remove();
    var enterGroups = updateGroups.enter.append(Group);
    enterGroups.append(Rect);
    enterGroups.append(Text).each(function (node) {
      return node.tag = TextNodeTag.Name;
    });
    enterGroups.append(Text).each(function (node) {
      return node.tag = TextNodeTag.Value;
    });
    this.groupSelection = updateGroups.merge(enterGroups);
    this.updateNodes();
  };
  TreemapSeries.prototype.updateNodes = function () {
    var _this = this;
    var chart = this.chart;
    if (!chart) {
      return;
    }
    var highlightedDatum = chart.highlightedDatum;
    var _a = this.highlightStyle,
      highlightFill = _a.fill,
      highlightStroke = _a.stroke;
    var _b = this,
      colorKey = _b.colorKey,
      labelMap = _b.labelMap,
      nodePadding = _b.nodePadding,
      title = _b.title,
      subtitle = _b.subtitle,
      labels = _b.labels,
      shadow = _b.shadow,
      gradient = _b.gradient;
    this.groupSelection.selectByClass(Rect).each(function (rect, datum) {
      var highlighted = datum === highlightedDatum;
      var fill = highlighted && highlightFill !== undefined ? highlightFill : datum.fill;
      var stroke = highlighted && highlightStroke !== undefined ? highlightStroke : datum.depth < 2 ? undefined : 'black';
      rect.fill = fill;
      rect.stroke = stroke;
      rect.strokeWidth = 1;
      rect.crisp = true;
      rect.gradient = gradient;
      rect.x = datum.x0;
      rect.y = datum.y0;
      rect.width = datum.x1 - datum.x0;
      rect.height = datum.y1 - datum.y0;
    });
    this.groupSelection.selectByTag(TextNodeTag.Name).each(function (text, datum, index) {
      var isLeaf = !datum.children;
      var innerNodeWidth = datum.x1 - datum.x0 - nodePadding * 2;
      var innerNodeHeight = datum.y1 - datum.y0 - nodePadding * 2;
      var hasTitle = datum.hasTitle;
      var highlighted = datum === highlightedDatum;
      var label;
      if (isLeaf) {
        if (innerNodeWidth > 40 && innerNodeHeight > 40) {
          label = labels.large;
        } else if (innerNodeWidth > 20 && innerNodeHeight > 20) {
          label = labels.medium;
        } else {
          label = labels.small;
        }
      } else {
        if (datum.depth > 1) {
          label = subtitle;
        } else {
          label = title;
        }
      }
      text.fontWeight = label.fontWeight;
      text.fontSize = label.fontSize;
      text.fontFamily = label.fontFamily;
      text.textBaseline = isLeaf ? 'bottom' : hasTitle ? 'top' : 'middle';
      text.textAlign = hasTitle ? 'left' : 'center';
      text.text = datum.label;
      var textBBox = text.computeBBox();
      var hasLabel = isLeaf && !!textBBox && textBBox.width <= innerNodeWidth && textBBox.height * 2 + 8 <= innerNodeHeight;
      labelMap.set(index, text);
      text.fill = highlighted ? 'black' : label.color;
      text.fillShadow = hasLabel && !highlighted ? shadow : undefined;
      text.visible = hasTitle || hasLabel;
      if (hasTitle) {
        text.x = datum.x0 + nodePadding;
        text.y = datum.y0 + nodePadding;
      } else {
        text.x = _this.getLabelCenterX(datum);
        text.y = _this.getLabelCenterY(datum);
      }
    });
    this.groupSelection.selectByTag(TextNodeTag.Value).each(function (text, datum, index) {
      var isLeaf = !datum.children;
      var innerNodeWidth = datum.x1 - datum.x0 - nodePadding * 2;
      var highlighted = datum === highlightedDatum;
      var value = datum.colorValue;
      var label = labels.color;
      text.fontSize = label.fontSize;
      text.fontFamily = label.fontFamily;
      text.fontStyle = label.fontStyle;
      text.fontWeight = label.fontWeight;
      text.textBaseline = 'top';
      text.textAlign = 'center';
      text.text = typeof value === 'number' && isFinite(value) ? String(toFixed(datum.colorValue)) + '%' : '';
      var textBBox = text.computeBBox();
      var nameNode = labelMap.get(index);
      var hasLabel = !!nameNode && nameNode.visible;
      var isVisible = isLeaf && !!colorKey && hasLabel && !!textBBox && textBBox.width < innerNodeWidth;
      text.fill = highlighted ? 'black' : label.color;
      text.fillShadow = highlighted ? undefined : shadow;
      text.visible = isVisible;
      if (isVisible) {
        text.x = _this.getLabelCenterX(datum);
        text.y = _this.getLabelCenterY(datum);
      } else {
        if (nameNode && !(datum.children && datum.children.length)) {
          nameNode.textBaseline = 'middle';
          nameNode.y = _this.getLabelCenterY(datum);
        }
      }
    });
  };
  TreemapSeries.prototype.getDomain = function (direction) {
    return [0, 1];
  };
  TreemapSeries.prototype.getTooltipHtml = function (datum) {
    var _a = this,
      tooltip = _a.tooltip,
      sizeKey = _a.sizeKey,
      labelKey = _a.labelKey,
      colorKey = _a.colorKey,
      colorName = _a.colorName,
      rootName = _a.rootName;
    var data = datum.data;
    var tooltipRenderer = tooltip.renderer;
    var title = datum.depth ? data[labelKey] : rootName || data[labelKey];
    var content = undefined;
    var color = datum.fill || 'gray';
    if (colorKey && colorName) {
      var colorValue = data[colorKey];
      if (typeof colorValue === 'number' && isFinite(colorValue)) {
        content = "<b>" + colorName + "</b>: " + toFixed(data[colorKey]);
      }
    }
    var defaults = {
      title: title,
      backgroundColor: color,
      content: content
    };
    if (tooltipRenderer) {
      return toTooltipHtml(tooltipRenderer({
        datum: datum,
        sizeKey: sizeKey,
        labelKey: labelKey,
        colorKey: colorKey,
        title: title,
        color: color
      }), defaults);
    }
    return toTooltipHtml(defaults);
  };
  TreemapSeries.prototype.listSeriesItems = function (legendData) {};
  TreemapSeries.className = 'TreemapSeries';
  TreemapSeries.type = 'treemap';
  __decorate$O([reactive('dataChange')], TreemapSeries.prototype, "labelKey", void 0);
  __decorate$O([reactive('dataChange')], TreemapSeries.prototype, "sizeKey", void 0);
  __decorate$O([reactive('dataChange')], TreemapSeries.prototype, "colorKey", void 0);
  __decorate$O([reactive('dataChange')], TreemapSeries.prototype, "colorDomain", void 0);
  __decorate$O([reactive('dataChange')], TreemapSeries.prototype, "colorRange", void 0);
  __decorate$O([reactive('dataChange')], TreemapSeries.prototype, "colorParents", void 0);
  __decorate$O([reactive('update')], TreemapSeries.prototype, "gradient", void 0);
  return TreemapSeries;
}(HierarchySeries);
var __extends$1q =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Sector = /** @class */function (_super) {
  __extends$1q(Sector, _super);
  function Sector() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.path = new Path2D();
    _this._dirtyPath = true;
    _this._centerX = 0;
    _this._centerY = 0;
    _this._centerOffset = 0;
    _this._innerRadius = 10;
    _this._outerRadius = 20;
    _this._startAngle = 0;
    _this._endAngle = Math.PI * 2;
    _this._angleOffset = 0;
    return _this;
  }
  Object.defineProperty(Sector.prototype, "dirtyPath", {
    get: function () {
      return this._dirtyPath;
    },
    set: function (value) {
      if (this._dirtyPath !== value) {
        this._dirtyPath = value;
        if (value) {
          this.dirty = true;
        }
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Sector.prototype, "centerX", {
    get: function () {
      return this._centerX;
    },
    set: function (value) {
      if (this._centerX !== value) {
        this._centerX = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Sector.prototype, "centerY", {
    get: function () {
      return this._centerY;
    },
    set: function (value) {
      if (this._centerY !== value) {
        this._centerY = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Sector.prototype, "centerOffset", {
    get: function () {
      return this._centerOffset;
    },
    set: function (value) {
      if (this._centerOffset !== value) {
        this._centerOffset = Math.max(0, value);
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Sector.prototype, "innerRadius", {
    get: function () {
      return this._innerRadius;
    },
    set: function (value) {
      if (this._innerRadius !== value) {
        this._innerRadius = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Sector.prototype, "outerRadius", {
    get: function () {
      return this._outerRadius;
    },
    set: function (value) {
      if (this._outerRadius !== value) {
        this._outerRadius = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Sector.prototype, "startAngle", {
    get: function () {
      return this._startAngle;
    },
    set: function (value) {
      if (this._startAngle !== value) {
        this._startAngle = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Sector.prototype, "endAngle", {
    get: function () {
      return this._endAngle;
    },
    set: function (value) {
      if (this._endAngle !== value) {
        this._endAngle = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Sector.prototype, "angleOffset", {
    get: function () {
      return this._angleOffset;
    },
    set: function (value) {
      if (this._angleOffset !== value) {
        this._angleOffset = value;
        this.dirtyPath = true;
      }
    },
    enumerable: true,
    configurable: true
  });
  Sector.prototype.computeBBox = function () {
    var radius = this.outerRadius;
    return new BBox(this.centerX - radius, this.centerY - radius, radius * 2, radius * 2);
  };
  Sector.prototype.isPointInPath = function (x, y) {
    var point = this.transformPoint(x, y);
    return this.path.isPointInPath(point.x, point.y);
  };
  Sector.prototype.isPointInStroke = function (x, y) {
    return false;
  };
  Object.defineProperty(Sector.prototype, "fullPie", {
    get: function () {
      return isEqual(normalizeAngle360(this.startAngle), normalizeAngle360(this.endAngle));
    },
    enumerable: true,
    configurable: true
  });
  Sector.prototype.updatePath = function () {
    if (!this.dirtyPath) {
      return;
    }
    var path = this.path;
    var angleOffset = this.angleOffset;
    var startAngle = Math.min(this.startAngle, this.endAngle) + angleOffset;
    var endAngle = Math.max(this.startAngle, this.endAngle) + angleOffset;
    var midAngle = (startAngle + endAngle) * 0.5;
    var innerRadius = Math.min(this.innerRadius, this.outerRadius);
    var outerRadius = Math.max(this.innerRadius, this.outerRadius);
    var centerOffset = this.centerOffset;
    var fullPie = this.fullPie;
    var centerX = this.centerX;
    var centerY = this.centerY;
    path.clear();
    if (centerOffset) {
      centerX += centerOffset * Math.cos(midAngle);
      centerY += centerOffset * Math.sin(midAngle);
    }
    if (!fullPie) {
      path.moveTo(centerX + innerRadius * Math.cos(startAngle), centerY + innerRadius * Math.sin(startAngle));
      // if (showTip) {
      //     path.lineTo(
      //         centerX + 0.5 * (innerRadius + outerRadius) * Math.cos(startAngle) + tipOffset * Math.cos(startAngle + Math.PI / 2),
      //         centerY + 0.5 * (innerRadius + outerRadius) * Math.sin(startAngle) + tipOffset * Math.sin(startAngle + Math.PI / 2)
      //     );
      // }
      path.lineTo(centerX + outerRadius * Math.cos(startAngle), centerY + outerRadius * Math.sin(startAngle));
    }
    path.cubicArc(centerX, centerY, outerRadius, outerRadius, 0, startAngle, endAngle, 0);
    // path[fullPie ? 'moveTo' : 'lineTo'](
    //     centerX + innerRadius * Math.cos(endAngle),
    //     centerY + innerRadius * Math.sin(endAngle)
    // );
    if (fullPie) {
      path.moveTo(centerX + innerRadius * Math.cos(endAngle), centerY + innerRadius * Math.sin(endAngle));
    } else {
      // if (showTip) {
      //     path.lineTo(
      //         centerX + 0.5 * (innerRadius + outerRadius) * Math.cos(endAngle) + tipOffset * Math.cos(endAngle + Math.PI / 2),
      //         centerY + 0.5 * (innerRadius + outerRadius) * Math.sin(endAngle) + tipOffset * Math.sin(endAngle + Math.PI / 2)
      //     );
      // }
      // Temp workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=993330
      // Revert this commit when fixed ^^.
      var x = centerX + innerRadius * Math.cos(endAngle);
      path.lineTo(Math.abs(x) < 1e-8 ? 0 : x, centerY + innerRadius * Math.sin(endAngle));
    }
    path.cubicArc(centerX, centerY, innerRadius, innerRadius, 0, endAngle, startAngle, 1);
    path.closePath();
    this.dirtyPath = false;
  };
  Sector.prototype.render = function (ctx) {
    if (this.dirtyTransform) {
      this.computeTransformMatrix();
    }
    this.matrix.toContext(ctx);
    this.updatePath();
    this.scene.appendPath(this.path);
    this.fillStroke(ctx);
    this.dirty = false;
  };
  Sector.className = 'Sector';
  return Sector;
}(Shape);
var __extends$1r =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$P =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PieNodeTag;
(function (PieNodeTag) {
  PieNodeTag[PieNodeTag["Sector"] = 0] = "Sector";
  PieNodeTag[PieNodeTag["Callout"] = 1] = "Callout";
  PieNodeTag[PieNodeTag["Label"] = 2] = "Label";
})(PieNodeTag || (PieNodeTag = {}));
var PieSeriesLabel = /** @class */function (_super) {
  __extends$1r(PieSeriesLabel, _super);
  function PieSeriesLabel() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.offset = 3; // from the callout line
    _this.minAngle = 20; // in degrees
    return _this;
  }
  __decorate$P([reactive('change')], PieSeriesLabel.prototype, "offset", void 0);
  __decorate$P([reactive('dataChange')], PieSeriesLabel.prototype, "minAngle", void 0);
  __decorate$P([reactive('dataChange')], PieSeriesLabel.prototype, "formatter", void 0);
  return PieSeriesLabel;
}(Label);
var PieSeriesCallout = /** @class */function (_super) {
  __extends$1r(PieSeriesCallout, _super);
  function PieSeriesCallout() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.colors = ['#874349', '#718661', '#a48f5f', '#5a7088', '#7f637a', '#5d8692'];
    _this.length = 10;
    _this.strokeWidth = 1;
    return _this;
  }
  __decorate$P([reactive('change')], PieSeriesCallout.prototype, "colors", void 0);
  __decorate$P([reactive('change')], PieSeriesCallout.prototype, "length", void 0);
  __decorate$P([reactive('change')], PieSeriesCallout.prototype, "strokeWidth", void 0);
  return PieSeriesCallout;
}(Observable);
var PieSeriesTooltip = /** @class */function (_super) {
  __extends$1r(PieSeriesTooltip, _super);
  function PieSeriesTooltip() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  __decorate$P([reactive('change')], PieSeriesTooltip.prototype, "renderer", void 0);
  return PieSeriesTooltip;
}(SeriesTooltip);
var PieSeries = /** @class */function (_super) {
  __extends$1r(PieSeries, _super);
  function PieSeries() {
    var _this = _super.call(this) || this;
    _this.radiusScale = new LinearScale();
    _this.groupSelection = Selection.select(_this.group).selectAll();
    /**
     * The processed data that gets visualized.
     */
    _this.groupSelectionData = [];
    _this.angleScale = function () {
      var scale = new LinearScale();
      // Each slice is a ratio of the whole, where all ratios add up to 1.
      scale.domain = [0, 1];
      // Add 90 deg to start the first pie at 12 o'clock.
      scale.range = [-Math.PI, Math.PI].map(function (angle) {
        return angle + Math.PI / 2;
      });
      return scale;
    }();
    // When a user toggles a series item (e.g. from the legend), its boolean state is recorded here.
    _this.seriesItemEnabled = [];
    _this.label = new PieSeriesLabel();
    _this.callout = new PieSeriesCallout();
    _this.tooltip = new PieSeriesTooltip();
    /**
     * The key of the numeric field to use to determine the angle (for example,
     * a pie slice angle).
     */
    _this.angleKey = '';
    _this.angleName = '';
    _this._fills = ['#c16068', '#a2bf8a', '#ebcc87', '#80a0c3', '#b58dae', '#85c0d1'];
    _this._strokes = ['#874349', '#718661', '#a48f5f', '#5a7088', '#7f637a', '#5d8692'];
    _this.fillOpacity = 1;
    _this.strokeOpacity = 1;
    _this.lineDash = undefined;
    _this.lineDashOffset = 0;
    /**
     * The series rotation in degrees.
     */
    _this.rotation = 0;
    _this.outerRadiusOffset = 0;
    _this.innerRadiusOffset = 0;
    _this.strokeWidth = 1;
    _this.highlightStyle = {
      fill: 'yellow'
    };
    _this.addEventListener('update', _this.update, _this);
    _this.label.addEventListener('change', _this.scheduleLayout, _this);
    _this.label.addEventListener('dataChange', _this.scheduleData, _this);
    _this.callout.addEventListener('change', _this.scheduleLayout, _this);
    _this.addPropertyListener('data', function (event) {
      if (event.value) {
        event.source.seriesItemEnabled = event.value.map(function () {
          return true;
        });
      }
    });
    return _this;
  }
  Object.defineProperty(PieSeries.prototype, "title", {
    get: function () {
      return this._title;
    },
    set: function (value) {
      var oldTitle = this._title;
      if (oldTitle !== value) {
        if (oldTitle) {
          oldTitle.removeEventListener('change', this.scheduleLayout);
          this.group.removeChild(oldTitle.node);
        }
        if (value) {
          value.node.textBaseline = 'bottom';
          value.addEventListener('change', this.scheduleLayout);
          this.group.appendChild(value.node);
        }
        this._title = value;
        this.scheduleLayout();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(PieSeries.prototype, "fills", {
    get: function () {
      return this._fills;
    },
    set: function (values) {
      this._fills = values;
      this.scheduleData();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(PieSeries.prototype, "strokes", {
    get: function () {
      return this._strokes;
    },
    set: function (values) {
      this._strokes = values;
      this.scheduleData();
    },
    enumerable: true,
    configurable: true
  });
  PieSeries.prototype.onHighlightChange = function () {
    this.updateNodes();
  };
  PieSeries.prototype.setColors = function (fills, strokes) {
    this.fills = fills;
    this.strokes = strokes;
    this.callout.colors = strokes;
  };
  PieSeries.prototype.getDomain = function (direction) {
    if (direction === ChartAxisDirection.X) {
      return this.angleScale.domain;
    } else {
      return this.radiusScale.domain;
    }
  };
  PieSeries.prototype.processData = function () {
    var _this = this;
    var _a = this,
      angleKey = _a.angleKey,
      radiusKey = _a.radiusKey,
      seriesItemEnabled = _a.seriesItemEnabled,
      angleScale = _a.angleScale,
      groupSelectionData = _a.groupSelectionData,
      label = _a.label;
    var data = angleKey && this.data ? this.data : [];
    var angleData = data.map(function (datum, index) {
      return seriesItemEnabled[index] && Math.abs(+datum[angleKey]) || 0;
    });
    var angleDataTotal = angleData.reduce(function (a, b) {
      return a + b;
    }, 0);
    // The ratios (in [0, 1] interval) used to calculate the end angle value for every pie slice.
    // Each slice starts where the previous one ends, so we only keep the ratios for end angles.
    var angleDataRatios = function () {
      var sum = 0;
      return angleData.map(function (datum) {
        return sum += datum / angleDataTotal;
      });
    }();
    var labelFormatter = label.formatter;
    var labelKey = label.enabled && this.labelKey;
    var labelData = [];
    var radiusData = [];
    if (labelKey) {
      if (labelFormatter) {
        labelData = data.map(function (datum) {
          return labelFormatter({
            value: datum[labelKey]
          });
        });
      } else {
        labelData = data.map(function (datum) {
          return String(datum[labelKey]);
        });
      }
    }
    if (radiusKey) {
      var _b = this,
        radiusMin = _b.radiusMin,
        radiusMax = _b.radiusMax;
      var radii = data.map(function (datum) {
        return Math.abs(datum[radiusKey]);
      });
      var min_1 = radiusMin !== undefined ? radiusMin : Math.min.apply(Math, radii);
      var max = radiusMax !== undefined ? radiusMax : Math.max.apply(Math, radii);
      var delta_1 = max - min_1;
      radiusData = radii.map(function (value) {
        return delta_1 ? (value - min_1) / delta_1 : 1;
      });
    }
    groupSelectionData.length = 0;
    var rotation = toRadians(this.rotation);
    var halfPi = Math.PI / 2;
    var datumIndex = 0;
    // Simply use reduce here to pair up adjacent ratios.
    angleDataRatios.reduce(function (start, end) {
      var radius = radiusKey ? radiusData[datumIndex] : 1;
      var startAngle = angleScale.convert(start) + rotation;
      var endAngle = angleScale.convert(end) + rotation;
      var midAngle = (startAngle + endAngle) / 2;
      var span = Math.abs(endAngle - startAngle);
      var midCos = Math.cos(midAngle);
      var midSin = Math.sin(midAngle);
      var labelMinAngle = toRadians(label.minAngle);
      var labelVisible = labelKey && span > labelMinAngle;
      var midAngle180 = normalizeAngle180(midAngle);
      // Split the circle into quadrants like so: ⊗
      var quadrantStart = -3 * Math.PI / 4; // same as `normalizeAngle180(toRadians(-135))`
      var textAlign;
      var textBaseline;
      if (midAngle180 >= quadrantStart && midAngle180 < (quadrantStart += halfPi)) {
        textAlign = 'center';
        textBaseline = 'bottom';
      } else if (midAngle180 >= quadrantStart && midAngle180 < (quadrantStart += halfPi)) {
        textAlign = 'left';
        textBaseline = 'middle';
      } else if (midAngle180 >= quadrantStart && midAngle180 < (quadrantStart += halfPi)) {
        textAlign = 'center';
        textBaseline = 'hanging';
      } else {
        textAlign = 'right';
        textBaseline = 'middle';
      }
      groupSelectionData.push({
        series: _this,
        seriesDatum: data[datumIndex],
        index: datumIndex,
        radius: radius,
        startAngle: startAngle,
        endAngle: endAngle,
        midAngle: midAngle,
        midCos: midCos,
        midSin: midSin,
        label: labelVisible ? {
          text: labelData[datumIndex],
          textAlign: textAlign,
          textBaseline: textBaseline
        } : undefined
      });
      datumIndex++;
      return end;
    }, 0);
    return true;
  };
  PieSeries.prototype.update = function () {
    var chart = this.chart;
    var visible = this.group.visible = this.visible && this.seriesItemEnabled.indexOf(true) >= 0;
    if (!visible || !chart || chart.dataPending || chart.layoutPending) {
      return;
    }
    var _a = this,
      radius = _a.radius,
      innerRadiusOffset = _a.innerRadiusOffset,
      outerRadiusOffset = _a.outerRadiusOffset,
      title = _a.title;
    this.radiusScale.range = [innerRadiusOffset ? radius + innerRadiusOffset : 0, radius + (outerRadiusOffset || 0)];
    this.group.translationX = this.centerX;
    this.group.translationY = this.centerY;
    if (title) {
      title.node.translationY = -radius - outerRadiusOffset - 2;
      title.node.visible = title.enabled;
    }
    this.updateGroupSelection();
    this.updateNodes();
  };
  PieSeries.prototype.updateGroupSelection = function () {
    var updateGroups = this.groupSelection.setData(this.groupSelectionData);
    updateGroups.exit.remove();
    var enterGroups = updateGroups.enter.append(Group);
    enterGroups.append(Sector).each(function (node) {
      return node.tag = PieNodeTag.Sector;
    });
    enterGroups.append(Line).each(function (node) {
      node.tag = PieNodeTag.Callout;
      node.pointerEvents = PointerEvents.None;
    });
    enterGroups.append(Text).each(function (node) {
      node.tag = PieNodeTag.Label;
      node.pointerEvents = PointerEvents.None;
    });
    this.groupSelection = updateGroups.merge(enterGroups);
  };
  PieSeries.prototype.updateNodes = function () {
    var _this = this;
    if (!this.chart) {
      return;
    }
    var _a = this,
      fills = _a.fills,
      strokes = _a.strokes,
      fillOpacity = _a.fillOpacity,
      strokeOpacity = _a.strokeOpacity,
      strokeWidth = _a.strokeWidth,
      radiusScale = _a.radiusScale,
      callout = _a.callout,
      shadow = _a.shadow,
      _b = _a.highlightStyle,
      fill = _b.fill,
      stroke = _b.stroke,
      centerOffset = _b.centerOffset,
      angleKey = _a.angleKey,
      radiusKey = _a.radiusKey,
      formatter = _a.formatter;
    var highlightedDatum = this.chart.highlightedDatum;
    var centerOffsets = [];
    var innerRadius = radiusScale.convert(0);
    this.groupSelection.selectByTag(PieNodeTag.Sector).each(function (sector, datum, index) {
      var radius = radiusScale.convert(datum.radius);
      var highlighted = datum === highlightedDatum;
      var sectorFill = highlighted && fill !== undefined ? fill : fills[index % fills.length];
      var sectorStroke = highlighted && stroke !== undefined ? stroke : strokes[index % strokes.length];
      var format = undefined;
      if (formatter) {
        format = formatter({
          datum: datum.seriesDatum,
          fill: sectorFill,
          stroke: sectorStroke,
          strokeWidth: strokeWidth,
          highlighted: highlighted,
          angleKey: angleKey,
          radiusKey: radiusKey
        });
      }
      sector.innerRadius = innerRadius;
      sector.outerRadius = radius;
      sector.startAngle = datum.startAngle;
      sector.endAngle = datum.endAngle;
      sector.fill = format && format.fill || sectorFill;
      sector.stroke = format && format.stroke || sectorStroke;
      sector.strokeWidth = format && format.strokeWidth !== undefined ? format.strokeWidth : strokeWidth;
      sector.fillOpacity = fillOpacity;
      sector.strokeOpacity = strokeOpacity;
      sector.lineDash = _this.lineDash;
      sector.lineDashOffset = _this.lineDashOffset;
      sector.centerOffset = highlighted && centerOffset !== undefined ? centerOffset : 0;
      sector.fillShadow = shadow;
      sector.lineJoin = 'round';
      centerOffsets.push(sector.centerOffset);
    });
    var calloutColors = callout.colors,
      calloutLength = callout.length,
      calloutStrokeWidth = callout.strokeWidth;
    this.groupSelection.selectByTag(PieNodeTag.Callout).each(function (line, datum, index) {
      if (datum.label) {
        var radius = radiusScale.convert(datum.radius);
        line.strokeWidth = calloutStrokeWidth;
        line.stroke = calloutColors[index % calloutColors.length];
        line.x1 = datum.midCos * radius;
        line.y1 = datum.midSin * radius;
        line.x2 = datum.midCos * (radius + calloutLength);
        line.y2 = datum.midSin * (radius + calloutLength);
      } else {
        line.stroke = undefined;
      }
    });
    {
      var _c = this.label,
        offset_1 = _c.offset,
        fontStyle_1 = _c.fontStyle,
        fontWeight_1 = _c.fontWeight,
        fontSize_1 = _c.fontSize,
        fontFamily_1 = _c.fontFamily,
        color_1 = _c.color;
      this.groupSelection.selectByTag(PieNodeTag.Label).each(function (text, datum, index) {
        var label = datum.label;
        if (label) {
          var radius = radiusScale.convert(datum.radius);
          var labelRadius = centerOffsets[index] + radius + calloutLength + offset_1;
          text.fontStyle = fontStyle_1;
          text.fontWeight = fontWeight_1;
          text.fontSize = fontSize_1;
          text.fontFamily = fontFamily_1;
          text.text = label.text;
          text.x = datum.midCos * labelRadius;
          text.y = datum.midSin * labelRadius;
          text.fill = color_1;
          text.textAlign = label.textAlign;
          text.textBaseline = label.textBaseline;
        } else {
          text.fill = undefined;
        }
      });
    }
  };
  PieSeries.prototype.fireNodeClickEvent = function (event, datum) {
    this.fireEvent({
      type: 'nodeClick',
      event: event,
      series: this,
      datum: datum.seriesDatum,
      angleKey: this.angleKey,
      labelKey: this.labelKey,
      radiusKey: this.radiusKey
    });
  };
  PieSeries.prototype.getTooltipHtml = function (nodeDatum) {
    var angleKey = this.angleKey;
    if (!angleKey) {
      return '';
    }
    var _a = this,
      fills = _a.fills,
      tooltip = _a.tooltip,
      angleName = _a.angleName,
      radiusKey = _a.radiusKey,
      radiusName = _a.radiusName,
      labelKey = _a.labelKey,
      labelName = _a.labelName;
    var _b = tooltip.renderer,
      tooltipRenderer = _b === void 0 ? this.tooltipRenderer : _b;
    var color = fills[nodeDatum.index % fills.length];
    var datum = nodeDatum.seriesDatum;
    var label = labelKey ? datum[labelKey] + ": " : '';
    var angleValue = datum[angleKey];
    var formattedAngleValue = typeof angleValue === 'number' ? toFixed(angleValue) : angleValue.toString();
    var title = this.title ? this.title.text : undefined;
    var content = label + formattedAngleValue;
    var defaults = {
      title: title,
      backgroundColor: color,
      content: content
    };
    if (tooltipRenderer) {
      return toTooltipHtml(tooltipRenderer({
        datum: datum,
        angleKey: angleKey,
        angleValue: angleValue,
        angleName: angleName,
        radiusKey: radiusKey,
        radiusValue: radiusKey ? datum[radiusKey] : undefined,
        radiusName: radiusName,
        labelKey: labelKey,
        labelName: labelName,
        title: title,
        color: color
      }), defaults);
    }
    return toTooltipHtml(defaults);
  };
  PieSeries.prototype.listSeriesItems = function (legendData) {
    var _this = this;
    var _a = this,
      labelKey = _a.labelKey,
      data = _a.data;
    if (data && data.length && labelKey) {
      var _b = this,
        fills_1 = _b.fills,
        strokes_1 = _b.strokes,
        id_1 = _b.id;
      data.forEach(function (datum, index) {
        legendData.push({
          id: id_1,
          itemId: index,
          enabled: _this.seriesItemEnabled[index],
          label: {
            text: String(datum[labelKey])
          },
          marker: {
            fill: fills_1[index % fills_1.length],
            stroke: strokes_1[index % strokes_1.length],
            fillOpacity: _this.fillOpacity,
            strokeOpacity: _this.strokeOpacity
          }
        });
      });
    }
  };
  PieSeries.prototype.toggleSeriesItem = function (itemId, enabled) {
    this.seriesItemEnabled[itemId] = enabled;
    this.scheduleData();
  };
  PieSeries.className = 'PieSeries';
  PieSeries.type = 'pie';
  __decorate$P([reactive('dataChange')], PieSeries.prototype, "angleKey", void 0);
  __decorate$P([reactive('update')], PieSeries.prototype, "angleName", void 0);
  __decorate$P([reactive('dataChange')], PieSeries.prototype, "radiusKey", void 0);
  __decorate$P([reactive('update')], PieSeries.prototype, "radiusName", void 0);
  __decorate$P([reactive('dataChange')], PieSeries.prototype, "radiusMin", void 0);
  __decorate$P([reactive('dataChange')], PieSeries.prototype, "radiusMax", void 0);
  __decorate$P([reactive('dataChange')], PieSeries.prototype, "labelKey", void 0);
  __decorate$P([reactive('update')], PieSeries.prototype, "labelName", void 0);
  __decorate$P([reactive('layoutChange')], PieSeries.prototype, "fillOpacity", void 0);
  __decorate$P([reactive('layoutChange')], PieSeries.prototype, "strokeOpacity", void 0);
  __decorate$P([reactive('update')], PieSeries.prototype, "lineDash", void 0);
  __decorate$P([reactive('update')], PieSeries.prototype, "lineDashOffset", void 0);
  __decorate$P([reactive('update')], PieSeries.prototype, "formatter", void 0);
  __decorate$P([reactive('dataChange')], PieSeries.prototype, "rotation", void 0);
  __decorate$P([reactive('layoutChange')], PieSeries.prototype, "outerRadiusOffset", void 0);
  __decorate$P([reactive('dataChange')], PieSeries.prototype, "innerRadiusOffset", void 0);
  __decorate$P([reactive('layoutChange')], PieSeries.prototype, "strokeWidth", void 0);
  __decorate$P([reactive('layoutChange')], PieSeries.prototype, "shadow", void 0);
  return PieSeries;
}(PolarSeries);
function floor$9(date) {
  date.setUTCSeconds(0, 0);
}
function offset$9(date, minutes) {
  date.setTime(date.getTime() + minutes * durationMinute);
}
function count$9(start, end) {
  return (end.getTime() - start.getTime()) / durationMinute;
}
function field$7(date) {
  return date.getUTCMinutes();
}
var utcMinute = new CountableTimeInterval(floor$9, offset$9, count$9, field$7);
function floor$a(date) {
  date.setUTCMinutes(0, 0, 0);
}
function offset$a(date, hours) {
  date.setTime(date.getTime() + hours * durationHour);
}
function count$a(start, end) {
  return (end.getTime() - start.getTime()) / durationHour;
}
function field$8(date) {
  return date.getUTCHours();
}
var utcHour = new CountableTimeInterval(floor$a, offset$a, count$a, field$8);
function floor$b(date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}
function offset$b(date, months) {
  date.setUTCMonth(date.getUTCMonth() + months);
}
function count$b(start, end) {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}
function field$9(date) {
  return date.getUTCMonth();
}
var utcMonth = new CountableTimeInterval(floor$b, offset$b, count$b, field$9);
var __assign$5 =  false || function () {
  __assign$5 = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$5.apply(this, arguments);
};
var palette = {
  fills: ['#f3622d', '#fba71b', '#57b757', '#41a9c9', '#4258c9', '#9a42c8', '#c84164', '#888888'],
  strokes: ['#aa4520', '#b07513', '#3d803d', '#2d768d', '#2e3e8d', '#6c2e8c', '#8c2d46', '#5f5f5f']
};
var ChartTheme = /** @class */function () {
  function ChartTheme(options) {
    var defaults = this.createChartConfigPerSeries(this.getDefaults());
    if (isObject(options)) {
      var mergeOptions_1 = {
        arrayMerge: arrayMerge
      };
      options = deepMerge({}, options, mergeOptions_1);
      var overrides_1 = options.overrides;
      if (overrides_1) {
        if (isObject(overrides_1.common)) {
          ChartTheme.seriesTypes.concat(['cartesian', 'polar']).forEach(function (seriesType) {
            defaults[seriesType] = deepMerge(defaults[seriesType], overrides_1.common, mergeOptions_1);
          });
        }
        if (overrides_1.cartesian) {
          defaults.cartesian = deepMerge(defaults.cartesian, overrides_1.cartesian, mergeOptions_1);
          ChartTheme.cartesianSeriesTypes.forEach(function (seriesType) {
            defaults[seriesType] = deepMerge(defaults[seriesType], overrides_1.cartesian, mergeOptions_1);
          });
        }
        if (overrides_1.polar) {
          defaults.polar = deepMerge(defaults.polar, overrides_1.polar, mergeOptions_1);
          ChartTheme.polarSeriesTypes.forEach(function (seriesType) {
            defaults[seriesType] = deepMerge(defaults[seriesType], overrides_1.polar, mergeOptions_1);
          });
        }
        if (overrides_1.hierarchy) {
          defaults.hierarchy = deepMerge(defaults.hierarchy, overrides_1.hierarchy, mergeOptions_1);
          ChartTheme.hierarchySeriesTypes.forEach(function (seriesType) {
            defaults[seriesType] = deepMerge(defaults[seriesType], overrides_1.hierarchy, mergeOptions_1);
          });
        }
        ChartTheme.seriesTypes.forEach(function (seriesType) {
          var _a;
          var chartConfig = overrides_1[seriesType];
          if (chartConfig) {
            if (chartConfig.series) {
              chartConfig.series = (_a = {}, _a[seriesType] = chartConfig.series, _a);
            }
            defaults[seriesType] = deepMerge(defaults[seriesType], chartConfig, mergeOptions_1);
          }
        });
      }
    }
    this.palette = options && options.palette ? options.palette : this.getPalette();
    this.config = Object.freeze(defaults);
  }
  ChartTheme.prototype.getPalette = function () {
    return palette;
  };
  ChartTheme.getAxisDefaults = function () {
    return {
      top: {},
      right: {},
      bottom: {},
      left: {},
      thickness: 0,
      title: {
        padding: {
          top: 10,
          right: 10,
          bottom: 10,
          left: 10
        },
        text: 'Axis Title',
        fontStyle: undefined,
        fontWeight: 'bold',
        fontSize: 12,
        fontFamily: this.fontFamily,
        color: 'rgb(70, 70, 70)'
      },
      label: {
        fontStyle: undefined,
        fontWeight: undefined,
        fontSize: 12,
        fontFamily: this.fontFamily,
        padding: 5,
        rotation: 0,
        color: 'rgb(87, 87, 87)',
        formatter: undefined
      },
      line: {
        width: 1,
        color: 'rgb(195, 195, 195)'
      },
      tick: {
        width: 1,
        size: 6,
        color: 'rgb(195, 195, 195)',
        count: 10
      },
      gridStyle: [{
        stroke: 'rgb(219, 219, 219)',
        lineDash: [4, 2]
      }]
    };
  };
  ChartTheme.getSeriesDefaults = function () {
    return {
      tooltip: {
        enabled: true,
        renderer: undefined,
        format: undefined
      },
      visible: true,
      showInLegend: true,
      cursor: 'default'
    };
  };
  ChartTheme.getBarSeriesDefaults = function () {
    return __assign$5(__assign$5({}, this.getSeriesDefaults()), {
      flipXY: false,
      fillOpacity: 1,
      strokeOpacity: 1,
      xKey: '',
      xName: '',
      yKeys: [],
      yNames: [],
      grouped: false,
      normalizedTo: undefined,
      strokeWidth: 1,
      lineDash: undefined,
      lineDashOffset: 0,
      tooltipRenderer: undefined,
      highlightStyle: {
        fill: 'yellow'
      },
      label: {
        enabled: false,
        fontStyle: undefined,
        fontWeight: undefined,
        fontSize: 12,
        fontFamily: this.fontFamily,
        color: 'rgb(70, 70, 70)',
        formatter: undefined,
        placement: 'inside'
      },
      shadow: {
        enabled: false,
        color: 'rgba(0, 0, 0, 0.5)',
        xOffset: 3,
        yOffset: 3,
        blur: 5
      }
    });
  };
  ChartTheme.getCartesianSeriesMarkerDefaults = function () {
    return {
      enabled: true,
      shape: 'circle',
      size: 6,
      maxSize: 30,
      strokeWidth: 1,
      formatter: undefined
    };
  };
  ChartTheme.getChartDefaults = function () {
    return {
      width: 600,
      height: 300,
      autoSize: true,
      background: {
        visible: true,
        fill: 'white'
      },
      padding: {
        top: 20,
        right: 20,
        bottom: 20,
        left: 20
      },
      title: {
        enabled: false,
        padding: {
          top: 10,
          right: 10,
          bottom: 10,
          left: 10
        },
        text: 'Title',
        fontStyle: undefined,
        fontWeight: 'bold',
        fontSize: 16,
        fontFamily: this.fontFamily,
        color: 'rgb(70, 70, 70)'
      },
      subtitle: {
        enabled: false,
        padding: {
          top: 10,
          right: 10,
          bottom: 10,
          left: 10
        },
        text: 'Subtitle',
        fontStyle: undefined,
        fontWeight: undefined,
        fontSize: 12,
        fontFamily: this.fontFamily,
        color: 'rgb(140, 140, 140)'
      },
      legend: {
        enabled: true,
        position: 'right',
        spacing: 20,
        item: {
          paddingX: 16,
          paddingY: 8,
          marker: {
            shape: undefined,
            size: 15,
            strokeWidth: 1,
            padding: 8
          },
          label: {
            color: 'black',
            fontStyle: undefined,
            fontWeight: undefined,
            fontSize: 12,
            fontFamily: this.fontFamily,
            formatter: undefined
          }
        }
      },
      tooltip: {
        enabled: true,
        tracking: true,
        delay: 0,
        class: Chart.defaultTooltipClass
      }
    };
  };
  ChartTheme.prototype.createChartConfigPerSeries = function (config) {
    var typeToAliases = {
      cartesian: ChartTheme.cartesianSeriesTypes,
      polar: ChartTheme.polarSeriesTypes
    };
    var _loop_1 = function (type) {
      typeToAliases[type].forEach(function (alias) {
        if (!config[alias]) {
          config[alias] = deepMerge({}, config[type], {
            arrayMerge: arrayMerge
          });
        }
      });
    };
    for (var type in typeToAliases) {
      _loop_1(type);
    }
    return config;
  };
  ChartTheme.prototype.getConfig = function (path, defaultValue) {
    var value = getValue(this.config, path, defaultValue);
    if (Array.isArray(value)) {
      return deepMerge([], value, {
        arrayMerge: arrayMerge
      });
    }
    if (isObject(value)) {
      return deepMerge({}, value, {
        arrayMerge: arrayMerge
      });
    }
    return value;
  };
  /**
   * Meant to be overridden in subclasses. For example:
   * ```
   *     getDefaults() {
   *         const subclassDefaults = { ... };
   *         return this.mergeWithParentDefaults(subclassDefaults);
   *     }
   * ```
   */
  ChartTheme.prototype.getDefaults = function () {
    return deepMerge({}, ChartTheme.defaults, {
      arrayMerge: arrayMerge
    });
  };
  ChartTheme.prototype.mergeWithParentDefaults = function (defaults) {
    var mergeOptions = {
      arrayMerge: arrayMerge
    };
    var proto = Object.getPrototypeOf(Object.getPrototypeOf(this));
    if (proto === Object.prototype) {
      var config = deepMerge({}, ChartTheme.defaults, mergeOptions);
      config = deepMerge(config, defaults, mergeOptions);
      return config;
    }
    var parentDefaults = proto.getDefaults();
    return deepMerge(parentDefaults, defaults, mergeOptions);
  };
  ChartTheme.prototype.setSeriesColors = function (series, seriesOptions, firstColorIndex) {
    var palette = this.palette;
    var colorCount = this.getSeriesColorCount(seriesOptions);
    if (colorCount === Infinity) {
      series.setColors(palette.fills, palette.strokes);
    } else {
      var fills = copy(palette.fills, firstColorIndex, colorCount);
      var strokes = copy(palette.strokes, firstColorIndex, colorCount);
      series.setColors(fills, strokes);
      firstColorIndex += colorCount;
    }
    return firstColorIndex;
  };
  /**
   * This would typically correspond to the number of dependent variables the series plots.
   * If the color count is not fixed, for example it's data-dependent with one color per data point,
   * return Infinity to fetch all unique colors and manage them in the series.
   */
  ChartTheme.prototype.getSeriesColorCount = function (seriesOptions) {
    var type = seriesOptions.type;
    switch (type) {
      case 'bar':
      case 'column':
      case 'area':
        return seriesOptions.yKeys ? seriesOptions.yKeys.length : 0;
      case 'pie':
        return Infinity;
      default:
        return 1;
    }
  };
  ChartTheme.fontFamily = 'Verdana, sans-serif';
  ChartTheme.cartesianDefaults = __assign$5(__assign$5({}, ChartTheme.getChartDefaults()), {
    axes: {
      number: __assign$5({}, ChartTheme.getAxisDefaults()),
      log: __assign$5(__assign$5({}, ChartTheme.getAxisDefaults()), {
        base: 10
      }),
      category: __assign$5({}, ChartTheme.getAxisDefaults()),
      groupedCategory: __assign$5({}, ChartTheme.getAxisDefaults()),
      time: __assign$5({}, ChartTheme.getAxisDefaults())
    },
    series: {
      column: __assign$5(__assign$5({}, ChartTheme.getBarSeriesDefaults()), {
        flipXY: false
      }),
      bar: __assign$5(__assign$5({}, ChartTheme.getBarSeriesDefaults()), {
        flipXY: true
      }),
      line: __assign$5(__assign$5({}, ChartTheme.getSeriesDefaults()), {
        title: undefined,
        xKey: '',
        xName: '',
        yKey: '',
        yName: '',
        strokeWidth: 2,
        strokeOpacity: 1,
        lineDash: undefined,
        lineDashOffset: 0,
        tooltipRenderer: undefined,
        highlightStyle: {
          fill: 'yellow'
        },
        marker: __assign$5({}, ChartTheme.getCartesianSeriesMarkerDefaults())
      }),
      scatter: __assign$5(__assign$5({}, ChartTheme.getSeriesDefaults()), {
        title: undefined,
        xKey: '',
        yKey: '',
        sizeKey: undefined,
        labelKey: undefined,
        xName: '',
        yName: '',
        sizeName: 'Size',
        labelName: 'Label',
        strokeWidth: 2,
        fillOpacity: 1,
        strokeOpacity: 1,
        tooltipRenderer: undefined,
        highlightStyle: {
          fill: 'yellow'
        },
        marker: __assign$5({}, ChartTheme.getCartesianSeriesMarkerDefaults())
      }),
      area: __assign$5(__assign$5({}, ChartTheme.getSeriesDefaults()), {
        title: undefined,
        xKey: '',
        xName: '',
        yKeys: [],
        yNames: [],
        normalizedTo: undefined,
        fillOpacity: 0.8,
        strokeOpacity: 1,
        strokeWidth: 2,
        lineDash: undefined,
        lineDashOffset: 0,
        shadow: {
          enabled: false,
          color: 'rgba(0, 0, 0, 0.5)',
          xOffset: 3,
          yOffset: 3,
          blur: 5
        },
        tooltipRenderer: undefined,
        highlightStyle: {
          fill: 'yellow'
        },
        marker: __assign$5(__assign$5({}, ChartTheme.getCartesianSeriesMarkerDefaults()), {
          enabled: false
        })
      }),
      histogram: __assign$5(__assign$5({}, ChartTheme.getSeriesDefaults()), {
        title: undefined,
        xKey: '',
        yKey: '',
        xName: '',
        yName: '',
        strokeWidth: 1,
        fillOpacity: 1,
        strokeOpacity: 1,
        lineDash: undefined,
        lineDashOffset: 0,
        areaPlot: false,
        binCount: 10,
        bins: undefined,
        aggregation: 'sum',
        tooltipRenderer: undefined,
        highlightStyle: {
          fill: 'yellow'
        },
        label: {
          enabled: false,
          fontStyle: undefined,
          fontWeight: undefined,
          fontSize: 12,
          fontFamily: ChartTheme.fontFamily,
          color: 'rgb(70, 70, 70)',
          formatter: undefined
        }
      })
    },
    navigator: {
      enabled: false,
      height: 30,
      min: 0,
      max: 1,
      mask: {
        fill: '#999999',
        stroke: '#999999',
        strokeWidth: 1,
        fillOpacity: 0.2
      },
      minHandle: {
        fill: '#f2f2f2',
        stroke: '#999999',
        strokeWidth: 1,
        width: 8,
        height: 16,
        gripLineGap: 2,
        gripLineLength: 8
      },
      maxHandle: {
        fill: '#f2f2f2',
        stroke: '#999999',
        strokeWidth: 1,
        width: 8,
        height: 16,
        gripLineGap: 2,
        gripLineLength: 8
      }
    }
  });
  ChartTheme.defaults = {
    cartesian: ChartTheme.cartesianDefaults,
    groupedCategory: ChartTheme.cartesianDefaults,
    polar: __assign$5(__assign$5({}, ChartTheme.getChartDefaults()), {
      series: {
        pie: __assign$5(__assign$5({}, ChartTheme.getSeriesDefaults()), {
          title: {
            enabled: true,
            padding: new Padding(0),
            text: '',
            fontStyle: undefined,
            fontWeight: undefined,
            fontSize: 12,
            fontFamily: ChartTheme.fontFamily,
            color: 'rgb(70, 70, 70)'
          },
          angleKey: '',
          angleName: '',
          radiusKey: undefined,
          radiusName: undefined,
          labelKey: undefined,
          labelName: undefined,
          label: {
            enabled: true,
            fontStyle: undefined,
            fontWeight: undefined,
            fontSize: 12,
            fontFamily: ChartTheme.fontFamily,
            color: 'rgb(70, 70, 70)',
            offset: 3,
            minAngle: 20
          },
          callout: {
            length: 10,
            strokeWidth: 2
          },
          fillOpacity: 1,
          strokeOpacity: 1,
          strokeWidth: 1,
          lineDash: undefined,
          lineDashOffset: 0,
          rotation: 0,
          outerRadiusOffset: 0,
          innerRadiusOffset: 0,
          highlightStyle: {
            fill: 'yellow'
          },
          shadow: {
            enabled: false,
            color: 'rgba(0, 0, 0, 0.5)',
            xOffset: 3,
            yOffset: 3,
            blur: 5
          }
        })
      }
    }),
    hierarchy: __assign$5(__assign$5({}, ChartTheme.getChartDefaults()), {
      series: {
        treemap: __assign$5(__assign$5({}, ChartTheme.getSeriesDefaults()), {
          showInLegend: false,
          labelKey: 'label',
          sizeKey: 'size',
          colorKey: 'color',
          colorDomain: [-5, 5],
          colorRange: ['#cb4b3f', '#6acb64'],
          colorParents: false,
          gradient: true,
          nodePadding: 2,
          title: {
            enabled: true,
            color: 'white',
            fontStyle: undefined,
            fontWeight: 'bold',
            fontSize: 12,
            fontFamily: 'Verdana, sans-serif',
            padding: 15
          },
          subtitle: {
            enabled: true,
            color: 'white',
            fontStyle: undefined,
            fontWeight: undefined,
            fontSize: 9,
            fontFamily: 'Verdana, sans-serif',
            padding: 13
          },
          labels: {
            large: {
              enabled: true,
              fontStyle: undefined,
              fontWeight: 'bold',
              fontSize: 18,
              fontFamily: 'Verdana, sans-serif',
              color: 'white'
            },
            medium: {
              enabled: true,
              fontStyle: undefined,
              fontWeight: 'bold',
              fontSize: 14,
              fontFamily: 'Verdana, sans-serif',
              color: 'white'
            },
            small: {
              enabled: true,
              fontStyle: undefined,
              fontWeight: 'bold',
              fontSize: 10,
              fontFamily: 'Verdana, sans-serif',
              color: 'white'
            },
            color: {
              enabled: true,
              fontStyle: undefined,
              fontWeight: undefined,
              fontSize: 12,
              fontFamily: 'Verdana, sans-serif',
              color: 'white'
            }
          }
        })
      }
    })
  };
  ChartTheme.cartesianSeriesTypes = ['line', 'area', 'bar', 'column', 'scatter', 'histogram'];
  ChartTheme.polarSeriesTypes = ['pie'];
  ChartTheme.hierarchySeriesTypes = ['treemap'];
  ChartTheme.seriesTypes = ChartTheme.cartesianSeriesTypes.concat(ChartTheme.polarSeriesTypes);
  return ChartTheme;
}();
function arrayMerge(target, source, options) {
  return source;
}
var __extends$1s =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$6 =  false || function () {
  __assign$6 = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$6.apply(this, arguments);
};
var DarkTheme = /** @class */function (_super) {
  __extends$1s(DarkTheme, _super);
  function DarkTheme(options) {
    return _super.call(this, options) || this;
  }
  DarkTheme.prototype.getDefaults = function () {
    var fontColor = 'rgb(200, 200, 200)';
    var mutedFontColor = 'rgb(150, 150, 150)';
    var axisDefaults = {
      title: {
        color: fontColor
      },
      label: {
        color: fontColor
      },
      gridStyle: [{
        stroke: 'rgb(88, 88, 88)',
        lineDash: [4, 2]
      }]
    };
    var seriesLabelDefaults = {
      label: {
        color: fontColor
      }
    };
    var chartDefaults = {
      background: {
        fill: 'rgb(34, 38, 41)'
      },
      title: {
        color: fontColor
      },
      subtitle: {
        color: mutedFontColor
      },
      axes: {
        number: __assign$6({}, axisDefaults),
        category: __assign$6({}, axisDefaults),
        time: __assign$6({}, axisDefaults)
      },
      legend: {
        item: {
          label: {
            color: fontColor
          }
        }
      }
    };
    return this.mergeWithParentDefaults({
      cartesian: __assign$6(__assign$6({}, chartDefaults), {
        series: {
          bar: __assign$6({}, seriesLabelDefaults),
          column: __assign$6({}, seriesLabelDefaults),
          histogram: __assign$6({}, seriesLabelDefaults)
        }
      }),
      polar: __assign$6(__assign$6({}, chartDefaults), {
        series: {
          pie: __assign$6(__assign$6({}, seriesLabelDefaults), {
            title: {
              color: fontColor
            }
          })
        }
      })
    });
  };
  return DarkTheme;
}(ChartTheme);
var __extends$1t =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var palette$1 = {
  fills: ['#f44336', '#e91e63', '#9c27b0', '#673ab7', '#3f51b5', '#2196f3', '#03a9f4', '#00bcd4', '#009688', '#4caf50', '#8bc34a', '#cddc39', '#ffeb3b', '#ffc107', '#ff9800', '#ff5722'],
  strokes: ['#ab2f26', '#a31545', '#6d1b7b', '#482980', '#2c397f', '#1769aa', '#0276ab', '#008494', '#00695f', '#357a38', '#618834', '#909a28', '#b3a429', '#b38705', '#b36a00', '#b33d18']
};
var MaterialLight = /** @class */function (_super) {
  __extends$1t(MaterialLight, _super);
  function MaterialLight() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  MaterialLight.prototype.getPalette = function () {
    return palette$1;
  };
  return MaterialLight;
}(ChartTheme);
var __extends$1u =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var palette$2 = {
  fills: ['#f44336', '#e91e63', '#9c27b0', '#673ab7', '#3f51b5', '#2196f3', '#03a9f4', '#00bcd4', '#009688', '#4caf50', '#8bc34a', '#cddc39', '#ffeb3b', '#ffc107', '#ff9800', '#ff5722'],
  strokes: ['#ab2f26', '#a31545', '#6d1b7b', '#482980', '#2c397f', '#1769aa', '#0276ab', '#008494', '#00695f', '#357a38', '#618834', '#909a28', '#b3a429', '#b38705', '#b36a00', '#b33d18']
};
var MaterialDark = /** @class */function (_super) {
  __extends$1u(MaterialDark, _super);
  function MaterialDark() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  MaterialDark.prototype.getPalette = function () {
    return palette$2;
  };
  return MaterialDark;
}(DarkTheme);
var __extends$1v =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var palette$3 = {
  fills: ['#c16068', '#a2bf8a', '#ebcc87', '#80a0c3', '#b58dae', '#85c0d1'],
  strokes: ['#874349', '#718661', '#a48f5f', '#5a7088', '#7f637a', '#5d8692']
};
var PastelLight = /** @class */function (_super) {
  __extends$1v(PastelLight, _super);
  function PastelLight() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  PastelLight.prototype.getPalette = function () {
    return palette$3;
  };
  return PastelLight;
}(ChartTheme);
var __extends$1w =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var palette$4 = {
  fills: ['#c16068', '#a2bf8a', '#ebcc87', '#80a0c3', '#b58dae', '#85c0d1'],
  strokes: ['#874349', '#718661', '#a48f5f', '#5a7088', '#7f637a', '#5d8692']
};
var PastelDark = /** @class */function (_super) {
  __extends$1w(PastelDark, _super);
  function PastelDark() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  PastelDark.prototype.getPalette = function () {
    return palette$4;
  };
  return PastelDark;
}(DarkTheme);
var __extends$1x =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var palette$5 = {
  fills: ['#febe76', '#ff7979', '#badc58', '#f9ca23', '#f0932b', '#eb4c4b', '#6ab04c', '#7ed6df', '#e056fd', '#686de0'],
  strokes: ['#b28553', '#b35555', '#829a3e', '#ae8d19', '#a8671e', '#a43535', '#4a7b35', '#58969c', '#9d3cb1', '#494c9d']
};
var SolarLight = /** @class */function (_super) {
  __extends$1x(SolarLight, _super);
  function SolarLight() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  SolarLight.prototype.getPalette = function () {
    return palette$5;
  };
  return SolarLight;
}(ChartTheme);
var __extends$1y =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var palette$6 = {
  fills: ['#febe76', '#ff7979', '#badc58', '#f9ca23', '#f0932b', '#eb4c4b', '#6ab04c', '#7ed6df', '#e056fd', '#686de0'],
  strokes: ['#b28553', '#b35555', '#829a3e', '#ae8d19', '#a8671e', '#a43535', '#4a7b35', '#58969c', '#9d3cb1', '#494c9d']
};
var SolarDark = /** @class */function (_super) {
  __extends$1y(SolarDark, _super);
  function SolarDark() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  SolarDark.prototype.getPalette = function () {
    return palette$6;
  };
  return SolarDark;
}(DarkTheme);
var __extends$1z =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var palette$7 = {
  fills: ['#5BC0EB', '#FDE74C', '#9BC53D', '#E55934', '#FA7921', '#fa3081'],
  strokes: ['#4086a4', '#b1a235', '#6c8a2b', '#a03e24', '#af5517', '#af225a']
};
var VividLight = /** @class */function (_super) {
  __extends$1z(VividLight, _super);
  function VividLight() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  VividLight.prototype.getPalette = function () {
    return palette$7;
  };
  return VividLight;
}(ChartTheme);
var __extends$1A =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var palette$8 = {
  fills: ['#5BC0EB', '#FDE74C', '#9BC53D', '#E55934', '#FA7921', '#fa3081'],
  strokes: ['#4086a4', '#b1a235', '#6c8a2b', '#a03e24', '#af5517', '#af225a']
};
var VividDark = /** @class */function (_super) {
  __extends$1A(VividDark, _super);
  function VividDark() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  VividDark.prototype.getPalette = function () {
    return palette$8;
  };
  return VividDark;
}(DarkTheme);
var __extends$1B =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var LogScale = /** @class */function (_super) {
  __extends$1B(LogScale, _super);
  function LogScale() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.type = 'log';
    _this._domain = [1, 10];
    _this.baseLog = identity; // takes a log with base `base` of `x`
    _this.basePow = identity; // raises `base` to the power of `x`
    _this._base = 10;
    return _this;
  }
  LogScale.prototype.setDomain = function (values) {
    var df = values[0];
    var dl = values[values.length - 1];
    if (df === 0 || dl === 0 || df < 0 && dl > 0 || df > 0 && dl < 0) {
      console.warn('Log scale domain should not start at, end at or cross zero.');
      if (df === 0 && dl > 0) {
        df = Number.EPSILON;
      } else if (dl === 0 && df < 0) {
        dl = -Number.EPSILON;
      } else if (df < 0 && dl > 0) {
        if (Math.abs(dl) >= Math.abs(df)) {
          df = Number.EPSILON;
        } else {
          dl = -Number.EPSILON;
        }
      } else if (df > 0 && dl < 0) {
        if (Math.abs(dl) >= Math.abs(df)) {
          df = -Number.EPSILON;
        } else {
          dl = Number.EPSILON;
        }
      }
      values = values.slice();
      values[0] = df;
      values[values.length - 1] = dl;
    }
    _super.prototype.setDomain.call(this, values);
  };
  LogScale.prototype.getDomain = function () {
    return _super.prototype.getDomain.call(this);
  };
  Object.defineProperty(LogScale.prototype, "base", {
    get: function () {
      return this._base;
    },
    set: function (value) {
      if (this._base !== value) {
        this._base = value;
        this.rescale();
      }
    },
    enumerable: true,
    configurable: true
  });
  LogScale.prototype.rescale = function () {
    var base = this.base;
    var baseLog = LogScale.makeLogFn(base);
    var basePow = LogScale.makePowFn(base);
    if (this.domain[0] < 0) {
      baseLog = this.reflect(baseLog);
      basePow = this.reflect(basePow);
      this.transform = function (x) {
        return -Math.log(-x);
      };
      this.untransform = function (x) {
        return -Math.exp(-x);
      };
    } else {
      this.transform = function (x) {
        return Math.log(x);
      };
      this.untransform = function (x) {
        return Math.exp(x);
      };
    }
    this.baseLog = baseLog;
    this.basePow = basePow;
    _super.prototype.rescale.call(this);
  };
  /**
   * For example, if `f` is `Math.log10`, we have
   *
   *     f(100) == 2
   *     f(-100) == NaN
   *     rf = reflect(f)
   *     rf(-100) == -2
   *
   * @param f
   */
  LogScale.prototype.reflect = function (f) {
    return function (x) {
      return -f(-x);
    };
  };
  LogScale.prototype.nice = function () {
    var _a, _b;
    var domain = this.domain;
    var i0 = 0;
    var i1 = domain.length - 1;
    var x0 = domain[i0];
    var x1 = domain[i1];
    if (x1 < x0) {
      _a = [i1, i0], i0 = _a[0], i1 = _a[1];
      _b = [x1, x0], x0 = _b[0], x1 = _b[1];
    }
    // For example, for base == 10:
    // [ 50, 900] becomes [ 10, 1000 ]
    domain[i0] = this.basePow(Math.floor(this.baseLog(x0)));
    domain[i1] = this.basePow(Math.ceil(this.baseLog(x1)));
    this.domain = domain;
  };
  LogScale.pow10 = function (x) {
    return isFinite(x) ? +('1e' + x) // to avoid precision issues, e.g. Math.pow(10, -4) is not 0.0001
    : x < 0 ? 0 : x;
  };
  LogScale.makePowFn = function (base) {
    if (base === 10) {
      return LogScale.pow10;
    }
    if (base === Math.E) {
      return Math.exp;
    }
    return function (x) {
      return Math.pow(base, x);
    };
  };
  // Make a log function witn an arbitrary base or return a native function if exists.
  LogScale.makeLogFn = function (base) {
    if (base === Math.E) {
      return Math.log;
    }
    if (base === 10) {
      return Math.log10;
    }
    if (base === 2) {
      return Math.log2;
    }
    var logBase = Math.log(base);
    return function (x) {
      return Math.log(x) / logBase;
    };
  };
  LogScale.prototype.ticks = function (count) {
    var _a;
    if (count === void 0) {
      count = 10;
    }
    var n = count == null ? 10 : +count;
    var base = this.base;
    var domain = this.domain;
    var d0 = domain[0];
    var d1 = domain[domain.length - 1];
    var isReversed = d1 < d0;
    if (isReversed) {
      _a = [d1, d0], d0 = _a[0], d1 = _a[1];
    }
    var p0 = this.baseLog(d0);
    var p1 = this.baseLog(d1);
    var z = [];
    // if `base` is an integer and delta in order of magnitudes is less than n
    if (!(base % 1) && p1 - p0 < n) {
      // For example, if n == 10, base == 10 and domain == [10^2, 10^6]
      // then p1 - p0 < n == true.
      p0 = Math.round(p0) - 1;
      p1 = Math.round(p1) + 1;
      if (d0 > 0) {
        for (; p0 < p1; ++p0) {
          for (var k = 1, p = this.basePow(p0); k < base; ++k) {
            var t = p * k;
            // The `t` checks are needed because we expanded the [p0, p1] by 1 in each direction.
            if (t < d0) continue;
            if (t > d1) break;
            z.push(t);
          }
        }
      } else {
        for (; p0 < p1; ++p0) {
          for (var k = base - 1, p = this.basePow(p0); k >= 1; --k) {
            var t = p * k;
            if (t < d0) continue;
            if (t > d1) break;
            z.push(t);
          }
        }
      }
      if (z.length * 2 < n) {
        z = ticks(d0, d1, n);
      }
    } else {
      // For example, if n == 4, base == 10 and domain == [10^2, 10^6]
      // then p1 - p0 < n == false.
      // `ticks` return [2, 3, 4, 5, 6], then mapped to [10^2, 10^3, 10^4, 10^5, 10^6].
      z = ticks(p0, p1, Math.min(p1 - p0, n)).map(this.basePow);
    }
    return isReversed ? z.reverse() : z;
  };
  LogScale.prototype.tickFormat = function (count, specifier) {
    var _this = this;
    var base = this.base;
    if (specifier == null) {
      specifier = base === 10 ? '.0e' : ',';
    }
    if (typeof specifier !== 'function') {
      specifier = format(specifier);
    }
    if (count === Infinity) {
      return specifier;
    }
    if (count == null) {
      count = 10;
    }
    var k = Math.max(1, base * count / this.ticks().length);
    return function (d) {
      var i = d / _this.basePow(Math.round(_this.baseLog(d)));
      if (i * base < base - 0.5) {
        i *= base;
      }
      return i <= k ? specifier(d) : '';
    };
  };
  return LogScale;
}(ContinuousScale);
var __extends$1C =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var LogAxis = /** @class */function (_super) {
  __extends$1C(LogAxis, _super);
  function LogAxis() {
    var _this = _super.call(this) || this;
    _this.scale = new LogScale();
    return _this;
  }
  Object.defineProperty(LogAxis.prototype, "base", {
    get: function () {
      return this.scale.base;
    },
    set: function (value) {
      this.scale.base = value;
    },
    enumerable: true,
    configurable: true
  });
  LogAxis.className = 'LogAxis';
  LogAxis.type = 'log';
  return LogAxis;
}(NumberAxis);
var __assign$7 =  false || function () {
  __assign$7 = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$7.apply(this, arguments);
};
var _a, _b, _c, _d, _e;
/*
    This file defines the specs for creating different kinds of charts, but
    contains no code that uses the specs to actually create charts
*/
var chartPadding = 20;
var commonChartMappings = {
  background: {
    meta: {
      defaults: {
        visible: true,
        fill: 'white'
      }
    }
  },
  padding: {
    meta: {
      constructor: Padding,
      defaults: {
        top: chartPadding,
        right: chartPadding,
        bottom: chartPadding,
        left: chartPadding
      }
    }
  },
  tooltip: {
    meta: {
      defaults: {
        enabled: true,
        tracking: true,
        delay: 0,
        class: Chart.defaultTooltipClass
      }
    }
  },
  title: {
    meta: {
      constructor: Caption,
      defaults: {
        enabled: false,
        padding: {
          meta: {
            constructor: Padding,
            defaults: {
              top: 10,
              right: 10,
              bottom: 10,
              left: 10
            }
          }
        },
        text: 'Title',
        fontStyle: undefined,
        fontWeight: 'bold',
        fontSize: 14,
        fontFamily: 'Verdana, sans-serif',
        color: 'rgb(70, 70, 70)'
      }
    }
  },
  subtitle: {
    meta: {
      constructor: Caption,
      defaults: {
        enabled: false,
        padding: {
          meta: {
            constructor: Padding,
            defaults: {
              top: 10,
              right: 10,
              bottom: 10,
              left: 10
            }
          }
        },
        text: 'Subtitle',
        fontStyle: undefined,
        fontWeight: undefined,
        fontSize: 12,
        fontFamily: 'Verdana, sans-serif',
        color: 'rgb(140, 140, 140)'
      }
    }
  },
  legend: {
    meta: {
      constructor: Legend,
      defaults: {
        enabled: true,
        position: LegendPosition.Right,
        spacing: 20
      }
    },
    item: {
      meta: {
        constructor: LegendItem,
        defaults: {
          paddingX: 16,
          paddingY: 8
        }
      },
      marker: {
        meta: {
          constructor: LegendMarker,
          defaults: {
            shape: undefined,
            size: 15,
            strokeWidth: 1,
            padding: 8
          }
        }
      },
      label: {
        meta: {
          constructor: LegendLabel,
          defaults: {
            color: 'black',
            fontStyle: undefined,
            fontWeight: undefined,
            fontSize: 12,
            fontFamily: 'Verdana, sans-serif',
            formatter: undefined
          }
        }
      }
    }
  }
};
var chartDefaults = {
  container: undefined,
  autoSize: true,
  width: 600,
  height: 300,
  data: [],
  title: undefined,
  subtitle: undefined,
  padding: {},
  background: {},
  legend: {
    item: {
      marker: {},
      label: {}
    }
  },
  navigator: {
    mask: {},
    minHandle: {},
    maxHandle: {}
  },
  listeners: undefined
};
var chartMeta = {
  // Charts components' constructors normally don't take any parameters (which makes things consistent -- everything
  // is configured the same way, via the properties, and makes the factory pattern work well) but the charts
  // themselves are the exceptions.
  // If a chart config has the (optional) `document` property, it will be passed to the constructor.
  // There is no actual `document` property on the chart, it can only be supplied during instantiation.
  constructorParams: ['document'],
  setAsIs: ['container', 'data', 'tooltipOffset'],
  nonSerializable: ['container', 'data']
};
var axisDefaults = {
  defaults: {
    visibleRange: [0, 1],
    thickness: 0,
    label: {},
    tick: {},
    title: {},
    line: {},
    gridStyle: [{
      stroke: 'rgb(219, 219, 219)',
      lineDash: [4, 2]
    }]
  }
};
var seriesDefaults = {
  visible: true,
  showInLegend: true,
  cursor: 'default',
  listeners: undefined
};
var columnSeriesDefaults = {
  fillOpacity: 1,
  strokeOpacity: 1,
  xKey: '',
  xName: '',
  yKeys: [],
  yNames: {},
  grouped: false,
  normalizedTo: undefined,
  strokeWidth: 1,
  lineDash: undefined,
  lineDashOffset: 0,
  shadow: undefined,
  highlightStyle: {
    fill: 'yellow'
  }
};
var shadowMapping = {
  shadow: {
    meta: {
      constructor: DropShadow,
      defaults: {
        enabled: true,
        color: 'rgba(0, 0, 0, 0.5)',
        xOffset: 0,
        yOffset: 0,
        blur: 5
      }
    }
  }
};
var labelDefaults = {
  enabled: true,
  fontStyle: undefined,
  fontWeight: undefined,
  fontSize: 12,
  fontFamily: 'Verdana, sans-serif',
  color: 'rgb(70, 70, 70)'
};
var barLabelMapping = {
  label: {
    meta: {
      defaults: __assign$7(__assign$7({}, labelDefaults), {
        formatter: undefined,
        placement: 'inside'
      })
    }
  }
};
var tooltipMapping = {
  tooltip: {
    meta: {
      defaults: {
        enabled: true,
        renderer: undefined,
        format: undefined
      }
    }
  }
};
var axisMappings = {
  line: {
    meta: {
      defaults: {
        width: 1,
        color: 'rgb(195, 195, 195)'
      }
    }
  },
  title: {
    meta: {
      constructor: Caption,
      defaults: {
        padding: {
          meta: {
            constructor: Padding,
            defaults: {
              top: 10,
              right: 10,
              bottom: 10,
              left: 10
            }
          }
        },
        text: 'Axis Title',
        fontStyle: undefined,
        fontWeight: 'bold',
        fontSize: 12,
        fontFamily: 'Verdana, sans-serif',
        color: 'rgb(70, 70, 70)'
      }
    }
  },
  label: {
    meta: {
      constructor: AxisLabel,
      defaults: {
        fontStyle: undefined,
        fontWeight: undefined,
        fontSize: 12,
        fontFamily: 'Verdana, sans-serif',
        padding: 5,
        rotation: 0,
        color: 'rgb(87, 87, 87)',
        formatter: undefined
      }
    }
  },
  tick: {
    meta: {
      constructor: AxisTick,
      defaults: {
        width: 1,
        size: 6,
        color: 'rgb(195, 195, 195)',
        count: 10
      }
    }
  }
};
var mappings = (_a = {}, _a[CartesianChart.type] = __assign$7(__assign$7({
  meta: __assign$7(__assign$7({
    constructor: CartesianChart
  }, chartMeta), {
    defaults: __assign$7(__assign$7({}, chartDefaults), {
      axes: [{
        type: NumberAxis.type,
        position: 'left'
      }, {
        type: CategoryAxis.type,
        position: 'bottom'
      }]
    })
  })
}, commonChartMappings), {
  axes: (_b = {}, _b[NumberAxis.type] = __assign$7({
    meta: __assign$7({
      constructor: NumberAxis,
      setAsIs: ['gridStyle', 'visibleRange']
    }, axisDefaults)
  }, axisMappings), _b[LogAxis.type] = __assign$7({
    meta: __assign$7(__assign$7({
      constructor: LogAxis,
      setAsIs: ['gridStyle', 'visibleRange']
    }, axisDefaults), {
      base: 10
    })
  }, axisMappings), _b[CategoryAxis.type] = __assign$7({
    meta: __assign$7({
      constructor: CategoryAxis,
      setAsIs: ['gridStyle', 'visibleRange']
    }, axisDefaults)
  }, axisMappings), _b[GroupedCategoryAxis.type] = __assign$7({
    meta: __assign$7({
      constructor: GroupedCategoryAxis,
      setAsIs: ['gridStyle', 'visibleRange']
    }, axisDefaults)
  }, axisMappings), _b[TimeAxis.type] = __assign$7({
    meta: __assign$7({
      constructor: TimeAxis,
      setAsIs: ['gridStyle', 'visibleRange']
    }, axisDefaults)
  }, axisMappings), _b),
  series: (_c = {
    column: __assign$7(__assign$7(__assign$7({
      meta: {
        constructor: BarSeries,
        setAsIs: ['lineDash', 'yNames'],
        defaults: __assign$7(__assign$7({
          flipXY: false
        }, seriesDefaults), columnSeriesDefaults)
      },
      highlightStyle: {}
    }, tooltipMapping), barLabelMapping), shadowMapping)
  }, _c[BarSeries.type] = __assign$7(__assign$7(__assign$7({
    meta: {
      constructor: BarSeries,
      setAsIs: ['lineDash', 'yNames'],
      defaults: __assign$7(__assign$7({
        flipXY: true
      }, seriesDefaults), columnSeriesDefaults)
    },
    highlightStyle: {}
  }, tooltipMapping), barLabelMapping), shadowMapping), _c[LineSeries.type] = __assign$7(__assign$7({
    meta: {
      constructor: LineSeries,
      setAsIs: ['lineDash'],
      defaults: __assign$7(__assign$7({}, seriesDefaults), {
        title: undefined,
        xKey: '',
        xName: '',
        yKey: '',
        yName: '',
        strokeWidth: 2,
        strokeOpacity: 1,
        lineDash: undefined,
        lineDashOffset: 0,
        highlightStyle: {
          fill: 'yellow'
        }
      })
    }
  }, tooltipMapping), {
    highlightStyle: {},
    marker: {
      meta: {
        constructor: CartesianSeriesMarker,
        defaults: {
          enabled: true,
          shape: 'circle',
          size: 6,
          maxSize: 30,
          strokeWidth: 1,
          formatter: undefined
        }
      }
    }
  }), _c[ScatterSeries.type] = __assign$7(__assign$7({
    meta: {
      constructor: ScatterSeries,
      defaults: __assign$7(__assign$7({}, seriesDefaults), {
        title: undefined,
        xKey: '',
        yKey: '',
        sizeKey: undefined,
        labelKey: undefined,
        xName: '',
        yName: '',
        sizeName: 'Size',
        labelName: 'Label',
        strokeWidth: 2,
        fillOpacity: 1,
        strokeOpacity: 1,
        highlightStyle: {
          fill: 'yellow'
        }
      })
    }
  }, tooltipMapping), {
    highlightStyle: {},
    marker: {
      meta: {
        constructor: CartesianSeriesMarker,
        defaults: {
          enabled: true,
          shape: 'circle',
          size: 6,
          maxSize: 30,
          strokeWidth: 1,
          formatter: undefined
        }
      }
    }
  }), _c[AreaSeries.type] = __assign$7(__assign$7(__assign$7({
    meta: {
      constructor: AreaSeries,
      setAsIs: ['lineDash'],
      defaults: __assign$7(__assign$7({}, seriesDefaults), {
        xKey: '',
        xName: '',
        yKeys: [],
        yNames: [],
        normalizedTo: undefined,
        fillOpacity: 1,
        strokeOpacity: 1,
        strokeWidth: 2,
        lineDash: undefined,
        lineDashOffset: 0,
        shadow: undefined,
        highlightStyle: {
          fill: 'yellow'
        }
      })
    }
  }, tooltipMapping), {
    highlightStyle: {},
    marker: {
      meta: {
        constructor: CartesianSeriesMarker,
        defaults: {
          enabled: true,
          shape: 'circle',
          size: 6,
          maxSize: 30,
          strokeWidth: 1,
          formatter: undefined
        }
      }
    }
  }), shadowMapping), _c[HistogramSeries.type] = __assign$7(__assign$7(__assign$7({
    meta: {
      constructor: HistogramSeries,
      setAsIs: ['lineDash'],
      defaults: __assign$7(__assign$7({}, seriesDefaults), {
        title: undefined,
        xKey: '',
        yKey: '',
        xName: '',
        yName: '',
        strokeWidth: 1,
        fillOpacity: 1,
        strokeOpacity: 1,
        lineDash: undefined,
        lineDashOffset: 0,
        areaPlot: false,
        binCount: undefined,
        bins: undefined,
        aggregation: 'sum',
        highlightStyle: {
          fill: 'yellow'
        }
      })
    }
  }, tooltipMapping), {
    highlightStyle: {},
    label: {
      meta: {
        defaults: __assign$7(__assign$7({}, labelDefaults), {
          formatter: undefined
        })
      }
    }
  }), shadowMapping), _c),
  navigator: {
    meta: {
      constructor: Navigator,
      defaults: {
        enabled: false,
        height: 30,
        min: 0,
        max: 1
      }
    },
    mask: {
      meta: {
        constructor: NavigatorMask,
        defaults: {
          fill: '#999999',
          stroke: '#999999',
          strokeWidth: 1,
          fillOpacity: 0.2
        }
      }
    },
    minHandle: {
      meta: {
        constructor: NavigatorHandle,
        defaults: {
          fill: '#f2f2f2',
          stroke: '#999999',
          strokeWidth: 1,
          width: 8,
          height: 16,
          gripLineGap: 2,
          gripLineLength: 8
        }
      }
    },
    maxHandle: {
      meta: {
        constructor: NavigatorHandle,
        defaults: {
          fill: '#f2f2f2',
          stroke: '#999999',
          strokeWidth: 1,
          width: 8,
          height: 16,
          gripLineGap: 2,
          gripLineLength: 8
        }
      }
    }
  }
}), _a[PolarChart.type] = __assign$7(__assign$7({
  meta: __assign$7(__assign$7({
    constructor: PolarChart
  }, chartMeta), {
    defaults: __assign$7(__assign$7({}, chartDefaults), {
      padding: {
        meta: {
          constructor: Padding,
          defaults: {
            top: 40,
            right: 40,
            bottom: 40,
            left: 40
          }
        }
      }
    })
  })
}, commonChartMappings), {
  series: (_d = {}, _d[PieSeries.type] = __assign$7(__assign$7(__assign$7({
    meta: {
      constructor: PieSeries,
      setAsIs: ['lineDash'],
      defaults: __assign$7(__assign$7({}, seriesDefaults), {
        title: undefined,
        angleKey: '',
        angleName: '',
        radiusKey: undefined,
        radiusName: undefined,
        labelKey: undefined,
        labelName: undefined,
        callout: {},
        fillOpacity: 1,
        strokeOpacity: 1,
        rotation: 0,
        outerRadiusOffset: 0,
        innerRadiusOffset: 0,
        strokeWidth: 1,
        lineDash: undefined,
        lineDashOffset: 0,
        shadow: undefined
      })
    }
  }, tooltipMapping), {
    highlightStyle: {},
    title: {
      meta: {
        constructor: Caption,
        defaults: {
          enabled: true,
          padding: {
            meta: {
              constructor: Padding,
              defaults: {
                top: 10,
                right: 10,
                bottom: 10,
                left: 10
              }
            }
          },
          text: 'Series Title',
          fontStyle: undefined,
          fontWeight: 'bold',
          fontSize: 14,
          fontFamily: 'Verdana, sans-serif',
          color: 'black'
        }
      }
    },
    label: {
      meta: {
        defaults: __assign$7(__assign$7({}, labelDefaults), {
          offset: 3,
          minAngle: 20
        })
      }
    },
    callout: {
      meta: {
        defaults: {
          length: 10,
          strokeWidth: 1
        }
      }
    }
  }), shadowMapping), _d)
}), _a[HierarchyChart.type] = __assign$7(__assign$7({
  meta: __assign$7(__assign$7({
    constructor: HierarchyChart
  }, chartMeta), {
    defaults: __assign$7({}, chartDefaults)
  })
}, commonChartMappings), {
  series: (_e = {}, _e[TreemapSeries.type] = __assign$7(__assign$7({
    meta: {
      constructor: TreemapSeries,
      defaults: __assign$7(__assign$7({}, seriesDefaults), {
        showInLegend: false,
        labelKey: 'label',
        sizeKey: 'size',
        colorKey: 'color',
        colorDomain: [-5, 5],
        colorRange: ['#cb4b3f', '#6acb64'],
        colorParents: false,
        gradient: true,
        nodePadding: 2,
        title: {},
        subtitle: {},
        labels: {
          large: {},
          medium: {},
          small: {},
          color: {}
        }
      })
    }
  }, tooltipMapping), {
    title: {
      meta: {
        constructor: TreemapSeriesLabel,
        defaults: {
          enabled: true,
          color: 'white',
          fontStyle: undefined,
          fontWeight: 'bold',
          fontSize: 12,
          fontFamily: 'Verdana, sans-serif',
          padding: 15
        }
      }
    },
    subtitle: {
      meta: {
        constructor: TreemapSeriesLabel,
        defaults: {
          enabled: true,
          color: 'white',
          fontStyle: undefined,
          fontWeight: undefined,
          fontSize: 9,
          fontFamily: 'Verdana, sans-serif',
          padding: 13
        }
      }
    },
    labels: {
      meta: {
        defaults: {
          large: {},
          medium: {},
          small: {},
          color: {}
        }
      },
      large: {
        meta: {
          constructor: Label,
          defaults: {
            enabled: true,
            fontStyle: undefined,
            fontWeight: 'bold',
            fontSize: 18,
            fontFamily: 'Verdana, sans-serif',
            color: 'white'
          }
        }
      },
      medium: {
        meta: {
          constructor: Label,
          defaults: {
            enabled: true,
            fontStyle: undefined,
            fontWeight: 'bold',
            fontSize: 14,
            fontFamily: 'Verdana, sans-serif',
            color: 'white'
          }
        }
      },
      small: {
        meta: {
          constructor: Label,
          defaults: {
            enabled: true,
            fontStyle: undefined,
            fontWeight: 'bold',
            fontSize: 10,
            fontFamily: 'Verdana, sans-serif',
            color: 'white'
          }
        }
      },
      color: {
        meta: {
          constructor: Label,
          defaults: {
            enabled: true,
            fontStyle: undefined,
            fontWeight: undefined,
            fontSize: 12,
            fontFamily: 'Verdana, sans-serif',
            color: 'white'
          }
        }
      }
    }
  }), _e)
}), _a);
// Amend the `mappings` object with aliases for different chart types.
{
  var typeToAliases = {
    cartesian: ['line', 'area', 'bar', 'column'],
    polar: ['pie'],
    hierarchy: ['treemap']
  };
  var _loop_1 = function (type) {
    typeToAliases[type].forEach(function (alias) {
      mappings[alias] = mappings[type];
    });
  };
  for (var type in typeToAliases) {
    _loop_1(type);
  }
}
// Special handling for scatter and histogram charts, for which both axes should default to type `number`.
mappings['scatter'] = mappings['histogram'] = __assign$7(__assign$7({}, mappings.cartesian), {
  meta: __assign$7(__assign$7({}, mappings.cartesian.meta), {
    defaults: __assign$7(__assign$7({}, chartDefaults), {
      axes: [{
        type: 'number',
        position: 'bottom'
      }, {
        type: 'number',
        position: 'left'
      }]
    })
  })
});
var groupedCategoryChartMapping = Object.create(mappings[CartesianChart.type]);
var groupedCategoryChartMeta = Object.create(groupedCategoryChartMapping.meta);
groupedCategoryChartMeta.constructor = GroupedCategoryChart;
groupedCategoryChartMapping.meta = groupedCategoryChartMeta;
mappings[GroupedCategoryChart.type] = groupedCategoryChartMapping;
var __assign$8 =  false || function () {
  __assign$8 = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$8.apply(this, arguments);
};
var __spreadArrays$7 =  false || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
};
var lightTheme = new ChartTheme();
var darkTheme = new DarkTheme();
var lightThemes = {
  'undefined': lightTheme,
  'null': lightTheme,
  'ag-default': lightTheme,
  'ag-material': new MaterialLight(),
  'ag-pastel': new PastelLight(),
  'ag-solar': new SolarLight(),
  'ag-vivid': new VividLight()
};
var darkThemes = {
  'undefined': darkTheme,
  'null': darkTheme,
  'ag-default-dark': darkTheme,
  'ag-material-dark': new MaterialDark(),
  'ag-pastel-dark': new PastelDark(),
  'ag-solar-dark': new SolarDark(),
  'ag-vivid-dark': new VividDark()
};
var themes = __assign$8(__assign$8({}, darkThemes), lightThemes);
function getChartTheme(value) {
  if (value instanceof ChartTheme) {
    return value;
  }
  var stockTheme = themes[value];
  if (stockTheme) {
    return stockTheme;
  }
  value = value;
  if (value.baseTheme || value.overrides || value.palette) {
    var baseTheme = getChartTheme(value.baseTheme);
    return new baseTheme.constructor(value);
  }
  return lightTheme;
}
var firstColorIndex = 0;
var AgChart = /** @class */function () {
  function AgChart() {}
  AgChart.create = function (options, container, data) {
    options = Object.create(options); // avoid mutating user provided options
    if (container) {
      options.container = container;
    }
    if (data) {
      options.data = data;
    }
    // special handling when both `autoSize` and `width` / `height` are present in the options
    var autoSize = options && options.autoSize !== false;
    var theme = getChartTheme(options.theme);
    firstColorIndex = 0;
    var chart = create(options, undefined, undefined, theme);
    if (chart) {
      if (autoSize) {
        // `autoSize` takes precedence over `width` / `height`
        chart.autoSize = true;
      }
    }
    return chart;
  };
  AgChart.update = function (chart, options, container, data) {
    if (!(chart && options)) {
      return;
    }
    options = Object.create(options);
    if (container) {
      options.container = container;
    }
    if (data) {
      options.data = data;
    }
    var autoSize = options && options.autoSize !== false;
    var theme = getChartTheme(options.theme);
    firstColorIndex = 0;
    update(chart, options, undefined, theme);
    if (autoSize) {
      chart.autoSize = true;
    }
  };
  AgChart.save = function (component) {
    var target = {};
    save(component, target);
    return target;
  };
  AgChart.createComponent = create;
  return AgChart;
}();
var pathToSeriesTypeMap = {
  'cartesian.series': 'line',
  'line.series': 'line',
  'area.series': 'area',
  'bar.series': 'bar',
  'column.series': 'column',
  'histogram.series': 'histogram',
  'scatter.series': 'scatter',
  'polar.series': 'pie',
  'pie.series': 'pie'
};
var actualSeriesTypeMap = function () {
  var map = {};
  var actualSeries = ['area', 'bar', 'histogram', 'line', 'pie', 'scatter'];
  actualSeries.forEach(function (series) {
    return map[series] = series;
  });
  // Aliases:
  map['column'] = 'bar';
  return map;
}();
function save(component, target, mapping) {
  if (target === void 0) {
    target = {};
  }
  if (mapping === void 0) {
    mapping = mappings;
  }
  if (component.constructor && component.constructor.type && !mapping.meta) {
    mapping = mapping[component.constructor.type];
  }
  var defaults = mapping && mapping.meta && mapping.meta.defaults;
  var keys = Object.keys(defaults);
  keys.forEach(function (key) {
    var value = component[key];
    if (isObject(value) && (!mapping.meta.nonSerializable || mapping.meta.nonSerializable.indexOf(key) < 0)) {
      target[key] = {};
      // save(value, target[key], mapping[key]);
    } else if (Array.isArray(value)) ;else {
      target[key] = component[key];
    }
  });
}
function create(options, path, component, theme) {
  var _a;
  // Deprecate `chart.legend.item.marker.type` in integrated chart options.
  options = Object.create(options);
  if (component instanceof LegendMarker) {
    if (options.type) {
      options.shape = options.type;
    }
  } else {
    options = provideDefaultType(options, path);
    if (path) {
      if (options.type) {
        path = path + '.' + options.type;
      }
    } else {
      path = options.type;
    }
  }
  if (!path) {
    return;
  }
  var mapping = getValue(mappings, path);
  if (mapping) {
    options = provideDefaultOptions(path, options, mapping, theme);
    var meta = mapping.meta || {};
    var constructorParams = meta.constructorParams || [];
    var skipKeys = ['type', 'listeners'].concat(constructorParams);
    // TODO: Constructor params processing could be improved, but it's good enough for current params.
    var constructorParamValues = constructorParams.map(function (param) {
      return options[param];
    }).filter(function (value) {
      return value !== undefined;
    });
    if (!component) {
      component = new ((_a = meta.constructor).bind.apply(_a, __spreadArrays$7([void 0], constructorParamValues)))();
      if (theme && component instanceof Series) {
        firstColorIndex = theme.setSeriesColors(component, options, firstColorIndex);
      }
    }
    var _loop_1 = function (key) {
      // Process every non-special key in the config object.
      if (skipKeys.indexOf(key) < 0) {
        var value = options[key];
        if (value && key in mapping && !(meta.setAsIs && meta.setAsIs.indexOf(key) >= 0)) {
          if (Array.isArray(value)) {
            var subComponents = value.map(function (config) {
              var axis = create(config, path + '.' + key, undefined, theme);
              if (theme && key === 'axes') {
                var fakeTheme = {
                  getConfig: function (path) {
                    var parts = path.split('.');
                    var modifiedPath = parts.slice(0, 3).join('.') + '.' + axis.position;
                    var after = parts.slice(3);
                    if (after.length) {
                      modifiedPath += '.' + after.join('.');
                    }
                    var config = theme.getConfig(path);
                    var modifiedConfig = theme.getConfig(modifiedPath);
                    isObject(theme.getConfig(modifiedPath));
                    if (isObject(config) && isObject(modifiedConfig)) {
                      return deepMerge(config, modifiedConfig);
                    }
                    return modifiedConfig;
                  }
                };
                update(axis, config, path + '.' + key, fakeTheme);
              }
              return axis;
            }).filter(function (instance) {
              return !!instance;
            });
            component[key] = subComponents;
          } else {
            if (mapping[key] && component[key]) {
              // The instance property already exists on the component (e.g. chart.legend).
              // Simply configure the existing instance, without creating a new one.
              create(value, path + '.' + key, component[key], theme);
            } else {
              var subComponent = create(value, value.type ? path : path + '.' + key, undefined, theme);
              if (subComponent) {
                component[key] = subComponent;
              }
            }
          }
        } else {
          // if (key in meta.constructor.defaults) { // prevent users from creating custom properties
          component[key] = value;
        }
      }
    };
    for (var key in options) {
      _loop_1(key);
    }
    var listeners = options.listeners;
    if (component && component.addEventListener && listeners) {
      for (var key in listeners) {
        if (listeners.hasOwnProperty(key)) {
          var listener = listeners[key];
          if (typeof listener === 'function') {
            component.addEventListener(key, listener);
          }
        }
      }
    }
    return component;
  }
}
function update(component, options, path, theme) {
  if (!(options && isObject(options))) {
    return;
  }
  // Deprecate `chart.legend.item.marker.type` in integrated chart options.
  if (component instanceof LegendMarker) {
    if (options.type) {
      options.shape = options.type;
    }
  } else {
    options = provideDefaultType(options, path);
    if (path) {
      if (options.type) {
        path = path + '.' + options.type;
      }
    } else {
      path = options.type;
    }
  }
  if (!path) {
    return;
  }
  var chart = path in mappings ? component : undefined;
  var mapping = getValue(mappings, path);
  if (mapping) {
    options = provideDefaultOptions(path, options, mapping, theme);
    var meta = mapping.meta || {};
    var constructorParams = meta && meta.constructorParams || [];
    var skipKeys = ['type'].concat(constructorParams);
    for (var key in options) {
      if (skipKeys.indexOf(key) < 0) {
        var value = options[key];
        var keyPath = path + '.' + key;
        if (meta.setAsIs && meta.setAsIs.indexOf(key) >= 0) {
          component[key] = value;
        } else {
          var oldValue = component[key];
          if (Array.isArray(oldValue) && Array.isArray(value)) {
            if (chart) {
              if (key === 'series') {
                updateSeries(component, value, keyPath, theme);
              } else if (key === 'axes') {
                updateAxes(component, value, keyPath, theme);
              }
            } else {
              component[key] = value;
            }
          } else if (isObject(oldValue)) {
            if (value) {
              update(oldValue, value, value.type ? path : keyPath, theme);
            } else if (key in options) {
              component[key] = value;
            }
          } else {
            var subComponent = isObject(value) && create(value, value.type ? path : keyPath, undefined, theme);
            if (subComponent) {
              component[key] = subComponent;
            } else {
              if (chart && options.autoSize && (key === 'width' || key === 'height')) {
                continue;
              }
              component[key] = value;
            }
          }
        }
      }
    }
  }
  if (chart) {
    chart.layoutPending = true;
  }
}
function updateSeries(chart, configs, keyPath, theme) {
  var allSeries = chart.series.slice();
  var prevSeries;
  var i = 0;
  for (; i < configs.length; i++) {
    var config = configs[i];
    var series = allSeries[i];
    if (series) {
      config = provideDefaultType(config, keyPath);
      var type = actualSeriesTypeMap[config.type];
      if (series.type === type) {
        if (theme) {
          firstColorIndex = theme.setSeriesColors(series, config, firstColorIndex);
        }
        update(series, config, keyPath, theme);
      } else {
        var newSeries = create(config, keyPath, undefined, theme);
        chart.removeSeries(series);
        chart.addSeriesAfter(newSeries, prevSeries);
        series = newSeries;
      }
    } else {
      // more new configs than existing series
      var newSeries = create(config, keyPath, undefined, theme);
      chart.addSeries(newSeries);
    }
    prevSeries = series;
  }
  // more existing series than new configs
  for (; i < allSeries.length; i++) {
    var series = allSeries[i];
    if (series) {
      chart.removeSeries(series);
    }
  }
}
function updateAxes(chart, configs, keyPath, theme) {
  var axes = chart.axes;
  var axesToAdd = [];
  var axesToUpdate = [];
  var _loop_2 = function (config) {
    var axisToUpdate = find(axes, function (axis) {
      return axis.type === config.type && axis.position === config.position;
    });
    if (axisToUpdate) {
      axesToUpdate.push(axisToUpdate);
      update(axisToUpdate, config, keyPath, theme);
    } else {
      var axisToAdd = create(config, keyPath, undefined, theme);
      if (axisToAdd) {
        axesToAdd.push(axisToAdd);
      }
    }
  };
  for (var _i = 0, configs_1 = configs; _i < configs_1.length; _i++) {
    var config = configs_1[_i];
    _loop_2(config);
  }
  chart.axes = axesToUpdate.concat(axesToAdd);
}
function provideDefaultChartType(options) {
  if (options.type) {
    return options;
  }
  // If chart type is not specified, try to infer it from the type of first series.
  var series = options.series && options.series[0];
  if (series && series.type) {
    outerLoop: for (var chartType in mappings) {
      for (var seriesType in mappings[chartType].series) {
        if (series.type === seriesType) {
          options = Object.create(options);
          options.type = chartType;
          break outerLoop;
        }
      }
    }
  }
  if (!options.type) {
    options = Object.create(options);
    options.type = 'cartesian';
  }
  return options;
}
function provideDefaultType(options, path) {
  if (!path) {
    // if `path` is undefined, `options` is a top-level (chart) config
    path = '';
    options = provideDefaultChartType(options);
  }
  if (!options.type) {
    var seriesType = pathToSeriesTypeMap[path];
    if (seriesType) {
      options = Object.create(options);
      options.type = seriesType;
    }
  }
  return options;
}
function skipThemeKey(key) {
  return ['axes', 'series'].indexOf(key) >= 0;
}
var enabledKey = 'enabled';
/**
 * If certain options were not provided by the user, use the defaults from the theme and the mapping.
 * All three objects are provided for the current path in the config tree, not necessarily top-level.
 */
function provideDefaultOptions(path, options, mapping, theme) {
  var isChartConfig = path.indexOf('.') < 0;
  var themeDefaults = theme && theme.getConfig(path);
  var defaults = mapping && mapping.meta && mapping.meta.defaults;
  var isExplicitlyDisabled = options.enabled === false; // by the user
  if (defaults || themeDefaults) {
    options = Object.create(options);
  }
  // Fill in the gaps for properties not configured by the user using theme provided values.
  for (var key in themeDefaults) {
    // The default values for these special chart configs always come from the mappings, not theme.
    if (isChartConfig && skipThemeKey(key)) {
      continue;
    }
    if (!(key in options)) {
      options[key] = themeDefaults[key];
    }
  }
  // Fill in the gaps for properties not configured by the user, nor theme using chart mappings.
  for (var key in defaults) {
    if ((!themeDefaults || !(key in themeDefaults) || skipThemeKey(key)) && !(key in options)) {
      options[key] = defaults[key];
    }
  }
  // Special handling for the 'enabled' property. For example:
  // title: { text: 'Quarterly Revenue' } // means title is enabled
  // legend: {} // means legend is enabled
  var hasEnabledKey = themeDefaults && enabledKey in themeDefaults || defaults && enabledKey in defaults;
  if (hasEnabledKey && !isExplicitlyDisabled) {
    options[enabledKey] = true;
  }
  return options;
}
var __extends$1D =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$Q =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ChartController = /** @class */function (_super) {
  __extends$1D(ChartController, _super);
  function ChartController(model) {
    var _this = _super.call(this) || this;
    _this.model = model;
    return _this;
  }
  ChartController.prototype.init = function () {
    var _this = this;
    this.setChartRange();
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_RANGE_SELECTION_CHANGED, function (event) {
      if (event.id && event.id === _this.model.getChartId()) {
        _this.updateForRangeChange();
      }
    });
    if (this.model.isUnlinked()) {
      if (this.rangeController) {
        this.rangeController.setCellRanges([]);
      }
    }
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_COLUMN_MOVED, this.updateForGridChange.bind(this));
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_COLUMN_PINNED, this.updateForGridChange.bind(this));
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_COLUMN_VISIBLE, this.updateForGridChange.bind(this));
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.updateForGridChange.bind(this));
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_MODEL_UPDATED, this.updateForGridChange.bind(this));
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_CELL_VALUE_CHANGED, this.updateForDataChange.bind(this));
  };
  ChartController.prototype.updateForGridChange = function () {
    if (this.model.isUnlinked()) {
      return;
    }
    this.model.updateCellRanges();
    this.setChartRange();
  };
  ChartController.prototype.updateForDataChange = function () {
    if (this.model.isUnlinked()) {
      return;
    }
    this.model.updateData();
    this.raiseChartUpdatedEvent();
  };
  ChartController.prototype.updateForRangeChange = function () {
    this.updateForGridChange();
    this.raiseChartRangeSelectionChangedEvent();
  };
  ChartController.prototype.updateForPanelChange = function (updatedCol) {
    this.model.updateCellRanges(updatedCol);
    this.setChartRange();
    this.raiseChartRangeSelectionChangedEvent();
  };
  ChartController.prototype.getChartModel = function () {
    var _this = this;
    var modelType = this.model.isPivotChart() ? 'pivot' : 'range';
    return {
      modelType: modelType,
      chartId: this.model.getChartId(),
      chartType: this.model.getChartType(),
      chartThemeName: this.getThemeName(),
      chartOptions: this.chartProxy.getChartOptions(),
      cellRange: this.model.getCellRangeParams(),
      chart: this.chartProxy.getChart(),
      getChartImageDataURL: function (params) {
        return _this.chartProxy.getChartImageDataURL(params.type);
      },
      suppressChartRanges: this.model.isSuppressChartRanges(),
      aggFunc: this.model.getAggFunc(),
      unlinkChart: this.model.isUnlinked()
    };
  };
  ChartController.prototype.getChartType = function () {
    return this.model.getChartType();
  };
  ChartController.prototype.isPivotChart = function () {
    return this.model.isPivotChart();
  };
  ChartController.prototype.isGrouping = function () {
    return this.model.isGrouping();
  };
  ChartController.prototype.getThemeName = function () {
    return this.model.getChartThemeName();
  };
  ChartController.prototype.getThemes = function () {
    return this.gridOptionsWrapper.getChartThemes();
  };
  ChartController.prototype.getPalettes = function () {
    var _this = this;
    var customPalette = this.chartProxy.getCustomPalette();
    if (customPalette) {
      return [customPalette];
    }
    var themeNames = this.gridOptionsWrapper.getChartThemes();
    return themeNames.map(function (themeName) {
      var theme = _this.chartProxy.isStockTheme(themeName) ? themeName : _this.chartProxy.lookupCustomChartTheme(themeName);
      return getChartTheme(theme).palette;
    });
  };
  ChartController.prototype.setChartType = function (chartType) {
    this.model.setChartType(chartType);
    this.raiseChartUpdatedEvent();
    this.raiseChartOptionsChangedEvent();
  };
  ChartController.prototype.setChartThemeName = function (chartThemeName) {
    this.model.setChartThemeName(chartThemeName);
    this.raiseChartUpdatedEvent();
    this.raiseChartOptionsChangedEvent();
  };
  ChartController.prototype.getColStateForMenu = function () {
    return {
      dimensionCols: this.model.getDimensionColState(),
      valueCols: this.model.getValueColState()
    };
  };
  ChartController.prototype.isDefaultCategorySelected = function () {
    return this.model.getSelectedDimension().colId === ChartDataModel.DEFAULT_CATEGORY;
  };
  ChartController.prototype.setChartRange = function (silent) {
    if (silent === void 0) {
      silent = false;
    }
    if (this.rangeController && !this.model.isSuppressChartRanges() && !this.model.isUnlinked()) {
      this.rangeController.setCellRanges(this.model.getCellRanges());
    }
    if (!silent) {
      this.raiseChartUpdatedEvent();
    }
  };
  ChartController.prototype.detachChartRange = function () {
    // when chart is detached it won't listen to changes from the grid
    this.model.toggleUnlinked();
    if (this.model.isUnlinked()) {
      // remove range from grid
      if (this.rangeController) {
        this.rangeController.setCellRanges([]);
      }
    } else {
      // update chart data may have changed
      this.updateForGridChange();
    }
  };
  ChartController.prototype.setChartProxy = function (chartProxy) {
    this.chartProxy = chartProxy;
  };
  ChartController.prototype.getChartProxy = function () {
    return this.chartProxy;
  };
  ChartController.prototype.isActiveXYChart = function () {
    return agGridCommunity._.includes([agGridCommunity.ChartType.Scatter, agGridCommunity.ChartType.Bubble], this.getChartType());
  };
  ChartController.prototype.isChartLinked = function () {
    return !this.model.isUnlinked();
  };
  ChartController.prototype.raiseChartUpdatedEvent = function () {
    var event = Object.freeze({
      type: ChartController.EVENT_CHART_UPDATED
    });
    this.dispatchEvent(event);
  };
  ChartController.prototype.raiseChartOptionsChangedEvent = function () {
    this.chartProxy.raiseChartOptionsChangedEvent();
  };
  ChartController.prototype.raiseChartRangeSelectionChangedEvent = function () {
    var event = Object.freeze({
      type: agGridCommunity.Events.EVENT_CHART_RANGE_SELECTION_CHANGED,
      id: this.model.getChartId(),
      chartId: this.model.getChartId(),
      cellRange: this.model.getCellRangeParams(),
      api: this.gridApi,
      columnApi: this.columnApi
    });
    this.eventService.dispatchEvent(event);
  };
  ChartController.prototype.destroy = function () {
    _super.prototype.destroy.call(this);
    if (this.rangeController) {
      this.rangeController.setCellRanges([]);
    }
  };
  ChartController.EVENT_CHART_UPDATED = 'chartUpdated';
  __decorate$Q([agGridCommunity.Autowired('rangeController')], ChartController.prototype, "rangeController", void 0);
  __decorate$Q([agGridCommunity.Autowired('gridApi')], ChartController.prototype, "gridApi", void 0);
  __decorate$Q([agGridCommunity.Autowired('columnApi')], ChartController.prototype, "columnApi", void 0);
  __decorate$Q([agGridCommunity.PostConstruct], ChartController.prototype, "init", null);
  return ChartController;
}(agGridCommunity.BeanStub);
var __extends$1E =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$R =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __spreadArrays$8 =  false || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
};
var ChartDataPanel = /** @class */function (_super) {
  __extends$1E(ChartDataPanel, _super);
  function ChartDataPanel(chartController) {
    var _this = _super.call(this, ChartDataPanel.TEMPLATE) || this;
    _this.columnComps = new Map();
    _this.chartController = chartController;
    return _this;
  }
  ChartDataPanel.prototype.init = function () {
    this.updatePanels();
    this.addManagedListener(this.chartController, ChartController.EVENT_CHART_UPDATED, this.updatePanels.bind(this));
  };
  ChartDataPanel.prototype.destroy = function () {
    this.clearComponents();
    _super.prototype.destroy.call(this);
  };
  ChartDataPanel.prototype.updatePanels = function () {
    var _this = this;
    var currentChartType = this.chartType;
    var _a = this.chartController.getColStateForMenu(),
      dimensionCols = _a.dimensionCols,
      valueCols = _a.valueCols;
    var colIds = dimensionCols.map(function (c) {
      return c.colId;
    }).concat(valueCols.map(function (c) {
      return c.colId;
    }));
    this.chartType = this.chartController.getChartType();
    if (agGridCommunity._.areEqual(agGridCommunity._.keys(this.columnComps), colIds) && this.chartType === currentChartType) {
      // if possible, we just update existing components
      __spreadArrays$8(dimensionCols, valueCols).forEach(function (col) {
        _this.columnComps.get(col.colId).setValue(col.selected, true);
      });
      if (this.chartController.isActiveXYChart()) {
        var getSeriesLabel_1 = this.generateGetSeriesLabel();
        valueCols.forEach(function (col) {
          _this.columnComps.get(col.colId).setLabel(getSeriesLabel_1(col));
        });
      }
    } else {
      // otherwise we re-create everything
      this.clearComponents();
      this.createCategoriesGroupComponent(dimensionCols);
      this.createSeriesGroupComponent(valueCols);
    }
  };
  ChartDataPanel.prototype.addComponent = function (parent, component) {
    var eDiv = document.createElement('div');
    eDiv.className = 'ag-chart-data-section';
    eDiv.appendChild(component.getGui());
    parent.appendChild(eDiv);
  };
  ChartDataPanel.prototype.addChangeListener = function (component, columnState) {
    var _this = this;
    this.addManagedListener(component, agGridCommunity.AgAbstractField.EVENT_CHANGED, function () {
      columnState.selected = component.getValue();
      _this.chartController.updateForPanelChange(columnState);
    });
  };
  ChartDataPanel.prototype.createCategoriesGroupComponent = function (columns) {
    var _this = this;
    this.categoriesGroupComp = this.createBean(new agGridCommunity.AgGroupComponent({
      title: this.getCategoryGroupTitle(),
      enabled: true,
      suppressEnabledCheckbox: true,
      suppressOpenCloseIcons: false,
      cssIdentifier: 'charts-data'
    }));
    var inputName = "chartDimension" + this.getCompId();
    columns.forEach(function (col) {
      var comp = _this.categoriesGroupComp.createManagedBean(new agGridCommunity.AgRadioButton());
      comp.setLabel(agGridCommunity._.escapeString(col.displayName));
      comp.setValue(col.selected);
      comp.setInputName(inputName);
      _this.addChangeListener(comp, col);
      _this.categoriesGroupComp.addItem(comp);
      _this.columnComps.set(col.colId, comp);
    });
    this.addComponent(this.getGui(), this.categoriesGroupComp);
  };
  ChartDataPanel.prototype.createSeriesGroupComponent = function (columns) {
    var _this = this;
    this.seriesGroupComp = this.createManagedBean(new agGridCommunity.AgGroupComponent({
      title: this.getSeriesGroupTitle(),
      enabled: true,
      suppressEnabledCheckbox: true,
      suppressOpenCloseIcons: false,
      cssIdentifier: 'charts-data'
    }));
    if (this.chartController.isActiveXYChart()) {
      var pairedModeToggle = this.seriesGroupComp.createManagedBean(new agGridCommunity.AgToggleButton());
      var chartProxy_1 = this.chartController.getChartProxy();
      pairedModeToggle.setLabel(this.chartTranslator.translate('paired')).setLabelAlignment('left').setLabelWidth('flex').setInputWidth(45).setValue(chartProxy_1.getSeriesOption('paired') || false).onValueChange(function (newValue) {
        chartProxy_1.setSeriesOption('paired', newValue);
        _this.chartController.updateForGridChange();
      });
      this.seriesGroupComp.addItem(pairedModeToggle);
    }
    var getSeriesLabel = this.generateGetSeriesLabel();
    columns.forEach(function (col) {
      var comp = _this.seriesGroupComp.createManagedBean(new agGridCommunity.AgCheckbox());
      comp.addCssClass('ag-data-select-checkbox');
      var label = getSeriesLabel(col);
      comp.setLabel(label);
      comp.setValue(col.selected);
      _this.addChangeListener(comp, col);
      _this.seriesGroupComp.addItem(comp);
      _this.columnComps.set(col.colId, comp);
      _this.addDragHandle(comp, col);
    });
    this.addComponent(this.getGui(), this.seriesGroupComp);
    var dropTarget = {
      getContainer: this.getGui.bind(this),
      onDragging: this.onDragging.bind(this),
      isInterestedIn: this.isInterestedIn.bind(this)
    };
    this.dragAndDropService.addDropTarget(dropTarget);
  };
  ChartDataPanel.prototype.addDragHandle = function (comp, col) {
    var _this = this;
    var eDragHandle = agGridCommunity._.createIconNoSpan('columnDrag', this.gridOptionsWrapper);
    agGridCommunity._.addCssClass(eDragHandle, 'ag-drag-handle');
    agGridCommunity._.addCssClass(eDragHandle, 'ag-chart-data-column-drag-handle');
    comp.getGui().insertAdjacentElement('beforeend', eDragHandle);
    var dragSource = {
      type: agGridCommunity.DragSourceType.ChartPanel,
      eElement: eDragHandle,
      dragItemName: col.displayName,
      defaultIconName: agGridCommunity.DragAndDropService.ICON_MOVE,
      getDragItem: function () {
        return {
          columns: [col.column]
        };
      },
      onDragStopped: function () {
        _this.insertIndex = undefined;
      }
    };
    this.dragAndDropService.addDragSource(dragSource, true);
    this.addDestroyFunc(function () {
      return _this.dragAndDropService.removeDragSource(dragSource);
    });
  };
  ChartDataPanel.prototype.generateGetSeriesLabel = function () {
    if (!this.chartController.isActiveXYChart()) {
      return function (col) {
        return agGridCommunity._.escapeString(col.displayName);
      };
    }
    var isBubble = this.chartType === agGridCommunity.ChartType.Bubble;
    var isInPairedMode = this.isInPairedMode();
    var selectedValuesCount = 0;
    var indexToAxisLabel = new Map();
    indexToAxisLabel.set(0, 'X');
    indexToAxisLabel.set(1, 'Y');
    indexToAxisLabel.set(2, 'size');
    return function (col) {
      var escapedLabel = agGridCommunity._.escapeString(col.displayName);
      if (!col.selected) {
        return escapedLabel;
      }
      var axisLabel;
      if (isInPairedMode) {
        axisLabel = indexToAxisLabel.get(selectedValuesCount % (isBubble ? 3 : 2));
      } else {
        if (selectedValuesCount === 0) {
          axisLabel = 'X';
        } else {
          axisLabel = isBubble && selectedValuesCount % 2 === 0 ? 'size' : 'Y';
        }
      }
      selectedValuesCount++;
      return escapedLabel + " (" + axisLabel + ")";
    };
  };
  ChartDataPanel.prototype.getCategoryGroupTitle = function () {
    return this.chartTranslator.translate(this.chartController.isActiveXYChart() ? 'labels' : 'categories');
  };
  ChartDataPanel.prototype.getSeriesGroupTitle = function () {
    return this.chartTranslator.translate(this.chartController.isActiveXYChart() ? 'xyValues' : 'series');
  };
  ChartDataPanel.prototype.isInPairedMode = function () {
    return this.chartController.isActiveXYChart() && this.chartController.getChartProxy().getSeriesOption('paired');
  };
  ChartDataPanel.prototype.clearComponents = function () {
    agGridCommunity._.clearElement(this.getGui());
    this.categoriesGroupComp = this.destroyBean(this.categoriesGroupComp);
    this.seriesGroupComp = this.destroyBean(this.seriesGroupComp);
    this.columnComps.clear();
  };
  ChartDataPanel.prototype.onDragging = function (draggingEvent) {
    var _this = this;
    if (this.checkInsertIndex(draggingEvent)) {
      var column_1 = draggingEvent.dragItem.columns[0];
      var _a = this.chartController.getColStateForMenu(),
        dimensionCols = _a.dimensionCols,
        valueCols = _a.valueCols;
      __spreadArrays$8(dimensionCols, valueCols).filter(function (state) {
        return state.column === column_1;
      }).forEach(function (state) {
        state.order = _this.insertIndex;
        _this.chartController.updateForPanelChange(state);
      });
    }
  };
  ChartDataPanel.prototype.checkInsertIndex = function (draggingEvent) {
    if (agGridCommunity._.missing(draggingEvent.vDirection)) {
      return false;
    }
    var newIndex = 0;
    var mouseEvent = draggingEvent.event;
    this.columnComps.forEach(function (comp) {
      var rect = comp.getGui().getBoundingClientRect();
      var verticalFit = mouseEvent.clientY >= (draggingEvent.vDirection === agGridCommunity.VerticalDirection.Down ? rect.top : rect.bottom);
      if (verticalFit) {
        newIndex++;
      }
    });
    var changed = this.insertIndex !== undefined && newIndex !== this.insertIndex;
    this.insertIndex = newIndex;
    return changed;
  };
  ChartDataPanel.prototype.isInterestedIn = function (type) {
    return type === agGridCommunity.DragSourceType.ChartPanel;
  };
  ChartDataPanel.TEMPLATE = "<div class=\"ag-chart-data-wrapper\"></div>";
  __decorate$R([agGridCommunity.Autowired('dragAndDropService')], ChartDataPanel.prototype, "dragAndDropService", void 0);
  __decorate$R([agGridCommunity.Autowired('chartTranslator')], ChartDataPanel.prototype, "chartTranslator", void 0);
  __decorate$R([agGridCommunity.PostConstruct], ChartDataPanel.prototype, "init", null);
  return ChartDataPanel;
}(agGridCommunity.Component);
var __extends$1F =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$S =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FontPanel = /** @class */function (_super) {
  __extends$1F(FontPanel, _super);
  function FontPanel(params) {
    var _this = _super.call(this) || this;
    _this.activeComps = [];
    _this.params = params;
    return _this;
  }
  FontPanel.prototype.init = function () {
    var groupParams = {
      cssIdentifier: 'charts-format-sub-level',
      direction: 'vertical',
      suppressOpenCloseIcons: true
    };
    this.setTemplate(FontPanel.TEMPLATE, {
      fontGroup: groupParams
    });
    this.initGroup();
    this.initFontFamilySelect();
    this.initFontWeightStyleSelect();
    this.initFontSizeSelect();
    this.initFontColorPicker();
  };
  FontPanel.prototype.addCompToPanel = function (comp) {
    this.fontGroup.addItem(comp);
    this.activeComps.push(comp);
  };
  FontPanel.prototype.setEnabled = function (enabled) {
    this.fontGroup.setEnabled(enabled);
  };
  FontPanel.prototype.initGroup = function () {
    var _this = this;
    this.fontGroup.setTitle(this.params.name || this.chartTranslator.translate('font')).setEnabled(this.params.enabled).hideEnabledCheckbox(!!this.params.suppressEnabledCheckbox).hideOpenCloseIcons(true).onEnableChange(function (enabled) {
      if (_this.params.setEnabled) {
        _this.params.setEnabled(enabled);
      }
    });
  };
  FontPanel.prototype.initFontFamilySelect = function () {
    var _this = this;
    var families = ['Arial, sans-serif', 'Aria Black, sans-serif', 'Book Antiqua,  serif', 'Charcoal, sans-serif', 'Comic Sans MS, cursive', 'Courier, monospace', 'Courier New, monospace', 'Gadget, sans-serif', 'Geneva, sans-serif', 'Helvetica, sans-serif', 'Impact, sans-serif', 'Lucida Console, monospace', 'Lucida Grande, sans-serif', 'Lucida Sans Unicode,  sans-serif', 'Monaco, monospace', 'Palatino Linotype, serif', 'Palatino, serif', 'Times New Roman, serif', 'Times, serif', 'Verdana, sans-serif'];
    var family = this.params.initialFont.family;
    var initialValue = families[0];
    if (family) {
      // check for known values using lowercase
      var lowerCaseValues = families.map(function (f) {
        return f.toLowerCase();
      });
      var valueIndex = lowerCaseValues.indexOf(family.toLowerCase());
      if (valueIndex >= 0) {
        initialValue = families[valueIndex];
      } else {
        // add user provided value to list
        var capitalisedFontValue = agGridCommunity._.capitalise(family);
        families.push(capitalisedFontValue);
        initialValue = capitalisedFontValue;
      }
    }
    var options = families.sort().map(function (value) {
      return {
        value: value,
        text: value
      };
    });
    this.familySelect.addOptions(options).setInputWidth('flex').setValue("" + initialValue).onValueChange(function (newValue) {
      return _this.params.setFont({
        family: newValue
      });
    });
  };
  FontPanel.prototype.initFontSizeSelect = function () {
    var _this = this;
    var sizes = [8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36];
    var size = this.params.initialFont.size;
    if (!agGridCommunity._.includes(sizes, size)) {
      sizes.push(size);
    }
    var options = sizes.sort(function (a, b) {
      return a - b;
    }).map(function (value) {
      return {
        value: "" + value,
        text: "" + value
      };
    });
    this.sizeSelect.addOptions(options).setInputWidth('flex').setValue("" + size).onValueChange(function (newValue) {
      return _this.params.setFont({
        size: parseInt(newValue, 10)
      });
    });
    this.sizeSelect.setLabel(this.chartTranslator.translate('size'));
  };
  FontPanel.prototype.initFontWeightStyleSelect = function () {
    var _this = this;
    var _a = this.params.initialFont,
      _b = _a.weight,
      weight = _b === void 0 ? 'normal' : _b,
      _c = _a.style,
      style = _c === void 0 ? 'normal' : _c;
    var weightStyles = [{
      name: 'normal',
      weight: 'normal',
      style: 'normal'
    }, {
      name: 'bold',
      weight: 'bold',
      style: 'normal'
    }, {
      name: 'italic',
      weight: 'normal',
      style: 'italic'
    }, {
      name: 'boldItalic',
      weight: 'bold',
      style: 'italic'
    }];
    var selectedOption = agGridCommunity._.find(weightStyles, function (x) {
      return x.weight === weight && x.style === style;
    });
    if (!selectedOption) {
      selectedOption = {
        name: 'predefined',
        weight: weight,
        style: style
      };
      weightStyles.unshift(selectedOption);
    }
    var options = weightStyles.map(function (ws) {
      return {
        value: ws.name,
        text: _this.chartTranslator.translate(ws.name)
      };
    });
    this.weightStyleSelect.addOptions(options).setInputWidth('flex').setValue(selectedOption.name).onValueChange(function (newValue) {
      var selectedWeightStyle = agGridCommunity._.find(weightStyles, function (x) {
        return x.name === newValue;
      });
      _this.params.setFont({
        weight: selectedWeightStyle.weight,
        style: selectedWeightStyle.style
      });
    });
  };
  FontPanel.prototype.initFontColorPicker = function () {
    var _this = this;
    this.colorPicker.setLabel(this.chartTranslator.translate('color')).setInputWidth(45).setValue("" + this.params.initialFont.color).onValueChange(function (newColor) {
      return _this.params.setFont({
        color: newColor
      });
    });
  };
  FontPanel.prototype.destroyActiveComps = function () {
    var _this = this;
    this.activeComps.forEach(function (comp) {
      agGridCommunity._.removeFromParent(comp.getGui());
      _this.destroyBean(comp);
    });
  };
  FontPanel.prototype.destroy = function () {
    this.destroyActiveComps();
    _super.prototype.destroy.call(this);
  };
  FontPanel.TEMPLATE = "<div class=\"ag-font-panel\">\n            <ag-group-component ref=\"fontGroup\">\n                <ag-select ref=\"familySelect\"></ag-select>\n                <ag-select ref=\"weightStyleSelect\"></ag-select>\n                <div class=\"ag-charts-font-size-color\">\n                    <ag-select ref=\"sizeSelect\"></ag-select>\n                    <ag-color-picker ref=\"colorPicker\"></ag-color-picker>\n                </div>\n            </ag-group-component>\n        </div>";
  __decorate$S([agGridCommunity.RefSelector('fontGroup')], FontPanel.prototype, "fontGroup", void 0);
  __decorate$S([agGridCommunity.RefSelector('familySelect')], FontPanel.prototype, "familySelect", void 0);
  __decorate$S([agGridCommunity.RefSelector('weightStyleSelect')], FontPanel.prototype, "weightStyleSelect", void 0);
  __decorate$S([agGridCommunity.RefSelector('sizeSelect')], FontPanel.prototype, "sizeSelect", void 0);
  __decorate$S([agGridCommunity.RefSelector('colorPicker')], FontPanel.prototype, "colorPicker", void 0);
  __decorate$S([agGridCommunity.Autowired('chartTranslator')], FontPanel.prototype, "chartTranslator", void 0);
  __decorate$S([agGridCommunity.PostConstruct], FontPanel.prototype, "init", null);
  return FontPanel;
}(agGridCommunity.Component);
var __extends$1G =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$T =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var LegendPanel = /** @class */function (_super) {
  __extends$1G(LegendPanel, _super);
  function LegendPanel(chartController) {
    var _this = _super.call(this) || this;
    _this.activePanels = [];
    _this.chartController = chartController;
    return _this;
  }
  LegendPanel.prototype.init = function () {
    var groupParams = {
      cssIdentifier: 'charts-format-top-level',
      direction: 'vertical'
    };
    this.setTemplate(LegendPanel.TEMPLATE, {
      legendGroup: groupParams
    });
    this.initLegendGroup();
    this.initLegendPosition();
    this.initLegendPadding();
    this.initLegendItems();
    this.initLabelPanel();
  };
  LegendPanel.prototype.initLegendGroup = function () {
    var _this = this;
    this.legendGroup.setTitle(this.chartTranslator.translate("legend")).hideEnabledCheckbox(false).setEnabled(this.chartController.getChartProxy().getChartOption("legend.enabled") || false).toggleGroupExpand(false).onEnableChange(function (enabled) {
      _this.chartController.getChartProxy().setChartOption("legend.enabled", enabled);
      _this.legendGroup.toggleGroupExpand(true);
    });
  };
  LegendPanel.prototype.initLegendPosition = function () {
    var _this = this;
    var positions = [agGridCommunity.LegendPosition.Top, agGridCommunity.LegendPosition.Right, agGridCommunity.LegendPosition.Bottom, agGridCommunity.LegendPosition.Left];
    this.legendPositionSelect.setLabel(this.chartTranslator.translate("position")).setLabelWidth("flex").setInputWidth(80).addOptions(positions.map(function (position) {
      return {
        value: position,
        text: _this.chartTranslator.translate(position)
      };
    })).setValue(this.chartController.getChartProxy().getChartOption("legend.position")).onValueChange(function (newValue) {
      return _this.chartController.getChartProxy().setChartOption("legend.position", newValue);
    });
  };
  LegendPanel.prototype.initLegendPadding = function () {
    var _this = this;
    this.legendPaddingSlider.setLabel(this.chartTranslator.translate("spacing")).setValue(this.chartController.getChartProxy().getChartOption("legend.spacing")).setTextFieldWidth(45).setMaxValue(200).onValueChange(function (newValue) {
      return _this.chartController.getChartProxy().setChartOption("legend.spacing", newValue);
    });
  };
  LegendPanel.prototype.initLegendItems = function () {
    var _this = this;
    var initSlider = function (expression, labelKey, input, maxValue) {
      input.setLabel(_this.chartTranslator.translate(labelKey)).setValue(_this.chartController.getChartProxy().getChartOption("legend." + expression)).setMaxValue(maxValue).setTextFieldWidth(45).onValueChange(function (newValue) {
        return _this.chartController.getChartProxy().setChartOption("legend." + expression, newValue);
      });
    };
    initSlider("item.marker.size", "markerSize", this.markerSizeSlider, 40);
    initSlider("item.marker.strokeWidth", "markerStroke", this.markerStrokeSlider, 10);
    initSlider("item.marker.padding", "itemSpacing", this.markerPaddingSlider, 20);
    initSlider("item.paddingX", "layoutHorizontalSpacing", this.itemPaddingXSlider, 50);
    initSlider("item.paddingY", "layoutVerticalSpacing", this.itemPaddingYSlider, 50);
  };
  LegendPanel.prototype.initLabelPanel = function () {
    var _this = this;
    var chartProxy = this.chartController.getChartProxy();
    var initialFont = {
      family: chartProxy.getChartOption("legend.item.label.fontFamily"),
      style: chartProxy.getChartOption("legend.item.label.fontStyle"),
      weight: chartProxy.getChartOption("legend.item.label.fontWeight"),
      size: chartProxy.getChartOption("legend.item.label.fontSize"),
      color: chartProxy.getChartOption("legend.item.label.color")
    };
    var setFont = function (font) {
      var proxy = _this.chartController.getChartProxy();
      if (font.family) {
        proxy.setChartOption("legend.item.label.fontFamily", font.family);
      }
      if (font.weight) {
        proxy.setChartOption("legend.item.label.fontWeight", font.weight);
      }
      if (font.style) {
        proxy.setChartOption("legend.item.label.fontStyle", font.style);
      }
      if (font.size) {
        proxy.setChartOption("legend.item.label.fontSize", font.size);
      }
      if (font.color) {
        proxy.setChartOption("legend.item.label.color", font.color);
      }
    };
    var params = {
      enabled: true,
      suppressEnabledCheckbox: true,
      initialFont: initialFont,
      setFont: setFont
    };
    var fontPanelComp = this.createBean(new FontPanel(params));
    this.legendGroup.addItem(fontPanelComp);
    this.activePanels.push(fontPanelComp);
  };
  LegendPanel.prototype.destroyActivePanels = function () {
    var _this = this;
    this.activePanels.forEach(function (panel) {
      agGridCommunity._.removeFromParent(panel.getGui());
      _this.destroyBean(panel);
    });
  };
  LegendPanel.prototype.destroy = function () {
    this.destroyActivePanels();
    _super.prototype.destroy.call(this);
  };
  LegendPanel.TEMPLATE = "<div>\n            <ag-group-component ref=\"legendGroup\">\n                <ag-select ref=\"legendPositionSelect\"></ag-select>\n                <ag-slider ref=\"legendPaddingSlider\"></ag-slider>\n                <ag-slider ref=\"markerSizeSlider\"></ag-slider>\n                <ag-slider ref=\"markerStrokeSlider\"></ag-slider>\n                <ag-slider ref=\"markerPaddingSlider\"></ag-slider>\n                <ag-slider ref=\"itemPaddingXSlider\"></ag-slider>\n                <ag-slider ref=\"itemPaddingYSlider\"></ag-slider>\n            </ag-group-component>\n        </div>";
  __decorate$T([agGridCommunity.RefSelector('legendGroup')], LegendPanel.prototype, "legendGroup", void 0);
  __decorate$T([agGridCommunity.RefSelector('legendPositionSelect')], LegendPanel.prototype, "legendPositionSelect", void 0);
  __decorate$T([agGridCommunity.RefSelector('legendPaddingSlider')], LegendPanel.prototype, "legendPaddingSlider", void 0);
  __decorate$T([agGridCommunity.RefSelector('markerSizeSlider')], LegendPanel.prototype, "markerSizeSlider", void 0);
  __decorate$T([agGridCommunity.RefSelector('markerStrokeSlider')], LegendPanel.prototype, "markerStrokeSlider", void 0);
  __decorate$T([agGridCommunity.RefSelector('markerPaddingSlider')], LegendPanel.prototype, "markerPaddingSlider", void 0);
  __decorate$T([agGridCommunity.RefSelector('itemPaddingXSlider')], LegendPanel.prototype, "itemPaddingXSlider", void 0);
  __decorate$T([agGridCommunity.RefSelector('itemPaddingYSlider')], LegendPanel.prototype, "itemPaddingYSlider", void 0);
  __decorate$T([agGridCommunity.Autowired('chartTranslator')], LegendPanel.prototype, "chartTranslator", void 0);
  __decorate$T([agGridCommunity.PostConstruct], LegendPanel.prototype, "init", null);
  return LegendPanel;
}(agGridCommunity.Component);
var __extends$1H =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$U =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ShadowPanel = /** @class */function (_super) {
  __extends$1H(ShadowPanel, _super);
  function ShadowPanel(chartController) {
    var _this = _super.call(this) || this;
    _this.chartController = chartController;
    return _this;
  }
  ShadowPanel.prototype.init = function () {
    var groupParams = {
      cssIdentifier: 'charts-format-sub-level',
      direction: 'vertical',
      suppressOpenCloseIcons: true
    };
    this.setTemplate(ShadowPanel.TEMPLATE, {
      shadowGroup: groupParams
    });
    this.shadowBlurSlider.setTextFieldWidth(45);
    this.shadowXOffsetSlider.setTextFieldWidth(45);
    this.shadowYOffsetSlider.setTextFieldWidth(45);
    this.initSeriesShadow();
  };
  ShadowPanel.prototype.initSeriesShadow = function () {
    var _this = this;
    this.shadowGroup.setTitle(this.chartTranslator.translate("shadow")).setEnabled(this.chartController.getChartProxy().getShadowEnabled()).hideOpenCloseIcons(true).hideEnabledCheckbox(false).onEnableChange(function (newValue) {
      return _this.chartController.getChartProxy().setShadowProperty("enabled", newValue);
    });
    this.shadowColorPicker.setLabel(this.chartTranslator.translate("color")).setLabelWidth("flex").setInputWidth(45).setValue("rgba(0,0,0,0.5)").onValueChange(function (newValue) {
      return _this.chartController.getChartProxy().setShadowProperty("color", newValue);
    });
    var initInput = function (input, property, minValue, maxValue) {
      input.setLabel(_this.chartTranslator.translate(property)).setValue(_this.chartController.getChartProxy().getShadowProperty(property)).setMinValue(minValue).setMaxValue(maxValue).onValueChange(function (newValue) {
        return _this.chartController.getChartProxy().setShadowProperty(property, newValue);
      });
    };
    initInput(this.shadowBlurSlider, "blur", 0, 20);
    initInput(this.shadowXOffsetSlider, "xOffset", -10, 10);
    initInput(this.shadowYOffsetSlider, "yOffset", -10, 10);
  };
  ShadowPanel.TEMPLATE = "<div>\n            <ag-group-component ref=\"shadowGroup\">\n                <ag-color-picker ref=\"shadowColorPicker\"></ag-color-picker>\n                <ag-slider ref=\"shadowBlurSlider\"></ag-slider>\n                <ag-slider ref=\"shadowXOffsetSlider\"></ag-slider>\n                <ag-slider ref=\"shadowYOffsetSlider\"></ag-slider>\n            </ag-group-component>\n        </div>";
  __decorate$U([agGridCommunity.RefSelector('shadowGroup')], ShadowPanel.prototype, "shadowGroup", void 0);
  __decorate$U([agGridCommunity.RefSelector('shadowColorPicker')], ShadowPanel.prototype, "shadowColorPicker", void 0);
  __decorate$U([agGridCommunity.RefSelector('shadowBlurSlider')], ShadowPanel.prototype, "shadowBlurSlider", void 0);
  __decorate$U([agGridCommunity.RefSelector('shadowXOffsetSlider')], ShadowPanel.prototype, "shadowXOffsetSlider", void 0);
  __decorate$U([agGridCommunity.RefSelector('shadowYOffsetSlider')], ShadowPanel.prototype, "shadowYOffsetSlider", void 0);
  __decorate$U([agGridCommunity.Autowired('chartTranslator')], ShadowPanel.prototype, "chartTranslator", void 0);
  __decorate$U([agGridCommunity.PostConstruct], ShadowPanel.prototype, "init", null);
  return ShadowPanel;
}(agGridCommunity.Component);
function initLineOpacitySlider(seriesLineOpacitySlider, chartTranslator, chartProxy) {
  seriesLineOpacitySlider.setLabel(chartTranslator.translate("strokeOpacity")).setStep(0.05).setMaxValue(1).setTextFieldWidth(45).setValue(chartProxy.getSeriesOption("stroke.opacity") || "1").onValueChange(function (newValue) {
    return chartProxy.setSeriesOption("stroke.opacity", newValue);
  });
}
function initFillOpacitySlider(seriesFillOpacitySlider, chartTranslator, chartProxy) {
  seriesFillOpacitySlider.setLabel(chartTranslator.translate("fillOpacity")).setStep(0.05).setMaxValue(1).setTextFieldWidth(45).setValue(chartProxy.getSeriesOption("fill.opacity") || "1").onValueChange(function (newValue) {
    return chartProxy.setSeriesOption("fill.opacity", newValue);
  });
}
function initFontPanelParams(chartTranslator, chartProxy) {
  var initialFont = {
    family: chartProxy.getSeriesOption("label.fontFamily"),
    style: chartProxy.getSeriesOption("label.fontStyle"),
    weight: chartProxy.getSeriesOption("label.fontWeight"),
    size: chartProxy.getSeriesOption("label.fontSize"),
    color: chartProxy.getSeriesOption("label.color")
  };
  var setFont = function (font) {
    if (font.family) {
      chartProxy.setSeriesOption("label.fontFamily", font.family);
    }
    if (font.weight) {
      chartProxy.setSeriesOption("label.fontWeight", font.weight);
    }
    if (font.style) {
      chartProxy.setSeriesOption("label.fontStyle", font.style);
    }
    if (font.size) {
      chartProxy.setSeriesOption("label.fontSize", font.size);
    }
    if (font.color) {
      chartProxy.setSeriesOption("label.color", font.color);
    }
  };
  var params = {
    name: chartTranslator.translate('labels'),
    enabled: chartProxy.getSeriesOption("label.enabled") || false,
    setEnabled: function (enabled) {
      return chartProxy.setSeriesOption("label.enabled", enabled);
    },
    suppressEnabledCheckbox: false,
    initialFont: initialFont,
    setFont: setFont
  };
  return params;
}
var __extends$1I =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$V =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var BarSeriesPanel = /** @class */function (_super) {
  __extends$1I(BarSeriesPanel, _super);
  function BarSeriesPanel(chartController) {
    var _this = _super.call(this) || this;
    _this.activePanels = [];
    _this.chartController = chartController;
    return _this;
  }
  BarSeriesPanel.prototype.init = function () {
    var groupParams = {
      cssIdentifier: 'charts-format-top-level',
      direction: 'vertical'
    };
    this.setTemplate(BarSeriesPanel.TEMPLATE, {
      seriesGroup: groupParams
    });
    this.seriesGroup.setTitle(this.chartTranslator.translate("series")).toggleGroupExpand(false).hideEnabledCheckbox(true);
    this.initSeriesTooltips();
    this.initSeriesStrokeWidth();
    this.initSeriesLineDash();
    this.initOpacity();
    this.initLabelPanel();
    this.initShadowPanel();
  };
  BarSeriesPanel.prototype.initSeriesTooltips = function () {
    var _this = this;
    this.seriesTooltipsToggle.setLabel(this.chartTranslator.translate("tooltips")).setLabelAlignment("left").setLabelWidth("flex").setInputWidth(45).setValue(this.getChartProxy().getSeriesOption("tooltip.enabled") || false).onValueChange(function (newValue) {
      return _this.getChartProxy().setSeriesOption("tooltip.enabled", newValue);
    });
  };
  BarSeriesPanel.prototype.initSeriesStrokeWidth = function () {
    var _this = this;
    this.seriesStrokeWidthSlider.setLabel(this.chartTranslator.translate("strokeWidth")).setMaxValue(10).setTextFieldWidth(45).setValue(this.getChartProxy().getSeriesOption("stroke.width")).onValueChange(function (newValue) {
      return _this.getChartProxy().setSeriesOption("stroke.width", newValue);
    });
  };
  BarSeriesPanel.prototype.initSeriesLineDash = function () {
    var _this = this;
    this.seriesLineDashSlider.setLabel(this.chartTranslator.translate('lineDash')).setMaxValue(30).setTextFieldWidth(45).setValue(this.getChartProxy().getSeriesOption("lineDash")).onValueChange(function (newValue) {
      return _this.getChartProxy().setSeriesOption("lineDash", [newValue]);
    });
  };
  BarSeriesPanel.prototype.initOpacity = function () {
    initLineOpacitySlider(this.seriesLineOpacitySlider, this.chartTranslator, this.getChartProxy());
    initFillOpacitySlider(this.seriesFillOpacitySlider, this.chartTranslator, this.getChartProxy());
  };
  BarSeriesPanel.prototype.initLabelPanel = function () {
    var params = initFontPanelParams(this.chartTranslator, this.getChartProxy());
    var labelPanelComp = this.createBean(new FontPanel(params));
    this.activePanels.push(labelPanelComp);
    this.seriesGroup.addItem(labelPanelComp);
  };
  BarSeriesPanel.prototype.initShadowPanel = function () {
    var shadowPanelComp = this.createBean(new ShadowPanel(this.chartController));
    this.seriesGroup.addItem(shadowPanelComp);
    this.activePanels.push(shadowPanelComp);
  };
  BarSeriesPanel.prototype.destroyActivePanels = function () {
    var _this = this;
    this.activePanels.forEach(function (panel) {
      agGridCommunity._.removeFromParent(panel.getGui());
      _this.destroyBean(panel);
    });
  };
  BarSeriesPanel.prototype.getChartProxy = function () {
    return this.chartController.getChartProxy();
  };
  BarSeriesPanel.prototype.destroy = function () {
    this.destroyActivePanels();
    _super.prototype.destroy.call(this);
  };
  BarSeriesPanel.TEMPLATE = "<div>\n            <ag-group-component ref=\"seriesGroup\">\n                <ag-toggle-button ref=\"seriesTooltipsToggle\"></ag-toggle-button>\n                <ag-slider ref=\"seriesStrokeWidthSlider\"></ag-slider>\n                <ag-slider ref=\"seriesLineDashSlider\"></ag-slider>\n                <ag-slider ref=\"seriesLineOpacitySlider\"></ag-slider>\n                <ag-slider ref=\"seriesFillOpacitySlider\"></ag-slider>\n            </ag-group-component>\n        </div>";
  __decorate$V([agGridCommunity.RefSelector('seriesGroup')], BarSeriesPanel.prototype, "seriesGroup", void 0);
  __decorate$V([agGridCommunity.RefSelector('seriesTooltipsToggle')], BarSeriesPanel.prototype, "seriesTooltipsToggle", void 0);
  __decorate$V([agGridCommunity.RefSelector('seriesStrokeWidthSlider')], BarSeriesPanel.prototype, "seriesStrokeWidthSlider", void 0);
  __decorate$V([agGridCommunity.RefSelector('seriesLineDashSlider')], BarSeriesPanel.prototype, "seriesLineDashSlider", void 0);
  __decorate$V([agGridCommunity.RefSelector('seriesLineOpacitySlider')], BarSeriesPanel.prototype, "seriesLineOpacitySlider", void 0);
  __decorate$V([agGridCommunity.RefSelector('seriesFillOpacitySlider')], BarSeriesPanel.prototype, "seriesFillOpacitySlider", void 0);
  __decorate$V([agGridCommunity.Autowired('chartTranslator')], BarSeriesPanel.prototype, "chartTranslator", void 0);
  __decorate$V([agGridCommunity.PostConstruct], BarSeriesPanel.prototype, "init", null);
  return BarSeriesPanel;
}(agGridCommunity.Component);
var __extends$1J =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$W =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AxisTicksPanel = /** @class */function (_super) {
  __extends$1J(AxisTicksPanel, _super);
  function AxisTicksPanel(chartController) {
    var _this = _super.call(this) || this;
    _this.chartController = chartController;
    return _this;
  }
  AxisTicksPanel.prototype.init = function () {
    var groupParams = {
      cssIdentifier: 'charts-format-sub-level',
      direction: 'vertical',
      suppressOpenCloseIcons: true
    };
    this.setTemplate(AxisTicksPanel.TEMPLATE, {
      axisTicksGroup: groupParams
    });
    this.initAxisTicks();
  };
  AxisTicksPanel.prototype.initAxisTicks = function () {
    var _this = this;
    this.axisTicksGroup.setTitle(this.chartTranslator.translate("ticks")).hideOpenCloseIcons(true).hideEnabledCheckbox(true);
    this.axisTicksColorPicker.setLabel(this.chartTranslator.translate("color")).setLabelWidth("flex").setInputWidth(45).setValue(this.getChartProxy().getAxisProperty("tick.color")).onValueChange(function (newColor) {
      return _this.getChartProxy().setAxisProperty("tick.color", newColor);
    });
    var initInput = function (expression, input, label, maxValue) {
      input.setLabel(label).setValue(_this.getChartProxy().getAxisProperty(expression)).setMaxValue(maxValue).setTextFieldWidth(45).onValueChange(function (newValue) {
        return _this.getChartProxy().setAxisProperty(expression, newValue);
      });
    };
    initInput("tick.width", this.axisTicksWidthSlider, this.chartTranslator.translate("width"), 10);
    initInput("tick.size", this.axisTicksSizeSlider, this.chartTranslator.translate("length"), 30);
  };
  AxisTicksPanel.prototype.getChartProxy = function () {
    return this.chartController.getChartProxy();
  };
  AxisTicksPanel.TEMPLATE = "<div>\n            <ag-group-component ref=\"axisTicksGroup\">\n                <ag-color-picker ref=\"axisTicksColorPicker\"></ag-color-picker>\n                <ag-slider ref=\"axisTicksWidthSlider\"></ag-slider>\n                <ag-slider ref=\"axisTicksSizeSlider\"></ag-slider>\n            </ag-group-component>\n        </div>";
  __decorate$W([agGridCommunity.RefSelector('axisTicksGroup')], AxisTicksPanel.prototype, "axisTicksGroup", void 0);
  __decorate$W([agGridCommunity.RefSelector('axisTicksColorPicker')], AxisTicksPanel.prototype, "axisTicksColorPicker", void 0);
  __decorate$W([agGridCommunity.RefSelector('axisTicksWidthSlider')], AxisTicksPanel.prototype, "axisTicksWidthSlider", void 0);
  __decorate$W([agGridCommunity.RefSelector('axisTicksSizeSlider')], AxisTicksPanel.prototype, "axisTicksSizeSlider", void 0);
  __decorate$W([agGridCommunity.Autowired('chartTranslator')], AxisTicksPanel.prototype, "chartTranslator", void 0);
  __decorate$W([agGridCommunity.PostConstruct], AxisTicksPanel.prototype, "init", null);
  return AxisTicksPanel;
}(agGridCommunity.Component);
var __extends$1K =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$X =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AxisPanel = /** @class */function (_super) {
  __extends$1K(AxisPanel, _super);
  function AxisPanel(chartController) {
    var _this = _super.call(this) || this;
    _this.activePanels = [];
    _this.axisLabelUpdateFuncs = [];
    _this.chartController = chartController;
    return _this;
  }
  AxisPanel.prototype.init = function () {
    var _this = this;
    var groupParams = {
      cssIdentifier: 'charts-format-top-level',
      direction: 'vertical'
    };
    this.setTemplate(AxisPanel.TEMPLATE, {
      axisGroup: groupParams
    });
    this.initAxis();
    this.initAxisTicks();
    this.initAxisLabels();
    var updateAxisLabelRotations = function () {
      return _this.axisLabelUpdateFuncs.forEach(function (func) {
        return func();
      });
    };
    this.addManagedListener(this.chartController, ChartController.EVENT_CHART_UPDATED, updateAxisLabelRotations);
  };
  AxisPanel.prototype.initAxis = function () {
    var _this = this;
    var chartTranslator = this.chartTranslator;
    this.axisGroup.setTitle(chartTranslator.translate("axis")).toggleGroupExpand(false).hideEnabledCheckbox(true);
    this.axisColorInput.setLabel(chartTranslator.translate("color")).setLabelWidth("flex").setInputWidth(45).setValue(this.getChartProxy().getAxisProperty("line.color")).onValueChange(function (newColor) {
      return _this.getChartProxy().setAxisProperty("line.color", newColor);
    });
    this.axisLineWidthSlider.setLabel(chartTranslator.translate("thickness")).setMaxValue(10).setTextFieldWidth(45).setValue(this.getChartProxy().getAxisProperty("line.width")).onValueChange(function (newValue) {
      return _this.getChartProxy().setAxisProperty("line.width", newValue);
    });
    if (agGridCommunity._.includes(['line', 'scatter', 'bubble'], this.chartController.getChartType()) && !this.chartController.isGrouping()) {
      var options_1 = [{
        value: '',
        text: chartTranslator.translate('automatic')
      }];
      ['category', 'time', 'number'].forEach(function (type) {
        options_1.push({
          value: type,
          text: chartTranslator.translate(type)
        });
      });
      this.xAxisTypeSelect.setLabel(chartTranslator.translate('xType')).setLabelWidth('flex').addOptions(options_1).setValue(this.getChartProxy().getChartOption('xAxis.type') || '').onValueChange(function (newValue) {
        var chartProxy = _this.getChartProxy();
        chartProxy.setChartOption('xAxis.type', typeof newValue === 'string' && newValue.length && newValue);
        _this.chartController.updateForDataChange();
      });
    } else {
      this.xAxisTypeSelect.setDisplayed(false);
    }
  };
  AxisPanel.prototype.initAxisTicks = function () {
    var axisTicksComp = this.createBean(new AxisTicksPanel(this.chartController));
    this.axisGroup.addItem(axisTicksComp);
    this.activePanels.push(axisTicksComp);
  };
  AxisPanel.prototype.initAxisLabels = function () {
    var _this = this;
    var chartProxy = this.getChartProxy();
    var initialFont = {
      family: chartProxy.getAxisProperty("label.fontFamily"),
      style: chartProxy.getAxisProperty("label.fontStyle"),
      weight: chartProxy.getAxisProperty("label.fontWeight"),
      size: chartProxy.getAxisProperty("label.fontSize"),
      color: chartProxy.getAxisProperty("label.color")
    };
    var setFont = function (font) {
      var proxy = _this.getChartProxy();
      if (font.family) {
        proxy.setAxisProperty("label.fontFamily", font.family);
      }
      if (font.weight) {
        proxy.setAxisProperty("label.fontWeight", font.weight);
      }
      if (font.style) {
        proxy.setAxisProperty("label.fontStyle", font.style);
      }
      if (font.size) {
        proxy.setAxisProperty("label.fontSize", font.size);
      }
      if (font.color) {
        proxy.setAxisProperty("label.color", font.color);
      }
      proxy.getChart().performLayout();
    };
    var params = {
      enabled: true,
      suppressEnabledCheckbox: true,
      initialFont: initialFont,
      setFont: setFont
    };
    var labelPanelComp = this.createBean(new FontPanel(params));
    this.axisGroup.addItem(labelPanelComp);
    this.activePanels.push(labelPanelComp);
    this.addAdditionalLabelComps(labelPanelComp);
  };
  AxisPanel.prototype.addAdditionalLabelComps = function (labelPanelComp) {
    var _this = this;
    var createAngleComp = function (label, expression, updateFunc) {
      var value = _this.getChartProxy().getChartOption(expression);
      var angleSelect = new agGridCommunity.AgAngleSelect().setLabel(label).setLabelWidth("flex").setValue(value || 0).onValueChange(updateFunc);
      // the axis label rotation needs to be updated when the default category changes in the data panel
      _this.axisLabelUpdateFuncs.push(function () {
        var value = _this.getChartProxy().getChartOption(expression);
        angleSelect.setValue(value);
      });
      var rotationInput = _this.createBean(angleSelect);
      labelPanelComp.addCompToPanel(rotationInput);
    };
    var degreesSymbol = String.fromCharCode(176);
    var createLabelUpdateFunc = function (axisPosition) {
      return function (newValue) {
        var chartProxy = _this.getChartProxy();
        var chart = chartProxy.getChart();
        var axis = find(chart.axes, function (currentAxis) {
          return currentAxis.position === axisPosition;
        });
        if (axis) {
          axis.label.rotation = newValue;
          if (axis.position === ChartAxisPosition.Bottom) {
            agGridCommunity._.set(chartProxy.getChartOptions().xAxis, "label.rotation", newValue);
          } else if (axis.position === ChartAxisPosition.Left) {
            agGridCommunity._.set(chartProxy.getChartOptions().yAxis, "label.rotation", newValue);
          }
          chart.performLayout();
        }
      };
    };
    var xRotationLabel = this.chartTranslator.translate("xRotation") + " " + degreesSymbol;
    var yRotationLabel = this.chartTranslator.translate("yRotation") + " " + degreesSymbol;
    createAngleComp(xRotationLabel, "xAxis.label.rotation", createLabelUpdateFunc(ChartAxisPosition.Bottom));
    createAngleComp(yRotationLabel, "yAxis.label.rotation", createLabelUpdateFunc(ChartAxisPosition.Left));
    var labelPaddingSlider = this.createBean(new agGridCommunity.AgSlider());
    labelPaddingSlider.setLabel(this.chartTranslator.translate("padding")).setValue(this.getChartProxy().getAxisProperty("label.padding")).setMaxValue(30).setTextFieldWidth(45).onValueChange(function (newValue) {
      return _this.getChartProxy().setAxisProperty("label.padding", newValue);
    });
    labelPanelComp.addCompToPanel(labelPaddingSlider);
  };
  AxisPanel.prototype.destroyActivePanels = function () {
    var _this = this;
    this.activePanels.forEach(function (panel) {
      agGridCommunity._.removeFromParent(panel.getGui());
      _this.destroyBean(panel);
    });
  };
  AxisPanel.prototype.getChartProxy = function () {
    return this.chartController.getChartProxy();
  };
  AxisPanel.prototype.destroy = function () {
    this.destroyActivePanels();
    _super.prototype.destroy.call(this);
  };
  AxisPanel.TEMPLATE = "<div>\n            <ag-group-component ref=\"axisGroup\">\n                <ag-color-picker ref=\"axisColorInput\"></ag-color-picker>\n                <ag-slider ref=\"axisLineWidthSlider\"></ag-slider>\n                <ag-select ref=\"xAxisTypeSelect\"></ag-select>\n            </ag-group-component>\n        </div>";
  __decorate$X([agGridCommunity.RefSelector('axisGroup')], AxisPanel.prototype, "axisGroup", void 0);
  __decorate$X([agGridCommunity.RefSelector('axisColorInput')], AxisPanel.prototype, "axisColorInput", void 0);
  __decorate$X([agGridCommunity.RefSelector('axisLineWidthSlider')], AxisPanel.prototype, "axisLineWidthSlider", void 0);
  __decorate$X([agGridCommunity.RefSelector('xAxisTypeSelect')], AxisPanel.prototype, "xAxisTypeSelect", void 0);
  __decorate$X([agGridCommunity.Autowired('chartTranslator')], AxisPanel.prototype, "chartTranslator", void 0);
  __decorate$X([agGridCommunity.PostConstruct], AxisPanel.prototype, "init", null);
  return AxisPanel;
}(agGridCommunity.Component);
var __extends$1L =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$Y =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var NavigatorPanel = /** @class */function (_super) {
  __extends$1L(NavigatorPanel, _super);
  function NavigatorPanel(chartController) {
    var _this = _super.call(this) || this;
    _this.activePanels = [];
    _this.chartController = chartController;
    return _this;
  }
  NavigatorPanel.prototype.init = function () {
    var groupParams = {
      cssIdentifier: 'charts-format-top-level',
      direction: 'vertical'
    };
    this.setTemplate(NavigatorPanel.TEMPLATE, {
      navigatorGroup: groupParams
    });
    this.initNavigator();
  };
  NavigatorPanel.prototype.initNavigator = function () {
    var _this = this;
    var chartTranslator = this.chartTranslator;
    this.navigatorGroup.setTitle(chartTranslator.translate("navigator")).toggleGroupExpand(false).hideEnabledCheckbox(false).setEnabled(this.getChartProxy().getChartOption("navigator.enabled") || false).onEnableChange(function (enabled) {
      _this.getChartProxy().setChartOption("navigator.enabled", enabled);
      _this.navigatorGroup.toggleGroupExpand(true);
    });
    this.navigatorHeightSlider.setLabel(chartTranslator.translate("height")).setMinValue(10).setMaxValue(60).setTextFieldWidth(45).setValue(String(this.getChartProxy().getChartOption("navigator.height") || "30")).onValueChange(function (height) {
      return _this.getChartProxy().setChartOption("navigator.height", height);
    });
  };
  NavigatorPanel.prototype.destroyActivePanels = function () {
    var _this = this;
    this.activePanels.forEach(function (panel) {
      agGridCommunity._.removeFromParent(panel.getGui());
      _this.destroyBean(panel);
    });
  };
  NavigatorPanel.prototype.getChartProxy = function () {
    return this.chartController.getChartProxy();
  };
  NavigatorPanel.prototype.destroy = function () {
    this.destroyActivePanels();
    _super.prototype.destroy.call(this);
  };
  NavigatorPanel.TEMPLATE = "<div>\n            <ag-group-component ref=\"navigatorGroup\">\n                <ag-slider ref=\"navigatorHeightSlider\"></ag-slider>\n            </ag-group-component>\n        </div>";
  __decorate$Y([agGridCommunity.RefSelector('navigatorGroup')], NavigatorPanel.prototype, "navigatorGroup", void 0);
  __decorate$Y([agGridCommunity.RefSelector('navigatorHeightSlider')], NavigatorPanel.prototype, "navigatorHeightSlider", void 0);
  __decorate$Y([agGridCommunity.Autowired('chartTranslator')], NavigatorPanel.prototype, "chartTranslator", void 0);
  __decorate$Y([agGridCommunity.PostConstruct], NavigatorPanel.prototype, "init", null);
  return NavigatorPanel;
}(agGridCommunity.Component);

// deepMerge
function emptyTarget$1(value) {
  return Array.isArray(value) ? [] : {};
}
function cloneUnlessOtherwiseSpecified$1(value, options) {
  return options.clone !== false && options.isMergeableObject(value) ? deepMerge$1(emptyTarget$1(value), value, options) : value;
}
function defaultArrayMerge$1(target, source, options) {
  return target.concat(source).map(function (element) {
    return cloneUnlessOtherwiseSpecified$1(element, options);
  });
}
function getMergeFunction$1(key, options) {
  if (!options.customMerge) {
    return deepMerge$1;
  }
  var customMerge = options.customMerge(key);
  return typeof customMerge === 'function' ? customMerge : deepMerge$1;
}
function getEnumerableOwnPropertySymbols$1(target) {
  // @ts-ignore
  return Object.getOwnPropertySymbols
  // @ts-ignore
  ? Object.getOwnPropertySymbols(target).filter(function (symbol) {
    return target.propertyIsEnumerable(symbol);
  }) : [];
}
function getKeys$1(target) {
  return Object.keys(target).concat(getEnumerableOwnPropertySymbols$1(target));
}
function propertyIsOnObject$1(object, property) {
  try {
    return property in object;
  } catch (_) {
    return false;
  }
}
// Protects from prototype poisoning and unexpected merging up the prototype chain.
function propertyIsUnsafe$1(target, key) {
  return propertyIsOnObject$1(target, key) // Properties are safe to merge if they don't exist in the target yet,
  && !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
  && Object.propertyIsEnumerable.call(target, key)); // and also unsafe if they're nonenumerable.
}

function mergeObject$1(target, source, options) {
  var destination = {};
  if (options.isMergeableObject(target)) {
    getKeys$1(target).forEach(function (key) {
      destination[key] = cloneUnlessOtherwiseSpecified$1(target[key], options);
    });
  }
  getKeys$1(source).forEach(function (key) {
    if (propertyIsUnsafe$1(target, key)) {
      return;
    }
    if (propertyIsOnObject$1(target, key) && options.isMergeableObject(source[key])) {
      destination[key] = getMergeFunction$1(key, options)(target[key], source[key], options);
    } else {
      destination[key] = cloneUnlessOtherwiseSpecified$1(source[key], options);
    }
  });
  return destination;
}
function defaultIsMergeableObject$1(value) {
  return isNonNullObject$1(value) && !isSpecial$1(value);
}
function isNonNullObject$1(value) {
  return !!value && typeof value === 'object';
}
function isSpecial$1(value) {
  var stringValue = Object.prototype.toString.call(value);
  return stringValue === '[object RegExp]' || stringValue === '[object Date]';
}
function deepMerge$1(target, source, options) {
  options = options || {};
  options.arrayMerge = options.arrayMerge || defaultArrayMerge$1;
  options.isMergeableObject = options.isMergeableObject || defaultIsMergeableObject$1;
  // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
  // implementations can use it. The caller may not replace it.
  options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified$1;
  var sourceIsArray = Array.isArray(source);
  var targetIsArray = Array.isArray(target);
  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
  if (!sourceAndTargetTypesMatch) {
    return cloneUnlessOtherwiseSpecified$1(source, options);
  } else if (sourceIsArray) {
    return options.arrayMerge(target, source, options);
  } else {
    return mergeObject$1(target, source, options);
  }
}
var __assign$9 =  false || function () {
  __assign$9 = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$9.apply(this, arguments);
};
var ChartProxy = /** @class */function () {
  function ChartProxy(chartProxyParams) {
    var _this = this;
    this.chartProxyParams = chartProxyParams;
    this.isDarkTheme = function () {
      return _this.chartProxyParams.isDarkTheme();
    };
    this.getFontColor = function () {
      return _this.isDarkTheme() ? 'rgb(221, 221, 221)' : 'rgb(87, 87, 87)';
    };
    this.getAxisGridColor = function () {
      return _this.isDarkTheme() ? 'rgb(100, 100, 100)' : 'rgb(219, 219, 219)';
    };
    this.getBackgroundColor = function () {
      return _this.isDarkTheme() ? '#2d3436' : 'white';
    };
    this.getChartPaddingOption = function (property) {
      return _this.iChartOptions.padding ? "" + _this.iChartOptions.padding[property] : '';
    };
    this.getShadowEnabled = function () {
      return !!_this.getShadowProperty('enabled');
    };
    this.chartId = chartProxyParams.chartId;
    this.chartType = chartProxyParams.chartType;
    this.eventService = chartProxyParams.eventService;
    this.gridApi = chartProxyParams.gridApi;
    this.columnApi = chartProxyParams.columnApi;
    this.crossFiltering = chartProxyParams.crossFiltering;
    this.crossFilterCallback = chartProxyParams.crossFilterCallback;
  }
  ChartProxy.prototype.recreateChart = function () {
    var _this = this;
    if (this.chart) {
      this.destroyChart();
    }
    this.chart = this.createChart();
    if (this.crossFiltering) {
      // add event listener to chart canvas to detect when user wishes to reset filters
      var resetFilters_1 = true;
      this.chart.addEventListener('click', function (e) {
        return _this.crossFilterCallback(e, resetFilters_1);
      });
    }
  };
  ChartProxy.prototype.getChart = function () {
    return this.chart;
  };
  ChartProxy.prototype.downloadChart = function () {
    var chart = this.chart;
    var fileName = chart.title ? chart.title.text : 'chart';
    chart.scene.download(fileName);
  };
  ChartProxy.prototype.getChartImageDataURL = function (type) {
    return this.chart.scene.getDataURL(type);
  };
  ChartProxy.prototype.initChartOptions = function () {
    // the theme object is used later to determine cartesian label rotation
    this.mergedThemeOverrides = this.getMergedThemeOverrides();
    // create the theme instance from the theme object
    this.chartTheme = getChartTheme(this.mergedThemeOverrides);
    // extract the iChartOptions from the theme instance - this is the backing model for integrated charts
    this.iChartOptions = this.extractIChartOptionsFromTheme(this.chartTheme);
    // allow users to override options before they are applied
    var processChartOptions = this.chartProxyParams.processChartOptions;
    if (processChartOptions) {
      var originalOptions = deepMerge$1({}, this.iChartOptions);
      var params = {
        type: this.chartType,
        options: this.iChartOptions
      };
      var overriddenOptions = processChartOptions(params);
      // ensure we have everything we need, in case the processing removed necessary options
      var safeOptions = this.getDefaultOptions();
      agGridCommunity._.mergeDeep(safeOptions, overriddenOptions, false);
      this.overridePalette(originalOptions, safeOptions);
      this.iChartOptions = safeOptions;
    }
  };
  ChartProxy.prototype.paletteOverridden = function (originalOptions, overriddenOptions) {
    return !agGridCommunity._.areEqual(originalOptions.seriesDefaults.fill.colors, overriddenOptions.seriesDefaults.fill.colors) || !agGridCommunity._.areEqual(originalOptions.seriesDefaults.stroke.colors, overriddenOptions.seriesDefaults.stroke.colors);
  };
  ChartProxy.prototype.getMergedThemeOverrides = function () {
    var _this = this;
    var themeName = this.getSelectedTheme();
    var gridOptionsThemeOverrides = this.chartProxyParams.getGridOptionsChartThemeOverrides();
    var apiThemeOverrides = this.chartProxyParams.apiChartThemeOverrides;
    var mergedThemeOverrides;
    if (gridOptionsThemeOverrides || apiThemeOverrides) {
      var themeOverrides_1 = {
        overrides: this.mergeThemeOverrides(gridOptionsThemeOverrides, apiThemeOverrides)
      };
      var getCustomTheme = function () {
        return deepMerge$1(_this.lookupCustomChartTheme(themeName), themeOverrides_1);
      };
      mergedThemeOverrides = this.isStockTheme(themeName) ? __assign$9({
        baseTheme: themeName
      }, themeOverrides_1) : getCustomTheme();
    } else {
      mergedThemeOverrides = this.isStockTheme(themeName) ? themeName : this.lookupCustomChartTheme(themeName);
    }
    return mergedThemeOverrides;
  };
  ChartProxy.prototype.lookupCustomChartTheme = function (name) {
    var customChartThemes = this.chartProxyParams.customChartThemes;
    var customChartTheme = customChartThemes && customChartThemes[name];
    if (!customChartTheme) {
      console.warn("AG Grid: no stock theme exists with the name '" + name + "' and no " + "custom chart theme with that name was supplied to 'customChartThemes'");
    }
    return customChartTheme;
  };
  ChartProxy.prototype.isStockTheme = function (themeName) {
    return agGridCommunity._.includes(Object.keys(themes), themeName);
  };
  ChartProxy.prototype.mergeThemeOverrides = function (gridOptionsThemeOverrides, apiThemeOverrides) {
    if (!gridOptionsThemeOverrides) {
      return apiThemeOverrides;
    }
    if (!apiThemeOverrides) {
      return gridOptionsThemeOverrides;
    }
    return deepMerge$1(gridOptionsThemeOverrides, apiThemeOverrides);
  };
  ChartProxy.prototype.overridePalette = function (originalOptions, chartOptions) {
    if (!this.chartProxyParams.allowPaletteOverride) {
      return;
    }
    if (!this.paletteOverridden(originalOptions, chartOptions)) {
      return;
    }
    var seriesDefaults = chartOptions.seriesDefaults;
    var fillsOverridden = seriesDefaults.fill.colors;
    var strokesOverridden = seriesDefaults.stroke.colors;
    if (fillsOverridden || strokesOverridden) {
      // due to series default refactoring it's possible for fills and strokes to have undefined values
      var invalidFills = agGridCommunity._.includes(fillsOverridden, undefined);
      var invalidStrokes = agGridCommunity._.includes(strokesOverridden, undefined);
      if (invalidFills || invalidStrokes) {
        return;
      }
      // both fills and strokes will need to be overridden
      this.customPalette = {
        fills: fillsOverridden,
        strokes: strokesOverridden
      };
    }
  };
  ChartProxy.prototype.getStandaloneChartType = function () {
    switch (this.chartType) {
      case agGridCommunity.ChartType.GroupedBar:
      case agGridCommunity.ChartType.StackedBar:
      case agGridCommunity.ChartType.NormalizedBar:
        return 'bar';
      case agGridCommunity.ChartType.GroupedColumn:
      case agGridCommunity.ChartType.StackedColumn:
      case agGridCommunity.ChartType.NormalizedColumn:
        return 'column';
      case agGridCommunity.ChartType.Line:
        return 'line';
      case agGridCommunity.ChartType.Area:
      case agGridCommunity.ChartType.StackedArea:
      case agGridCommunity.ChartType.NormalizedArea:
        return 'area';
      case agGridCommunity.ChartType.Scatter:
      case agGridCommunity.ChartType.Bubble:
        return 'scatter';
      case agGridCommunity.ChartType.Histogram:
        return 'histogram';
      case agGridCommunity.ChartType.Pie:
      case agGridCommunity.ChartType.Doughnut:
        return 'pie';
      default:
        return 'cartesian';
    }
  };
  // Merges theme defaults into default options. To be overridden in subclasses.
  ChartProxy.prototype.extractIChartOptionsFromTheme = function (theme) {
    var options = {};
    var standaloneChartType = this.getStandaloneChartType();
    options.title = theme.getConfig(standaloneChartType + '.title');
    options.subtitle = theme.getConfig(standaloneChartType + '.subtitle');
    options.background = theme.getConfig(standaloneChartType + '.background');
    options.legend = theme.getConfig(standaloneChartType + '.legend');
    options.navigator = theme.getConfig(standaloneChartType + '.navigator');
    options.tooltip = {
      enabled: theme.getConfig(standaloneChartType + '.tooltip.enabled'),
      tracking: theme.getConfig(standaloneChartType + '.tooltip.tracking'),
      class: theme.getConfig(standaloneChartType + '.tooltip.class'),
      delay: theme.getConfig(standaloneChartType + '.tooltip.delay')
    };
    options.listeners = theme.getConfig(standaloneChartType + '.listeners');
    options.padding = theme.getConfig(standaloneChartType + '.padding');
    return options;
  };
  ChartProxy.prototype.getSelectedTheme = function () {
    var chartThemeName = this.chartProxyParams.getChartThemeName();
    var availableThemes = this.chartProxyParams.getChartThemes();
    if (!agGridCommunity._.includes(availableThemes, chartThemeName)) {
      chartThemeName = availableThemes[0];
    }
    return chartThemeName;
  };
  ChartProxy.prototype.getChartOptions = function () {
    return this.iChartOptions;
  };
  ChartProxy.prototype.getCustomPalette = function () {
    return this.customPalette;
  };
  ChartProxy.prototype.getChartOption = function (expression) {
    return agGridCommunity._.get(this.iChartOptions, expression, undefined);
  };
  ChartProxy.prototype.setChartOption = function (expression, value) {
    if (agGridCommunity._.get(this.iChartOptions, expression, undefined) === value) {
      // option is already set to the specified value
      return;
    }
    agGridCommunity._.set(this.iChartOptions, expression, value);
    var mappings = {
      'legend.item.marker.strokeWidth': 'legend.strokeWidth',
      'legend.item.marker.size': 'legend.markerSize',
      'legend.item.marker.padding': 'legend.itemSpacing',
      'legend.item.label.fontFamily': 'legend.fontFamily',
      'legend.item.label.fontStyle': 'legend.fontStyle',
      'legend.item.label.fontWeight': 'legend.fontWeight',
      'legend.item.label.fontSize': 'legend.fontSize',
      'legend.item.label.color': 'legend.color',
      'legend.item.paddingX': 'legend.layoutHorizontalSpacing',
      'legend.item.paddingY': 'legend.layoutVerticalSpacing'
    };
    agGridCommunity._.set(this.chart, mappings[expression] || expression, value);
    this.raiseChartOptionsChangedEvent();
  };
  ChartProxy.prototype.getSeriesOption = function (expression) {
    return agGridCommunity._.get(this.iChartOptions.seriesDefaults, expression, undefined);
  };
  ChartProxy.prototype.setSeriesOption = function (expression, value) {
    if (agGridCommunity._.get(this.iChartOptions.seriesDefaults, expression, undefined) === value) {
      // option is already set to the specified value
      return;
    }
    agGridCommunity._.set(this.iChartOptions.seriesDefaults, expression, value);
    var mappings = {
      'stroke.width': 'strokeWidth',
      'stroke.opacity': 'strokeOpacity',
      'fill.opacity': 'fillOpacity',
      'callout.colors': 'calloutColors'
    };
    var series = this.chart.series;
    series.forEach(function (s) {
      return agGridCommunity._.set(s, mappings[expression] || expression, value);
    });
    this.raiseChartOptionsChangedEvent();
  };
  ChartProxy.prototype.setTitleOption = function (property, value) {
    if (agGridCommunity._.get(this.iChartOptions.title, property, undefined) === value) {
      // option is already set to the specified value
      return;
    }
    this.iChartOptions.title[property] = value;
    if (!this.chart.title) {
      this.chart.title = {};
    }
    this.chart.title[property] = value;
    if (property === 'text') {
      this.setTitleOption('enabled', agGridCommunity._.exists(value));
    }
    this.raiseChartOptionsChangedEvent();
  };
  ChartProxy.prototype.getTitleOption = function (property) {
    return this.iChartOptions.title[property];
  };
  ChartProxy.prototype.setChartPaddingOption = function (property, value) {
    var padding = this.iChartOptions.padding;
    if (agGridCommunity._.get(padding, property, undefined) === value) {
      // option is already set to the specified value
      return;
    }
    if (!padding) {
      padding = this.iChartOptions.padding = {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
      this.chart.padding = new Padding(0);
    }
    padding[property] = value;
    this.chart.padding[property] = value;
    this.chart.performLayout();
    this.raiseChartOptionsChangedEvent();
  };
  ChartProxy.prototype.getShadowProperty = function (property) {
    var seriesDefaults = this.iChartOptions.seriesDefaults;
    return seriesDefaults.shadow ? seriesDefaults.shadow[property] : '';
  };
  ChartProxy.prototype.setShadowProperty = function (property, value) {
    var seriesDefaults = this.iChartOptions.seriesDefaults;
    if (agGridCommunity._.get(seriesDefaults.shadow, property, undefined) === value) {
      // option is already set to the specified value
      return;
    }
    if (!seriesDefaults.shadow) {
      seriesDefaults.shadow = {
        enabled: false,
        blur: 0,
        xOffset: 0,
        yOffset: 0,
        color: 'rgba(0,0,0,0.5)'
      };
    }
    seriesDefaults.shadow[property] = value;
    var series = this.getChart().series;
    series.forEach(function (s) {
      if (!s.shadow) {
        var shadow = new DropShadow();
        shadow.enabled = false;
        shadow.blur = 0;
        shadow.xOffset = 0;
        shadow.yOffset = 0;
        shadow.color = 'rgba(0,0,0,0.5)';
        s.shadow = shadow;
      }
      s.shadow[property] = value;
    });
    this.raiseChartOptionsChangedEvent();
  };
  ChartProxy.prototype.raiseChartOptionsChangedEvent = function () {
    var event = Object.freeze({
      type: agGridCommunity.Events.EVENT_CHART_OPTIONS_CHANGED,
      chartId: this.chartId,
      chartType: this.chartType,
      chartThemeName: this.chartProxyParams.getChartThemeName(),
      chartOptions: this.iChartOptions,
      api: this.gridApi,
      columnApi: this.columnApi
    });
    this.eventService.dispatchEvent(event);
  };
  ChartProxy.prototype.getDefaultFontOptions = function () {
    return {
      fontStyle: 'normal',
      fontWeight: 'normal',
      fontSize: 12,
      fontFamily: 'Verdana, sans-serif',
      color: this.getFontColor()
    };
  };
  ChartProxy.prototype.getDefaultDropShadowOptions = function () {
    return {
      enabled: false,
      blur: 5,
      xOffset: 3,
      yOffset: 3,
      color: 'rgba(0, 0, 0, 0.5)'
    };
  };
  ChartProxy.prototype.getPredefinedPalette = function () {
    return this.chartTheme.palette;
  };
  ChartProxy.prototype.getPalette = function () {
    return this.customPalette || this.chartTheme.palette;
  };
  //TODO remove all 'integrated' default chart options
  ChartProxy.prototype.getDefaultChartOptions = function () {
    return {
      background: {},
      padding: {},
      title: {},
      subtitle: {},
      legend: {},
      navigator: {},
      seriesDefaults: {},
      listeners: {}
    };
  };
  ChartProxy.prototype.transformData = function (data, categoryKey) {
    if (this.chart.axes.filter(function (a) {
      return a instanceof CategoryAxis;
    }).length < 1) {
      return data;
    }
    // replace the values for the selected category with a complex object to allow for duplicated categories
    return data.map(function (d, index) {
      var value = d[categoryKey];
      var valueString = value && value.toString ? value.toString() : '';
      var datum = __assign$9({}, d);
      datum[categoryKey] = {
        id: index,
        value: value,
        toString: function () {
          return valueString;
        }
      };
      return datum;
    });
  };
  // TODO move to standalone
  ChartProxy.prototype.hexToRGBA = function (hex, alpha) {
    var r = parseInt(hex.slice(1, 3), 16);
    var g = parseInt(hex.slice(3, 5), 16);
    var b = parseInt(hex.slice(5, 7), 16);
    return alpha ? "rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")" : "rgba(" + r + ", " + g + ", " + b + ")";
  };
  // TODO move to standalone
  ChartProxy.prototype.changeOpacity = function (fills, alpha) {
    return fills.map(function (fill) {
      var c = agGridCommunity.Color.fromString(fill);
      return new agGridCommunity.Color(c.r, c.g, c.b, alpha).toHexString();
    });
  };
  ChartProxy.prototype.destroy = function () {
    this.destroyChart();
  };
  ChartProxy.prototype.destroyChart = function () {
    if (this.chart) {
      this.chart.destroy();
      this.chart = undefined;
    }
  };
  return ChartProxy;
}();
function isDate(value) {
  return value instanceof Date;
}
var __extends$1M =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$a =  false || function () {
  __assign$a = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$a.apply(this, arguments);
};
var AXIS_TYPE;
(function (AXIS_TYPE) {
  AXIS_TYPE[AXIS_TYPE["REGULAR"] = 0] = "REGULAR";
  AXIS_TYPE[AXIS_TYPE["SPECIAL"] = 1] = "SPECIAL";
})(AXIS_TYPE || (AXIS_TYPE = {}));
var CartesianChartProxy = /** @class */function (_super) {
  __extends$1M(CartesianChartProxy, _super);
  function CartesianChartProxy(params) {
    var _this = _super.call(this, params) || this;
    _this.prevAxisLabelRotation = 0;
    _this.axisTypeToClassMap = {
      number: NumberAxis,
      category: CategoryAxis,
      groupedCategory: GroupedCategoryAxis,
      time: TimeAxis
    };
    return _this;
  }
  CartesianChartProxy.prototype.extractIChartOptionsFromTheme = function (theme) {
    var _a;
    var options = _super.prototype.extractIChartOptionsFromTheme.call(this, theme);
    var standaloneChartType = this.getStandaloneChartType();
    var flipXY = standaloneChartType === 'bar';
    var xAxisType = standaloneChartType === 'scatter' || standaloneChartType === 'histogram' ? 'number' : 'category';
    var yAxisType = 'number';
    if (flipXY) {
      _a = [yAxisType, xAxisType], xAxisType = _a[0], yAxisType = _a[1];
    }
    var xAxisTheme = {};
    var yAxisTheme = {};
    xAxisTheme = deepMerge$1(xAxisTheme, theme.getConfig(standaloneChartType + '.axes.' + xAxisType));
    xAxisTheme = deepMerge$1(xAxisTheme, theme.getConfig(standaloneChartType + '.axes.' + xAxisType + '.bottom'));
    yAxisTheme = deepMerge$1(yAxisTheme, theme.getConfig(standaloneChartType + '.axes.' + yAxisType));
    yAxisTheme = deepMerge$1(yAxisTheme, theme.getConfig(standaloneChartType + '.axes.' + yAxisType + '.left'));
    options.xAxis = xAxisTheme;
    options.yAxis = yAxisTheme;
    return options;
  };
  CartesianChartProxy.prototype.getAxisProperty = function (expression) {
    return agGridCommunity._.get(this.iChartOptions.xAxis, expression, undefined);
  };
  CartesianChartProxy.prototype.setAxisProperty = function (expression, value) {
    agGridCommunity._.set(this.iChartOptions.xAxis, expression, value);
    agGridCommunity._.set(this.iChartOptions.yAxis, expression, value);
    var chart = this.chart;
    this.chart.axes.forEach(function (axis) {
      return agGridCommunity._.set(axis, expression, value);
    });
    chart.performLayout();
    this.raiseChartOptionsChangedEvent();
  };
  CartesianChartProxy.prototype.updateLabelRotation = function (categoryId, isHorizontalChart, axisType) {
    if (isHorizontalChart === void 0) {
      isHorizontalChart = false;
    }
    if (axisType === void 0) {
      axisType = 'category';
    }
    var axisPosition = isHorizontalChart ? ChartAxisPosition.Left : ChartAxisPosition.Bottom;
    var axis = find(this.chart.axes, function (currentAxis) {
      return currentAxis.position === axisPosition;
    });
    var isSpecialCategory = categoryId === ChartDataModel.DEFAULT_CATEGORY || this.chartProxyParams.grouping;
    if (isSpecialCategory && this.prevCategory === AXIS_TYPE.REGULAR && axis) {
      this.prevAxisLabelRotation = axis.label.rotation;
    }
    var labelRotation = 0;
    if (!isSpecialCategory) {
      if (this.prevCategory === AXIS_TYPE.REGULAR) {
        return;
      }
      if (agGridCommunity._.exists(this.prevCategory)) {
        labelRotation = this.prevAxisLabelRotation;
      } else {
        var rotationFromTheme = this.getUserThemeOverrideRotation(isHorizontalChart, axisType);
        labelRotation = rotationFromTheme !== undefined ? rotationFromTheme : 335;
      }
    }
    if (axis) {
      axis.label.rotation = labelRotation;
      agGridCommunity._.set(this.iChartOptions.xAxis, "label.rotation", labelRotation);
    }
    var event = Object.freeze({
      type: ChartController.EVENT_CHART_UPDATED
    });
    this.chartProxyParams.eventService.dispatchEvent(event);
    this.prevCategory = isSpecialCategory ? AXIS_TYPE.SPECIAL : AXIS_TYPE.REGULAR;
  };
  CartesianChartProxy.prototype.getUserThemeOverrideRotation = function (isHorizontalChart, axisType) {
    if (isHorizontalChart === void 0) {
      isHorizontalChart = false;
    }
    if (axisType === void 0) {
      axisType = 'category';
    }
    if (!this.mergedThemeOverrides || !this.mergedThemeOverrides.overrides) {
      return;
    }
    var chartType = this.getStandaloneChartType();
    var overrides = this.mergedThemeOverrides.overrides;
    var axisPosition = isHorizontalChart ? ChartAxisPosition.Left : ChartAxisPosition.Bottom;
    var chartTypePositionRotation = agGridCommunity._.get(overrides, chartType + ".axes." + axisType + "." + axisPosition + ".label.rotation", undefined);
    if (typeof chartTypePositionRotation === 'number' && isFinite(chartTypePositionRotation)) {
      return chartTypePositionRotation;
    }
    var chartTypeRotation = agGridCommunity._.get(overrides, chartType + ".axes." + axisType + ".label.rotation", undefined);
    if (typeof chartTypeRotation === 'number' && isFinite(chartTypeRotation)) {
      return chartTypeRotation;
    }
    var cartesianPositionRotation = agGridCommunity._.get(overrides, "cartesian.axes." + axisType + "." + axisPosition + ".label.rotation", undefined);
    if (typeof cartesianPositionRotation === 'number' && isFinite(cartesianPositionRotation)) {
      return cartesianPositionRotation;
    }
    var cartesianRotation = agGridCommunity._.get(overrides, "cartesian.axes." + axisType + ".label.rotation", undefined);
    if (typeof cartesianRotation === 'number' && isFinite(cartesianRotation)) {
      return cartesianRotation;
    }
  };
  CartesianChartProxy.prototype.getDefaultAxisOptions = function () {
    var fontOptions = this.getDefaultFontOptions();
    var stroke = this.getAxisGridColor();
    var axisColor = "rgba(195, 195, 195, 1)";
    return {
      title: __assign$a(__assign$a({}, fontOptions), {
        enabled: false,
        fontSize: 14
      }),
      line: {
        color: axisColor,
        width: 1
      },
      tick: {
        color: axisColor,
        size: 6,
        width: 1
      },
      label: __assign$a(__assign$a({}, fontOptions), {
        padding: 5,
        rotation: 0
      }),
      gridStyle: [{
        stroke: stroke,
        lineDash: [4, 2]
      }]
    };
  };
  CartesianChartProxy.prototype.getDefaultCartesianChartOptions = function () {
    var options = this.getDefaultChartOptions();
    options.xAxis = this.getDefaultAxisOptions();
    options.yAxis = this.getDefaultAxisOptions();
    return options;
  };
  CartesianChartProxy.prototype.getAxisClass = function (axisType) {
    return this.axisTypeToClassMap[axisType];
  };
  CartesianChartProxy.prototype.updateAxes = function (baseAxisType, isHorizontalChart) {
    if (baseAxisType === void 0) {
      baseAxisType = 'category';
    }
    if (isHorizontalChart === void 0) {
      isHorizontalChart = false;
    }
    var baseAxis = isHorizontalChart ? this.getYAxis() : this.getXAxis();
    if (!baseAxis) {
      return;
    }
    if (this.chartProxyParams.grouping) {
      if (!(baseAxis instanceof GroupedCategoryAxis)) {
        this.recreateChart();
      }
      return;
    }
    var axisClass = this.axisTypeToClassMap[baseAxisType];
    if (baseAxis instanceof axisClass) {
      return;
    }
    var options = this.iChartOptions;
    if (isHorizontalChart && !options.yAxis.type) {
      options = __assign$a(__assign$a({}, options), {
        yAxis: __assign$a({
          type: baseAxisType
        }, options.yAxis)
      });
    } else if (!isHorizontalChart && !options.xAxis.type) {
      options = __assign$a(__assign$a({}, options), {
        xAxis: __assign$a({
          type: baseAxisType
        }, options.xAxis)
      });
    }
    this.iChartOptions = options;
    this.recreateChart();
  };
  CartesianChartProxy.prototype.isTimeAxis = function (params) {
    if (params.category && params.category.chartDataType) {
      return params.category.chartDataType === 'time';
    }
    var testDatum = params.data[0];
    var testValue = testDatum && testDatum[params.category.id];
    return isDate(testValue);
  };
  CartesianChartProxy.prototype.getXAxisDefaults = function (xAxisType, options) {
    if (xAxisType === 'time') {
      var xAxisTheme = {};
      var standaloneChartType = this.getStandaloneChartType();
      xAxisTheme = deepMerge$1(xAxisTheme, this.chartTheme.getConfig(standaloneChartType + '.axes.time'));
      xAxisTheme = deepMerge$1(xAxisTheme, this.chartTheme.getConfig(standaloneChartType + '.axes.time.bottom'));
      return xAxisTheme;
    }
    return options.xAxis;
  };
  CartesianChartProxy.prototype.getXAxis = function () {
    return find(this.chart.axes, function (a) {
      return a.position === ChartAxisPosition.Bottom;
    });
  };
  CartesianChartProxy.prototype.getYAxis = function () {
    return find(this.chart.axes, function (a) {
      return a.position === ChartAxisPosition.Left;
    });
  };
  CartesianChartProxy.prototype.processDataForCrossFiltering = function (data, colId, params) {
    var yKey = colId;
    var atLeastOneSelectedPoint = false;
    if (this.crossFiltering) {
      data.forEach(function (d) {
        d[colId + '-total'] = d[colId] + d[colId + '-filtered-out'];
        if (d[colId + '-filtered-out'] > 0) {
          atLeastOneSelectedPoint = true;
        }
      });
      var lastSelectedChartId = params.getCrossFilteringContext().lastSelectedChartId;
      if (lastSelectedChartId === params.chartId) {
        yKey = colId + '-total';
      }
    }
    return {
      yKey: yKey,
      atLeastOneSelectedPoint: atLeastOneSelectedPoint
    };
  };
  CartesianChartProxy.prototype.updateSeriesForCrossFiltering = function (series, colId, chart, params, atLeastOneSelectedPoint) {
    if (this.crossFiltering) {
      // special custom marker handling to show and hide points
      series.marker.enabled = true;
      series.marker.formatter = function (p) {
        return {
          fill: p.highlighted ? 'yellow' : p.fill,
          size: p.highlighted ? 12 : p.datum[colId] > 0 ? 8 : 0
        };
      };
      chart.tooltip.delay = 500;
      // make line opaque when some points are deselected
      var ctx = params.getCrossFilteringContext();
      var lastSelectionOnThisChart = ctx.lastSelectedChartId === params.chartId;
      var deselectedPoints = lastSelectionOnThisChart && atLeastOneSelectedPoint;
      if (series instanceof AreaSeries) {
        series.fillOpacity = deselectedPoints ? 0.3 : 1;
      }
      if (series instanceof LineSeries) {
        series.strokeOpacity = deselectedPoints ? 0.3 : 1;
      }
      // add node click cross filtering callback to series
      series.addEventListener('nodeClick', this.crossFilterCallback);
    }
  };
  return CartesianChartProxy;
}(ChartProxy);
var __extends$1N =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$b =  false || function () {
  __assign$b = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$b.apply(this, arguments);
};
var ScatterChartProxy = /** @class */function (_super) {
  __extends$1N(ScatterChartProxy, _super);
  function ScatterChartProxy(params) {
    var _this = _super.call(this, params) || this;
    _this.getMarkersEnabled = function () {
      return true;
    }; // markers are always enabled on scatter charts
    _this.initChartOptions();
    _this.recreateChart();
    return _this;
  }
  ScatterChartProxy.prototype.createChart = function () {
    var options = this.iChartOptions;
    var agChartOptions = options;
    agChartOptions.autoSize = true;
    agChartOptions.axes = [__assign$b({
      type: 'number',
      position: 'bottom'
    }, options.xAxis), __assign$b({
      type: 'number',
      position: 'left'
    }, options.yAxis)];
    return AgChart.create(agChartOptions, this.chartProxyParams.parentElement);
  };
  ScatterChartProxy.prototype.update = function (params) {
    var _this = this;
    if (params.fields.length < 2) {
      this.chart.removeAllSeries();
      return;
    }
    var fields = params.fields;
    if (this.crossFiltering) {
      // add additional filtered out field
      fields.forEach(function (field) {
        var crossFilteringField = __assign$b({}, field);
        crossFilteringField.colId = field.colId + '-filtered-out';
        fields.push(crossFilteringField);
      });
    }
    var seriesDefaults = this.iChartOptions.seriesDefaults;
    var seriesDefinitions = this.getSeriesDefinitions(fields, seriesDefaults.paired);
    var dataDomain;
    if (this.crossFiltering) {
      dataDomain = this.getCrossFilteringDataDomain(seriesDefinitions, params);
    }
    var chart = this.chart;
    var existingSeriesById = chart.series.reduceRight(function (map, series, i) {
      var matchingIndex = agGridCommunity._.findIndex(seriesDefinitions, function (s) {
        return s.xField.colId === series.xKey && s.yField.colId === series.yKey && (!s.sizeField && !series.sizeKey || s.sizeField && s.sizeField.colId === series.sizeKey);
      });
      if (matchingIndex === i) {
        map.set(series.yKey, series);
      } else {
        chart.removeSeries(series);
      }
      return map;
    }, new Map());
    var _a = this.getPalette(),
      fills = _a.fills,
      strokes = _a.strokes;
    if (this.crossFiltering) {
      // introduce cross filtering transparent fills
      var fillsMod_1 = [];
      fills.forEach(function (fill) {
        fillsMod_1.push(fill);
        fillsMod_1.push(_this.hexToRGBA(fill, '0.3'));
      });
      fills = fillsMod_1;
      // introduce cross filtering transparent strokes
      var strokesMod_1 = [];
      strokes.forEach(function (stroke) {
        strokesMod_1.push(stroke);
        strokesMod_1.push(_this.hexToRGBA(stroke, '0.3'));
      });
      strokes = strokesMod_1;
    }
    var labelFieldDefinition = params.category.id === ChartDataModel.DEFAULT_CATEGORY ? undefined : params.category;
    var previousSeries;
    seriesDefinitions.forEach(function (seriesDefinition, index) {
      var existingSeries = existingSeriesById.get(seriesDefinition.yField.colId);
      var marker = __assign$b({}, seriesDefaults.marker);
      if (marker.type) {
        // deprecated
        marker.shape = marker.type;
        delete marker.type;
      }
      var series = existingSeries || AgChart.createComponent(__assign$b(__assign$b({}, seriesDefaults), {
        type: 'scatter',
        fillOpacity: seriesDefaults.fill.opacity,
        strokeOpacity: seriesDefaults.stroke.opacity,
        strokeWidth: seriesDefaults.stroke.width,
        marker: marker,
        tooltip: {
          enabled: seriesDefaults.tooltip && seriesDefaults.tooltip.enabled,
          renderer: seriesDefaults.tooltip && seriesDefaults.tooltip.enabled && seriesDefaults.tooltip.renderer
        }
      }), 'scatter.series');
      if (!series) {
        return;
      }
      var _a = seriesDefinition,
        xFieldDefinition = _a.xField,
        yFieldDefinition = _a.yField,
        sizeFieldDefinition = _a.sizeField;
      series.title = yFieldDefinition.displayName + " vs " + xFieldDefinition.displayName;
      series.xKey = xFieldDefinition.colId;
      series.xName = xFieldDefinition.displayName;
      series.yKey = yFieldDefinition.colId;
      series.yName = yFieldDefinition.displayName;
      series.data = params.data;
      series.fill = fills[index % fills.length];
      series.stroke = strokes[index % strokes.length];
      if (sizeFieldDefinition) {
        series.sizeKey = sizeFieldDefinition.colId;
        series.sizeName = sizeFieldDefinition.displayName;
      } else {
        series.sizeKey = series.sizeName = undefined;
      }
      if (labelFieldDefinition) {
        series.labelKey = labelFieldDefinition.id;
        series.labelName = labelFieldDefinition.name;
      } else {
        series.labelKey = series.labelName = undefined;
      }
      var isFilteredOutYKey = yFieldDefinition.colId.indexOf('-filtered-out') > -1;
      if (_this.crossFiltering) {
        if (!isFilteredOutYKey) {
          // sync toggling of legend item with hidden 'filtered out' item
          chart.legend.addEventListener('click', function (event) {
            series.toggleSeriesItem(event.itemId + '-filtered-out', event.enabled);
          });
        }
        if (dataDomain) {
          series.marker.domain = dataDomain;
        }
        chart.tooltip.delay = 500;
        // hide 'filtered out' legend items
        if (isFilteredOutYKey) {
          series.showInLegend = false;
        }
        // add node click cross filtering callback to series
        series.addEventListener('nodeClick', _this.crossFilterCallback);
      }
      if (!existingSeries) {
        chart.addSeriesAfter(series, previousSeries);
      }
      previousSeries = series;
    });
  };
  ScatterChartProxy.prototype.extractIChartOptionsFromTheme = function (theme) {
    var options = _super.prototype.extractIChartOptionsFromTheme.call(this, theme);
    var seriesDefaults = theme.getConfig('scatter.series.scatter');
    options.seriesDefaults = {
      tooltip: {
        enabled: seriesDefaults.tooltip && seriesDefaults.tooltip.enabled,
        renderer: seriesDefaults.tooltip && seriesDefaults.tooltip.renderer
      },
      fill: {
        colors: seriesDefaults.fill && [seriesDefaults.fill] || theme.palette.fills,
        opacity: seriesDefaults.fillOpacity
      },
      stroke: {
        colors: seriesDefaults.stroke && [seriesDefaults.stroke] || theme.palette.strokes,
        opacity: seriesDefaults.strokeOpacity,
        width: seriesDefaults.strokeWidth
      },
      marker: {
        enabled: seriesDefaults.marker.enabled,
        shape: seriesDefaults.marker.shape,
        size: seriesDefaults.marker.size,
        strokeWidth: seriesDefaults.marker.strokeWidth
      },
      highlightStyle: seriesDefaults.highlightStyle,
      listeners: seriesDefaults.listeners,
      paired: true
    };
    return options;
  };
  ScatterChartProxy.prototype.getTooltipsEnabled = function () {
    return this.iChartOptions.seriesDefaults.tooltip != null && !!this.iChartOptions.seriesDefaults.tooltip.enabled;
  };
  ScatterChartProxy.prototype.getDefaultOptions = function () {
    var isBubble = this.chartType === agGridCommunity.ChartType.Bubble;
    var options = this.getDefaultCartesianChartOptions();
    options.seriesDefaults = __assign$b(__assign$b({}, options.seriesDefaults), {
      fill: __assign$b(__assign$b({}, options.seriesDefaults.fill), {
        opacity: isBubble ? 0.7 : 1
      }),
      stroke: __assign$b(__assign$b({}, options.seriesDefaults.stroke), {
        width: 3
      }),
      marker: {
        shape: 'circle',
        enabled: true,
        size: 6,
        maxSize: 30,
        strokeWidth: 1
      },
      tooltip: {
        enabled: true
      },
      paired: true
    });
    return options;
  };
  ScatterChartProxy.prototype.getSeriesDefinitions = function (fields, paired) {
    if (fields.length < 2) {
      return [];
    }
    var isBubbleChart = this.chartType === agGridCommunity.ChartType.Bubble;
    if (paired) {
      if (isBubbleChart) {
        return fields.map(function (currentxField, i) {
          return i % 3 === 0 ? {
            xField: currentxField,
            yField: fields[i + 1],
            sizeField: fields[i + 2]
          } : null;
        }).filter(function (x) {
          return x && x.yField && x.sizeField;
        });
      }
      return fields.map(function (currentxField, i) {
        return i % 2 === 0 ? {
          xField: currentxField,
          yField: fields[i + 1]
        } : null;
      }).filter(function (x) {
        return x && x.yField;
      });
    }
    var xField = fields[0];
    if (isBubbleChart) {
      return fields.map(function (yField, i) {
        return i % 2 === 1 ? {
          xField: xField,
          yField: yField,
          sizeField: fields[i + 1]
        } : null;
      }).filter(function (x) {
        return x && x.sizeField;
      });
    }
    return fields.filter(function (value, i) {
      return i > 0;
    }).map(function (yField) {
      return {
        xField: xField,
        yField: yField
      };
    });
  };
  ScatterChartProxy.prototype.getCrossFilteringDataDomain = function (seriesDefinitions, params) {
    var domain;
    if (seriesDefinitions[0] && seriesDefinitions[0].sizeField) {
      var sizeColId_1 = seriesDefinitions[0].sizeField.colId;
      var allSizePoints_1 = [];
      params.data.forEach(function (d) {
        if (typeof d[sizeColId_1] !== 'undefined') {
          allSizePoints_1.push(d[sizeColId_1]);
        }
        if (typeof d[sizeColId_1 + '-filtered-out'] !== 'undefined') {
          allSizePoints_1.push(d[sizeColId_1 + '-filtered-out']);
        }
      });
      if (allSizePoints_1.length > 0) {
        domain = [Math.min.apply(Math, allSizePoints_1), Math.max.apply(Math, allSizePoints_1)];
      }
    }
    return domain;
  };
  return ScatterChartProxy;
}(CartesianChartProxy);
var __extends$1O =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$Z =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var MarkersPanel = /** @class */function (_super) {
  __extends$1O(MarkersPanel, _super);
  function MarkersPanel(chartController) {
    var _this = _super.call(this) || this;
    _this.chartController = chartController;
    return _this;
  }
  MarkersPanel.prototype.init = function () {
    var groupParams = {
      cssIdentifier: 'charts-format-sub-level',
      direction: 'vertical'
    };
    this.setTemplate(MarkersPanel.TEMPLATE, {
      seriesMarkersGroup: groupParams
    });
    this.initMarkers();
  };
  MarkersPanel.prototype.initMarkers = function () {
    var _this = this;
    // scatter charts should always show markers
    var shouldHideEnabledCheckbox = this.chartController.getChartProxy() instanceof ScatterChartProxy;
    var seriesMarkerShapeOptions = [{
      value: 'square',
      text: 'Square'
    }, {
      value: 'circle',
      text: 'Circle'
    }, {
      value: 'cross',
      text: 'Cross'
    }, {
      value: 'diamond',
      text: 'Diamond'
    }, {
      value: 'plus',
      text: 'Plus'
    }, {
      value: 'triangle',
      text: 'Triangle'
    }, {
      value: 'heart',
      text: 'Heart'
    }];
    this.seriesMarkerShapeSelect.addOptions(seriesMarkerShapeOptions).setLabel(this.chartTranslator.translate('shape')).setValue(this.chartController.getChartProxy().getSeriesOption("marker.shape")).onValueChange(function (value) {
      return _this.chartController.getChartProxy().setSeriesOption("marker.shape", value);
    });
    this.seriesMarkersGroup.setTitle(this.chartTranslator.translate("markers")).hideEnabledCheckbox(shouldHideEnabledCheckbox).setEnabled(this.chartController.getChartProxy().getSeriesOption("marker.enabled") || false).hideOpenCloseIcons(true).onEnableChange(function (newValue) {
      return _this.chartController.getChartProxy().setSeriesOption("marker.enabled", newValue);
    });
    var initInput = function (expression, input, labelKey, maxValue) {
      input.setLabel(_this.chartTranslator.translate(labelKey)).setValue(_this.chartController.getChartProxy().getSeriesOption(expression)).setMaxValue(maxValue).setTextFieldWidth(45).onValueChange(function (newValue) {
        return _this.chartController.getChartProxy().setSeriesOption(expression, newValue);
      });
    };
    if (this.chartController.getChartType() === agGridCommunity.ChartType.Bubble) {
      initInput("marker.maxSize", this.seriesMarkerMinSizeSlider, "maxSize", 60);
      initInput("marker.size", this.seriesMarkerSizeSlider, "minSize", 60);
    } else {
      this.seriesMarkerMinSizeSlider.setDisplayed(false);
      initInput("marker.size", this.seriesMarkerSizeSlider, "size", 60);
    }
    initInput("marker.strokeWidth", this.seriesMarkerStrokeWidthSlider, "strokeWidth", 10);
  };
  MarkersPanel.TEMPLATE = "<div>\n            <ag-group-component ref=\"seriesMarkersGroup\">\n                <ag-select ref=\"seriesMarkerShapeSelect\"></ag-select>\n                <ag-slider ref=\"seriesMarkerMinSizeSlider\"></ag-slider>\n                <ag-slider ref=\"seriesMarkerSizeSlider\"></ag-slider>\n                <ag-slider ref=\"seriesMarkerStrokeWidthSlider\"></ag-slider>\n            </ag-group-component>\n        </div>";
  __decorate$Z([agGridCommunity.RefSelector('seriesMarkersGroup')], MarkersPanel.prototype, "seriesMarkersGroup", void 0);
  __decorate$Z([agGridCommunity.RefSelector('seriesMarkerShapeSelect')], MarkersPanel.prototype, "seriesMarkerShapeSelect", void 0);
  __decorate$Z([agGridCommunity.RefSelector('seriesMarkerSizeSlider')], MarkersPanel.prototype, "seriesMarkerSizeSlider", void 0);
  __decorate$Z([agGridCommunity.RefSelector('seriesMarkerMinSizeSlider')], MarkersPanel.prototype, "seriesMarkerMinSizeSlider", void 0);
  __decorate$Z([agGridCommunity.RefSelector('seriesMarkerStrokeWidthSlider')], MarkersPanel.prototype, "seriesMarkerStrokeWidthSlider", void 0);
  __decorate$Z([agGridCommunity.Autowired('chartTranslator')], MarkersPanel.prototype, "chartTranslator", void 0);
  __decorate$Z([agGridCommunity.PostConstruct], MarkersPanel.prototype, "init", null);
  return MarkersPanel;
}(agGridCommunity.Component);
var __extends$1P =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$_ =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var LineSeriesPanel = /** @class */function (_super) {
  __extends$1P(LineSeriesPanel, _super);
  function LineSeriesPanel(chartController) {
    var _this = _super.call(this) || this;
    _this.activePanels = [];
    _this.chartController = chartController;
    return _this;
  }
  LineSeriesPanel.prototype.init = function () {
    var groupParams = {
      cssIdentifier: 'charts-format-top-level',
      direction: 'vertical'
    };
    this.setTemplate(LineSeriesPanel.TEMPLATE, {
      seriesGroup: groupParams
    });
    this.initSeriesGroup();
    this.initSeriesTooltips();
    this.initSeriesLineWidth();
    this.initSeriesLineDash();
    this.initMarkersPanel();
  };
  LineSeriesPanel.prototype.initSeriesGroup = function () {
    this.seriesGroup.setTitle(this.chartTranslator.translate("series")).toggleGroupExpand(false).hideEnabledCheckbox(true);
  };
  LineSeriesPanel.prototype.initSeriesTooltips = function () {
    var _this = this;
    this.seriesTooltipsToggle.setLabel(this.chartTranslator.translate("tooltips")).setLabelAlignment("left").setLabelWidth("flex").setInputWidth(45).setValue(this.getChartProxy().getSeriesOption("tooltip.enabled") || false).onValueChange(function (newValue) {
      return _this.getChartProxy().setSeriesOption("tooltip.enabled", newValue);
    });
  };
  LineSeriesPanel.prototype.initSeriesLineWidth = function () {
    var _this = this;
    this.seriesLineWidthSlider.setLabel(this.chartTranslator.translate('lineWidth')).setMaxValue(10).setTextFieldWidth(45).setValue(this.getChartProxy().getSeriesOption("stroke.width")).onValueChange(function (newValue) {
      return _this.getChartProxy().setSeriesOption("stroke.width", newValue);
    });
  };
  LineSeriesPanel.prototype.initSeriesLineDash = function () {
    var _this = this;
    this.seriesLineDashSlider.setLabel(this.chartTranslator.translate('lineDash')).setMaxValue(30).setTextFieldWidth(45).setValue(this.getChartProxy().getSeriesOption("lineDash")).onValueChange(function (newValue) {
      return _this.getChartProxy().setSeriesOption("lineDash", [newValue]);
    });
  };
  LineSeriesPanel.prototype.initMarkersPanel = function () {
    var markersPanelComp = this.createBean(new MarkersPanel(this.chartController));
    this.seriesGroup.addItem(markersPanelComp);
    this.activePanels.push(markersPanelComp);
  };
  LineSeriesPanel.prototype.destroyActivePanels = function () {
    var _this = this;
    this.activePanels.forEach(function (panel) {
      agGridCommunity._.removeFromParent(panel.getGui());
      _this.destroyBean(panel);
    });
  };
  LineSeriesPanel.prototype.getChartProxy = function () {
    return this.chartController.getChartProxy();
  };
  LineSeriesPanel.prototype.destroy = function () {
    this.destroyActivePanels();
    _super.prototype.destroy.call(this);
  };
  LineSeriesPanel.TEMPLATE = "<div>\n            <ag-group-component ref=\"seriesGroup\">\n                <ag-toggle-button ref=\"seriesTooltipsToggle\"></ag-toggle-button>\n                <ag-slider ref=\"seriesLineWidthSlider\"></ag-slider>\n                <ag-slider ref=\"seriesLineDashSlider\"></ag-slider>\n            </ag-group-component>\n        </div>";
  __decorate$_([agGridCommunity.RefSelector('seriesGroup')], LineSeriesPanel.prototype, "seriesGroup", void 0);
  __decorate$_([agGridCommunity.RefSelector('seriesTooltipsToggle')], LineSeriesPanel.prototype, "seriesTooltipsToggle", void 0);
  __decorate$_([agGridCommunity.RefSelector('seriesLineWidthSlider')], LineSeriesPanel.prototype, "seriesLineWidthSlider", void 0);
  __decorate$_([agGridCommunity.RefSelector('seriesLineDashSlider')], LineSeriesPanel.prototype, "seriesLineDashSlider", void 0);
  __decorate$_([agGridCommunity.Autowired('chartTranslator')], LineSeriesPanel.prototype, "chartTranslator", void 0);
  __decorate$_([agGridCommunity.PostConstruct], LineSeriesPanel.prototype, "init", null);
  return LineSeriesPanel;
}(agGridCommunity.Component);
var __extends$1Q =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$$ =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CalloutPanel = /** @class */function (_super) {
  __extends$1Q(CalloutPanel, _super);
  function CalloutPanel(chartController) {
    var _this = _super.call(this) || this;
    _this.chartController = chartController;
    return _this;
  }
  CalloutPanel.prototype.init = function () {
    var groupParams = {
      cssIdentifier: 'charts-format-sub-level',
      direction: 'vertical'
    };
    this.setTemplate(CalloutPanel.TEMPLATE, {
      calloutGroup: groupParams
    });
    this.initCalloutOptions();
  };
  CalloutPanel.prototype.initCalloutOptions = function () {
    var _this = this;
    this.calloutGroup.setTitle(this.chartTranslator.translate("callout")).setEnabled(true).hideOpenCloseIcons(true).hideEnabledCheckbox(true);
    var initInput = function (expression, input, labelKey, maxValue) {
      input.setLabel(_this.chartTranslator.translate(labelKey)).setValue(_this.chartController.getChartProxy().getSeriesOption(expression)).setMaxValue(maxValue).setTextFieldWidth(45).onValueChange(function (newValue) {
        return _this.chartController.getChartProxy().setSeriesOption(expression, newValue);
      });
    };
    initInput("callout.length", this.calloutLengthSlider, "length", 40);
    initInput("callout.strokeWidth", this.calloutStrokeWidthSlider, "strokeWidth", 10);
    initInput("label.offset", this.labelOffsetSlider, "offset", 30);
  };
  CalloutPanel.TEMPLATE = "<div>\n            <ag-group-component ref=\"calloutGroup\">\n                <ag-slider ref=\"calloutLengthSlider\"></ag-slider>\n                <ag-slider ref=\"calloutStrokeWidthSlider\"></ag-slider>\n                <ag-slider ref=\"labelOffsetSlider\"></ag-slider>\n            </ag-group-component>\n        </div>";
  __decorate$$([agGridCommunity.RefSelector('calloutGroup')], CalloutPanel.prototype, "calloutGroup", void 0);
  __decorate$$([agGridCommunity.RefSelector('calloutLengthSlider')], CalloutPanel.prototype, "calloutLengthSlider", void 0);
  __decorate$$([agGridCommunity.RefSelector('calloutStrokeWidthSlider')], CalloutPanel.prototype, "calloutStrokeWidthSlider", void 0);
  __decorate$$([agGridCommunity.RefSelector('labelOffsetSlider')], CalloutPanel.prototype, "labelOffsetSlider", void 0);
  __decorate$$([agGridCommunity.Autowired('chartTranslator')], CalloutPanel.prototype, "chartTranslator", void 0);
  __decorate$$([agGridCommunity.PostConstruct], CalloutPanel.prototype, "init", null);
  return CalloutPanel;
}(agGridCommunity.Component);
var __extends$1R =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$10 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PieSeriesPanel = /** @class */function (_super) {
  __extends$1R(PieSeriesPanel, _super);
  function PieSeriesPanel(chartController) {
    var _this = _super.call(this) || this;
    _this.activePanels = [];
    _this.chartController = chartController;
    return _this;
  }
  PieSeriesPanel.prototype.init = function () {
    var groupParams = {
      cssIdentifier: 'charts-format-top-level',
      direction: 'vertical'
    };
    this.setTemplate(PieSeriesPanel.TEMPLATE, {
      seriesGroup: groupParams
    });
    this.initGroup();
    this.initSeriesTooltips();
    this.initSeriesStrokeWidth();
    this.initOpacity();
    this.initLabelPanel();
    this.initShadowPanel();
  };
  PieSeriesPanel.prototype.initGroup = function () {
    this.seriesGroup.setTitle(this.chartTranslator.translate("series")).toggleGroupExpand(false).hideEnabledCheckbox(true);
  };
  PieSeriesPanel.prototype.initSeriesTooltips = function () {
    var _this = this;
    this.seriesTooltipsToggle.setLabel(this.chartTranslator.translate("tooltips")).setLabelAlignment("left").setLabelWidth("flex").setInputWidth(45).setValue(this.getChartProxy().getSeriesOption("tooltip.enabled") || false).onValueChange(function (newValue) {
      return _this.getChartProxy().setSeriesOption("tooltip.enabled", newValue);
    });
  };
  PieSeriesPanel.prototype.initSeriesStrokeWidth = function () {
    var _this = this;
    this.seriesStrokeWidthSlider.setLabel(this.chartTranslator.translate("strokeWidth")).setMaxValue(10).setTextFieldWidth(45).setValue(this.getChartProxy().getSeriesOption("stroke.width")).onValueChange(function (newValue) {
      return _this.getChartProxy().setSeriesOption("stroke.width", newValue);
    });
  };
  PieSeriesPanel.prototype.initOpacity = function () {
    var _this = this;
    this.seriesLineOpacitySlider.setLabel(this.chartTranslator.translate("strokeOpacity")).setStep(0.05).setMaxValue(1).setTextFieldWidth(45).setValue(this.getChartProxy().getSeriesOption("stroke.opacity") || "1").onValueChange(function (newValue) {
      return _this.getChartProxy().setSeriesOption("stroke.opacity", newValue);
    });
    this.seriesFillOpacitySlider.setLabel(this.chartTranslator.translate("fillOpacity")).setStep(0.05).setMaxValue(1).setTextFieldWidth(45).setValue(this.getChartProxy().getSeriesOption("fillOpacity") || "1").onValueChange(function (newValue) {
      return _this.getChartProxy().setSeriesOption("fillOpacity", newValue);
    });
  };
  PieSeriesPanel.prototype.initLabelPanel = function () {
    var _this = this;
    var chartProxy = this.getChartProxy();
    var initialFont = {
      family: chartProxy.getSeriesOption("label.fontFamily"),
      style: chartProxy.getSeriesOption("label.fontStyle"),
      weight: chartProxy.getSeriesOption("label.fontWeight"),
      size: chartProxy.getSeriesOption("label.fontSize"),
      color: chartProxy.getSeriesOption("label.color")
    };
    var setFont = function (font) {
      var proxy = _this.getChartProxy();
      if (font.family) {
        proxy.setSeriesOption("label.fontFamily", font.family);
      }
      if (font.weight) {
        proxy.setSeriesOption("label.fontWeight", font.weight);
      }
      if (font.style) {
        proxy.setSeriesOption("label.fontStyle", font.style);
      }
      if (font.size) {
        proxy.setSeriesOption("label.fontSize", font.size);
      }
      if (font.color) {
        proxy.setSeriesOption("label.color", font.color);
      }
    };
    var params = {
      name: this.chartTranslator.translate('labels'),
      enabled: chartProxy.getSeriesOption("label.enabled") || false,
      setEnabled: function (enabled) {
        return _this.getChartProxy().setSeriesOption("label.enabled", enabled);
      },
      suppressEnabledCheckbox: false,
      initialFont: initialFont,
      setFont: setFont
    };
    var labelPanelComp = this.createBean(new FontPanel(params));
    this.activePanels.push(labelPanelComp);
    var calloutPanelComp = this.createBean(new CalloutPanel(this.chartController));
    labelPanelComp.addCompToPanel(calloutPanelComp);
    this.activePanels.push(calloutPanelComp);
    this.seriesGroup.addItem(labelPanelComp);
  };
  PieSeriesPanel.prototype.initShadowPanel = function () {
    var shadowPanelComp = this.createBean(new ShadowPanel(this.chartController));
    this.seriesGroup.getGui().appendChild(shadowPanelComp.getGui());
    this.seriesGroup.addItem(shadowPanelComp);
  };
  PieSeriesPanel.prototype.destroyActivePanels = function () {
    var _this = this;
    this.activePanels.forEach(function (panel) {
      agGridCommunity._.removeFromParent(panel.getGui());
      _this.destroyBean(panel);
    });
  };
  PieSeriesPanel.prototype.getChartProxy = function () {
    return this.chartController.getChartProxy();
  };
  PieSeriesPanel.prototype.destroy = function () {
    this.destroyActivePanels();
    _super.prototype.destroy.call(this);
  };
  PieSeriesPanel.TEMPLATE = "<div>\n            <ag-group-component ref=\"seriesGroup\">\n                <ag-toggle-button ref=\"seriesTooltipsToggle\"></ag-toggle-button>\n                <ag-slider ref=\"seriesStrokeWidthSlider\"></ag-slider>\n                <ag-slider ref=\"seriesLineOpacitySlider\"></ag-slider>\n                <ag-slider ref=\"seriesFillOpacitySlider\"></ag-slider>\n            </ag-group-component>\n        </div>";
  __decorate$10([agGridCommunity.RefSelector('seriesGroup')], PieSeriesPanel.prototype, "seriesGroup", void 0);
  __decorate$10([agGridCommunity.RefSelector('seriesTooltipsToggle')], PieSeriesPanel.prototype, "seriesTooltipsToggle", void 0);
  __decorate$10([agGridCommunity.RefSelector('seriesStrokeWidthSlider')], PieSeriesPanel.prototype, "seriesStrokeWidthSlider", void 0);
  __decorate$10([agGridCommunity.RefSelector('seriesLineOpacitySlider')], PieSeriesPanel.prototype, "seriesLineOpacitySlider", void 0);
  __decorate$10([agGridCommunity.RefSelector('seriesFillOpacitySlider')], PieSeriesPanel.prototype, "seriesFillOpacitySlider", void 0);
  __decorate$10([agGridCommunity.Autowired('chartTranslator')], PieSeriesPanel.prototype, "chartTranslator", void 0);
  __decorate$10([agGridCommunity.PostConstruct], PieSeriesPanel.prototype, "init", null);
  return PieSeriesPanel;
}(agGridCommunity.Component);
var __extends$1S =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$11 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PaddingPanel = /** @class */function (_super) {
  __extends$1S(PaddingPanel, _super);
  function PaddingPanel(chartController) {
    var _this = _super.call(this) || this;
    _this.chartController = chartController;
    return _this;
  }
  PaddingPanel.prototype.init = function () {
    var groupParams = {
      cssIdentifier: 'charts-format-sub-level',
      direction: 'vertical',
      suppressOpenCloseIcons: true
    };
    this.setTemplate(PaddingPanel.TEMPLATE, {
      chartPaddingGroup: groupParams
    });
    this.initGroup();
    this.initChartPaddingItems();
  };
  PaddingPanel.prototype.initGroup = function () {
    this.chartPaddingGroup.setTitle(this.chartTranslator.translate("padding")).hideOpenCloseIcons(true).hideEnabledCheckbox(true);
  };
  PaddingPanel.prototype.initChartPaddingItems = function () {
    var _this = this;
    var initInput = function (property, input) {
      input.setLabel(_this.chartTranslator.translate(property)).setValue(_this.chartController.getChartProxy().getChartPaddingOption(property)).setMaxValue(200).setTextFieldWidth(45).onValueChange(function (newValue) {
        return _this.chartController.getChartProxy().setChartPaddingOption(property, newValue);
      });
    };
    initInput('top', this.paddingTopSlider);
    initInput('right', this.paddingRightSlider);
    initInput('bottom', this.paddingBottomSlider);
    initInput('left', this.paddingLeftSlider);
  };
  PaddingPanel.TEMPLATE = "<div>\n            <ag-group-component ref=\"chartPaddingGroup\">\n                <ag-slider ref=\"paddingTopSlider\"></ag-slider>\n                <ag-slider ref=\"paddingRightSlider\"></ag-slider>\n                <ag-slider ref=\"paddingBottomSlider\"></ag-slider>\n                <ag-slider ref=\"paddingLeftSlider\"></ag-slider>\n            </ag-group-component>\n        <div>";
  __decorate$11([agGridCommunity.RefSelector('chartPaddingGroup')], PaddingPanel.prototype, "chartPaddingGroup", void 0);
  __decorate$11([agGridCommunity.RefSelector('paddingTopSlider')], PaddingPanel.prototype, "paddingTopSlider", void 0);
  __decorate$11([agGridCommunity.RefSelector('paddingRightSlider')], PaddingPanel.prototype, "paddingRightSlider", void 0);
  __decorate$11([agGridCommunity.RefSelector('paddingBottomSlider')], PaddingPanel.prototype, "paddingBottomSlider", void 0);
  __decorate$11([agGridCommunity.RefSelector('paddingLeftSlider')], PaddingPanel.prototype, "paddingLeftSlider", void 0);
  __decorate$11([agGridCommunity.Autowired('chartTranslator')], PaddingPanel.prototype, "chartTranslator", void 0);
  __decorate$11([agGridCommunity.PostConstruct], PaddingPanel.prototype, "init", null);
  return PaddingPanel;
}(agGridCommunity.Component);
var __extends$1T =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$12 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var BackgroundPanel = /** @class */function (_super) {
  __extends$1T(BackgroundPanel, _super);
  function BackgroundPanel(chartController) {
    var _this = _super.call(this) || this;
    _this.chartController = chartController;
    return _this;
  }
  BackgroundPanel.prototype.init = function () {
    var groupParams = {
      cssIdentifier: 'charts-format-sub-level',
      direction: 'vertical',
      suppressOpenCloseIcons: true
    };
    this.setTemplate(BackgroundPanel.TEMPLATE, {
      chartBackgroundGroup: groupParams
    });
    this.initGroup();
    this.initColorPicker();
  };
  BackgroundPanel.prototype.initGroup = function () {
    var _this = this;
    this.group.setTitle(this.chartTranslator.translate('background')).setEnabled(this.chartController.getChartProxy().getChartOption('background.visible')).hideOpenCloseIcons(true).hideEnabledCheckbox(false).onEnableChange(function (enabled) {
      return _this.chartController.getChartProxy().setChartOption('background.visible', enabled);
    });
  };
  BackgroundPanel.prototype.initColorPicker = function () {
    var _this = this;
    this.colorPicker.setLabel(this.chartTranslator.translate('color')).setLabelWidth('flex').setInputWidth(45).setValue(this.chartController.getChartProxy().getChartOption('background.fill')).onValueChange(function (newColor) {
      return _this.chartController.getChartProxy().setChartOption('background.fill', newColor);
    });
  };
  BackgroundPanel.TEMPLATE = "<div>\n            <ag-group-component ref=\"chartBackgroundGroup\">\n                <ag-color-picker ref=\"colorPicker\"></ag-color-picker>\n            </ag-group-component>\n        <div>";
  __decorate$12([agGridCommunity.RefSelector('chartBackgroundGroup')], BackgroundPanel.prototype, "group", void 0);
  __decorate$12([agGridCommunity.RefSelector('colorPicker')], BackgroundPanel.prototype, "colorPicker", void 0);
  __decorate$12([agGridCommunity.Autowired('chartTranslator')], BackgroundPanel.prototype, "chartTranslator", void 0);
  __decorate$12([agGridCommunity.PostConstruct], BackgroundPanel.prototype, "init", null);
  return BackgroundPanel;
}(agGridCommunity.Component);
var __extends$1U =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$13 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TitlePanel = /** @class */function (_super) {
  __extends$1U(TitlePanel, _super);
  function TitlePanel(chartController) {
    var _this = _super.call(this, TitlePanel.TEMPLATE) || this;
    _this.activePanels = [];
    _this.chartController = chartController;
    return _this;
  }
  TitlePanel.prototype.init = function () {
    this.initFontPanel();
  };
  TitlePanel.prototype.hasTitle = function () {
    var chartProxy = this.chartController.getChartProxy();
    var title = chartProxy.getChartOption('title');
    return title && title.enabled && title.text && title.text.length > 0;
  };
  TitlePanel.prototype.initFontPanel = function () {
    var _this = this;
    var chartProxy = this.chartController.getChartProxy();
    var hasTitle = this.hasTitle;
    var setFont = function (font) {
      var proxy = _this.chartController.getChartProxy();
      if (font.family) {
        proxy.setTitleOption('fontFamily', font.family);
      }
      if (font.weight) {
        proxy.setTitleOption('fontWeight', font.weight);
      }
      if (font.style) {
        proxy.setTitleOption('fontStyle', font.style);
      }
      if (font.size) {
        proxy.setTitleOption('fontSize', font.size);
      }
      if (font.color) {
        proxy.setTitleOption('color', font.color);
      }
    };
    var initialFont = {
      family: chartProxy.getChartOption('title.fontFamily'),
      style: chartProxy.getChartOption('title.fontStyle'),
      weight: chartProxy.getChartOption('title.fontWeight'),
      size: chartProxy.getChartOption('title.fontSize'),
      color: chartProxy.getChartOption('title.color')
    };
    if (!hasTitle) {
      setFont(initialFont);
    }
    var fontPanelParams = {
      name: this.chartTranslator.translate('title'),
      enabled: this.hasTitle(),
      suppressEnabledCheckbox: false,
      initialFont: initialFont,
      setFont: setFont,
      setEnabled: function (enabled) {
        var proxy = _this.chartController.getChartProxy();
        if (enabled) {
          var newTitle = _this.disabledTitle || _this.chartTranslator.translate('titlePlaceholder');
          proxy.setTitleOption('text', newTitle);
          _this.disabledTitle = '';
        } else {
          _this.disabledTitle = proxy.getTitleOption('text');
          proxy.setTitleOption('text', '');
        }
      }
    };
    var fontPanelComp = this.createBean(new FontPanel(fontPanelParams));
    this.getGui().appendChild(fontPanelComp.getGui());
    this.activePanels.push(fontPanelComp);
    // edits to the title can disable it, so keep the checkbox in sync:
    this.addManagedListener(this.eventService, 'chartTitleEdit', function () {
      fontPanelComp.setEnabled(_this.hasTitle());
    });
  };
  TitlePanel.prototype.destroyActivePanels = function () {
    var _this = this;
    this.activePanels.forEach(function (panel) {
      agGridCommunity._.removeFromParent(panel.getGui());
      _this.destroyBean(panel);
    });
  };
  TitlePanel.prototype.destroy = function () {
    this.destroyActivePanels();
    _super.prototype.destroy.call(this);
  };
  TitlePanel.TEMPLATE = "<div></div>";
  __decorate$13([agGridCommunity.Autowired('chartTranslator')], TitlePanel.prototype, "chartTranslator", void 0);
  __decorate$13([agGridCommunity.PostConstruct], TitlePanel.prototype, "init", null);
  return TitlePanel;
}(agGridCommunity.Component);
var __extends$1V =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$14 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ChartPanel = /** @class */function (_super) {
  __extends$1V(ChartPanel, _super);
  function ChartPanel(chartController) {
    var _this = _super.call(this) || this;
    _this.activePanels = [];
    _this.chartController = chartController;
    return _this;
  }
  ChartPanel.prototype.init = function () {
    var groupParams = {
      cssIdentifier: 'charts-format-top-level',
      direction: 'vertical'
    };
    this.setTemplate(ChartPanel.TEMPLATE, {
      chartGroup: groupParams
    });
    this.initGroup();
    this.initTitles();
    this.initPaddingPanel();
    this.initBackgroundPanel();
  };
  ChartPanel.prototype.initGroup = function () {
    this.chartGroup.setTitle(this.chartTranslator.translate('chart')).toggleGroupExpand(true).hideEnabledCheckbox(true);
  };
  ChartPanel.prototype.initTitles = function () {
    var titlePanelComp = this.createBean(new TitlePanel(this.chartController));
    this.chartGroup.addItem(titlePanelComp);
    this.activePanels.push(titlePanelComp);
  };
  ChartPanel.prototype.initPaddingPanel = function () {
    var paddingPanelComp = this.createBean(new PaddingPanel(this.chartController));
    this.chartGroup.addItem(paddingPanelComp);
    this.activePanels.push(paddingPanelComp);
  };
  ChartPanel.prototype.initBackgroundPanel = function () {
    var backgroundPanelComp = this.createBean(new BackgroundPanel(this.chartController));
    this.chartGroup.addItem(backgroundPanelComp);
    this.activePanels.push(backgroundPanelComp);
  };
  ChartPanel.prototype.destroyActivePanels = function () {
    var _this = this;
    this.activePanels.forEach(function (panel) {
      agGridCommunity._.removeFromParent(panel.getGui());
      _this.destroyBean(panel);
    });
  };
  ChartPanel.prototype.destroy = function () {
    this.destroyActivePanels();
    _super.prototype.destroy.call(this);
  };
  ChartPanel.TEMPLATE = "<div>\n            <ag-group-component ref=\"chartGroup\"></ag-group-component>\n        </div>";
  __decorate$14([agGridCommunity.RefSelector('chartGroup')], ChartPanel.prototype, "chartGroup", void 0);
  __decorate$14([agGridCommunity.Autowired('chartTranslator')], ChartPanel.prototype, "chartTranslator", void 0);
  __decorate$14([agGridCommunity.PostConstruct], ChartPanel.prototype, "init", null);
  return ChartPanel;
}(agGridCommunity.Component);
var __extends$1W =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$15 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AreaSeriesPanel = /** @class */function (_super) {
  __extends$1W(AreaSeriesPanel, _super);
  function AreaSeriesPanel(chartController) {
    var _this = _super.call(this) || this;
    _this.activePanels = [];
    _this.chartController = chartController;
    return _this;
  }
  AreaSeriesPanel.prototype.init = function () {
    var groupParams = {
      cssIdentifier: 'charts-format-top-level',
      direction: 'vertical'
    };
    this.setTemplate(AreaSeriesPanel.TEMPLATE, {
      seriesGroup: groupParams
    });
    this.initSeriesGroup();
    this.initSeriesTooltips();
    this.initSeriesLineWidth();
    this.initSeriesLineDash();
    this.initOpacity();
    this.initMarkersPanel();
    this.initShadowPanel();
  };
  AreaSeriesPanel.prototype.initSeriesGroup = function () {
    this.seriesGroup.setTitle(this.chartTranslator.translate("series")).toggleGroupExpand(false).hideEnabledCheckbox(true);
  };
  AreaSeriesPanel.prototype.initSeriesTooltips = function () {
    var _this = this;
    this.seriesTooltipsToggle.setLabel(this.chartTranslator.translate("tooltips")).setLabelAlignment("left").setLabelWidth("flex").setInputWidth(45).setValue(this.getChartProxy().getSeriesOption("tooltip.enabled") || false).onValueChange(function (newValue) {
      return _this.getChartProxy().setSeriesOption("tooltip.enabled", newValue);
    });
  };
  AreaSeriesPanel.prototype.initSeriesLineWidth = function () {
    var _this = this;
    this.seriesLineWidthSlider.setLabel(this.chartTranslator.translate("lineWidth")).setMaxValue(10).setTextFieldWidth(45).setValue(this.getChartProxy().getSeriesOption("stroke.width")).onValueChange(function (newValue) {
      return _this.getChartProxy().setSeriesOption("stroke.width", newValue);
    });
  };
  AreaSeriesPanel.prototype.initSeriesLineDash = function () {
    var _this = this;
    this.seriesLineDashSlider.setLabel(this.chartTranslator.translate('lineDash')).setMaxValue(30).setTextFieldWidth(45).setValue(this.getChartProxy().getSeriesOption("lineDash")).onValueChange(function (newValue) {
      return _this.getChartProxy().setSeriesOption("lineDash", [newValue]);
    });
  };
  AreaSeriesPanel.prototype.initOpacity = function () {
    initLineOpacitySlider(this.seriesLineOpacitySlider, this.chartTranslator, this.getChartProxy());
    initFillOpacitySlider(this.seriesFillOpacitySlider, this.chartTranslator, this.getChartProxy());
  };
  AreaSeriesPanel.prototype.initMarkersPanel = function () {
    var markersPanelComp = this.createBean(new MarkersPanel(this.chartController));
    this.seriesGroup.addItem(markersPanelComp);
    this.activePanels.push(markersPanelComp);
  };
  AreaSeriesPanel.prototype.initShadowPanel = function () {
    var shadowPanelComp = this.createBean(new ShadowPanel(this.chartController));
    this.seriesGroup.addItem(shadowPanelComp);
    this.activePanels.push(shadowPanelComp);
  };
  AreaSeriesPanel.prototype.destroyActivePanels = function () {
    var _this = this;
    this.activePanels.forEach(function (panel) {
      agGridCommunity._.removeFromParent(panel.getGui());
      _this.destroyBean(panel);
    });
  };
  AreaSeriesPanel.prototype.getChartProxy = function () {
    return this.chartController.getChartProxy();
  };
  AreaSeriesPanel.prototype.destroy = function () {
    this.destroyActivePanels();
    _super.prototype.destroy.call(this);
  };
  AreaSeriesPanel.TEMPLATE = "<div>\n            <ag-group-component ref=\"seriesGroup\">\n                <ag-toggle-button ref=\"seriesTooltipsToggle\"></ag-toggle-button>\n                <ag-slider ref=\"seriesLineWidthSlider\"></ag-slider>\n                <ag-slider ref=\"seriesLineDashSlider\"></ag-slider>\n                <ag-slider ref=\"seriesLineOpacitySlider\"></ag-slider>\n                <ag-slider ref=\"seriesFillOpacitySlider\"></ag-slider>\n            </ag-group-component>\n        </div>";
  __decorate$15([agGridCommunity.RefSelector('seriesGroup')], AreaSeriesPanel.prototype, "seriesGroup", void 0);
  __decorate$15([agGridCommunity.RefSelector('seriesTooltipsToggle')], AreaSeriesPanel.prototype, "seriesTooltipsToggle", void 0);
  __decorate$15([agGridCommunity.RefSelector('seriesLineWidthSlider')], AreaSeriesPanel.prototype, "seriesLineWidthSlider", void 0);
  __decorate$15([agGridCommunity.RefSelector('seriesLineDashSlider')], AreaSeriesPanel.prototype, "seriesLineDashSlider", void 0);
  __decorate$15([agGridCommunity.RefSelector('seriesLineOpacitySlider')], AreaSeriesPanel.prototype, "seriesLineOpacitySlider", void 0);
  __decorate$15([agGridCommunity.RefSelector('seriesFillOpacitySlider')], AreaSeriesPanel.prototype, "seriesFillOpacitySlider", void 0);
  __decorate$15([agGridCommunity.Autowired('chartTranslator')], AreaSeriesPanel.prototype, "chartTranslator", void 0);
  __decorate$15([agGridCommunity.PostConstruct], AreaSeriesPanel.prototype, "init", null);
  return AreaSeriesPanel;
}(agGridCommunity.Component);
var __extends$1X =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$16 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ScatterSeriesPanel = /** @class */function (_super) {
  __extends$1X(ScatterSeriesPanel, _super);
  function ScatterSeriesPanel(chartController) {
    var _this = _super.call(this) || this;
    _this.activePanels = [];
    _this.chartController = chartController;
    return _this;
  }
  ScatterSeriesPanel.prototype.init = function () {
    var groupParams = {
      cssIdentifier: 'charts-format-top-level',
      direction: 'vertical'
    };
    this.setTemplate(ScatterSeriesPanel.TEMPLATE, {
      seriesGroup: groupParams
    });
    this.initSeriesGroup();
    this.initSeriesTooltips();
    this.initMarkersPanel();
  };
  ScatterSeriesPanel.prototype.initSeriesGroup = function () {
    this.seriesGroup.setTitle(this.chartTranslator.translate("series")).toggleGroupExpand(false).hideEnabledCheckbox(true);
  };
  ScatterSeriesPanel.prototype.initSeriesTooltips = function () {
    var _this = this;
    this.seriesTooltipsToggle.setLabel(this.chartTranslator.translate("tooltips")).setLabelAlignment("left").setLabelWidth("flex").setInputWidth(45).setValue(this.getChartProxy().getSeriesOption("tooltip.enabled") || false).onValueChange(function (newValue) {
      return _this.getChartProxy().setSeriesOption("tooltip.enabled", newValue);
    });
  };
  ScatterSeriesPanel.prototype.initMarkersPanel = function () {
    var markersPanelComp = this.createBean(new MarkersPanel(this.chartController));
    this.seriesGroup.addItem(markersPanelComp);
    this.activePanels.push(markersPanelComp);
  };
  ScatterSeriesPanel.prototype.destroyActivePanels = function () {
    var _this = this;
    this.activePanels.forEach(function (panel) {
      agGridCommunity._.removeFromParent(panel.getGui());
      _this.destroyBean(panel);
    });
  };
  ScatterSeriesPanel.prototype.getChartProxy = function () {
    return this.chartController.getChartProxy();
  };
  ScatterSeriesPanel.prototype.destroy = function () {
    this.destroyActivePanels();
    _super.prototype.destroy.call(this);
  };
  ScatterSeriesPanel.TEMPLATE = "<div>\n            <ag-group-component ref=\"seriesGroup\">\n                <ag-toggle-button ref=\"seriesTooltipsToggle\"></ag-toggle-button>\n            </ag-group-component>\n        </div>";
  __decorate$16([agGridCommunity.RefSelector('seriesGroup')], ScatterSeriesPanel.prototype, "seriesGroup", void 0);
  __decorate$16([agGridCommunity.RefSelector('seriesTooltipsToggle')], ScatterSeriesPanel.prototype, "seriesTooltipsToggle", void 0);
  __decorate$16([agGridCommunity.Autowired('chartTranslator')], ScatterSeriesPanel.prototype, "chartTranslator", void 0);
  __decorate$16([agGridCommunity.PostConstruct], ScatterSeriesPanel.prototype, "init", null);
  return ScatterSeriesPanel;
}(agGridCommunity.Component);
var __extends$1Y =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$17 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HistogramSeriesPanel = /** @class */function (_super) {
  __extends$1Y(HistogramSeriesPanel, _super);
  function HistogramSeriesPanel(chartController) {
    var _this = _super.call(this) || this;
    _this.activePanels = [];
    _this.chartController = chartController;
    return _this;
  }
  HistogramSeriesPanel.prototype.init = function () {
    var groupParams = {
      cssIdentifier: 'charts-format-top-level',
      direction: 'vertical'
    };
    this.setTemplate(HistogramSeriesPanel.TEMPLATE, {
      seriesGroup: groupParams
    });
    this.seriesGroup.setTitle(this.chartTranslator.translate("series")).toggleGroupExpand(false).hideEnabledCheckbox(true);
    this.initSeriesTooltips();
    this.initBins();
    this.initSeriesStrokeWidth();
    this.initSeriesLineDash();
    this.initOpacity();
    this.initLabelPanel();
    this.initShadowPanel();
  };
  HistogramSeriesPanel.prototype.initSeriesTooltips = function () {
    var _this = this;
    this.seriesTooltipsToggle.setLabel(this.chartTranslator.translate("tooltips")).setLabelAlignment("left").setLabelWidth("flex").setInputWidth(45).setValue(this.getChartProxy().getSeriesOption("tooltip.enabled") || false).onValueChange(function (newValue) {
      return _this.getChartProxy().setSeriesOption("tooltip.enabled", newValue);
    });
  };
  HistogramSeriesPanel.prototype.initBins = function () {
    var _this = this;
    this.seriesBinCountSlider.setLabel(this.chartTranslator.translate("histogramBinCount")).setMinValue(4).setMaxValue(100).setTextFieldWidth(45).setValue(this.getChartProxy().getSeriesOption("binCount")).onValueChange(function (newValue) {
      return _this.getChartProxy().setSeriesOption("binCount", newValue);
    });
  };
  HistogramSeriesPanel.prototype.initSeriesStrokeWidth = function () {
    var _this = this;
    this.seriesStrokeWidthSlider.setLabel(this.chartTranslator.translate("strokeWidth")).setMaxValue(10).setTextFieldWidth(45).setValue(this.getChartProxy().getSeriesOption("stroke.width")).onValueChange(function (newValue) {
      return _this.getChartProxy().setSeriesOption("stroke.width", newValue);
    });
  };
  HistogramSeriesPanel.prototype.initSeriesLineDash = function () {
    var _this = this;
    this.seriesLineDashSlider.setLabel(this.chartTranslator.translate('lineDash')).setMaxValue(30).setTextFieldWidth(45).setValue(this.getChartProxy().getSeriesOption("lineDash")).onValueChange(function (newValue) {
      return _this.getChartProxy().setSeriesOption("lineDash", [newValue]);
    });
  };
  HistogramSeriesPanel.prototype.initOpacity = function () {
    initLineOpacitySlider(this.seriesLineOpacitySlider, this.chartTranslator, this.getChartProxy());
    initFillOpacitySlider(this.seriesFillOpacitySlider, this.chartTranslator, this.getChartProxy());
  };
  HistogramSeriesPanel.prototype.initLabelPanel = function () {
    var params = initFontPanelParams(this.chartTranslator, this.getChartProxy());
    var labelPanelComp = this.createBean(new FontPanel(params));
    this.activePanels.push(labelPanelComp);
    this.seriesGroup.addItem(labelPanelComp);
  };
  HistogramSeriesPanel.prototype.initShadowPanel = function () {
    var shadowPanelComp = this.createBean(new ShadowPanel(this.chartController));
    this.seriesGroup.addItem(shadowPanelComp);
    this.activePanels.push(shadowPanelComp);
  };
  HistogramSeriesPanel.prototype.destroyActivePanels = function () {
    var _this = this;
    this.activePanels.forEach(function (panel) {
      agGridCommunity._.removeFromParent(panel.getGui());
      _this.destroyBean(panel);
    });
  };
  HistogramSeriesPanel.prototype.getChartProxy = function () {
    return this.chartController.getChartProxy();
  };
  HistogramSeriesPanel.prototype.destroy = function () {
    this.destroyActivePanels();
    _super.prototype.destroy.call(this);
  };
  HistogramSeriesPanel.TEMPLATE = "<div>\n            <ag-group-component ref=\"seriesGroup\">\n                <ag-toggle-button ref=\"seriesTooltipsToggle\"></ag-toggle-button>\n                <ag-slider ref=\"binCountSlider\"></ag-slider>\n                <ag-slider ref=\"seriesStrokeWidthSlider\"></ag-slider>\n                <ag-slider ref=\"seriesLineDashSlider\"></ag-slider>\n                <ag-slider ref=\"seriesLineOpacitySlider\"></ag-slider>\n                <ag-slider ref=\"seriesFillOpacitySlider\"></ag-slider>\n            </ag-group-component>\n        </div>";
  __decorate$17([agGridCommunity.RefSelector('seriesGroup')], HistogramSeriesPanel.prototype, "seriesGroup", void 0);
  __decorate$17([agGridCommunity.RefSelector('seriesTooltipsToggle')], HistogramSeriesPanel.prototype, "seriesTooltipsToggle", void 0);
  __decorate$17([agGridCommunity.RefSelector('binCountSlider')], HistogramSeriesPanel.prototype, "seriesBinCountSlider", void 0);
  __decorate$17([agGridCommunity.RefSelector('seriesStrokeWidthSlider')], HistogramSeriesPanel.prototype, "seriesStrokeWidthSlider", void 0);
  __decorate$17([agGridCommunity.RefSelector('seriesLineOpacitySlider')], HistogramSeriesPanel.prototype, "seriesLineOpacitySlider", void 0);
  __decorate$17([agGridCommunity.RefSelector('seriesLineDashSlider')], HistogramSeriesPanel.prototype, "seriesLineDashSlider", void 0);
  __decorate$17([agGridCommunity.RefSelector('seriesFillOpacitySlider')], HistogramSeriesPanel.prototype, "seriesFillOpacitySlider", void 0);
  __decorate$17([agGridCommunity.Autowired('chartTranslator')], HistogramSeriesPanel.prototype, "chartTranslator", void 0);
  __decorate$17([agGridCommunity.PostConstruct], HistogramSeriesPanel.prototype, "init", null);
  return HistogramSeriesPanel;
}(agGridCommunity.Component);
var __extends$1Z =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$18 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ChartFormattingPanel = /** @class */function (_super) {
  __extends$1Z(ChartFormattingPanel, _super);
  function ChartFormattingPanel(chartController) {
    var _this = _super.call(this, ChartFormattingPanel.TEMPLATE) || this;
    _this.panels = [];
    _this.chartController = chartController;
    return _this;
  }
  ChartFormattingPanel.prototype.init = function () {
    this.createPanels();
    this.addManagedListener(this.chartController, ChartController.EVENT_CHART_UPDATED, this.createPanels.bind(this));
  };
  ChartFormattingPanel.prototype.createPanels = function () {
    var chartType = this.chartController.getChartType();
    var isGrouping = this.chartController.isGrouping();
    if (chartType === this.chartType && isGrouping === this.isGrouping) {
      // existing panels can be re-used
      return;
    }
    this.destroyPanels();
    this.addComponent(new ChartPanel(this.chartController));
    this.addComponent(new LegendPanel(this.chartController));
    switch (chartType) {
      case agGridCommunity.ChartType.GroupedColumn:
      case agGridCommunity.ChartType.StackedColumn:
      case agGridCommunity.ChartType.NormalizedColumn:
      case agGridCommunity.ChartType.GroupedBar:
      case agGridCommunity.ChartType.StackedBar:
      case agGridCommunity.ChartType.NormalizedBar:
        this.addComponent(new AxisPanel(this.chartController));
        this.addComponent(new BarSeriesPanel(this.chartController));
        this.addComponent(new NavigatorPanel(this.chartController));
        break;
      case agGridCommunity.ChartType.Pie:
      case agGridCommunity.ChartType.Doughnut:
        this.addComponent(new PieSeriesPanel(this.chartController));
        break;
      case agGridCommunity.ChartType.Line:
        this.addComponent(new AxisPanel(this.chartController));
        this.addComponent(new LineSeriesPanel(this.chartController));
        this.addComponent(new NavigatorPanel(this.chartController));
        break;
      case agGridCommunity.ChartType.Scatter:
      case agGridCommunity.ChartType.Bubble:
        this.addComponent(new AxisPanel(this.chartController));
        this.addComponent(new ScatterSeriesPanel(this.chartController));
        this.addComponent(new NavigatorPanel(this.chartController));
        break;
      case agGridCommunity.ChartType.Area:
      case agGridCommunity.ChartType.StackedArea:
      case agGridCommunity.ChartType.NormalizedArea:
        this.addComponent(new AxisPanel(this.chartController));
        this.addComponent(new AreaSeriesPanel(this.chartController));
        this.addComponent(new NavigatorPanel(this.chartController));
        break;
      case agGridCommunity.ChartType.Histogram:
        this.addComponent(new AxisPanel(this.chartController));
        this.addComponent(new HistogramSeriesPanel(this.chartController));
        this.addComponent(new NavigatorPanel(this.chartController));
        break;
      default:
        console.warn("AG Grid: ChartFormattingPanel - unexpected chart type index: " + chartType + " supplied");
    }
    this.chartType = chartType;
    this.isGrouping = isGrouping;
  };
  ChartFormattingPanel.prototype.addComponent = function (component) {
    this.createBean(component);
    this.panels.push(component);
    agGridCommunity._.addCssClass(component.getGui(), 'ag-chart-format-section');
    this.getGui().appendChild(component.getGui());
  };
  ChartFormattingPanel.prototype.destroyPanels = function () {
    var _this = this;
    this.panels.forEach(function (panel) {
      agGridCommunity._.removeFromParent(panel.getGui());
      _this.destroyBean(panel);
    });
  };
  ChartFormattingPanel.prototype.destroy = function () {
    this.destroyPanels();
    _super.prototype.destroy.call(this);
  };
  ChartFormattingPanel.TEMPLATE = "<div class=\"ag-chart-format-wrapper\"></div>";
  __decorate$18([agGridCommunity.PostConstruct], ChartFormattingPanel.prototype, "init", null);
  return ChartFormattingPanel;
}(agGridCommunity.Component);
var __extends$1_ =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$19 =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var MiniChart = /** @class */function (_super) {
  __extends$1_(MiniChart, _super);
  function MiniChart(container, tooltipName) {
    var _this = _super.call(this) || this;
    _this.size = 58;
    _this.padding = 5;
    _this.root = new Group();
    var scene = new Scene(window.document, _this.size, _this.size);
    agGridCommunity._.addCssClass(scene.canvas.element, 'ag-chart-mini-thumbnail-canvas');
    scene.root = _this.root;
    scene.container = container;
    _this.scene = scene;
    _this.tooltipName = tooltipName;
    return _this;
  }
  MiniChart.prototype.init = function () {
    this.scene.canvas.element.title = this.chartTranslator.translate(this.tooltipName);
  };
  __decorate$19([agGridCommunity.Autowired('chartTranslator')], MiniChart.prototype, "chartTranslator", void 0);
  __decorate$19([agGridCommunity.PostConstruct], MiniChart.prototype, "init", null);
  return MiniChart;
}(agGridCommunity.Component);
var __extends$1$ =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1a =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var MiniChartWithAxes = /** @class */function (_super) {
  __extends$1$(MiniChartWithAxes, _super);
  function MiniChartWithAxes(container, tooltipName) {
    var _this = _super.call(this, container, tooltipName) || this;
    _this.stroke = 'gray';
    _this.axisOvershoot = 3;
    return _this;
  }
  MiniChartWithAxes.prototype.addAxes = function () {
    var size = this.size;
    var padding = this.padding;
    var leftAxis = new Line();
    leftAxis.x1 = padding;
    leftAxis.y1 = padding;
    leftAxis.x2 = padding;
    leftAxis.y2 = size - padding + this.axisOvershoot;
    leftAxis.stroke = this.stroke;
    var bottomAxis = new Line();
    bottomAxis.x1 = padding - this.axisOvershoot + 1;
    bottomAxis.y1 = size - padding;
    bottomAxis.x2 = size - padding + 1;
    bottomAxis.y2 = size - padding;
    bottomAxis.stroke = this.stroke;
    var root = this.root;
    root.append(leftAxis);
    root.append(bottomAxis);
  };
  __decorate$1a([agGridCommunity.PostConstruct], MiniChartWithAxes.prototype, "addAxes", null);
  return MiniChartWithAxes;
}(MiniChart);
var __extends$20 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var MiniColumn = /** @class */function (_super) {
  __extends$20(MiniColumn, _super);
  function MiniColumn(container, fills, strokes) {
    var _this = _super.call(this, container, "groupedColumnTooltip") || this;
    var padding = _this.padding;
    var size = _this.size;
    var data = [2, 3, 4];
    var xScale = new BandScale();
    xScale.domain = [0, 1, 2];
    xScale.range = [padding, size - padding];
    xScale.paddingInner = 0.3;
    xScale.paddingOuter = 0.3;
    var yScale = new LinearScale();
    yScale.domain = [0, 4];
    yScale.range = [size - padding, padding];
    var bottom = yScale.convert(0);
    var width = xScale.bandwidth;
    _this.bars = data.map(function (datum, i) {
      var top = yScale.convert(datum);
      var rect = new Rect();
      rect.x = xScale.convert(i);
      rect.y = top;
      rect.width = width;
      rect.height = bottom - top;
      rect.strokeWidth = 1;
      rect.crisp = true;
      return rect;
    });
    _this.updateColors(fills, strokes);
    _this.root.append(_this.bars);
    return _this;
  }
  MiniColumn.prototype.updateColors = function (fills, strokes) {
    this.bars.forEach(function (bar, i) {
      bar.fill = fills[i];
      bar.stroke = strokes[i];
    });
  };
  MiniColumn.chartType = agGridCommunity.ChartType.GroupedColumn;
  return MiniColumn;
}(MiniChartWithAxes);
var __extends$21 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var MiniStackedColumn = /** @class */function (_super) {
  __extends$21(MiniStackedColumn, _super);
  function MiniStackedColumn(container, fills, strokes, data, yScaleDomain, tooltipName) {
    if (data === void 0) {
      data = MiniStackedColumn.data;
    }
    if (yScaleDomain === void 0) {
      yScaleDomain = [0, 16];
    }
    if (tooltipName === void 0) {
      tooltipName = "stackedColumnTooltip";
    }
    var _this = _super.call(this, container, tooltipName) || this;
    var padding = _this.padding;
    var size = _this.size;
    var xScale = new BandScale();
    xScale.domain = [0, 1, 2];
    xScale.range = [padding, size - padding];
    xScale.paddingInner = 0.3;
    xScale.paddingOuter = 0.3;
    var yScale = new LinearScale();
    yScale.domain = yScaleDomain;
    yScale.range = [size - padding, padding];
    var bottom = yScale.convert(0);
    var width = xScale.bandwidth;
    _this.bars = data.map(function (series) {
      return series.map(function (datum, i) {
        var top = yScale.convert(datum);
        var rect = new Rect();
        rect.x = xScale.convert(i);
        rect.y = top;
        rect.width = width;
        rect.height = bottom - top;
        rect.strokeWidth = 1;
        rect.crisp = true;
        return rect;
      });
    });
    _this.updateColors(fills, strokes);
    _this.root.append([].concat.apply([], _this.bars));
    return _this;
  }
  MiniStackedColumn.prototype.updateColors = function (fills, strokes) {
    this.bars.forEach(function (series, i) {
      return series.forEach(function (bar) {
        bar.fill = fills[i];
        bar.stroke = strokes[i];
      });
    });
  };
  MiniStackedColumn.chartType = agGridCommunity.ChartType.StackedColumn;
  MiniStackedColumn.data = [[8, 12, 16], [6, 9, 12], [2, 3, 4]];
  return MiniStackedColumn;
}(MiniChartWithAxes);
var __extends$22 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var MiniNormalizedColumn = /** @class */function (_super) {
  __extends$22(MiniNormalizedColumn, _super);
  function MiniNormalizedColumn(container, fills, strokes) {
    return _super.call(this, container, fills, strokes, MiniNormalizedColumn.data, [0, 10], "normalizedColumnTooltip") || this;
  }
  MiniNormalizedColumn.chartType = agGridCommunity.ChartType.NormalizedColumn;
  MiniNormalizedColumn.data = [[10, 10, 10], [6, 7, 8], [2, 4, 6]];
  return MiniNormalizedColumn;
}(MiniStackedColumn);
var __extends$23 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var MiniBar = /** @class */function (_super) {
  __extends$23(MiniBar, _super);
  function MiniBar(container, fills, strokes) {
    var _this = _super.call(this, container, "groupedBarTooltip") || this;
    var padding = _this.padding;
    var size = _this.size;
    var data = [2, 3, 4];
    var yScale = new BandScale();
    yScale.domain = [0, 1, 2];
    yScale.range = [padding, size - padding];
    yScale.paddingInner = 0.3;
    yScale.paddingOuter = 0.3;
    var xScale = new LinearScale();
    xScale.domain = [0, 4];
    xScale.range = [size - padding, padding];
    var bottom = xScale.convert(0);
    var height = yScale.bandwidth;
    _this.bars = data.map(function (datum, i) {
      var rect = new Rect();
      rect.x = padding;
      rect.y = yScale.convert(i);
      rect.width = bottom - xScale.convert(datum);
      rect.height = height;
      rect.strokeWidth = 1;
      rect.crisp = true;
      return rect;
    });
    _this.updateColors(fills, strokes);
    _this.root.append(_this.bars);
    return _this;
  }
  MiniBar.prototype.updateColors = function (fills, strokes) {
    this.bars.forEach(function (bar, i) {
      bar.fill = fills[i];
      bar.stroke = strokes[i];
    });
  };
  MiniBar.chartType = agGridCommunity.ChartType.GroupedBar;
  return MiniBar;
}(MiniChartWithAxes);
var __extends$24 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var MiniStackedBar = /** @class */function (_super) {
  __extends$24(MiniStackedBar, _super);
  function MiniStackedBar(container, fills, strokes, data, xScaleDomain, tooltipName) {
    if (data === void 0) {
      data = MiniStackedBar.data;
    }
    if (xScaleDomain === void 0) {
      xScaleDomain = [0, 16];
    }
    if (tooltipName === void 0) {
      tooltipName = "stackedBarTooltip";
    }
    var _this = _super.call(this, container, tooltipName) || this;
    var size = _this.size;
    var padding = _this.padding;
    var yScale = new BandScale();
    yScale.domain = [0, 1, 2];
    yScale.range = [padding, size - padding];
    yScale.paddingInner = 0.3;
    yScale.paddingOuter = 0.3;
    var xScale = new LinearScale();
    xScale.domain = xScaleDomain;
    xScale.range = [size - padding, padding];
    var bottom = xScale.convert(0);
    var height = yScale.bandwidth;
    _this.bars = data.map(function (series) {
      return series.map(function (datum, i) {
        var rect = new Rect();
        rect.x = padding;
        rect.y = yScale.convert(i);
        rect.width = bottom - xScale.convert(datum);
        rect.height = height;
        rect.strokeWidth = 1;
        rect.crisp = true;
        return rect;
      });
    });
    _this.updateColors(fills, strokes);
    _this.root.append([].concat.apply([], _this.bars));
    return _this;
  }
  MiniStackedBar.prototype.updateColors = function (fills, strokes) {
    this.bars.forEach(function (series, i) {
      return series.forEach(function (bar) {
        bar.fill = fills[i];
        bar.stroke = strokes[i];
      });
    });
  };
  MiniStackedBar.chartType = agGridCommunity.ChartType.StackedBar;
  MiniStackedBar.data = [[8, 12, 16], [6, 9, 12], [2, 3, 4]];
  return MiniStackedBar;
}(MiniChartWithAxes);
var __extends$25 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var MiniNormalizedBar = /** @class */function (_super) {
  __extends$25(MiniNormalizedBar, _super);
  function MiniNormalizedBar(container, fills, strokes) {
    return _super.call(this, container, fills, strokes, MiniNormalizedBar.data, [0, 10], "normalizedBarTooltip") || this;
  }
  MiniNormalizedBar.chartType = agGridCommunity.ChartType.NormalizedBar;
  MiniNormalizedBar.data = [[10, 10, 10], [6, 7, 8], [2, 4, 6]];
  return MiniNormalizedBar;
}(MiniStackedBar);
var __extends$26 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var MiniDoughnut = /** @class */function (_super) {
  __extends$26(MiniDoughnut, _super);
  function MiniDoughnut(container, fills, strokes, centerRadiusScaler, tooltipName) {
    if (centerRadiusScaler === void 0) {
      centerRadiusScaler = 0.6;
    }
    if (tooltipName === void 0) {
      tooltipName = "doughnutTooltip";
    }
    var _this = _super.call(this, container, tooltipName) || this;
    var radius = (_this.size - _this.padding * 2) / 2;
    var center = radius + _this.padding;
    var angles = [[toRadians(-90), toRadians(30)], [toRadians(30), toRadians(120)], [toRadians(120), toRadians(180)], [toRadians(180), toRadians(210)], [toRadians(210), toRadians(240)], [toRadians(240), toRadians(270)]];
    _this.sectors = angles.map(function (_a) {
      var startAngle = _a[0],
        endAngle = _a[1];
      var sector = new Sector();
      sector.centerX = center;
      sector.centerY = center;
      sector.innerRadius = radius * centerRadiusScaler;
      sector.outerRadius = radius;
      sector.startAngle = startAngle;
      sector.endAngle = endAngle;
      sector.stroke = undefined;
      sector.strokeWidth = 1;
      return sector;
    });
    _this.updateColors(fills, strokes);
    _this.root.append(_this.sectors);
    return _this;
  }
  MiniDoughnut.prototype.updateColors = function (fills, strokes) {
    this.sectors.forEach(function (sector, i) {
      sector.fill = fills[i % fills.length];
      sector.stroke = strokes[i % strokes.length];
    });
  };
  MiniDoughnut.chartType = agGridCommunity.ChartType.Doughnut;
  return MiniDoughnut;
}(MiniChart);
var __extends$27 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var MiniPie = /** @class */function (_super) {
  __extends$27(MiniPie, _super);
  function MiniPie(container, fills, strokes) {
    return _super.call(this, container, fills, strokes, 0, "pieTooltip") || this;
  }
  MiniPie.chartType = agGridCommunity.ChartType.Pie;
  return MiniPie;
}(MiniDoughnut);
var __extends$28 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var MiniLine = /** @class */function (_super) {
  __extends$28(MiniLine, _super);
  function MiniLine(container, fills, strokes) {
    var _this = _super.call(this, container, "lineTooltip") || this;
    var size = _this.size;
    var padding = _this.padding;
    var xScale = new LinearScale();
    xScale.domain = [0, 4];
    xScale.range = [padding, size - padding];
    var yScale = new LinearScale();
    yScale.domain = [0, 10];
    yScale.range = [size - padding, padding];
    var data = [[9, 7, 8, 5, 6], [5, 6, 3, 4, 1], [1, 3, 4, 8, 7]];
    _this.lines = data.map(function (series) {
      var line = new Path();
      line.strokeWidth = 3;
      line.lineCap = "round";
      line.fill = undefined;
      series.forEach(function (datum, i) {
        line.path[i > 0 ? "lineTo" : "moveTo"](xScale.convert(i), yScale.convert(datum));
      });
      return line;
    });
    _this.updateColors(fills, strokes);
    var clipRect = new ClipRect();
    clipRect.x = clipRect.y = padding;
    clipRect.width = clipRect.height = size - padding * 2;
    clipRect.append(_this.lines);
    _this.root.append(clipRect);
    return _this;
  }
  MiniLine.prototype.updateColors = function (fills, strokes) {
    this.lines.forEach(function (line, i) {
      line.stroke = fills[i];
    });
  };
  MiniLine.chartType = agGridCommunity.ChartType.Line;
  return MiniLine;
}(MiniChartWithAxes);
var __extends$29 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var MiniScatter = /** @class */function (_super) {
  __extends$29(MiniScatter, _super);
  function MiniScatter(container, fills, strokes) {
    var _this = _super.call(this, container, "scatterTooltip") || this;
    var size = _this.size;
    var padding = _this.padding;
    // [x, y] pairs
    var data = [[[0.3, 3], [1.1, 0.9], [2, 0.4], [3.4, 2.4]], [[0, 0.3], [1, 2], [2.4, 1.4], [3, 0]]];
    var xScale = new LinearScale();
    xScale.domain = [-0.5, 4];
    xScale.range = [padding * 2, size - padding];
    var yScale = new LinearScale();
    yScale.domain = [-0.5, 3.5];
    yScale.range = [size - padding, padding];
    var points = [];
    data.forEach(function (series) {
      series.forEach(function (_a) {
        var x = _a[0],
          y = _a[1];
        var arc = new Arc();
        arc.strokeWidth = 1;
        arc.centerX = xScale.convert(x);
        arc.centerY = yScale.convert(y);
        arc.radiusX = arc.radiusY = 2.5;
        points.push(arc);
      });
    });
    _this.points = points;
    _this.updateColors(fills, strokes);
    var clipRect = new ClipRect();
    clipRect.x = clipRect.y = padding;
    clipRect.width = clipRect.height = size - padding * 2;
    clipRect.append(_this.points);
    _this.root.append(clipRect);
    return _this;
  }
  MiniScatter.prototype.updateColors = function (fills, strokes) {
    this.points.forEach(function (line, i) {
      line.stroke = strokes[i % strokes.length];
      line.fill = fills[i % fills.length];
    });
  };
  MiniScatter.chartType = agGridCommunity.ChartType.Scatter;
  return MiniScatter;
}(MiniChartWithAxes);
var __extends$2a =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var MiniBubble = /** @class */function (_super) {
  __extends$2a(MiniBubble, _super);
  function MiniBubble(container, fills, strokes) {
    var _this = _super.call(this, container, "bubbleTooltip") || this;
    var size = _this.size;
    var padding = _this.padding;
    // [x, y, radius] triples
    var data = [[[0.1, 0.3, 5], [0.5, 0.4, 7], [0.2, 0.8, 7]], [[0.8, 0.7, 5], [0.7, 0.3, 9]]];
    var xScale = new LinearScale();
    xScale.domain = [0, 1];
    xScale.range = [padding * 2, size - padding];
    var yScale = new LinearScale();
    yScale.domain = [0, 1];
    yScale.range = [size - padding, padding];
    var points = [];
    data.forEach(function (series) {
      series.forEach(function (_a) {
        var x = _a[0],
          y = _a[1],
          radius = _a[2];
        var arc = new Arc();
        arc.strokeWidth = 1;
        arc.centerX = xScale.convert(x);
        arc.centerY = yScale.convert(y);
        arc.radiusX = arc.radiusY = radius;
        arc.fillOpacity = 0.7;
        points.push(arc);
      });
    });
    _this.points = points;
    _this.updateColors(fills, strokes);
    var clipRect = new ClipRect();
    clipRect.x = padding;
    clipRect.y = padding;
    clipRect.width = size - padding * 2;
    clipRect.height = size - padding * 2;
    clipRect.append(_this.points);
    _this.root.append(clipRect);
    return _this;
  }
  MiniBubble.prototype.updateColors = function (fills, strokes) {
    this.points.forEach(function (line, i) {
      line.stroke = strokes[i % strokes.length];
      line.fill = fills[i % fills.length];
    });
  };
  MiniBubble.chartType = agGridCommunity.ChartType.Bubble;
  return MiniBubble;
}(MiniChartWithAxes);
var __extends$2b =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var MiniArea = /** @class */function (_super) {
  __extends$2b(MiniArea, _super);
  function MiniArea(container, fills, strokes, data) {
    if (data === void 0) {
      data = MiniArea.data;
    }
    var _this = _super.call(this, container, "groupedAreaTooltip") || this;
    var size = _this.size;
    var padding = _this.padding;
    var xScale = new BandScale();
    xScale.domain = [0, 1, 2];
    xScale.paddingInner = 1;
    xScale.paddingOuter = 0;
    xScale.range = [padding + 0.5, size - padding - 0.5];
    var yScale = new LinearScale();
    yScale.domain = [0, 6];
    yScale.range = [size - padding + 0.5, padding];
    var xCount = data.length;
    var last = xCount * 2 - 1;
    var pathData = [];
    var bottomY = yScale.convert(0);
    data.forEach(function (datum, i) {
      var x = xScale.convert(i);
      datum.forEach(function (yDatum, j) {
        var y = yScale.convert(yDatum);
        var points = pathData[j] || (pathData[j] = []);
        points[i] = {
          x: x,
          y: y
        };
        points[last - i] = {
          x: x,
          y: bottomY
        };
      });
    });
    _this.areas = pathData.reverse().map(function (points) {
      var area = new Path();
      area.strokeWidth = 1;
      area.fillOpacity = 0.7;
      var path = area.path;
      path.clear();
      points.forEach(function (point, i) {
        return path[i > 0 ? "lineTo" : "moveTo"](point.x, point.y);
      });
      path.closePath();
      return area;
    });
    _this.updateColors(fills, strokes);
    _this.root.append(_this.areas);
    return _this;
  }
  MiniArea.prototype.updateColors = function (fills, strokes) {
    this.areas.forEach(function (area, i) {
      area.fill = fills[i];
      area.stroke = strokes[i];
    });
  };
  MiniArea.chartType = agGridCommunity.ChartType.Area;
  MiniArea.data = [[1, 3, 5], [2, 6, 4], [5, 3, 1]];
  return MiniArea;
}(MiniChartWithAxes);
var __extends$2c =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var MiniStackedArea = /** @class */function (_super) {
  __extends$2c(MiniStackedArea, _super);
  function MiniStackedArea(container, fills, strokes, data, tooltipName) {
    if (data === void 0) {
      data = MiniStackedArea.data;
    }
    if (tooltipName === void 0) {
      tooltipName = "stackedAreaTooltip";
    }
    var _this = _super.call(this, container, tooltipName) || this;
    var size = _this.size;
    var padding = _this.padding;
    var xScale = new BandScale();
    xScale.domain = [0, 1, 2];
    xScale.paddingInner = 1;
    xScale.paddingOuter = 0;
    xScale.range = [padding + 0.5, size - padding - 0.5];
    var yScale = new LinearScale();
    yScale.domain = [0, 16];
    yScale.range = [size - padding + 0.5, padding + 0.5];
    var xCount = data.length;
    var last = xCount * 2 - 1;
    var pathData = [];
    data.forEach(function (datum, i) {
      var x = xScale.convert(i);
      var total = 0;
      datum.forEach(function (yDatum, j) {
        var y = yScale.convert(total + yDatum);
        var points = pathData[j] || (pathData[j] = []);
        points[i] = {
          x: x,
          y: y
        };
        points[last - i] = {
          x: x,
          y: yScale.convert(total) // bottom y
        };

        total += yDatum;
      });
    });
    _this.areas = pathData.map(function (points) {
      var area = new Path();
      area.strokeWidth = 1;
      var path = area.path;
      path.clear();
      points.forEach(function (point, i) {
        return path[i > 0 ? "lineTo" : "moveTo"](point.x, point.y);
      });
      path.closePath();
      return area;
    });
    _this.updateColors(fills, strokes);
    _this.root.append(_this.areas);
    return _this;
  }
  MiniStackedArea.prototype.updateColors = function (fills, strokes) {
    this.areas.forEach(function (area, i) {
      area.fill = fills[i];
      area.stroke = strokes[i];
    });
  };
  MiniStackedArea.chartType = agGridCommunity.ChartType.StackedArea;
  MiniStackedArea.data = [[2, 3, 2], [3, 6, 5], [6, 2, 2]];
  return MiniStackedArea;
}(MiniChartWithAxes);
var __extends$2d =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var MiniNormalizedArea = /** @class */function (_super) {
  __extends$2d(MiniNormalizedArea, _super);
  function MiniNormalizedArea(container, fills, strokes, data) {
    if (data === void 0) {
      data = MiniNormalizedArea.data;
    }
    return _super.call(this, container, fills, strokes, data, "normalizedAreaTooltip") || this;
  }
  MiniNormalizedArea.chartType = agGridCommunity.ChartType.NormalizedArea;
  MiniNormalizedArea.data = MiniStackedArea.data.map(function (stack) {
    var sum = stack.reduce(function (p, c) {
      return p + c;
    }, 0);
    return stack.map(function (v) {
      return v / sum * 16;
    });
  });
  return MiniNormalizedArea;
}(MiniStackedArea);
var __extends$2e =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var MiniHistogram = /** @class */function (_super) {
  __extends$2e(MiniHistogram, _super);
  function MiniHistogram(container, fills, strokes) {
    var _this = _super.call(this, container, "histogramTooltip") || this;
    var padding = _this.padding;
    var size = _this.size;
    // approx normal curve
    var data = [2, 5, 11, 13, 10, 6, 1];
    var xScale = new LinearScale();
    xScale.domain = [0, data.length];
    xScale.range = [padding, size - padding];
    var yScale = new LinearScale();
    yScale.domain = [0, data.reduce(function (a, b) {
      return Math.max(a, b);
    }, 0)];
    yScale.range = [size - padding, padding];
    var bottom = yScale.convert(0);
    _this.bars = data.map(function (datum, i) {
      var top = yScale.convert(datum);
      var left = xScale.convert(i);
      var right = xScale.convert(i + 1);
      var rect = new Rect();
      rect.x = left;
      rect.y = top;
      rect.width = right - left;
      rect.height = bottom - top;
      rect.strokeWidth = 1;
      rect.crisp = true;
      return rect;
    });
    _this.updateColors(fills, strokes);
    _this.root.append(_this.bars);
    return _this;
  }
  MiniHistogram.prototype.updateColors = function (_a, _b) {
    var fill = _a[0];
    var stroke = _b[0];
    this.bars.forEach(function (bar) {
      bar.fill = fill;
      bar.stroke = stroke;
    });
  };
  MiniHistogram.chartType = agGridCommunity.ChartType.Histogram;
  return MiniHistogram;
}(MiniChartWithAxes);
var __extends$2f =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1b =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var MiniChartsContainer = /** @class */function (_super) {
  __extends$2f(MiniChartsContainer, _super);
  function MiniChartsContainer(chartController, fills, strokes) {
    var _this = _super.call(this, MiniChartsContainer.TEMPLATE) || this;
    _this.wrappers = {};
    _this.chartController = chartController;
    _this.fills = fills;
    _this.strokes = strokes;
    return _this;
  }
  MiniChartsContainer.prototype.init = function () {
    var _this = this;
    var chartGroups = {
      columnGroup: [MiniColumn, MiniStackedColumn, MiniNormalizedColumn],
      barGroup: [MiniBar, MiniStackedBar, MiniNormalizedBar],
      pieGroup: [MiniPie, MiniDoughnut],
      lineGroup: [MiniLine],
      scatterGroup: [MiniScatter, MiniBubble],
      areaGroup: [MiniArea, MiniStackedArea, MiniNormalizedArea],
      histogramGroup: [MiniHistogram]
    };
    var eGui = this.getGui();
    Object.keys(chartGroups).forEach(function (group) {
      var chartGroup = chartGroups[group];
      var groupComponent = _this.createBean(new agGridCommunity.AgGroupComponent({
        title: _this.chartTranslator.translate(group),
        suppressEnabledCheckbox: true,
        enabled: true,
        suppressOpenCloseIcons: true,
        cssIdentifier: 'charts-settings',
        direction: 'horizontal'
      }));
      chartGroup.forEach(function (MiniClass) {
        var miniWrapper = document.createElement('div');
        agGridCommunity._.addCssClass(miniWrapper, 'ag-chart-mini-thumbnail');
        _this.addManagedListener(miniWrapper, 'click', function () {
          _this.chartController.setChartType(MiniClass.chartType);
          _this.refreshSelected();
        });
        _this.wrappers[MiniClass.chartType] = miniWrapper;
        _this.createBean(new MiniClass(miniWrapper, _this.fills, _this.strokes));
        groupComponent.addItem(miniWrapper);
      });
      eGui.appendChild(groupComponent.getGui());
    });
    this.refreshSelected();
  };
  MiniChartsContainer.prototype.refreshSelected = function () {
    var type = this.chartController.getChartType();
    for (var wrapper in this.wrappers) {
      agGridCommunity._.addOrRemoveCssClass(this.wrappers[wrapper], 'ag-selected', wrapper === type);
    }
  };
  MiniChartsContainer.TEMPLATE = "<div class=\"ag-chart-settings-mini-wrapper\"></div>";
  __decorate$1b([agGridCommunity.Autowired('chartTranslator')], MiniChartsContainer.prototype, "chartTranslator", void 0);
  __decorate$1b([agGridCommunity.PostConstruct], MiniChartsContainer.prototype, "init", null);
  return MiniChartsContainer;
}(agGridCommunity.Component);
var __extends$2g =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1c =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ChartSettingsPanel = /** @class */function (_super) {
  __extends$2g(ChartSettingsPanel, _super);
  function ChartSettingsPanel(chartController) {
    var _this = _super.call(this, ChartSettingsPanel.TEMPLATE) || this;
    _this.miniCharts = [];
    _this.cardItems = [];
    _this.activePaletteIndex = 0;
    _this.palettes = [];
    _this.themes = [];
    _this.chartController = chartController;
    return _this;
  }
  ChartSettingsPanel.prototype.postConstruct = function () {
    var _this = this;
    this.resetPalettes();
    this.ePrevBtn.insertAdjacentElement('afterbegin', agGridCommunity._.createIconNoSpan('previous', this.gridOptionsWrapper));
    this.eNextBtn.insertAdjacentElement('afterbegin', agGridCommunity._.createIconNoSpan('next', this.gridOptionsWrapper));
    this.addManagedListener(this.ePrevBtn, 'click', function () {
      return _this.setActivePalette(_this.getPrev(), 'left');
    });
    this.addManagedListener(this.eNextBtn, 'click', function () {
      return _this.setActivePalette(_this.getNext(), 'right');
    });
    this.addManagedListener(this.chartController, ChartController.EVENT_CHART_UPDATED, this.resetPalettes.bind(this));
  };
  ChartSettingsPanel.prototype.resetPalettes = function () {
    var _this = this;
    var palettes = this.chartController.getPalettes();
    if (agGridCommunity._.shallowCompare(palettes, this.palettes)) {
      return;
    }
    this.palettes = palettes;
    this.themes = this.chartController.getThemes();
    this.activePaletteIndex = agGridCommunity._.findIndex(this.themes, function (name) {
      return name === _this.chartController.getThemeName();
    });
    this.cardItems = [];
    agGridCommunity._.clearElement(this.eCardSelector);
    this.destroyMiniCharts();
    this.palettes.forEach(function (palette, index) {
      var isActivePalette = _this.activePaletteIndex === index;
      var fills = palette.fills,
        strokes = palette.strokes;
      var miniChartsContainer = _this.createBean(new MiniChartsContainer(_this.chartController, fills, strokes));
      _this.miniCharts.push(miniChartsContainer);
      _this.eMiniChartsContainer.appendChild(miniChartsContainer.getGui());
      _this.addCardLink(index);
      if (isActivePalette) {
        miniChartsContainer.refreshSelected();
      } else {
        agGridCommunity._.addCssClass(miniChartsContainer.getGui(), 'ag-hidden');
      }
    });
    agGridCommunity._.addOrRemoveCssClass(this.eNavBar, 'ag-hidden', this.palettes.length <= 1);
    agGridCommunity._.radioCssClass(this.cardItems[this.activePaletteIndex], 'ag-selected', 'ag-not-selected');
  };
  ChartSettingsPanel.prototype.addCardLink = function (index) {
    var _this = this;
    var link = document.createElement('div');
    agGridCommunity._.addCssClass(link, 'ag-chart-settings-card-item');
    this.addManagedListener(link, 'click', function () {
      var activePaletteIndex = _this.activePaletteIndex;
      _this.setActivePalette(index, index < activePaletteIndex ? 'left' : 'right');
    });
    this.eCardSelector.appendChild(link);
    this.cardItems.push(link);
  };
  ChartSettingsPanel.prototype.getPrev = function () {
    var prev = this.activePaletteIndex - 1;
    if (prev < 0) {
      prev = this.palettes.length - 1;
    }
    return prev;
  };
  ChartSettingsPanel.prototype.getNext = function () {
    var next = this.activePaletteIndex + 1;
    if (next >= this.palettes.length) {
      next = 0;
    }
    return next;
  };
  ChartSettingsPanel.prototype.setActivePalette = function (index, animationDirection) {
    var _this = this;
    if (this.isAnimating || this.activePaletteIndex === index) {
      return;
    }
    agGridCommunity._.radioCssClass(this.cardItems[index], 'ag-selected', 'ag-not-selected');
    var currentPalette = this.miniCharts[this.activePaletteIndex];
    var currentGui = currentPalette.getGui();
    var futurePalette = this.miniCharts[index];
    var nextGui = futurePalette.getGui();
    currentPalette.refreshSelected();
    futurePalette.refreshSelected();
    var multiplier = animationDirection === 'left' ? -1 : 1;
    var final = nextGui.style.left = agGridCommunity._.getAbsoluteWidth(this.getGui()) * multiplier + "px";
    var animatingClass = 'ag-animating';
    agGridCommunity._.removeCssClass(nextGui, 'ag-hidden');
    agGridCommunity._.addCssClass(currentGui, animatingClass);
    agGridCommunity._.addCssClass(nextGui, animatingClass);
    this.activePaletteIndex = index;
    this.chartController.setChartThemeName(this.themes[index]);
    this.isAnimating = true;
    window.setTimeout(function () {
      currentGui.style.left = -parseFloat(final) + "px";
      nextGui.style.left = '0px';
    }, 0);
    window.setTimeout(function () {
      _this.isAnimating = false;
      agGridCommunity._.removeCssClass(currentGui, animatingClass);
      agGridCommunity._.removeCssClass(nextGui, animatingClass);
      agGridCommunity._.addCssClass(currentGui, 'ag-hidden');
    }, 300);
  };
  ChartSettingsPanel.prototype.destroyMiniCharts = function () {
    agGridCommunity._.clearElement(this.eMiniChartsContainer);
    this.miniCharts = this.destroyBeans(this.miniCharts);
  };
  ChartSettingsPanel.prototype.destroy = function () {
    this.destroyMiniCharts();
    _super.prototype.destroy.call(this);
  };
  ChartSettingsPanel.TEMPLATE = "<div class=\"ag-chart-settings-wrapper\">\n            <div ref=\"eMiniChartsContainer\" class=\"ag-chart-settings-mini-charts-container\"></div>\n            <div ref=\"eNavBar\" class=\"ag-chart-settings-nav-bar\">\n                <div ref=\"ePrevBtn\" class=\"ag-chart-settings-prev\">\n                    <button type=\"button\" class=\"ag-chart-settings-prev-button\"></button>\n                </div>\n                <div ref=\"eCardSelector\" class=\"ag-chart-settings-card-selector\"></div>\n                <div ref=\"eNextBtn\" class=\"ag-chart-settings-next\">\n                    <button type=\"button\" class=\"ag-chart-settings-next-button\"></button>\n                </div>\n            </div>\n        </div>";
  __decorate$1c([agGridCommunity.RefSelector('eMiniChartsContainer')], ChartSettingsPanel.prototype, "eMiniChartsContainer", void 0);
  __decorate$1c([agGridCommunity.RefSelector('eNavBar')], ChartSettingsPanel.prototype, "eNavBar", void 0);
  __decorate$1c([agGridCommunity.RefSelector('eCardSelector')], ChartSettingsPanel.prototype, "eCardSelector", void 0);
  __decorate$1c([agGridCommunity.RefSelector('ePrevBtn')], ChartSettingsPanel.prototype, "ePrevBtn", void 0);
  __decorate$1c([agGridCommunity.RefSelector('eNextBtn')], ChartSettingsPanel.prototype, "eNextBtn", void 0);
  __decorate$1c([agGridCommunity.PostConstruct], ChartSettingsPanel.prototype, "postConstruct", null);
  return ChartSettingsPanel;
}(agGridCommunity.Component);
var __extends$2h =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1d =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TabbedChartMenu = /** @class */function (_super) {
  __extends$2h(TabbedChartMenu, _super);
  function TabbedChartMenu(params) {
    var _this = _super.call(this) || this;
    _this.tabs = [];
    _this.chartIcons = {};
    var controller = params.controller,
      type = params.type,
      panels = params.panels;
    _this.chartController = controller;
    _this.currentChartType = type;
    _this.panels = panels;
    return _this;
  }
  TabbedChartMenu.prototype.init = function () {
    var _this = this;
    this.panels.forEach(function (panel) {
      var panelType = panel.replace('chart', '').toLowerCase();
      var _a = _this.createTab(panel, panelType, _this.getPanelClass(panelType)),
        comp = _a.comp,
        tab = _a.tab;
      _this.tabs.push(tab);
      _this.addDestroyFunc(function () {
        return _this.destroyBean(comp);
      });
    });
    this.tabbedLayout = new agGridCommunity.TabbedLayout({
      items: this.tabs,
      cssClass: 'ag-chart-tabbed-menu'
    });
    this.getContext().createBean(this.tabbedLayout);
  };
  TabbedChartMenu.prototype.createTab = function (name, title, ChildClass) {
    var eWrapperDiv = document.createElement('div');
    agGridCommunity._.addCssClass(eWrapperDiv, 'ag-chart-tab');
    agGridCommunity._.addCssClass(eWrapperDiv, "ag-chart-" + title);
    var comp = new ChildClass(this.chartController);
    this.getContext().createBean(comp);
    eWrapperDiv.appendChild(comp.getGui());
    var titleEl = document.createElement('div');
    var translatedTitle = this.chartTranslator.translate(title);
    titleEl.innerText = translatedTitle;
    return {
      comp: comp,
      tab: {
        title: titleEl,
        titleLabel: translatedTitle,
        bodyPromise: agGridCommunity.AgPromise.resolve(eWrapperDiv),
        name: name
      }
    };
  };
  TabbedChartMenu.prototype.getMinDimensions = function () {
    return this.tabbedLayout.getMinDimensions();
  };
  TabbedChartMenu.prototype.updateCurrentChartType = function (chartType) {
    agGridCommunity._.removeCssClass(this.chartIcons[this.currentChartType], 'ag-selected');
    this.currentChartType = chartType;
    agGridCommunity._.addCssClass(this.chartIcons[chartType], 'ag-selected');
  };
  TabbedChartMenu.prototype.showTab = function (tab) {
    var tabItem = this.tabs[tab];
    this.tabbedLayout.showItem(tabItem);
  };
  TabbedChartMenu.prototype.getGui = function () {
    return this.tabbedLayout && this.tabbedLayout.getGui();
  };
  TabbedChartMenu.prototype.destroy = function () {
    if (this.parentComponent && this.parentComponent.isAlive()) {
      this.destroyBean(this.parentComponent);
    }
    _super.prototype.destroy.call(this);
  };
  TabbedChartMenu.prototype.getPanelClass = function (panelType) {
    switch (panelType) {
      case TabbedChartMenu.TAB_DATA:
        return ChartDataPanel;
      case TabbedChartMenu.TAB_FORMAT:
        return ChartFormattingPanel;
      default:
        return ChartSettingsPanel;
    }
  };
  TabbedChartMenu.EVENT_TAB_SELECTED = 'tabSelected';
  TabbedChartMenu.TAB_MAIN = 'settings';
  TabbedChartMenu.TAB_DATA = 'data';
  TabbedChartMenu.TAB_FORMAT = 'format';
  __decorate$1d([agGridCommunity.Autowired('chartTranslator')], TabbedChartMenu.prototype, "chartTranslator", void 0);
  __decorate$1d([agGridCommunity.PostConstruct], TabbedChartMenu.prototype, "init", null);
  return TabbedChartMenu;
}(agGridCommunity.Component);
var __extends$2i =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1e =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ChartMenu = /** @class */function (_super) {
  __extends$2i(ChartMenu, _super);
  function ChartMenu(eChartContainer, eMenuPanelContainer, chartController) {
    var _this = _super.call(this, ChartMenu.TEMPLATE) || this;
    _this.eChartContainer = eChartContainer;
    _this.eMenuPanelContainer = eMenuPanelContainer;
    _this.chartController = chartController;
    _this.buttons = {
      chartSettings: ['menu', function () {
        return _this.showMenu("chartSettings");
      }],
      chartData: ['menu', function () {
        return _this.showMenu("chartData");
      }],
      chartFormat: ['menu', function () {
        return _this.showMenu("chartFormat");
      }],
      chartLink: ['linked', function (e) {
        return _this.toggleDetached(e);
      }],
      chartUnlink: ['unlinked', function (e) {
        return _this.toggleDetached(e);
      }],
      chartDownload: ['save', function () {
        return _this.saveChart();
      }]
    };
    _this.tabs = [];
    _this.menuVisible = false;
    return _this;
  }
  ChartMenu.prototype.postConstruct = function () {
    this.createButtons();
    this.refreshMenuClasses();
  };
  ChartMenu.prototype.isVisible = function () {
    return this.menuVisible;
  };
  ChartMenu.prototype.getToolbarOptions = function () {
    var _this = this;
    var tabOptions = ['chartSettings', 'chartData', 'chartFormat', this.chartController.isChartLinked() ? 'chartLink' : 'chartUnlink', 'chartDownload'];
    var toolbarItemsFunc = this.gridOptionsWrapper.getChartToolbarItemsFunc();
    if (toolbarItemsFunc) {
      var params = {
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        defaultItems: tabOptions
      };
      tabOptions = toolbarItemsFunc(params).filter(function (option) {
        if (!_this.buttons[option]) {
          console.warn("AG Grid: '" + option + " is not a valid Chart Toolbar Option");
          return false;
        }
        return true;
      });
    }
    // pivot charts use the column tool panel instead of the data panel
    if (this.chartController.isPivotChart()) {
      tabOptions = tabOptions.filter(function (option) {
        return option !== 'chartData';
      });
    }
    var ignoreOptions = ['chartUnlink', 'chartLink', 'chartDownload'];
    this.tabs = tabOptions.filter(function (option) {
      return ignoreOptions.indexOf(option) === -1;
    });
    return tabOptions.filter(function (value) {
      return ignoreOptions.indexOf(value) !== -1 || _this.tabs.length && value === _this.tabs[0];
    });
  };
  ChartMenu.prototype.toggleDetached = function (e) {
    var target = e.target;
    var active = agGridCommunity._.containsClass(target, 'ag-icon-linked');
    agGridCommunity._.addOrRemoveCssClass(target, 'ag-icon-linked', !active);
    agGridCommunity._.addOrRemoveCssClass(target, 'ag-icon-unlinked', active);
    var tooltipKey = active ? 'chartUnlinkToolbarTooltip' : 'chartLinkToolbarTooltip';
    var tooltipTitle = this.chartTranslator.translate(tooltipKey);
    if (tooltipTitle) {
      target.title = tooltipTitle;
    }
    this.chartController.detachChartRange();
  };
  ChartMenu.prototype.createButtons = function () {
    var _this = this;
    var chartToolbarOptions = this.getToolbarOptions();
    var gui = this.getGui();
    chartToolbarOptions.forEach(function (button) {
      var buttonConfig = _this.buttons[button];
      var iconName = buttonConfig[0],
        callback = buttonConfig[1];
      var buttonEl = agGridCommunity._.createIconNoSpan(iconName, _this.gridOptionsWrapper, undefined, true);
      agGridCommunity._.addCssClass(buttonEl, 'ag-chart-menu-icon');
      var tooltipTitle = _this.chartTranslator.translate(button + 'ToolbarTooltip');
      if (tooltipTitle) {
        buttonEl.title = tooltipTitle;
      }
      _this.addManagedListener(buttonEl, 'click', callback);
      gui.appendChild(buttonEl);
    });
  };
  ChartMenu.prototype.saveChart = function () {
    var event = {
      type: ChartMenu.EVENT_DOWNLOAD_CHART
    };
    this.dispatchEvent(event);
  };
  ChartMenu.prototype.createMenuPanel = function (defaultTab) {
    var _this = this;
    var width = this.gridOptionsWrapper.chartMenuPanelWidth();
    var menuPanel = this.menuPanel = this.createBean(new agGridCommunity.AgPanel({
      minWidth: width,
      width: width,
      height: '100%',
      closable: true,
      hideTitleBar: true,
      cssIdentifier: 'chart-menu'
    }));
    menuPanel.setParentComponent(this);
    this.eMenuPanelContainer.appendChild(menuPanel.getGui());
    this.tabbedMenu = this.createBean(new TabbedChartMenu({
      controller: this.chartController,
      type: this.chartController.getChartType(),
      panels: this.tabs
    }));
    this.addManagedListener(menuPanel, agGridCommunity.Component.EVENT_DESTROYED, function () {
      return _this.destroyBean(_this.tabbedMenu);
    });
    return new agGridCommunity.AgPromise(function (res) {
      window.setTimeout(function () {
        menuPanel.setBodyComponent(_this.tabbedMenu);
        _this.tabbedMenu.showTab(defaultTab);
        _this.addManagedListener(_this.eChartContainer, 'click', function (event) {
          if (_this.getGui().contains(event.target)) {
            return;
          }
          if (_this.menuVisible) {
            _this.hideMenu();
          }
        });
        res(menuPanel);
      }, 100);
    });
  };
  ChartMenu.prototype.showContainer = function () {
    if (!this.menuPanel) {
      return;
    }
    this.menuVisible = true;
    this.showParent(this.menuPanel.getWidth());
    this.refreshMenuClasses();
  };
  ChartMenu.prototype.showMenu = function (tabName) {
    var tab = this.tabs.indexOf(tabName);
    if (!this.menuPanel) {
      this.createMenuPanel(tab).then(this.showContainer.bind(this));
    } else {
      this.showContainer();
    }
  };
  ChartMenu.prototype.hideMenu = function () {
    var _this = this;
    this.hideParent();
    window.setTimeout(function () {
      _this.menuVisible = false;
      _this.refreshMenuClasses();
    }, 500);
  };
  ChartMenu.prototype.refreshMenuClasses = function () {
    agGridCommunity._.addOrRemoveCssClass(this.eChartContainer, 'ag-chart-menu-visible', this.menuVisible);
    agGridCommunity._.addOrRemoveCssClass(this.eChartContainer, 'ag-chart-menu-hidden', !this.menuVisible);
  };
  ChartMenu.prototype.showParent = function (width) {
    this.eMenuPanelContainer.style.minWidth = width + "px";
  };
  ChartMenu.prototype.hideParent = function () {
    this.eMenuPanelContainer.style.minWidth = '0';
  };
  ChartMenu.prototype.destroy = function () {
    _super.prototype.destroy.call(this);
    if (this.menuPanel && this.menuPanel.isAlive()) {
      this.destroyBean(this.menuPanel);
    }
  };
  ChartMenu.EVENT_DOWNLOAD_CHART = "downloadChart";
  ChartMenu.TEMPLATE = "<div class=\"ag-chart-menu\"></div>";
  __decorate$1e([agGridCommunity.Autowired('chartTranslator')], ChartMenu.prototype, "chartTranslator", void 0);
  __decorate$1e([agGridCommunity.PostConstruct], ChartMenu.prototype, "postConstruct", null);
  return ChartMenu;
}(agGridCommunity.Component);
var __extends$2j =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$c =  false || function () {
  __assign$c = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$c.apply(this, arguments);
};
var __decorate$1f =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TitleEdit = /** @class */function (_super) {
  __extends$2j(TitleEdit, _super);
  function TitleEdit(chartMenu) {
    var _this = _super.call(this, TitleEdit.TEMPLATE) || this;
    _this.chartMenu = chartMenu;
    return _this;
  }
  TitleEdit.prototype.init = function () {
    var _this = this;
    this.addManagedListener(this.getGui(), 'keypress', function (e) {
      if (e.key === 'Enter') {
        _this.endEditing();
      }
    });
    this.addManagedListener(this.getGui(), 'blur', this.endEditing.bind(this));
  };
  /* should be called when the containing component changes to a new chart proxy */
  TitleEdit.prototype.setChartProxy = function (chartProxy) {
    var _this = this;
    if (this.chartProxy) {
      for (var i = 0; i++; i < this.destroyableChartListeners.length) {
        this.destroyableChartListeners[i]();
      }
      this.destroyableChartListeners = [];
    }
    this.chartProxy = chartProxy;
    var chart = this.chartProxy.getChart();
    var canvas = chart.scene.canvas.element;
    var destroyDbleClickListener = this.addManagedListener(canvas, 'dblclick', function (event) {
      var title = chart.title;
      if (title && title.node.containsPoint(event.offsetX, event.offsetY)) {
        var bbox = title.node.computeBBox();
        var xy = title.node.inverseTransformPoint(bbox.x, bbox.y);
        _this.startEditing(__assign$c(__assign$c({}, bbox), xy));
      }
    });
    var destroyMouseMoveListener = this.addManagedListener(canvas, 'mousemove', function (event) {
      var title = chart.title;
      var inTitle = title && title.enabled && title.node.containsPoint(event.offsetX, event.offsetY);
      canvas.style.cursor = inTitle ? 'pointer' : '';
    });
    this.destroyableChartListeners = [destroyDbleClickListener, destroyMouseMoveListener];
  };
  TitleEdit.prototype.startEditing = function (titleBBox) {
    if (this.chartMenu && this.chartMenu.isVisible()) {
      // currently we ignore requests to edit the chart title while the chart menu is showing
      // because the click to edit the chart will also close the chart menu, making the position
      // of the title change.
      return;
    }
    var minimumTargetInputWidth = 300;
    var maximumInputWidth = this.chartProxy.getChart().width;
    var inputWidth = Math.max(Math.min(titleBBox.width + 20, maximumInputWidth), minimumTargetInputWidth);
    var inputElement = this.getGui();
    agGridCommunity._.addCssClass(inputElement, 'currently-editing');
    var inputStyle = inputElement.style;
    // match style of input to title that we're editing
    inputStyle.fontFamily = this.chartProxy.getTitleOption('fontFamily');
    inputStyle.fontWeight = this.chartProxy.getTitleOption('fontWeight');
    inputStyle.fontStyle = this.chartProxy.getTitleOption('fontStyle');
    inputStyle.fontSize = this.chartProxy.getTitleOption('fontSize') + 'px';
    inputStyle.color = this.chartProxy.getTitleOption('color');
    // populate the input with the title, unless the title is the placeholder:
    var oldTitle = this.chartProxy.getTitleOption('text');
    var inputValue = oldTitle === this.chartTranslator.translate('titlePlaceholder') ? '' : oldTitle;
    inputElement.value = inputValue;
    var inputRect = inputElement.getBoundingClientRect();
    inputStyle.left = Math.round(titleBBox.x + titleBBox.width / 2 - inputWidth / 2) + 'px';
    inputStyle.top = Math.round(titleBBox.y + titleBBox.height / 2 - inputRect.height / 2) + 'px';
    inputStyle.width = Math.round(inputWidth) + 'px';
    inputElement.focus();
  };
  TitleEdit.prototype.endEditing = function () {
    var value = this.getGui().value;
    this.chartProxy.setTitleOption('text', value);
    this.eventService.dispatchEvent({
      type: 'chartTitleEdit'
    });
    agGridCommunity._.removeCssClass(this.getGui(), 'currently-editing');
  };
  TitleEdit.TEMPLATE = "<input\n            class=\"ag-chart-title-edit\"\n            style=\"padding:0; border:none; border-radius: 0; min-height: 0; text-align: center;\" />\n        ";
  __decorate$1f([agGridCommunity.Autowired('chartTranslator')], TitleEdit.prototype, "chartTranslator", void 0);
  __decorate$1f([agGridCommunity.PostConstruct], TitleEdit.prototype, "init", null);
  return TitleEdit;
}(agGridCommunity.Component);
var __extends$2k =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$d =  false || function () {
  __assign$d = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$d.apply(this, arguments);
};
var BarChartProxy = /** @class */function (_super) {
  __extends$2k(BarChartProxy, _super);
  function BarChartProxy(params) {
    var _this = _super.call(this, params) || this;
    _this.initChartOptions();
    _this.recreateChart();
    return _this;
  }
  BarChartProxy.prototype.createChart = function () {
    var grouping = this.chartProxyParams.grouping;
    var isColumn = this.isColumnChart();
    var options = this.iChartOptions;
    var agChartOptions = options;
    if (grouping) {
      agChartOptions.type = 'groupedCategory';
    }
    agChartOptions.autoSize = true;
    agChartOptions.axes = [__assign$d(__assign$d({}, isColumn ? options.xAxis : options.yAxis), {
      position: isColumn ? 'bottom' : 'left',
      type: grouping ? 'groupedCategory' : 'category'
    }), __assign$d(__assign$d({}, isColumn ? options.yAxis : options.xAxis), {
      position: isColumn ? 'left' : 'bottom',
      type: 'number'
    })];
    var chartType = this.chartType;
    var isGrouped = !this.crossFiltering && (chartType === agGridCommunity.ChartType.GroupedColumn || chartType === agGridCommunity.ChartType.GroupedBar);
    var isNormalized = !this.crossFiltering && (chartType === agGridCommunity.ChartType.NormalizedColumn || chartType === agGridCommunity.ChartType.NormalizedBar);
    var seriesDefaults = this.iChartOptions.seriesDefaults;
    agChartOptions.series = [__assign$d(__assign$d({
      type: isColumn ? 'column' : 'bar',
      grouped: isGrouped,
      normalizedTo: isNormalized ? 100 : undefined
    }, seriesDefaults), {
      // mapping for ag chart options
      fills: seriesDefaults.fill.colors,
      fillOpacity: seriesDefaults.fill.opacity,
      strokes: seriesDefaults.stroke.colors,
      strokeOpacity: seriesDefaults.stroke.opacity,
      strokeWidth: seriesDefaults.stroke.width
    })];
    agChartOptions.container = this.chartProxyParams.parentElement;
    return AgChart.create(agChartOptions);
  };
  BarChartProxy.prototype.update = function (params) {
    var _this = this;
    this.chartProxyParams.grouping = params.grouping;
    this.updateAxes('category', !this.isColumnChart());
    var chart = this.chart;
    var barSeries = chart.series[0];
    var palette = this.getPalette();
    var fields = params.fields;
    if (this.crossFiltering) {
      // add additional filtered out field
      fields.forEach(function (field) {
        var crossFilteringField = __assign$d({}, field);
        crossFilteringField.colId = field.colId + '-filtered-out';
        fields.push(crossFilteringField);
      });
      // introduce cross filtering transparent fills
      var fills_1 = [];
      palette.fills.forEach(function (fill) {
        fills_1.push(fill);
        fills_1.push(_this.hexToRGBA(fill, '0.3'));
      });
      barSeries.fills = fills_1;
      // introduce cross filtering transparent strokes
      var strokes = [];
      palette.strokes.forEach(function (stroke) {
        fills_1.push(stroke);
        fills_1.push(_this.hexToRGBA(stroke, '0.3'));
      });
      barSeries.strokes = strokes;
      // disable series highlighting by default
      barSeries.highlightStyle.fill = undefined;
      // hide 'filtered out' legend items
      var colIds = params.fields.map(function (f) {
        return f.colId;
      });
      barSeries.hideInLegend = colIds.filter(function (colId) {
        return colId.indexOf('-filtered-out') !== -1;
      });
      // sync toggling of legend item with hidden 'filtered out' item
      chart.legend.addEventListener('click', function (event) {
        barSeries.toggleSeriesItem(event.itemId + '-filtered-out', event.enabled);
      });
      chart.tooltip.delay = 500;
      // add node click cross filtering callback to series
      barSeries.addEventListener('nodeClick', this.crossFilterCallback);
    } else {
      barSeries.fills = palette.fills;
      barSeries.strokes = palette.strokes;
    }
    barSeries.data = this.transformData(params.data, params.category.id);
    barSeries.xKey = params.category.id;
    barSeries.xName = params.category.name;
    barSeries.yKeys = params.fields.map(function (f) {
      return f.colId;
    });
    barSeries.yNames = params.fields.map(function (f) {
      return f.displayName;
    });
    this.updateLabelRotation(params.category.id, !this.isColumnChart());
  };
  BarChartProxy.prototype.extractIChartOptionsFromTheme = function (theme) {
    var iChartOptions = _super.prototype.extractIChartOptionsFromTheme.call(this, theme);
    var integratedChartType = this.chartType;
    var standaloneChartType = this.getStandaloneChartType();
    var seriesType = integratedChartType === agGridCommunity.ChartType.GroupedBar || integratedChartType === agGridCommunity.ChartType.StackedBar || integratedChartType === agGridCommunity.ChartType.NormalizedBar ? 'bar' : 'column';
    var themeSeriesDefaults = theme.getConfig(standaloneChartType + '.series.' + seriesType);
    iChartOptions.seriesDefaults = {
      shadow: themeSeriesDefaults.shadow,
      label: themeSeriesDefaults.label,
      tooltip: {
        enabled: themeSeriesDefaults.tooltip && themeSeriesDefaults.tooltip.enabled,
        renderer: themeSeriesDefaults.tooltip && themeSeriesDefaults.tooltip.renderer
      },
      fill: {
        colors: themeSeriesDefaults.fills || theme.palette.fills,
        opacity: themeSeriesDefaults.fillOpacity
      },
      stroke: {
        colors: themeSeriesDefaults.strokes || theme.palette.strokes,
        opacity: themeSeriesDefaults.strokeOpacity,
        width: themeSeriesDefaults.strokeWidth
      },
      lineDash: themeSeriesDefaults.lineDash ? themeSeriesDefaults.lineDash : [0],
      lineDashOffset: themeSeriesDefaults.lineDashOffset,
      highlightStyle: themeSeriesDefaults.highlightStyle,
      listeners: themeSeriesDefaults.listeners
    };
    return iChartOptions;
  };
  BarChartProxy.prototype.isColumnChart = function () {
    return agGridCommunity._.includes([agGridCommunity.ChartType.Column, agGridCommunity.ChartType.GroupedColumn, agGridCommunity.ChartType.StackedColumn, agGridCommunity.ChartType.NormalizedColumn], this.chartType);
  };
  // TODO: should be removed along with processChartOptions()
  BarChartProxy.prototype.getDefaultOptions = function () {
    var fontOptions = this.getDefaultFontOptions();
    var options = this.getDefaultCartesianChartOptions();
    options.seriesDefaults = __assign$d(__assign$d({}, options.seriesDefaults), {
      tooltip: {
        enabled: true
      },
      label: __assign$d(__assign$d({}, fontOptions), {
        enabled: false
      }),
      shadow: this.getDefaultDropShadowOptions()
    });
    return options;
  };
  return BarChartProxy;
}(CartesianChartProxy);
var __extends$2l =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$e =  false || function () {
  __assign$e = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$e.apply(this, arguments);
};
var AreaChartProxy = /** @class */function (_super) {
  __extends$2l(AreaChartProxy, _super);
  function AreaChartProxy(params) {
    var _this = _super.call(this, params) || this;
    _this.initChartOptions();
    _this.recreateChart();
    return _this;
  }
  AreaChartProxy.prototype.createChart = function () {
    var _a = this.chartProxyParams,
      grouping = _a.grouping,
      parentElement = _a.parentElement;
    var seriesDefaults = this.getSeriesDefaults();
    var marker = __assign$e({}, seriesDefaults.marker);
    if (marker.type) {
      // deprecated
      marker.shape = marker.type;
      delete marker.type;
    }
    var options = this.iChartOptions;
    var agChartOptions = options;
    var xAxisType = options.xAxis.type ? options.xAxis.type : 'category';
    if (grouping) {
      agChartOptions.type = 'groupedCategory';
    }
    agChartOptions.autoSize = true;
    agChartOptions.axes = [__assign$e({
      type: grouping ? 'groupedCategory' : xAxisType,
      position: 'bottom',
      paddingInner: 1,
      paddingOuter: 0
    }, this.getXAxisDefaults(xAxisType, options)), __assign$e({
      type: 'number',
      position: 'left'
    }, options.yAxis)];
    agChartOptions.series = [__assign$e(__assign$e({}, seriesDefaults), {
      type: 'area',
      fills: seriesDefaults.fill.colors,
      fillOpacity: seriesDefaults.fill.opacity,
      strokes: seriesDefaults.stroke.colors,
      strokeOpacity: seriesDefaults.stroke.opacity,
      strokeWidth: seriesDefaults.stroke.width,
      tooltip: {
        enabled: seriesDefaults.tooltip && seriesDefaults.tooltip.enabled,
        renderer: seriesDefaults.tooltip && seriesDefaults.tooltip.renderer
      },
      marker: marker
    })];
    return AgChart.create(agChartOptions, parentElement);
  };
  AreaChartProxy.prototype.update = function (params) {
    this.chartProxyParams.grouping = params.grouping;
    var axisType = this.isTimeAxis(params) ? 'time' : 'category';
    this.updateAxes(axisType);
    if (this.chartType === agGridCommunity.ChartType.Area) {
      // area charts have multiple series
      this.updateAreaChart(params);
    } else {
      // stacked and normalized has a single series
      var areaSeries = this.chart.series[0];
      if (!areaSeries) {
        var seriesDefaults = this.getSeriesDefaults();
        var marker = __assign$e({}, seriesDefaults.marker);
        if (marker.type) {
          // deprecated
          marker.shape = marker.type;
          delete marker.type;
        }
        areaSeries = AgChart.createComponent(__assign$e(__assign$e({}, seriesDefaults), {
          fills: seriesDefaults.fill.colors,
          fillOpacity: seriesDefaults.fill.opacity,
          strokes: seriesDefaults.stroke.colors,
          strokeOpacity: seriesDefaults.stroke.opacity,
          strokeWidth: seriesDefaults.stroke.width,
          marker: marker
        }), 'area.series');
        if (areaSeries) {
          this.chart.addSeries(areaSeries);
        } else {
          return;
        }
      }
      var _a = this.getPalette(),
        fills = _a.fills,
        strokes = _a.strokes;
      areaSeries.data = this.transformData(params.data, params.category.id);
      areaSeries.xKey = params.category.id;
      areaSeries.xName = params.category.name;
      areaSeries.yKeys = params.fields.map(function (f) {
        return f.colId;
      });
      areaSeries.yNames = params.fields.map(function (f) {
        return f.displayName;
      });
      areaSeries.fills = fills;
      areaSeries.strokes = strokes;
    }
    this.updateLabelRotation(params.category.id, false, axisType);
  };
  AreaChartProxy.prototype.updateAreaChart = function (params) {
    var _this = this;
    var chart = this.chart;
    if (params.fields.length === 0) {
      chart.removeAllSeries();
      return;
    }
    var fieldIds = params.fields.map(function (f) {
      return f.colId;
    });
    var existingSeriesById = chart.series.reduceRight(function (map, series, i) {
      var id = series.yKeys[0];
      if (fieldIds.indexOf(id) === i) {
        map.set(id, series);
      } else {
        chart.removeSeries(series);
      }
      return map;
    }, new Map());
    var data = this.transformData(params.data, params.category.id);
    var previousSeries;
    var _a = this.getPalette(),
      fills = _a.fills,
      strokes = _a.strokes;
    params.fields.forEach(function (f, index) {
      var _a = _this.processDataForCrossFiltering(data, f.colId, params),
        yKey = _a.yKey,
        atLeastOneSelectedPoint = _a.atLeastOneSelectedPoint;
      var areaSeries = existingSeriesById.get(f.colId);
      var fill = fills[index % fills.length];
      var stroke = strokes[index % strokes.length];
      if (areaSeries) {
        areaSeries.data = data;
        areaSeries.xKey = params.category.id;
        areaSeries.xName = params.category.name;
        areaSeries.yKeys = [yKey];
        areaSeries.yNames = [f.displayName];
        areaSeries.fills = [fill];
        areaSeries.strokes = [stroke];
      } else {
        var seriesDefaults = _this.getSeriesDefaults();
        var marker = __assign$e({}, seriesDefaults.marker);
        if (marker.type) {
          // deprecated
          marker.shape = marker.type;
          delete marker.type;
        }
        var options = __assign$e(__assign$e({}, seriesDefaults), {
          data: data,
          xKey: params.category.id,
          xName: params.category.name,
          yKeys: [yKey],
          yNames: [f.displayName],
          fills: [fill],
          strokes: [stroke],
          fillOpacity: seriesDefaults.fill.opacity,
          strokeOpacity: seriesDefaults.stroke.opacity,
          strokeWidth: seriesDefaults.stroke.width,
          marker: marker
        });
        areaSeries = AgChart.createComponent(options, 'area.series');
        chart.addSeriesAfter(areaSeries, previousSeries);
      }
      _this.updateSeriesForCrossFiltering(areaSeries, f.colId, chart, params, atLeastOneSelectedPoint);
      previousSeries = areaSeries;
    });
  };
  AreaChartProxy.prototype.extractIChartOptionsFromTheme = function (theme) {
    var options = _super.prototype.extractIChartOptionsFromTheme.call(this, theme);
    var seriesDefaults = theme.getConfig('area.series.area');
    options.seriesDefaults = {
      shadow: seriesDefaults.shadow,
      tooltip: {
        enabled: seriesDefaults.tooltip && seriesDefaults.tooltip.enabled,
        renderer: seriesDefaults.tooltip && seriesDefaults.tooltip.renderer
      },
      fill: {
        colors: seriesDefaults.fills || theme.palette.fills,
        opacity: seriesDefaults.fillOpacity
      },
      stroke: {
        colors: seriesDefaults.strokes || theme.palette.strokes,
        opacity: seriesDefaults.strokeOpacity,
        width: seriesDefaults.strokeWidth
      },
      marker: {
        enabled: seriesDefaults.marker.enabled,
        shape: seriesDefaults.marker.shape,
        size: seriesDefaults.marker.size,
        strokeWidth: seriesDefaults.marker.strokeWidth,
        formatter: seriesDefaults.marker.formatter
      },
      lineDash: seriesDefaults.lineDash ? seriesDefaults.lineDash : [0],
      lineDashOffset: seriesDefaults.lineDashOffset,
      highlightStyle: seriesDefaults.highlightStyle,
      listeners: seriesDefaults.listeners
    };
    return options;
  };
  AreaChartProxy.prototype.getDefaultOptions = function () {
    var options = this.getDefaultCartesianChartOptions();
    options.xAxis.label.rotation = 335;
    options.seriesDefaults = __assign$e(__assign$e({}, options.seriesDefaults), {
      fill: __assign$e(__assign$e({}, options.seriesDefaults.fill), {
        opacity: this.chartType === agGridCommunity.ChartType.Area ? 0.7 : 1
      }),
      stroke: __assign$e(__assign$e({}, options.seriesDefaults.stroke), {
        width: 3
      }),
      marker: {
        shape: 'circle',
        enabled: true,
        size: 6,
        strokeWidth: 1
      },
      tooltip: {
        enabled: true
      },
      shadow: this.getDefaultDropShadowOptions()
    });
    return options;
  };
  AreaChartProxy.prototype.getSeriesDefaults = function () {
    return __assign$e(__assign$e({}, this.iChartOptions.seriesDefaults), {
      type: 'area',
      normalizedTo: this.chartType === agGridCommunity.ChartType.NormalizedArea ? 100 : undefined
    });
  };
  return AreaChartProxy;
}(CartesianChartProxy);
var __extends$2m =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$f =  false || function () {
  __assign$f = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$f.apply(this, arguments);
};
var LineChartProxy = /** @class */function (_super) {
  __extends$2m(LineChartProxy, _super);
  function LineChartProxy(params) {
    var _this = _super.call(this, params) || this;
    _this.initChartOptions();
    _this.recreateChart();
    return _this;
  }
  LineChartProxy.prototype.createChart = function () {
    var _a = this.chartProxyParams,
      grouping = _a.grouping,
      parentElement = _a.parentElement;
    var options = this.iChartOptions;
    var agChartOptions = options;
    agChartOptions.autoSize = true;
    var xAxisType = options.xAxis.type ? options.xAxis.type : 'category';
    if (grouping) {
      agChartOptions.type = 'groupedCategory';
    }
    agChartOptions.axes = [__assign$f({
      type: grouping ? 'groupedCategory' : xAxisType,
      position: 'bottom'
    }, this.getXAxisDefaults(xAxisType, options)), __assign$f({
      type: 'number',
      position: 'left'
    }, options.yAxis)];
    return AgChart.create(agChartOptions, parentElement);
  };
  LineChartProxy.prototype.update = function (params) {
    var _this = this;
    this.chartProxyParams.grouping = params.grouping;
    if (params.fields.length === 0) {
      this.chart.removeAllSeries();
      return;
    }
    var axisType = this.isTimeAxis(params) ? 'time' : 'category';
    this.updateAxes(axisType);
    var chart = this.chart;
    var fields = params.fields;
    var fieldIds = fields.map(function (f) {
      return f.colId;
    });
    var data = this.transformData(params.data, params.category.id);
    var existingSeriesById = chart.series.reduceRight(function (map, series, i) {
      var id = series.yKey;
      if (fieldIds.indexOf(id) === i) {
        map.set(id, series);
      } else {
        chart.removeSeries(series);
      }
      return map;
    }, new Map());
    var previousSeries;
    var _a = this.getPalette(),
      fills = _a.fills,
      strokes = _a.strokes;
    fields.forEach(function (f, index) {
      var _a = _this.processDataForCrossFiltering(data, f.colId, params),
        yKey = _a.yKey,
        atLeastOneSelectedPoint = _a.atLeastOneSelectedPoint;
      var lineSeries = existingSeriesById.get(f.colId);
      var fill = fills[index % fills.length];
      var stroke = strokes[index % strokes.length];
      if (lineSeries) {
        lineSeries.title = f.displayName;
        lineSeries.data = data;
        lineSeries.xKey = params.category.id;
        lineSeries.xName = params.category.name;
        lineSeries.yKey = yKey;
        lineSeries.yName = f.displayName;
        lineSeries.marker.fill = fill;
        lineSeries.marker.stroke = stroke;
        lineSeries.stroke = fill; // this is deliberate, so that the line colours match the fills of other series
      } else {
        var seriesDefaults = _this.iChartOptions.seriesDefaults;
        var marker = __assign$f(__assign$f({}, seriesDefaults.marker), {
          fill: fill,
          stroke: stroke
        });
        if (marker.type) {
          // deprecated
          marker.shape = marker.type;
          delete marker.type;
        }
        var options = __assign$f(__assign$f({}, seriesDefaults), {
          type: 'line',
          title: f.displayName,
          data: data,
          xKey: params.category.id,
          xName: params.category.name,
          yKey: yKey,
          yName: f.displayName,
          fill: fill,
          stroke: fill,
          fillOpacity: seriesDefaults.fill.opacity,
          strokeOpacity: seriesDefaults.stroke.opacity,
          strokeWidth: seriesDefaults.stroke.width,
          tooltip: {
            enabled: seriesDefaults.tooltip && seriesDefaults.tooltip.enabled,
            renderer: seriesDefaults.tooltip && seriesDefaults.tooltip.enabled && seriesDefaults.tooltip.renderer
          },
          marker: marker
        });
        lineSeries = AgChart.createComponent(options, 'line.series');
        chart.addSeriesAfter(lineSeries, previousSeries);
      }
      _this.updateSeriesForCrossFiltering(lineSeries, f.colId, chart, params, atLeastOneSelectedPoint);
      previousSeries = lineSeries;
    });
    this.updateLabelRotation(params.category.id, false, axisType);
  };
  LineChartProxy.prototype.extractIChartOptionsFromTheme = function (theme) {
    var options = _super.prototype.extractIChartOptionsFromTheme.call(this, theme);
    var seriesDefaults = theme.getConfig('line.series.line');
    options.seriesDefaults = {
      tooltip: {
        enabled: seriesDefaults.tooltip && seriesDefaults.tooltip.enabled,
        renderer: seriesDefaults.tooltip && seriesDefaults.tooltip.renderer
      },
      fill: {
        colors: [],
        opacity: 1
      },
      stroke: {
        colors: seriesDefaults.stroke && [seriesDefaults.stroke] || theme.palette.strokes,
        opacity: seriesDefaults.strokeOpacity,
        width: seriesDefaults.strokeWidth
      },
      marker: {
        enabled: seriesDefaults.marker.enabled,
        shape: seriesDefaults.marker.shape,
        size: seriesDefaults.marker.size,
        strokeWidth: seriesDefaults.marker.strokeWidth,
        formatter: seriesDefaults.marker.formatter
      },
      lineDash: seriesDefaults.lineDash ? seriesDefaults.lineDash : [0],
      lineDashOffset: seriesDefaults.lineDashOffset,
      highlightStyle: seriesDefaults.highlightStyle,
      listeners: seriesDefaults.listeners
    };
    return options;
  };
  LineChartProxy.prototype.getDefaultOptions = function () {
    var options = this.getDefaultCartesianChartOptions();
    options.xAxis.label.rotation = 335;
    options.seriesDefaults = __assign$f(__assign$f({}, options.seriesDefaults), {
      stroke: __assign$f(__assign$f({}, options.seriesDefaults.stroke), {
        width: 3
      }),
      marker: {
        enabled: true,
        shape: 'circle',
        size: 6,
        strokeWidth: 1
      },
      tooltip: {
        enabled: true
      }
    });
    return options;
  };
  return LineChartProxy;
}(CartesianChartProxy);
var __extends$2n =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PolarChartProxy = /** @class */function (_super) {
  __extends$2n(PolarChartProxy, _super);
  function PolarChartProxy(params) {
    return _super.call(this, params) || this;
  }
  PolarChartProxy.prototype.addCrossFilteringTooltipRenderer = function (pieSeries) {
    pieSeries.tooltip.renderer = function (params) {
      var label = params.datum[params.labelKey];
      var ratio = params.datum[params.radiusKey];
      var totalValue = params.angleValue;
      var value = totalValue * ratio;
      return {
        content: label + ": " + value
      };
    };
  };
  return PolarChartProxy;
}(ChartProxy);
var __extends$2o =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$g =  false || function () {
  __assign$g = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$g.apply(this, arguments);
};
var PieChartProxy = /** @class */function (_super) {
  __extends$2o(PieChartProxy, _super);
  function PieChartProxy(params) {
    var _this = _super.call(this, params) || this;
    _this.initChartOptions();
    _this.recreateChart();
    return _this;
  }
  PieChartProxy.prototype.createChart = function () {
    var options = this.iChartOptions;
    var seriesDefaults = options.seriesDefaults;
    var agChartOptions = options;
    agChartOptions.autoSize = true;
    agChartOptions.series = [__assign$g(__assign$g({}, seriesDefaults), {
      fills: seriesDefaults.fill.colors,
      fillOpacity: seriesDefaults.fill.opacity,
      strokes: seriesDefaults.stroke.colors,
      strokeOpacity: seriesDefaults.stroke.opacity,
      strokeWidth: seriesDefaults.stroke.width,
      type: 'pie'
    })];
    return AgChart.create(agChartOptions, this.chartProxyParams.parentElement);
  };
  PieChartProxy.prototype.update = function (params) {
    var chart = this.chart;
    if (params.fields.length === 0) {
      chart.removeAllSeries();
      return;
    }
    var field = params.fields[0];
    var angleField = field;
    if (this.crossFiltering) {
      // add additional filtered out field
      var fields_1 = params.fields;
      fields_1.forEach(function (field) {
        var crossFilteringField = __assign$g({}, field);
        crossFilteringField.colId = field.colId + '-filtered-out';
        fields_1.push(crossFilteringField);
      });
      var filteredOutField_1 = fields_1[1];
      params.data.forEach(function (d) {
        d[field.colId + '-total'] = d[field.colId] + d[filteredOutField_1.colId];
        d[field.colId] = d[field.colId] / d[field.colId + '-total'];
        d[filteredOutField_1.colId] = 1;
      });
      var opaqueSeries = chart.series[1];
      var radiusField = filteredOutField_1;
      opaqueSeries = this.updateSeries(chart, opaqueSeries, angleField, radiusField, params, undefined);
      radiusField = angleField;
      var filteredSeries = chart.series[0];
      this.updateSeries(chart, filteredSeries, angleField, radiusField, params, opaqueSeries);
    } else {
      var series = chart.series[0];
      this.updateSeries(chart, series, angleField, angleField, params, undefined);
    }
  };
  PieChartProxy.prototype.updateSeries = function (chart, series, angleField, field, params, opaqueSeries) {
    var existingSeriesId = series && series.angleKey;
    var seriesDefaults = this.iChartOptions.seriesDefaults;
    var pieSeries = series;
    if (existingSeriesId !== field.colId) {
      chart.removeSeries(series);
      var options = __assign$g(__assign$g({}, seriesDefaults), {
        type: 'pie',
        angleKey: this.crossFiltering ? angleField.colId + '-total' : angleField.colId,
        radiusKey: this.crossFiltering ? field.colId : undefined,
        title: __assign$g(__assign$g({}, seriesDefaults.title), {
          text: seriesDefaults.title.text || params.fields[0].displayName
        }),
        fills: seriesDefaults.fill.colors,
        fillOpacity: seriesDefaults.fill.opacity,
        strokes: seriesDefaults.stroke.colors,
        strokeOpacity: seriesDefaults.stroke.opacity,
        strokeWidth: seriesDefaults.stroke.width,
        tooltip: {
          enabled: seriesDefaults.tooltip && seriesDefaults.tooltip.enabled,
          renderer: seriesDefaults.tooltip && seriesDefaults.tooltip.enabled && seriesDefaults.tooltip.renderer
        }
      });
      pieSeries = AgChart.createComponent(options, 'pie.series');
      if (this.crossFiltering && pieSeries && !pieSeries.tooltip.renderer) {
        // only add renderer if user hasn't provided one
        this.addCrossFilteringTooltipRenderer(pieSeries);
      }
    }
    pieSeries.angleName = field.displayName;
    pieSeries.labelKey = params.category.id;
    pieSeries.labelName = params.category.name;
    pieSeries.data = params.data;
    if (this.crossFiltering) {
      pieSeries.radiusMin = 0;
      pieSeries.radiusMax = 1;
      var isOpaqueSeries = !opaqueSeries;
      if (isOpaqueSeries) {
        pieSeries.fills = this.changeOpacity(pieSeries.fills, 0.3);
        pieSeries.strokes = this.changeOpacity(pieSeries.strokes, 0.3);
        pieSeries.showInLegend = false;
      } else {
        chart.legend.addEventListener('click', function (event) {
          if (opaqueSeries) {
            opaqueSeries.toggleSeriesItem(event.itemId, event.enabled);
          }
        });
      }
      chart.tooltip.delay = 500;
      // disable series highlighting by default
      pieSeries.highlightStyle.fill = undefined;
      pieSeries.addEventListener("nodeClick", this.crossFilterCallback);
    }
    chart.addSeries(pieSeries);
    return pieSeries;
  };
  PieChartProxy.prototype.extractIChartOptionsFromTheme = function (theme) {
    var options = _super.prototype.extractIChartOptionsFromTheme.call(this, theme);
    var seriesDefaults = theme.getConfig('pie.series.pie');
    options.seriesDefaults = {
      title: seriesDefaults.title,
      label: seriesDefaults.label,
      callout: seriesDefaults.callout,
      shadow: seriesDefaults.shadow,
      tooltip: {
        enabled: seriesDefaults.tooltip && seriesDefaults.tooltip.enabled,
        renderer: seriesDefaults.tooltip && seriesDefaults.tooltip.renderer
      },
      fill: {
        colors: seriesDefaults.fills || theme.palette.fills,
        opacity: seriesDefaults.fillOpacity
      },
      stroke: {
        colors: seriesDefaults.strokes || theme.palette.strokes,
        opacity: seriesDefaults.strokeOpacity,
        width: seriesDefaults.strokeWidth
      },
      lineDash: seriesDefaults.lineDash,
      lineDashOffset: seriesDefaults.lineDashOffset,
      highlightStyle: seriesDefaults.highlightStyle,
      listeners: seriesDefaults.listeners
    };
    var callout = options.seriesDefaults.callout;
    if (callout && !callout.colors) {
      callout.colors = options.seriesDefaults.fill.colors;
    }
    return options;
  };
  // TODO: should be removed along with processChartOptions()
  PieChartProxy.prototype.getDefaultOptions = function () {
    var strokes = this.getPredefinedPalette().strokes;
    var options = this.getDefaultChartOptions();
    var fontOptions = this.getDefaultFontOptions();
    options.seriesDefaults = __assign$g(__assign$g({}, options.seriesDefaults), {
      title: __assign$g(__assign$g({}, fontOptions), {
        enabled: false,
        fontSize: 12,
        fontWeight: 'bold'
      }),
      callout: {
        colors: strokes,
        length: 10,
        strokeWidth: 2
      },
      label: __assign$g(__assign$g({}, fontOptions), {
        enabled: false,
        offset: 3,
        minAngle: 0
      }),
      tooltip: {
        enabled: true
      },
      shadow: this.getDefaultDropShadowOptions()
    });
    return options;
  };
  return PieChartProxy;
}(PolarChartProxy);
var __extends$2p =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$h =  false || function () {
  __assign$h = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$h.apply(this, arguments);
};
var DoughnutChartProxy = /** @class */function (_super) {
  __extends$2p(DoughnutChartProxy, _super);
  function DoughnutChartProxy(params) {
    var _this = _super.call(this, params) || this;
    _this.initChartOptions();
    _this.recreateChart();
    return _this;
  }
  DoughnutChartProxy.prototype.createChart = function () {
    var options = this.iChartOptions;
    var agChartOptions = options;
    agChartOptions.type = 'pie';
    agChartOptions.autoSize = true;
    agChartOptions.series = [];
    return AgChart.create(agChartOptions, this.chartProxyParams.parentElement);
  };
  DoughnutChartProxy.prototype.update = function (params) {
    var _this = this;
    if (params.fields.length === 0) {
      this.chart.removeAllSeries();
      return;
    }
    var doughnutChart = this.chart;
    var fieldIds = params.fields.map(function (f) {
      return f.colId;
    });
    var seriesMap = {};
    doughnutChart.series.forEach(function (series) {
      var pieSeries = series;
      var id = pieSeries.angleKey;
      if (agGridCommunity._.includes(fieldIds, id)) {
        seriesMap[id] = pieSeries;
      }
    });
    var seriesDefaults = this.iChartOptions.seriesDefaults;
    var fills = seriesDefaults.fill.colors;
    var strokes = seriesDefaults.stroke.colors;
    var numFields = params.fields.length;
    var offset = 0;
    if (this.crossFiltering) {
      params.fields.forEach(function (field, index) {
        var filteredOutField = __assign$h({}, field);
        filteredOutField.colId = field.colId + '-filtered-out';
        params.data.forEach(function (d) {
          d[field.colId + '-total'] = d[field.colId] + d[filteredOutField.colId];
          d[field.colId] = d[field.colId] / d[field.colId + '-total'];
          d[filteredOutField.colId] = 1;
        });
        var _a = _this.updateSeries({
            seriesMap: seriesMap,
            angleField: field,
            field: filteredOutField,
            seriesDefaults: seriesDefaults,
            index: index,
            params: params,
            fills: fills,
            strokes: strokes,
            doughnutChart: doughnutChart,
            offset: offset,
            numFields: numFields,
            opaqueSeries: undefined
          }),
          updatedOffset = _a.updatedOffset,
          pieSeries = _a.pieSeries;
        _this.updateSeries({
          seriesMap: seriesMap,
          angleField: field,
          field: field,
          seriesDefaults: seriesDefaults,
          index: index,
          params: params,
          fills: fills,
          strokes: strokes,
          doughnutChart: doughnutChart,
          offset: offset,
          numFields: numFields,
          opaqueSeries: pieSeries
        });
        offset = updatedOffset;
      });
    } else {
      params.fields.forEach(function (f, index) {
        var updatedOffset = _this.updateSeries({
          seriesMap: seriesMap,
          angleField: f,
          field: f,
          seriesDefaults: seriesDefaults,
          index: index,
          params: params,
          fills: fills,
          strokes: strokes,
          doughnutChart: doughnutChart,
          offset: offset,
          numFields: numFields,
          opaqueSeries: undefined
        }).updatedOffset;
        offset = updatedOffset;
      });
    }
    // Because repaints are automatic, it's important to remove/add/update series at once,
    // so that we don't get painted twice.
    doughnutChart.series = agGridCommunity._.values(seriesMap);
  };
  DoughnutChartProxy.prototype.updateSeries = function (updateParams) {
    var _this = this;
    var existingSeries = updateParams.seriesMap[updateParams.field.colId];
    var seriesOptions = __assign$h(__assign$h({}, updateParams.seriesDefaults), {
      type: 'pie',
      angleKey: this.crossFiltering ? updateParams.angleField.colId + '-total' : updateParams.angleField.colId,
      radiusKey: this.crossFiltering ? updateParams.field.colId : undefined,
      showInLegend: updateParams.index === 0,
      title: __assign$h(__assign$h({}, updateParams.seriesDefaults.title), {
        text: updateParams.seriesDefaults.title.text || updateParams.field.displayName
      }),
      fills: updateParams.seriesDefaults.fill.colors,
      fillOpacity: updateParams.seriesDefaults.fill.opacity,
      strokes: updateParams.seriesDefaults.stroke.colors,
      strokeOpacity: updateParams.seriesDefaults.stroke.opacity,
      strokeWidth: updateParams.seriesDefaults.stroke.width,
      tooltip: {
        enabled: updateParams.seriesDefaults.tooltip && updateParams.seriesDefaults.tooltip.enabled,
        renderer: updateParams.seriesDefaults.tooltip && updateParams.seriesDefaults.tooltip.enabled && updateParams.seriesDefaults.tooltip.renderer || undefined
      }
    });
    var calloutColors = seriesOptions.callout && seriesOptions.callout.colors || seriesOptions.strokes || [];
    var pieSeries = existingSeries || AgChart.createComponent(seriesOptions, 'pie.series');
    if (!existingSeries) {
      if (this.crossFiltering && !pieSeries.tooltip.renderer) {
        // only add renderer if user hasn't provided one
        this.addCrossFilteringTooltipRenderer(pieSeries);
      }
    }
    pieSeries.angleName = updateParams.field.displayName;
    pieSeries.labelKey = updateParams.params.category.id;
    pieSeries.labelName = updateParams.params.category.name;
    pieSeries.data = updateParams.params.data;
    // Normally all series provide legend items for every slice.
    // For our use case, where all series have the same number of slices in the same order with the same labels
    // (all of which can be different in other use cases) we don't want to show repeating labels in the legend,
    // so we only show legend items for the first series, and then when the user toggles the slices of the
    // first series in the legend, we programmatically toggle the corresponding slices of other series.
    if (updateParams.index === 0) {
      pieSeries.toggleSeriesItem = function (itemId, enabled) {
        if (updateParams.doughnutChart) {
          updateParams.doughnutChart.series.forEach(function (series) {
            series.seriesItemEnabled[itemId] = enabled;
          });
        }
        pieSeries.scheduleData();
      };
    }
    if (this.crossFiltering) {
      pieSeries.radiusMin = 0;
      pieSeries.radiusMax = 1;
      var isOpaqueSeries = !updateParams.opaqueSeries;
      if (isOpaqueSeries) {
        pieSeries.fills = updateParams.fills.map(function (fill) {
          return _this.hexToRGBA(fill, '0.3');
        });
        pieSeries.strokes = updateParams.strokes.map(function (stroke) {
          return _this.hexToRGBA(stroke, '0.3');
        });
        pieSeries.showInLegend = false;
      } else {
        updateParams.doughnutChart.legend.addEventListener('click', function (event) {
          if (updateParams.opaqueSeries) {
            updateParams.opaqueSeries.toggleSeriesItem(event.itemId, event.enabled);
          }
        });
        pieSeries.fills = updateParams.fills;
        pieSeries.strokes = updateParams.strokes;
        pieSeries.callout.colors = calloutColors;
      }
      // disable series highlighting by default
      pieSeries.highlightStyle.fill = undefined;
      pieSeries.addEventListener('nodeClick', this.crossFilterCallback);
      updateParams.doughnutChart.tooltip.delay = 500;
    } else {
      pieSeries.fills = updateParams.fills;
      pieSeries.strokes = updateParams.strokes;
      pieSeries.callout.colors = calloutColors;
    }
    var offsetAmount = updateParams.numFields > 1 ? 20 : 40;
    pieSeries.outerRadiusOffset = updateParams.offset;
    updateParams.offset -= offsetAmount;
    pieSeries.innerRadiusOffset = updateParams.offset;
    updateParams.offset -= offsetAmount;
    if (!existingSeries) {
      updateParams.seriesMap[updateParams.field.colId] = pieSeries;
    }
    return {
      updatedOffset: updateParams.offset,
      pieSeries: pieSeries
    };
  };
  DoughnutChartProxy.prototype.extractIChartOptionsFromTheme = function (theme) {
    var options = _super.prototype.extractIChartOptionsFromTheme.call(this, theme);
    var seriesDefaults = theme.getConfig('pie.series.pie');
    options.seriesDefaults = {
      title: seriesDefaults.title,
      label: seriesDefaults.label,
      callout: seriesDefaults.callout,
      shadow: seriesDefaults.shadow,
      tooltip: {
        enabled: seriesDefaults.tooltip && seriesDefaults.tooltip.enabled,
        renderer: seriesDefaults.tooltip && seriesDefaults.tooltip.renderer
      },
      fill: {
        colors: seriesDefaults.fills || theme.palette.fills,
        opacity: seriesDefaults.fillOpacity
      },
      stroke: {
        colors: seriesDefaults.strokes || theme.palette.strokes,
        opacity: seriesDefaults.strokeOpacity,
        width: seriesDefaults.strokeWidth
      },
      lineDash: seriesDefaults.lineDash,
      lineDashOffset: seriesDefaults.lineDashOffset,
      highlightStyle: seriesDefaults.highlightStyle,
      listeners: seriesDefaults.listeners
    };
    return options;
  };
  DoughnutChartProxy.prototype.getDefaultOptions = function () {
    var strokes = this.getPredefinedPalette().strokes;
    var options = this.getDefaultChartOptions();
    var fontOptions = this.getDefaultFontOptions();
    options.seriesDefaults = __assign$h(__assign$h({}, options.seriesDefaults), {
      title: __assign$h(__assign$h({}, fontOptions), {
        enabled: true,
        fontSize: 12,
        fontWeight: 'bold'
      }),
      callout: {
        colors: strokes,
        length: 10,
        strokeWidth: 2
      },
      label: __assign$h(__assign$h({}, fontOptions), {
        enabled: false,
        offset: 3,
        minAngle: 0
      }),
      tooltip: {
        enabled: true
      },
      shadow: this.getDefaultDropShadowOptions()
    });
    return options;
  };
  return DoughnutChartProxy;
}(PolarChartProxy);
var __extends$2q =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$i =  false || function () {
  __assign$i = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$i.apply(this, arguments);
};
var HistogramChartProxy = /** @class */function (_super) {
  __extends$2q(HistogramChartProxy, _super);
  function HistogramChartProxy(params) {
    var _this = _super.call(this, params) || this;
    _this.initChartOptions();
    _this.recreateChart();
    return _this;
  }
  HistogramChartProxy.prototype.createChart = function () {
    var parentElement = this.chartProxyParams.parentElement;
    var seriesDefaults = this.getSeriesDefaults();
    var options = this.iChartOptions;
    var agChartOptions = options;
    agChartOptions.autoSize = true;
    agChartOptions.axes = [__assign$i({
      type: 'number',
      position: 'bottom'
    }, options.xAxis), __assign$i({
      type: 'number',
      position: 'left'
    }, options.yAxis)];
    agChartOptions.series = [__assign$i(__assign$i({}, seriesDefaults), {
      fill: seriesDefaults.fill.colors[0],
      fillOpacity: seriesDefaults.fill.opacity,
      stroke: seriesDefaults.stroke.colors[0],
      strokeOpacity: seriesDefaults.stroke.opacity,
      strokeWidth: seriesDefaults.stroke.width,
      tooltip: {
        enabled: seriesDefaults.tooltip && seriesDefaults.tooltip.enabled,
        renderer: seriesDefaults.tooltip && seriesDefaults.tooltip.enabled && seriesDefaults.tooltip.renderer || undefined
      },
      type: 'histogram'
    })];
    return AgChart.create(agChartOptions, parentElement);
  };
  HistogramChartProxy.prototype.update = function (params) {
    var xField = params.fields[0];
    var chart = this.chart;
    var series = chart.series[0];
    series.data = params.data;
    series.xKey = xField.colId;
    series.xName = xField.displayName;
    // for now, only constant width is supported via integrated charts
    series.areaPlot = false;
    var _a = this.getPalette(),
      fills = _a.fills,
      strokes = _a.strokes;
    series.fill = fills[0];
    series.stroke = strokes[0];
  };
  HistogramChartProxy.prototype.extractIChartOptionsFromTheme = function (theme) {
    var options = _super.prototype.extractIChartOptionsFromTheme.call(this, theme);
    var seriesDefaults = theme.getConfig('histogram.series.histogram');
    options.seriesDefaults = {
      shadow: this.getDefaultDropShadowOptions(),
      label: seriesDefaults.label,
      tooltip: {
        enabled: seriesDefaults.tooltip && seriesDefaults.tooltip.enabled,
        renderer: seriesDefaults.tooltip && seriesDefaults.tooltip.renderer
      },
      fill: {
        colors: seriesDefaults.fill && [seriesDefaults.fill] || theme.palette.fills,
        opacity: seriesDefaults.fillOpacity
      },
      stroke: {
        colors: seriesDefaults.stroke && [seriesDefaults.stroke] || theme.palette.strokes,
        opacity: seriesDefaults.strokeOpacity,
        width: seriesDefaults.strokeWidth
      },
      lineDash: seriesDefaults.lineDash ? seriesDefaults.lineDash : [0],
      lineDashOffset: seriesDefaults.lineDashOffset,
      highlightStyle: seriesDefaults.highlightStyle,
      listeners: seriesDefaults.listeners,
      binCount: seriesDefaults.binCount,
      bins: seriesDefaults.bins
    };
    return options;
  };
  HistogramChartProxy.prototype.getSeriesDefaults = function () {
    return __assign$i({}, this.iChartOptions.seriesDefaults);
  };
  // TODO: should be removed along with processChartOptions()
  HistogramChartProxy.prototype.getDefaultOptions = function () {
    var fontOptions = this.getDefaultFontOptions();
    var options = this.getDefaultCartesianChartOptions();
    options.xAxis.label.rotation = 0;
    options.yAxis.label.rotation = 0;
    options.seriesDefaults = __assign$i(__assign$i({}, options.seriesDefaults), {
      tooltip: {
        enabled: true
      },
      label: __assign$i(__assign$i({}, fontOptions), {
        enabled: false
      }),
      shadow: this.getDefaultDropShadowOptions(),
      binCount: 10
    });
    return options;
  };
  return HistogramChartProxy;
}(CartesianChartProxy);
var __extends$2r =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1g =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var GridChartComp = /** @class */function (_super) {
  __extends$2r(GridChartComp, _super);
  function GridChartComp(params) {
    var _this = _super.call(this, GridChartComp.TEMPLATE) || this;
    _this.params = params;
    return _this;
  }
  GridChartComp.prototype.init = function () {
    var availableChartThemes = this.gridOptionsWrapper.getChartThemes();
    if (availableChartThemes.length < 1) {
      throw new Error('Cannot create chart: no chart themes are available to be used.');
    }
    var chartThemeName = this.params.chartThemeName;
    if (!agGridCommunity._.includes(availableChartThemes, chartThemeName)) {
      chartThemeName = availableChartThemes[0];
    }
    var modelParams = {
      pivotChart: this.params.pivotChart,
      chartType: this.params.chartType,
      chartThemeName: chartThemeName,
      aggFunc: this.params.aggFunc,
      cellRange: this.params.cellRange,
      suppressChartRanges: this.params.suppressChartRanges,
      unlinkChart: this.params.unlinkChart,
      crossFiltering: this.params.crossFiltering
    };
    var isRtl = this.gridOptionsWrapper.isEnableRtl();
    agGridCommunity._.addCssClass(this.getGui(), isRtl ? 'ag-rtl' : 'ag-ltr');
    this.model = this.createBean(new ChartDataModel(modelParams));
    this.chartController = this.createManagedBean(new ChartController(this.model));
    this.validateCustomThemes();
    // create chart before dialog to ensure dialog is correct size
    this.createChart();
    // TODO should be removed along with processChartOptions()
    this.params.processChartOptions = undefined;
    if (this.params.insideDialog) {
      this.addDialog();
    }
    this.addMenu();
    this.addTitleEditComp();
    this.addManagedListener(this.getGui(), 'focusin', this.setActiveChartCellRange.bind(this));
    this.addManagedListener(this.chartController, ChartController.EVENT_CHART_UPDATED, this.refresh.bind(this));
    if (this.chartMenu) {
      // chart menu may not exist, i.e. cross filtering
      this.addManagedListener(this.chartMenu, ChartMenu.EVENT_DOWNLOAD_CHART, this.downloadChart.bind(this));
    }
    this.refresh();
    this.raiseChartCreatedEvent();
  };
  GridChartComp.prototype.validateCustomThemes = function () {
    var suppliedThemes = this.gridOptionsWrapper.getChartThemes();
    var customChartThemes = this.gridOptionsWrapper.getCustomChartThemes();
    if (customChartThemes) {
      agGridCommunity._.getAllKeysInObjects([customChartThemes]).forEach(function (customThemeName) {
        if (!agGridCommunity._.includes(suppliedThemes, customThemeName)) {
          console.warn("AG Grid: a custom chart theme with the name '" + customThemeName + "' has been " + "supplied but not added to the 'chartThemes' list");
        }
      });
    }
  };
  GridChartComp.prototype.createChart = function () {
    var _this = this;
    var width, height;
    // if chart already exists, destroy it and remove it from DOM
    if (this.chartProxy) {
      var chart = this.chartProxy.getChart();
      if (chart) {
        // preserve existing width/height
        width = chart.width;
        height = chart.height;
      }
      this.chartProxy.destroy();
    }
    var processChartOptionsFunc = this.params.processChartOptions || this.gridOptionsWrapper.getProcessChartOptionsFunc();
    var customChartThemes = this.gridOptionsWrapper.getCustomChartThemes();
    var chartType = this.model.getChartType();
    var isGrouping = this.model.isGrouping();
    var crossFilterCallback = function (event, reset) {
      var ctx = _this.params.crossFilteringContext;
      ctx.lastSelectedChartId = reset ? '' : _this.model.getChartId();
      _this.crossFilter.filter(event, reset);
    };
    var chartProxyParams = {
      chartId: this.model.getChartId(),
      chartType: chartType,
      chartThemeName: this.model.getChartThemeName(),
      processChartOptions: processChartOptionsFunc,
      getChartThemeName: this.getChartThemeName.bind(this),
      getChartThemes: this.getChartThemes.bind(this),
      customChartThemes: customChartThemes,
      getGridOptionsChartThemeOverrides: this.getGridOptionsChartThemeOverrides.bind(this),
      apiChartThemeOverrides: this.params.chartThemeOverrides,
      allowPaletteOverride: !this.params.chartThemeName,
      isDarkTheme: this.environment.isThemeDark.bind(this.environment),
      crossFiltering: this.params.crossFiltering,
      crossFilterCallback: crossFilterCallback,
      parentElement: this.eChart,
      width: width,
      height: height,
      grouping: isGrouping,
      document: this.gridOptionsWrapper.getDocument(),
      eventService: this.eventService,
      gridApi: this.gridApi,
      columnApi: this.columnApi
    };
    // set local state used to detect when chart changes
    this.chartType = chartType;
    this.chartThemeName = this.model.getChartThemeName();
    this.chartProxy = GridChartComp.createChartProxy(chartProxyParams);
    if (!this.chartProxy) {
      console.warn('AG Grid: invalid chart type supplied: ', chartProxyParams.chartType);
      return;
    }
    this.titleEdit && this.titleEdit.setChartProxy(this.chartProxy);
    var canvas = this.eChart.querySelector('canvas');
    if (canvas) {
      agGridCommunity._.addCssClass(canvas, 'ag-charts-canvas');
    }
    this.chartController.setChartProxy(this.chartProxy);
  };
  GridChartComp.prototype.getChartThemeName = function () {
    return this.chartController.getThemeName();
  };
  GridChartComp.prototype.getChartThemes = function () {
    return this.chartController.getThemes();
  };
  GridChartComp.prototype.getGridOptionsChartThemeOverrides = function () {
    return this.gridOptionsWrapper.getChartThemeOverrides();
  };
  GridChartComp.createChartProxy = function (chartProxyParams) {
    switch (chartProxyParams.chartType) {
      case agGridCommunity.ChartType.Column:
      case agGridCommunity.ChartType.Bar:
      case agGridCommunity.ChartType.GroupedColumn:
      case agGridCommunity.ChartType.StackedColumn:
      case agGridCommunity.ChartType.NormalizedColumn:
      case agGridCommunity.ChartType.GroupedBar:
      case agGridCommunity.ChartType.StackedBar:
      case agGridCommunity.ChartType.NormalizedBar:
        return new BarChartProxy(chartProxyParams);
      case agGridCommunity.ChartType.Pie:
        return new PieChartProxy(chartProxyParams);
      case agGridCommunity.ChartType.Doughnut:
        return new DoughnutChartProxy(chartProxyParams);
      case agGridCommunity.ChartType.Area:
      case agGridCommunity.ChartType.StackedArea:
      case agGridCommunity.ChartType.NormalizedArea:
        return new AreaChartProxy(chartProxyParams);
      case agGridCommunity.ChartType.Line:
        return new LineChartProxy(chartProxyParams);
      case agGridCommunity.ChartType.Scatter:
      case agGridCommunity.ChartType.Bubble:
        return new ScatterChartProxy(chartProxyParams);
      case agGridCommunity.ChartType.Histogram:
        return new HistogramChartProxy(chartProxyParams);
    }
  };
  GridChartComp.prototype.addDialog = function () {
    var _this = this;
    var title = this.chartTranslator.translate(this.params.pivotChart ? 'pivotChartTitle' : 'rangeChartTitle');
    var _a = this.getBestDialogSize(),
      width = _a.width,
      height = _a.height;
    this.chartDialog = new agGridCommunity.AgDialog({
      resizable: true,
      movable: true,
      maximizable: true,
      title: title,
      width: width,
      height: height,
      component: this,
      centered: true,
      closable: true
    });
    this.getContext().createBean(this.chartDialog);
    this.chartDialog.addEventListener(agGridCommunity.AgDialog.EVENT_DESTROYED, function () {
      return _this.destroy();
    });
  };
  GridChartComp.prototype.getBestDialogSize = function () {
    var popupParent = this.popupService.getPopupParent();
    var maxWidth = agGridCommunity._.getAbsoluteWidth(popupParent) * 0.75;
    var maxHeight = agGridCommunity._.getAbsoluteHeight(popupParent) * 0.75;
    var ratio = 0.553;
    var _a = this.chartProxy.getChartOptions(),
      width = _a.width,
      height = _a.height;
    if (width && height) {
      return {
        width: width,
        height: height
      };
    }
    var chart = this.chartProxy.getChart();
    width = this.params.insideDialog ? 850 : chart.width;
    height = this.params.insideDialog ? 470 : chart.height;
    if (width > maxWidth || height > maxHeight) {
      width = Math.min(width, maxWidth);
      height = Math.round(width * ratio);
      if (height > maxHeight) {
        height = maxHeight;
        width = Math.min(width, Math.round(height / ratio));
      }
    }
    return {
      width: width,
      height: height
    };
  };
  GridChartComp.prototype.addMenu = function () {
    if (!this.params.crossFiltering) {
      this.chartMenu = this.createBean(new ChartMenu(this.eChartContainer, this.eMenuContainer, this.chartController));
      this.eChartContainer.appendChild(this.chartMenu.getGui());
    }
  };
  GridChartComp.prototype.addTitleEditComp = function () {
    this.titleEdit = this.createBean(new TitleEdit(this.chartMenu));
    this.eTitleEditContainer.appendChild(this.titleEdit.getGui());
    if (this.chartProxy) {
      this.titleEdit.setChartProxy(this.chartProxy);
    }
  };
  GridChartComp.prototype.refresh = function () {
    if (this.shouldRecreateChart()) {
      this.createChart();
    }
    this.updateChart();
  };
  GridChartComp.prototype.shouldRecreateChart = function () {
    return this.chartType !== this.model.getChartType() || this.chartThemeName !== this.model.getChartThemeName();
  };
  GridChartComp.prototype.getCurrentChartType = function () {
    return this.chartType;
  };
  GridChartComp.prototype.getChartModel = function () {
    return this.chartController.getChartModel();
  };
  GridChartComp.prototype.updateChart = function () {
    var _this = this;
    var _a = this,
      model = _a.model,
      chartProxy = _a.chartProxy;
    var selectedCols = model.getSelectedValueColState();
    var fields = selectedCols.map(function (c) {
      return {
        colId: c.colId,
        displayName: c.displayName
      };
    });
    var data = model.getData();
    var chartEmpty = this.handleEmptyChart(data, fields);
    if (chartEmpty) {
      return;
    }
    var selectedDimension = model.getSelectedDimension();
    var chartUpdateParams = {
      data: data,
      grouping: model.isGrouping(),
      category: {
        id: selectedDimension.colId,
        name: selectedDimension.displayName,
        chartDataType: this.getChartDataType(selectedDimension.colId)
      },
      fields: fields,
      chartId: this.model.getChartId(),
      getCrossFilteringContext: function () {
        return _this.params.crossFilteringContext;
      }
    };
    chartProxy.update(chartUpdateParams);
    this.titleEdit.setChartProxy(this.chartProxy);
  };
  GridChartComp.prototype.getChartDataType = function (colId) {
    var column = this.columnController.getPrimaryColumn(colId);
    return column ? column.getColDef().chartDataType : undefined;
  };
  GridChartComp.prototype.handleEmptyChart = function (data, fields) {
    var container = this.chartProxy.getChart().container;
    var pivotModeDisabled = this.model.isPivotChart() && !this.model.isPivotMode();
    var minFieldsRequired = 1;
    if (this.chartController.isActiveXYChart()) {
      minFieldsRequired = this.model.getChartType() === agGridCommunity.ChartType.Bubble ? 3 : 2;
    }
    var isEmptyChart = fields.length < minFieldsRequired || data.length === 0;
    if (container) {
      var isEmpty = pivotModeDisabled || isEmptyChart;
      agGridCommunity._.setDisplayed(this.eChart, !isEmpty);
      agGridCommunity._.setDisplayed(this.eEmpty, isEmpty);
    }
    if (pivotModeDisabled) {
      this.eEmpty.innerText = this.chartTranslator.translate('pivotChartRequiresPivotMode');
      return true;
    }
    if (isEmptyChart) {
      this.eEmpty.innerText = this.chartTranslator.translate('noDataToChart');
      return true;
    }
    return false;
  };
  GridChartComp.prototype.downloadChart = function () {
    this.chartProxy.downloadChart();
  };
  GridChartComp.prototype.getUnderlyingChart = function () {
    return this.chartProxy.getChart();
  };
  GridChartComp.prototype.refreshCanvasSize = function () {
    if (!this.params.insideDialog) {
      return;
    }
    var _a = this,
      chartProxy = _a.chartProxy,
      eChart = _a.eChart;
    if (this.chartMenu.isVisible()) {
      // we don't want the menu showing to affect the chart options
      var chart = this.chartProxy.getChart();
      chart.height = agGridCommunity._.getInnerHeight(eChart);
      chart.width = agGridCommunity._.getInnerWidth(eChart);
    } else {
      chartProxy.setChartOption('width', agGridCommunity._.getInnerWidth(eChart));
      chartProxy.setChartOption('height', agGridCommunity._.getInnerHeight(eChart));
    }
  };
  GridChartComp.prototype.setActiveChartCellRange = function (focusEvent) {
    if (this.getGui().contains(focusEvent.relatedTarget)) {
      return;
    }
    this.chartController.setChartRange(true);
    this.gridApi.focusController.clearFocusedCell();
  };
  GridChartComp.prototype.raiseChartCreatedEvent = function () {
    var chartModel = this.chartController.getChartModel();
    var event = Object.freeze({
      type: agGridCommunity.Events.EVENT_CHART_CREATED,
      chartId: chartModel.chartId,
      chartModel: chartModel,
      api: this.gridApi,
      columnApi: this.columnApi
    });
    this.eventService.dispatchEvent(event);
  };
  GridChartComp.prototype.raiseChartDestroyedEvent = function () {
    var event = Object.freeze({
      type: agGridCommunity.Events.EVENT_CHART_DESTROYED,
      chartId: this.model.getChartId(),
      api: this.gridApi,
      columnApi: this.columnApi
    });
    this.eventService.dispatchEvent(event);
  };
  GridChartComp.prototype.destroy = function () {
    _super.prototype.destroy.call(this);
    if (this.chartProxy) {
      this.chartProxy.destroy();
    }
    this.destroyBean(this.chartMenu);
    // don't want to invoke destroy() on the Dialog (prevents destroy loop)
    if (this.chartDialog && this.chartDialog.isAlive()) {
      this.destroyBean(this.chartDialog);
    }
    // if the user is providing containers for the charts, we need to clean up, otherwise the old chart
    // data will still be visible although the chart is no longer bound to the grid
    var eGui = this.getGui();
    agGridCommunity._.clearElement(eGui);
    // remove from parent, so if user provided container, we detach from the provided dom element
    agGridCommunity._.removeFromParent(eGui);
    this.raiseChartDestroyedEvent();
  };
  GridChartComp.TEMPLATE = "<div class=\"ag-chart\" tabindex=\"-1\">\n            <div ref=\"eChartContainer\" tabindex=\"-1\" class=\"ag-chart-components-wrapper\">\n                <div ref=\"eChart\" class=\"ag-chart-canvas-wrapper\"></div>\n                <div ref=\"eEmpty\" class=\"ag-chart-empty-text ag-unselectable\"></div>\n            </div>\n            <div ref=\"eTitleEditContainer\"></div>\n            <div ref=\"eMenuContainer\" class=\"ag-chart-docked-container\"></div>\n        </div>";
  __decorate$1g([agGridCommunity.RefSelector('eChart')], GridChartComp.prototype, "eChart", void 0);
  __decorate$1g([agGridCommunity.RefSelector('eChartContainer')], GridChartComp.prototype, "eChartContainer", void 0);
  __decorate$1g([agGridCommunity.RefSelector('eMenuContainer')], GridChartComp.prototype, "eMenuContainer", void 0);
  __decorate$1g([agGridCommunity.RefSelector('eEmpty')], GridChartComp.prototype, "eEmpty", void 0);
  __decorate$1g([agGridCommunity.RefSelector('eTitleEditContainer')], GridChartComp.prototype, "eTitleEditContainer", void 0);
  __decorate$1g([agGridCommunity.Autowired('environment')], GridChartComp.prototype, "environment", void 0);
  __decorate$1g([agGridCommunity.Autowired('chartTranslator')], GridChartComp.prototype, "chartTranslator", void 0);
  __decorate$1g([agGridCommunity.Autowired('columnController')], GridChartComp.prototype, "columnController", void 0);
  __decorate$1g([agGridCommunity.Autowired('chartCrossFilter')], GridChartComp.prototype, "crossFilter", void 0);
  __decorate$1g([agGridCommunity.Autowired('gridApi')], GridChartComp.prototype, "gridApi", void 0);
  __decorate$1g([agGridCommunity.Autowired('columnApi')], GridChartComp.prototype, "columnApi", void 0);
  __decorate$1g([agGridCommunity.Autowired('popupService')], GridChartComp.prototype, "popupService", void 0);
  __decorate$1g([agGridCommunity.PostConstruct], GridChartComp.prototype, "init", null);
  return GridChartComp;
}(agGridCommunity.Component);
var __extends$2s =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1h =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ChartService = /** @class */function (_super) {
  __extends$2s(ChartService, _super);
  function ChartService() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    // we destroy all charts bound to this grid when grid is destroyed. activeCharts contains all charts, including
    // those in developer provided containers.
    _this.activeCharts = new Set();
    _this.activeChartComps = new Set();
    // this shared (singleton) context is used by cross filtering in line and area charts
    _this.crossFilteringContext = {
      lastSelectedChartId: ''
    };
    return _this;
  }
  ChartService.prototype.getChartModels = function () {
    var models = [];
    this.activeChartComps.forEach(function (c) {
      return models.push(c.getChartModel());
    });
    return models;
  };
  ChartService.prototype.createChartFromCurrentRange = function (chartType) {
    if (chartType === void 0) {
      chartType = agGridCommunity.ChartType.GroupedColumn;
    }
    var selectedRange = this.getSelectedRange();
    return this.createChart(selectedRange, chartType);
  };
  ChartService.prototype.restoreChart = function (model, chartContainer) {
    if (!model) {
      console.warn("AG Grid - unable to restore chart as no chart model is provided");
      return;
    }
    if (model.modelType && model.modelType === 'pivot') {
      return this.createPivotChart(this.mapToPivotParams(model, chartContainer));
    }
    return this.createRangeChart(this.mapToRangeParam(model, chartContainer));
  };
  ChartService.prototype.createRangeChart = function (params) {
    var cellRange = this.rangeController ? this.rangeController.createCellRangeFromCellRangeParams(params.cellRange) : undefined;
    if (!cellRange) {
      console.warn("AG Grid - unable to create chart as no range is selected");
      return;
    }
    return this.createChart(cellRange, params.chartType, params.chartThemeName, false, params.suppressChartRanges, params.chartContainer, params.aggFunc, params.chartThemeOverrides, params.unlinkChart, params.processChartOptions);
  };
  ChartService.prototype.createPivotChart = function (params) {
    // if required enter pivot mode
    if (!this.columnController.isPivotMode()) {
      this.columnController.setPivotMode(true, "pivotChart");
    }
    // pivot chart range contains all visible column without a row range to include all rows
    var chartAllRangeParams = {
      rowStartIndex: null,
      rowEndIndex: null,
      columns: this.columnController.getAllDisplayedColumns().map(function (col) {
        return col.getColId();
      })
    };
    var cellRange = this.rangeController ? this.rangeController.createCellRangeFromCellRangeParams(chartAllRangeParams) : undefined;
    if (!cellRange) {
      console.warn("AG Grid - unable to create chart as there are no columns in the grid.");
      return;
    }
    return this.createChart(cellRange, params.chartType, params.chartThemeName, true, true, params.chartContainer, undefined, params.chartThemeOverrides, params.unlinkChart, params.processChartOptions);
  };
  ChartService.prototype.createCrossFilterChart = function (params) {
    var cellRange = this.rangeController ? this.rangeController.createCellRangeFromCellRangeParams(params.cellRange) : undefined;
    if (!cellRange) {
      console.warn("AG Grid - unable to create chart as no range is selected");
      return;
    }
    var crossFiltering = true;
    var suppressChartRangesSupplied = typeof params.suppressChartRanges !== 'undefined' && params.suppressChartRanges !== null;
    var suppressChartRanges = suppressChartRangesSupplied ? params.suppressChartRanges : true;
    return this.createChart(cellRange, params.chartType, params.chartThemeName, false, suppressChartRanges, params.chartContainer, params.aggFunc, params.chartThemeOverrides, params.unlinkChart, undefined, crossFiltering);
  };
  ChartService.prototype.createChart = function (cellRange, chartType, chartThemeName, pivotChart, suppressChartRanges, container, aggFunc, chartThemeOverrides, unlinkChart, processChartOptions, crossFiltering) {
    var _this = this;
    if (pivotChart === void 0) {
      pivotChart = false;
    }
    if (suppressChartRanges === void 0) {
      suppressChartRanges = false;
    }
    if (unlinkChart === void 0) {
      unlinkChart = false;
    }
    if (crossFiltering === void 0) {
      crossFiltering = false;
    }
    var createChartContainerFunc = this.gridOptionsWrapper.getCreateChartContainerFunc();
    var params = {
      pivotChart: pivotChart,
      cellRange: cellRange,
      chartType: chartType,
      chartThemeName: chartThemeName,
      insideDialog: !(container || createChartContainerFunc),
      suppressChartRanges: suppressChartRanges,
      aggFunc: aggFunc,
      chartThemeOverrides: chartThemeOverrides,
      processChartOptions: processChartOptions,
      unlinkChart: unlinkChart,
      crossFiltering: crossFiltering,
      crossFilteringContext: this.crossFilteringContext
    };
    var chartComp = new GridChartComp(params);
    this.context.createBean(chartComp);
    var chartRef = this.createChartRef(chartComp);
    if (container) {
      // if container exists, means developer initiated chart create via API, so place in provided container
      container.appendChild(chartComp.getGui());
      // if the chart container was placed outside of an element that
      // has the grid's theme, we manually add the current theme to
      // make sure all styles for the chartMenu are rendered correctly
      var theme = this.environment.getTheme();
      if (theme.el && !theme.el.contains(container)) {
        agGridCommunity._.addCssClass(container, theme.theme);
      }
    } else if (createChartContainerFunc) {
      // otherwise user created chart via grid UI, check if developer provides containers (eg if the application
      // is using its own dialogs rather than the grid provided dialogs)
      createChartContainerFunc(chartRef);
    } else {
      // add listener to remove from active charts list when charts are destroyed, e.g. closing chart dialog
      chartComp.addEventListener(GridChartComp.EVENT_DESTROYED, function () {
        _this.activeChartComps.delete(chartComp);
        _this.activeCharts.delete(chartRef);
      });
    }
    return chartRef;
  };
  ChartService.prototype.createChartRef = function (chartComp) {
    var _this = this;
    var chartRef = {
      destroyChart: function () {
        if (_this.activeCharts.has(chartRef)) {
          _this.context.destroyBean(chartComp);
          _this.activeChartComps.delete(chartComp);
          _this.activeCharts.delete(chartRef);
        }
      },
      chartElement: chartComp.getGui(),
      chart: chartComp.getUnderlyingChart()
    };
    this.activeCharts.add(chartRef);
    this.activeChartComps.add(chartComp);
    return chartRef;
  };
  ChartService.prototype.getSelectedRange = function () {
    var ranges = this.rangeController.getCellRanges();
    return ranges.length > 0 ? ranges[0] : {};
  };
  ChartService.prototype.mapToRangeParam = function (model, chartContainer) {
    return {
      cellRange: model.cellRange,
      chartType: model.chartType,
      chartThemeName: model.chartThemeName,
      chartContainer: chartContainer,
      suppressChartRanges: model.suppressChartRanges,
      aggFunc: model.aggFunc,
      unlinkChart: model.unlinkChart,
      processChartOptions: function () {
        return model.chartOptions;
      }
    };
  };
  ChartService.prototype.mapToPivotParams = function (model, chartContainer) {
    return {
      chartType: model.chartType,
      chartThemeName: model.chartThemeName,
      chartContainer: chartContainer,
      unlinkChart: model.unlinkChart,
      processChartOptions: function () {
        return model.chartOptions;
      }
    };
  };
  ChartService.prototype.destroyAllActiveCharts = function () {
    this.activeCharts.forEach(function (chart) {
      return chart.destroyChart();
    });
  };
  __decorate$1h([agGridCommunity.Optional('rangeController')], ChartService.prototype, "rangeController", void 0);
  __decorate$1h([agGridCommunity.Autowired('columnController')], ChartService.prototype, "columnController", void 0);
  __decorate$1h([agGridCommunity.Autowired('environment')], ChartService.prototype, "environment", void 0);
  __decorate$1h([agGridCommunity.PreDestroy], ChartService.prototype, "destroyAllActiveCharts", null);
  ChartService = __decorate$1h([agGridCommunity.Bean('chartService')], ChartService);
  return ChartService;
}(agGridCommunity.BeanStub);
var __extends$2t =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1i =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ChartTranslator = /** @class */function (_super) {
  __extends$2t(ChartTranslator, _super);
  function ChartTranslator() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ChartTranslator_1 = ChartTranslator;
  ChartTranslator.prototype.translate = function (toTranslate) {
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    var defaultTranslation = ChartTranslator_1.DEFAULT_TRANSLATIONS[toTranslate];
    return translate(toTranslate, defaultTranslation);
  };
  var ChartTranslator_1;
  ChartTranslator.DEFAULT_TRANSLATIONS = {
    pivotChartTitle: 'Pivot Chart',
    rangeChartTitle: 'Range Chart',
    settings: 'Settings',
    data: 'Data',
    format: 'Format',
    categories: 'Categories',
    defaultCategory: '(None)',
    series: 'Series',
    xyValues: 'X Y Values',
    paired: 'Paired Mode',
    axis: 'Axis',
    navigator: 'Navigator',
    color: 'Color',
    thickness: 'Thickness',
    xType: 'X Type',
    automatic: 'Automatic',
    category: 'Category',
    number: 'Number',
    time: 'Time',
    xRotation: 'X Rotation',
    yRotation: 'Y Rotation',
    ticks: 'Ticks',
    width: 'Width',
    height: 'Height',
    length: 'Length',
    padding: 'Padding',
    spacing: 'Spacing',
    chart: 'Chart',
    title: 'Title',
    titlePlaceholder: 'Chart title - double click to edit',
    background: 'Background',
    font: 'Font',
    top: 'Top',
    right: 'Right',
    bottom: 'Bottom',
    left: 'Left',
    labels: 'Labels',
    size: 'Size',
    shape: 'Shape',
    minSize: 'Minimum Size',
    maxSize: 'Maximum Size',
    legend: 'Legend',
    position: 'Position',
    markerSize: 'Marker Size',
    markerStroke: 'Marker Stroke',
    markerPadding: 'Marker Padding',
    itemSpacing: 'Item Spacing',
    itemPaddingX: 'Item Padding X',
    itemPaddingY: 'Item Padding Y',
    layoutHorizontalSpacing: 'Horizontal Spacing',
    layoutVerticalSpacing: 'Vertical Spacing',
    strokeWidth: 'Stroke Width',
    offset: 'Offset',
    offsets: 'Offsets',
    tooltips: 'Tooltips',
    callout: 'Callout',
    markers: 'Markers',
    shadow: 'Shadow',
    blur: 'Blur',
    xOffset: 'X Offset',
    yOffset: 'Y Offset',
    lineWidth: 'Line Width',
    lineDash: 'Line Dash',
    normal: 'Normal',
    bold: 'Bold',
    italic: 'Italic',
    boldItalic: 'Bold Italic',
    predefined: 'Predefined',
    fillOpacity: 'Fill Opacity',
    strokeOpacity: 'Line Opacity',
    histogramBinCount: 'Bin count',
    columnGroup: 'Column',
    barGroup: 'Bar',
    pieGroup: 'Pie',
    lineGroup: 'Line',
    scatterGroup: 'X Y (Scatter)',
    areaGroup: 'Area',
    histogramGroup: 'Histogram',
    groupedColumnTooltip: 'Grouped',
    stackedColumnTooltip: 'Stacked',
    normalizedColumnTooltip: '100% Stacked',
    groupedBarTooltip: 'Grouped',
    stackedBarTooltip: 'Stacked',
    normalizedBarTooltip: '100% Stacked',
    pieTooltip: 'Pie',
    doughnutTooltip: 'Doughnut',
    lineTooltip: 'Line',
    groupedAreaTooltip: 'Area',
    stackedAreaTooltip: 'Stacked',
    normalizedAreaTooltip: '100% Stacked',
    scatterTooltip: 'Scatter',
    bubbleTooltip: 'Bubble',
    histogramTooltip: 'Histogram',
    noDataToChart: 'No data available to be charted.',
    pivotChartRequiresPivotMode: 'Pivot Chart requires Pivot Mode enabled.',
    chartSettingsToolbarTooltip: 'Menu',
    chartLinkToolbarTooltip: 'Linked to Grid',
    chartUnlinkToolbarTooltip: 'Unlinked from Grid',
    chartDownloadToolbarTooltip: 'Download Chart'
  };
  ChartTranslator = ChartTranslator_1 = __decorate$1i([agGridCommunity.Bean("chartTranslator")], ChartTranslator);
  return ChartTranslator;
}(agGridCommunity.BeanStub);
var __extends$2u =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1j =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ChartCrossFilter = /** @class */function (_super) {
  __extends$2u(ChartCrossFilter, _super);
  function ChartCrossFilter() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ChartCrossFilter_1 = ChartCrossFilter;
  ChartCrossFilter.prototype.filter = function (event, reset) {
    if (reset === void 0) {
      reset = false;
    }
    var filterModel = this.gridApi.getFilterModel();
    // filters should be reset when user clicks on canvas background
    if (reset) {
      this.resetFilters(filterModel);
      return;
    }
    var colId = ChartCrossFilter_1.extractFilterColId(event);
    if (this.isValidColumnFilter(colId)) {
      // update filters based on current chart selections
      this.updateFilters(filterModel, event);
    } else {
      console.warn("AG Grid: cross filtering requires a 'agSetColumnFilter' or 'agMultiColumnFilter' " + "to be defined on the column with id: '" + colId + "'");
    }
  };
  ChartCrossFilter.prototype.resetFilters = function (filterModel) {
    var filtersExist = Object.keys(filterModel).length > 0;
    if (filtersExist) {
      // only reset filters / charts when necessary to prevent undesirable flickering effect
      this.gridApi.setFilterModel(null);
      this.gridApi.onFilterChanged();
    }
  };
  ChartCrossFilter.prototype.updateFilters = function (filterModel, event) {
    var _a;
    var dataKey = ChartCrossFilter_1.extractFilterColId(event);
    var rawValue = event.datum[dataKey];
    if (rawValue === undefined) {
      return;
    }
    var selectedValue = rawValue.toString();
    var filterColId = dataKey.replace('-filtered-out', '');
    if (event.event.metaKey || event.event.ctrlKey) {
      var existingGridValues = this.getCurrentGridValuesForCategory(filterColId);
      var valueAlreadyExists = agGridCommunity._.includes(existingGridValues, selectedValue);
      var updatedValues = void 0;
      if (valueAlreadyExists) {
        updatedValues = existingGridValues.filter(function (v) {
          return v !== selectedValue;
        });
      } else {
        updatedValues = existingGridValues;
        updatedValues.push(selectedValue);
      }
      filterModel[filterColId] = this.getUpdatedFilterModel(filterColId, updatedValues);
    } else {
      var updatedValues = [selectedValue];
      filterModel = (_a = {}, _a[filterColId] = this.getUpdatedFilterModel(filterColId, updatedValues), _a);
    }
    this.gridApi.setFilterModel(filterModel);
  };
  ChartCrossFilter.prototype.getUpdatedFilterModel = function (colId, updatedValues) {
    var columnFilterType = this.getColumnFilterType(colId);
    if (columnFilterType === 'agMultiColumnFilter') {
      return {
        filterType: 'multi',
        filterModels: [null, {
          filterType: 'set',
          values: updatedValues
        }]
      };
    }
    return {
      filterType: 'set',
      values: updatedValues
    };
  };
  ChartCrossFilter.prototype.getCurrentGridValuesForCategory = function (dataKey) {
    var filteredValues = [];
    var gridContainsValue = agGridCommunity._.includes;
    this.gridApi.forEachNodeAfterFilter(function (rowNode) {
      if (!rowNode.group) {
        var value = rowNode.data[dataKey] + '';
        if (!gridContainsValue(filteredValues, value)) {
          filteredValues.push(value);
        }
      }
    });
    return filteredValues;
  };
  ChartCrossFilter.extractFilterColId = function (event) {
    return event.xKey ? event.xKey : event.labelKey;
  };
  ChartCrossFilter.prototype.isValidColumnFilter = function (colId) {
    if (colId.indexOf('-filtered-out')) {
      colId = colId.replace('-filtered-out', '');
    }
    var filterType = this.getColumnFilterType(colId);
    if (typeof filterType === 'boolean') {
      return filterType;
    }
    return agGridCommunity._.includes(['agSetColumnFilter', 'agMultiColumnFilter'], filterType);
  };
  ChartCrossFilter.prototype.getColumnFilterType = function (colId) {
    var gridColumn = this.columnController.getGridColumn(colId);
    return gridColumn ? gridColumn.getColDef().filter : undefined;
  };
  var ChartCrossFilter_1;
  __decorate$1j([agGridCommunity.Autowired('gridApi')], ChartCrossFilter.prototype, "gridApi", void 0);
  __decorate$1j([agGridCommunity.Autowired('columnController')], ChartCrossFilter.prototype, "columnController", void 0);
  ChartCrossFilter = ChartCrossFilter_1 = __decorate$1j([agGridCommunity.Bean("chartCrossFilter")], ChartCrossFilter);
  return ChartCrossFilter;
}(agGridCommunity.BeanStub);
var __extends$2v =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1k =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __spreadArrays$9 =  false || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
};
var RangeController = /** @class */function (_super) {
  __extends$2v(RangeController, _super);
  function RangeController() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.cellRanges = [];
    _this.bodyScrollListener = _this.onBodyScroll.bind(_this);
    _this.dragging = false;
    return _this;
  }
  RangeController.prototype.registerGridComp = function (gridBodyComp) {
    this.gridBodyComp = gridBodyComp;
  };
  RangeController.prototype.init = function () {
    var _this = this;
    this.logger = this.loggerFactory.create('RangeController');
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_NEW_COLUMNS_LOADED, this.removeAllCellRanges.bind(this));
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.removeAllCellRanges.bind(this));
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.removeAllCellRanges.bind(this));
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_COLUMN_PIVOT_CHANGED, this.removeAllCellRanges.bind(this));
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_COLUMN_GROUP_OPENED, this.refreshLastRangeStart.bind(this));
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_COLUMN_MOVED, this.refreshLastRangeStart.bind(this));
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_COLUMN_PINNED, this.refreshLastRangeStart.bind(this));
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_COLUMN_VISIBLE, this.onColumnVisibleChange.bind(this));
    this.controllersService.whenReady(function () {
      var gridBodyCon = _this.controllersService.getGridBodyController();
      _this.autoScrollService = new AutoScrollService(gridBodyCon, _this.gridOptionsWrapper);
    });
  };
  RangeController.prototype.onColumnVisibleChange = function () {
    var _this = this;
    // first move start column in last cell range (i.e. series chart range)
    this.refreshLastRangeStart();
    // then check if the column visibility has changed in any cell range
    this.cellRanges.forEach(function (cellRange) {
      var beforeCols = cellRange.columns;
      // remove hidden cols from cell range
      cellRange.columns = cellRange.columns.filter(function (col) {
        return col.isVisible();
      });
      var colsInRangeChanged = !agGridCommunity._.areEqual(beforeCols, cellRange.columns);
      if (colsInRangeChanged) {
        // notify users and other parts of grid (i.e. status panel) that range has changed
        _this.dispatchChangedEvent(false, true, cellRange.id);
      }
    });
  };
  RangeController.prototype.refreshLastRangeStart = function () {
    var lastRange = agGridCommunity._.last(this.cellRanges);
    if (!lastRange) {
      return;
    }
    this.refreshRangeStart(lastRange);
  };
  RangeController.prototype.isContiguousRange = function (cellRange) {
    var rangeColumns = cellRange.columns;
    if (!rangeColumns.length) {
      return false;
    }
    var allColumns = this.columnController.getAllDisplayedColumns();
    var allPositions = rangeColumns.map(function (c) {
      return allColumns.indexOf(c);
    }).sort(function (a, b) {
      return a - b;
    });
    return agGridCommunity._.last(allPositions) - allPositions[0] + 1 === rangeColumns.length;
  };
  RangeController.prototype.getRangeStartRow = function (cellRange) {
    if (cellRange.startRow && cellRange.endRow) {
      return this.rowPositionUtils.before(cellRange.startRow, cellRange.endRow) ? cellRange.startRow : cellRange.endRow;
    }
    var rowPinned = this.pinnedRowModel.getPinnedTopRowCount() > 0 ? agGridCommunity.Constants.PINNED_TOP : null;
    return {
      rowIndex: 0,
      rowPinned: rowPinned
    };
  };
  RangeController.prototype.getRangeEndRow = function (cellRange) {
    if (cellRange.startRow && cellRange.endRow) {
      return this.rowPositionUtils.before(cellRange.startRow, cellRange.endRow) ? cellRange.endRow : cellRange.startRow;
    }
    var pinnedBottomRowCount = this.pinnedRowModel.getPinnedBottomRowCount();
    var pinnedBottom = pinnedBottomRowCount > 0;
    if (pinnedBottom) {
      return {
        rowIndex: pinnedBottomRowCount - 1,
        rowPinned: agGridCommunity.Constants.PINNED_BOTTOM
      };
    }
    return {
      rowIndex: this.rowModel.getRowCount() - 1,
      rowPinned: null
    };
  };
  RangeController.prototype.setRangeToCell = function (cell, appendRange) {
    if (appendRange === void 0) {
      appendRange = false;
    }
    if (!this.gridOptionsWrapper.isEnableRangeSelection()) {
      return;
    }
    var columns = this.calculateColumnsBetween(cell.column, cell.column);
    if (!columns) {
      return;
    }
    var suppressMultiRangeSelections = this.gridOptionsWrapper.isSuppressMultiRangeSelection();
    // if not appending, then clear previous range selections
    if (suppressMultiRangeSelections || !appendRange || agGridCommunity._.missing(this.cellRanges)) {
      this.removeAllCellRanges(true);
    }
    var rowForCell = {
      rowIndex: cell.rowIndex,
      rowPinned: cell.rowPinned
    };
    // if there is already a range for this cell, then we reuse the same range, otherwise the user
    // can ctrl & click a cell many times and hit ctrl+c, which would result in the cell getting copied
    // many times to the clipboard.
    var cellRange;
    for (var i = 0; i < this.cellRanges.length; i++) {
      var range = this.cellRanges[i];
      var matches =
      // check cols are same
      range.columns && range.columns.length === 1 && range.columns[0] === cell.column &&
      // check rows are same
      this.rowPositionUtils.sameRow(rowForCell, range.startRow) && this.rowPositionUtils.sameRow(rowForCell, range.endRow);
      if (matches) {
        cellRange = range;
        break;
      }
    }
    if (cellRange) {
      // we need it at the end of the list, as the dragStart picks the last created
      // range as the start point for the drag
      if (agGridCommunity._.last(this.cellRanges) !== cellRange) {
        agGridCommunity._.removeFromArray(this.cellRanges, cellRange);
        this.cellRanges.push(cellRange);
      }
    } else {
      cellRange = {
        startRow: rowForCell,
        endRow: rowForCell,
        columns: columns,
        startColumn: cell.column
      };
      this.cellRanges.push(cellRange);
    }
    this.newestRangeStartCell = cell;
    this.onDragStop();
    this.dispatchChangedEvent(true, true, cellRange.id);
  };
  RangeController.prototype.extendLatestRangeToCell = function (cellPosition) {
    if (this.isEmpty() || !this.newestRangeStartCell) {
      return;
    }
    var cellRange = agGridCommunity._.last(this.cellRanges);
    this.updateRangeEnd(cellRange, cellPosition);
  };
  RangeController.prototype.updateRangeEnd = function (cellRange, cellPosition, silent) {
    if (silent === void 0) {
      silent = false;
    }
    var endColumn = cellPosition.column;
    var colsToAdd = this.calculateColumnsBetween(cellRange.startColumn, endColumn);
    if (!colsToAdd || this.isLastCellOfRange(cellRange, cellPosition)) {
      return;
    }
    cellRange.columns = colsToAdd;
    cellRange.endRow = {
      rowIndex: cellPosition.rowIndex,
      rowPinned: cellPosition.rowPinned
    };
    if (!silent) {
      this.dispatchChangedEvent(true, true, cellRange.id);
    }
  };
  RangeController.prototype.refreshRangeStart = function (cellRange) {
    var startColumn = cellRange.startColumn,
      columns = cellRange.columns;
    var moveColInCellRange = function (colToMove, moveToFront) {
      var otherCols = cellRange.columns.filter(function (col) {
        return col !== colToMove;
      });
      if (colToMove) {
        cellRange.startColumn = colToMove;
        cellRange.columns = moveToFront ? __spreadArrays$9([colToMove], otherCols) : __spreadArrays$9(otherCols, [colToMove]);
      } else {
        cellRange.columns = otherCols;
      }
    };
    var _a = this.getRangeEdgeColumns(cellRange),
      left = _a.left,
      right = _a.right;
    var shouldMoveLeftCol = startColumn === columns[0] && startColumn !== left;
    if (shouldMoveLeftCol) {
      moveColInCellRange(left, true);
      return;
    }
    var shouldMoveRightCol = startColumn === agGridCommunity._.last(columns) && startColumn === right;
    if (shouldMoveRightCol) {
      moveColInCellRange(right, false);
      return;
    }
  };
  RangeController.prototype.getRangeEdgeColumns = function (cellRange) {
    var allColumns = this.columnController.getAllDisplayedColumns();
    var allIndices = cellRange.columns.map(function (c) {
      return allColumns.indexOf(c);
    }).filter(function (i) {
      return i > -1;
    }).sort(function (a, b) {
      return a - b;
    });
    return {
      left: allColumns[allIndices[0]],
      right: allColumns[agGridCommunity._.last(allIndices)]
    };
  };
  // returns true if successful, false if not successful
  RangeController.prototype.extendLatestRangeInDirection = function (key) {
    if (this.isEmpty() || !this.newestRangeStartCell) {
      return;
    }
    var lastRange = agGridCommunity._.last(this.cellRanges);
    var startCell = this.newestRangeStartCell;
    var firstCol = lastRange.columns[0];
    var lastCol = agGridCommunity._.last(lastRange.columns);
    // find the cell that is at the furthest away corner from the starting cell
    var endCellIndex = lastRange.endRow.rowIndex;
    var endCellFloating = lastRange.endRow.rowPinned;
    var endCellColumn = startCell.column === firstCol ? lastCol : firstCol;
    var endCell = {
      column: endCellColumn,
      rowIndex: endCellIndex,
      rowPinned: endCellFloating
    };
    var newEndCell = this.cellNavigationService.getNextCellToFocus(key, endCell);
    // if user is at end of grid, so no cell to extend to, we return false
    if (!newEndCell) {
      return;
    }
    this.setCellRange({
      rowStartIndex: startCell.rowIndex,
      rowStartPinned: startCell.rowPinned,
      rowEndIndex: newEndCell.rowIndex,
      rowEndPinned: newEndCell.rowPinned,
      columnStart: startCell.column,
      columnEnd: newEndCell.column
    });
    return newEndCell;
  };
  RangeController.prototype.setCellRange = function (params) {
    if (!this.gridOptionsWrapper.isEnableRangeSelection()) {
      return;
    }
    this.removeAllCellRanges(true);
    this.addCellRange(params);
  };
  RangeController.prototype.setCellRanges = function (cellRanges) {
    var _this = this;
    if (agGridCommunity._.shallowCompare(this.cellRanges, cellRanges)) {
      return;
    }
    this.removeAllCellRanges(true);
    cellRanges.forEach(function (newRange) {
      if (newRange.columns && newRange.startRow) {
        _this.newestRangeStartCell = {
          rowIndex: newRange.startRow.rowIndex,
          rowPinned: newRange.startRow.rowPinned,
          column: newRange.columns[0]
        };
      }
      _this.cellRanges.push(newRange);
    });
    this.dispatchChangedEvent(false, true);
  };
  RangeController.prototype.createCellRangeFromCellRangeParams = function (params) {
    var _this = this;
    var columns;
    if (params.columns) {
      columns = params.columns.map(function (c) {
        return _this.columnController.getColumnWithValidation(c);
      }).filter(function (c) {
        return c;
      });
    } else {
      var columnStart = this.columnController.getColumnWithValidation(params.columnStart);
      var columnEnd = this.columnController.getColumnWithValidation(params.columnEnd);
      if (!columnStart || !columnEnd) {
        return;
      }
      columns = this.calculateColumnsBetween(columnStart, columnEnd);
    }
    if (!columns) {
      return;
    }
    var startRow = params.rowStartIndex != null ? {
      rowIndex: params.rowStartIndex,
      rowPinned: params.rowStartPinned || null
    } : undefined;
    var endRow = params.rowEndIndex != null ? {
      rowIndex: params.rowEndIndex,
      rowPinned: params.rowEndPinned || null
    } : undefined;
    return {
      startRow: startRow,
      endRow: endRow,
      columns: columns,
      startColumn: columns[0]
    };
  };
  RangeController.prototype.addCellRange = function (params) {
    if (!this.gridOptionsWrapper.isEnableRangeSelection()) {
      return;
    }
    var newRange = this.createCellRangeFromCellRangeParams(params);
    if (newRange) {
      this.cellRanges.push(newRange);
      this.dispatchChangedEvent(false, true, newRange.id);
    }
  };
  RangeController.prototype.getCellRanges = function () {
    return this.cellRanges;
  };
  RangeController.prototype.isEmpty = function () {
    return this.cellRanges.length === 0;
  };
  RangeController.prototype.isMoreThanOneCell = function () {
    if (this.cellRanges.length === 0) {
      // no ranges, so not more than one cell
      return false;
    } else if (this.cellRanges.length > 1) {
      // many ranges, so more than one cell
      return true;
    }
    // only one range, return true if range has more than one
    var range = this.cellRanges[0];
    var startRow = this.getRangeStartRow(range);
    var endRow = this.getRangeEndRow(range);
    return startRow.rowPinned !== endRow.rowPinned || startRow.rowIndex !== endRow.rowIndex || range.columns.length !== 1;
  };
  RangeController.prototype.removeAllCellRanges = function (silent) {
    if (this.isEmpty()) {
      return;
    }
    this.onDragStop();
    this.cellRanges.length = 0;
    if (!silent) {
      this.dispatchChangedEvent(false, true);
    }
  };
  // as the user is dragging outside of the panel, the div starts to scroll, which in turn
  // means we are selection more (or less) cells, but the mouse isn't moving, so we recalculate
  // the selection my mimicking a new mouse event
  RangeController.prototype.onBodyScroll = function () {
    this.onDragging(this.lastMouseEvent);
  };
  RangeController.prototype.isCellInAnyRange = function (cell) {
    return this.getCellRangeCount(cell) > 0;
  };
  RangeController.prototype.isCellInSpecificRange = function (cell, range) {
    var columnInRange = range.columns !== null && agGridCommunity._.includes(range.columns, cell.column);
    var rowInRange = this.isRowInRange(cell.rowIndex, cell.rowPinned, range);
    return columnInRange && rowInRange;
  };
  RangeController.prototype.isLastCellOfRange = function (cellRange, cell) {
    var startRow = cellRange.startRow,
      endRow = cellRange.endRow;
    var lastRow = this.rowPositionUtils.before(startRow, endRow) ? endRow : startRow;
    var isLastRow = cell.rowIndex === lastRow.rowIndex && cell.rowPinned === lastRow.rowPinned;
    var rangeFirstIndexColumn = cellRange.columns[0];
    var rangeLastIndexColumn = agGridCommunity._.last(cellRange.columns);
    var lastRangeColumn = cellRange.startColumn === rangeFirstIndexColumn ? rangeLastIndexColumn : rangeFirstIndexColumn;
    var isLastColumn = cell.column === lastRangeColumn;
    return isLastColumn && isLastRow;
  };
  RangeController.prototype.isBottomRightCell = function (cellRange, cell) {
    var allColumns = this.columnController.getAllDisplayedColumns();
    var allPositions = cellRange.columns.map(function (c) {
      return allColumns.indexOf(c);
    }).sort(function (a, b) {
      return a - b;
    });
    var startRow = cellRange.startRow,
      endRow = cellRange.endRow;
    var lastRow = this.rowPositionUtils.before(startRow, endRow) ? endRow : startRow;
    var isRightColumn = allColumns.indexOf(cell.column) === agGridCommunity._.last(allPositions);
    var isLastRow = cell.rowIndex === lastRow.rowIndex && agGridCommunity._.makeNull(cell.rowPinned) === agGridCommunity._.makeNull(lastRow.rowPinned);
    return isRightColumn && isLastRow;
  };
  // returns the number of ranges this cell is in
  RangeController.prototype.getCellRangeCount = function (cell) {
    var _this = this;
    if (this.isEmpty()) {
      return 0;
    }
    return this.cellRanges.filter(function (cellRange) {
      return _this.isCellInSpecificRange(cell, cellRange);
    }).length;
  };
  RangeController.prototype.isRowInRange = function (rowIndex, floating, cellRange) {
    var firstRow = this.getRangeStartRow(cellRange);
    var lastRow = this.getRangeEndRow(cellRange);
    var thisRow = {
      rowIndex: rowIndex,
      rowPinned: floating || null
    };
    // compare rowPinned with == instead of === because it can be `null` or `undefined`
    var equalsFirstRow = thisRow.rowIndex === firstRow.rowIndex && thisRow.rowPinned == firstRow.rowPinned;
    var equalsLastRow = thisRow.rowIndex === lastRow.rowIndex && thisRow.rowPinned == lastRow.rowPinned;
    if (equalsFirstRow || equalsLastRow) {
      return true;
    }
    var afterFirstRow = !this.rowPositionUtils.before(thisRow, firstRow);
    var beforeLastRow = this.rowPositionUtils.before(thisRow, lastRow);
    return afterFirstRow && beforeLastRow;
  };
  RangeController.prototype.getDraggingRange = function () {
    return this.draggingRange;
  };
  RangeController.prototype.onDragStart = function (mouseEvent) {
    if (!this.gridOptionsWrapper.isEnableRangeSelection()) {
      return;
    }
    var ctrlKey = mouseEvent.ctrlKey,
      metaKey = mouseEvent.metaKey,
      shiftKey = mouseEvent.shiftKey;
    // ctrlKey for windows, metaKey for Apple
    var multiKeyPressed = ctrlKey || metaKey;
    var allowMulti = !this.gridOptionsWrapper.isSuppressMultiRangeSelection();
    var multiSelectKeyPressed = allowMulti ? multiKeyPressed : false;
    var mouseCell = this.mouseEventService.getCellPositionForEvent(mouseEvent);
    var extendRange = shiftKey && agGridCommunity._.existsAndNotEmpty(this.cellRanges);
    if (agGridCommunity._.missing(mouseCell)) {
      // if drag wasn't on cell, then do nothing, including do not set dragging=true,
      // (which them means onDragging and onDragStop do nothing)
      return;
    }
    if (!multiSelectKeyPressed && (!extendRange || agGridCommunity._.exists(agGridCommunity._.last(this.cellRanges).type))) {
      this.removeAllCellRanges(true);
    }
    this.dragging = true;
    this.draggingCell = mouseCell;
    this.lastMouseEvent = mouseEvent;
    if (!extendRange) {
      this.newestRangeStartCell = mouseCell;
    }
    // if we didn't clear the ranges, then dragging means the user clicked, and when the
    // user clicks it means a range of one cell was created. we need to extend this range
    // rather than creating another range. otherwise we end up with two distinct ranges
    // from a drag operation (one from click, and one from drag).
    if (this.cellRanges.length > 0) {
      this.draggingRange = agGridCommunity._.last(this.cellRanges);
    } else {
      var mouseRowPosition = {
        rowIndex: mouseCell.rowIndex,
        rowPinned: mouseCell.rowPinned
      };
      this.draggingRange = {
        startRow: mouseRowPosition,
        endRow: mouseRowPosition,
        columns: [mouseCell.column],
        startColumn: this.newestRangeStartCell.column
      };
      this.cellRanges.push(this.draggingRange);
    }
    this.gridBodyComp.addScrollEventListener(this.bodyScrollListener);
    this.dispatchChangedEvent(true, false, this.draggingRange.id);
  };
  RangeController.prototype.onDragging = function (mouseEvent) {
    var _this = this;
    if (!this.dragging || !mouseEvent) {
      return;
    }
    this.lastMouseEvent = mouseEvent;
    var cellPosition = this.mouseEventService.getCellPositionForEvent(mouseEvent);
    var isMouseAndStartInPinned = function (position) {
      return cellPosition && cellPosition.rowPinned === position && _this.newestRangeStartCell.rowPinned === position;
    };
    var skipVerticalScroll = isMouseAndStartInPinned('top') || isMouseAndStartInPinned('bottom');
    this.autoScrollService.check(mouseEvent, skipVerticalScroll);
    if (!cellPosition || !this.draggingCell || this.cellPositionUtils.equals(this.draggingCell, cellPosition)) {
      return;
    }
    var columns = this.calculateColumnsBetween(this.newestRangeStartCell.column, cellPosition.column);
    if (!columns) {
      return;
    }
    this.draggingCell = cellPosition;
    this.draggingRange.endRow = {
      rowIndex: cellPosition.rowIndex,
      rowPinned: cellPosition.rowPinned
    };
    this.draggingRange.columns = columns;
    this.dispatchChangedEvent(false, false, this.draggingRange.id);
  };
  RangeController.prototype.onDragStop = function () {
    if (!this.dragging) {
      return;
    }
    var id = this.draggingRange.id;
    this.autoScrollService.ensureCleared();
    this.gridBodyComp.removeScrollEventListener(this.bodyScrollListener);
    this.lastMouseEvent = null;
    this.dragging = false;
    this.draggingRange = undefined;
    this.draggingCell = undefined;
    this.dispatchChangedEvent(false, true, id);
  };
  RangeController.prototype.dispatchChangedEvent = function (started, finished, id) {
    var event = Object.freeze({
      type: agGridCommunity.Events.EVENT_RANGE_SELECTION_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi,
      started: started,
      finished: finished,
      id: id
    });
    this.eventService.dispatchEvent(event);
  };
  RangeController.prototype.calculateColumnsBetween = function (columnFrom, columnTo) {
    var allColumns = this.columnController.getAllDisplayedColumns();
    var isSameColumn = columnFrom === columnTo;
    var fromIndex = allColumns.indexOf(columnFrom);
    if (fromIndex < 0) {
      console.warn("AG Grid: column " + columnFrom.getId() + " is not visible");
      return;
    }
    var toIndex = isSameColumn ? fromIndex : allColumns.indexOf(columnTo);
    if (toIndex < 0) {
      console.warn("AG Grid: column " + columnTo.getId() + " is not visible");
      return;
    }
    if (isSameColumn) {
      return [columnFrom];
    }
    var firstIndex = Math.min(fromIndex, toIndex);
    var lastIndex = firstIndex === fromIndex ? toIndex : fromIndex;
    var columns = [];
    for (var i = firstIndex; i <= lastIndex; i++) {
      columns.push(allColumns[i]);
    }
    return columns;
  };
  __decorate$1k([agGridCommunity.Autowired('loggerFactory')], RangeController.prototype, "loggerFactory", void 0);
  __decorate$1k([agGridCommunity.Autowired('rowModel')], RangeController.prototype, "rowModel", void 0);
  __decorate$1k([agGridCommunity.Autowired('columnController')], RangeController.prototype, "columnController", void 0);
  __decorate$1k([agGridCommunity.Autowired('mouseEventService')], RangeController.prototype, "mouseEventService", void 0);
  __decorate$1k([agGridCommunity.Autowired('columnApi')], RangeController.prototype, "columnApi", void 0);
  __decorate$1k([agGridCommunity.Autowired('gridApi')], RangeController.prototype, "gridApi", void 0);
  __decorate$1k([agGridCommunity.Autowired('cellNavigationService')], RangeController.prototype, "cellNavigationService", void 0);
  __decorate$1k([agGridCommunity.Autowired("pinnedRowModel")], RangeController.prototype, "pinnedRowModel", void 0);
  __decorate$1k([agGridCommunity.Autowired('rowPositionUtils')], RangeController.prototype, "rowPositionUtils", void 0);
  __decorate$1k([agGridCommunity.Autowired('cellPositionUtils')], RangeController.prototype, "cellPositionUtils", void 0);
  __decorate$1k([agGridCommunity.Autowired('controllersService')], RangeController.prototype, "controllersService", void 0);
  __decorate$1k([agGridCommunity.PostConstruct], RangeController.prototype, "init", null);
  RangeController = __decorate$1k([agGridCommunity.Bean('rangeController')], RangeController);
  return RangeController;
}(agGridCommunity.BeanStub);
var AutoScrollService = /** @class */function () {
  function AutoScrollService(gridBodyCon, gridOptionsWrapper) {
    this.tickingInterval = null;
    this.gridBodyCon = gridBodyCon;
    this.gridOptionsWrapper = gridOptionsWrapper;
  }
  AutoScrollService.prototype.check = function (mouseEvent, skipVerticalScroll) {
    if (skipVerticalScroll === void 0) {
      skipVerticalScroll = false;
    }
    var rect = this.gridBodyCon.getBodyClientRect();
    skipVerticalScroll = skipVerticalScroll || this.gridOptionsWrapper.getDomLayout() !== agGridCommunity.Constants.DOM_LAYOUT_NORMAL;
    // we don't do ticking if grid is auto height unless we have a horizontal scroller
    if (skipVerticalScroll && !this.gridBodyCon.getScrollFeature().isHorizontalScrollShowing()) {
      return;
    }
    this.tickLeft = mouseEvent.clientX < rect.left + 20;
    this.tickRight = mouseEvent.clientX > rect.right - 20;
    this.tickUp = mouseEvent.clientY < rect.top + 20 && !skipVerticalScroll;
    this.tickDown = mouseEvent.clientY > rect.bottom - 20 && !skipVerticalScroll;
    if (this.tickLeft || this.tickRight || this.tickUp || this.tickDown) {
      this.ensureTickingStarted();
    } else {
      this.ensureCleared();
    }
  };
  AutoScrollService.prototype.ensureTickingStarted = function () {
    if (this.tickingInterval === null) {
      this.tickingInterval = window.setInterval(this.doTick.bind(this), 100);
      this.tickCount = 0;
    }
  };
  AutoScrollService.prototype.doTick = function () {
    this.tickCount++;
    var vScrollPosition = this.gridBodyCon.getScrollFeature().getVScrollPosition();
    var hScrollPosition = this.gridBodyCon.getScrollFeature().getHScrollPosition();
    var tickAmount;
    tickAmount = this.tickCount > 20 ? 200 : this.tickCount > 10 ? 80 : 40;
    if (this.tickUp) {
      this.gridBodyCon.getScrollFeature().setVerticalScrollPosition(vScrollPosition.top - tickAmount);
    }
    if (this.tickDown) {
      this.gridBodyCon.getScrollFeature().setVerticalScrollPosition(vScrollPosition.top + tickAmount);
    }
    if (this.tickLeft) {
      this.gridBodyCon.getScrollFeature().setHorizontalScrollPosition(hScrollPosition.left - tickAmount);
    }
    if (this.tickRight) {
      this.gridBodyCon.getScrollFeature().setHorizontalScrollPosition(hScrollPosition.left + tickAmount);
    }
  };
  AutoScrollService.prototype.ensureCleared = function () {
    if (this.tickingInterval) {
      window.clearInterval(this.tickingInterval);
      this.tickingInterval = null;
    }
  };
  return AutoScrollService;
}();
var __extends$2w =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1l =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AbstractSelectionHandle = /** @class */function (_super) {
  __extends$2w(AbstractSelectionHandle, _super);
  function AbstractSelectionHandle() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.changedCalculatedValues = false;
    _this.dragging = false;
    _this.shouldDestroyOnEndDragging = false;
    return _this;
  }
  AbstractSelectionHandle.prototype.init = function () {
    var _this = this;
    this.dragService.addDragSource({
      dragStartPixels: 0,
      eElement: this.getGui(),
      onDragStart: this.onDragStart.bind(this),
      onDragging: function (e) {
        _this.dragging = true;
        _this.rangeController.autoScrollService.check(e);
        if (_this.changedCalculatedValues) {
          _this.onDrag(e);
          _this.changedCalculatedValues = false;
        }
      },
      onDragStop: function (e) {
        _this.dragging = false;
        _this.onDragEnd(e);
        _this.clearValues();
        _this.rangeController.autoScrollService.ensureCleared();
        // TODO: this causes a bug where if there are multiple grids in the same page, all of them will
        // be affected by a drag on any. Move it to the root element.
        agGridCommunity._.removeCssClass(document.body, _this.getDraggingCssClass());
        if (_this.shouldDestroyOnEndDragging) {
          _this.destroy();
        }
      }
    });
    this.addManagedListener(this.getGui(), 'mousedown', this.preventRangeExtension.bind(this));
  };
  AbstractSelectionHandle.prototype.isDragging = function () {
    return this.dragging;
  };
  AbstractSelectionHandle.prototype.getCellComp = function () {
    return this.cellComp;
  };
  AbstractSelectionHandle.prototype.setCellComp = function (cellComp) {
    this.cellComp = cellComp;
  };
  AbstractSelectionHandle.prototype.getCellRange = function () {
    return this.cellRange;
  };
  AbstractSelectionHandle.prototype.setCellRange = function (range) {
    this.cellRange = range;
  };
  AbstractSelectionHandle.prototype.getRangeStartRow = function () {
    return this.rangeStartRow;
  };
  AbstractSelectionHandle.prototype.setRangeStartRow = function (row) {
    this.rangeStartRow = row;
  };
  AbstractSelectionHandle.prototype.getRangeEndRow = function () {
    return this.rangeEndRow;
  };
  AbstractSelectionHandle.prototype.setRangeEndRow = function (row) {
    this.rangeEndRow = row;
  };
  AbstractSelectionHandle.prototype.getLastCellHovered = function () {
    return this.lastCellHovered;
  };
  AbstractSelectionHandle.prototype.preventRangeExtension = function (e) {
    e.preventDefault();
    e.stopPropagation();
  };
  AbstractSelectionHandle.prototype.onDragStart = function (e) {
    this.cellHoverListener = this.addManagedListener(this.controllersService.getGridCompController().getGui(), 'mousemove', this.updateValuesOnMove.bind(this));
    agGridCommunity._.addCssClass(document.body, this.getDraggingCssClass());
  };
  AbstractSelectionHandle.prototype.getDraggingCssClass = function () {
    return "ag-dragging-" + (this.type === agGridCommunity.SelectionHandleType.FILL ? 'fill' : 'range') + "-handle";
  };
  AbstractSelectionHandle.prototype.updateValuesOnMove = function (e) {
    var cell = this.mouseEventService.getCellPositionForEvent(e);
    if (cell === this.lastCellHovered) {
      return;
    }
    this.lastCellHovered = cell;
    this.changedCalculatedValues = true;
  };
  AbstractSelectionHandle.prototype.getType = function () {
    return this.type;
  };
  AbstractSelectionHandle.prototype.refresh = function (cellComp) {
    var _this = this;
    var oldCellComp = this.getCellComp();
    var eGui = this.getGui();
    var cellRange = agGridCommunity._.last(this.rangeController.getCellRanges());
    var start = cellRange.startRow;
    var end = cellRange.endRow;
    if (start && end) {
      var isBefore = this.rowPositionUtils.before(end, start);
      if (isBefore) {
        this.setRangeStartRow(end);
        this.setRangeEndRow(start);
      } else {
        this.setRangeStartRow(start);
        this.setRangeEndRow(end);
      }
    }
    if (oldCellComp !== cellComp || !agGridCommunity._.isVisible(eGui)) {
      this.setCellComp(cellComp);
      window.setTimeout(function () {
        if (_this.isAlive()) {
          cellComp.appendChild(eGui);
        }
      }, 1);
    }
    this.setCellRange(cellRange);
  };
  AbstractSelectionHandle.prototype.clearValues = function () {
    this.lastCellHovered = undefined;
    this.removeListeners();
  };
  AbstractSelectionHandle.prototype.removeListeners = function () {
    if (this.cellHoverListener) {
      this.cellHoverListener();
      this.cellHoverListener = undefined;
    }
  };
  AbstractSelectionHandle.prototype.destroy = function () {
    if (!this.shouldDestroyOnEndDragging && this.isDragging()) {
      agGridCommunity._.setDisplayed(this.getGui(), false);
      this.shouldDestroyOnEndDragging = true;
      return;
    }
    this.shouldDestroyOnEndDragging = false;
    _super.prototype.destroy.call(this);
    this.removeListeners();
    var eGui = this.getGui();
    if (eGui.parentElement) {
      eGui.parentElement.removeChild(eGui);
    }
  };
  __decorate$1l([agGridCommunity.Autowired("rowRenderer")], AbstractSelectionHandle.prototype, "rowRenderer", void 0);
  __decorate$1l([agGridCommunity.Autowired("dragService")], AbstractSelectionHandle.prototype, "dragService", void 0);
  __decorate$1l([agGridCommunity.Autowired("rangeController")], AbstractSelectionHandle.prototype, "rangeController", void 0);
  __decorate$1l([agGridCommunity.Autowired("mouseEventService")], AbstractSelectionHandle.prototype, "mouseEventService", void 0);
  __decorate$1l([agGridCommunity.Autowired("columnController")], AbstractSelectionHandle.prototype, "columnController", void 0);
  __decorate$1l([agGridCommunity.Autowired("cellNavigationService")], AbstractSelectionHandle.prototype, "cellNavigationService", void 0);
  __decorate$1l([agGridCommunity.Autowired('rowPositionUtils')], AbstractSelectionHandle.prototype, "rowPositionUtils", void 0);
  __decorate$1l([agGridCommunity.Autowired('controllersService')], AbstractSelectionHandle.prototype, "controllersService", void 0);
  __decorate$1l([agGridCommunity.PostConstruct], AbstractSelectionHandle.prototype, "init", null);
  return AbstractSelectionHandle;
}(agGridCommunity.Component);
var __extends$2x =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$j =  false || function () {
  __assign$j = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$j.apply(this, arguments);
};
var __decorate$1m =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __spreadArrays$a =  false || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
};
var FillHandle = /** @class */function (_super) {
  __extends$2x(FillHandle, _super);
  function FillHandle() {
    var _this = _super.call(this, FillHandle.TEMPLATE) || this;
    _this.markedCellComps = [];
    _this.cellValues = [];
    _this.isUp = false;
    _this.isLeft = false;
    _this.isReduce = false;
    _this.type = agGridCommunity.SelectionHandleType.FILL;
    return _this;
  }
  FillHandle.prototype.updateValuesOnMove = function (e) {
    _super.prototype.updateValuesOnMove.call(this, e);
    if (!this.initialXY) {
      this.initialXY = this.mouseEventService.getNormalisedPosition(e);
    }
    var _a = this.initialXY,
      x = _a.x,
      y = _a.y;
    var _b = this.mouseEventService.getNormalisedPosition(e),
      newX = _b.x,
      newY = _b.y;
    var diffX = Math.abs(x - newX);
    var diffY = Math.abs(y - newY);
    var allowedDirection = this.gridOptionsWrapper.getFillHandleDirection();
    var direction;
    if (allowedDirection === 'xy') {
      direction = diffX > diffY ? 'x' : 'y';
    } else {
      direction = allowedDirection;
    }
    if (direction !== this.dragAxis) {
      this.dragAxis = direction;
      this.changedCalculatedValues = true;
    }
  };
  FillHandle.prototype.onDrag = function (e) {
    if (!this.initialPosition) {
      var cellComp = this.getCellComp();
      if (!cellComp) {
        return;
      }
      this.initialPosition = cellComp.getCellPosition();
    }
    var lastCellHovered = this.getLastCellHovered();
    if (lastCellHovered) {
      this.markPathFrom(this.initialPosition, lastCellHovered);
    }
  };
  FillHandle.prototype.onDragEnd = function (e) {
    this.initialXY = null;
    if (!this.markedCellComps.length) {
      return;
    }
    var isX = this.dragAxis === 'x';
    var initialRange = this.getCellRange();
    var colLen = initialRange.columns.length;
    var rangeStartRow = this.getRangeStartRow();
    var rangeEndRow = this.getRangeEndRow();
    var finalRange;
    if (!this.isUp && !this.isLeft) {
      finalRange = this.rangeController.createCellRangeFromCellRangeParams({
        rowStartIndex: rangeStartRow.rowIndex,
        rowStartPinned: rangeStartRow.rowPinned,
        columnStart: initialRange.columns[0],
        rowEndIndex: isX ? rangeEndRow.rowIndex : this.lastCellMarked.rowIndex,
        rowEndPinned: isX ? rangeEndRow.rowPinned : this.lastCellMarked.rowPinned,
        columnEnd: isX ? this.lastCellMarked.column : initialRange.columns[colLen - 1]
      });
    } else {
      var startRow = isX ? rangeStartRow : this.lastCellMarked;
      finalRange = this.rangeController.createCellRangeFromCellRangeParams({
        rowStartIndex: startRow.rowIndex,
        rowStartPinned: startRow.rowPinned,
        columnStart: isX ? this.lastCellMarked.column : initialRange.columns[0],
        rowEndIndex: rangeEndRow.rowIndex,
        rowEndPinned: rangeEndRow.rowPinned,
        columnEnd: initialRange.columns[colLen - 1]
      });
    }
    if (finalRange) {
      // raising fill events for undo / redo
      this.raiseFillStartEvent();
      this.handleValueChanged(initialRange, finalRange, e);
      this.rangeController.setCellRanges([finalRange]);
      this.raiseFillEndEvent(initialRange, finalRange);
    }
  };
  FillHandle.prototype.raiseFillStartEvent = function () {
    var fillStartEvent = {
      type: agGridCommunity.Events.EVENT_FILL_START,
      columnApi: this.gridOptionsWrapper.getColumnApi(),
      api: this.gridOptionsWrapper.getApi()
    };
    this.eventService.dispatchEvent(fillStartEvent);
  };
  FillHandle.prototype.raiseFillEndEvent = function (initialRange, finalRange) {
    var fillEndEvent = {
      type: agGridCommunity.Events.EVENT_FILL_END,
      columnApi: this.gridOptionsWrapper.getColumnApi(),
      api: this.gridOptionsWrapper.getApi(),
      initialRange: initialRange,
      finalRange: finalRange
    };
    this.eventService.dispatchEvent(fillEndEvent);
  };
  FillHandle.prototype.handleValueChanged = function (initialRange, finalRange, e) {
    var _this = this;
    var initialRangeEndRow = this.rangeController.getRangeEndRow(initialRange);
    var initialRangeStartRow = this.rangeController.getRangeStartRow(initialRange);
    var finalRangeEndRow = this.rangeController.getRangeEndRow(finalRange);
    var finalRangeStartRow = this.rangeController.getRangeStartRow(finalRange);
    var isVertical = this.dragAxis === 'y';
    // if the range is being reduced in size, all we need to do is
    // clear the cells that are no longer part of the range
    if (this.isReduce && !this.gridOptionsWrapper.isSuppressClearOnFillReduction()) {
      var columns = isVertical ? initialRange.columns : initialRange.columns.filter(function (col) {
        return finalRange.columns.indexOf(col) < 0;
      });
      var startRow = isVertical ? this.cellNavigationService.getRowBelow(finalRangeEndRow) : finalRangeStartRow;
      if (startRow) {
        this.clearCellsInRange(startRow, initialRangeEndRow, columns);
      }
      return;
    }
    var withinInitialRange = true;
    var values = [];
    var initialValues = [];
    var idx = 0;
    var resetValues = function () {
      values.length = 0;
      initialValues.length = 0;
      idx = 0;
    };
    var iterateAcrossCells = function (column, columns) {
      var currentRow = _this.isUp ? initialRangeEndRow : initialRangeStartRow;
      var finished = false;
      if (isVertical) {
        withinInitialRange = true;
        resetValues();
      }
      var _loop_1 = function () {
        var rowNode = _this.rowPositionUtils.getRowNode(currentRow);
        if (!rowNode) {
          return "break";
        }
        if (isVertical && column) {
          fillValues(values, column, rowNode, function () {
            return !_this.rowPositionUtils.sameRow(currentRow, _this.isUp ? initialRangeStartRow : initialRangeEndRow);
          });
        } else if (columns) {
          withinInitialRange = true;
          resetValues();
          columns.forEach(function (col) {
            return fillValues(values, col, rowNode, function () {
              return col !== (_this.isLeft ? initialRange.columns[0] : agGridCommunity._.last(initialRange.columns));
            });
          });
        }
        finished = _this.rowPositionUtils.sameRow(currentRow, _this.isUp ? finalRangeStartRow : finalRangeEndRow);
        currentRow = _this.isUp ? _this.cellNavigationService.getRowAbove(currentRow) : _this.cellNavigationService.getRowBelow(currentRow);
      };
      while (!finished && currentRow) {
        var state_1 = _loop_1();
        if (state_1 === "break") break;
      }
    };
    var fillValues = function (currentValues, col, rowNode, updateInitialSet) {
      var currentValue;
      if (withinInitialRange) {
        currentValue = _this.valueService.getValue(col, rowNode);
        initialValues.push(currentValue);
        withinInitialRange = updateInitialSet();
      } else {
        currentValue = _this.processValues(e, currentValues, initialValues, col, rowNode, idx++);
        if (col.isCellEditable(rowNode)) {
          rowNode.setDataValue(col, currentValue);
        }
      }
      currentValues.push(currentValue);
    };
    if (isVertical) {
      initialRange.columns.forEach(function (col) {
        iterateAcrossCells(col);
      });
    } else {
      var columns = this.isLeft ? __spreadArrays$a(finalRange.columns).reverse() : finalRange.columns;
      iterateAcrossCells(undefined, columns);
    }
  };
  FillHandle.prototype.clearCellsInRange = function (startRow, endRow, columns) {
    var _this = this;
    var currentRow = startRow;
    var finished = false;
    var _loop_2 = function () {
      var rowNode = this_1.rowPositionUtils.getRowNode(currentRow);
      // should never happen, defensive programming
      if (!rowNode) {
        return "break";
      }
      columns.forEach(function (col) {
        if (col.isCellEditable(rowNode)) {
          _this.valueService.setValue(rowNode, col, null);
        }
      });
      finished = this_1.rowPositionUtils.sameRow(currentRow, endRow);
      currentRow = this_1.cellNavigationService.getRowBelow(currentRow);
    };
    var this_1 = this;
    while (!finished && currentRow) {
      var state_2 = _loop_2();
      if (state_2 === "break") break;
    }
  };
  FillHandle.prototype.processValues = function (event, values, initialValues, col, rowNode, idx) {
    var userFillOperation = this.gridOptionsWrapper.getFillOperation();
    var isVertical = this.dragAxis === 'y';
    var direction;
    if (isVertical) {
      direction = this.isUp ? 'up' : 'down';
    } else {
      direction = this.isLeft ? 'left' : 'right';
    }
    if (userFillOperation) {
      var userResult = userFillOperation({
        event: event,
        values: values,
        initialValues: initialValues,
        currentIndex: idx,
        currentCellValue: this.valueService.getValue(col, rowNode),
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        context: this.gridOptionsWrapper.getContext(),
        direction: direction,
        column: isVertical ? col : undefined,
        rowNode: !isVertical ? rowNode : undefined // only present if left / right
      });

      if (userResult !== false) {
        return userResult;
      }
    }
    var allNumbers = !values.some(function (val) {
      var asFloat = parseFloat(val);
      return isNaN(asFloat) || asFloat.toString() !== val.toString();
    });
    // values should be copied in order if the alt key is pressed
    // or if the values contain strings and numbers
    // However, if we only have one initial value selected, and that
    // value is a number and we are also pressing alt, then we should
    // increment or decrement the value by 1 based on direction.
    if (event.altKey || !allNumbers) {
      if (allNumbers && initialValues.length === 1) {
        var multiplier = this.isUp || this.isLeft ? -1 : 1;
        return parseFloat(agGridCommunity._.last(values)) + 1 * multiplier;
      }
      return values[idx % values.length];
    }
    return agGridCommunity._.last(agGridCommunity._.findLineByLeastSquares(values.map(Number)));
  };
  FillHandle.prototype.clearValues = function () {
    this.clearMarkedPath();
    this.clearCellValues();
    this.lastCellMarked = undefined;
    _super.prototype.clearValues.call(this);
  };
  FillHandle.prototype.clearMarkedPath = function () {
    this.markedCellComps.forEach(function (cellComp) {
      var eGui = cellComp.getGui();
      agGridCommunity._.removeCssClass(eGui, 'ag-selection-fill-top');
      agGridCommunity._.removeCssClass(eGui, 'ag-selection-fill-right');
      agGridCommunity._.removeCssClass(eGui, 'ag-selection-fill-bottom');
      agGridCommunity._.removeCssClass(eGui, 'ag-selection-fill-left');
    });
    this.markedCellComps.length = 0;
    this.isUp = false;
    this.isLeft = false;
    this.isReduce = false;
  };
  FillHandle.prototype.clearCellValues = function () {
    this.cellValues.length = 0;
  };
  FillHandle.prototype.markPathFrom = function (initialPosition, currentPosition) {
    this.clearMarkedPath();
    this.clearCellValues();
    if (this.dragAxis === 'y') {
      if (this.rowPositionUtils.sameRow(currentPosition, initialPosition)) {
        return;
      }
      var isBefore = this.rowPositionUtils.before(currentPosition, initialPosition);
      var rangeStartRow = this.getRangeStartRow();
      var rangeEndRow = this.getRangeEndRow();
      if (isBefore && (currentPosition.rowPinned == rangeStartRow.rowPinned && currentPosition.rowIndex >= rangeStartRow.rowIndex || rangeStartRow.rowPinned != rangeEndRow.rowPinned && currentPosition.rowPinned == rangeEndRow.rowPinned && currentPosition.rowIndex <= rangeEndRow.rowIndex)) {
        this.reduceVertical(initialPosition, currentPosition);
        this.isReduce = true;
      } else {
        this.extendVertical(initialPosition, currentPosition, isBefore);
        this.isReduce = false;
      }
    } else {
      var initialColumn = initialPosition.column;
      var currentColumn = currentPosition.column;
      if (initialColumn === currentColumn) {
        return;
      }
      var displayedColumns = this.columnController.getAllDisplayedColumns();
      var initialIndex = displayedColumns.indexOf(initialColumn);
      var currentIndex = displayedColumns.indexOf(currentColumn);
      if (currentIndex <= initialIndex && currentIndex >= displayedColumns.indexOf(this.getCellRange().columns[0])) {
        this.reduceHorizontal(initialPosition, currentPosition);
        this.isReduce = true;
      } else {
        this.extendHorizontal(initialPosition, currentPosition, currentIndex < initialIndex);
        this.isReduce = false;
      }
    }
    this.lastCellMarked = currentPosition;
  };
  FillHandle.prototype.extendVertical = function (initialPosition, endPosition, isMovingUp) {
    var _a = this,
      rowRenderer = _a.rowRenderer,
      rangeController = _a.rangeController;
    var row = initialPosition;
    do {
      var cellRange = this.getCellRange();
      var colLen = cellRange.columns.length;
      for (var i = 0; i < colLen; i++) {
        var column = cellRange.columns[i];
        var rowPos = {
          rowIndex: row.rowIndex,
          rowPinned: row.rowPinned
        };
        var cellPos = __assign$j(__assign$j({}, rowPos), {
          column: column
        });
        var cellInRange = rangeController.isCellInSpecificRange(cellPos, cellRange);
        var isInitialRow = this.rowPositionUtils.sameRow(row, initialPosition);
        if (isMovingUp) {
          this.isUp = true;
        }
        if (!isInitialRow) {
          var cellComp = rowRenderer.getComponentForCell(cellPos);
          if (cellComp) {
            this.markedCellComps.push(cellComp);
            var eGui = cellComp.getGui();
            if (!cellInRange) {
              agGridCommunity._.addOrRemoveCssClass(eGui, 'ag-selection-fill-left', i === 0);
              agGridCommunity._.addOrRemoveCssClass(eGui, 'ag-selection-fill-right', i === colLen - 1);
            }
            agGridCommunity._.addOrRemoveCssClass(eGui, isMovingUp ? 'ag-selection-fill-top' : 'ag-selection-fill-bottom', this.rowPositionUtils.sameRow(row, endPosition));
          }
        }
      }
      if (this.rowPositionUtils.sameRow(row, endPosition)) {
        break;
      }
    } while (
    // tslint:disable-next-line
    row = isMovingUp ? this.cellNavigationService.getRowAbove(row) : this.cellNavigationService.getRowBelow(row));
  };
  FillHandle.prototype.reduceVertical = function (initialPosition, endPosition) {
    var row = initialPosition;
    do {
      var cellRange = this.getCellRange();
      var colLen = cellRange.columns.length;
      var isLastRow = this.rowPositionUtils.sameRow(row, endPosition);
      for (var i = 0; i < colLen; i++) {
        var rowPos = {
          rowIndex: row.rowIndex,
          rowPinned: row.rowPinned
        };
        var celPos = __assign$j(__assign$j({}, rowPos), {
          column: cellRange.columns[i]
        });
        var cellComp = this.rowRenderer.getComponentForCell(celPos);
        if (cellComp) {
          this.markedCellComps.push(cellComp);
          var eGui = cellComp.getGui();
          agGridCommunity._.addOrRemoveCssClass(eGui, 'ag-selection-fill-bottom', this.rowPositionUtils.sameRow(row, endPosition));
        }
      }
      if (isLastRow) {
        break;
      }
      // tslint:disable-next-line
    } while (row = this.cellNavigationService.getRowAbove(row));
  };
  FillHandle.prototype.extendHorizontal = function (initialPosition, endPosition, isMovingLeft) {
    var _this = this;
    var allCols = this.columnController.getAllDisplayedColumns();
    var startCol = allCols.indexOf(isMovingLeft ? endPosition.column : initialPosition.column);
    var endCol = allCols.indexOf(isMovingLeft ? this.getCellRange().columns[0] : endPosition.column);
    var offset = isMovingLeft ? 0 : 1;
    var colsToMark = allCols.slice(startCol + offset, endCol + offset);
    var rangeStartRow = this.getRangeStartRow();
    var rangeEndRow = this.getRangeEndRow();
    colsToMark.forEach(function (column) {
      var row = rangeStartRow;
      var isLastRow = false;
      do {
        isLastRow = _this.rowPositionUtils.sameRow(row, rangeEndRow);
        var cellComp = _this.rowRenderer.getComponentForCell({
          rowIndex: row.rowIndex,
          rowPinned: row.rowPinned,
          column: column
        });
        if (cellComp) {
          _this.markedCellComps.push(cellComp);
          var eGui = cellComp.getGui();
          agGridCommunity._.addOrRemoveCssClass(eGui, 'ag-selection-fill-top', _this.rowPositionUtils.sameRow(row, rangeStartRow));
          agGridCommunity._.addOrRemoveCssClass(eGui, 'ag-selection-fill-bottom', _this.rowPositionUtils.sameRow(row, rangeEndRow));
          if (isMovingLeft) {
            _this.isLeft = true;
            agGridCommunity._.addOrRemoveCssClass(eGui, 'ag-selection-fill-left', column === colsToMark[0]);
          } else {
            agGridCommunity._.addOrRemoveCssClass(eGui, 'ag-selection-fill-right', column === agGridCommunity._.last(colsToMark));
          }
        }
        row = _this.cellNavigationService.getRowBelow(row);
      } while (!isLastRow);
    });
  };
  FillHandle.prototype.reduceHorizontal = function (initialPosition, endPosition) {
    var _this = this;
    var allCols = this.columnController.getAllDisplayedColumns();
    var startCol = allCols.indexOf(endPosition.column);
    var endCol = allCols.indexOf(initialPosition.column);
    var colsToMark = allCols.slice(startCol, endCol);
    var rangeStartRow = this.getRangeStartRow();
    var rangeEndRow = this.getRangeEndRow();
    colsToMark.forEach(function (column) {
      var row = rangeStartRow;
      var isLastRow = false;
      do {
        isLastRow = _this.rowPositionUtils.sameRow(row, rangeEndRow);
        var cellComp = _this.rowRenderer.getComponentForCell({
          rowIndex: row.rowIndex,
          rowPinned: row.rowPinned,
          column: column
        });
        if (cellComp) {
          _this.markedCellComps.push(cellComp);
          var eGui = cellComp.getGui();
          agGridCommunity._.addOrRemoveCssClass(eGui, 'ag-selection-fill-right', column === colsToMark[0]);
        }
        row = _this.cellNavigationService.getRowBelow(row);
      } while (!isLastRow);
    });
  };
  FillHandle.prototype.refresh = function (cellComp) {
    var cellRange = this.rangeController.getCellRanges()[0];
    var isColumnRange = !cellRange.startRow || !cellRange.endRow;
    if (isColumnRange) {
      this.destroy();
      return;
    }
    _super.prototype.refresh.call(this, cellComp);
  };
  FillHandle.TEMPLATE = "<div class=\"ag-fill-handle\"></div>";
  __decorate$1m([agGridCommunity.Autowired('valueService')], FillHandle.prototype, "valueService", void 0);
  return FillHandle;
}(AbstractSelectionHandle);
var __extends$2y =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$k =  false || function () {
  __assign$k = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$k.apply(this, arguments);
};
var RangeHandle$1 = /** @class */function (_super) {
  __extends$2y(RangeHandle, _super);
  function RangeHandle() {
    var _this = _super.call(this, RangeHandle.TEMPLATE) || this;
    _this.type = agGridCommunity.SelectionHandleType.RANGE;
    _this.rangeFixed = false;
    return _this;
  }
  RangeHandle.prototype.onDrag = function (e) {
    var lastCellHovered = this.getLastCellHovered();
    if (!lastCellHovered) {
      return;
    }
    var cellRanges = this.rangeController.getCellRanges();
    var lastRange = agGridCommunity._.last(cellRanges);
    if (!this.rangeFixed) {
      this.fixRangeStartEnd(lastRange);
      this.rangeFixed = true;
    }
    this.endPosition = {
      rowIndex: lastCellHovered.rowIndex,
      rowPinned: lastCellHovered.rowPinned,
      column: lastCellHovered.column
    };
    // check if the cell ranges are for a chart
    if (cellRanges.length === 2 && cellRanges[0].type === agGridCommunity.CellRangeType.DIMENSION && lastRange.type === agGridCommunity.CellRangeType.VALUE) {
      var rowChanged = !this.rowPositionUtils.sameRow(this.endPosition, this.rangeController.getRangeEndRow(lastRange));
      if (rowChanged) {
        // ensure the dimension range is kept in sync with the value range (which has the handle)
        this.rangeController.updateRangeEnd(cellRanges[0], __assign$k(__assign$k({}, this.endPosition), {
          column: cellRanges[0].columns[0]
        }), true);
      }
    }
    this.rangeController.extendLatestRangeToCell(this.endPosition);
  };
  RangeHandle.prototype.onDragEnd = function (e) {
    var cellRange = agGridCommunity._.last(this.rangeController.getCellRanges());
    this.fixRangeStartEnd(cellRange);
    this.rangeFixed = false;
  };
  RangeHandle.prototype.fixRangeStartEnd = function (cellRange) {
    var startRow = this.rangeController.getRangeStartRow(cellRange);
    var endRow = this.rangeController.getRangeEndRow(cellRange);
    var column = cellRange.columns[0];
    cellRange.startRow = startRow;
    cellRange.endRow = endRow;
    cellRange.startColumn = column;
  };
  RangeHandle.TEMPLATE = "<div class=\"ag-range-handle\"></div>";
  return RangeHandle;
}(AbstractSelectionHandle);
var __extends$2z =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1n =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SelectionHandleFactory = /** @class */function (_super) {
  __extends$2z(SelectionHandleFactory, _super);
  function SelectionHandleFactory() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  SelectionHandleFactory.prototype.createSelectionHandle = function (type) {
    return this.createBean(type === agGridCommunity.SelectionHandleType.RANGE ? new RangeHandle$1() : new FillHandle());
  };
  SelectionHandleFactory = __decorate$1n([agGridCommunity.Bean('selectionHandleFactory')], SelectionHandleFactory);
  return SelectionHandleFactory;
}(agGridCommunity.BeanStub);
var RangeSelectionModule = {
  moduleName: agGridCommunity.ModuleNames.RangeSelectionModule,
  beans: [RangeController, SelectionHandleFactory],
  agStackComponents: [{
    componentName: 'AgFillHandle',
    componentClass: FillHandle
  }, {
    componentName: 'AgRangeHandle',
    componentClass: RangeHandle$1
  }],
  dependantModules: [EnterpriseCoreModule]
};
var GridChartsModule = {
  moduleName: agGridCommunity.ModuleNames.GridChartsModule,
  beans: [ChartService, ChartTranslator, ChartCrossFilter],
  dependantModules: [RangeSelectionModule, EnterpriseCoreModule]
};
var __extends$2A =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1o =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DetailCellRenderer = /** @class */function (_super) {
  __extends$2A(DetailCellRenderer, _super);
  function DetailCellRenderer() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.needRefresh = false;
    _this.loadRowDataVersion = 0;
    return _this;
  }
  DetailCellRenderer.prototype.init = function (params) {
    var _this = this;
    // if embedFullWidthRows=true, then this component could be in a pinned section. we should not show detail
    // component if in the pinned section, on in the main body section.
    if (params.pinned) {
      this.setTemplate('<div class="ag-details-row"></div>');
      return;
    }
    this.params = params;
    var autoHeight = this.gridOptionsWrapper.isDetailRowAutoHeight();
    this.checkForDeprecations();
    this.ensureValidRefreshStrategy();
    this.selectAndSetTemplate(autoHeight);
    if (agGridCommunity._.exists(this.eDetailGrid)) {
      this.addThemeToDetailGrid();
      this.createDetailsGrid(autoHeight);
      this.registerDetailWithMaster();
      this.loadRowData();
    } else {
      console.warn('AG Grid: reference to eDetailGrid was missing from the details template. ' + 'Please add ref="eDetailGrid" to the template.');
    }
    this.addManagedListener(params.node.parent, agGridCommunity.RowNode.EVENT_DATA_CHANGED, function () {
      _this.needRefresh = true;
    });
  };
  DetailCellRenderer.prototype.refresh = function () {
    var GET_GRID_TO_REFRESH = false;
    var GET_GRID_TO_DO_NOTHING = true;
    // if we return true, it means we pretend to the grid
    // that we have refreshed, so refresh will never happen.
    var doNotRefresh = !this.needRefresh || this.params.refreshStrategy === 'nothing';
    if (doNotRefresh) {
      // we do nothing in this refresh method, and also tell the grid to do nothing
      return GET_GRID_TO_DO_NOTHING;
    }
    // reset flag, so don't refresh again until more data changes.
    this.needRefresh = false;
    if (this.params.refreshStrategy === 'everything') {
      // we want full refresh, so tell the grid to destroy and recreate this cell
      return GET_GRID_TO_REFRESH;
    } else {
      // do the refresh here, and tell the grid to do nothing
      this.loadRowData();
      return GET_GRID_TO_DO_NOTHING;
    }
  };
  // this is a user component, and IComponent has "public destroy()" as part of the interface.
  // so we need to override destroy() just to make the method public.
  DetailCellRenderer.prototype.destroy = function () {
    _super.prototype.destroy.call(this);
  };
  DetailCellRenderer.prototype.checkForDeprecations = function () {
    if (this.params.suppressRefresh) {
      console.warn("AG Grid: as of v23.2.0, cellRendererParams.suppressRefresh for Detail Cell Renderer is no " + "longer used. Please set cellRendererParams.refreshStrategy = 'nothing' instead.");
      this.params.refreshStrategy = 'nothing';
    }
  };
  DetailCellRenderer.prototype.ensureValidRefreshStrategy = function () {
    switch (this.params.refreshStrategy) {
      case 'rows':
      case 'nothing':
      case 'everything':
        return;
    }
    // check for incorrectly supplied refresh strategy
    if (this.params.refreshStrategy) {
      console.warn("AG Grid: invalid cellRendererParams.refreshStrategy = '" + this.params.refreshStrategy + "' supplied, defaulting to refreshStrategy = 'rows'.");
    }
    // use default strategy
    this.params.refreshStrategy = 'rows';
  };
  DetailCellRenderer.prototype.addThemeToDetailGrid = function () {
    // this is needed by environment service of the child grid, the class needs to be on
    // the grid div itself - the browser's CSS on the other hand just inherits from the parent grid theme.
    var theme = this.environment.getTheme().theme;
    if (theme) {
      agGridCommunity._.addCssClass(this.eDetailGrid, theme);
    }
  };
  DetailCellRenderer.prototype.registerDetailWithMaster = function () {
    var rowId = this.params.node.id;
    var masterGridApi = this.params.api;
    var gridInfo = {
      id: rowId,
      api: this.detailGridOptions.api,
      columnApi: this.detailGridOptions.columnApi
    };
    var rowNode = this.params.node;
    // register with api
    masterGridApi.addDetailGridInfo(rowId, gridInfo);
    // register with node
    rowNode.detailGridInfo = gridInfo;
    this.addDestroyFunc(function () {
      masterGridApi.removeDetailGridInfo(rowId); // unregister from api
      rowNode.detailGridInfo = null; // unregister from node
    });
  };

  DetailCellRenderer.prototype.selectAndSetTemplate = function (autoHeight) {
    var _this = this;
    var setDefaultTemplate = function () {
      _this.setTemplate(DetailCellRenderer.TEMPLATE);
      _this.addCssClass(autoHeight ? 'ag-details-row-auto-height' : 'ag-details-row-fixed-height');
      agGridCommunity._.addCssClass(_this.eDetailGrid, autoHeight ? 'ag-details-grid-auto-height' : 'ag-details-grid-fixed-height');
    };
    if (agGridCommunity._.missing(this.params.template)) {
      // use default template
      setDefaultTemplate();
    } else {
      // use user provided template
      if (typeof this.params.template === 'string') {
        this.setTemplate(this.params.template);
      } else if (typeof this.params.template === 'function') {
        var templateFunc = this.params.template;
        var template = templateFunc(this.params);
        this.setTemplate(template);
      } else {
        console.warn('AG Grid: detailCellRendererParams.template should be function or string');
        setDefaultTemplate();
      }
    }
  };
  DetailCellRenderer.prototype.createDetailsGrid = function (autoHeight) {
    // we clone the detail grid options, as otherwise it would be shared
    // across many instances, and that would be a problem because we set
    // api and columnApi into gridOptions
    var _this = this;
    var gridOptions = this.params.detailGridOptions;
    if (agGridCommunity._.missing(gridOptions)) {
      console.warn('AG Grid: could not find detail grid options for master detail, ' + 'please set gridOptions.detailCellRendererParams.detailGridOptions');
    }
    // IMPORTANT - gridOptions must be cloned
    this.detailGridOptions = agGridCommunity._.cloneObject(gridOptions);
    if (autoHeight) {
      this.detailGridOptions.domLayout = 'autoHeight';
    }
    // tslint:disable-next-line
    new agGridCommunity.Grid(this.eDetailGrid, this.detailGridOptions, {
      $scope: this.params.$scope,
      $compile: this.params.$compile,
      providedBeanInstances: {
        // a temporary fix for AG-1574
        // AG-1715 raised to do a wider ranging refactor to improve this
        agGridReact: this.params.agGridReact,
        // AG-1716 - directly related to AG-1574 and AG-1715
        frameworkComponentWrapper: this.params.frameworkComponentWrapper
      }
    });
    this.addDestroyFunc(function () {
      if (_this.detailGridOptions.api) {
        _this.detailGridOptions.api.destroy();
      }
    });
  };
  DetailCellRenderer.prototype.loadRowData = function () {
    var _this = this;
    // in case a refresh happens before the last refresh completes (as we depend on async
    // application logic) we keep track on what the latest call was.
    this.loadRowDataVersion++;
    var versionThisCall = this.loadRowDataVersion;
    var userFunc = this.params.getDetailRowData;
    if (!userFunc) {
      console.warn('AG Grid: could not find getDetailRowData for master / detail, ' + 'please set gridOptions.detailCellRendererParams.getDetailRowData');
      return;
    }
    var successCallback = function (rowData) {
      var mostRecentCall = _this.loadRowDataVersion === versionThisCall;
      if (mostRecentCall) {
        _this.setRowData(rowData);
      }
    };
    var funcParams = {
      node: this.params.node,
      // we take data from node, rather than params.data
      // as the data could have been updated with new instance
      data: this.params.node.data,
      successCallback: successCallback,
      context: this.gridOptionsWrapper.getContext()
    };
    userFunc(funcParams);
  };
  DetailCellRenderer.prototype.setRowData = function (rowData) {
    // ensure detail grid api still exists (grid may be destroyed when async call tries to set data)
    if (this.detailGridOptions.api) {
      this.detailGridOptions.api.setRowData(rowData);
    }
  };
  DetailCellRenderer.TEMPLATE = "<div class=\"ag-details-row\">\n            <div ref=\"eDetailGrid\" class=\"ag-details-grid\"></div>\n        </div>";
  __decorate$1o([agGridCommunity.Autowired('environment')], DetailCellRenderer.prototype, "environment", void 0);
  __decorate$1o([agGridCommunity.RefSelector('eDetailGrid')], DetailCellRenderer.prototype, "eDetailGrid", void 0);
  return DetailCellRenderer;
}(agGridCommunity.Component);
var MasterDetailModule = {
  moduleName: agGridCommunity.ModuleNames.MasterDetailModule,
  beans: [],
  userComponents: [{
    componentName: 'agDetailCellRenderer',
    componentClass: DetailCellRenderer
  }],
  dependantModules: [EnterpriseCoreModule]
};
var __extends$2B =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var MenuPanel = /** @class */function (_super) {
  __extends$2B(MenuPanel, _super);
  function MenuPanel(wrappedComponent) {
    var _this = _super.call(this, undefined, true) || this;
    _this.wrappedComponent = wrappedComponent;
    _this.setTemplateFromElement(wrappedComponent.getGui());
    return _this;
  }
  MenuPanel.prototype.handleKeyDown = function (e) {
    if (e.keyCode === agGridCommunity.KeyCode.ESCAPE) {
      this.closePanel();
    }
  };
  MenuPanel.prototype.onTabKeyDown = function (e) {
    _super.prototype.onTabKeyDown.call(this, e);
    if (e.defaultPrevented) {
      return;
    }
    this.closePanel();
    e.preventDefault();
  };
  MenuPanel.prototype.closePanel = function () {
    var menuItem = this.parentComponent;
    menuItem.closeSubMenu();
    setTimeout(function () {
      return menuItem.getGui().focus();
    }, 0);
  };
  return MenuPanel;
}(agGridCommunity.ManagedFocusComponent);
var __extends$2C =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1p =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var MenuItemComponent = /** @class */function (_super) {
  __extends$2C(MenuItemComponent, _super);
  function MenuItemComponent(params) {
    var _this = _super.call(this) || this;
    _this.params = params;
    _this.isActive = false;
    _this.subMenuIsOpen = false;
    _this.setTemplate( /* html */"<div class=\"" + _this.getClassName() + "\" tabindex=\"-1\" role=\"treeitem\"></div>");
    return _this;
  }
  MenuItemComponent.prototype.init = function () {
    var _this = this;
    this.addIcon();
    this.addName();
    this.addShortcut();
    this.addSubMenu();
    this.addTooltip();
    var eGui = this.getGui();
    if (this.params.disabled) {
      this.addCssClass(this.getClassName('disabled'));
      agGridCommunity._.setAriaDisabled(eGui, true);
    } else {
      this.addGuiEventListener('click', function (e) {
        return _this.onItemSelected(e);
      });
      this.addGuiEventListener('keydown', function (e) {
        if (e.keyCode === agGridCommunity.KeyCode.ENTER || e.keyCode === agGridCommunity.KeyCode.SPACE) {
          e.preventDefault();
          _this.onItemSelected(e);
        }
      });
      this.addGuiEventListener('mouseenter', function () {
        return _this.onMouseEnter();
      });
      this.addGuiEventListener('mouseleave', function () {
        return _this.onMouseLeave();
      });
    }
    if (this.params.cssClasses) {
      this.params.cssClasses.forEach(function (it) {
        return agGridCommunity._.addCssClass(eGui, it);
      });
    }
  };
  MenuItemComponent.prototype.isDisabled = function () {
    return !!this.params.disabled;
  };
  MenuItemComponent.prototype.openSubMenu = function (activateFirstItem) {
    var _this = this;
    if (activateFirstItem === void 0) {
      activateFirstItem = false;
    }
    this.closeSubMenu();
    if (!this.params.subMenu) {
      return;
    }
    var ePopup = agGridCommunity._.loadTemplate( /* html */"<div class=\"ag-menu\" role=\"presentation\"></div>");
    var destroySubMenu;
    if (this.params.subMenu instanceof Array) {
      var currentLevel = agGridCommunity._.getAriaLevel(this.getGui());
      var nextLevel = isNaN(currentLevel) ? 1 : currentLevel + 1;
      var childMenu_1 = this.createBean(new MenuList(nextLevel));
      childMenu_1.setParentComponent(this);
      childMenu_1.addMenuItems(this.params.subMenu);
      ePopup.appendChild(childMenu_1.getGui());
      // bubble menu item selected events
      this.addManagedListener(childMenu_1, MenuItemComponent.EVENT_MENU_ITEM_SELECTED, function (e) {
        return _this.dispatchEvent(e);
      });
      childMenu_1.addGuiEventListener('mouseenter', function () {
        return _this.cancelDeactivate();
      });
      destroySubMenu = function () {
        return _this.destroyBean(childMenu_1);
      };
      if (activateFirstItem) {
        setTimeout(function () {
          return childMenu_1.activateFirstItem();
        }, 0);
      }
    } else {
      var subMenu_1 = this.params.subMenu;
      var menuPanel = this.createBean(new MenuPanel(subMenu_1));
      menuPanel.setParentComponent(this);
      var subMenuGui_1 = menuPanel.getGui();
      var mouseEvent_1 = 'mouseenter';
      var mouseEnterListener_1 = function () {
        return _this.cancelDeactivate();
      };
      subMenuGui_1.addEventListener(mouseEvent_1, mouseEnterListener_1);
      destroySubMenu = function () {
        return subMenuGui_1.removeEventListener(mouseEvent_1, mouseEnterListener_1);
      };
      ePopup.appendChild(subMenuGui_1);
      if (subMenu_1.afterGuiAttached) {
        setTimeout(function () {
          return subMenu_1.afterGuiAttached();
        }, 0);
      }
    }
    var eGui = this.getGui();
    var positionCallback = this.popupService.positionPopupForMenu.bind(this.popupService, {
      eventSource: eGui,
      ePopup: ePopup
    });
    var addPopupRes = this.popupService.addPopup({
      modal: true,
      eChild: ePopup,
      positionCallback: positionCallback,
      anchorToElement: eGui
    });
    this.subMenuIsOpen = true;
    agGridCommunity._.setAriaExpanded(eGui, true);
    this.hideSubMenu = function () {
      if (addPopupRes) {
        addPopupRes.hideFunc();
      }
      _this.subMenuIsOpen = false;
      agGridCommunity._.setAriaExpanded(eGui, false);
      destroySubMenu();
    };
  };
  MenuItemComponent.prototype.closeSubMenu = function () {
    if (!this.hideSubMenu) {
      return;
    }
    this.hideSubMenu();
    this.hideSubMenu = null;
    agGridCommunity._.setAriaExpanded(this.getGui(), false);
  };
  MenuItemComponent.prototype.isSubMenuOpen = function () {
    return this.subMenuIsOpen;
  };
  MenuItemComponent.prototype.activate = function (openSubMenu) {
    var _this = this;
    this.cancelActivate();
    if (this.params.disabled) {
      return;
    }
    this.isActive = true;
    this.addCssClass(this.getClassName('active'));
    this.getGui().focus();
    if (openSubMenu && this.params.subMenu) {
      window.setTimeout(function () {
        if (_this.isAlive() && _this.isActive) {
          _this.openSubMenu();
        }
      }, 300);
    }
    this.onItemActivated();
  };
  MenuItemComponent.prototype.deactivate = function () {
    this.cancelDeactivate();
    this.removeCssClass(this.getClassName('active'));
    this.isActive = false;
    if (this.subMenuIsOpen) {
      this.hideSubMenu();
    }
  };
  MenuItemComponent.prototype.addIcon = function () {
    if (!this.params.checked && !this.params.icon && this.params.isCompact) {
      return;
    }
    var icon = agGridCommunity._.loadTemplate( /* html */"<span ref=\"eIcon\" class=\"" + this.getClassName('part') + " " + this.getClassName('icon') + "\" role=\"presentation\"></span>");
    if (this.params.checked) {
      icon.appendChild(agGridCommunity._.createIconNoSpan('check', this.gridOptionsWrapper));
    } else if (this.params.icon) {
      if (agGridCommunity._.isNodeOrElement(this.params.icon)) {
        icon.appendChild(this.params.icon);
      } else if (typeof this.params.icon === 'string') {
        icon.innerHTML = this.params.icon;
      } else {
        console.warn('AG Grid: menu item icon must be DOM node or string');
      }
    }
    this.getGui().appendChild(icon);
  };
  MenuItemComponent.prototype.addName = function () {
    if (!this.params.name && this.params.isCompact) {
      return;
    }
    var name = agGridCommunity._.loadTemplate( /* html */"<span ref=\"eName\" class=\"" + this.getClassName('part') + " " + this.getClassName('text') + "\">" + (this.params.name || '') + "</span>");
    this.getGui().appendChild(name);
  };
  MenuItemComponent.prototype.addTooltip = function () {
    if (!this.params.tooltip) {
      return;
    }
    this.tooltip = this.params.tooltip;
    if (this.gridOptionsWrapper.isEnableBrowserTooltips()) {
      this.getGui().setAttribute('title', this.tooltip);
    } else {
      this.createManagedBean(new agGridCommunity.TooltipFeature(this));
    }
  };
  MenuItemComponent.prototype.getTooltipParams = function () {
    return {
      location: 'menu',
      value: this.tooltip
    };
  };
  MenuItemComponent.prototype.addShortcut = function () {
    if (!this.params.shortcut && this.params.isCompact) {
      return;
    }
    var shortcut = agGridCommunity._.loadTemplate( /* html */"<span ref=\"eShortcut\" class=\"" + this.getClassName('part') + " " + this.getClassName('shortcut') + "\">" + (this.params.shortcut || '') + "</span>");
    this.getGui().appendChild(shortcut);
  };
  MenuItemComponent.prototype.addSubMenu = function () {
    if (!this.params.subMenu && this.params.isCompact) {
      return;
    }
    var pointer = agGridCommunity._.loadTemplate( /* html */"<span ref=\"ePopupPointer\" class=\"" + this.getClassName('part') + " " + this.getClassName('popup-pointer') + "\"></span>");
    var eGui = this.getGui();
    if (this.params.subMenu) {
      var iconName = this.gridOptionsWrapper.isEnableRtl() ? 'smallLeft' : 'smallRight';
      agGridCommunity._.setAriaExpanded(eGui, false);
      pointer.appendChild(agGridCommunity._.createIconNoSpan(iconName, this.gridOptionsWrapper));
    }
    eGui.appendChild(pointer);
  };
  MenuItemComponent.prototype.onItemSelected = function (event) {
    if (this.params.action) {
      this.params.action();
    } else {
      this.openSubMenu(event && event.type === 'keydown');
    }
    if (this.params.subMenu && !this.params.action) {
      return;
    }
    var e = {
      type: MenuItemComponent.EVENT_MENU_ITEM_SELECTED,
      action: this.params.action,
      checked: this.params.checked,
      cssClasses: this.params.cssClasses,
      disabled: this.params.disabled,
      icon: this.params.icon,
      name: this.params.name,
      shortcut: this.params.shortcut,
      subMenu: this.params.subMenu,
      tooltip: this.params.tooltip,
      event: event
    };
    this.dispatchEvent(e);
  };
  MenuItemComponent.prototype.onItemActivated = function () {
    var event = {
      type: MenuItemComponent.EVENT_MENU_ITEM_ACTIVATED,
      menuItem: this
    };
    this.dispatchEvent(event);
  };
  MenuItemComponent.prototype.cancelActivate = function () {
    if (this.activateTimeoutId) {
      window.clearTimeout(this.activateTimeoutId);
      this.activateTimeoutId = 0;
    }
  };
  MenuItemComponent.prototype.cancelDeactivate = function () {
    if (this.deactivateTimeoutId) {
      window.clearTimeout(this.deactivateTimeoutId);
      this.deactivateTimeoutId = 0;
    }
  };
  MenuItemComponent.prototype.onMouseEnter = function () {
    var _this = this;
    this.cancelDeactivate();
    if (this.params.isAnotherSubMenuOpen()) {
      // wait to see if the user enters the open sub-menu
      this.activateTimeoutId = window.setTimeout(function () {
        return _this.activate(true);
      }, MenuItemComponent.ACTIVATION_DELAY);
    } else {
      // activate immediately
      this.activate(true);
    }
  };
  MenuItemComponent.prototype.onMouseLeave = function () {
    var _this = this;
    this.cancelActivate();
    if (this.isSubMenuOpen()) {
      // wait to see if the user enters the sub-menu
      this.deactivateTimeoutId = window.setTimeout(function () {
        return _this.deactivate();
      }, MenuItemComponent.ACTIVATION_DELAY);
    } else {
      // de-activate immediately
      this.deactivate();
    }
  };
  MenuItemComponent.prototype.getClassName = function (suffix) {
    var prefix = this.params.isCompact ? 'ag-compact-menu-option' : 'ag-menu-option';
    return suffix ? prefix + "-" + suffix : prefix;
  };
  MenuItemComponent.EVENT_MENU_ITEM_SELECTED = 'menuItemSelected';
  MenuItemComponent.EVENT_MENU_ITEM_ACTIVATED = 'menuItemActivated';
  MenuItemComponent.ACTIVATION_DELAY = 80;
  __decorate$1p([agGridCommunity.Autowired('popupService')], MenuItemComponent.prototype, "popupService", void 0);
  __decorate$1p([agGridCommunity.PostConstruct], MenuItemComponent.prototype, "init", null);
  return MenuItemComponent;
}(agGridCommunity.Component);
var __extends$2D =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$l =  false || function () {
  __assign$l = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$l.apply(this, arguments);
};
var MenuList = /** @class */function (_super) {
  __extends$2D(MenuList, _super);
  function MenuList(level) {
    if (level === void 0) {
      level = 1;
    }
    var _this = _super.call(this, /* html */"<div class=\"ag-menu-list\" role=\"tree\"></div>", true) || this;
    _this.level = level;
    _this.menuItems = [];
    return _this;
  }
  MenuList.prototype.onTabKeyDown = function (e) {
    var parent = this.getParentComponent();
    var isManaged = parent && parent instanceof agGridCommunity.ManagedFocusComponent;
    if (!isManaged) {
      e.preventDefault();
    }
    if (e.shiftKey) {
      this.closeIfIsChild(e);
    }
  };
  MenuList.prototype.handleKeyDown = function (e) {
    switch (e.keyCode) {
      case agGridCommunity.KeyCode.UP:
      case agGridCommunity.KeyCode.RIGHT:
      case agGridCommunity.KeyCode.DOWN:
      case agGridCommunity.KeyCode.LEFT:
        e.preventDefault();
        this.handleNavKey(e.keyCode);
        break;
      case agGridCommunity.KeyCode.ESCAPE:
        var topMenu = this.findTopMenu();
        if (topMenu) {
          this.focusController.focusInto(topMenu.getGui());
        }
        break;
    }
  };
  MenuList.prototype.clearActiveItem = function () {
    if (this.activeMenuItem) {
      this.activeMenuItem.deactivate();
      this.activeMenuItem = null;
    }
  };
  MenuList.prototype.addMenuItems = function (menuItems) {
    var _this = this;
    if (menuItems == null) {
      return;
    }
    menuItems.forEach(function (menuItemOrString) {
      if (menuItemOrString === 'separator') {
        _this.addSeparator();
      } else if (typeof menuItemOrString === 'string') {
        console.warn("AG Grid: unrecognised menu item " + menuItemOrString);
      } else {
        _this.addItem(menuItemOrString);
      }
    });
  };
  MenuList.prototype.addItem = function (menuItemDef) {
    var _this = this;
    var menuItem = this.createManagedBean(new MenuItemComponent(__assign$l(__assign$l({}, menuItemDef), {
      isAnotherSubMenuOpen: function () {
        return agGridCommunity._.some(_this.menuItems, function (m) {
          return m.isSubMenuOpen();
        });
      }
    })));
    menuItem.setParentComponent(this);
    agGridCommunity._.setAriaLevel(menuItem.getGui(), this.level);
    this.menuItems.push(menuItem);
    this.appendChild(menuItem.getGui());
    this.addManagedListener(menuItem, MenuItemComponent.EVENT_MENU_ITEM_SELECTED, function (event) {
      _this.dispatchEvent(event);
    });
    this.addManagedListener(menuItem, MenuItemComponent.EVENT_MENU_ITEM_ACTIVATED, function (event) {
      if (_this.activeMenuItem && _this.activeMenuItem !== event.menuItem) {
        _this.activeMenuItem.deactivate();
      }
      _this.activeMenuItem = event.menuItem;
    });
  };
  MenuList.prototype.activateFirstItem = function () {
    var item = this.menuItems.filter(function (currentItem) {
      return !currentItem.isDisabled();
    })[0];
    if (!item) {
      return;
    }
    item.activate();
  };
  MenuList.prototype.addSeparator = function () {
    var separatorHtml = /* html */"\n            <div class=\"ag-menu-separator\" aria-hidden=\"true\">\n                <div class=\"ag-menu-separator-part\"></div>\n                <div class=\"ag-menu-separator-part\"></div>\n                <div class=\"ag-menu-separator-part\"></div>\n                <div class=\"ag-menu-separator-part\"></div>\n            </div>";
    this.appendChild(agGridCommunity._.loadTemplate(separatorHtml));
  };
  MenuList.prototype.findTopMenu = function () {
    var parent = this.getParentComponent();
    if (!parent && this instanceof MenuList) {
      return this;
    }
    while (true) {
      var nextParent = parent && parent.getParentComponent && parent.getParentComponent();
      if (!nextParent || !(nextParent instanceof MenuList || nextParent instanceof MenuItemComponent)) {
        break;
      }
      parent = nextParent;
    }
    return parent instanceof MenuList ? parent : undefined;
  };
  MenuList.prototype.handleNavKey = function (key) {
    switch (key) {
      case agGridCommunity.KeyCode.UP:
      case agGridCommunity.KeyCode.DOWN:
        var nextItem = this.findNextItem(key === agGridCommunity.KeyCode.UP);
        if (nextItem && nextItem !== this.activeMenuItem) {
          nextItem.activate();
        }
        return;
    }
    var left = this.gridOptionsWrapper.isEnableRtl() ? agGridCommunity.KeyCode.RIGHT : agGridCommunity.KeyCode.LEFT;
    if (key === left) {
      this.closeIfIsChild();
    } else {
      this.openChild();
    }
  };
  MenuList.prototype.closeIfIsChild = function (e) {
    var parentItem = this.getParentComponent();
    if (parentItem && parentItem instanceof MenuItemComponent) {
      if (e) {
        e.preventDefault();
      }
      parentItem.closeSubMenu();
      parentItem.getGui().focus();
    }
  };
  MenuList.prototype.openChild = function () {
    if (this.activeMenuItem) {
      this.activeMenuItem.openSubMenu(true);
    }
  };
  MenuList.prototype.findNextItem = function (up) {
    var items = this.menuItems.filter(function (item) {
      return !item.isDisabled();
    });
    if (!items.length) {
      return;
    }
    if (!this.activeMenuItem) {
      return up ? agGridCommunity._.last(items) : items[0];
    }
    if (up) {
      items.reverse();
    }
    var nextItem;
    var foundCurrent = false;
    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      if (!foundCurrent) {
        if (item === this.activeMenuItem) {
          foundCurrent = true;
        }
        continue;
      }
      nextItem = item;
      break;
    }
    return nextItem || this.activeMenuItem;
  };
  MenuList.prototype.destroy = function () {
    this.clearActiveItem();
    _super.prototype.destroy.call(this);
  };
  return MenuList;
}(agGridCommunity.ManagedFocusComponent);
var __extends$2E =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1q =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var EnterpriseMenuFactory = /** @class */function (_super) {
  __extends$2E(EnterpriseMenuFactory, _super);
  function EnterpriseMenuFactory() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  EnterpriseMenuFactory.prototype.registerGridComp = function (gridBodyComp) {
    this.gridBodyComp = gridBodyComp;
  };
  EnterpriseMenuFactory.prototype.hideActiveMenu = function () {
    this.destroyBean(this.activeMenu);
  };
  EnterpriseMenuFactory.prototype.showMenuAfterMouseEvent = function (column, mouseEvent, defaultTab) {
    var _this = this;
    this.showMenu(column, function (menu) {
      var ePopup = menu.getGui();
      _this.popupService.positionPopupUnderMouseEvent({
        type: 'columnMenu',
        column: column,
        mouseEvent: mouseEvent,
        ePopup: ePopup
      });
      if (defaultTab) {
        menu.showTab(defaultTab);
      }
    }, defaultTab, undefined, mouseEvent.target);
  };
  EnterpriseMenuFactory.prototype.showMenuAfterButtonClick = function (column, eventSource, defaultTab, restrictToTabs) {
    var _this = this;
    var multiplier = -1;
    var alignSide = 'left';
    if (this.gridOptionsWrapper.isEnableRtl()) {
      multiplier = 1;
      alignSide = 'right';
    }
    this.showMenu(column, function (menu) {
      var minDims = menu.getMinDimensions();
      var minWidth = minDims.width,
        minHeight = minDims.height;
      var ePopup = menu.getGui();
      _this.popupService.positionPopupUnderComponent({
        type: 'columnMenu',
        column: column,
        eventSource: eventSource,
        ePopup: ePopup,
        minWidth: minWidth,
        minHeight: minHeight,
        alignSide: alignSide,
        nudgeX: 9 * multiplier,
        nudgeY: -23,
        keepWithinBounds: true
      });
      if (defaultTab) {
        menu.showTab(defaultTab);
      }
    }, defaultTab, restrictToTabs, eventSource);
  };
  EnterpriseMenuFactory.prototype.showMenu = function (column, positionCallback, defaultTab, restrictToTabs, eventSource) {
    var _this = this;
    var menu = this.createBean(new EnterpriseMenu(column, this.lastSelectedTab, restrictToTabs));
    var eMenuGui = menu.getGui();
    var anchorToElement = eventSource || this.gridBodyComp.getGui();
    var closedFuncs = [];
    closedFuncs.push(function (e) {
      _this.destroyBean(menu);
      column.setMenuVisible(false, 'contextMenu');
      var isKeyboardEvent = e instanceof KeyboardEvent;
      if (isKeyboardEvent && eventSource && agGridCommunity._.isVisible(eventSource)) {
        var focusableEl = _this.focusController.findTabbableParent(eventSource);
        if (focusableEl) {
          focusableEl.focus();
        }
      }
    });
    // need to show filter before positioning, as only after filter
    // is visible can we find out what the width of it is
    var addPopupRes = this.popupService.addPopup({
      modal: true,
      eChild: eMenuGui,
      closeOnEsc: true,
      closedCallback: function (e) {
        closedFuncs.forEach(function (f) {
          return f(e);
        });
      },
      afterGuiAttached: function (params) {
        return menu.afterGuiAttached(params);
      },
      positionCallback: function () {
        return positionCallback(menu);
      },
      anchorToElement: anchorToElement
    });
    if (addPopupRes) {
      // if user starts showing / hiding columns, or otherwise move the underlying column
      // for this menu, we want to stop tracking the menu with the column position. otherwise
      // the menu would move as the user is using the columns tab inside the menu.
      var stopAnchoringFunc_1 = addPopupRes.stopAnchoringFunc;
      if (stopAnchoringFunc_1) {
        column.addEventListener(agGridCommunity.Column.EVENT_LEFT_CHANGED, stopAnchoringFunc_1);
        column.addEventListener(agGridCommunity.Column.EVENT_VISIBLE_CHANGED, stopAnchoringFunc_1);
        closedFuncs.push(function () {
          column.removeEventListener(agGridCommunity.Column.EVENT_LEFT_CHANGED, stopAnchoringFunc_1);
          column.removeEventListener(agGridCommunity.Column.EVENT_VISIBLE_CHANGED, stopAnchoringFunc_1);
        });
      }
    }
    if (!defaultTab) {
      menu.showTabBasedOnPreviousSelection();
    }
    menu.addEventListener(EnterpriseMenu.EVENT_TAB_SELECTED, function (event) {
      _this.lastSelectedTab = event.key;
    });
    column.setMenuVisible(true, 'contextMenu');
    this.activeMenu = menu;
    menu.addEventListener(agGridCommunity.BeanStub.EVENT_DESTROYED, function () {
      if (_this.activeMenu === menu) {
        _this.activeMenu = null;
      }
    });
  };
  EnterpriseMenuFactory.prototype.isMenuEnabled = function (column) {
    return column.getMenuTabs(EnterpriseMenu.TABS_DEFAULT).length > 0;
  };
  __decorate$1q([agGridCommunity.Autowired('popupService')], EnterpriseMenuFactory.prototype, "popupService", void 0);
  __decorate$1q([agGridCommunity.Autowired('focusController')], EnterpriseMenuFactory.prototype, "focusController", void 0);
  EnterpriseMenuFactory = __decorate$1q([agGridCommunity.Bean('menuFactory')], EnterpriseMenuFactory);
  return EnterpriseMenuFactory;
}(agGridCommunity.BeanStub);
var EnterpriseMenu = /** @class */function (_super) {
  __extends$2E(EnterpriseMenu, _super);
  function EnterpriseMenu(column, initialSelection, restrictTo) {
    var _this = _super.call(this) || this;
    _this.tabFactories = {};
    _this.includeChecks = {};
    _this.timeOfLastColumnChange = Date.now();
    _this.column = column;
    _this.initialSelection = initialSelection;
    _this.tabFactories[EnterpriseMenu.TAB_GENERAL] = _this.createMainPanel.bind(_this);
    _this.tabFactories[EnterpriseMenu.TAB_FILTER] = _this.createFilterPanel.bind(_this);
    _this.tabFactories[EnterpriseMenu.TAB_COLUMNS] = _this.createColumnsPanel.bind(_this);
    _this.includeChecks[EnterpriseMenu.TAB_GENERAL] = function () {
      return true;
    };
    _this.includeChecks[EnterpriseMenu.TAB_FILTER] = function () {
      return column.isFilterAllowed();
    };
    _this.includeChecks[EnterpriseMenu.TAB_COLUMNS] = function () {
      return true;
    };
    _this.restrictTo = restrictTo;
    return _this;
  }
  EnterpriseMenu.prototype.getMinDimensions = function () {
    return this.tabbedLayout.getMinDimensions();
  };
  EnterpriseMenu.prototype.init = function () {
    var _this = this;
    var tabs = this.getTabsToCreate().map(function (name) {
      return _this.createTab(name);
    });
    this.tabbedLayout = new agGridCommunity.TabbedLayout({
      items: tabs,
      cssClass: 'ag-menu',
      onActiveItemClicked: this.onHidePopup.bind(this),
      onItemClicked: this.onTabItemClicked.bind(this)
    });
    this.createBean(this.tabbedLayout);
    if (this.mainMenuList) {
      this.mainMenuList.setParentComponent(this.tabbedLayout);
    }
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
  };
  EnterpriseMenu.prototype.getTabsToCreate = function () {
    var _this = this;
    if (this.restrictTo) {
      return this.restrictTo;
    }
    return this.column.getMenuTabs(EnterpriseMenu.TABS_DEFAULT).filter(function (tabName) {
      return _this.isValidMenuTabItem(tabName);
    }).filter(function (tabName) {
      return _this.isNotSuppressed(tabName);
    }).filter(function (tabName) {
      return _this.isModuleLoaded(tabName);
    });
  };
  EnterpriseMenu.prototype.isModuleLoaded = function (menuTabName) {
    if (menuTabName === EnterpriseMenu.TAB_COLUMNS) {
      return agGridCommunity.ModuleRegistry.isRegistered(agGridCommunity.ModuleNames.ColumnToolPanelModule);
    }
    return true;
  };
  EnterpriseMenu.prototype.isValidMenuTabItem = function (menuTabName) {
    var isValid = true;
    var itemsToConsider = EnterpriseMenu.TABS_DEFAULT;
    if (this.restrictTo != null) {
      isValid = this.restrictTo.indexOf(menuTabName) > -1;
      itemsToConsider = this.restrictTo;
    }
    isValid = isValid && EnterpriseMenu.TABS_DEFAULT.indexOf(menuTabName) > -1;
    if (!isValid) {
      console.warn("Trying to render an invalid menu item '" + menuTabName + "'. Check that your 'menuTabs' contains one of [" + itemsToConsider + "]");
    }
    return isValid;
  };
  EnterpriseMenu.prototype.isNotSuppressed = function (menuTabName) {
    return this.includeChecks[menuTabName]();
  };
  EnterpriseMenu.prototype.createTab = function (name) {
    return this.tabFactories[name]();
  };
  EnterpriseMenu.prototype.showTabBasedOnPreviousSelection = function () {
    // show the tab the user was on last time they had a menu open
    this.showTab(this.initialSelection);
  };
  EnterpriseMenu.prototype.showTab = function (toShow) {
    if (this.tabItemColumns && toShow === EnterpriseMenu.TAB_COLUMNS) {
      this.tabbedLayout.showItem(this.tabItemColumns);
    } else if (this.tabItemFilter && toShow === EnterpriseMenu.TAB_FILTER) {
      this.tabbedLayout.showItem(this.tabItemFilter);
    } else if (this.tabItemGeneral && toShow === EnterpriseMenu.TAB_GENERAL) {
      this.tabbedLayout.showItem(this.tabItemGeneral);
    } else {
      this.tabbedLayout.showFirstItem();
    }
  };
  EnterpriseMenu.prototype.onTabItemClicked = function (event) {
    var key = null;
    switch (event.item) {
      case this.tabItemColumns:
        key = EnterpriseMenu.TAB_COLUMNS;
        break;
      case this.tabItemFilter:
        key = EnterpriseMenu.TAB_FILTER;
        break;
      case this.tabItemGeneral:
        key = EnterpriseMenu.TAB_GENERAL;
        break;
    }
    if (key) {
      this.activateTab(key);
    }
  };
  EnterpriseMenu.prototype.activateTab = function (tab) {
    var ev = {
      type: EnterpriseMenu.EVENT_TAB_SELECTED,
      key: tab
    };
    this.dispatchEvent(ev);
  };
  EnterpriseMenu.prototype.getMenuItems = function () {
    var defaultMenuOptions = this.getDefaultMenuOptions();
    var result;
    var userFunc = this.gridOptionsWrapper.getMainMenuItemsFunc();
    if (userFunc) {
      result = userFunc({
        column: this.column,
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        context: this.gridOptionsWrapper.getContext(),
        defaultItems: defaultMenuOptions
      });
    } else {
      result = defaultMenuOptions;
    }
    // GUI looks weird when two separators are side by side. this can happen accidentally
    // if we remove items from the menu then two separators can edit up adjacent.
    agGridCommunity._.removeRepeatsFromArray(result, EnterpriseMenu.MENU_ITEM_SEPARATOR);
    return result;
  };
  EnterpriseMenu.prototype.getDefaultMenuOptions = function () {
    var result = [];
    var allowPinning = !this.column.getColDef().lockPinned;
    var rowGroupCount = this.columnController.getRowGroupColumns().length;
    var doingGrouping = rowGroupCount > 0;
    var groupedByThisColumn = this.columnController.getRowGroupColumns().indexOf(this.column) >= 0;
    var allowValue = this.column.isAllowValue();
    var allowRowGroup = this.column.isAllowRowGroup();
    var isPrimary = this.column.isPrimary();
    var pivotModeOn = this.columnController.isPivotMode();
    var isInMemoryRowModel = this.rowModel.getType() === agGridCommunity.Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
    var usingTreeData = this.gridOptionsWrapper.isTreeData();
    var allowValueAgg =
    // if primary, then only allow aggValue if grouping and it's a value columns
    isPrimary && doingGrouping && allowValue
    // secondary columns can always have aggValue, as it means it's a pivot value column
    || !isPrimary;
    if (allowPinning) {
      result.push('pinSubMenu');
    }
    if (allowValueAgg) {
      result.push('valueAggSubMenu');
    }
    if (allowPinning || allowValueAgg) {
      result.push(EnterpriseMenu.MENU_ITEM_SEPARATOR);
    }
    result.push('autoSizeThis');
    result.push('autoSizeAll');
    result.push(EnterpriseMenu.MENU_ITEM_SEPARATOR);
    if (allowRowGroup && this.column.isPrimary()) {
      if (groupedByThisColumn) {
        result.push('rowUnGroup');
      } else {
        result.push('rowGroup');
      }
    }
    result.push(EnterpriseMenu.MENU_ITEM_SEPARATOR);
    result.push('resetColumns');
    // only add grouping expand/collapse if grouping in the InMemoryRowModel
    // if pivoting, we only have expandable groups if grouping by 2 or more columns
    // as the lowest level group is not expandable while pivoting.
    // if not pivoting, then any active row group can be expanded.
    var allowExpandAndContract = isInMemoryRowModel && (usingTreeData || rowGroupCount > (pivotModeOn ? 1 : 0));
    if (allowExpandAndContract) {
      result.push('expandAll');
      result.push('contractAll');
    }
    return result;
  };
  EnterpriseMenu.prototype.createMainPanel = function () {
    this.mainMenuList = this.createManagedBean(new MenuList());
    var menuItems = this.getMenuItems();
    var menuItemsMapped = this.menuItemMapper.mapWithStockItems(menuItems, this.column);
    this.mainMenuList.addMenuItems(menuItemsMapped);
    this.mainMenuList.addEventListener(MenuItemComponent.EVENT_MENU_ITEM_SELECTED, this.onHidePopup.bind(this));
    this.tabItemGeneral = {
      title: agGridCommunity._.createIconNoSpan('menu', this.gridOptionsWrapper, this.column),
      titleLabel: EnterpriseMenu.TAB_GENERAL.replace('MenuTab', ''),
      bodyPromise: agGridCommunity.AgPromise.resolve(this.mainMenuList.getGui()),
      name: EnterpriseMenu.TAB_GENERAL
    };
    return this.tabItemGeneral;
  };
  EnterpriseMenu.prototype.onHidePopup = function () {
    this.hidePopupFunc();
    // this method only gets called when the menu was closed by selection an option
    // in this case we highlight the cell that was previously highlighted
    var focusedCell = this.focusController.getFocusedCell();
    if (focusedCell) {
      var rowIndex = focusedCell.rowIndex,
        rowPinned = focusedCell.rowPinned,
        column = focusedCell.column;
      this.focusController.setFocusedCell(rowIndex, column, rowPinned, true);
    }
  };
  EnterpriseMenu.prototype.createFilterPanel = function () {
    var filterWrapper = this.filterManager.getOrCreateFilterWrapper(this.column, 'COLUMN_MENU');
    var afterFilterAttachedCallback = function (params) {
      if (!filterWrapper.filterPromise) {
        return;
      }
      // slightly odd block this - this promise will always have been resolved by the time it gets here, so won't be
      // async (_unless_ in react or similar, but if so why not encountered before now?).
      // I'd suggest a future improvement would be to remove/replace this promise as this block just wont work if it is
      // async and is confusing if you don't have this context
      filterWrapper.filterPromise.then(function (filter) {
        if (filter && filter.afterGuiAttached) {
          filter.afterGuiAttached(params);
        }
      });
    };
    this.tabItemFilter = {
      title: agGridCommunity._.createIconNoSpan('filter', this.gridOptionsWrapper, this.column),
      titleLabel: EnterpriseMenu.TAB_FILTER.replace('MenuTab', ''),
      bodyPromise: filterWrapper.guiPromise,
      afterAttachedCallback: afterFilterAttachedCallback,
      name: EnterpriseMenu.TAB_FILTER
    };
    return this.tabItemFilter;
  };
  EnterpriseMenu.prototype.createColumnsPanel = function () {
    var eWrapperDiv = document.createElement('div');
    agGridCommunity._.addCssClass(eWrapperDiv, 'ag-menu-column-select-wrapper');
    this.columnSelectPanel = this.createManagedBean(new PrimaryColsPanel());
    var columnsMenuParams = this.column.getColDef().columnsMenuParams;
    if (!columnsMenuParams) {
      columnsMenuParams = {};
    }
    this.columnSelectPanel.init(false, {
      suppressValues: false,
      suppressPivots: false,
      suppressRowGroups: false,
      suppressPivotMode: false,
      contractColumnSelection: !!columnsMenuParams.contractColumnSelection,
      suppressColumnExpandAll: !!columnsMenuParams.suppressColumnExpandAll,
      suppressColumnFilter: !!columnsMenuParams.suppressColumnFilter,
      suppressColumnSelectAll: !!columnsMenuParams.suppressColumnSelectAll,
      suppressSyncLayoutWithGrid: !!columnsMenuParams.suppressSyncLayoutWithGrid,
      api: this.gridApi,
      columnApi: this.columnApi
    }, 'columnMenu');
    agGridCommunity._.addCssClass(this.columnSelectPanel.getGui(), 'ag-menu-column-select');
    eWrapperDiv.appendChild(this.columnSelectPanel.getGui());
    this.tabItemColumns = {
      title: agGridCommunity._.createIconNoSpan('columns', this.gridOptionsWrapper, this.column),
      titleLabel: EnterpriseMenu.TAB_COLUMNS.replace('MenuTab', ''),
      bodyPromise: agGridCommunity.AgPromise.resolve(eWrapperDiv),
      name: EnterpriseMenu.TAB_COLUMNS
    };
    return this.tabItemColumns;
  };
  EnterpriseMenu.prototype.afterGuiAttached = function (params) {
    var hidePopup = params.hidePopup;
    this.tabbedLayout.setAfterAttachedParams({
      container: 'columnMenu',
      hidePopup: hidePopup
    });
    this.hidePopupFunc = hidePopup;
    this.addDestroyFunc(hidePopup);
  };
  EnterpriseMenu.prototype.getGui = function () {
    return this.tabbedLayout.getGui();
  };
  EnterpriseMenu.prototype.onDisplayedColumnsChanged = function () {
    this.timeOfLastColumnChange = Date.now();
  };
  EnterpriseMenu.EVENT_TAB_SELECTED = 'tabSelected';
  EnterpriseMenu.TAB_FILTER = 'filterMenuTab';
  EnterpriseMenu.TAB_GENERAL = 'generalMenuTab';
  EnterpriseMenu.TAB_COLUMNS = 'columnsMenuTab';
  EnterpriseMenu.TABS_DEFAULT = [EnterpriseMenu.TAB_GENERAL, EnterpriseMenu.TAB_FILTER, EnterpriseMenu.TAB_COLUMNS];
  EnterpriseMenu.MENU_ITEM_SEPARATOR = 'separator';
  __decorate$1q([agGridCommunity.Autowired('columnController')], EnterpriseMenu.prototype, "columnController", void 0);
  __decorate$1q([agGridCommunity.Autowired('filterManager')], EnterpriseMenu.prototype, "filterManager", void 0);
  __decorate$1q([agGridCommunity.Autowired('gridApi')], EnterpriseMenu.prototype, "gridApi", void 0);
  __decorate$1q([agGridCommunity.Autowired('columnApi')], EnterpriseMenu.prototype, "columnApi", void 0);
  __decorate$1q([agGridCommunity.Autowired('menuItemMapper')], EnterpriseMenu.prototype, "menuItemMapper", void 0);
  __decorate$1q([agGridCommunity.Autowired('rowModel')], EnterpriseMenu.prototype, "rowModel", void 0);
  __decorate$1q([agGridCommunity.Autowired('focusController')], EnterpriseMenu.prototype, "focusController", void 0);
  __decorate$1q([agGridCommunity.PostConstruct], EnterpriseMenu.prototype, "init", null);
  return EnterpriseMenu;
}(agGridCommunity.BeanStub);
var __extends$2F =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1r =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CSS_MENU = 'ag-menu';
var CSS_CONTEXT_MENU_OPEN = ' ag-context-menu-open';
var ContextMenuFactory = /** @class */function (_super) {
  __extends$2F(ContextMenuFactory, _super);
  function ContextMenuFactory() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ContextMenuFactory.prototype.registerGridComp = function (gridBodyComp) {
    this.gridBodyComp = gridBodyComp;
  };
  ContextMenuFactory.prototype.hideActiveMenu = function () {
    this.destroyBean(this.activeMenu);
  };
  ContextMenuFactory.prototype.getMenuItems = function (node, column, value) {
    var defaultMenuOptions = [];
    if (agGridCommunity._.exists(node) && agGridCommunity.ModuleRegistry.isRegistered(agGridCommunity.ModuleNames.ClipboardModule)) {
      if (column) {
        // only makes sense if column exists, could have originated from a row
        defaultMenuOptions.push('copy', 'copyWithHeaders', 'paste', 'separator');
      }
    }
    if (this.gridOptionsWrapper.isEnableCharts() && agGridCommunity.ModuleRegistry.isRegistered(agGridCommunity.ModuleNames.RangeSelectionModule) && agGridCommunity.ModuleRegistry.isRegistered(agGridCommunity.ModuleNames.GridChartsModule)) {
      if (this.columnController.isPivotMode()) {
        defaultMenuOptions.push('pivotChart');
      }
      if (this.rangeController && !this.rangeController.isEmpty()) {
        defaultMenuOptions.push('chartRange');
      }
    }
    if (agGridCommunity._.exists(node)) {
      // if user clicks a cell
      var csvModuleMissing = !agGridCommunity.ModuleRegistry.isRegistered(agGridCommunity.ModuleNames.CsvExportModule);
      var excelModuleMissing = !agGridCommunity.ModuleRegistry.isRegistered(agGridCommunity.ModuleNames.ExcelExportModule);
      var suppressExcel = this.gridOptionsWrapper.isSuppressExcelExport() || excelModuleMissing;
      var suppressCsv = this.gridOptionsWrapper.isSuppressCsvExport() || csvModuleMissing;
      var onIPad = agGridCommunity._.isIOSUserAgent();
      var anyExport = !onIPad && (!suppressExcel || !suppressCsv);
      if (anyExport) {
        defaultMenuOptions.push('export');
      }
    }
    if (this.gridOptionsWrapper.getContextMenuItemsFunc()) {
      var userFunc = this.gridOptionsWrapper.getContextMenuItemsFunc();
      var params = {
        node: node,
        column: column,
        value: value,
        defaultItems: defaultMenuOptions.length ? defaultMenuOptions : undefined,
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        context: this.gridOptionsWrapper.getContext()
      };
      return userFunc ? userFunc(params) : undefined;
    }
    return defaultMenuOptions;
  };
  ContextMenuFactory.prototype.onContextMenu = function (mouseEvent, touchEvent, rowNode, column, value, anchorToElement) {
    // to allow us to debug in chrome, we ignore the event if ctrl is pressed.
    // not everyone wants this, so first 'if' below allows to turn this hack off.
    if (!this.gridOptionsWrapper.isAllowContextMenuWithControlKey()) {
      // then do the check
      if (mouseEvent && (mouseEvent.ctrlKey || mouseEvent.metaKey)) {
        return;
      }
    }
    if (this.gridOptionsWrapper.isSuppressContextMenu()) {
      return;
    }
    var eventOrTouch = mouseEvent ? mouseEvent : touchEvent.touches[0];
    if (this.showMenu(rowNode, column, value, eventOrTouch, anchorToElement)) {
      var event_1 = mouseEvent ? mouseEvent : touchEvent;
      event_1.preventDefault();
    }
    if (mouseEvent) {
      this.preventDefaultOnContextMenu(mouseEvent);
    }
  };
  ContextMenuFactory.prototype.preventDefaultOnContextMenu = function (mouseEvent) {
    // if we don't do this, then middle click will never result in a 'click' event, as 'mousedown'
    // will be consumed by the browser to mean 'scroll' (as you can scroll with the middle mouse
    // button in the browser). so this property allows the user to receive middle button clicks if
    // they want.
    var gridOptionsWrapper = this.gridOptionsWrapper;
    var which = mouseEvent.which;
    if (gridOptionsWrapper.isPreventDefaultOnContextMenu() || gridOptionsWrapper.isSuppressMiddleClickScrolls() && which === 2) {
      mouseEvent.preventDefault();
    }
  };
  ContextMenuFactory.prototype.showMenu = function (node, column, value, mouseEvent, anchorToElement) {
    var _this = this;
    var menuItems = this.getMenuItems(node, column, value);
    var eGridBodyGui = this.gridBodyComp.getGui();
    if (menuItems === undefined || agGridCommunity._.missingOrEmpty(menuItems)) {
      return false;
    }
    var menu = new ContextMenu(menuItems);
    this.createBean(menu);
    var eMenuGui = menu.getGui();
    var positionParams = {
      column: column,
      rowNode: node,
      type: 'contextMenu',
      mouseEvent: mouseEvent,
      ePopup: eMenuGui,
      // move one pixel away so that accidentally double clicking
      // won't show the browser's contextmenu
      nudgeX: 1,
      nudgeY: 1
    };
    var positionCallback = this.popupService.positionPopupUnderMouseEvent.bind(this.popupService, positionParams);
    var addPopupRes = this.popupService.addPopup({
      modal: true,
      eChild: eMenuGui,
      closeOnEsc: true,
      closedCallback: function () {
        agGridCommunity._.removeCssClass(eGridBodyGui, CSS_CONTEXT_MENU_OPEN);
        _this.destroyBean(menu);
      },
      click: mouseEvent,
      positionCallback: positionCallback,
      // so when browser is scrolled down, or grid is scrolled, context menu stays with cell
      anchorToElement: anchorToElement
    });
    if (addPopupRes) {
      agGridCommunity._.addCssClass(eGridBodyGui, CSS_CONTEXT_MENU_OPEN);
      menu.afterGuiAttached({
        container: 'contextMenu',
        hidePopup: addPopupRes.hideFunc
      });
    }
    // there should never be an active menu at this point, however it was found
    // that you could right click a second time just 1 or 2 pixels from the first
    // click, and another menu would pop up. so somehow the logic for closing the
    // first menu (clicking outside should close it) was glitchy somehow. an easy
    // way to avoid this is just remove the old context menu here if it exists.
    if (this.activeMenu) {
      this.hideActiveMenu();
    }
    this.activeMenu = menu;
    menu.addEventListener(agGridCommunity.BeanStub.EVENT_DESTROYED, function () {
      if (_this.activeMenu === menu) {
        _this.activeMenu = null;
      }
    });
    // hide the popup if something gets selected
    if (addPopupRes) {
      menu.addEventListener(MenuItemComponent.EVENT_MENU_ITEM_SELECTED, addPopupRes.hideFunc);
    }
    return true;
  };
  __decorate$1r([agGridCommunity.Autowired('popupService')], ContextMenuFactory.prototype, "popupService", void 0);
  __decorate$1r([agGridCommunity.Optional('rangeController')], ContextMenuFactory.prototype, "rangeController", void 0);
  __decorate$1r([agGridCommunity.Autowired('columnController')], ContextMenuFactory.prototype, "columnController", void 0);
  ContextMenuFactory = __decorate$1r([agGridCommunity.Bean('contextMenuFactory')], ContextMenuFactory);
  return ContextMenuFactory;
}(agGridCommunity.BeanStub);
var ContextMenu = /** @class */function (_super) {
  __extends$2F(ContextMenu, _super);
  function ContextMenu(menuItems) {
    var _this = _super.call(this, /* html */"<div class=\"" + CSS_MENU + "\" role=\"presentation\"></div>") || this;
    _this.menuList = null;
    _this.focusedCell = null;
    _this.menuItems = menuItems;
    return _this;
  }
  ContextMenu.prototype.addMenuItems = function () {
    var _this = this;
    var menuList = this.createBean(new MenuList());
    var menuItemsMapped = this.menuItemMapper.mapWithStockItems(this.menuItems, null);
    menuList.addMenuItems(menuItemsMapped);
    this.appendChild(menuList);
    this.menuList = menuList;
    menuList.addEventListener(MenuItemComponent.EVENT_MENU_ITEM_SELECTED, function (e) {
      return _this.dispatchEvent(e);
    });
  };
  ContextMenu.prototype.afterGuiAttached = function (params) {
    if (params.hidePopup) {
      this.addDestroyFunc(params.hidePopup);
    }
    this.focusedCell = this.focusController.getFocusedCell();
    if (this.menuList) {
      this.focusController.focusInto(this.menuList.getGui());
    }
  };
  ContextMenu.prototype.restoreFocusedCell = function () {
    var currentFocusedCell = this.focusController.getFocusedCell();
    if (currentFocusedCell && this.focusedCell && this.cellPositionUtils.equals(currentFocusedCell, this.focusedCell)) {
      var _a = this.focusedCell,
        rowIndex = _a.rowIndex,
        rowPinned = _a.rowPinned,
        column = _a.column;
      var doc = this.gridOptionsWrapper.getDocument();
      if (doc.activeElement === doc.body) {
        this.focusController.setFocusedCell(rowIndex, column, rowPinned, true);
      }
    }
  };
  ContextMenu.prototype.destroy = function () {
    this.restoreFocusedCell();
    _super.prototype.destroy.call(this);
  };
  __decorate$1r([agGridCommunity.Autowired('menuItemMapper')], ContextMenu.prototype, "menuItemMapper", void 0);
  __decorate$1r([agGridCommunity.Autowired('focusController')], ContextMenu.prototype, "focusController", void 0);
  __decorate$1r([agGridCommunity.Autowired('cellPositionUtils')], ContextMenu.prototype, "cellPositionUtils", void 0);
  __decorate$1r([agGridCommunity.PostConstruct], ContextMenu.prototype, "addMenuItems", null);
  return ContextMenu;
}(agGridCommunity.Component);
var __extends$2G =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1s =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var MenuItemMapper = /** @class */function (_super) {
  __extends$2G(MenuItemMapper, _super);
  function MenuItemMapper() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  MenuItemMapper.prototype.mapWithStockItems = function (originalList, column) {
    var _this = this;
    if (!originalList) {
      return [];
    }
    var resultList = [];
    originalList.forEach(function (menuItemOrString) {
      var result;
      if (typeof menuItemOrString === 'string') {
        result = _this.getStockMenuItem(menuItemOrString, column);
      } else {
        result = menuItemOrString;
      }
      // if no mapping, can happen when module is not loaded but user tries to use module anyway
      if (!result) {
        return;
      }
      var resultDef = result;
      var subMenu = resultDef.subMenu;
      if (subMenu && subMenu instanceof Array) {
        resultDef.subMenu = _this.mapWithStockItems(resultDef.subMenu, column);
      }
      if (result != null) {
        resultList.push(result);
      }
    });
    return resultList;
  };
  MenuItemMapper.prototype.getStockMenuItem = function (key, column) {
    var _this = this;
    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
    var skipHeaderOnAutoSize = this.gridOptionsWrapper.isSkipHeaderOnAutoSize();
    switch (key) {
      case 'pinSubMenu':
        return {
          name: localeTextFunc('pinColumn', 'Pin Column'),
          icon: agGridCommunity._.createIconNoSpan('menuPin', this.gridOptionsWrapper, null),
          subMenu: ['pinLeft', 'pinRight', 'clearPinned']
        };
      case 'pinLeft':
        return {
          name: localeTextFunc('pinLeft', 'Pin Left'),
          action: function () {
            return _this.columnController.setColumnPinned(column, agGridCommunity.Constants.PINNED_LEFT, "contextMenu");
          },
          checked: !!column && column.isPinnedLeft()
        };
      case 'pinRight':
        return {
          name: localeTextFunc('pinRight', 'Pin Right'),
          action: function () {
            return _this.columnController.setColumnPinned(column, agGridCommunity.Constants.PINNED_RIGHT, "contextMenu");
          },
          checked: !!column && column.isPinnedRight()
        };
      case 'clearPinned':
        return {
          name: localeTextFunc('noPin', 'No Pin'),
          action: function () {
            return _this.columnController.setColumnPinned(column, null, "contextMenu");
          },
          checked: !!column && !column.isPinned()
        };
      case 'valueAggSubMenu':
        if (agGridCommunity.ModuleRegistry.assertRegistered(agGridCommunity.ModuleNames.RowGroupingModule, 'Aggregation from Menu')) {
          return {
            name: localeTextFunc('valueAggregation', 'Value Aggregation'),
            icon: agGridCommunity._.createIconNoSpan('menuValue', this.gridOptionsWrapper, null),
            subMenu: this.createAggregationSubMenu(column)
          };
        } else {
          return null;
        }
      case 'autoSizeThis':
        return {
          name: localeTextFunc('autosizeThiscolumn', 'Autosize This Column'),
          action: function () {
            return _this.columnController.autoSizeColumn(column, skipHeaderOnAutoSize, "contextMenu");
          }
        };
      case 'autoSizeAll':
        return {
          name: localeTextFunc('autosizeAllColumns', 'Autosize All Columns'),
          action: function () {
            return _this.columnController.autoSizeAllColumns(skipHeaderOnAutoSize, "contextMenu");
          }
        };
      case 'rowGroup':
        return {
          name: localeTextFunc('groupBy', 'Group by') + ' ' + agGridCommunity._.escapeString(this.columnController.getDisplayNameForColumn(column, 'header')),
          action: function () {
            return _this.columnController.addRowGroupColumn(column, "contextMenu");
          },
          icon: agGridCommunity._.createIconNoSpan('menuAddRowGroup', this.gridOptionsWrapper, null)
        };
      case 'rowUnGroup':
        return {
          name: localeTextFunc('ungroupBy', 'Un-Group by') + ' ' + agGridCommunity._.escapeString(this.columnController.getDisplayNameForColumn(column, 'header')),
          action: function () {
            return _this.columnController.removeRowGroupColumn(column, "contextMenu");
          },
          icon: agGridCommunity._.createIconNoSpan('menuRemoveRowGroup', this.gridOptionsWrapper, null)
        };
      case 'resetColumns':
        return {
          name: localeTextFunc('resetColumns', 'Reset Columns'),
          action: function () {
            return _this.columnController.resetColumnState("contextMenu");
          }
        };
      case 'expandAll':
        return {
          name: localeTextFunc('expandAll', 'Expand All'),
          action: function () {
            return _this.gridApi.expandAll();
          }
        };
      case 'contractAll':
        return {
          name: localeTextFunc('collapseAll', 'Collapse All'),
          action: function () {
            return _this.gridApi.collapseAll();
          }
        };
      case 'copy':
        if (agGridCommunity.ModuleRegistry.assertRegistered(agGridCommunity.ModuleNames.ClipboardModule, 'Copy from Menu')) {
          return {
            name: localeTextFunc('copy', 'Copy'),
            shortcut: localeTextFunc('ctrlC', 'Ctrl+C'),
            icon: agGridCommunity._.createIconNoSpan('clipboardCopy', this.gridOptionsWrapper, null),
            action: function () {
              return _this.clipboardService.copyToClipboard(false);
            }
          };
        } else {
          return null;
        }
      case 'copyWithHeaders':
        if (agGridCommunity.ModuleRegistry.assertRegistered(agGridCommunity.ModuleNames.ClipboardModule, 'Copy with Headers from Menu')) {
          return {
            name: localeTextFunc('copyWithHeaders', 'Copy with Headers'),
            // shortcut: localeTextFunc('ctrlC','Ctrl+C'),
            icon: agGridCommunity._.createIconNoSpan('clipboardCopy', this.gridOptionsWrapper, null),
            action: function () {
              return _this.clipboardService.copyToClipboard(true);
            }
          };
        } else {
          return null;
        }
      case 'paste':
        if (agGridCommunity.ModuleRegistry.assertRegistered(agGridCommunity.ModuleNames.ClipboardModule, 'Paste from Clipboard')) {
          return {
            name: localeTextFunc('paste', 'Paste'),
            shortcut: localeTextFunc('ctrlV', 'Ctrl+V'),
            disabled: true,
            icon: agGridCommunity._.createIconNoSpan('clipboardPaste', this.gridOptionsWrapper, null),
            action: function () {
              return _this.clipboardService.pasteFromClipboard();
            }
          };
        } else {
          return null;
        }
      case 'export':
        var exportSubMenuItems = [];
        var csvModuleLoaded = agGridCommunity.ModuleRegistry.isRegistered(agGridCommunity.ModuleNames.CsvExportModule);
        var excelModuleLoaded = agGridCommunity.ModuleRegistry.isRegistered(agGridCommunity.ModuleNames.ExcelExportModule);
        if (!this.gridOptionsWrapper.isSuppressCsvExport() && csvModuleLoaded) {
          exportSubMenuItems.push('csvExport');
        }
        if (!this.gridOptionsWrapper.isSuppressExcelExport() && excelModuleLoaded) {
          exportSubMenuItems.push('excelExport');
        }
        return {
          name: localeTextFunc('export', 'Export'),
          subMenu: exportSubMenuItems,
          icon: agGridCommunity._.createIconNoSpan('save', this.gridOptionsWrapper, null)
        };
      case 'csvExport':
        return {
          name: localeTextFunc('csvExport', 'CSV Export'),
          icon: agGridCommunity._.createIconNoSpan('csvExport', this.gridOptionsWrapper, null),
          action: function () {
            return _this.gridApi.exportDataAsCsv({});
          }
        };
      case 'excelExport':
        return {
          name: localeTextFunc('excelExport', 'Excel Export'),
          icon: agGridCommunity._.createIconNoSpan('excelExport', this.gridOptionsWrapper, null),
          action: function () {
            return _this.gridApi.exportDataAsExcel();
          }
        };
      case 'separator':
        return 'separator';
      default:
        var chartMenuItem = this.getChartItems(key);
        if (chartMenuItem) {
          return chartMenuItem;
        } else {
          console.warn("AG Grid: unknown menu item type " + key);
          return null;
        }
    }
  };
  MenuItemMapper.prototype.getChartItems = function (key) {
    var _this = this;
    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
    var pivotChartMenuItem = function (localeKey, defaultText, chartType) {
      return {
        name: localeTextFunc(localeKey, defaultText),
        action: function () {
          return _this.chartService.createPivotChart({
            chartType: chartType
          });
        }
      };
    };
    var rangeChartMenuItem = function (localeKey, defaultText, chartType) {
      return {
        name: localeTextFunc(localeKey, defaultText),
        action: function () {
          return _this.chartService.createChartFromCurrentRange(chartType);
        }
      };
    };
    switch (key) {
      // case 'pivotChartAndPivotMode':
      //     return {
      //         name: localeTextFunc('pivotChartAndPivotMode', 'Pivot Chart & Pivot Mode&lrm;'),
      //         action: () => this.chartService.pivotChart(ChartType.GroupedColumn),
      //         icon: _.createIconNoSpan('chart', this.gridOptionsWrapper, null)
      //     };
      case 'pivotChart':
        return {
          name: localeTextFunc('pivotChart', 'Pivot Chart'),
          subMenu: ['pivotColumnChart', 'pivotBarChart', 'pivotPieChart', 'pivotLineChart', 'pivotXYChart', 'pivotAreaChart'],
          icon: agGridCommunity._.createIconNoSpan('chart', this.gridOptionsWrapper, null)
        };
      case 'chartRange':
        return {
          name: localeTextFunc('chartRange', 'Chart Range'),
          subMenu: ['rangeColumnChart', 'rangeBarChart', 'rangePieChart', 'rangeLineChart', 'rangeXYChart', 'rangeAreaChart', 'rangeHistogramChart'],
          icon: agGridCommunity._.createIconNoSpan('chart', this.gridOptionsWrapper, null)
        };
      case 'pivotColumnChart':
        return {
          name: localeTextFunc('columnChart', 'Column'),
          subMenu: ['pivotGroupedColumn', 'pivotStackedColumn', 'pivotNormalizedColumn']
        };
      case 'pivotGroupedColumn':
        return pivotChartMenuItem('groupedColumn', 'Grouped&lrm;', agGridCommunity.ChartType.GroupedColumn);
      case 'pivotStackedColumn':
        return pivotChartMenuItem('stackedColumn', 'Stacked&lrm;', agGridCommunity.ChartType.StackedColumn);
      case 'pivotNormalizedColumn':
        return pivotChartMenuItem('normalizedColumn', '100% Stacked&lrm;', agGridCommunity.ChartType.NormalizedColumn);
      case 'rangeColumnChart':
        return {
          name: localeTextFunc('columnChart', 'Column'),
          subMenu: ['rangeGroupedColumn', 'rangeStackedColumn', 'rangeNormalizedColumn']
        };
      case 'rangeGroupedColumn':
        return rangeChartMenuItem('groupedColumn', 'Grouped&lrm;', agGridCommunity.ChartType.GroupedColumn);
      case 'rangeStackedColumn':
        return rangeChartMenuItem('stackedColumn', 'Stacked&lrm;', agGridCommunity.ChartType.StackedColumn);
      case 'rangeNormalizedColumn':
        return rangeChartMenuItem('normalizedColumn', '100% Stacked&lrm;', agGridCommunity.ChartType.NormalizedColumn);
      case 'pivotBarChart':
        return {
          name: localeTextFunc('barChart', 'Bar'),
          subMenu: ['pivotGroupedBar', 'pivotStackedBar', 'pivotNormalizedBar']
        };
      case 'pivotGroupedBar':
        return pivotChartMenuItem('groupedBar', 'Grouped&lrm;', agGridCommunity.ChartType.GroupedBar);
      case 'pivotStackedBar':
        return pivotChartMenuItem('stackedBar', 'Stacked&lrm;', agGridCommunity.ChartType.StackedBar);
      case 'pivotNormalizedBar':
        return pivotChartMenuItem('normalizedBar', '100% Stacked&lrm;', agGridCommunity.ChartType.NormalizedBar);
      case 'rangeBarChart':
        return {
          name: localeTextFunc('barChart', 'Bar'),
          subMenu: ['rangeGroupedBar', 'rangeStackedBar', 'rangeNormalizedBar']
        };
      case 'rangeGroupedBar':
        return rangeChartMenuItem('groupedBar', 'Grouped&lrm;', agGridCommunity.ChartType.GroupedBar);
      case 'rangeStackedBar':
        return rangeChartMenuItem('stackedBar', 'Stacked&lrm;', agGridCommunity.ChartType.StackedBar);
      case 'rangeNormalizedBar':
        return rangeChartMenuItem('normalizedBar', '100% Stacked&lrm;', agGridCommunity.ChartType.NormalizedBar);
      case 'pivotPieChart':
        return {
          name: localeTextFunc('pieChart', 'Pie'),
          subMenu: ['pivotPie', 'pivotDoughnut']
        };
      case 'pivotPie':
        return pivotChartMenuItem('pie', 'Pie&lrm;', agGridCommunity.ChartType.Pie);
      case 'pivotDoughnut':
        return pivotChartMenuItem('doughnut', 'Doughnut&lrm;', agGridCommunity.ChartType.Doughnut);
      case 'rangePieChart':
        return {
          name: localeTextFunc('pieChart', 'Pie'),
          subMenu: ['rangePie', 'rangeDoughnut']
        };
      case 'rangePie':
        return rangeChartMenuItem('pie', 'Pie&lrm;', agGridCommunity.ChartType.Pie);
      case 'rangeDoughnut':
        return rangeChartMenuItem('doughnut', 'Doughnut&lrm;', agGridCommunity.ChartType.Doughnut);
      case 'pivotLineChart':
        return pivotChartMenuItem('line', 'Line&lrm;', agGridCommunity.ChartType.Line);
      case 'rangeLineChart':
        return rangeChartMenuItem('line', 'Line&lrm;', agGridCommunity.ChartType.Line);
      case 'pivotXYChart':
        return {
          name: localeTextFunc('xyChart', 'X Y (Scatter)'),
          subMenu: ['pivotScatter', 'pivotBubble']
        };
      case 'pivotScatter':
        return pivotChartMenuItem('scatter', 'Scatter&lrm;', agGridCommunity.ChartType.Scatter);
      case 'pivotBubble':
        return pivotChartMenuItem('bubble', 'Bubble&lrm;', agGridCommunity.ChartType.Bubble);
      case 'rangeXYChart':
        return {
          name: localeTextFunc('xyChart', 'X Y (Scatter)'),
          subMenu: ['rangeScatter', 'rangeBubble']
        };
      case 'rangeScatter':
        return rangeChartMenuItem('scatter', 'Scatter&lrm;', agGridCommunity.ChartType.Scatter);
      case 'rangeBubble':
        return rangeChartMenuItem('bubble', 'Bubble&lrm;', agGridCommunity.ChartType.Bubble);
      case 'pivotAreaChart':
        return {
          name: localeTextFunc('areaChart', 'Area'),
          subMenu: ['pivotArea', 'pivotStackedArea', 'pivotNormalizedArea']
        };
      case 'pivotArea':
        return pivotChartMenuItem('area', 'Area&lrm;', agGridCommunity.ChartType.Area);
      case 'pivotStackedArea':
        return pivotChartMenuItem('stackedArea', 'Stacked&lrm;', agGridCommunity.ChartType.StackedArea);
      case 'pivotNormalizedArea':
        return pivotChartMenuItem('normalizedArea', '100% Stacked&lrm;', agGridCommunity.ChartType.NormalizedArea);
      case 'rangeAreaChart':
        return {
          name: localeTextFunc('areaChart', 'Area'),
          subMenu: ['rangeArea', 'rangeStackedArea', 'rangeNormalizedArea']
        };
      case 'rangeArea':
        return rangeChartMenuItem('area', 'Area&lrm;', agGridCommunity.ChartType.Area);
      case 'rangeStackedArea':
        return rangeChartMenuItem('stackedArea', 'Stacked&lrm;', agGridCommunity.ChartType.StackedArea);
      case 'rangeNormalizedArea':
        return rangeChartMenuItem('normalizedArea', '100% Stacked&lrm;', agGridCommunity.ChartType.NormalizedArea);
      case 'rangeHistogramChart':
        return rangeChartMenuItem('histogramChart', 'Histogram&lrm;', agGridCommunity.ChartType.Histogram);
      default:
        return null;
    }
  };
  MenuItemMapper.prototype.createAggregationSubMenu = function (column) {
    var _this = this;
    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
    var columnIsAlreadyAggValue = column.isValueActive();
    var funcNames = this.aggFuncService.getFuncNames(column);
    var columnToUse;
    if (column.isPrimary()) {
      columnToUse = column;
    } else {
      var pivotValueColumn = column.getColDef().pivotValueColumn;
      columnToUse = agGridCommunity._.exists(pivotValueColumn) ? pivotValueColumn : undefined;
    }
    var result = [];
    funcNames.forEach(function (funcName) {
      result.push({
        name: localeTextFunc(funcName, funcName),
        action: function () {
          _this.columnController.setColumnAggFunc(columnToUse, funcName, "contextMenu");
          _this.columnController.addValueColumn(columnToUse, "contextMenu");
        },
        checked: columnIsAlreadyAggValue && columnToUse.getAggFunc() === funcName
      });
    });
    return result;
  };
  __decorate$1s([agGridCommunity.Autowired('columnController')], MenuItemMapper.prototype, "columnController", void 0);
  __decorate$1s([agGridCommunity.Autowired('gridApi')], MenuItemMapper.prototype, "gridApi", void 0);
  __decorate$1s([agGridCommunity.Optional('clipboardService')], MenuItemMapper.prototype, "clipboardService", void 0);
  __decorate$1s([agGridCommunity.Optional('aggFuncService')], MenuItemMapper.prototype, "aggFuncService", void 0);
  __decorate$1s([agGridCommunity.Optional('chartService')], MenuItemMapper.prototype, "chartService", void 0);
  MenuItemMapper = __decorate$1s([agGridCommunity.Bean('menuItemMapper')], MenuItemMapper);
  return MenuItemMapper;
}(agGridCommunity.BeanStub);
var MenuModule = {
  moduleName: agGridCommunity.ModuleNames.MenuModule,
  beans: [EnterpriseMenuFactory, ContextMenuFactory, MenuItemMapper],
  dependantModules: [EnterpriseCoreModule]
};
var __extends$2H =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$m =  false || function () {
  __assign$m = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$m.apply(this, arguments);
};
var __decorate$1t =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var MultiFilter = /** @class */function (_super) {
  __extends$2H(MultiFilter, _super);
  function MultiFilter() {
    var _this = _super.call(this, /* html */"<div class=\"ag-multi-filter ag-menu-list-compact\"></div>", true) || this;
    _this.filterDefs = [];
    _this.filters = [];
    _this.guiDestroyFuncs = [];
    _this.activeFilterIndices = [];
    _this.lastActivatedMenuItem = null;
    _this.afterFiltersReadyFuncs = [];
    return _this;
  }
  MultiFilter.getFilterDefs = function (params) {
    var filters = params.filters;
    return filters && filters.length > 0 ? filters : [{
      filter: 'agTextColumnFilter'
    }, {
      filter: 'agSetColumnFilter'
    }];
  };
  MultiFilter.prototype.init = function (params) {
    var _this = this;
    this.params = params;
    this.filterDefs = MultiFilter.getFilterDefs(params);
    var column = params.column,
      filterChangedCallback = params.filterChangedCallback;
    this.column = column;
    this.filterChangedCallback = filterChangedCallback;
    var filterPromises = [];
    agGridCommunity._.forEach(this.filterDefs, function (filterDef, index) {
      var filterPromise = _this.createFilter(filterDef, index);
      if (filterPromise != null) {
        filterPromises.push(filterPromise);
      }
    });
    // we have to refresh the GUI here to ensure that Angular components are not rendered in odd places
    return agGridCommunity.AgPromise.all(filterPromises).then(function (filters) {
      _this.filters = filters;
      _this.refreshGui('columnMenu');
      _this.afterFiltersReadyFuncs.forEach(function (f) {
        return f();
      });
      _this.afterFiltersReadyFuncs.length = 0;
    });
  };
  MultiFilter.prototype.refreshGui = function (container) {
    var _this = this;
    if (container === this.lastOpenedInContainer) {
      return;
    }
    this.clearGui();
    this.destroyChildren();
    agGridCommunity._.forEach(this.filters, function (filter, index) {
      if (index > 0) {
        _this.appendChild(agGridCommunity._.loadTemplate( /* html */"<div class=\"ag-filter-separator\"></div>"));
      }
      var filterDef = _this.filterDefs[index];
      var filterTitle = _this.getFilterTitle(filter, filterDef);
      var filterGui;
      if (filterDef.display === 'subMenu' && container !== 'toolPanel') {
        // prevent sub-menu being used in tool panel
        var menuItem = _this.insertFilterMenu(filter, filterTitle);
        filterGui = menuItem.getGui();
      } else if (filterDef.display === 'subMenu' || filterDef.display === 'accordion') {
        // sub-menus should appear as groups in the tool panel
        var group = _this.insertFilterGroup(filter, filterTitle);
        filterGui = group.getGui();
      } else {
        // display inline
        filterGui = filter.getGui();
      }
      _this.appendChild(filterGui);
    });
    this.lastOpenedInContainer = container;
  };
  MultiFilter.prototype.getFilterTitle = function (filter, filterDef) {
    if (filterDef.title != null) {
      return filterDef.title;
    }
    var filterWithoutType = filter;
    return typeof filterWithoutType.getFilterTitle === 'function' ? filterWithoutType.getFilterTitle() : 'Filter';
  };
  MultiFilter.prototype.destroyChildren = function () {
    agGridCommunity._.forEach(this.guiDestroyFuncs, function (func) {
      return func();
    });
    this.guiDestroyFuncs.length = 0;
  };
  MultiFilter.prototype.insertFilterMenu = function (filter, name) {
    var _this = this;
    var menuItem = this.createBean(new MenuItemComponent({
      name: name,
      subMenu: filter,
      cssClasses: ['ag-multi-filter-menu-item'],
      isCompact: true,
      isAnotherSubMenuOpen: function () {
        return false;
      }
    }));
    menuItem.setParentComponent(this);
    this.guiDestroyFuncs.push(function () {
      return _this.destroyBean(menuItem);
    });
    this.addManagedListener(menuItem, MenuItemComponent.EVENT_MENU_ITEM_ACTIVATED, function (event) {
      if (_this.lastActivatedMenuItem && _this.lastActivatedMenuItem !== event.menuItem) {
        _this.lastActivatedMenuItem.deactivate();
      }
      _this.lastActivatedMenuItem = event.menuItem;
    });
    menuItem.addGuiEventListener('focusin', function () {
      return menuItem.activate();
    });
    menuItem.addGuiEventListener('focusout', function () {
      if (!menuItem.isSubMenuOpen()) {
        menuItem.deactivate();
      }
    });
    return menuItem;
  };
  MultiFilter.prototype.insertFilterGroup = function (filter, title) {
    var _this = this;
    var group = this.createBean(new agGridCommunity.AgGroupComponent({
      title: title,
      cssIdentifier: 'multi-filter'
    }));
    this.guiDestroyFuncs.push(function () {
      return _this.destroyBean(group);
    });
    group.addItem(filter.getGui());
    group.toggleGroupExpand(false);
    if (filter.afterGuiAttached) {
      var params_1 = {
        container: this.lastOpenedInContainer,
        suppressFocus: true
      };
      group.addManagedListener(group, agGridCommunity.AgGroupComponent.EVENT_EXPANDED, function () {
        return filter.afterGuiAttached(params_1);
      });
    }
    return group;
  };
  MultiFilter.prototype.isFilterActive = function () {
    return agGridCommunity._.some(this.filters, function (filter) {
      return filter.isFilterActive();
    });
  };
  MultiFilter.prototype.getLastActiveFilterIndex = function () {
    return this.activeFilterIndices.length > 0 ? this.activeFilterIndices[this.activeFilterIndices.length - 1] : null;
  };
  MultiFilter.prototype.doesFilterPass = function (params, filterToSkip) {
    var rowPasses = true;
    this.filters.forEach(function (filter) {
      if (!rowPasses || filter === filterToSkip || !filter.isFilterActive()) {
        return;
      }
      rowPasses = filter.doesFilterPass(params);
    });
    return rowPasses;
  };
  MultiFilter.prototype.getFilterType = function () {
    return 'multi';
  };
  MultiFilter.prototype.getModelFromUi = function () {
    var model = {
      filterType: this.getFilterType(),
      filterModels: agGridCommunity._.map(this.filters, function (filter) {
        var providedFilter = filter;
        if (typeof providedFilter.getModelFromUi === 'function') {
          return providedFilter.getModelFromUi();
        }
        return null;
      })
    };
    return model;
  };
  MultiFilter.prototype.getModel = function () {
    if (!this.isFilterActive()) {
      return null;
    }
    var model = {
      filterType: this.getFilterType(),
      filterModels: agGridCommunity._.map(this.filters, function (filter) {
        if (filter.isFilterActive()) {
          return filter.getModel();
        }
        return null;
      })
    };
    return model;
  };
  MultiFilter.prototype.setModel = function (model) {
    var _this = this;
    var setFilterModel = function (filter, filterModel) {
      return new agGridCommunity.AgPromise(function (resolve) {
        var promise = filter.setModel(filterModel);
        promise ? promise.then(function () {
          return resolve();
        }) : resolve();
      });
    };
    var promises = [];
    if (model == null) {
      promises = agGridCommunity._.map(this.filters, function (filter, index) {
        var res = setFilterModel(filter, null);
        _this.updateActiveList(index);
        return res;
      });
    } else {
      agGridCommunity._.forEach(this.filters, function (filter, index) {
        var filterModel = model.filterModels.length > index ? model.filterModels[index] : null;
        var res = setFilterModel(filter, filterModel);
        promises.push(res);
        _this.updateActiveList(index);
      });
    }
    return agGridCommunity.AgPromise.all(promises).then(function () {});
  };
  MultiFilter.prototype.getChildFilterInstance = function (index) {
    return this.filters[index];
  };
  MultiFilter.prototype.afterGuiAttached = function (params) {
    if (params) {
      this.refreshGui(params.container);
    }
    var filters = this.params.filters;
    var suppressFocus = filters && agGridCommunity._.some(filters, function (filter) {
      return filter.display && filter.display !== 'inline';
    });
    this.executeFunctionIfExists('afterGuiAttached', __assign$m(__assign$m({}, params || {}), {
      suppressFocus: suppressFocus
    }));
    if (suppressFocus) {
      // reset focus to the top of the container, and blur
      this.forceFocusOutOfContainer(true);
    }
  };
  MultiFilter.prototype.onAnyFilterChanged = function () {
    this.executeFunctionIfExists('onAnyFilterChanged');
  };
  MultiFilter.prototype.onNewRowsLoaded = function () {
    this.executeFunctionIfExists('onNewRowsLoaded');
  };
  MultiFilter.prototype.destroy = function () {
    var _this = this;
    agGridCommunity._.forEach(this.filters, function (filter) {
      filter.setModel(null);
      _this.destroyBean(filter);
    });
    this.filters.length = 0;
    this.destroyChildren();
    _super.prototype.destroy.call(this);
  };
  MultiFilter.prototype.executeFunctionIfExists = function (name) {
    var params = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      params[_i - 1] = arguments[_i];
    }
    // The first filter is always the "dominant" one. By iterating in reverse order we ensure the first filter
    // always gets the last say
    agGridCommunity._.forEachReverse(this.filters, function (filter) {
      var func = filter[name];
      if (typeof func === 'function') {
        func.apply(filter, params);
      }
    });
  };
  MultiFilter.prototype.createFilter = function (filterDef, index) {
    var _this = this;
    var _a = this.params,
      filterModifiedCallback = _a.filterModifiedCallback,
      doesRowPassOtherFilter = _a.doesRowPassOtherFilter;
    var filterInstance;
    var filterParams = __assign$m(__assign$m({}, this.filterManager.createFilterParams(this.column, this.column.getColDef())), {
      filterModifiedCallback: filterModifiedCallback,
      filterChangedCallback: function (additionalEventAttributes) {
        _this.executeWhenAllFiltersReady(function () {
          return _this.filterChanged(index, additionalEventAttributes);
        });
      },
      doesRowPassOtherFilter: function (node) {
        return doesRowPassOtherFilter(node) && _this.doesFilterPass({
          node: node,
          data: node.data
        }, filterInstance);
      }
    });
    var filterPromise = this.userComponentFactory.newFilterComponent(filterDef, filterParams, 'agTextColumnFilter');
    if (filterPromise != null) {
      return filterPromise.then(function (filter) {
        return filterInstance = filter;
      });
    }
    return filterPromise;
  };
  MultiFilter.prototype.executeWhenAllFiltersReady = function (action) {
    if (this.filters && this.filters.length > 0) {
      action();
    } else {
      this.afterFiltersReadyFuncs.push(action);
    }
  };
  MultiFilter.prototype.updateActiveList = function (index) {
    var changedFilter = this.filters[index];
    agGridCommunity._.removeFromArray(this.activeFilterIndices, index);
    if (changedFilter.isFilterActive()) {
      this.activeFilterIndices.push(index);
    }
  };
  MultiFilter.prototype.filterChanged = function (index, additionalEventAttributes) {
    this.updateActiveList(index);
    this.filterChangedCallback(additionalEventAttributes);
    var changedFilter = this.filters[index];
    agGridCommunity._.forEach(this.filters, function (filter) {
      if (filter === changedFilter) {
        return;
      }
      if (typeof filter.onAnyFilterChanged === 'function') {
        filter.onAnyFilterChanged();
      }
    });
  };
  MultiFilter.prototype.onFocusIn = function (e) {
    if (this.lastActivatedMenuItem != null && !this.lastActivatedMenuItem.getGui().contains(e.target)) {
      this.lastActivatedMenuItem.deactivate();
      this.lastActivatedMenuItem = null;
    }
  };
  __decorate$1t([agGridCommunity.Autowired('filterManager')], MultiFilter.prototype, "filterManager", void 0);
  __decorate$1t([agGridCommunity.Autowired('userComponentFactory')], MultiFilter.prototype, "userComponentFactory", void 0);
  return MultiFilter;
}(agGridCommunity.ManagedFocusComponent);
var __extends$2I =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$n =  false || function () {
  __assign$n = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign$n.apply(this, arguments);
};
var __decorate$1u =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var MultiFloatingFilterComp = /** @class */function (_super) {
  __extends$2I(MultiFloatingFilterComp, _super);
  function MultiFloatingFilterComp() {
    var _this = _super.call(this, /* html */"<div class=\"ag-multi-floating-filter ag-floating-filter-input\"></div>") || this;
    _this.floatingFilters = [];
    return _this;
  }
  MultiFloatingFilterComp.prototype.init = function (params) {
    var _this = this;
    this.params = params;
    var filterParams = params.filterParams;
    var floatingFilterPromises = [];
    agGridCommunity._.forEach(MultiFilter.getFilterDefs(filterParams), function (filterDef, index) {
      var floatingFilterParams = __assign$n(__assign$n({}, params), {
        // set the parent filter instance for each floating filter to the relevant child filter instance
        parentFilterInstance: function (callback) {
          params.parentFilterInstance(function (parent) {
            var childFilterInstance = parent.getChildFilterInstance(index);
            callback(childFilterInstance);
          });
        }
      });
      var floatingFilterPromise = _this.createFloatingFilter(filterDef, floatingFilterParams);
      if (floatingFilterPromise != null) {
        floatingFilterPromises.push(floatingFilterPromise);
      }
    });
    return agGridCommunity.AgPromise.all(floatingFilterPromises).then(function (floatingFilters) {
      agGridCommunity._.forEach(floatingFilters, function (floatingFilter, index) {
        _this.floatingFilters.push(floatingFilter);
        var gui = floatingFilter.getGui();
        _this.appendChild(gui);
        if (index > 0) {
          agGridCommunity._.setDisplayed(gui, false);
        }
      });
    });
  };
  MultiFloatingFilterComp.prototype.onParentModelChanged = function (model, event) {
    var _this = this;
    // We don't want to update the floating filter if the floating filter caused the change,
    // because the UI is already in sync. if we didn't do this, the UI would behave strangely
    // as it would be updating as the user is typing
    if (event && event.afterFloatingFilter) {
      return;
    }
    this.params.parentFilterInstance(function (parent) {
      if (model == null) {
        agGridCommunity._.forEach(_this.floatingFilters, function (filter, i) {
          filter.onParentModelChanged(null, event);
          agGridCommunity._.setDisplayed(filter.getGui(), i === 0);
        });
      } else {
        var lastActiveFloatingFilterIndex_1 = parent.getLastActiveFilterIndex();
        agGridCommunity._.forEach(_this.floatingFilters, function (filter, i) {
          var filterModel = model.filterModels.length > i ? model.filterModels[i] : null;
          filter.onParentModelChanged(filterModel, event);
          var shouldShow = lastActiveFloatingFilterIndex_1 == null ? i === 0 : i === lastActiveFloatingFilterIndex_1;
          agGridCommunity._.setDisplayed(filter.getGui(), shouldShow);
        });
      }
    });
  };
  MultiFloatingFilterComp.prototype.destroy = function () {
    this.destroyBeans(this.floatingFilters);
    this.floatingFilters.length = 0;
    _super.prototype.destroy.call(this);
  };
  MultiFloatingFilterComp.prototype.createFloatingFilter = function (filterDef, params) {
    var defaultComponentName = agGridCommunity.FloatingFilterWrapper.getDefaultFloatingFilterType(filterDef) || 'agTextColumnFloatingFilter';
    return this.userComponentFactory.newFloatingFilterComponent(filterDef, params, defaultComponentName);
  };
  __decorate$1u([agGridCommunity.Autowired('userComponentFactory')], MultiFloatingFilterComp.prototype, "userComponentFactory", void 0);
  return MultiFloatingFilterComp;
}(agGridCommunity.Component);
var MultiFilterModule = {
  moduleName: agGridCommunity.ModuleNames.MultiFilterModule,
  beans: [],
  userComponents: [{
    componentName: 'agMultiColumnFilter',
    componentClass: MultiFilter
  }, {
    componentName: 'agMultiColumnFloatingFilter',
    componentClass: MultiFloatingFilterComp
  }],
  dependantModules: [EnterpriseCoreModule]
};
var __extends$2J =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1v =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RichSelectRow = /** @class */function (_super) {
  __extends$2J(RichSelectRow, _super);
  function RichSelectRow(params) {
    var _this = _super.call(this, /* html */"<div class=\"ag-rich-select-row\"></div>") || this;
    _this.params = params;
    return _this;
  }
  RichSelectRow.prototype.setState = function (value, valueFormatted, selected) {
    var rendererSuccessful = this.populateWithRenderer(value, valueFormatted);
    if (!rendererSuccessful) {
      this.populateWithoutRenderer(value, valueFormatted);
    }
    agGridCommunity._.addOrRemoveCssClass(this.getGui(), 'ag-rich-select-row-selected', selected);
  };
  RichSelectRow.prototype.populateWithoutRenderer = function (value, valueFormatted) {
    var valueFormattedExits = valueFormatted !== null && valueFormatted !== undefined;
    var valueToRender = valueFormattedExits ? valueFormatted : value;
    if (agGridCommunity._.exists(valueToRender) && valueToRender !== '') {
      // not using innerHTML to prevent injection of HTML
      // https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML#Security_considerations
      this.getGui().textContent = valueToRender.toString();
    } else {
      // putting in blank, so if missing, at least the user can click on it
      this.getGui().innerHTML = '&nbsp;';
    }
  };
  RichSelectRow.prototype.populateWithRenderer = function (value, valueFormatted) {
    var _this = this;
    // bad coder here - we are not populating all values of the cellRendererParams
    var params = {
      value: value,
      valueFormatted: valueFormatted,
      api: this.gridOptionsWrapper.getApi()
    };
    var cellRendererPromise = this.userComponentFactory.newCellRenderer(this.params, params);
    if (cellRendererPromise != null) {
      agGridCommunity._.bindCellRendererToHtmlElement(cellRendererPromise, this.getGui());
    } else {
      this.getGui().innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
    }
    if (cellRendererPromise) {
      cellRendererPromise.then(function (childComponent) {
        _this.addDestroyFunc(function () {
          _this.getContext().destroyBean(childComponent);
        });
      });
      return true;
    }
    return false;
  };
  __decorate$1v([agGridCommunity.Autowired('userComponentFactory')], RichSelectRow.prototype, "userComponentFactory", void 0);
  return RichSelectRow;
}(agGridCommunity.Component);
var __extends$2K =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1w =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RichSelectCellEditor = /** @class */function (_super) {
  __extends$2K(RichSelectCellEditor, _super);
  function RichSelectCellEditor() {
    var _this = _super.call(this, RichSelectCellEditor.TEMPLATE) || this;
    _this.selectionConfirmed = false;
    _this.searchString = '';
    return _this;
  }
  RichSelectCellEditor.prototype.init = function (params) {
    this.params = params;
    this.selectedValue = params.value;
    this.originalSelectedValue = params.value;
    this.focusAfterAttached = params.cellStartedEdit;
    var icon = agGridCommunity._.createIconNoSpan('smallDown', this.gridOptionsWrapper);
    agGridCommunity._.addCssClass(icon, 'ag-rich-select-value-icon');
    this.eValue.appendChild(icon);
    this.virtualList = this.getContext().createBean(new agGridCommunity.VirtualList('rich-select'));
    this.virtualList.setComponentCreator(this.createRowComponent.bind(this));
    this.eList.appendChild(this.virtualList.getGui());
    if (agGridCommunity._.exists(this.params.cellHeight)) {
      this.virtualList.setRowHeight(this.params.cellHeight);
    }
    this.renderSelectedValue();
    if (agGridCommunity._.missing(params.values)) {
      console.warn('AG Grid: richSelectCellEditor requires values for it to work');
      return;
    }
    var values = params.values;
    this.virtualList.setModel({
      getRowCount: function () {
        return values.length;
      },
      getRow: function (index) {
        return values[index];
      }
    });
    this.addGuiEventListener('keydown', this.onKeyDown.bind(this));
    var virtualListGui = this.virtualList.getGui();
    this.addManagedListener(virtualListGui, 'click', this.onClick.bind(this));
    this.addManagedListener(virtualListGui, 'mousemove', this.onMouseMove.bind(this));
    var debounceDelay = agGridCommunity._.exists(params.searchDebounceDelay) ? params.searchDebounceDelay : 300;
    this.clearSearchString = agGridCommunity._.debounce(this.clearSearchString, debounceDelay);
    if (agGridCommunity._.exists(params.charPress)) {
      this.searchText(params.charPress);
    }
  };
  RichSelectCellEditor.prototype.onKeyDown = function (event) {
    var key = event.key;
    switch (key) {
      case agGridCommunity.KeyName.ENTER:
        this.onEnterKeyDown();
        break;
      case agGridCommunity.KeyName.DOWN:
      case agGridCommunity.KeyName.UP:
        this.onNavigationKeyPressed(event, key);
        break;
      default:
        this.searchText(event);
    }
  };
  RichSelectCellEditor.prototype.onEnterKeyDown = function () {
    this.selectionConfirmed = true;
    this.params.stopEditing();
  };
  RichSelectCellEditor.prototype.onNavigationKeyPressed = function (event, key) {
    // if we don't preventDefault the page body and/or grid scroll will move.
    event.preventDefault();
    var oldIndex = this.params.values.indexOf(this.selectedValue);
    var newIndex = key === agGridCommunity.KeyName.UP ? oldIndex - 1 : oldIndex + 1;
    if (newIndex >= 0 && newIndex < this.params.values.length) {
      var valueToSelect = this.params.values[newIndex];
      this.setSelectedValue(valueToSelect);
    }
  };
  RichSelectCellEditor.prototype.searchText = function (key) {
    if (typeof key !== 'string') {
      var keyName = key.key;
      if (keyName === agGridCommunity.KeyName.BACKSPACE) {
        this.searchString = this.searchString.slice(0, -1);
        keyName = '';
      } else if (!agGridCommunity._.isEventFromPrintableCharacter(key)) {
        return;
      }
      this.searchText(keyName);
      return;
    }
    this.searchString += key;
    this.runSearch();
    this.clearSearchString();
  };
  RichSelectCellEditor.prototype.runSearch = function () {
    var values = this.params.values;
    var searchStrings;
    if (typeof values[0] === 'number' || typeof values[0] === 'string') {
      searchStrings = values.map(String);
    }
    if (typeof values[0] === 'object' && this.params.colDef.keyCreator) {
      searchStrings = values.map(this.params.colDef.keyCreator);
    }
    if (!searchStrings) {
      return;
    }
    var topSuggestion = agGridCommunity._.fuzzySuggestions(this.searchString, searchStrings, true, true)[0];
    if (!topSuggestion) {
      return;
    }
    var topSuggestionIndex = searchStrings.indexOf(topSuggestion);
    var topValue = values[topSuggestionIndex];
    this.setSelectedValue(topValue);
  };
  RichSelectCellEditor.prototype.clearSearchString = function () {
    this.searchString = '';
  };
  RichSelectCellEditor.prototype.renderSelectedValue = function () {
    var _this = this;
    var valueFormatted = this.params.formatValue(this.selectedValue);
    var eValue = this.eValue;
    var params = {
      value: this.selectedValue,
      valueFormatted: valueFormatted,
      api: this.gridOptionsWrapper.getApi()
    };
    var promise = this.userComponentFactory.newCellRenderer(this.params, params);
    if (agGridCommunity._.exists(promise)) {
      agGridCommunity._.bindCellRendererToHtmlElement(promise, eValue);
      promise.then(function (renderer) {
        _this.addDestroyFunc(function () {
          return _this.getContext().destroyBean(renderer);
        });
      });
    } else {
      if (agGridCommunity._.exists(this.selectedValue)) {
        eValue.innerHTML = valueFormatted;
      } else {
        agGridCommunity._.clearElement(eValue);
      }
    }
  };
  RichSelectCellEditor.prototype.setSelectedValue = function (value) {
    if (this.selectedValue === value) {
      return;
    }
    var index = this.params.values.indexOf(value);
    if (index === -1) {
      return;
    }
    this.selectedValue = value;
    this.virtualList.ensureIndexVisible(index);
    this.virtualList.refresh();
  };
  RichSelectCellEditor.prototype.createRowComponent = function (value) {
    var valueFormatted = this.params.formatValue(value);
    var row = new RichSelectRow(this.params);
    this.getContext().createBean(row);
    row.setState(value, valueFormatted, value === this.selectedValue);
    return row;
  };
  RichSelectCellEditor.prototype.onMouseMove = function (mouseEvent) {
    var rect = this.virtualList.getGui().getBoundingClientRect();
    var scrollTop = this.virtualList.getScrollTop();
    var mouseY = mouseEvent.clientY - rect.top + scrollTop;
    var row = Math.floor(mouseY / this.virtualList.getRowHeight());
    var value = this.params.values[row];
    // not using utils.exist() as want empty string test to pass
    if (value !== undefined) {
      this.setSelectedValue(value);
    }
  };
  RichSelectCellEditor.prototype.onClick = function () {
    this.selectionConfirmed = true;
    this.params.stopEditing();
  };
  // we need to have the gui attached before we can draw the virtual rows, as the
  // virtual row logic needs info about the gui state
  RichSelectCellEditor.prototype.afterGuiAttached = function () {
    var selectedIndex = this.params.values.indexOf(this.selectedValue);
    // we have to call this here to get the list to have the right height, ie
    // otherwise it would not have scrolls yet and ensureIndexVisible would do nothing
    this.virtualList.refresh();
    if (selectedIndex >= 0) {
      this.virtualList.ensureIndexVisible(selectedIndex);
    }
    // we call refresh again, as the list could of moved, and we need to render the new rows
    this.virtualList.refresh();
    if (this.focusAfterAttached) {
      this.getGui().focus();
    }
  };
  RichSelectCellEditor.prototype.getValue = function () {
    // NOTE: we don't use valueParser for Set Filter. The user should provide values that are to be
    // set into the data. valueParser only really makese sense when the user is typing in text (not picking
    // form a set).
    return this.selectionConfirmed ? this.selectedValue : this.originalSelectedValue;
  };
  // tab index is needed so we can focus, which is needed for keyboard events
  RichSelectCellEditor.TEMPLATE = "<div class=\"ag-rich-select\" tabindex=\"-1\">\n            <div ref=\"eValue\" class=\"ag-rich-select-value\"></div>\n            <div ref=\"eList\" class=\"ag-rich-select-list\"></div>\n        </div>";
  __decorate$1w([agGridCommunity.Autowired('userComponentFactory')], RichSelectCellEditor.prototype, "userComponentFactory", void 0);
  __decorate$1w([agGridCommunity.RefSelector('eValue')], RichSelectCellEditor.prototype, "eValue", void 0);
  __decorate$1w([agGridCommunity.RefSelector('eList')], RichSelectCellEditor.prototype, "eList", void 0);
  return RichSelectCellEditor;
}(agGridCommunity.PopupComponent);
var RichSelectModule = {
  moduleName: agGridCommunity.ModuleNames.RichSelectModule,
  beans: [],
  userComponents: [{
    componentName: 'agRichSelect',
    componentClass: RichSelectCellEditor
  }, {
    componentName: 'agRichSelectCellEditor',
    componentClass: RichSelectCellEditor
  }],
  dependantModules: [EnterpriseCoreModule]
};
var __extends$2L =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1x =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param =  false || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};
var ServerSideRowModel = /** @class */function (_super) {
  __extends$2L(ServerSideRowModel, _super);
  function ServerSideRowModel() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.pauseStoreUpdateListening = false;
    return _this;
  }
  // we don't implement as lazy row heights is not supported in this row model
  ServerSideRowModel.prototype.ensureRowHeightsValid = function () {
    return false;
  };
  ServerSideRowModel.prototype.start = function () {
    var datasource = this.gridOptionsWrapper.getServerSideDatasource();
    if (datasource) {
      this.setDatasource(datasource);
    }
  };
  ServerSideRowModel.prototype.destroyDatasource = function () {
    if (!this.datasource) {
      return;
    }
    if (this.datasource.destroy) {
      this.datasource.destroy();
    }
    this.rowRenderer.datasourceChanged();
    this.datasource = undefined;
  };
  ServerSideRowModel.prototype.setBeans = function (loggerFactory) {
    this.logger = loggerFactory.create('ServerSideRowModel');
  };
  ServerSideRowModel.prototype.addEventListeners = function () {
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_NEW_COLUMNS_LOADED, this.onColumnEverything.bind(this));
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_STORE_UPDATED, this.onStoreUpdated.bind(this));
    var resetListener = this.resetRootStore.bind(this);
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_COLUMN_VALUE_CHANGED, resetListener);
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_COLUMN_PIVOT_CHANGED, resetListener);
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, resetListener);
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, resetListener);
    this.verifyProps();
  };
  ServerSideRowModel.prototype.verifyProps = function () {
    if (this.gridOptionsWrapper.getDefaultGroupSortComparator() != null) {
      var message_1 = "AG Grid: defaultGroupSortComparator cannot be used with Server Side Row Model. If using Full Store, then provide the rows to the grid in the desired sort order. If using Partial Store, then sorting is done on the server side, nothing to do with the client.";
      agGridCommunity._.doOnce(function () {
        return console.warn(message_1);
      }, 'SSRM.DefaultGroupSortComparator');
    }
  };
  ServerSideRowModel.prototype.setDatasource = function (datasource) {
    this.destroyDatasource();
    this.datasource = datasource;
    this.resetRootStore();
  };
  ServerSideRowModel.prototype.isLastRowIndexKnown = function () {
    var cache = this.getRootStore();
    if (!cache) {
      return false;
    }
    return cache.isLastRowIndexKnown();
  };
  ServerSideRowModel.prototype.onColumnEverything = function () {
    // this is a hack for one customer only, so they can suppress the resetting of the columns.
    // The problem the customer had was they were api.setColumnDefs() after the data source came
    // back with data. So this stops the reload from the grid after the data comes back.
    // Once we have "AG-1591 Allow delta changes to columns" fixed, then this hack can be taken out.
    if (this.gridOptionsWrapper.isSuppressEnterpriseResetOnNewColumns()) {
      return;
    }
    // every other customer can continue as normal and have it working!!!
    // if first time, alwasy reset
    if (!this.storeParams) {
      this.resetRootStore();
      return;
    }
    // check if anything pertaining to fetching data has changed, and if it has, reset, but if
    // it has not, don't reset
    var rowGroupColumnVos = this.columnsToValueObjects(this.columnController.getRowGroupColumns());
    var valueColumnVos = this.columnsToValueObjects(this.columnController.getValueColumns());
    var pivotColumnVos = this.columnsToValueObjects(this.columnController.getPivotColumns());
    var sortModelDifferent = !agGridCommunity._.jsonEquals(this.storeParams.sortModel, this.sortController.getSortModel());
    var rowGroupDifferent = !agGridCommunity._.jsonEquals(this.storeParams.rowGroupCols, rowGroupColumnVos);
    var pivotDifferent = !agGridCommunity._.jsonEquals(this.storeParams.pivotCols, pivotColumnVos);
    var valuesDifferent = !agGridCommunity._.jsonEquals(this.storeParams.valueCols, valueColumnVos);
    var resetRequired = sortModelDifferent || rowGroupDifferent || pivotDifferent || valuesDifferent;
    if (resetRequired) {
      this.resetRootStore();
    }
  };
  ServerSideRowModel.prototype.destroyRootStore = function () {
    if (!this.rootNode || !this.rootNode.childStore) {
      return;
    }
    this.rootNode.childStore = this.destroyBean(this.rootNode.childStore);
    this.nodeManager.clear();
  };
  ServerSideRowModel.prototype.refreshAfterSort = function (newSortModel, params) {
    if (this.storeParams) {
      this.storeParams.sortModel = newSortModel;
    }
    var rootStore = this.getRootStore();
    if (!rootStore) {
      return;
    }
    rootStore.refreshAfterSort(params);
    this.onStoreUpdated();
  };
  ServerSideRowModel.prototype.resetRootStore = function () {
    this.destroyRootStore();
    this.rootNode = new agGridCommunity.RowNode();
    this.rootNode.group = true;
    this.rootNode.level = -1;
    this.createBean(this.rootNode);
    if (this.datasource) {
      this.storeParams = this.createStoreParams();
      this.rootNode.childStore = this.createBean(this.storeFactory.createStore(this.storeParams, this.rootNode));
      this.updateRowIndexesAndBounds();
    }
    // this event: 1) clears selection 2) updates filters 3) shows/hides 'no rows' overlay
    var rowDataChangedEvent = {
      type: agGridCommunity.Events.EVENT_ROW_DATA_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(rowDataChangedEvent);
    // this gets the row to render rows (or remove the previously rendered rows, as it's blank to start).
    // important to NOT pass in an event with keepRenderedRows or animate, as we want the renderer
    // to treat the rows as new rows, as it's all new data
    this.dispatchModelUpdated(true);
  };
  ServerSideRowModel.prototype.columnsToValueObjects = function (columns) {
    var _this = this;
    return columns.map(function (col) {
      return {
        id: col.getId(),
        aggFunc: col.getAggFunc(),
        displayName: _this.columnController.getDisplayNameForColumn(col, 'model'),
        field: col.getColDef().field
      };
    });
  };
  ServerSideRowModel.prototype.createStoreParams = function () {
    var rowGroupColumnVos = this.columnsToValueObjects(this.columnController.getRowGroupColumns());
    var valueColumnVos = this.columnsToValueObjects(this.columnController.getValueColumns());
    var pivotColumnVos = this.columnsToValueObjects(this.columnController.getPivotColumns());
    var dynamicRowHeight = this.gridOptionsWrapper.isDynamicRowHeight();
    var params = {
      // the columns the user has grouped and aggregated by
      valueCols: valueColumnVos,
      rowGroupCols: rowGroupColumnVos,
      pivotCols: pivotColumnVos,
      pivotMode: this.columnController.isPivotMode(),
      // sort and filter model
      filterModel: this.filterManager.getFilterModel(),
      sortModel: this.sortListener.extractSortModel(),
      datasource: this.datasource,
      lastAccessedSequence: new agGridCommunity.NumberSequence(),
      // blockSize: blockSize == null ? 100 : blockSize,
      dynamicRowHeight: dynamicRowHeight
    };
    return params;
  };
  ServerSideRowModel.prototype.getParams = function () {
    return this.storeParams;
  };
  ServerSideRowModel.prototype.dispatchModelUpdated = function (reset) {
    if (reset === void 0) {
      reset = false;
    }
    var modelUpdatedEvent = {
      type: agGridCommunity.Events.EVENT_MODEL_UPDATED,
      api: this.gridApi,
      columnApi: this.columnApi,
      animate: !reset,
      keepRenderedRows: !reset,
      newPage: false,
      newData: false
    };
    this.eventService.dispatchEvent(modelUpdatedEvent);
  };
  ServerSideRowModel.prototype.onStoreUpdated = function () {
    // sometimes if doing a batch update, we do the batch first,
    // then call onStoreUpdated manually. eg expandAll() method.
    if (this.pauseStoreUpdateListening) {
      return;
    }
    this.updateRowIndexesAndBounds();
    this.dispatchModelUpdated();
  };
  ServerSideRowModel.prototype.onRowHeightChanged = function () {
    this.updateRowIndexesAndBounds();
    this.dispatchModelUpdated();
  };
  ServerSideRowModel.prototype.updateRowIndexesAndBounds = function () {
    var rootStore = this.getRootStore();
    if (!rootStore) {
      return;
    }
    rootStore.setDisplayIndexes(new agGridCommunity.NumberSequence(), {
      value: 0
    });
  };
  ServerSideRowModel.prototype.retryLoads = function () {
    var rootStore = this.getRootStore();
    if (!rootStore) {
      return;
    }
    rootStore.retryLoads();
    this.onStoreUpdated();
  };
  ServerSideRowModel.prototype.getRow = function (index) {
    var rootStore = this.getRootStore();
    if (!rootStore) {
      return null;
    }
    return rootStore.getRowUsingDisplayIndex(index);
  };
  ServerSideRowModel.prototype.expandAll = function (value) {
    // if we don't pause store updating, we are needlessly
    // recalculating row-indexes etc, and also getting rendering
    // engine to re-render (listens on ModelUpdated event)
    this.pauseStoreUpdateListening = true;
    this.forEachNode(function (node) {
      if (node.group) {
        node.setExpanded(value);
      }
    });
    this.pauseStoreUpdateListening = false;
    this.onStoreUpdated();
  };
  ServerSideRowModel.prototype.refreshAfterFilter = function (newFilterModel, params) {
    if (this.storeParams) {
      this.storeParams.filterModel = newFilterModel;
    }
    var rootStore = this.getRootStore();
    if (!rootStore) {
      return;
    }
    rootStore.refreshAfterFilter(params);
    this.onStoreUpdated();
  };
  ServerSideRowModel.prototype.getRootStore = function () {
    if (this.rootNode && this.rootNode.childStore) {
      return this.rootNode.childStore;
    }
  };
  ServerSideRowModel.prototype.getRowCount = function () {
    var rootStore = this.getRootStore();
    if (!rootStore) {
      return 1;
    }
    return rootStore.getDisplayIndexEnd();
  };
  ServerSideRowModel.prototype.getTopLevelRowCount = function () {
    var rootStore = this.getRootStore();
    if (!rootStore) {
      return 1;
    }
    return rootStore.getRowCount();
  };
  ServerSideRowModel.prototype.getTopLevelRowDisplayedIndex = function (topLevelIndex) {
    var rootStore = this.getRootStore();
    if (!rootStore) {
      return topLevelIndex;
    }
    return rootStore.getTopLevelRowDisplayedIndex(topLevelIndex);
  };
  ServerSideRowModel.prototype.getRowBounds = function (index) {
    var rootStore = this.getRootStore();
    if (!rootStore) {
      var rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();
      return {
        rowTop: 0,
        rowHeight: rowHeight
      };
    }
    return rootStore.getRowBounds(index);
  };
  ServerSideRowModel.prototype.getRowIndexAtPixel = function (pixel) {
    var rootStore = this.getRootStore();
    if (pixel <= 0 || !rootStore) {
      return 0;
    }
    return rootStore.getRowIndexAtPixel(pixel);
  };
  ServerSideRowModel.prototype.isEmpty = function () {
    return false;
  };
  ServerSideRowModel.prototype.isRowsToRender = function () {
    return this.getRootStore() != null && this.getRowCount() > 0;
  };
  ServerSideRowModel.prototype.getType = function () {
    return agGridCommunity.Constants.ROW_MODEL_TYPE_SERVER_SIDE;
  };
  ServerSideRowModel.prototype.forEachNode = function (callback) {
    var rootStore = this.getRootStore();
    if (!rootStore) {
      return;
    }
    rootStore.forEachNodeDeep(callback);
  };
  ServerSideRowModel.prototype.forEachNodeAfterFilterAndSort = function (callback) {
    var rootStore = this.getRootStore();
    if (!rootStore) {
      return;
    }
    rootStore.forEachNodeDeepAfterFilterAndSort(callback);
  };
  ServerSideRowModel.prototype.executeOnStore = function (route, callback) {
    var rootStore = this.getRootStore();
    if (!rootStore) {
      return;
    }
    var storeToExecuteOn = rootStore.getChildStore(route);
    if (storeToExecuteOn) {
      callback(storeToExecuteOn);
    }
  };
  ServerSideRowModel.prototype.refreshStore = function (params) {
    if (params === void 0) {
      params = {};
    }
    var route = params.route ? params.route : [];
    this.executeOnStore(route, function (store) {
      return store.refreshStore(params.purge == true);
    });
  };
  ServerSideRowModel.prototype.getStoreState = function () {
    var res = [];
    var rootStore = this.getRootStore();
    if (rootStore) {
      rootStore.addStoreStates(res);
    }
    return res;
  };
  ServerSideRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {
    if (agGridCommunity._.exists(lastInRange) && firstInRange.parent !== lastInRange.parent) {
      return [];
    }
    return firstInRange.parent.childStore.getRowNodesInRange(lastInRange, firstInRange);
  };
  ServerSideRowModel.prototype.getRowNode = function (id) {
    var result = null;
    this.forEachNode(function (rowNode) {
      if (rowNode.id === id) {
        result = rowNode;
      }
      if (rowNode.detailNode && rowNode.detailNode.id === id) {
        result = rowNode.detailNode;
      }
    });
    return result;
  };
  ServerSideRowModel.prototype.isRowPresent = function (rowNode) {
    var foundRowNode = this.getRowNode(rowNode.id);
    return !!foundRowNode;
  };
  __decorate$1x([agGridCommunity.Autowired('columnController')], ServerSideRowModel.prototype, "columnController", void 0);
  __decorate$1x([agGridCommunity.Autowired('filterManager')], ServerSideRowModel.prototype, "filterManager", void 0);
  __decorate$1x([agGridCommunity.Autowired('sortController')], ServerSideRowModel.prototype, "sortController", void 0);
  __decorate$1x([agGridCommunity.Autowired('gridApi')], ServerSideRowModel.prototype, "gridApi", void 0);
  __decorate$1x([agGridCommunity.Autowired('columnApi')], ServerSideRowModel.prototype, "columnApi", void 0);
  __decorate$1x([agGridCommunity.Autowired('rowRenderer')], ServerSideRowModel.prototype, "rowRenderer", void 0);
  __decorate$1x([agGridCommunity.Autowired('ssrmSortService')], ServerSideRowModel.prototype, "sortListener", void 0);
  __decorate$1x([agGridCommunity.Autowired('ssrmNodeManager')], ServerSideRowModel.prototype, "nodeManager", void 0);
  __decorate$1x([agGridCommunity.Autowired('ssrmStoreFactory')], ServerSideRowModel.prototype, "storeFactory", void 0);
  __decorate$1x([agGridCommunity.PreDestroy], ServerSideRowModel.prototype, "destroyDatasource", null);
  __decorate$1x([__param(0, agGridCommunity.Qualifier('loggerFactory'))], ServerSideRowModel.prototype, "setBeans", null);
  __decorate$1x([agGridCommunity.PostConstruct], ServerSideRowModel.prototype, "addEventListeners", null);
  __decorate$1x([agGridCommunity.PreDestroy], ServerSideRowModel.prototype, "destroyRootStore", null);
  ServerSideRowModel = __decorate$1x([agGridCommunity.Bean('rowModel')], ServerSideRowModel);
  return ServerSideRowModel;
}(agGridCommunity.BeanStub);
var __extends$2M =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1y =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var StoreUtils = /** @class */function (_super) {
  __extends$2M(StoreUtils, _super);
  function StoreUtils() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  StoreUtils.prototype.createGroupKeys = function (groupNode) {
    var keys = [];
    var pointer = groupNode;
    while (pointer && pointer.level >= 0) {
      keys.push(pointer.key);
      pointer = pointer.parent;
    }
    keys.reverse();
    return keys;
  };
  StoreUtils.prototype.loadFromDatasource = function (p) {
    var groupKeys = this.createGroupKeys(p.parentNode);
    var storeParams = p.storeParams;
    if (!storeParams.datasource) {
      return;
    }
    var request = {
      startRow: p.startRow,
      endRow: p.endRow,
      rowGroupCols: storeParams.rowGroupCols,
      valueCols: storeParams.valueCols,
      pivotCols: storeParams.pivotCols,
      pivotMode: storeParams.pivotMode,
      groupKeys: groupKeys,
      filterModel: storeParams.filterModel,
      sortModel: storeParams.sortModel
    };
    var getRowsParams = {
      successCallback: p.successCallback,
      success: p.success,
      failCallback: p.failCallback,
      fail: p.fail,
      request: request,
      parentNode: p.parentNode,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    window.setTimeout(function () {
      if (storeParams.datasource) {
        storeParams.datasource.getRows(getRowsParams);
      }
    }, 0);
  };
  StoreUtils.prototype.getChildStore = function (keys, currentCache, findNodeFunc) {
    if (agGridCommunity._.missingOrEmpty(keys)) {
      return currentCache;
    }
    var nextKey = keys[0];
    var nextNode = findNodeFunc(nextKey);
    if (nextNode) {
      var keyListForNextLevel = keys.slice(1, keys.length);
      var nextStore = nextNode.childStore;
      return nextStore ? nextStore.getChildStore(keyListForNextLevel) : null;
    }
    return null;
  };
  StoreUtils.prototype.isServerRefreshNeeded = function (parentRowNode, rowGroupCols, params) {
    if (params.alwaysReset || params.valueColChanged || params.secondaryColChanged) {
      return true;
    }
    var level = parentRowNode.level + 1;
    var grouping = level < rowGroupCols.length;
    var leafNodes = !grouping;
    if (leafNodes) {
      return true;
    }
    var colIdThisGroup = rowGroupCols[level].id;
    var actionOnThisGroup = params.changedColumns.indexOf(colIdThisGroup) > -1;
    if (actionOnThisGroup) {
      return true;
    }
    return false;
  };
  __decorate$1y([agGridCommunity.Autowired('columnApi')], StoreUtils.prototype, "columnApi", void 0);
  __decorate$1y([agGridCommunity.Autowired('gridApi')], StoreUtils.prototype, "gridApi", void 0);
  StoreUtils = __decorate$1y([agGridCommunity.Bean('ssrmCacheUtils')], StoreUtils);
  return StoreUtils;
}(agGridCommunity.BeanStub);
var __extends$2N =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1z =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var BlockUtils = /** @class */function (_super) {
  __extends$2N(BlockUtils, _super);
  function BlockUtils() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  BlockUtils.prototype.postConstruct = function () {
    this.rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();
    this.usingTreeData = this.gridOptionsWrapper.isTreeData();
    this.usingMasterDetail = this.gridOptionsWrapper.isMasterDetail();
  };
  BlockUtils.prototype.createRowNode = function (params) {
    var rowNode = this.getContext().createBean(new agGridCommunity.RowNode());
    rowNode.setRowHeight(this.rowHeight);
    rowNode.group = params.group;
    rowNode.leafGroup = params.leafGroup;
    rowNode.level = params.level;
    rowNode.uiLevel = params.level;
    rowNode.parent = params.parent;
    // stub gets set to true here, and then false when this rowNode gets it's data
    rowNode.stub = true;
    if (rowNode.group) {
      rowNode.expanded = false;
      rowNode.field = params.field;
      rowNode.rowGroupColumn = params.rowGroupColumn;
    }
    return rowNode;
  };
  BlockUtils.prototype.destroyRowNodes = function (rowNodes) {
    if (rowNodes) {
      rowNodes.forEach(this.destroyRowNode.bind(this));
    }
  };
  BlockUtils.prototype.destroyRowNode = function (rowNode) {
    if (rowNode.childStore) {
      this.destroyBean(rowNode.childStore);
      rowNode.childStore = null;
    }
    // this is needed, so row render knows to fade out the row, otherwise it
    // sees row top is present, and thinks the row should be shown. maybe
    // rowNode should have a flag on whether it is visible???
    rowNode.clearRowTopAndRowIndex();
    if (rowNode.id != null) {
      this.nodeManager.removeNode(rowNode);
    }
  };
  BlockUtils.prototype.setDataIntoRowNode = function (rowNode, data, defaultId) {
    rowNode.stub = false;
    if (agGridCommunity._.exists(data)) {
      rowNode.setDataAndId(data, defaultId);
      if (this.usingTreeData) {
        var isGroupFunc = this.gridOptionsWrapper.getIsServerSideGroupFunc();
        var getKeyFunc = this.gridOptionsWrapper.getServerSideGroupKeyFunc();
        if (isGroupFunc != null) {
          rowNode.group = isGroupFunc(rowNode.data);
          if (rowNode.group && getKeyFunc != null) {
            rowNode.key = getKeyFunc(rowNode.data);
          }
        }
      } else if (rowNode.group) {
        rowNode.key = this.valueService.getValue(rowNode.rowGroupColumn, rowNode);
        if (rowNode.key === null || rowNode.key === undefined) {
          agGridCommunity._.doOnce(function () {
            console.warn("null and undefined values are not allowed for server side row model keys");
            if (rowNode.rowGroupColumn) {
              console.warn("column = " + rowNode.rowGroupColumn.getId());
            }
            console.warn("data is ", rowNode.data);
          }, 'ServerSideBlock-CannotHaveNullOrUndefinedForKey');
        }
      } else if (this.usingMasterDetail) {
        var isMasterFunc = this.gridOptionsWrapper.getIsRowMasterFunc();
        if (isMasterFunc != null) {
          rowNode.master = isMasterFunc(rowNode.data);
        } else {
          rowNode.master = true;
        }
      }
    } else {
      rowNode.setDataAndId(undefined, undefined);
      rowNode.key = null;
    }
    if (this.usingTreeData || rowNode.group) {
      this.setGroupDataIntoRowNode(rowNode);
      this.setChildCountIntoRowNode(rowNode);
    }
    // this needs to be done AFTER setGroupDataIntoRowNode(), as the height can depend on the group data
    // getting set, if it's a group node and colDef.autoHeight=true
    if (agGridCommunity._.exists(data)) {
      rowNode.setRowHeight(this.gridOptionsWrapper.getRowHeightForNode(rowNode).height);
    }
  };
  BlockUtils.prototype.setChildCountIntoRowNode = function (rowNode) {
    var getChildCount = this.gridOptionsWrapper.getChildCountFunc();
    if (getChildCount) {
      rowNode.allChildrenCount = getChildCount(rowNode.data);
    }
  };
  BlockUtils.prototype.setGroupDataIntoRowNode = function (rowNode) {
    var _this = this;
    var groupDisplayCols = this.columnController.getGroupDisplayColumns();
    var usingTreeData = this.gridOptionsWrapper.isTreeData();
    groupDisplayCols.forEach(function (col) {
      if (rowNode.groupData == null) {
        rowNode.groupData = {};
      }
      if (usingTreeData) {
        rowNode.groupData[col.getColId()] = rowNode.key;
      } else if (col.isRowGroupDisplayed(rowNode.rowGroupColumn.getId())) {
        var groupValue = _this.valueService.getValue(rowNode.rowGroupColumn, rowNode);
        rowNode.groupData[col.getColId()] = groupValue;
      }
    });
  };
  BlockUtils.prototype.clearDisplayIndex = function (rowNode) {
    rowNode.clearRowTopAndRowIndex();
    var hasChildStore = rowNode.group && agGridCommunity._.exists(rowNode.childStore);
    if (hasChildStore) {
      var childStore = rowNode.childStore;
      childStore.clearDisplayIndexes();
    }
    var hasDetailNode = rowNode.master && rowNode.detailNode;
    if (hasDetailNode) {
      rowNode.detailNode.clearRowTopAndRowIndex();
    }
  };
  BlockUtils.prototype.setDisplayIndex = function (rowNode, displayIndexSeq, nextRowTop) {
    // set this row
    rowNode.setRowIndex(displayIndexSeq.next());
    rowNode.setRowTop(nextRowTop.value);
    nextRowTop.value += rowNode.rowHeight;
    // set child for master / detail
    var hasDetailRow = rowNode.master;
    if (hasDetailRow) {
      if (rowNode.expanded && rowNode.detailNode) {
        rowNode.detailNode.setRowIndex(displayIndexSeq.next());
        rowNode.detailNode.setRowTop(nextRowTop.value);
        nextRowTop.value += rowNode.detailNode.rowHeight;
      } else if (rowNode.detailNode) {
        rowNode.detailNode.clearRowTopAndRowIndex();
      }
    }
    // set children for SSRM child rows
    var hasChildStore = rowNode.group && agGridCommunity._.exists(rowNode.childStore);
    if (hasChildStore) {
      var childStore = rowNode.childStore;
      if (rowNode.expanded) {
        childStore.setDisplayIndexes(displayIndexSeq, nextRowTop);
      } else {
        // we need to clear the row tops, as the row renderer depends on
        // this to know if the row should be faded out
        childStore.clearDisplayIndexes();
      }
    }
  };
  BlockUtils.prototype.binarySearchForDisplayIndex = function (displayRowIndex, rowNodes) {
    var bottomPointer = 0;
    var topPointer = rowNodes.length - 1;
    if (agGridCommunity._.missing(topPointer) || agGridCommunity._.missing(bottomPointer)) {
      console.warn("ag-grid: error: topPointer = " + topPointer + ", bottomPointer = " + bottomPointer);
      return null;
    }
    while (true) {
      var midPointer = Math.floor((bottomPointer + topPointer) / 2);
      var currentRowNode = rowNodes[midPointer];
      // first check current row for index
      if (currentRowNode.rowIndex === displayRowIndex) {
        return currentRowNode;
      }
      // then check if current row contains a detail row with the index
      var expandedMasterRow = currentRowNode.master && currentRowNode.expanded;
      if (expandedMasterRow && currentRowNode.detailNode.rowIndex === displayRowIndex) {
        return currentRowNode.detailNode;
      }
      // then check if child cache contains index
      var childStore = currentRowNode.childStore;
      if (currentRowNode.expanded && childStore && childStore.isDisplayIndexInStore(displayRowIndex)) {
        return childStore.getRowUsingDisplayIndex(displayRowIndex);
      }
      // otherwise adjust pointers to continue searching for index
      if (currentRowNode.rowIndex < displayRowIndex) {
        bottomPointer = midPointer + 1;
      } else if (currentRowNode.rowIndex > displayRowIndex) {
        topPointer = midPointer - 1;
      } else {
        console.warn("AG Grid: error: unable to locate rowIndex = " + displayRowIndex + " in cache");
        return null;
      }
    }
  };
  BlockUtils.prototype.extractRowBounds = function (rowNode, index) {
    var extractRowBounds = function (currentRowNode) {
      return {
        rowHeight: currentRowNode.rowHeight,
        rowTop: currentRowNode.rowTop
      };
    };
    if (rowNode.rowIndex === index) {
      return extractRowBounds(rowNode);
    }
    if (rowNode.group && rowNode.expanded && agGridCommunity._.exists(rowNode.childStore)) {
      var childStore = rowNode.childStore;
      if (childStore.isDisplayIndexInStore(index)) {
        return childStore.getRowBounds(index);
      }
    } else if (rowNode.master && rowNode.expanded && agGridCommunity._.exists(rowNode.detailNode)) {
      if (rowNode.detailNode.rowIndex === index) {
        return extractRowBounds(rowNode.detailNode);
      }
    }
  };
  BlockUtils.prototype.getIndexAtPixel = function (rowNode, pixel) {
    // first check if pixel is in range of current row
    if (rowNode.isPixelInRange(pixel)) {
      return rowNode.rowIndex;
    }
    // then check if current row contains a detail row with pixel in range
    var expandedMasterRow = rowNode.master && rowNode.expanded;
    if (expandedMasterRow && rowNode.detailNode.isPixelInRange(pixel)) {
      return rowNode.detailNode.rowIndex;
    }
    // then check if it's a group row with a child cache with pixel in range
    if (rowNode.group && rowNode.expanded && agGridCommunity._.exists(rowNode.childStore)) {
      var childStore = rowNode.childStore;
      if (childStore.isPixelInRange(pixel)) {
        return childStore.getRowIndexAtPixel(pixel);
      }
    }
    return null;
    // pixel is not within this row node or it's children / detail, so return undefined
  };

  BlockUtils.prototype.createNodeIdPrefix = function (parentRowNode) {
    var parts = [];
    var rowNode = parentRowNode;
    // pull keys from all parent nodes, but do not include the root node
    while (rowNode && rowNode.level >= 0) {
      parts.push(rowNode.key);
      rowNode = rowNode.parent;
    }
    if (parts.length > 0) {
      return parts.reverse().join('-');
    }
    // no prefix, so node id's are left as they are
    return undefined;
  };
  BlockUtils.prototype.checkOpenByDefault = function (rowNode) {
    if (!rowNode.isExpandable()) {
      return;
    }
    var userFunc = this.gridOptionsWrapper.getIsServerSideGroupOpenByDefaultFunc();
    if (!userFunc) {
      return;
    }
    var params = {
      data: rowNode.data,
      rowNode: rowNode
    };
    var userFuncRes = userFunc(params);
    if (userFuncRes) {
      // we do this in a timeout, so that we don't expand a row node while in the middle
      // of setting up rows, setting up rows is complex enough without another chunk of work
      // getting added to the call stack. this is also helpful as openByDefault may or may
      // not happen (so makes setting up rows more deterministic by expands never happening)
      // and also checkOpenByDefault is shard with both store types, so easier control how it
      // impacts things by keeping it in new VM turn.
      window.setTimeout(function () {
        return rowNode.setExpanded(true);
      }, 0);
    }
  };
  __decorate$1z([agGridCommunity.Autowired('valueService')], BlockUtils.prototype, "valueService", void 0);
  __decorate$1z([agGridCommunity.Autowired('columnController')], BlockUtils.prototype, "columnController", void 0);
  __decorate$1z([agGridCommunity.Autowired('ssrmNodeManager')], BlockUtils.prototype, "nodeManager", void 0);
  __decorate$1z([agGridCommunity.PostConstruct], BlockUtils.prototype, "postConstruct", null);
  BlockUtils = __decorate$1z([agGridCommunity.Bean('ssrmBlockUtils')], BlockUtils);
  return BlockUtils;
}(agGridCommunity.BeanStub);
var __decorate$1A =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var NodeManager = /** @class */function () {
  function NodeManager() {
    this.rowNodes = {};
  }
  NodeManager.prototype.addRowNode = function (rowNode) {
    var id = rowNode.id;
    if (this.rowNodes[id]) {
      console.warn('AG Grid: duplicate node id ' + rowNode.id);
      console.warn('first instance', this.rowNodes[id].data);
      console.warn('second instance', rowNode.data);
    }
    this.rowNodes[id] = rowNode;
  };
  NodeManager.prototype.removeNode = function (rowNode) {
    var id = rowNode.id;
    if (this.rowNodes[id]) {
      this.rowNodes[id] = undefined;
    }
  };
  NodeManager.prototype.clear = function () {
    this.rowNodes = {};
  };
  __decorate$1A([agGridCommunity.PreDestroy], NodeManager.prototype, "clear", null);
  NodeManager = __decorate$1A([agGridCommunity.Bean('ssrmNodeManager')], NodeManager);
  return NodeManager;
}();
var __extends$2O =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1B =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TransactionManager = /** @class */function (_super) {
  __extends$2O(TransactionManager, _super);
  function TransactionManager() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.asyncTransactions = [];
    return _this;
  }
  TransactionManager.prototype.postConstruct = function () {
    // only want to be active if SSRM active, otherwise would be interfering with other row models
    if (!this.gridOptionsWrapper.isRowModelServerSide()) {
      return;
    }
  };
  TransactionManager.prototype.applyTransactionAsync = function (transaction, callback) {
    if (this.asyncTransactionsTimeout == null) {
      this.scheduleExecuteAsync();
    }
    this.asyncTransactions.push({
      transaction: transaction,
      callback: callback
    });
  };
  TransactionManager.prototype.scheduleExecuteAsync = function () {
    var _this = this;
    var waitMillis = this.gridOptionsWrapper.getAsyncTransactionWaitMillis();
    this.asyncTransactionsTimeout = window.setTimeout(function () {
      _this.executeAsyncTransactions();
    }, waitMillis);
  };
  TransactionManager.prototype.executeAsyncTransactions = function () {
    var _this = this;
    if (!this.asyncTransactions) {
      return;
    }
    var resultFuncs = [];
    var resultsForEvent = [];
    var transactionsToRetry = [];
    var atLeastOneTransactionApplied = false;
    this.asyncTransactions.forEach(function (txWrapper) {
      var result;
      _this.serverSideRowModel.executeOnStore(txWrapper.transaction.route, function (cache) {
        result = cache.applyTransaction(txWrapper.transaction);
      });
      if (result == undefined) {
        result = {
          status: agGridCommunity.ServerSideTransactionResultStatus.StoreNotFound
        };
      }
      resultsForEvent.push(result);
      var retryTransaction = result.status == agGridCommunity.ServerSideTransactionResultStatus.StoreLoading;
      if (retryTransaction) {
        transactionsToRetry.push(txWrapper);
        return;
      }
      if (txWrapper.callback) {
        resultFuncs.push(function () {
          return txWrapper.callback(result);
        });
      }
      if (result.status === agGridCommunity.ServerSideTransactionResultStatus.Applied) {
        atLeastOneTransactionApplied = true;
      }
    });
    // do callbacks in next VM turn so it's async
    if (resultFuncs.length > 0) {
      window.setTimeout(function () {
        resultFuncs.forEach(function (func) {
          return func();
        });
      }, 0);
    }
    this.asyncTransactionsTimeout = undefined;
    // this will be empty list if nothing to retry
    this.asyncTransactions = transactionsToRetry;
    if (atLeastOneTransactionApplied) {
      this.valueCache.onDataChanged();
      this.eventService.dispatchEvent({
        type: agGridCommunity.Events.EVENT_STORE_UPDATED
      });
    }
    if (resultsForEvent.length > 0) {
      var event_1 = {
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        type: agGridCommunity.Events.EVENT_ASYNC_TRANSACTIONS_FLUSHED,
        results: resultsForEvent
      };
      this.eventService.dispatchEvent(event_1);
    }
  };
  TransactionManager.prototype.flushAsyncTransactions = function () {
    // the timeout could be missing, if we are flushing due to row data loaded
    if (this.asyncTransactionsTimeout != null) {
      clearTimeout(this.asyncTransactionsTimeout);
    }
    this.executeAsyncTransactions();
  };
  TransactionManager.prototype.applyTransaction = function (transaction) {
    var res;
    this.serverSideRowModel.executeOnStore(transaction.route, function (store) {
      res = store.applyTransaction(transaction);
    });
    if (res) {
      this.valueCache.onDataChanged();
      this.eventService.dispatchEvent({
        type: agGridCommunity.Events.EVENT_STORE_UPDATED
      });
      return res;
    } else {
      return {
        status: agGridCommunity.ServerSideTransactionResultStatus.StoreNotFound
      };
    }
  };
  __decorate$1B([agGridCommunity.Autowired('rowNodeBlockLoader')], TransactionManager.prototype, "rowNodeBlockLoader", void 0);
  __decorate$1B([agGridCommunity.Autowired('valueCache')], TransactionManager.prototype, "valueCache", void 0);
  __decorate$1B([agGridCommunity.Autowired('rowModel')], TransactionManager.prototype, "serverSideRowModel", void 0);
  __decorate$1B([agGridCommunity.PostConstruct], TransactionManager.prototype, "postConstruct", null);
  TransactionManager = __decorate$1B([agGridCommunity.Bean('ssrmTransactionManager')], TransactionManager);
  return TransactionManager;
}(agGridCommunity.BeanStub);
var __extends$2P =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1C =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ExpandListener = /** @class */function (_super) {
  __extends$2P(ExpandListener, _super);
  function ExpandListener() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ExpandListener.prototype.postConstruct = function () {
    // only want to be active if SSRM active, otherwise would be interfering with other row models
    if (!this.gridOptionsWrapper.isRowModelServerSide()) {
      return;
    }
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_ROW_GROUP_OPENED, this.onRowGroupOpened.bind(this));
  };
  ExpandListener.prototype.onRowGroupOpened = function (event) {
    var rowNode = event.node;
    if (rowNode.expanded) {
      if (rowNode.master) {
        this.createDetailNode(rowNode);
      } else if (agGridCommunity._.missing(rowNode.childStore)) {
        var storeParams = this.serverSideRowModel.getParams();
        rowNode.childStore = this.createBean(this.storeFactory.createStore(storeParams, rowNode));
      }
    } else if (this.gridOptionsWrapper.isPurgeClosedRowNodes() && agGridCommunity._.exists(rowNode.childStore)) {
      rowNode.childStore = this.destroyBean(rowNode.childStore);
    }
    var storeUpdatedEvent = {
      type: agGridCommunity.Events.EVENT_STORE_UPDATED
    };
    this.eventService.dispatchEvent(storeUpdatedEvent);
  };
  ExpandListener.prototype.createDetailNode = function (masterNode) {
    if (agGridCommunity._.exists(masterNode.detailNode)) {
      return masterNode.detailNode;
    }
    var detailNode = new agGridCommunity.RowNode();
    this.getContext().createBean(detailNode);
    detailNode.detail = true;
    detailNode.selectable = false;
    detailNode.parent = masterNode;
    if (agGridCommunity._.exists(masterNode.id)) {
      detailNode.id = 'detail_' + masterNode.id;
    }
    detailNode.data = masterNode.data;
    detailNode.level = masterNode.level + 1;
    var defaultDetailRowHeight = 200;
    var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(detailNode).height;
    detailNode.rowHeight = rowHeight ? rowHeight : defaultDetailRowHeight;
    masterNode.detailNode = detailNode;
    return detailNode;
  };
  __decorate$1C([agGridCommunity.Autowired('rowModel')], ExpandListener.prototype, "serverSideRowModel", void 0);
  __decorate$1C([agGridCommunity.Autowired('ssrmStoreFactory')], ExpandListener.prototype, "storeFactory", void 0);
  __decorate$1C([agGridCommunity.PostConstruct], ExpandListener.prototype, "postConstruct", null);
  ExpandListener = __decorate$1C([agGridCommunity.Bean('ssrmExpandListener')], ExpandListener);
  return ExpandListener;
}(agGridCommunity.BeanStub);
var __extends$2Q =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1D =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SortListener = /** @class */function (_super) {
  __extends$2Q(SortListener, _super);
  function SortListener() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  SortListener.prototype.postConstruct = function () {
    // only want to be active if SSRM active, otherwise would be interfering with other row models
    if (!this.gridOptionsWrapper.isRowModelServerSide()) {
      return;
    }
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
  };
  SortListener.prototype.extractSortModel = function () {
    var sortModel = this.sortController.getSortModel();
    // when using tree data we just return the sort model with the 'ag-Grid-AutoColumn' as is, i.e not broken out
    // into it's constitute group columns as they are not defined up front and can vary per node.
    if (this.gridOptionsWrapper.isTreeData()) {
      return sortModel;
    }
    // it autoCol is active, we don't want to send this to the server. instead we want to
    // send the
    this.replaceAutoGroupColumnWithActualRowGroupColumns(sortModel);
    this.removeMultiColumnPrefixOnColumnIds(sortModel);
    return sortModel;
  };
  SortListener.prototype.removeMultiColumnPrefixOnColumnIds = function (sortModel) {
    if (this.gridOptionsWrapper.isGroupMultiAutoColumn()) {
      var multiColumnPrefix = agGridCommunity.Constants.GROUP_AUTO_COLUMN_ID + "-";
      for (var i = 0; i < sortModel.length; ++i) {
        if (sortModel[i].colId.indexOf(multiColumnPrefix) > -1) {
          sortModel[i].colId = sortModel[i].colId.substr(multiColumnPrefix.length);
        }
      }
    }
  };
  SortListener.prototype.replaceAutoGroupColumnWithActualRowGroupColumns = function (sortModel) {
    // find index of auto group column in sort model
    var autoGroupSortModel = agGridCommunity._.find(sortModel, function (sm) {
      return sm.colId == agGridCommunity.Constants.GROUP_AUTO_COLUMN_ID;
    });
    // replace auto column with individual group columns
    if (autoGroupSortModel) {
      // remove auto group column
      var autoGroupIndex = sortModel.indexOf(autoGroupSortModel);
      agGridCommunity._.removeFromArray(sortModel, autoGroupSortModel);
      var isNotInSortModel = function (col) {
        return sortModel.filter(function (sm) {
          return sm.colId === col.getColId();
        }).length == 0;
      };
      var mapColumnToSortModel = function (col) {
        return {
          colId: col.getId(),
          sort: autoGroupSortModel.sort
        };
      };
      var newModels = this.columnController.getRowGroupColumns().filter(isNotInSortModel).map(mapColumnToSortModel);
      agGridCommunity._.insertArrayIntoArray(sortModel, newModels, autoGroupIndex);
    }
  };
  SortListener.prototype.onSortChanged = function () {
    var storeParams = this.serverSideRowModel.getParams();
    if (!storeParams) {
      return;
    } // params is undefined if no datasource set
    var newSortModel = this.extractSortModel();
    var oldSortModel = storeParams.sortModel;
    var changedColumns = this.findChangedColumnsInSort(newSortModel, oldSortModel);
    var valueColChanged = this.listenerUtils.isSortingWithValueColumn(changedColumns);
    var secondaryColChanged = this.listenerUtils.isSortingWithSecondaryColumn(changedColumns);
    var alwaysReset = this.gridOptionsWrapper.isServerSideSortingAlwaysResets();
    var params = {
      valueColChanged: valueColChanged,
      secondaryColChanged: secondaryColChanged,
      alwaysReset: alwaysReset,
      changedColumns: changedColumns
    };
    this.serverSideRowModel.refreshAfterSort(newSortModel, params);
  };
  // returns back all the cols that were effected by the sorting. eg if we were sorting by col A,
  // and now we are sorting by col B, the list of impacted cols should be A and B. so if a cache
  // is impacted by sorting on A or B then it needs to be refreshed. this includes where the cache
  // was previously sorted by A and then the A sort now needs to be cleared.
  SortListener.prototype.findChangedColumnsInSort = function (newSortModel, oldSortModel) {
    var allColsInBothSorts = [];
    [newSortModel, oldSortModel].forEach(function (sortModel) {
      if (sortModel) {
        var ids = sortModel.map(function (sm) {
          return sm.colId;
        });
        allColsInBothSorts = allColsInBothSorts.concat(ids);
      }
    });
    var differentSorts = function (oldSortItem, newSortItem) {
      var oldSort = oldSortItem ? oldSortItem.sort : null;
      var newSort = newSortItem ? newSortItem.sort : null;
      return oldSort !== newSort;
    };
    var differentIndexes = function (oldSortItem, newSortItem) {
      var oldIndex = oldSortModel.indexOf(oldSortItem);
      var newIndex = newSortModel.indexOf(newSortItem);
      return oldIndex !== newIndex;
    };
    return allColsInBothSorts.filter(function (colId) {
      var oldSortItem = agGridCommunity._.find(oldSortModel, function (sm) {
        return sm.colId === colId;
      });
      var newSortItem = agGridCommunity._.find(newSortModel, function (sm) {
        return sm.colId === colId;
      });
      return differentSorts(oldSortItem, newSortItem) || differentIndexes(oldSortItem, newSortItem);
    });
  };
  __decorate$1D([agGridCommunity.Autowired('sortController')], SortListener.prototype, "sortController", void 0);
  __decorate$1D([agGridCommunity.Autowired('columnController')], SortListener.prototype, "columnController", void 0);
  __decorate$1D([agGridCommunity.Autowired('rowModel')], SortListener.prototype, "serverSideRowModel", void 0);
  __decorate$1D([agGridCommunity.Autowired('ssrmListenerUtils')], SortListener.prototype, "listenerUtils", void 0);
  __decorate$1D([agGridCommunity.PostConstruct], SortListener.prototype, "postConstruct", null);
  SortListener = __decorate$1D([agGridCommunity.Bean('ssrmSortService')], SortListener);
  return SortListener;
}(agGridCommunity.BeanStub);
var __extends$2R =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1E =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FilterListener = /** @class */function (_super) {
  __extends$2R(FilterListener, _super);
  function FilterListener() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  FilterListener.prototype.postConstruct = function () {
    // only want to be active if SSRM active, otherwise would be interfering with other row models
    if (!this.gridOptionsWrapper.isRowModelServerSide()) {
      return;
    }
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
  };
  FilterListener.prototype.onFilterChanged = function () {
    var storeParams = this.serverSideRowModel.getParams();
    if (!storeParams) {
      return;
    } // params is undefined if no datasource set
    var newModel = this.filterManager.getFilterModel();
    var oldModel = storeParams ? storeParams.filterModel : {};
    var changedColumns = this.findChangedColumns(newModel, oldModel);
    var valueColChanged = this.listenerUtils.isSortingWithValueColumn(changedColumns);
    var secondaryColChanged = this.listenerUtils.isSortingWithSecondaryColumn(changedColumns);
    var alwaysReset = this.gridOptionsWrapper.isServerSideFilteringAlwaysResets();
    var params = {
      valueColChanged: valueColChanged,
      secondaryColChanged: secondaryColChanged,
      alwaysReset: alwaysReset,
      changedColumns: changedColumns
    };
    this.serverSideRowModel.refreshAfterFilter(newModel, params);
  };
  FilterListener.prototype.findChangedColumns = function (oldModel, newModel) {
    var allColKeysMap = {};
    Object.keys(oldModel).forEach(function (key) {
      return allColKeysMap[key] = true;
    });
    Object.keys(newModel).forEach(function (key) {
      return allColKeysMap[key] = true;
    });
    var res = [];
    Object.keys(allColKeysMap).forEach(function (key) {
      var oldJson = JSON.stringify(oldModel[key]);
      var newJson = JSON.stringify(newModel[key]);
      var filterChanged = oldJson != newJson;
      if (filterChanged) {
        res.push(key);
      }
    });
    return res;
  };
  __decorate$1E([agGridCommunity.Autowired('rowModel')], FilterListener.prototype, "serverSideRowModel", void 0);
  __decorate$1E([agGridCommunity.Autowired('filterManager')], FilterListener.prototype, "filterManager", void 0);
  __decorate$1E([agGridCommunity.Autowired('ssrmListenerUtils')], FilterListener.prototype, "listenerUtils", void 0);
  __decorate$1E([agGridCommunity.PostConstruct], FilterListener.prototype, "postConstruct", null);
  FilterListener = __decorate$1E([agGridCommunity.Bean('ssrmFilterListener')], FilterListener);
  return FilterListener;
}(agGridCommunity.BeanStub);
var __extends$2S =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1F =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param$1 =  false || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};
var PartialStoreBlock = /** @class */function (_super) {
  __extends$2S(PartialStoreBlock, _super);
  function PartialStoreBlock(blockNumber, parentRowNode, ssrmParams, storeParams, parentStore) {
    var _this = _super.call(this, blockNumber) || this;
    _this.ssrmParams = ssrmParams;
    _this.storeParams = storeParams;
    _this.parentRowNode = parentRowNode;
    // we don't need to calculate these now, as the inputs don't change,
    // however it makes the code easier to read if we work them out up front
    _this.startRow = blockNumber * storeParams.cacheBlockSize;
    _this.parentStore = parentStore;
    _this.level = parentRowNode.level + 1;
    _this.groupLevel = ssrmParams.rowGroupCols ? _this.level < ssrmParams.rowGroupCols.length : undefined;
    _this.leafGroup = ssrmParams.rowGroupCols ? _this.level === ssrmParams.rowGroupCols.length - 1 : false;
    return _this;
  }
  PartialStoreBlock.prototype.postConstruct = function () {
    this.usingTreeData = this.gridOptionsWrapper.isTreeData();
    if (!this.usingTreeData && this.groupLevel) {
      var groupColVo = this.ssrmParams.rowGroupCols[this.level];
      this.groupField = groupColVo.field;
      this.rowGroupColumn = this.columnController.getRowGroupColumns()[this.level];
    }
    this.nodeIdPrefix = this.blockUtils.createNodeIdPrefix(this.parentRowNode);
    this.setData([]);
  };
  PartialStoreBlock.prototype.isDisplayIndexInBlock = function (displayIndex) {
    return displayIndex >= this.displayIndexStart && displayIndex < this.displayIndexEnd;
  };
  PartialStoreBlock.prototype.isBlockBefore = function (displayIndex) {
    return displayIndex >= this.displayIndexEnd;
  };
  PartialStoreBlock.prototype.getDisplayIndexStart = function () {
    return this.displayIndexStart;
  };
  PartialStoreBlock.prototype.getDisplayIndexEnd = function () {
    return this.displayIndexEnd;
  };
  PartialStoreBlock.prototype.getBlockHeightPx = function () {
    return this.blockHeightPx;
  };
  PartialStoreBlock.prototype.getBlockTopPx = function () {
    return this.blockTopPx;
  };
  PartialStoreBlock.prototype.isGroupLevel = function () {
    return this.groupLevel;
  };
  PartialStoreBlock.prototype.getGroupField = function () {
    return this.groupField;
  };
  PartialStoreBlock.prototype.prefixId = function (id) {
    if (this.nodeIdPrefix != null) {
      return this.nodeIdPrefix + '-' + id;
    } else {
      return id.toString();
    }
  };
  PartialStoreBlock.prototype.getBlockStateJson = function () {
    return {
      id: this.prefixId(this.getId()),
      state: {
        blockNumber: this.getId(),
        startRow: this.startRow,
        endRow: this.startRow + this.storeParams.cacheBlockSize,
        pageStatus: this.getState()
      }
    };
  };
  PartialStoreBlock.prototype.isAnyNodeOpen = function () {
    var openNodeCount = this.rowNodes.filter(function (node) {
      return node.expanded;
    }).length;
    return openNodeCount > 0;
  };
  // this method is repeated, see forEachRowNode, why?
  PartialStoreBlock.prototype.forEachNode = function (callback, sequence, includeChildren, filterAndSort) {
    if (sequence === void 0) {
      sequence = new agGridCommunity.NumberSequence();
    }
    this.rowNodes.forEach(function (rowNode) {
      callback(rowNode, sequence.next());
      // this will only every happen for server side row model, as infinite
      // row model doesn't have groups
      if (includeChildren && rowNode.childStore) {
        var childStore = rowNode.childStore;
        if (filterAndSort) {
          childStore.forEachNodeDeepAfterFilterAndSort(callback, sequence);
        } else {
          childStore.forEachNodeDeep(callback, sequence);
        }
      }
    });
  };
  PartialStoreBlock.prototype.forEachNodeDeep = function (callback, sequence) {
    this.forEachNode(callback, sequence, true, false);
  };
  PartialStoreBlock.prototype.forEachNodeAfterFilterAndSort = function (callback, sequence) {
    this.forEachNode(callback, sequence, true, true);
  };
  PartialStoreBlock.prototype.forEachNodeShallow = function (callback, sequence) {
    this.forEachNode(callback, sequence, false, false);
  };
  PartialStoreBlock.prototype.getLastAccessed = function () {
    return this.lastAccessed;
  };
  PartialStoreBlock.prototype.getRowUsingLocalIndex = function (rowIndex) {
    return this.rowNodes[rowIndex - this.startRow];
  };
  PartialStoreBlock.prototype.touchLastAccessed = function () {
    this.lastAccessed = this.ssrmParams.lastAccessedSequence.next();
  };
  PartialStoreBlock.prototype.processServerFail = function () {
    this.parentStore.onBlockLoadFailed(this);
  };
  PartialStoreBlock.prototype.retryLoads = function () {
    if (this.getState() === agGridCommunity.RowNodeBlock.STATE_FAILED) {
      this.setStateWaitingToLoad();
      this.rowNodeBlockLoader.checkBlockToLoad();
      this.setData();
    }
    this.forEachNodeShallow(function (node) {
      if (node.childStore) {
        node.childStore.retryLoads();
      }
    });
  };
  PartialStoreBlock.prototype.processServerResult = function (params) {
    this.parentStore.onBlockLoaded(this, params);
  };
  PartialStoreBlock.prototype.setData = function (rows, failedLoad) {
    if (rows === void 0) {
      rows = [];
    }
    if (failedLoad === void 0) {
      failedLoad = false;
    }
    this.destroyRowNodes();
    var storeRowCount = this.parentStore.getRowCount();
    var startRow = this.getId() * this.storeParams.cacheBlockSize;
    var endRow = Math.min(startRow + this.storeParams.cacheBlockSize, storeRowCount);
    var rowsToCreate = endRow - startRow;
    for (var i = 0; i < rowsToCreate; i++) {
      var rowNode = this.blockUtils.createRowNode({
        field: this.groupField,
        group: this.groupLevel,
        leafGroup: this.leafGroup,
        level: this.level,
        parent: this.parentRowNode,
        rowGroupColumn: this.rowGroupColumn
      });
      var dataLoadedForThisRow = i < rows.length;
      if (dataLoadedForThisRow) {
        var data = rows[i];
        var defaultId = this.prefixId(this.startRow + i);
        this.blockUtils.setDataIntoRowNode(rowNode, data, defaultId);
        var newId = rowNode.id;
        this.parentStore.removeDuplicateNode(newId);
        this.nodeManager.addRowNode(rowNode);
        this.allNodesMap[rowNode.id] = rowNode;
        this.blockUtils.checkOpenByDefault(rowNode);
      }
      this.rowNodes.push(rowNode);
      if (failedLoad) {
        rowNode.failedLoad = true;
      }
    }
  };
  // to safeguard the grid against duplicate nodes, when a row is loaded, we check
  // for another row in the same cache. if another row does exist, we delete it.
  // this covers for when user refreshes the store (which typically happens after a
  // data change) and the same row ends up coming back in a different block, and the
  // new block finishes refreshing before the old block has finished refreshing.
  PartialStoreBlock.prototype.removeDuplicateNode = function (id) {
    var rowNode = this.allNodesMap[id];
    if (!rowNode) {
      return;
    }
    this.blockUtils.destroyRowNode(rowNode);
    var index = this.rowNodes.indexOf(rowNode);
    var stubRowNode = this.blockUtils.createRowNode({
      field: this.groupField,
      group: this.groupLevel,
      leafGroup: this.leafGroup,
      level: this.level,
      parent: this.parentRowNode,
      rowGroupColumn: this.rowGroupColumn
    });
    this.rowNodes[index] = stubRowNode;
  };
  PartialStoreBlock.prototype.refresh = function () {
    if (this.getState() !== agGridCommunity.RowNodeBlock.STATE_WAITING_TO_LOAD) {
      this.setStateWaitingToLoad();
    }
  };
  PartialStoreBlock.prototype.destroyRowNodes = function () {
    this.blockUtils.destroyRowNodes(this.rowNodes);
    this.rowNodes = [];
    this.allNodesMap = {};
  };
  PartialStoreBlock.prototype.setBeans = function (loggerFactory) {
    this.logger = loggerFactory.create('ServerSideBlock');
  };
  PartialStoreBlock.prototype.getRowUsingDisplayIndex = function (displayRowIndex) {
    this.touchLastAccessed();
    var res = this.blockUtils.binarySearchForDisplayIndex(displayRowIndex, this.rowNodes);
    return res;
  };
  PartialStoreBlock.prototype.loadFromDatasource = function () {
    this.cacheUtils.loadFromDatasource({
      startRow: this.startRow,
      endRow: this.startRow + this.storeParams.cacheBlockSize,
      parentNode: this.parentRowNode,
      storeParams: this.ssrmParams,
      successCallback: this.pageLoaded.bind(this, this.getVersion()),
      success: this.success.bind(this, this.getVersion()),
      failCallback: this.pageLoadFailed.bind(this, this.getVersion()),
      fail: this.pageLoadFailed.bind(this, this.getVersion())
    });
  };
  PartialStoreBlock.prototype.isPixelInRange = function (pixel) {
    return pixel >= this.blockTopPx && pixel < this.blockTopPx + this.blockHeightPx;
  };
  PartialStoreBlock.prototype.getRowBounds = function (index) {
    var _this = this;
    this.touchLastAccessed();
    var res;
    agGridCommunity._.find(this.rowNodes, function (rowNode) {
      res = _this.blockUtils.extractRowBounds(rowNode, index);
      return res != null;
    });
    return res;
  };
  PartialStoreBlock.prototype.getRowIndexAtPixel = function (pixel) {
    var _this = this;
    this.touchLastAccessed();
    var res = null;
    agGridCommunity._.find(this.rowNodes, function (rowNode) {
      res = _this.blockUtils.getIndexAtPixel(rowNode, pixel);
      return res != null;
    });
    return res;
  };
  PartialStoreBlock.prototype.clearDisplayIndexes = function () {
    var _this = this;
    this.displayIndexEnd = undefined;
    this.displayIndexStart = undefined;
    this.rowNodes.forEach(function (rowNode) {
      return _this.blockUtils.clearDisplayIndex(rowNode);
    });
  };
  PartialStoreBlock.prototype.setDisplayIndexes = function (displayIndexSeq, nextRowTop) {
    var _this = this;
    this.displayIndexStart = displayIndexSeq.peek();
    this.blockTopPx = nextRowTop.value;
    this.rowNodes.forEach(function (rowNode) {
      return _this.blockUtils.setDisplayIndex(rowNode, displayIndexSeq, nextRowTop);
    });
    this.displayIndexEnd = displayIndexSeq.peek();
    this.blockHeightPx = nextRowTop.value - this.blockTopPx;
  };
  __decorate$1F([agGridCommunity.Autowired('columnController')], PartialStoreBlock.prototype, "columnController", void 0);
  __decorate$1F([agGridCommunity.Autowired('ssrmCacheUtils')], PartialStoreBlock.prototype, "cacheUtils", void 0);
  __decorate$1F([agGridCommunity.Autowired('ssrmBlockUtils')], PartialStoreBlock.prototype, "blockUtils", void 0);
  __decorate$1F([agGridCommunity.Autowired('ssrmNodeManager')], PartialStoreBlock.prototype, "nodeManager", void 0);
  __decorate$1F([agGridCommunity.Autowired('rowNodeBlockLoader')], PartialStoreBlock.prototype, "rowNodeBlockLoader", void 0);
  __decorate$1F([agGridCommunity.PostConstruct], PartialStoreBlock.prototype, "postConstruct", null);
  __decorate$1F([agGridCommunity.PreDestroy], PartialStoreBlock.prototype, "destroyRowNodes", null);
  __decorate$1F([__param$1(0, agGridCommunity.Qualifier('loggerFactory'))], PartialStoreBlock.prototype, "setBeans", null);
  return PartialStoreBlock;
}(agGridCommunity.RowNodeBlock);
var __extends$2T =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1G =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param$2 =  false || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};
var FindResult;
(function (FindResult) {
  FindResult[FindResult["FOUND"] = 0] = "FOUND";
  FindResult[FindResult["CONTINUE_FIND"] = 1] = "CONTINUE_FIND";
  FindResult[FindResult["BREAK_FIND"] = 2] = "BREAK_FIND";
})(FindResult || (FindResult = {}));
var PartialStore = /** @class */function (_super) {
  __extends$2T(PartialStore, _super);
  function PartialStore(ssrmParams, storeParams, parentRowNode) {
    var _this = _super.call(this) || this;
    _this.blocks = {};
    _this.blockHeights = {};
    _this.lastRowIndexKnown = false;
    // this will always be zero for the top level cache only,
    // all the other ones change as the groups open and close
    _this.displayIndexStart = 0;
    _this.displayIndexEnd = 0; // not sure if setting this one to zero is necessary
    _this.cacheTopPixel = 0;
    _this.info = {};
    _this.ssrmParams = ssrmParams;
    _this.storeParams = storeParams;
    _this.parentRowNode = parentRowNode;
    _this.rowCount = PartialStore.INITIAL_ROW_COUNT;
    return _this;
  }
  PartialStore.prototype.postConstruct = function () {
    this.defaultRowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();
  };
  PartialStore.prototype.destroyAllBlocks = function () {
    var _this = this;
    this.getBlocksInOrder().forEach(function (block) {
      return _this.destroyBlock(block);
    });
  };
  PartialStore.prototype.setBeans = function (loggerFactory) {
    this.logger = loggerFactory.create('ServerSideCache');
  };
  PartialStore.prototype.getRowCount = function () {
    return this.rowCount;
  };
  PartialStore.prototype.isLastRowIndexKnown = function () {
    return this.lastRowIndexKnown;
  };
  PartialStore.prototype.retryLoads = function () {
    this.getBlocksInOrder().forEach(function (block) {
      return block.retryLoads();
    });
  };
  PartialStore.prototype.onBlockLoadFailed = function (block) {
    block.setData([], true);
    this.fireCacheUpdatedEvent();
  };
  PartialStore.prototype.onBlockLoaded = function (block, params) {
    this.logger.log("onPageLoaded: page = " + block.getId() + ", lastRow = " + params.rowCount);
    if (params.storeInfo) {
      agGridCommunity._.assign(this.info, params.storeInfo);
    }
    if (!params.rowData) {
      var message_1 = 'AG Grid: "params.rowData" is missing from Server-Side Row Model success() callback. Please use the "rowData" attribute. If no data is returned, set an empty list.';
      agGridCommunity._.doOnce(function () {
        return console.warn(message_1, params);
      }, 'InfiniteStore.noData');
    }
    var finalRowCount = params.rowCount != null && params.rowCount >= 0 ? params.rowCount : undefined;
    // if we are not active, then we ignore all events, otherwise we could end up getting the
    // grid to refresh even though we are no longer the active cache
    if (!this.isAlive()) {
      return;
    }
    this.checkRowCount(block, finalRowCount);
    block.setData(params.rowData);
    // if the virtualRowCount is shortened, then it's possible blocks exist that are no longer
    // in the valid range. so we must remove these. this can happen if the datasource returns a
    // result and sets lastRow to something less than virtualRowCount (can happen if user scrolls
    // down, server reduces dataset size).
    this.destroyAllBlocksPastVirtualRowCount();
    this.fireCacheUpdatedEvent();
  };
  PartialStore.prototype.purgeBlocksIfNeeded = function (blockToExclude) {
    var _this = this;
    // we exclude checking for the page just created, as this has yet to be accessed and hence
    // the lastAccessed stamp will not be updated for the first time yet
    var blocksForPurging = this.getBlocksInOrder().filter(function (b) {
      return b != blockToExclude;
    });
    var lastAccessedComparator = function (a, b) {
      return b.getLastAccessed() - a.getLastAccessed();
    };
    blocksForPurging.sort(lastAccessedComparator);
    // we remove (maxBlocksInCache - 1) as we already excluded the 'just created' page.
    // in other words, after the splice operation below, we have taken out the blocks
    // we want to keep, which means we are left with blocks that we can potentially purge
    var maxBlocksProvided = this.storeParams.maxBlocksInCache > 0;
    var blocksToKeep = maxBlocksProvided ? this.storeParams.maxBlocksInCache - 1 : null;
    var emptyBlocksToKeep = PartialStore.MAX_EMPTY_BLOCKS_TO_KEEP - 1;
    blocksForPurging.forEach(function (block, index) {
      var purgeBecauseBlockEmpty = block.getState() === PartialStoreBlock.STATE_WAITING_TO_LOAD && index >= emptyBlocksToKeep;
      var purgeBecauseCacheFull = maxBlocksProvided ? index >= blocksToKeep : false;
      if (purgeBecauseBlockEmpty || purgeBecauseCacheFull) {
        // we never purge blocks if they are open, as purging them would mess up with
        // our indexes, it would be very messy to restore the purged block to it's
        // previous state if it had open children.
        if (block.isAnyNodeOpen()) {
          return;
        }
        // if the block currently has rows been displayed, then don't remove it either.
        // this can happen if user has maxBlocks=2, and blockSize=5 (thus 10 max rows in cache)
        // but the screen is showing 20 rows, so at least 4 blocks are needed.
        if (_this.isBlockCurrentlyDisplayed(block)) {
          return;
        }
        // don't want to loose keyboard focus, so keyboard navigation can continue. so keep focused blocks.
        if (_this.isBlockFocused(block)) {
          return;
        }
        // at this point, block is not needed, and no open nodes, so burn baby burn
        _this.destroyBlock(block);
      }
    });
  };
  PartialStore.prototype.isBlockFocused = function (block) {
    var focusedCell = this.focusController.getFocusCellToUseAfterRefresh();
    if (!focusedCell) {
      return false;
    }
    if (focusedCell.rowPinned != null) {
      return false;
    }
    var blockIndexStart = block.getDisplayIndexStart();
    var blockIndexEnd = block.getDisplayIndexEnd();
    if (blockIndexEnd == null || blockIndexStart == null) {
      return false;
    }
    var hasFocus = focusedCell.rowIndex >= blockIndexStart && focusedCell.rowIndex < blockIndexEnd;
    return hasFocus;
  };
  PartialStore.prototype.isBlockCurrentlyDisplayed = function (block) {
    var startIndex = block.getDisplayIndexStart();
    var endIndex = block.getDisplayIndexEnd() - 1;
    return this.rowRenderer.isRangeInRenderedViewport(startIndex, endIndex);
  };
  PartialStore.prototype.removeDuplicateNode = function (id) {
    this.getBlocksInOrder().forEach(function (block) {
      return block.removeDuplicateNode(id);
    });
  };
  PartialStore.prototype.checkRowCount = function (block, lastRow) {
    // if client provided a last row, we always use it, as it could change between server calls
    // if user deleted data and then called refresh on the grid.
    if (typeof lastRow === 'number' && lastRow >= 0) {
      this.rowCount = lastRow;
      this.lastRowIndexKnown = true;
    } else if (!this.lastRowIndexKnown) {
      // otherwise, see if we need to add some virtual rows
      var lastRowIndex = (block.getId() + 1) * this.storeParams.cacheBlockSize;
      var lastRowIndexPlusOverflow = lastRowIndex + PartialStore.OVERFLOW_SIZE;
      if (this.rowCount < lastRowIndexPlusOverflow) {
        this.rowCount = lastRowIndexPlusOverflow;
      }
    }
  };
  PartialStore.prototype.forEachNodeDeep = function (callback, sequence) {
    if (sequence === void 0) {
      sequence = new agGridCommunity.NumberSequence();
    }
    this.getBlocksInOrder().forEach(function (block) {
      return block.forEachNodeDeep(callback, sequence);
    });
  };
  PartialStore.prototype.forEachNodeDeepAfterFilterAndSort = function (callback, sequence) {
    if (sequence === void 0) {
      sequence = new agGridCommunity.NumberSequence();
    }
    this.getBlocksInOrder().forEach(function (block) {
      return block.forEachNodeAfterFilterAndSort(callback, sequence);
    });
  };
  PartialStore.prototype.getBlocksInOrder = function () {
    // get all page id's as NUMBERS (not strings, as we need to sort as numbers) and in descending order
    var blockComparator = function (a, b) {
      return a.getId() - b.getId();
    };
    var blocks = agGridCommunity._.getAllValuesInObject(this.blocks).sort(blockComparator);
    return blocks;
  };
  PartialStore.prototype.destroyBlock = function (block) {
    delete this.blocks[block.getId()];
    this.destroyBean(block);
    this.rowNodeBlockLoader.removeBlock(block);
  };
  // gets called 1) row count changed 2) cache purged 3) items inserted
  PartialStore.prototype.fireCacheUpdatedEvent = function () {
    // this results in row model firing ModelUpdated.
    // server side row model also updates the row indexes first
    var event = {
      type: agGridCommunity.Events.EVENT_STORE_UPDATED
    };
    this.eventService.dispatchEvent(event);
  };
  PartialStore.prototype.destroyAllBlocksPastVirtualRowCount = function () {
    var _this = this;
    var blocksToDestroy = [];
    this.getBlocksInOrder().forEach(function (block) {
      var startRow = block.getId() * _this.storeParams.cacheBlockSize;
      if (startRow >= _this.rowCount) {
        blocksToDestroy.push(block);
      }
    });
    if (blocksToDestroy.length > 0) {
      blocksToDestroy.forEach(function (block) {
        return _this.destroyBlock(block);
      });
    }
  };
  PartialStore.prototype.refreshStore = function (purge) {
    var noBlocksToRefresh = this.getRowCount() == 0;
    if (noBlocksToRefresh || purge) {
      this.resetStore();
    } else {
      this.refreshBlocks();
    }
    this.fireCacheUpdatedEvent();
  };
  PartialStore.prototype.refreshBlocks = function () {
    this.getBlocksInOrder().forEach(function (block) {
      block.refresh();
    });
    this.lastRowIndexKnown = false;
    this.rowNodeBlockLoader.checkBlockToLoad();
  };
  PartialStore.prototype.resetStore = function () {
    this.destroyAllBlocks();
    this.lastRowIndexKnown = false;
    // if zero rows in the cache, we need to get the SSRM to start asking for rows again.
    // otherwise if set to zero rows last time, and we don't update the row count, then after
    // the purge there will still be zero rows, meaning the SSRM won't request any rows.
    // to kick things off, at least one row needs to be asked for.
    if (this.rowCount === 0) {
      this.rowCount = PartialStore.INITIAL_ROW_COUNT;
    }
  };
  PartialStore.prototype.getRowNodesInRange = function (firstInRange, lastInRange) {
    var result = [];
    var lastBlockId = -1;
    var inActiveRange = false;
    // if only one node passed, we start the selection at the top
    if (agGridCommunity._.missing(firstInRange)) {
      inActiveRange = true;
    }
    var foundGapInSelection = false;
    this.getBlocksInOrder().forEach(function (block) {
      if (foundGapInSelection) {
        return;
      }
      if (inActiveRange && lastBlockId + 1 !== block.getId()) {
        foundGapInSelection = true;
        return;
      }
      lastBlockId = block.getId();
      block.forEachNodeShallow(function (rowNode) {
        var hitFirstOrLast = rowNode === firstInRange || rowNode === lastInRange;
        if (inActiveRange || hitFirstOrLast) {
          result.push(rowNode);
        }
        if (hitFirstOrLast) {
          inActiveRange = !inActiveRange;
        }
      });
    });
    // inActiveRange will be still true if we never hit the second rowNode
    var invalidRange = foundGapInSelection || inActiveRange;
    return invalidRange ? [] : result;
  };
  PartialStore.prototype.findBlockAndExecute = function (matchBlockFunc, blockFoundFunc, blockNotFoundFunc) {
    var blockFound = false;
    var breakSearch = false;
    var lastBlock = null;
    var res;
    this.getBlocksInOrder().forEach(function (block) {
      if (blockFound || breakSearch) {
        return;
      }
      var comparatorResult = matchBlockFunc(block);
      if (comparatorResult == FindResult.FOUND) {
        res = blockFoundFunc(block);
        blockFound = true;
      } else if (comparatorResult == FindResult.CONTINUE_FIND) {
        lastBlock = block;
      } else if (comparatorResult == FindResult.BREAK_FIND) {
        breakSearch = true;
      }
    });
    if (!blockFound) {
      res = blockNotFoundFunc(lastBlock);
    }
    return res;
  };
  PartialStore.prototype.getRowBounds = function (index) {
    var _this = this;
    var matchBlockFunc = function (block) {
      if (block.isDisplayIndexInBlock(index)) {
        return FindResult.FOUND;
      } else {
        return block.isBlockBefore(index) ? FindResult.CONTINUE_FIND : FindResult.BREAK_FIND;
      }
    };
    var blockFoundFunc = function (foundBlock) {
      return foundBlock.getRowBounds(index);
    };
    var blockNotFoundFunc = function (previousBlock) {
      var nextRowTop;
      var nextRowIndex;
      if (previousBlock !== null) {
        nextRowTop = previousBlock.getBlockTopPx() + previousBlock.getBlockHeightPx();
        nextRowIndex = previousBlock.getDisplayIndexEnd();
      } else {
        nextRowTop = _this.cacheTopPixel;
        nextRowIndex = _this.displayIndexStart;
      }
      var rowsBetween = index - nextRowIndex;
      return {
        rowHeight: _this.defaultRowHeight,
        rowTop: nextRowTop + rowsBetween * _this.defaultRowHeight
      };
    };
    return this.findBlockAndExecute(matchBlockFunc, blockFoundFunc, blockNotFoundFunc);
  };
  PartialStore.prototype.getRowIndexAtPixel = function (pixel) {
    var _this = this;
    var matchBlockFunc = function (block) {
      if (block.isPixelInRange(pixel)) {
        return FindResult.FOUND;
      } else {
        return block.getBlockTopPx() < pixel ? FindResult.CONTINUE_FIND : FindResult.BREAK_FIND;
      }
    };
    var blockFoundFunc = function (foundBlock) {
      return foundBlock.getRowIndexAtPixel(pixel);
    };
    var blockNotFoundFunc = function (previousBlock) {
      var nextRowTop;
      var nextRowIndex;
      if (previousBlock) {
        nextRowTop = previousBlock.getBlockTopPx() + previousBlock.getBlockHeightPx();
        nextRowIndex = previousBlock.getDisplayIndexEnd();
      } else {
        nextRowTop = _this.cacheTopPixel;
        nextRowIndex = _this.displayIndexStart;
      }
      var pixelsBetween = pixel - nextRowTop;
      var rowsBetween = pixelsBetween / _this.defaultRowHeight | 0;
      return nextRowIndex + rowsBetween;
    };
    var result = this.findBlockAndExecute(matchBlockFunc, blockFoundFunc, blockNotFoundFunc);
    var lastAllowedIndex = this.getDisplayIndexEnd() - 1;
    result = Math.min(result, lastAllowedIndex);
    return result;
  };
  PartialStore.prototype.clearDisplayIndexes = function () {
    this.displayIndexStart = undefined;
    this.displayIndexEnd = undefined;
    this.getBlocksInOrder().forEach(function (block) {
      return block.clearDisplayIndexes();
    });
  };
  PartialStore.prototype.setDisplayIndexes = function (displayIndexSeq, nextRowTop) {
    var _this = this;
    this.displayIndexStart = displayIndexSeq.peek();
    this.cacheTopPixel = nextRowTop.value;
    var lastBlockId = -1;
    var blockSize = this.storeParams.cacheBlockSize;
    this.getBlocksInOrder().forEach(function (currentBlock) {
      // if we skipped blocks, then we need to skip the row indexes. we assume that all missing
      // blocks are made up of closed RowNodes only (if they were groups), as we never expire from
      // the cache if any row nodes are open.
      var blockId = currentBlock.getId();
      var blocksSkippedCount = blockId - lastBlockId - 1;
      var rowsSkippedCount = blocksSkippedCount * blockSize;
      if (rowsSkippedCount > 0) {
        displayIndexSeq.skip(rowsSkippedCount);
      }
      for (var i = 1; i <= blocksSkippedCount; i++) {
        var blockToAddId = blockId - i;
        if (agGridCommunity._.exists(_this.blockHeights[blockToAddId])) {
          nextRowTop.value += _this.blockHeights[blockToAddId];
        } else {
          nextRowTop.value += blockSize * _this.defaultRowHeight;
        }
      }
      lastBlockId = blockId;
      currentBlock.setDisplayIndexes(displayIndexSeq, nextRowTop);
      _this.blockHeights[blockId] = currentBlock.getBlockHeightPx();
    });
    // if any blocks missing at the end, need to increase the row index for them also
    // eg if block size = 10, we have total rows of 25 (indexes 0 .. 24), but first 2 blocks loaded (because
    // last row was ejected from cache), then:
    // lastVisitedRow = 19, virtualRowCount = 25, rows not accounted for = 5 (24 - 19)
    var lastVisitedRow = (lastBlockId + 1) * blockSize - 1;
    var rowCount = this.getRowCount();
    var rowsNotAccountedFor = rowCount - lastVisitedRow - 1;
    if (rowsNotAccountedFor > 0) {
      displayIndexSeq.skip(rowsNotAccountedFor);
      nextRowTop.value += rowsNotAccountedFor * this.defaultRowHeight;
    }
    this.displayIndexEnd = displayIndexSeq.peek();
    this.cacheHeightPixels = nextRowTop.value - this.cacheTopPixel;
  };
  // gets called in a) init() above and b) by the grid
  PartialStore.prototype.getRowUsingDisplayIndex = function (displayRowIndex, dontCreateBlock) {
    var _this = this;
    if (dontCreateBlock === void 0) {
      dontCreateBlock = false;
    }
    // this can happen if asking for a row that doesn't exist in the model,
    // eg if a cell range is selected, and the user filters so rows no longer exists
    if (!this.isDisplayIndexInStore(displayRowIndex)) {
      return null;
    }
    var matchBlockFunc = function (block) {
      if (block.isDisplayIndexInBlock(displayRowIndex)) {
        return FindResult.FOUND;
      } else {
        return block.isBlockBefore(displayRowIndex) ? FindResult.CONTINUE_FIND : FindResult.BREAK_FIND;
      }
    };
    var blockFoundFunc = function (foundBlock) {
      return foundBlock.getRowUsingDisplayIndex(displayRowIndex);
    };
    var blockNotFoundFunc = function (previousBlock) {
      if (dontCreateBlock) {
        return;
      }
      var blockNumber;
      var displayIndexStart;
      var nextRowTop;
      var blockSize = _this.storeParams.cacheBlockSize;
      // because missing blocks are always fully closed, we can work out
      // the start index of the block we want by hopping from the closest block,
      // as we know the row count in closed blocks is equal to the page size
      if (previousBlock) {
        blockNumber = previousBlock.getId() + 1;
        displayIndexStart = previousBlock.getDisplayIndexEnd();
        nextRowTop = previousBlock.getBlockHeightPx() + previousBlock.getBlockTopPx();
        var isInRange = function () {
          return displayRowIndex >= displayIndexStart && displayRowIndex < displayIndexStart + blockSize;
        };
        while (!isInRange()) {
          displayIndexStart += blockSize;
          var cachedBlockHeight = _this.blockHeights[blockNumber];
          if (agGridCommunity._.exists(cachedBlockHeight)) {
            nextRowTop += cachedBlockHeight;
          } else {
            nextRowTop += _this.defaultRowHeight * blockSize;
          }
          blockNumber++;
        }
      } else {
        var localIndex = displayRowIndex - _this.displayIndexStart;
        blockNumber = Math.floor(localIndex / blockSize);
        displayIndexStart = _this.displayIndexStart + blockNumber * blockSize;
        nextRowTop = _this.cacheTopPixel + blockNumber * blockSize * _this.defaultRowHeight;
      }
      _this.logger.log("block missing, rowIndex = " + displayRowIndex + ", creating #" + blockNumber + ", displayIndexStart = " + displayIndexStart);
      var newBlock = _this.createBlock(blockNumber, displayIndexStart, {
        value: nextRowTop
      });
      return newBlock.getRowUsingDisplayIndex(displayRowIndex);
    };
    return this.findBlockAndExecute(matchBlockFunc, blockFoundFunc, blockNotFoundFunc);
  };
  PartialStore.prototype.getTopLevelRowDisplayedIndex = function (topLevelIndex) {
    var blockSize = this.storeParams.cacheBlockSize;
    var blockId = Math.floor(topLevelIndex / blockSize);
    var matchBlockFunc = function (block) {
      if (block.getId() === blockId) {
        return FindResult.FOUND;
      }
      return block.getId() < blockId ? FindResult.CONTINUE_FIND : FindResult.BREAK_FIND;
    };
    var blockFoundFunc = function (foundBlock) {
      var rowNode = foundBlock.getRowUsingLocalIndex(topLevelIndex);
      return rowNode.rowIndex;
    };
    var blockNotFoundFunc = function (previousBlock) {
      if (!previousBlock) {
        return topLevelIndex;
      }
      // note: the local index is the same as the top level index, two terms for same thing
      //
      // get index of the last row before this row
      // eg if blocksize = 100, then:
      //   last row of first block is 99 (100 * 1) -1;
      //   last row of second block is 199 (100 * 2) -1;
      var lastRowTopLevelIndex = blockSize * (previousBlock.getId() + 1) - 1;
      // get the last top level node in the block before the wanted block. this will be the last
      // loaded displayed top level node.
      var lastRowNode = previousBlock.getRowUsingLocalIndex(lastRowTopLevelIndex);
      // we want the index of the last displayed node, not just the top level node, so if the last top level node
      // is open, we get the index of the last displayed child node.
      var lastDisplayedNodeIndexInBlockBefore;
      if (lastRowNode.expanded && lastRowNode.childStore) {
        var serverSideCache = lastRowNode.childStore;
        lastDisplayedNodeIndexInBlockBefore = serverSideCache.getDisplayIndexEnd() - 1;
      } else if (lastRowNode.expanded && lastRowNode.detailNode) {
        lastDisplayedNodeIndexInBlockBefore = lastRowNode.detailNode.rowIndex;
      } else {
        lastDisplayedNodeIndexInBlockBefore = lastRowNode.rowIndex;
      }
      // we are guaranteed no rows are open. so the difference between the topTopIndex will be the
      // same as the difference between the displayed index
      var indexDiff = topLevelIndex - lastRowTopLevelIndex;
      return lastDisplayedNodeIndexInBlockBefore + indexDiff;
    };
    return this.findBlockAndExecute(matchBlockFunc, blockFoundFunc, blockNotFoundFunc);
  };
  PartialStore.prototype.addStoreStates = function (result) {
    result.push({
      type: agGridCommunity.ServerSideStoreType.Partial,
      route: this.storeUtils.createGroupKeys(this.parentRowNode),
      rowCount: this.rowCount,
      lastRowIndexKnown: this.lastRowIndexKnown,
      info: this.info,
      maxBlocksInCache: this.storeParams.maxBlocksInCache,
      cacheBlockSize: this.storeParams.cacheBlockSize
    });
    this.forEachChildStoreShallow(function (childStore) {
      return childStore.addStoreStates(result);
    });
  };
  PartialStore.prototype.createBlock = function (blockNumber, displayIndex, nextRowTop) {
    var block = this.createBean(new PartialStoreBlock(blockNumber, this.parentRowNode, this.ssrmParams, this.storeParams, this));
    block.setDisplayIndexes(new agGridCommunity.NumberSequence(displayIndex), nextRowTop);
    this.blocks[block.getId()] = block;
    this.purgeBlocksIfNeeded(block);
    this.rowNodeBlockLoader.addBlock(block);
    return block;
  };
  PartialStore.prototype.getDisplayIndexEnd = function () {
    return this.displayIndexEnd;
  };
  PartialStore.prototype.isDisplayIndexInStore = function (displayIndex) {
    if (this.getRowCount() === 0) {
      return false;
    }
    return displayIndex >= this.displayIndexStart && displayIndex < this.displayIndexEnd;
  };
  PartialStore.prototype.applyTransaction = function (transaction) {
    return {
      status: agGridCommunity.ServerSideTransactionResultStatus.StoreWrongType
    };
  };
  PartialStore.prototype.getChildStore = function (keys) {
    var _this = this;
    var findNodeCallback = function (key) {
      var nextNode = null;
      _this.getBlocksInOrder().forEach(function (block) {
        block.forEachNodeShallow(function (rowNode) {
          if (rowNode.key === key) {
            nextNode = rowNode;
          }
        }, new agGridCommunity.NumberSequence());
      });
      return nextNode;
    };
    return this.storeUtils.getChildStore(keys, this, findNodeCallback);
  };
  PartialStore.prototype.isPixelInRange = function (pixel) {
    if (this.getRowCount() === 0) {
      return false;
    }
    return pixel >= this.cacheTopPixel && pixel < this.cacheTopPixel + this.cacheHeightPixels;
  };
  PartialStore.prototype.refreshAfterFilter = function (params) {
    this.resetStore();
  };
  PartialStore.prototype.refreshAfterSort = function (params) {
    if (this.storeUtils.isServerRefreshNeeded(this.parentRowNode, this.ssrmParams.rowGroupCols, params)) {
      this.resetStore();
      return;
    }
    // call refreshAfterSort on children, as we did not purge.
    // if we did purge, no need to do this as all children were destroyed
    this.forEachChildStoreShallow(function (store) {
      return store.refreshAfterSort(params);
    });
  };
  PartialStore.prototype.forEachChildStoreShallow = function (callback) {
    this.getBlocksInOrder().forEach(function (block) {
      if (block.isGroupLevel()) {
        var innerCallback = function (rowNode) {
          var nextCache = rowNode.childStore;
          if (nextCache) {
            callback(nextCache);
          }
        };
        block.forEachNodeShallow(innerCallback, new agGridCommunity.NumberSequence());
      }
    });
  };
  // this property says how many empty blocks should be in a cache, eg if scrolls down fast and creates 10
  // blocks all for loading, the grid will only load the last 2 - it will assume the blocks the user quickly
  // scrolled over are not needed to be loaded.
  PartialStore.MAX_EMPTY_BLOCKS_TO_KEEP = 2;
  PartialStore.INITIAL_ROW_COUNT = 1;
  PartialStore.OVERFLOW_SIZE = 1;
  __decorate$1G([agGridCommunity.Autowired('rowRenderer')], PartialStore.prototype, "rowRenderer", void 0);
  __decorate$1G([agGridCommunity.Autowired('rowNodeBlockLoader')], PartialStore.prototype, "rowNodeBlockLoader", void 0);
  __decorate$1G([agGridCommunity.Autowired('ssrmCacheUtils')], PartialStore.prototype, "storeUtils", void 0);
  __decorate$1G([agGridCommunity.Autowired("focusController")], PartialStore.prototype, "focusController", void 0);
  __decorate$1G([agGridCommunity.PostConstruct], PartialStore.prototype, "postConstruct", null);
  __decorate$1G([agGridCommunity.PreDestroy], PartialStore.prototype, "destroyAllBlocks", null);
  __decorate$1G([__param$2(0, agGridCommunity.Qualifier('loggerFactory'))], PartialStore.prototype, "setBeans", null);
  return PartialStore;
}(agGridCommunity.BeanStub);
var __extends$2U =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1H =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FullStore = /** @class */function (_super) {
  __extends$2U(FullStore, _super);
  function FullStore(ssrmParams, storeParams, parentRowNode) {
    var _this =
    // finite block represents a cache with just one block, thus 0 is the id, it's the first block
    _super.call(this, 0) || this;
    _this.nodeIdSequence = new agGridCommunity.NumberSequence();
    _this.info = {};
    _this.ssrmParams = ssrmParams;
    _this.parentRowNode = parentRowNode;
    _this.level = parentRowNode.level + 1;
    _this.groupLevel = ssrmParams.rowGroupCols ? _this.level < ssrmParams.rowGroupCols.length : undefined;
    _this.leafGroup = ssrmParams.rowGroupCols ? _this.level === ssrmParams.rowGroupCols.length - 1 : false;
    return _this;
  }
  FullStore.prototype.postConstruct = function () {
    var _this = this;
    this.usingTreeData = this.gridOptionsWrapper.isTreeData();
    this.nodeIdPrefix = this.blockUtils.createNodeIdPrefix(this.parentRowNode);
    if (!this.usingTreeData && this.groupLevel) {
      var groupColVo = this.ssrmParams.rowGroupCols[this.level];
      this.groupField = groupColVo.field;
      this.rowGroupColumn = this.columnController.getRowGroupColumns()[this.level];
    }
    this.initialiseRowNodes();
    this.rowNodeBlockLoader.addBlock(this);
    this.addDestroyFunc(function () {
      return _this.rowNodeBlockLoader.removeBlock(_this);
    });
  };
  FullStore.prototype.destroyRowNodes = function () {
    this.blockUtils.destroyRowNodes(this.allRowNodes);
    this.allRowNodes = [];
    this.nodesAfterSort = [];
    this.nodesAfterFilter = [];
    this.allNodesMap = {};
  };
  FullStore.prototype.initialiseRowNodes = function (loadingRowsCount, failedLoad) {
    if (loadingRowsCount === void 0) {
      loadingRowsCount = 1;
    }
    if (failedLoad === void 0) {
      failedLoad = false;
    }
    this.destroyRowNodes();
    for (var i = 0; i < loadingRowsCount; i++) {
      var loadingRowNode = this.blockUtils.createRowNode({
        field: this.groupField,
        group: this.groupLevel,
        leafGroup: this.leafGroup,
        level: this.level,
        parent: this.parentRowNode,
        rowGroupColumn: this.rowGroupColumn
      });
      if (failedLoad) {
        loadingRowNode.failedLoad = true;
      }
      this.allRowNodes.push(loadingRowNode);
      this.nodesAfterFilter.push(loadingRowNode);
      this.nodesAfterSort.push(loadingRowNode);
    }
  };
  FullStore.prototype.getBlockStateJson = function () {
    return {
      id: this.nodeIdPrefix ? this.nodeIdPrefix : '',
      state: this.getState()
    };
  };
  FullStore.prototype.loadFromDatasource = function () {
    this.storeUtils.loadFromDatasource({
      startRow: undefined,
      endRow: undefined,
      parentNode: this.parentRowNode,
      storeParams: this.ssrmParams,
      successCallback: this.pageLoaded.bind(this, this.getVersion()),
      success: this.success.bind(this, this.getVersion()),
      failCallback: this.pageLoadFailed.bind(this, this.getVersion()),
      fail: this.pageLoadFailed.bind(this, this.getVersion())
    });
  };
  FullStore.prototype.getStartRow = function () {
    return 0; // always zero as not in a cache
  };

  FullStore.prototype.getEndRow = function () {
    return this.nodesAfterSort.length;
  };
  FullStore.prototype.createDataNode = function (data, index) {
    var rowNode = this.blockUtils.createRowNode({
      field: this.groupField,
      group: this.groupLevel,
      leafGroup: this.leafGroup,
      level: this.level,
      parent: this.parentRowNode,
      rowGroupColumn: this.rowGroupColumn
    });
    if (index != null) {
      agGridCommunity._.insertIntoArray(this.allRowNodes, rowNode, index);
    } else {
      this.allRowNodes.push(rowNode);
    }
    var defaultId = this.prefixId(this.nodeIdSequence.next());
    this.blockUtils.setDataIntoRowNode(rowNode, data, defaultId);
    this.nodeManager.addRowNode(rowNode);
    this.blockUtils.checkOpenByDefault(rowNode);
    this.allNodesMap[rowNode.id] = rowNode;
    return rowNode;
  };
  FullStore.prototype.prefixId = function (id) {
    if (this.nodeIdPrefix) {
      return this.nodeIdPrefix + '-' + id;
    } else {
      return id.toString();
    }
  };
  FullStore.prototype.processServerFail = function () {
    this.initialiseRowNodes(1, true);
    this.fireStoreUpdatedEvent();
    this.flushAsyncTransactions();
  };
  FullStore.prototype.processServerResult = function (params) {
    if (!this.isAlive()) {
      return;
    }
    if (params.storeInfo) {
      agGridCommunity._.assign(this.info, params.storeInfo);
    }
    var nodesToRecycle = this.allRowNodes.length > 0 ? this.allNodesMap : undefined;
    this.allRowNodes = [];
    this.nodesAfterSort = [];
    this.nodesAfterFilter = [];
    this.allNodesMap = {};
    if (!params.rowData) {
      var message_1 = 'AG Grid: "params.data" is missing from Server-Side Row Model success() callback. Please use the "data" attribute. If no data is returned, set an empty list.';
      agGridCommunity._.doOnce(function () {
        return console.warn(message_1, params);
      }, 'FullStore.noData');
    }
    this.createOrRecycleNodes(nodesToRecycle, params.rowData);
    if (nodesToRecycle) {
      this.blockUtils.destroyRowNodes(agGridCommunity._.getAllValuesInObject(nodesToRecycle));
    }
    this.filterAndSortNodes();
    this.fireStoreUpdatedEvent();
    this.flushAsyncTransactions();
  };
  FullStore.prototype.createOrRecycleNodes = function (nodesToRecycle, rowData) {
    var _this = this;
    if (!rowData) {
      return;
    }
    var lookupNodeToRecycle = function (dataItem) {
      if (!nodesToRecycle) {
        return undefined;
      }
      var userIdFunc = _this.gridOptionsWrapper.getRowNodeIdFunc();
      if (!userIdFunc) {
        return undefined;
      }
      var id = userIdFunc(dataItem);
      var foundNode = nodesToRecycle[id];
      if (!foundNode) {
        return undefined;
      }
      delete nodesToRecycle[id];
      return foundNode;
    };
    var recycleNode = function (rowNode, dataItem) {
      _this.allNodesMap[rowNode.id] = rowNode;
      rowNode.updateData(dataItem);
      _this.allRowNodes.push(rowNode);
    };
    rowData.forEach(function (dataItem) {
      var nodeToRecycle = lookupNodeToRecycle(dataItem);
      if (nodeToRecycle) {
        recycleNode(nodeToRecycle, dataItem);
      } else {
        _this.createDataNode(dataItem);
      }
    });
  };
  FullStore.prototype.flushAsyncTransactions = function () {
    var _this = this;
    // we want to update the store with any outstanding transactions straight away,
    // as otherwise if waitTimeMillis is large (eg 5s), then the user could be looking
    // at old data for a few seconds before the transactions is applied, which isn't what
    // you would expect when we advertise 'transaction is applied when data is loaded'.
    // we do this in a timeout as flushAsyncTransactions expects the grid to be in a settled
    // state, not in the middle of loading rows! keeps the VM Turns more simple and deterministic.
    window.setTimeout(function () {
      return _this.transactionManager.flushAsyncTransactions();
    }, 0);
  };
  FullStore.prototype.filterAndSortNodes = function () {
    this.filterRowNodes();
    this.sortRowNodes();
  };
  FullStore.prototype.sortRowNodes = function () {
    var sortOptions = this.sortController.getSortOptions();
    var noSortApplied = !sortOptions || sortOptions.length == 0;
    // if we reset after sort, it means the sorting is done on the server
    var sortDoneOnServer = this.gridOptionsWrapper.isServerSideSortingAlwaysResets();
    if (noSortApplied || sortDoneOnServer) {
      this.nodesAfterSort = this.nodesAfterFilter;
      return;
    }
    this.nodesAfterSort = this.rowNodeSorter.doFullSort(this.nodesAfterFilter, sortOptions);
  };
  FullStore.prototype.filterRowNodes = function () {
    var _this = this;
    // if we reset after filter, it means the filtering is done on the server
    var filterDoneOnServer = this.gridOptionsWrapper.isServerSideFilteringAlwaysResets();
    // filtering for InFullStore only works at lowest level details.
    // reason is the logic for group filtering was to difficult to work out how it should work at time of writing.
    var groupLevel = this.groupLevel;
    var skipFilter = filterDoneOnServer || groupLevel;
    if (skipFilter) {
      this.nodesAfterFilter = this.allRowNodes;
      return;
    }
    this.nodesAfterFilter = this.allRowNodes.filter(function (rowNode) {
      return _this.filterManager.doesRowPassFilter({
        rowNode: rowNode
      });
    });
  };
  FullStore.prototype.clearDisplayIndexes = function () {
    var _this = this;
    this.displayIndexStart = undefined;
    this.displayIndexEnd = undefined;
    this.allRowNodes.forEach(function (rowNode) {
      return _this.blockUtils.clearDisplayIndex(rowNode);
    });
  };
  FullStore.prototype.getDisplayIndexEnd = function () {
    return this.displayIndexEnd;
  };
  FullStore.prototype.isDisplayIndexInStore = function (displayIndex) {
    if (this.getRowCount() === 0) {
      return false;
    }
    return displayIndex >= this.displayIndexStart && displayIndex < this.displayIndexEnd;
  };
  FullStore.prototype.setDisplayIndexes = function (displayIndexSeq, nextRowTop) {
    var _this = this;
    this.displayIndexStart = displayIndexSeq.peek();
    this.topPx = nextRowTop.value;
    var visibleNodeIds = {};
    // set on all visible nodes
    this.nodesAfterSort.forEach(function (rowNode) {
      _this.blockUtils.setDisplayIndex(rowNode, displayIndexSeq, nextRowTop);
      visibleNodeIds[rowNode.id] = true;
    });
    // and clear on all non-visible nodes
    this.allRowNodes.forEach(function (rowNode) {
      if (!visibleNodeIds[rowNode.id]) {
        _this.blockUtils.clearDisplayIndex(rowNode);
      }
    });
    this.displayIndexEnd = displayIndexSeq.peek();
    this.heightPx = nextRowTop.value - this.topPx;
  };
  FullStore.prototype.forEachNodeDeep = function (callback, sequence) {
    if (sequence === void 0) {
      sequence = new agGridCommunity.NumberSequence();
    }
    this.allRowNodes.forEach(function (rowNode) {
      callback(rowNode, sequence.next());
      var childCache = rowNode.childStore;
      if (childCache) {
        childCache.forEachNodeDeep(callback, sequence);
      }
    });
  };
  FullStore.prototype.forEachNodeDeepAfterFilterAndSort = function (callback, sequence) {
    if (sequence === void 0) {
      sequence = new agGridCommunity.NumberSequence();
    }
    this.nodesAfterSort.forEach(function (rowNode) {
      callback(rowNode, sequence.next());
      var childCache = rowNode.childStore;
      if (childCache) {
        childCache.forEachNodeDeepAfterFilterAndSort(callback, sequence);
      }
    });
  };
  FullStore.prototype.getRowUsingDisplayIndex = function (displayRowIndex) {
    // this can happen if asking for a row that doesn't exist in the model,
    // eg if a cell range is selected, and the user filters so rows no longer exists
    if (!this.isDisplayIndexInStore(displayRowIndex)) {
      return null;
    }
    var res = this.blockUtils.binarySearchForDisplayIndex(displayRowIndex, this.nodesAfterSort);
    return res;
  };
  FullStore.prototype.getRowBounds = function (index) {
    for (var i = 0; i < this.nodesAfterSort.length; i++) {
      var rowNode = this.nodesAfterSort[i];
      var res = this.blockUtils.extractRowBounds(rowNode, index);
      if (res) {
        return res;
      }
    }
    return null;
  };
  FullStore.prototype.isPixelInRange = function (pixel) {
    return pixel >= this.topPx && pixel < this.topPx + this.heightPx;
  };
  FullStore.prototype.getRowIndexAtPixel = function (pixel) {
    var _this = this;
    // if pixel before block, return first row
    var pixelBeforeThisStore = pixel <= this.topPx;
    if (pixelBeforeThisStore) {
      var firstNode = this.nodesAfterSort[0];
      return firstNode.rowIndex;
    }
    // if pixel after store, return last row, however the last
    // row could be a child store
    var pixelAfterThisStore = pixel >= this.topPx + this.heightPx;
    if (pixelAfterThisStore) {
      var lastRowNode = this.nodesAfterSort[this.nodesAfterSort.length - 1];
      var lastRowNodeBottomPx = lastRowNode.rowTop + lastRowNode.rowHeight;
      if (pixel >= lastRowNodeBottomPx && lastRowNode.expanded && lastRowNode.childStore && lastRowNode.childStore.getRowCount() > 0) {
        return lastRowNode.childStore.getRowIndexAtPixel(pixel);
      }
      return lastRowNode.rowIndex;
    }
    var res = null;
    this.nodesAfterSort.forEach(function (rowNode) {
      var res2 = _this.blockUtils.getIndexAtPixel(rowNode, pixel);
      if (res2 != null) {
        res = res2;
      }
    });
    var pixelIsPastLastRow = res == null;
    if (pixelIsPastLastRow) {
      return this.displayIndexEnd - 1;
    }
    return res;
  };
  FullStore.prototype.getChildStore = function (keys) {
    var _this = this;
    return this.storeUtils.getChildStore(keys, this, function (key) {
      var rowNode = agGridCommunity._.find(_this.allRowNodes, function (currentRowNode) {
        return currentRowNode.key === key;
      });
      return rowNode;
    });
  };
  FullStore.prototype.forEachChildStoreShallow = function (callback) {
    this.allRowNodes.forEach(function (rowNode) {
      var childStore = rowNode.childStore;
      if (childStore) {
        callback(childStore);
      }
    });
  };
  FullStore.prototype.refreshAfterFilter = function (params) {
    if (params.alwaysReset || this.gridOptionsWrapper.isTreeData()) {
      this.refreshStore(true);
      return;
    }
    this.filterAndSortNodes();
    this.forEachChildStoreShallow(function (store) {
      return store.refreshAfterFilter(params);
    });
  };
  FullStore.prototype.refreshAfterSort = function (params) {
    if (params.alwaysReset) {
      this.refreshStore(true);
      return;
    }
    this.sortRowNodes();
    this.forEachChildStoreShallow(function (store) {
      return store.refreshAfterSort(params);
    });
  };
  FullStore.prototype.applyTransaction = function (transaction) {
    // we only apply transactions to loaded state
    switch (this.getState()) {
      case agGridCommunity.RowNodeBlock.STATE_FAILED:
        return {
          status: agGridCommunity.ServerSideTransactionResultStatus.StoreLoadingFailed
        };
      case agGridCommunity.RowNodeBlock.STATE_LOADING:
        return {
          status: agGridCommunity.ServerSideTransactionResultStatus.StoreLoading
        };
      case agGridCommunity.RowNodeBlock.STATE_WAITING_TO_LOAD:
        return {
          status: agGridCommunity.ServerSideTransactionResultStatus.StoreWaitingToLoad
        };
    }
    var applyCallback = this.gridOptionsWrapper.getIsApplyServerSideTransactionFunc();
    if (applyCallback) {
      var params = {
        transaction: transaction,
        parentNode: this.parentRowNode,
        storeInfo: this.info
      };
      var apply = applyCallback(params);
      if (!apply) {
        return {
          status: agGridCommunity.ServerSideTransactionResultStatus.Cancelled
        };
      }
    }
    var res = {
      status: agGridCommunity.ServerSideTransactionResultStatus.Applied,
      remove: [],
      update: [],
      add: []
    };
    var nodesToUnselect = [];
    this.executeAdd(transaction, res);
    this.executeRemove(transaction, res, nodesToUnselect);
    this.executeUpdate(transaction, res, nodesToUnselect);
    this.filterAndSortNodes();
    this.updateSelection(nodesToUnselect);
    return res;
  };
  FullStore.prototype.updateSelection = function (nodesToUnselect) {
    var selectionChanged = nodesToUnselect.length > 0;
    if (selectionChanged) {
      nodesToUnselect.forEach(function (rowNode) {
        rowNode.setSelected(false, false, true);
      });
      var event_1 = {
        type: agGridCommunity.Events.EVENT_SELECTION_CHANGED,
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi()
      };
      this.eventService.dispatchEvent(event_1);
    }
  };
  FullStore.prototype.executeAdd = function (rowDataTran, rowNodeTransaction) {
    var _this = this;
    var add = rowDataTran.add,
      addIndex = rowDataTran.addIndex;
    if (agGridCommunity._.missingOrEmpty(add)) {
      return;
    }
    var useIndex = typeof addIndex === 'number' && addIndex >= 0;
    if (useIndex) {
      // items get inserted in reverse order for index insertion
      add.reverse().forEach(function (item) {
        var newRowNode = _this.createDataNode(item, addIndex);
        rowNodeTransaction.add.push(newRowNode);
      });
    } else {
      add.forEach(function (item) {
        var newRowNode = _this.createDataNode(item);
        rowNodeTransaction.add.push(newRowNode);
      });
    }
  };
  FullStore.prototype.executeRemove = function (rowDataTran, rowNodeTransaction, nodesToUnselect) {
    var _this = this;
    var remove = rowDataTran.remove;
    if (remove == null) {
      return;
    }
    var rowIdsRemoved = {};
    remove.forEach(function (item) {
      var rowNode = _this.lookupRowNode(item);
      if (!rowNode) {
        return;
      }
      // do delete - setting 'suppressFinishActions = true' to ensure EVENT_SELECTION_CHANGED is not raised for
      // each row node updated, instead it is raised once by the calling code if any selected nodes exist.
      if (rowNode.isSelected()) {
        nodesToUnselect.push(rowNode);
      }
      // so row renderer knows to fade row out (and not reposition it)
      rowNode.clearRowTopAndRowIndex();
      // NOTE: were we could remove from allLeaveChildren, however _.removeFromArray() is expensive, especially
      // if called multiple times (eg deleting lots of rows) and if allLeafChildren is a large list
      rowIdsRemoved[rowNode.id] = true;
      // _.removeFromArray(this.rootNode.allLeafChildren, rowNode);
      delete _this.allNodesMap[rowNode.id];
      rowNodeTransaction.remove.push(rowNode);
      _this.nodeManager.removeNode(rowNode);
    });
    this.allRowNodes = this.allRowNodes.filter(function (rowNode) {
      return !rowIdsRemoved[rowNode.id];
    });
  };
  FullStore.prototype.executeUpdate = function (rowDataTran, rowNodeTransaction, nodesToUnselect) {
    var _this = this;
    var update = rowDataTran.update;
    if (update == null) {
      return;
    }
    update.forEach(function (item) {
      var rowNode = _this.lookupRowNode(item);
      if (!rowNode) {
        return;
      }
      rowNode.updateData(item);
      if (!rowNode.selectable && rowNode.isSelected()) {
        nodesToUnselect.push(rowNode);
      }
      rowNodeTransaction.update.push(rowNode);
    });
  };
  FullStore.prototype.lookupRowNode = function (data) {
    var rowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();
    var rowNode;
    if (agGridCommunity._.exists(rowNodeIdFunc)) {
      // find rowNode using id
      var id = rowNodeIdFunc(data);
      rowNode = this.allNodesMap[id];
      if (!rowNode) {
        console.error("AG Grid: could not find row id=" + id + ", data item was not found for this id");
        return null;
      }
    } else {
      // find rowNode using object references
      rowNode = agGridCommunity._.find(this.allRowNodes, function (currentRowNode) {
        return currentRowNode.data === data;
      });
      if (!rowNode) {
        console.error("AG Grid: could not find data item as object was not found", data);
        return null;
      }
    }
    return rowNode;
  };
  FullStore.prototype.addStoreStates = function (result) {
    result.push({
      type: agGridCommunity.ServerSideStoreType.Full,
      route: this.storeUtils.createGroupKeys(this.parentRowNode),
      rowCount: this.allRowNodes.length,
      info: this.info
    });
    this.forEachChildStoreShallow(function (childStore) {
      return childStore.addStoreStates(result);
    });
  };
  FullStore.prototype.refreshStore = function (purge) {
    if (purge) {
      var loadingRowsToShow = this.nodesAfterSort ? this.nodesAfterSort.length : 1;
      this.initialiseRowNodes(loadingRowsToShow);
    }
    this.scheduleLoad();
    this.fireStoreUpdatedEvent();
  };
  FullStore.prototype.retryLoads = function () {
    if (this.getState() === agGridCommunity.RowNodeBlock.STATE_FAILED) {
      this.initialiseRowNodes(1);
      this.scheduleLoad();
    }
    this.forEachChildStoreShallow(function (store) {
      return store.retryLoads();
    });
  };
  FullStore.prototype.scheduleLoad = function () {
    this.setStateWaitingToLoad();
    this.rowNodeBlockLoader.checkBlockToLoad();
  };
  // gets called 1) row count changed 2) cache purged 3) items inserted
  FullStore.prototype.fireStoreUpdatedEvent = function () {
    // this results in row model firing ModelUpdated.
    // server side row model also updates the row indexes first
    var event = {
      type: agGridCommunity.Events.EVENT_STORE_UPDATED
    };
    this.eventService.dispatchEvent(event);
  };
  FullStore.prototype.getRowCount = function () {
    return this.nodesAfterSort.length;
  };
  FullStore.prototype.getTopLevelRowDisplayedIndex = function (topLevelIndex) {
    var rowNode = this.nodesAfterSort[topLevelIndex];
    return rowNode.rowIndex;
  };
  FullStore.prototype.isLastRowIndexKnown = function () {
    return this.getState() == agGridCommunity.RowNodeBlock.STATE_LOADED;
  };
  FullStore.prototype.getRowNodesInRange = function (firstInRange, lastInRange) {
    var result = [];
    var inActiveRange = false;
    // if only one node passed, we start the selection at the top
    if (agGridCommunity._.missing(firstInRange)) {
      inActiveRange = true;
    }
    this.nodesAfterSort.forEach(function (rowNode) {
      var hitFirstOrLast = rowNode === firstInRange || rowNode === lastInRange;
      if (inActiveRange || hitFirstOrLast) {
        result.push(rowNode);
      }
      if (hitFirstOrLast) {
        inActiveRange = !inActiveRange;
      }
    });
    // inActiveRange will be still true if we never hit the second rowNode
    var invalidRange = inActiveRange;
    return invalidRange ? [] : result;
  };
  __decorate$1H([agGridCommunity.Autowired('ssrmCacheUtils')], FullStore.prototype, "storeUtils", void 0);
  __decorate$1H([agGridCommunity.Autowired('ssrmBlockUtils')], FullStore.prototype, "blockUtils", void 0);
  __decorate$1H([agGridCommunity.Autowired('columnController')], FullStore.prototype, "columnController", void 0);
  __decorate$1H([agGridCommunity.Autowired('rowNodeBlockLoader')], FullStore.prototype, "rowNodeBlockLoader", void 0);
  __decorate$1H([agGridCommunity.Autowired('rowNodeSorter')], FullStore.prototype, "rowNodeSorter", void 0);
  __decorate$1H([agGridCommunity.Autowired('sortController')], FullStore.prototype, "sortController", void 0);
  __decorate$1H([agGridCommunity.Autowired('ssrmNodeManager')], FullStore.prototype, "nodeManager", void 0);
  __decorate$1H([agGridCommunity.Autowired('filterManager')], FullStore.prototype, "filterManager", void 0);
  __decorate$1H([agGridCommunity.Autowired('ssrmTransactionManager')], FullStore.prototype, "transactionManager", void 0);
  __decorate$1H([agGridCommunity.PostConstruct], FullStore.prototype, "postConstruct", null);
  __decorate$1H([agGridCommunity.PreDestroy], FullStore.prototype, "destroyRowNodes", null);
  return FullStore;
}(agGridCommunity.RowNodeBlock);
var __decorate$1I =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var StoreFactory = /** @class */function () {
  function StoreFactory() {}
  StoreFactory.prototype.createStore = function (ssrmParams, parentNode) {
    var storeParams = this.getStoreParams(ssrmParams, parentNode);
    var CacheClass = storeParams.storeType === agGridCommunity.ServerSideStoreType.Partial ? PartialStore : FullStore;
    return new CacheClass(ssrmParams, storeParams, parentNode);
  };
  StoreFactory.prototype.getStoreParams = function (ssrmParams, parentNode) {
    var userStoreParams = this.getLevelSpecificParams(parentNode);
    // if user provided overrideParams, we take storeType from there if it exists
    var storeType = this.getStoreType(userStoreParams);
    var cacheBlockSize = this.getBlockSize(storeType, userStoreParams);
    var maxBlocksInCache = this.getMaxBlocksInCache(storeType, ssrmParams, userStoreParams);
    var storeParams = {
      storeType: storeType,
      cacheBlockSize: cacheBlockSize,
      maxBlocksInCache: maxBlocksInCache
    };
    return storeParams;
  };
  StoreFactory.prototype.getMaxBlocksInCache = function (storeType, ssrmParams, userStoreParams) {
    if (storeType == agGridCommunity.ServerSideStoreType.Full) {
      return undefined;
    }
    var maxBlocksInCache = userStoreParams && userStoreParams.maxBlocksInCache != null ? userStoreParams.maxBlocksInCache : this.gridOptionsWrapper.getMaxBlocksInCache();
    var maxBlocksActive = maxBlocksInCache != null && maxBlocksInCache >= 0;
    if (!maxBlocksActive) {
      return undefined;
    }
    if (ssrmParams.dynamicRowHeight) {
      var message_1 = 'AG Grid: Server Side Row Model does not support Dynamic Row Height and Cache Purging. ' + 'Either a) remove getRowHeight() callback or b) remove maxBlocksInCache property. Purging has been disabled.';
      agGridCommunity._.doOnce(function () {
        return console.warn(message_1);
      }, 'storeFactory.maxBlocksInCache.dynamicRowHeight');
      return undefined;
    }
    if (this.columnController.isAutoRowHeightActive()) {
      var message_2 = 'AG Grid: Server Side Row Model does not support Auto Row Height and Cache Purging. ' + 'Either a) remove colDef.autoHeight or b) remove maxBlocksInCache property. Purging has been disabled.';
      agGridCommunity._.doOnce(function () {
        return console.warn(message_2);
      }, 'storeFactory.maxBlocksInCache.autoRowHeightActive');
      return undefined;
    }
    return maxBlocksInCache;
  };
  StoreFactory.prototype.getBlockSize = function (storeType, userStoreParams) {
    if (storeType == agGridCommunity.ServerSideStoreType.Full) {
      return undefined;
    }
    var blockSize = userStoreParams && userStoreParams.cacheBlockSize != null ? userStoreParams.cacheBlockSize : this.gridOptionsWrapper.getCacheBlockSize();
    if (blockSize != null && blockSize > 0) {
      return blockSize;
    } else {
      return 100;
    }
  };
  StoreFactory.prototype.getLevelSpecificParams = function (parentNode) {
    var callback = this.gridOptionsWrapper.getServerSideStoreParamsFunc();
    if (!callback) {
      return undefined;
    }
    var params = {
      level: parentNode.level + 1,
      parentRowNode: parentNode.level >= 0 ? parentNode : undefined,
      rowGroupColumns: this.columnController.getRowGroupColumns(),
      pivotColumns: this.columnController.getPivotColumns(),
      pivotMode: this.columnController.isPivotMode()
    };
    return callback(params);
  };
  StoreFactory.prototype.getStoreType = function (storeParams) {
    var storeType = storeParams && storeParams.storeType != null ? storeParams.storeType : this.gridOptionsWrapper.getServerSideStoreType();
    switch (storeType) {
      case agGridCommunity.ServerSideStoreType.Partial:
      case agGridCommunity.ServerSideStoreType.Full:
        return storeType;
      case null:
      case undefined:
        return agGridCommunity.ServerSideStoreType.Full;
      default:
        var types = Object.keys(agGridCommunity.ServerSideStoreType).join(', ');
        console.warn("AG Grid: invalid Server Side Store Type " + storeType + ", valid types are [" + types + "]");
        return agGridCommunity.ServerSideStoreType.Partial;
    }
  };
  __decorate$1I([agGridCommunity.Autowired('gridOptionsWrapper')], StoreFactory.prototype, "gridOptionsWrapper", void 0);
  __decorate$1I([agGridCommunity.Autowired('columnController')], StoreFactory.prototype, "columnController", void 0);
  StoreFactory = __decorate$1I([agGridCommunity.Bean('ssrmStoreFactory')], StoreFactory);
  return StoreFactory;
}();
var __decorate$1J =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ListenerUtils = /** @class */function () {
  function ListenerUtils() {}
  ListenerUtils.prototype.isSortingWithValueColumn = function (changedColumnsInSort) {
    var valueColIds = this.columnController.getValueColumns().map(function (col) {
      return col.getColId();
    });
    for (var i = 0; i < changedColumnsInSort.length; i++) {
      if (valueColIds.indexOf(changedColumnsInSort[i]) > -1) {
        return true;
      }
    }
    return false;
  };
  ListenerUtils.prototype.isSortingWithSecondaryColumn = function (changedColumnsInSort) {
    if (!this.columnController.getSecondaryColumns()) {
      return false;
    }
    var secondaryColIds = this.columnController.getSecondaryColumns().map(function (col) {
      return col.getColId();
    });
    for (var i = 0; i < changedColumnsInSort.length; i++) {
      if (secondaryColIds.indexOf(changedColumnsInSort[i]) > -1) {
        return true;
      }
    }
    return false;
  };
  __decorate$1J([agGridCommunity.Autowired('columnController')], ListenerUtils.prototype, "columnController", void 0);
  ListenerUtils = __decorate$1J([agGridCommunity.Bean('ssrmListenerUtils')], ListenerUtils);
  return ListenerUtils;
}();
var ServerSideRowModelModule = {
  moduleName: agGridCommunity.ModuleNames.ServerSideRowModelModule,
  rowModels: {
    serverSide: ServerSideRowModel
  },
  beans: [ExpandListener, SortListener, StoreUtils, BlockUtils, NodeManager, TransactionManager, FilterListener, StoreFactory, ListenerUtils],
  dependantModules: [EnterpriseCoreModule]
};
var ClientSideValuesExtractor = /** @class */function () {
  function ClientSideValuesExtractor(rowModel, colDef, valueGetter) {
    this.rowModel = rowModel;
    this.colDef = colDef;
    this.valueGetter = valueGetter;
  }
  ClientSideValuesExtractor.prototype.extractUniqueValues = function (predicate) {
    var _this = this;
    var values = new Set();
    var keyCreator = this.colDef.keyCreator;
    this.rowModel.forEachLeafNode(function (node) {
      // only pull values from rows that have data. this means we skip filler group nodes.
      if (!node.data || !predicate(node)) {
        return;
      }
      var value = _this.valueGetter(node);
      if (keyCreator) {
        value = keyCreator({
          value: value
        });
      }
      value = agGridCommunity._.makeNull(value);
      if (value != null && Array.isArray(value)) {
        agGridCommunity._.forEach(value, function (x) {
          var formatted = agGridCommunity._.toStringOrNull(agGridCommunity._.makeNull(x));
          values.add(formatted);
        });
      } else {
        values.add(agGridCommunity._.toStringOrNull(value));
      }
    });
    return agGridCommunity._.values(values);
  };
  return ClientSideValuesExtractor;
}();
var SetFilterModelValuesType;
(function (SetFilterModelValuesType) {
  SetFilterModelValuesType[SetFilterModelValuesType["PROVIDED_LIST"] = 0] = "PROVIDED_LIST";
  SetFilterModelValuesType[SetFilterModelValuesType["PROVIDED_CALLBACK"] = 1] = "PROVIDED_CALLBACK";
  SetFilterModelValuesType[SetFilterModelValuesType["TAKEN_FROM_GRID_VALUES"] = 2] = "TAKEN_FROM_GRID_VALUES";
})(SetFilterModelValuesType || (SetFilterModelValuesType = {}));
var SetValueModel = /** @class */function () {
  function SetValueModel(filterParams, setIsLoading, valueFormatterService, translate) {
    var _this = this;
    this.filterParams = filterParams;
    this.setIsLoading = setIsLoading;
    this.valueFormatterService = valueFormatterService;
    this.translate = translate;
    this.localEventService = new agGridCommunity.EventService();
    this.miniFilterText = null;
    // The lookup for a set is much faster than the lookup for an array, especially when the length of the array is
    // thousands of records long, so where lookups are important we use a set.
    /** Values provided to the filter for use. */
    this.providedValues = null;
    /** All possible values for the filter, sorted if required. */
    this.allValues = [];
    /** Remaining values when filters from other columns have been applied. */
    this.availableValues = new Set();
    /** All values that are currently displayed, after the mini-filter has been applied. */
    this.displayedValues = [];
    /** Values that have been selected for this filter. */
    this.selectedValues = new Set();
    this.initialised = false;
    var column = filterParams.column,
      colDef = filterParams.colDef,
      textFormatter = filterParams.textFormatter,
      doesRowPassOtherFilter = filterParams.doesRowPassOtherFilter,
      suppressSorting = filterParams.suppressSorting,
      comparator = filterParams.comparator,
      rowModel = filterParams.rowModel,
      valueGetter = filterParams.valueGetter,
      values = filterParams.values;
    this.column = column;
    this.colDef = colDef;
    this.formatter = textFormatter || agGridCommunity.TextFilter.DEFAULT_FORMATTER;
    this.doesRowPassOtherFilters = doesRowPassOtherFilter;
    this.suppressSorting = suppressSorting || false;
    this.comparator = comparator || colDef.comparator || agGridCommunity._.defaultComparator;
    if (rowModel.getType() === agGridCommunity.Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
      this.clientSideValuesExtractor = new ClientSideValuesExtractor(rowModel, colDef, valueGetter);
    }
    if (values == null) {
      this.valuesType = SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES;
    } else {
      this.valuesType = Array.isArray(values) ? SetFilterModelValuesType.PROVIDED_LIST : SetFilterModelValuesType.PROVIDED_CALLBACK;
      this.providedValues = values;
    }
    this.updateAllValues().then(function (updatedValues) {
      return _this.resetSelectionState(updatedValues || []);
    });
  }
  SetValueModel.prototype.addEventListener = function (eventType, listener, async) {
    this.localEventService.addEventListener(eventType, listener, async);
  };
  SetValueModel.prototype.removeEventListener = function (eventType, listener, async) {
    this.localEventService.removeEventListener(eventType, listener, async);
  };
  /**
   * Re-fetches the values used in the filter from the value source.
   * If keepSelection is false, the filter selection will be reset to everything selected,
   * otherwise the current selection will be preserved.
   */
  SetValueModel.prototype.refreshValues = function (keepSelection) {
    if (keepSelection === void 0) {
      keepSelection = true;
    }
    var currentModel = this.getModel();
    this.updateAllValues();
    // ensure model is updated for new values
    return this.setModel(keepSelection ? currentModel : null);
  };
  /**
   * Overrides the current values being used for the set filter.
   * If keepSelection is false, the filter selection will be reset to everything selected,
   * otherwise the current selection will be preserved.
   */
  SetValueModel.prototype.overrideValues = function (valuesToUse, keepSelection) {
    var _this = this;
    if (keepSelection === void 0) {
      keepSelection = true;
    }
    return new agGridCommunity.AgPromise(function (resolve) {
      // wait for any existing values to be populated before overriding
      _this.allValuesPromise.then(function () {
        _this.valuesType = SetFilterModelValuesType.PROVIDED_LIST;
        _this.providedValues = valuesToUse;
        _this.refreshValues(keepSelection).then(function () {
          return resolve();
        });
      });
    });
  };
  SetValueModel.prototype.refreshAfterAnyFilterChanged = function () {
    var _this = this;
    return this.showAvailableOnly() ? this.allValuesPromise.then(function (values) {
      return _this.updateAvailableValues(values || []);
    }) : agGridCommunity.AgPromise.resolve();
  };
  SetValueModel.prototype.isInitialised = function () {
    return this.initialised;
  };
  SetValueModel.prototype.updateAllValues = function () {
    var _this = this;
    this.allValuesPromise = new agGridCommunity.AgPromise(function (resolve) {
      switch (_this.valuesType) {
        case SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES:
        case SetFilterModelValuesType.PROVIDED_LIST:
          {
            var values = _this.valuesType === SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES ? _this.getValuesFromRows(false) : agGridCommunity._.toStrings(_this.providedValues);
            var sortedValues = _this.sortValues(values || []);
            _this.allValues = sortedValues;
            resolve(sortedValues);
            break;
          }
        case SetFilterModelValuesType.PROVIDED_CALLBACK:
          {
            _this.setIsLoading(true);
            var callback_1 = _this.providedValues;
            var params_1 = {
              success: function (values) {
                var processedValues = agGridCommunity._.toStrings(values);
                _this.setIsLoading(false);
                var sortedValues = _this.sortValues(processedValues || []);
                _this.allValues = sortedValues;
                resolve(sortedValues);
              },
              colDef: _this.colDef
            };
            window.setTimeout(function () {
              return callback_1(params_1);
            }, 0);
            break;
          }
        default:
          throw new Error('Unrecognised valuesType');
      }
    });
    this.allValuesPromise.then(function (values) {
      return _this.updateAvailableValues(values || []);
    }).then(function () {
      return _this.initialised = true;
    });
    return this.allValuesPromise;
  };
  SetValueModel.prototype.setValuesType = function (value) {
    this.valuesType = value;
  };
  SetValueModel.prototype.getValuesType = function () {
    return this.valuesType;
  };
  SetValueModel.prototype.isValueAvailable = function (value) {
    return this.availableValues.has(value);
  };
  SetValueModel.prototype.showAvailableOnly = function () {
    return this.valuesType === SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES && !this.filterParams.suppressRemoveEntries;
  };
  SetValueModel.prototype.updateAvailableValues = function (allValues) {
    var availableValues = this.showAvailableOnly() ? this.sortValues(this.getValuesFromRows(true)) : allValues;
    this.availableValues = agGridCommunity._.convertToSet(availableValues);
    this.localEventService.dispatchEvent({
      type: SetValueModel.EVENT_AVAILABLE_VALUES_CHANGED
    });
    this.updateDisplayedValues();
  };
  SetValueModel.prototype.sortValues = function (values) {
    if (this.suppressSorting) {
      return values;
    }
    if (!this.filterParams.excelMode || values.indexOf(null) < 0) {
      return values.sort(this.comparator);
    }
    // ensure the blank value always appears last
    return agGridCommunity._.filter(values, function (v) {
      return v != null;
    }).sort(this.comparator).concat(null);
  };
  SetValueModel.prototype.getValuesFromRows = function (removeUnavailableValues) {
    var _this = this;
    if (removeUnavailableValues === void 0) {
      removeUnavailableValues = false;
    }
    if (!this.clientSideValuesExtractor) {
      console.error('AG Grid: Set Filter cannot initialise because you are using a row model that does not contain all rows in the browser. Either use a different filter type, or configure Set Filter such that you provide it with values');
      return [];
    }
    var predicate = function (node) {
      return !removeUnavailableValues || _this.doesRowPassOtherFilters(node);
    };
    return this.clientSideValuesExtractor.extractUniqueValues(predicate);
  };
  /** Sets mini filter value. Returns true if it changed from last value, otherwise false. */
  SetValueModel.prototype.setMiniFilter = function (value) {
    value = agGridCommunity._.makeNull(value);
    if (this.miniFilterText === value) {
      //do nothing if filter has not changed
      return false;
    }
    this.miniFilterText = value;
    this.updateDisplayedValues();
    return true;
  };
  SetValueModel.prototype.getMiniFilter = function () {
    return this.miniFilterText;
  };
  SetValueModel.prototype.updateDisplayedValues = function () {
    var _this = this;
    // if no filter, just display all available values
    if (this.miniFilterText == null) {
      this.displayedValues = agGridCommunity._.values(this.availableValues);
      return;
    }
    // if filter present, we filter down the list
    this.displayedValues = [];
    // to allow for case insensitive searches, upper-case both filter text and value
    var formattedFilterText = (this.formatter(this.miniFilterText) || '').toUpperCase();
    var matchesFilter = function (valueToCheck) {
      return valueToCheck != null && valueToCheck.toUpperCase().indexOf(formattedFilterText) >= 0;
    };
    this.availableValues.forEach(function (value) {
      if (value == null) {
        if (_this.filterParams.excelMode && matchesFilter(_this.translate('blanks'))) {
          _this.displayedValues.push(value);
        }
      } else {
        var textFormatterValue = _this.formatter(value);
        // TODO: should this be applying the text formatter *after* the value formatter?
        var valueFormatterValue = _this.valueFormatterService.formatValue(_this.column, null, null, textFormatterValue, _this.filterParams.valueFormatter, false);
        if (matchesFilter(textFormatterValue) || matchesFilter(valueFormatterValue)) {
          _this.displayedValues.push(value);
        }
      }
    });
  };
  SetValueModel.prototype.getDisplayedValueCount = function () {
    return this.displayedValues.length;
  };
  SetValueModel.prototype.getDisplayedValue = function (index) {
    return this.displayedValues[index];
  };
  SetValueModel.prototype.hasSelections = function () {
    return this.filterParams.defaultToNothingSelected ? this.selectedValues.size > 0 : this.allValues.length !== this.selectedValues.size;
  };
  SetValueModel.prototype.getUniqueValueCount = function () {
    return this.allValues.length;
  };
  SetValueModel.prototype.getUniqueValue = function (index) {
    return this.allValues[index];
  };
  SetValueModel.prototype.getValues = function () {
    return this.allValues.slice();
  };
  SetValueModel.prototype.selectAllMatchingMiniFilter = function (clearExistingSelection) {
    var _this = this;
    if (clearExistingSelection === void 0) {
      clearExistingSelection = false;
    }
    if (this.miniFilterText == null) {
      // ensure everything is selected
      this.selectedValues = agGridCommunity._.convertToSet(this.allValues);
    } else {
      // ensure everything that matches the mini filter is selected
      if (clearExistingSelection) {
        this.selectedValues.clear();
      }
      agGridCommunity._.forEach(this.displayedValues, function (value) {
        return _this.selectedValues.add(value);
      });
    }
  };
  SetValueModel.prototype.deselectAllMatchingMiniFilter = function () {
    var _this = this;
    if (this.miniFilterText == null) {
      // ensure everything is deselected
      this.selectedValues.clear();
    } else {
      // ensure everything that matches the mini filter is deselected
      agGridCommunity._.forEach(this.displayedValues, function (value) {
        return _this.selectedValues.delete(value);
      });
    }
  };
  SetValueModel.prototype.selectValue = function (value) {
    this.selectedValues.add(value);
  };
  SetValueModel.prototype.deselectValue = function (value) {
    if (this.filterParams.excelMode && this.isEverythingVisibleSelected()) {
      // ensure we're starting from the correct "everything selected" state
      this.resetSelectionState(this.displayedValues);
    }
    this.selectedValues.delete(value);
  };
  SetValueModel.prototype.isValueSelected = function (value) {
    return this.selectedValues.has(value);
  };
  SetValueModel.prototype.isEverythingVisibleSelected = function () {
    var _this = this;
    return agGridCommunity._.filter(this.displayedValues, function (it) {
      return _this.isValueSelected(it);
    }).length === this.displayedValues.length;
  };
  SetValueModel.prototype.isNothingVisibleSelected = function () {
    var _this = this;
    return agGridCommunity._.filter(this.displayedValues, function (it) {
      return _this.isValueSelected(it);
    }).length === 0;
  };
  SetValueModel.prototype.getModel = function () {
    return this.hasSelections() ? agGridCommunity._.values(this.selectedValues) : null;
  };
  SetValueModel.prototype.setModel = function (model) {
    var _this = this;
    return this.allValuesPromise.then(function (values) {
      if (model == null) {
        _this.resetSelectionState(values || []);
      } else {
        // select all values from the model that exist in the filter
        _this.selectedValues.clear();
        var allValues_1 = agGridCommunity._.convertToSet(values || []);
        agGridCommunity._.forEach(model, function (value) {
          if (allValues_1.has(value)) {
            _this.selectedValues.add(value);
          }
        });
      }
    });
  };
  SetValueModel.prototype.resetSelectionState = function (values) {
    if (this.filterParams.defaultToNothingSelected) {
      this.selectedValues.clear();
    } else {
      this.selectedValues = agGridCommunity._.convertToSet(values || []);
    }
  };
  SetValueModel.EVENT_AVAILABLE_VALUES_CHANGED = 'availableValuesChanged';
  return SetValueModel;
}();
var __extends$2V =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1K =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SetFilterListItem = /** @class */function (_super) {
  __extends$2V(SetFilterListItem, _super);
  function SetFilterListItem(value, params, translate, isSelected) {
    var _this = _super.call(this, SetFilterListItem.TEMPLATE) || this;
    _this.value = value;
    _this.params = params;
    _this.translate = translate;
    _this.isSelected = isSelected;
    return _this;
  }
  SetFilterListItem.prototype.init = function () {
    var _this = this;
    this.render();
    this.eCheckbox.setValue(this.isSelected, true);
    this.eCheckbox.onValueChange(function (value) {
      var parsedValue = value || false;
      _this.isSelected = parsedValue;
      var event = {
        type: SetFilterListItem.EVENT_SELECTION_CHANGED,
        isSelected: parsedValue
      };
      _this.dispatchEvent(event);
    });
  };
  SetFilterListItem.prototype.toggleSelected = function () {
    this.isSelected = !this.isSelected;
    this.eCheckbox.setValue(this.isSelected);
  };
  SetFilterListItem.prototype.render = function () {
    var column = this.params.column;
    var value = this.value;
    var formattedValue = null;
    if (typeof value === 'function') {
      value = value();
    } else {
      formattedValue = this.getFormattedValue(this.params, column, value);
    }
    if (this.params.showTooltips) {
      var tooltipText = agGridCommunity._.escapeString(formattedValue != null ? formattedValue : value);
      this.setTooltip(tooltipText);
    }
    var params = {
      value: value,
      valueFormatted: formattedValue,
      api: this.gridOptionsWrapper.getApi(),
      context: this.gridOptionsWrapper.getContext()
    };
    this.renderCell(params);
  };
  SetFilterListItem.prototype.getTooltipParams = function () {
    var res = _super.prototype.getTooltipParams.call(this);
    res.location = 'setFilterValue';
    res.colDef = this.getComponentHolder();
    return res;
  };
  SetFilterListItem.prototype.getFormattedValue = function (filterParams, column, value) {
    var formatter = filterParams && filterParams.valueFormatter;
    return this.valueFormatterService.formatValue(column, null, null, value, formatter, false);
  };
  SetFilterListItem.prototype.renderCell = function (params) {
    var _this = this;
    var cellRendererPromise = this.userComponentFactory.newSetFilterCellRenderer(this.params, params);
    if (cellRendererPromise == null) {
      var valueToRender = params.valueFormatted == null ? params.value : params.valueFormatted;
      this.eCheckbox.setLabel(valueToRender == null ? this.translate('blanks') : valueToRender);
      return;
    }
    cellRendererPromise.then(function (component) {
      if (component) {
        _this.eCheckbox.setLabel(component.getGui());
        _this.addDestroyFunc(function () {
          return _this.destroyBean(component);
        });
      }
    });
  };
  SetFilterListItem.prototype.getComponentHolder = function () {
    return this.params.column.getColDef();
  };
  SetFilterListItem.EVENT_SELECTION_CHANGED = 'selectionChanged';
  SetFilterListItem.TEMPLATE = "\n        <div class=\"ag-set-filter-item\">\n            <ag-checkbox ref=\"eCheckbox\" class=\"ag-set-filter-item-checkbox\"></ag-checkbox>\n        </div>";
  __decorate$1K([agGridCommunity.Autowired('valueFormatterService')], SetFilterListItem.prototype, "valueFormatterService", void 0);
  __decorate$1K([agGridCommunity.Autowired('userComponentFactory')], SetFilterListItem.prototype, "userComponentFactory", void 0);
  __decorate$1K([agGridCommunity.RefSelector('eCheckbox')], SetFilterListItem.prototype, "eCheckbox", void 0);
  __decorate$1K([agGridCommunity.PostConstruct], SetFilterListItem.prototype, "init", null);
  return SetFilterListItem;
}(agGridCommunity.Component);
var DEFAULT_LOCALE_TEXT = {
  loadingOoo: 'Loading...',
  blanks: '(Blanks)',
  searchOoo: 'Search...',
  selectAll: '(Select All)',
  selectAllSearchResults: '(Select All Search Results)',
  noMatches: 'No matches.'
};
var __extends$2W =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1L =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SetFilter = /** @class */function (_super) {
  __extends$2W(SetFilter, _super);
  function SetFilter() {
    var _this = _super.call(this, 'setFilter') || this;
    _this.valueModel = null;
    _this.setFilterParams = null;
    _this.virtualList = null;
    // To make the filtering super fast, we store the values in an object, and check for the boolean value.
    // Although Set would be a more natural choice of data structure, its performance across browsers is
    // significantly worse than using an object: https://jsbench.me/hdk91jbw1h/
    _this.appliedModelValues = null;
    return _this;
  }
  // unlike the simple filters, nothing in the set filter UI shows/hides.
  // maybe this method belongs in abstractSimpleFilter???
  SetFilter.prototype.updateUiVisibility = function () {};
  SetFilter.prototype.createBodyTemplate = function () {
    return (/* html */"\n            <div class=\"ag-set-filter\">\n                <div ref=\"eFilterLoading\" class=\"ag-filter-loading ag-hidden\">" + this.translateForSetFilter('loadingOoo') + "</div>\n                <ag-input-text-field class=\"ag-mini-filter\" ref=\"eMiniFilter\"></ag-input-text-field>\n                <div ref=\"eFilterNoMatches\" class=\"ag-filter-no-matches ag-hidden\">" + this.translateForSetFilter('noMatches') + "</div>\n                <div ref=\"eSetFilterList\" class=\"ag-set-filter-list\" role=\"presentation\"></div>\n            </div>"
    );
  };
  SetFilter.prototype.handleKeyDown = function (e) {
    if (e.defaultPrevented) {
      return;
    }
    switch (e.which || e.keyCode) {
      case agGridCommunity.KeyCode.SPACE:
        this.handleKeySpace(e);
        break;
      case agGridCommunity.KeyCode.ENTER:
        this.handleKeyEnter(e);
        break;
    }
  };
  SetFilter.prototype.handleKeySpace = function (e) {
    if (!this.eSetFilterList.contains(document.activeElement) || !this.virtualList) {
      return;
    }
    var currentItem = this.virtualList.getLastFocusedRow();
    if (currentItem != null) {
      var component = this.virtualList.getComponentAt(currentItem);
      if (component) {
        e.preventDefault();
        component.toggleSelected();
      }
    }
  };
  SetFilter.prototype.handleKeyEnter = function (e) {
    if (!this.setFilterParams) {
      return;
    }
    if (this.setFilterParams.excelMode) {
      e.preventDefault();
      // in Excel Mode, hitting Enter is the same as pressing the Apply button
      this.onBtApply(false, false, e);
      if (this.setFilterParams.excelMode === 'mac') {
        // in Mac version, select all the input text
        this.eMiniFilter.getInputElement().select();
      }
    }
  };
  SetFilter.prototype.getCssIdentifier = function () {
    return 'set-filter';
  };
  SetFilter.prototype.setModelAndRefresh = function (values) {
    var _this = this;
    return this.valueModel ? this.valueModel.setModel(values).then(function () {
      return _this.refresh();
    }) : agGridCommunity.AgPromise.resolve();
  };
  SetFilter.prototype.resetUiToDefaults = function () {
    this.setMiniFilter(null);
    return this.setModelAndRefresh(null);
  };
  SetFilter.prototype.setModelIntoUi = function (model) {
    this.setMiniFilter(null);
    if (model instanceof Array) {
      var message_1 = 'AG Grid: The Set Filter Model is no longer an array and models as arrays are ' + 'deprecated. Please check the docs on what the set filter model looks like. Future versions of ' + 'AG Grid will have the array version of the model removed.';
      agGridCommunity._.doOnce(function () {
        return console.warn(message_1);
      }, 'setFilter.modelAsArray');
    }
    // also supporting old filter model for backwards compatibility
    var values = model == null ? null : model instanceof Array ? model : model.values;
    return this.setModelAndRefresh(values);
  };
  SetFilter.prototype.getModelFromUi = function () {
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    var values = this.valueModel.getModel();
    if (!values) {
      return null;
    }
    if (this.gridOptionsWrapper.isEnableOldSetFilterModel()) {
      // this is a hack, it breaks casting rules, to apply with old model
      return values;
    }
    return {
      values: values,
      filterType: this.getFilterType()
    };
  };
  SetFilter.prototype.getModel = function () {
    return _super.prototype.getModel.call(this);
  };
  SetFilter.prototype.getFilterType = function () {
    return 'set';
  };
  SetFilter.prototype.getValueModel = function () {
    return this.valueModel;
  };
  SetFilter.prototype.areModelsEqual = function (a, b) {
    // both are missing
    if (a == null && b == null) {
      return true;
    }
    return a != null && b != null && agGridCommunity._.areEqual(a.values, b.values);
  };
  SetFilter.prototype.setParams = function (params) {
    var _this = this;
    this.applyExcelModeOptions(params);
    _super.prototype.setParams.call(this, params);
    this.checkSetFilterDeprecatedParams(params);
    this.setFilterParams = params;
    this.valueModel = new SetValueModel(params, function (loading) {
      return _this.showOrHideLoadingScreen(loading);
    }, this.valueFormatterService, function (key) {
      return _this.translateForSetFilter(key);
    });
    this.initialiseFilterBodyUi();
    if (params.rowModel.getType() === agGridCommunity.Constants.ROW_MODEL_TYPE_CLIENT_SIDE && !params.values && !params.suppressSyncValuesAfterDataChange) {
      this.addEventListenersForDataChanges();
    }
  };
  SetFilter.prototype.applyExcelModeOptions = function (params) {
    // apply default options to match Excel behaviour, unless they have already been specified
    if (params.excelMode === 'windows') {
      if (!params.buttons) {
        params.buttons = ['apply', 'cancel'];
      }
      if (params.closeOnApply == null) {
        params.closeOnApply = true;
      }
    } else if (params.excelMode === 'mac') {
      if (!params.buttons) {
        params.buttons = ['reset'];
      }
      if (params.applyMiniFilterWhileTyping == null) {
        params.applyMiniFilterWhileTyping = true;
      }
      if (params.debounceMs == null) {
        params.debounceMs = 500;
      }
    }
  };
  SetFilter.prototype.checkSetFilterDeprecatedParams = function (params) {
    if (params.syncValuesLikeExcel) {
      var message_2 = 'AG Grid: since version 22.x, the Set Filter param syncValuesLikeExcel is no longer' + ' used as this is the default behaviour. To turn this default behaviour off, use the' + ' param suppressSyncValuesAfterDataChange';
      agGridCommunity._.doOnce(function () {
        return console.warn(message_2);
      }, 'syncValuesLikeExcel deprecated');
    }
    if (params.selectAllOnMiniFilter) {
      var message_3 = 'AG Grid: since version 22.x, the Set Filter param selectAllOnMiniFilter is no longer' + ' used as this is the default behaviour.';
      agGridCommunity._.doOnce(function () {
        return console.warn(message_3);
      }, 'selectAllOnMiniFilter deprecated');
    }
    if (params.suppressSyncValuesAfterDataChange) {
      var message_4 = 'AG Grid: since version 23.1, the Set Filter param suppressSyncValuesAfterDataChange has' + ' been deprecated and will be removed in a future major release.';
      agGridCommunity._.doOnce(function () {
        return console.warn(message_4);
      }, 'suppressSyncValuesAfterDataChange deprecated');
    }
    if (params.suppressRemoveEntries) {
      var message_5 = 'AG Grid: since version 23.1, the Set Filter param suppressRemoveEntries has' + ' been deprecated and will be removed in a future major release.';
      agGridCommunity._.doOnce(function () {
        return console.warn(message_5);
      }, 'suppressRemoveEntries deprecated');
    }
  };
  SetFilter.prototype.addEventListenersForDataChanges = function () {
    var _this = this;
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_ROW_DATA_UPDATED, function () {
      return _this.syncAfterDataChange();
    });
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_CELL_VALUE_CHANGED, function (event) {
      // only interested in changes to do with this column
      if (_this.setFilterParams && event.column === _this.setFilterParams.column) {
        _this.syncAfterDataChange();
      }
    });
  };
  SetFilter.prototype.syncAfterDataChange = function (refreshValues, keepSelection) {
    var _this = this;
    if (refreshValues === void 0) {
      refreshValues = true;
    }
    if (keepSelection === void 0) {
      keepSelection = true;
    }
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    var promise = agGridCommunity.AgPromise.resolve();
    if (refreshValues) {
      promise = this.valueModel.refreshValues(keepSelection);
    } else if (!keepSelection) {
      promise = this.valueModel.setModel(null);
    }
    return promise.then(function () {
      _this.refresh();
      _this.onBtApply(false, true);
    });
  };
  /** @deprecated since version 23.2. The loading screen is displayed automatically when the set filter is retrieving values. */
  SetFilter.prototype.setLoading = function (loading) {
    var message = 'AG Grid: since version 23.2, setLoading has been deprecated. The loading screen is displayed automatically when the set filter is retrieving values.';
    agGridCommunity._.doOnce(function () {
      return console.warn(message);
    }, 'setFilter.setLoading');
    this.showOrHideLoadingScreen(loading);
  };
  SetFilter.prototype.showOrHideLoadingScreen = function (isLoading) {
    agGridCommunity._.setDisplayed(this.eFilterLoading, isLoading);
  };
  SetFilter.prototype.initialiseFilterBodyUi = function () {
    this.initVirtualList();
    this.initMiniFilter();
  };
  SetFilter.prototype.initVirtualList = function () {
    var _this = this;
    if (!this.setFilterParams) {
      throw new Error('Set filter params have not been provided.');
    }
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    var virtualList = this.virtualList = this.createBean(new agGridCommunity.VirtualList('filter'));
    var eSetFilterList = this.getRefElement('eSetFilterList');
    if (eSetFilterList) {
      eSetFilterList.appendChild(virtualList.getGui());
    }
    var cellHeight = this.setFilterParams.cellHeight;
    if (cellHeight != null) {
      virtualList.setRowHeight(cellHeight);
    }
    virtualList.setComponentCreator(function (value) {
      return _this.createSetListItem(value);
    });
    var model;
    if (this.setFilterParams.suppressSelectAll) {
      model = new ModelWrapper(this.valueModel);
    } else {
      model = new ModelWrapperWithSelectAll(this.valueModel, function () {
        return _this.isSelectAllSelected();
      });
    }
    virtualList.setModel(model);
  };
  SetFilter.prototype.getSelectAllLabel = function () {
    if (!this.setFilterParams) {
      throw new Error('Set filter params have not been provided.');
    }
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    var key = this.valueModel.getMiniFilter() == null || !this.setFilterParams.excelMode ? 'selectAll' : 'selectAllSearchResults';
    return this.translateForSetFilter(key);
  };
  SetFilter.prototype.createSetListItem = function (value) {
    var _this = this;
    if (!this.setFilterParams) {
      throw new Error('Set filter params have not been provided.');
    }
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    var listItem;
    if (value === SetFilter.SELECT_ALL_VALUE) {
      listItem = this.createBean(new SetFilterListItem(function () {
        return _this.getSelectAllLabel();
      }, this.setFilterParams, function (key) {
        return _this.translateForSetFilter(key);
      }, this.isSelectAllSelected()));
      listItem.addEventListener(SetFilterListItem.EVENT_SELECTION_CHANGED, function (e) {
        return _this.onSelectAll(e.isSelected);
      });
      return listItem;
    }
    listItem = this.createBean(new SetFilterListItem(value, this.setFilterParams, function (key) {
      return _this.translateForSetFilter(key);
    }, this.valueModel.isValueSelected(value)));
    listItem.addEventListener(SetFilterListItem.EVENT_SELECTION_CHANGED, function (e) {
      return _this.onItemSelected(value, e.isSelected);
    });
    return listItem;
  };
  SetFilter.prototype.initMiniFilter = function () {
    var _this = this;
    if (!this.setFilterParams) {
      throw new Error('Set filter params have not been provided.');
    }
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    var _a = this,
      eMiniFilter = _a.eMiniFilter,
      gridOptionsWrapper = _a.gridOptionsWrapper;
    var translate = gridOptionsWrapper.getLocaleTextFunc();
    agGridCommunity._.setDisplayed(eMiniFilter.getGui(), !this.setFilterParams.suppressMiniFilter);
    eMiniFilter.setValue(this.valueModel.getMiniFilter());
    eMiniFilter.onValueChange(function () {
      return _this.onMiniFilterInput();
    });
    eMiniFilter.setInputAriaLabel(translate('ariaSearchFilterValues', 'Search filter values'));
    this.addManagedListener(eMiniFilter.getInputElement(), 'keypress', function (e) {
      return _this.onMiniFilterKeyPress(e);
    });
  };
  // we need to have the GUI attached before we can draw the virtual rows, as the
  // virtual row logic needs info about the GUI state
  SetFilter.prototype.afterGuiAttached = function (params) {
    if (!this.setFilterParams) {
      throw new Error('Set filter params have not been provided.');
    }
    _super.prototype.afterGuiAttached.call(this, params);
    this.refreshVirtualList();
    if (this.setFilterParams.excelMode) {
      this.resetUiToActiveModel();
    }
    var eMiniFilter = this.eMiniFilter;
    eMiniFilter.setInputPlaceholder(this.translateForSetFilter('searchOoo'));
    if (!params || !params.suppressFocus) {
      eMiniFilter.getFocusableElement().focus();
    }
  };
  SetFilter.prototype.applyModel = function () {
    if (!this.setFilterParams) {
      throw new Error('Set filter params have not been provided.');
    }
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    if (this.setFilterParams.excelMode && this.valueModel.isEverythingVisibleSelected()) {
      // In Excel, if the filter is applied with all visible values selected, then any active filter on the
      // column is removed. This ensures the filter is removed in this situation.
      this.valueModel.selectAllMatchingMiniFilter();
    }
    var result = _super.prototype.applyModel.call(this);
    // keep appliedModelValues in sync with the applied model
    var appliedModel = this.getModel();
    if (appliedModel) {
      this.appliedModelValues = agGridCommunity._.reduce(appliedModel.values, function (values, value) {
        values[String(value)] = true;
        return values;
      }, {});
    } else {
      this.appliedModelValues = null;
    }
    return result;
  };
  SetFilter.prototype.isModelValid = function (model) {
    return this.setFilterParams && this.setFilterParams.excelMode ? model == null || model.values.length > 0 : true;
  };
  SetFilter.prototype.doesFilterPass = function (params) {
    var _this = this;
    if (!this.setFilterParams || !this.valueModel || !this.appliedModelValues) {
      return true;
    }
    var _a = this.setFilterParams,
      valueGetter = _a.valueGetter,
      keyCreator = _a.colDef.keyCreator;
    var value = valueGetter(params.node);
    if (keyCreator) {
      value = keyCreator({
        value: value
      });
    }
    value = agGridCommunity._.makeNull(value);
    if (Array.isArray(value)) {
      return agGridCommunity._.some(value, function (v) {
        return _this.appliedModelValues[agGridCommunity._.makeNull(v)] === true;
      });
    }
    // Comparing against a value performs better than just checking for undefined
    // https://jsbench.me/hdk91jbw1h/
    return this.appliedModelValues[value] === true;
  };
  SetFilter.prototype.onNewRowsLoaded = function () {
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    var valuesType = this.valueModel.getValuesType();
    var keepSelection = this.isNewRowsActionKeep();
    this.syncAfterDataChange(valuesType === SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES, keepSelection);
  };
  //noinspection JSUnusedGlobalSymbols
  /**
   * Public method provided so the user can change the value of the filter once
   * the filter has been already started
   * @param options The options to use.
   */
  SetFilter.prototype.setFilterValues = function (options) {
    var _this = this;
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    this.valueModel.overrideValues(options, this.isNewRowsActionKeep()).then(function () {
      _this.refresh();
      _this.onUiChanged();
    });
  };
  //noinspection JSUnusedGlobalSymbols
  /**
   * Public method provided so the user can reset the values of the filter once that it has started.
   */
  SetFilter.prototype.resetFilterValues = function () {
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    this.valueModel.setValuesType(SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES);
    this.syncAfterDataChange(true, this.isNewRowsActionKeep());
  };
  SetFilter.prototype.refreshFilterValues = function () {
    var _this = this;
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    // the model is still being initialised
    if (!this.valueModel.isInitialised()) {
      return;
    }
    this.valueModel.refreshValues().then(function () {
      _this.refresh();
      _this.onUiChanged();
    });
  };
  SetFilter.prototype.onAnyFilterChanged = function () {
    var _this = this;
    // don't block the current action when updating the values for this filter
    setTimeout(function () {
      if (!_this.isAlive()) {
        return;
      }
      if (!_this.valueModel) {
        throw new Error('Value model has not been created.');
      }
      _this.valueModel.refreshAfterAnyFilterChanged().then(function () {
        return _this.refresh();
      });
    }, 0);
  };
  SetFilter.prototype.onMiniFilterInput = function () {
    if (!this.setFilterParams) {
      throw new Error('Set filter params have not been provided.');
    }
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    if (this.valueModel.setMiniFilter(this.eMiniFilter.getValue())) {
      if (this.setFilterParams.applyMiniFilterWhileTyping) {
        this.filterOnAllVisibleValues(false);
      } else {
        this.updateUiAfterMiniFilterChange();
      }
    }
  };
  SetFilter.prototype.updateUiAfterMiniFilterChange = function () {
    if (!this.setFilterParams) {
      throw new Error('Set filter params have not been provided.');
    }
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    if (this.setFilterParams.excelMode) {
      if (this.valueModel.getMiniFilter() == null) {
        this.resetUiToActiveModel();
      } else {
        this.valueModel.selectAllMatchingMiniFilter(true);
        this.refresh();
        this.onUiChanged();
      }
    } else {
      this.refresh();
    }
    this.showOrHideResults();
  };
  SetFilter.prototype.showOrHideResults = function () {
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    var hideResults = this.valueModel.getMiniFilter() != null && this.valueModel.getDisplayedValueCount() < 1;
    agGridCommunity._.setDisplayed(this.eNoMatches, hideResults);
    agGridCommunity._.setDisplayed(this.eSetFilterList, !hideResults);
  };
  SetFilter.prototype.resetUiToActiveModel = function () {
    var _this = this;
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    this.eMiniFilter.setValue(null, true);
    this.valueModel.setMiniFilter(null);
    this.setModelIntoUi(this.getModel()).then(function () {
      return _this.onUiChanged(false, 'prevent');
    });
  };
  SetFilter.prototype.onMiniFilterKeyPress = function (e) {
    if (agGridCommunity._.isKeyPressed(e, agGridCommunity.KeyCode.ENTER) && (!this.setFilterParams || !this.setFilterParams.excelMode)) {
      this.filterOnAllVisibleValues();
    }
  };
  SetFilter.prototype.filterOnAllVisibleValues = function (applyImmediately) {
    if (applyImmediately === void 0) {
      applyImmediately = true;
    }
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    this.valueModel.selectAllMatchingMiniFilter(true);
    this.refresh();
    this.onUiChanged(false, applyImmediately ? 'immediately' : 'debounce');
    this.showOrHideResults();
  };
  SetFilter.prototype.focusRowIfAlive = function (rowIndex) {
    var _this = this;
    if (rowIndex == null) {
      return;
    }
    window.setTimeout(function () {
      if (!_this.virtualList) {
        throw new Error('Virtual list has not been created.');
      }
      if (_this.isAlive()) {
        _this.virtualList.focusRow(rowIndex);
      }
    }, 0);
  };
  SetFilter.prototype.onSelectAll = function (isSelected) {
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    if (!this.virtualList) {
      throw new Error('Virtual list has not been created.');
    }
    if (isSelected) {
      this.valueModel.selectAllMatchingMiniFilter();
    } else {
      this.valueModel.deselectAllMatchingMiniFilter();
    }
    var focusedRow = this.virtualList.getLastFocusedRow();
    this.refresh();
    this.onUiChanged();
    this.focusRowIfAlive(focusedRow);
  };
  SetFilter.prototype.onItemSelected = function (value, isSelected) {
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    if (!this.virtualList) {
      throw new Error('Virtual list has not been created.');
    }
    if (isSelected) {
      this.valueModel.selectValue(value);
    } else {
      this.valueModel.deselectValue(value);
    }
    var focusedRow = this.virtualList.getLastFocusedRow();
    this.refresh();
    this.onUiChanged();
    this.focusRowIfAlive(focusedRow);
  };
  SetFilter.prototype.setMiniFilter = function (newMiniFilter) {
    this.eMiniFilter.setValue(newMiniFilter);
    this.onMiniFilterInput();
  };
  SetFilter.prototype.getMiniFilter = function () {
    return this.valueModel ? this.valueModel.getMiniFilter() : null;
  };
  /** @deprecated since version 23.2. Please use setModel instead. */
  SetFilter.prototype.selectEverything = function () {
    var message = 'AG Grid: since version 23.2, selectEverything has been deprecated. Please use setModel instead.';
    agGridCommunity._.doOnce(function () {
      return console.warn(message);
    }, 'setFilter.selectEverything');
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    this.valueModel.selectAllMatchingMiniFilter();
    this.refresh();
  };
  /** @deprecated since version 23.2. Please use setModel instead. */
  SetFilter.prototype.selectNothing = function () {
    var message = 'AG Grid: since version 23.2, selectNothing has been deprecated. Please use setModel instead.';
    agGridCommunity._.doOnce(function () {
      return console.warn(message);
    }, 'setFilter.selectNothing');
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    this.valueModel.deselectAllMatchingMiniFilter();
    this.refresh();
  };
  /** @deprecated since version 23.2. Please use setModel instead. */
  SetFilter.prototype.unselectValue = function (value) {
    var message = 'AG Grid: since version 23.2, unselectValue has been deprecated. Please use setModel instead.';
    agGridCommunity._.doOnce(function () {
      return console.warn(message);
    }, 'setFilter.unselectValue');
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    this.valueModel.deselectValue(value);
    this.refresh();
  };
  /** @deprecated since version 23.2. Please use setModel instead. */
  SetFilter.prototype.selectValue = function (value) {
    var message = 'AG Grid: since version 23.2, selectValue has been deprecated. Please use setModel instead.';
    agGridCommunity._.doOnce(function () {
      return console.warn(message);
    }, 'setFilter.selectValue');
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    this.valueModel.selectValue(value);
    this.refresh();
  };
  SetFilter.prototype.refresh = function () {
    if (!this.virtualList) {
      throw new Error('Virtual list has not been created.');
    }
    this.virtualList.refresh();
  };
  /** @deprecated since version 23.2. Please use getModel instead. */
  SetFilter.prototype.isValueSelected = function (value) {
    var message = 'AG Grid: since version 23.2, isValueSelected has been deprecated. Please use getModel instead.';
    agGridCommunity._.doOnce(function () {
      return console.warn(message);
    }, 'setFilter.isValueSelected');
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    return this.valueModel.isValueSelected(value);
  };
  /** @deprecated since version 23.2. Please use getModel instead. */
  SetFilter.prototype.isEverythingSelected = function () {
    var message = 'AG Grid: since version 23.2, isEverythingSelected has been deprecated. Please use getModel instead.';
    agGridCommunity._.doOnce(function () {
      return console.warn(message);
    }, 'setFilter.isEverythingSelected');
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    return this.valueModel.isEverythingVisibleSelected();
  };
  /** @deprecated since version 23.2. Please use getModel instead. */
  SetFilter.prototype.isNothingSelected = function () {
    var message = 'AG Grid: since version 23.2, isNothingSelected has been deprecated. Please use getModel instead.';
    agGridCommunity._.doOnce(function () {
      return console.warn(message);
    }, 'setFilter.isNothingSelected');
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    return this.valueModel.isNothingVisibleSelected();
  };
  /** @deprecated since version 23.2. Please use getValues instead. */
  SetFilter.prototype.getUniqueValueCount = function () {
    var message = 'AG Grid: since version 23.2, getUniqueValueCount has been deprecated. Please use getValues instead.';
    agGridCommunity._.doOnce(function () {
      return console.warn(message);
    }, 'setFilter.getUniqueValueCount');
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    return this.valueModel.getUniqueValueCount();
  };
  /** @deprecated since version 23.2. Please use getValues instead. */
  SetFilter.prototype.getUniqueValue = function (index) {
    var message = 'AG Grid: since version 23.2, getUniqueValue has been deprecated. Please use getValues instead.';
    agGridCommunity._.doOnce(function () {
      return console.warn(message);
    }, 'setFilter.getUniqueValue');
    if (!this.valueModel) {
      throw new Error('Value model has not been created.');
    }
    return this.valueModel.getUniqueValue(index);
  };
  SetFilter.prototype.getValues = function () {
    return this.valueModel ? this.valueModel.getValues() : [];
  };
  SetFilter.prototype.refreshVirtualList = function () {
    if (this.setFilterParams && this.setFilterParams.refreshValuesOnOpen) {
      this.refreshFilterValues();
    } else {
      this.refresh();
    }
  };
  SetFilter.prototype.translateForSetFilter = function (key) {
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    return translate(key, DEFAULT_LOCALE_TEXT[key]);
  };
  SetFilter.prototype.isSelectAllSelected = function () {
    if (!this.setFilterParams || !this.valueModel) {
      return false;
    }
    if (!this.setFilterParams.defaultToNothingSelected) {
      // everything selected by default
      if (this.valueModel.hasSelections() && this.valueModel.isNothingVisibleSelected()) {
        return false;
      }
      if (this.valueModel.isEverythingVisibleSelected()) {
        return true;
      }
    } else {
      // nothing selected by default
      if (this.valueModel.hasSelections() && this.valueModel.isEverythingVisibleSelected()) {
        return true;
      }
      if (this.valueModel.isNothingVisibleSelected()) {
        return false;
      }
    }
    // returning `undefined` means the checkbox status is indeterminate.
    return undefined;
  };
  SetFilter.prototype.destroy = function () {
    if (this.virtualList != null) {
      this.virtualList.destroy();
      this.virtualList = null;
    }
    _super.prototype.destroy.call(this);
  };
  SetFilter.SELECT_ALL_VALUE = '__AG_SELECT_ALL__';
  __decorate$1L([agGridCommunity.RefSelector('eMiniFilter')], SetFilter.prototype, "eMiniFilter", void 0);
  __decorate$1L([agGridCommunity.RefSelector('eFilterLoading')], SetFilter.prototype, "eFilterLoading", void 0);
  __decorate$1L([agGridCommunity.RefSelector('eSetFilterList')], SetFilter.prototype, "eSetFilterList", void 0);
  __decorate$1L([agGridCommunity.RefSelector('eFilterNoMatches')], SetFilter.prototype, "eNoMatches", void 0);
  __decorate$1L([agGridCommunity.Autowired('valueFormatterService')], SetFilter.prototype, "valueFormatterService", void 0);
  return SetFilter;
}(agGridCommunity.ProvidedFilter);
var ModelWrapper = /** @class */function () {
  function ModelWrapper(model) {
    this.model = model;
  }
  ModelWrapper.prototype.getRowCount = function () {
    return this.model.getDisplayedValueCount();
  };
  ModelWrapper.prototype.getRow = function (index) {
    return this.model.getDisplayedValue(index);
  };
  ModelWrapper.prototype.isRowSelected = function (index) {
    return this.model.isValueSelected(this.getRow(index));
  };
  return ModelWrapper;
}();
var ModelWrapperWithSelectAll = /** @class */function () {
  function ModelWrapperWithSelectAll(model, isSelectAllSelected) {
    this.model = model;
    this.isSelectAllSelected = isSelectAllSelected;
  }
  ModelWrapperWithSelectAll.prototype.getRowCount = function () {
    return this.model.getDisplayedValueCount() + 1;
  };
  ModelWrapperWithSelectAll.prototype.getRow = function (index) {
    return index === 0 ? SetFilter.SELECT_ALL_VALUE : this.model.getDisplayedValue(index - 1);
  };
  ModelWrapperWithSelectAll.prototype.isRowSelected = function (index) {
    return index === 0 ? this.isSelectAllSelected() : this.model.isValueSelected(this.getRow(index));
  };
  return ModelWrapperWithSelectAll;
}();
var __extends$2X =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1M =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SetFloatingFilterComp = /** @class */function (_super) {
  __extends$2X(SetFloatingFilterComp, _super);
  function SetFloatingFilterComp() {
    var _this = _super.call(this, /* html */"\n            <div class=\"ag-floating-filter-input\" role=\"presentation\">\n                <ag-input-text-field ref=\"eFloatingFilterText\"></ag-input-text-field>\n            </div>") || this;
    _this.availableValuesListenerAdded = false;
    return _this;
  }
  // this is a user component, and IComponent has "public destroy()" as part of the interface.
  // so we need to override destroy() just to make the method public.
  SetFloatingFilterComp.prototype.destroy = function () {
    _super.prototype.destroy.call(this);
  };
  SetFloatingFilterComp.prototype.init = function (params) {
    var displayName = this.columnController.getDisplayNameForColumn(params.column, 'header', true);
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    this.eFloatingFilterText.setDisabled(true).setInputAriaLabel(displayName + " " + translate('ariaFilterInput', 'Filter Input')).addGuiEventListener('click', function () {
      return params.showParentFilter();
    });
    this.params = params;
  };
  SetFloatingFilterComp.prototype.onParentModelChanged = function (parentModel) {
    this.lastKnownModel = parentModel;
    this.updateFloatingFilterText();
  };
  SetFloatingFilterComp.prototype.addAvailableValuesListener = function () {
    var _this = this;
    this.params.parentFilterInstance(function (setFilter) {
      var setValueModel = setFilter.getValueModel();
      if (!setValueModel) {
        return;
      }
      // unlike other filters, what we show in the floating filter can be different, even
      // if another filter changes. this is due to how set filter restricts its values based
      // on selections in other filters, e.g. if you filter Language to English, then the set filter
      // on Country will only show English speaking countries. Thus the list of items to show
      // in the floating filter can change.
      _this.addManagedListener(setValueModel, SetValueModel.EVENT_AVAILABLE_VALUES_CHANGED, function () {
        return _this.updateFloatingFilterText();
      });
    });
    this.availableValuesListenerAdded = true;
  };
  SetFloatingFilterComp.prototype.updateFloatingFilterText = function () {
    var _this = this;
    if (!this.lastKnownModel) {
      this.eFloatingFilterText.setValue('');
      return;
    }
    if (!this.availableValuesListenerAdded) {
      this.addAvailableValuesListener();
    }
    // also supporting old filter model for backwards compatibility
    var values = this.lastKnownModel instanceof Array ? this.lastKnownModel : this.lastKnownModel.values;
    if (!values) {
      this.eFloatingFilterText.setValue('');
      return;
    }
    this.params.parentFilterInstance(function (setFilter) {
      var valueModel = setFilter.getValueModel();
      if (!valueModel) {
        return;
      }
      var availableValues = agGridCommunity._.filter(values, function (v) {
        return valueModel.isValueAvailable(v);
      });
      var localeTextFunc = _this.gridOptionsWrapper.getLocaleTextFunc();
      // format all the values, if a formatter is provided
      var formattedValues = agGridCommunity._.map(availableValues, function (value) {
        var _a = _this.params,
          column = _a.column,
          filterParams = _a.filterParams;
        var formattedValue = _this.valueFormatterService.formatValue(column, null, null, value, filterParams.valueFormatter, false);
        var valueToRender = formattedValue != null ? formattedValue : value;
        return valueToRender == null ? localeTextFunc('blanks', DEFAULT_LOCALE_TEXT.blanks) : valueToRender;
      });
      var arrayToDisplay = formattedValues.length > 10 ? formattedValues.slice(0, 10).concat('...') : formattedValues;
      var valuesString = "(" + formattedValues.length + ") " + arrayToDisplay.join(',');
      _this.eFloatingFilterText.setValue(valuesString);
    });
  };
  __decorate$1M([agGridCommunity.RefSelector('eFloatingFilterText')], SetFloatingFilterComp.prototype, "eFloatingFilterText", void 0);
  __decorate$1M([agGridCommunity.Autowired('valueFormatterService')], SetFloatingFilterComp.prototype, "valueFormatterService", void 0);
  __decorate$1M([agGridCommunity.Autowired('columnController')], SetFloatingFilterComp.prototype, "columnController", void 0);
  return SetFloatingFilterComp;
}(agGridCommunity.Component);
var SetFilterModule = {
  moduleName: agGridCommunity.ModuleNames.SetFilterModule,
  beans: [],
  userComponents: [{
    componentName: 'agSetColumnFilter',
    componentClass: SetFilter
  }, {
    componentName: 'agSetColumnFloatingFilter',
    componentClass: SetFloatingFilterComp
  }],
  dependantModules: [EnterpriseCoreModule]
};
var __extends$2Y =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1N =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var StatusBarService = /** @class */function (_super) {
  __extends$2Y(StatusBarService, _super);
  // tslint:disable-next-line
  function StatusBarService() {
    var _this = _super.call(this) || this;
    _this.allComponents = {};
    return _this;
  }
  StatusBarService.prototype.registerStatusPanel = function (key, component) {
    this.allComponents[key] = component;
  };
  StatusBarService.prototype.getStatusPanel = function (key) {
    return this.allComponents[key];
  };
  StatusBarService = __decorate$1N([agGridCommunity.Bean('statusBarService')], StatusBarService);
  return StatusBarService;
}(agGridCommunity.BeanStub);
var __extends$2Z =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1O =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var StatusBar = /** @class */function (_super) {
  __extends$2Z(StatusBar, _super);
  function StatusBar() {
    return _super.call(this, StatusBar.TEMPLATE) || this;
  }
  StatusBar.prototype.postConstruct = function () {
    if (this.gridOptions.statusBar && this.gridOptions.statusBar.statusPanels) {
      var leftStatusPanelComponents = this.gridOptions.statusBar.statusPanels.filter(function (componentConfig) {
        return componentConfig.align === 'left';
      });
      this.createAndRenderComponents(leftStatusPanelComponents, this.eStatusBarLeft);
      var centerStatusPanelComponents = this.gridOptions.statusBar.statusPanels.filter(function (componentConfig) {
        return componentConfig.align === 'center';
      });
      this.createAndRenderComponents(centerStatusPanelComponents, this.eStatusBarCenter);
      var rightStatusPanelComponents = this.gridOptions.statusBar.statusPanels.filter(function (componentConfig) {
        return !componentConfig.align || componentConfig.align === 'right';
      });
      this.createAndRenderComponents(rightStatusPanelComponents, this.eStatusBarRight);
    } else {
      this.setDisplayed(false);
    }
  };
  StatusBar.prototype.createAndRenderComponents = function (statusBarComponents, ePanelComponent) {
    var _this = this;
    var componentDetails = [];
    statusBarComponents.forEach(function (componentConfig) {
      var params = {
        api: _this.gridOptionsWrapper.getApi(),
        columnApi: _this.gridOptionsWrapper.getColumnApi(),
        context: _this.gridOptionsWrapper.getContext()
      };
      var promise = _this.userComponentFactory.newStatusPanelComponent(componentConfig, params);
      componentDetails.push({
        // default to the component name if no key supplied
        key: componentConfig.key || componentConfig.statusPanel,
        promise: promise
      });
    });
    agGridCommunity.AgPromise.all(componentDetails.map(function (details) {
      return details.promise;
    })).then(function () {
      componentDetails.forEach(function (componentDetail) {
        componentDetail.promise.then(function (component) {
          var destroyFunc = function () {
            _this.getContext().destroyBean(component);
          };
          if (_this.isAlive()) {
            _this.statusBarService.registerStatusPanel(componentDetail.key, component);
            ePanelComponent.appendChild(component.getGui());
            _this.addDestroyFunc(destroyFunc);
          } else {
            destroyFunc();
          }
        });
      });
    });
  };
  StatusBar.TEMPLATE = "<div class=\"ag-status-bar\">\n            <div ref=\"eStatusBarLeft\" class=\"ag-status-bar-left\"></div>\n            <div ref=\"eStatusBarCenter\" class=\"ag-status-bar-center\"></div>\n            <div ref=\"eStatusBarRight\" class=\"ag-status-bar-right\"></div>\n        </div>";
  __decorate$1O([agGridCommunity.Autowired('gridOptions')], StatusBar.prototype, "gridOptions", void 0);
  __decorate$1O([agGridCommunity.Autowired('userComponentFactory')], StatusBar.prototype, "userComponentFactory", void 0);
  __decorate$1O([agGridCommunity.Autowired('statusBarService')], StatusBar.prototype, "statusBarService", void 0);
  __decorate$1O([agGridCommunity.RefSelector('eStatusBarLeft')], StatusBar.prototype, "eStatusBarLeft", void 0);
  __decorate$1O([agGridCommunity.RefSelector('eStatusBarCenter')], StatusBar.prototype, "eStatusBarCenter", void 0);
  __decorate$1O([agGridCommunity.RefSelector('eStatusBarRight')], StatusBar.prototype, "eStatusBarRight", void 0);
  __decorate$1O([agGridCommunity.PostConstruct], StatusBar.prototype, "postConstruct", null);
  return StatusBar;
}(agGridCommunity.Component);
var __extends$2_ =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1P =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var NameValueComp = /** @class */function (_super) {
  __extends$2_(NameValueComp, _super);
  function NameValueComp() {
    return _super.call(this, NameValueComp.TEMPLATE) || this;
  }
  NameValueComp.prototype.setLabel = function (key, defaultValue) {
    // we want to hide until the first value comes in
    this.setDisplayed(false);
    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
    this.eLabel.innerHTML = localeTextFunc(key, defaultValue);
  };
  NameValueComp.prototype.setValue = function (value) {
    this.eValue.innerHTML = value;
  };
  NameValueComp.TEMPLATE = "<div class=\"ag-status-name-value\">\n            <span ref=\"eLabel\"></span>:&nbsp;\n            <span ref=\"eValue\" class=\"ag-status-name-value-value\"></span>\n        </div>";
  __decorate$1P([agGridCommunity.RefSelector('eLabel')], NameValueComp.prototype, "eLabel", void 0);
  __decorate$1P([agGridCommunity.RefSelector('eValue')], NameValueComp.prototype, "eValue", void 0);
  return NameValueComp;
}(agGridCommunity.Component);
var __extends$2$ =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1Q =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TotalAndFilteredRowsComp = /** @class */function (_super) {
  __extends$2$(TotalAndFilteredRowsComp, _super);
  function TotalAndFilteredRowsComp() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  TotalAndFilteredRowsComp.prototype.postConstruct = function () {
    // this component is only really useful with client side row model
    if (this.gridApi.getModel().getType() !== 'clientSide') {
      console.warn("AG Grid: agTotalAndFilteredRowCountComponent should only be used with the client side row model.");
      return;
    }
    this.setLabel('totalAndFilteredRows', 'Rows');
    this.addCssClass('ag-status-panel');
    this.addCssClass('ag-status-panel-total-and-filtered-row-count');
    this.setDisplayed(true);
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_MODEL_UPDATED, this.onDataChanged.bind(this));
  };
  TotalAndFilteredRowsComp.prototype.onDataChanged = function () {
    var rowCount = agGridCommunity._.formatNumberCommas(this.getFilteredRowCountValue());
    var totalRowCount = agGridCommunity._.formatNumberCommas(this.getTotalRowCount());
    if (rowCount === totalRowCount) {
      this.setValue(rowCount);
    } else {
      var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
      this.setValue(rowCount + " " + localeTextFunc('of', 'of') + " " + totalRowCount);
    }
  };
  TotalAndFilteredRowsComp.prototype.getFilteredRowCountValue = function () {
    var filteredRowCount = 0;
    this.gridApi.forEachNodeAfterFilter(function (node) {
      if (!node.group) {
        filteredRowCount++;
      }
    });
    return filteredRowCount;
  };
  TotalAndFilteredRowsComp.prototype.getTotalRowCount = function () {
    var totalRowCount = 0;
    this.gridApi.forEachNode(function (node) {
      if (!node.group) {
        totalRowCount++;
      }
    });
    return totalRowCount;
  };
  TotalAndFilteredRowsComp.prototype.init = function () {};
  // this is a user component, and IComponent has "public destroy()" as part of the interface.
  // so we need to override destroy() just to make the method public.
  TotalAndFilteredRowsComp.prototype.destroy = function () {
    _super.prototype.destroy.call(this);
  };
  __decorate$1Q([agGridCommunity.Autowired('gridApi')], TotalAndFilteredRowsComp.prototype, "gridApi", void 0);
  __decorate$1Q([agGridCommunity.PostConstruct], TotalAndFilteredRowsComp.prototype, "postConstruct", null);
  return TotalAndFilteredRowsComp;
}(NameValueComp);
var __extends$30 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1R =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FilteredRowsComp = /** @class */function (_super) {
  __extends$30(FilteredRowsComp, _super);
  function FilteredRowsComp() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  FilteredRowsComp.prototype.postConstruct = function () {
    this.setLabel('filteredRows', 'Filtered');
    // this component is only really useful with client side row model
    if (this.gridApi.getModel().getType() !== 'clientSide') {
      console.warn("AG Grid: agFilteredRowCountComponent should only be used with the client side row model.");
      return;
    }
    this.addCssClass('ag-status-panel');
    this.addCssClass('ag-status-panel-filtered-row-count');
    this.setDisplayed(true);
    var listener = this.onDataChanged.bind(this);
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_MODEL_UPDATED, listener);
  };
  FilteredRowsComp.prototype.onDataChanged = function () {
    var totalRowCountValue = this.getTotalRowCountValue();
    var filteredRowCountValue = this.getFilteredRowCountValue();
    this.setValue(agGridCommunity._.formatNumberCommas(filteredRowCountValue));
    this.setDisplayed(totalRowCountValue !== filteredRowCountValue);
  };
  FilteredRowsComp.prototype.getTotalRowCountValue = function () {
    var totalRowCount = 0;
    this.gridApi.forEachNode(function (node) {
      return totalRowCount += 1;
    });
    return totalRowCount;
  };
  FilteredRowsComp.prototype.getFilteredRowCountValue = function () {
    var filteredRowCount = 0;
    this.gridApi.forEachNodeAfterFilter(function (node) {
      if (!node.group) {
        filteredRowCount += 1;
      }
    });
    return filteredRowCount;
  };
  FilteredRowsComp.prototype.init = function () {};
  // this is a user component, and IComponent has "public destroy()" as part of the interface.
  // so we need to override destroy() just to make the method public.
  FilteredRowsComp.prototype.destroy = function () {
    _super.prototype.destroy.call(this);
  };
  __decorate$1R([agGridCommunity.Autowired('gridApi')], FilteredRowsComp.prototype, "gridApi", void 0);
  __decorate$1R([agGridCommunity.PostConstruct], FilteredRowsComp.prototype, "postConstruct", null);
  return FilteredRowsComp;
}(NameValueComp);
var __extends$31 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1S =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TotalRowsComp = /** @class */function (_super) {
  __extends$31(TotalRowsComp, _super);
  function TotalRowsComp() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  TotalRowsComp.prototype.postConstruct = function () {
    this.setLabel('totalRows', 'Total Rows');
    // this component is only really useful with client side row model
    if (this.gridApi.getModel().getType() !== 'clientSide') {
      console.warn("AG Grid: agTotalRowCountComponent should only be used with the client side row model.");
      return;
    }
    this.addCssClass('ag-status-panel');
    this.addCssClass('ag-status-panel-total-row-count');
    this.setDisplayed(true);
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_MODEL_UPDATED, this.onDataChanged.bind(this));
  };
  TotalRowsComp.prototype.onDataChanged = function () {
    this.setValue(agGridCommunity._.formatNumberCommas(this.getRowCountValue()));
  };
  TotalRowsComp.prototype.getRowCountValue = function () {
    var totalRowCount = 0;
    this.gridApi.forEachLeafNode(function (node) {
      return totalRowCount += 1;
    });
    return totalRowCount;
  };
  TotalRowsComp.prototype.init = function () {};
  // this is a user component, and IComponent has "public destroy()" as part of the interface.
  // so we need to override destroy() just to make the method public.
  TotalRowsComp.prototype.destroy = function () {
    _super.prototype.destroy.call(this);
  };
  __decorate$1S([agGridCommunity.Autowired('gridApi')], TotalRowsComp.prototype, "gridApi", void 0);
  __decorate$1S([agGridCommunity.PostConstruct], TotalRowsComp.prototype, "postConstruct", null);
  return TotalRowsComp;
}(NameValueComp);
var __extends$32 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1T =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SelectedRowsComp = /** @class */function (_super) {
  __extends$32(SelectedRowsComp, _super);
  function SelectedRowsComp() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  SelectedRowsComp.prototype.postConstruct = function () {
    if (!this.isValidRowModel()) {
      console.warn("AG Grid: agSelectedRowCountComponent should only be used with the client and server side row model.");
      return;
    }
    this.setLabel('selectedRows', 'Selected');
    this.addCssClass('ag-status-panel');
    this.addCssClass('ag-status-panel-selected-row-count');
    var selectedRowCount = this.gridApi.getSelectedRows().length;
    this.setValue(agGridCommunity._.formatNumberCommas(selectedRowCount));
    this.setDisplayed(selectedRowCount > 0);
    var eventListener = this.onRowSelectionChanged.bind(this);
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_MODEL_UPDATED, eventListener);
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_SELECTION_CHANGED, eventListener);
  };
  SelectedRowsComp.prototype.isValidRowModel = function () {
    // this component is only really useful with client or server side rowmodels
    var rowModelType = this.gridApi.getModel().getType();
    return rowModelType === 'clientSide' || rowModelType === 'serverSide';
  };
  SelectedRowsComp.prototype.onRowSelectionChanged = function () {
    var selectedRowCount = this.gridApi.getSelectedRows().length;
    this.setValue(agGridCommunity._.formatNumberCommas(selectedRowCount));
    this.setDisplayed(selectedRowCount > 0);
  };
  SelectedRowsComp.prototype.init = function () {};
  // this is a user component, and IComponent has "public destroy()" as part of the interface.
  // so we need to override destroy() just to make the method public.
  SelectedRowsComp.prototype.destroy = function () {
    _super.prototype.destroy.call(this);
  };
  __decorate$1T([agGridCommunity.Autowired('gridApi')], SelectedRowsComp.prototype, "gridApi", void 0);
  __decorate$1T([agGridCommunity.PostConstruct], SelectedRowsComp.prototype, "postConstruct", null);
  return SelectedRowsComp;
}(NameValueComp);
var __extends$33 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1U =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AggregationComp = /** @class */function (_super) {
  __extends$33(AggregationComp, _super);
  function AggregationComp() {
    return _super.call(this, AggregationComp.TEMPLATE) || this;
  }
  // this is a user component, and IComponent has "public destroy()" as part of the interface.
  // so we need to override destroy() just to make the method public.
  AggregationComp.prototype.destroy = function () {
    _super.prototype.destroy.call(this);
  };
  AggregationComp.prototype.postConstruct = function () {
    if (!this.isValidRowModel()) {
      console.warn("AG Grid: agAggregationComponent should only be used with the client and server side row model.");
      return;
    }
    this.avgAggregationComp.setLabel('average', 'Average');
    this.countAggregationComp.setLabel('count', 'Count');
    this.minAggregationComp.setLabel('min', 'Min');
    this.maxAggregationComp.setLabel('max', 'Max');
    this.sumAggregationComp.setLabel('sum', 'Sum');
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_RANGE_SELECTION_CHANGED, this.onRangeSelectionChanged.bind(this));
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_MODEL_UPDATED, this.onRangeSelectionChanged.bind(this));
  };
  AggregationComp.prototype.isValidRowModel = function () {
    // this component is only really useful with client or server side rowmodels
    var rowModelType = this.gridApi.getModel().getType();
    return rowModelType === 'clientSide' || rowModelType === 'serverSide';
  };
  AggregationComp.prototype.init = function () {};
  AggregationComp.prototype.setAggregationComponentValue = function (aggFuncName, value, visible) {
    var statusBarValueComponent = this.getAggregationValueComponent(aggFuncName);
    if (agGridCommunity._.exists(statusBarValueComponent) && statusBarValueComponent) {
      statusBarValueComponent.setValue(agGridCommunity._.formatNumberTwoDecimalPlacesAndCommas(value));
      statusBarValueComponent.setDisplayed(visible);
    }
  };
  AggregationComp.prototype.getAggregationValueComponent = function (aggFuncName) {
    // converts user supplied agg name to our reference - eg: sum => sumAggregationComp
    var refComponentName = aggFuncName + "AggregationComp";
    // if the user has specified the agAggregationPanelComp but no aggFuncs we show the all
    // if the user has specified the agAggregationPanelComp and aggFuncs, then we only show the aggFuncs listed
    var statusBarValueComponent = null;
    var aggregationPanelConfig = agGridCommunity._.exists(this.gridOptions.statusBar) && this.gridOptions.statusBar ? agGridCommunity._.find(this.gridOptions.statusBar.statusPanels, function (panel) {
      return panel.statusPanel === 'agAggregationComponent';
    }) : null;
    if (agGridCommunity._.exists(aggregationPanelConfig) && aggregationPanelConfig) {
      // a little defensive here - if no statusPanelParams show it, if componentParams we also expect aggFuncs
      if (!agGridCommunity._.exists(aggregationPanelConfig.statusPanelParams) || agGridCommunity._.exists(aggregationPanelConfig.statusPanelParams) && agGridCommunity._.exists(aggregationPanelConfig.statusPanelParams.aggFuncs) && agGridCommunity._.exists(agGridCommunity._.find(aggregationPanelConfig.statusPanelParams.aggFuncs, function (func) {
        return func === aggFuncName;
      }))) {
        statusBarValueComponent = this[refComponentName];
      }
    } else {
      // components not specified - assume we can show this component
      statusBarValueComponent = this[refComponentName];
    }
    // either we can't find it (which would indicate a typo or similar user side), or the user has deliberately
    // not listed the component in aggFuncs
    return statusBarValueComponent;
  };
  AggregationComp.prototype.onRangeSelectionChanged = function () {
    var _this = this;
    var cellRanges = this.rangeController ? this.rangeController.getCellRanges() : undefined;
    var sum = 0;
    var count = 0;
    var numberCount = 0;
    var min = null;
    var max = null;
    var cellsSoFar = {};
    if (cellRanges && !agGridCommunity._.missingOrEmpty(cellRanges)) {
      cellRanges.forEach(function (cellRange) {
        var currentRow = _this.rangeController.getRangeStartRow(cellRange);
        var lastRow = _this.rangeController.getRangeEndRow(cellRange);
        while (true) {
          var finishedAllRows = agGridCommunity._.missing(currentRow) || !currentRow || _this.rowPositionUtils.before(lastRow, currentRow);
          if (finishedAllRows || !currentRow || !cellRange.columns) {
            break;
          }
          cellRange.columns.forEach(function (col) {
            if (currentRow === null) {
              return;
            }
            // we only want to include each cell once, in case a cell is in multiple ranges
            var cellId = _this.cellPositionUtils.createId({
              rowPinned: currentRow.rowPinned,
              column: col,
              rowIndex: currentRow.rowIndex
            });
            if (cellsSoFar[cellId]) {
              return;
            }
            cellsSoFar[cellId] = true;
            var rowNode = _this.rowRenderer.getRowNode(currentRow);
            if (agGridCommunity._.missing(rowNode)) {
              return;
            }
            var value = _this.valueService.getValue(col, rowNode);
            // if empty cell, skip it, doesn't impact count or anything
            if (agGridCommunity._.missing(value) || value === '') {
              return;
            }
            // see if value is wrapped, can happen when doing count() or avg() functions
            if (value.value) {
              value = value.value;
            }
            if (typeof value === 'string') {
              value = Number(value);
            }
            if (typeof value === 'number' && !isNaN(value)) {
              sum += value;
              if (max === null || value > max) {
                max = value;
              }
              if (min === null || value < min) {
                min = value;
              }
              numberCount++;
            }
            count++;
          });
          currentRow = _this.cellNavigationService.getRowBelow(currentRow);
        }
      });
    }
    var gotResult = count > 1;
    var gotNumberResult = numberCount > 1;
    // we show count even if no numbers
    this.setAggregationComponentValue('count', count, gotResult);
    // show if numbers found
    this.setAggregationComponentValue('sum', sum, gotNumberResult);
    this.setAggregationComponentValue('min', min, gotNumberResult);
    this.setAggregationComponentValue('max', max, gotNumberResult);
    this.setAggregationComponentValue('avg', sum / numberCount, gotNumberResult);
  };
  AggregationComp.TEMPLATE = "<div class=\"ag-status-panel ag-status-panel-aggregations\">\n            <ag-name-value ref=\"avgAggregationComp\"></ag-name-value>\n            <ag-name-value ref=\"countAggregationComp\"></ag-name-value>\n            <ag-name-value ref=\"minAggregationComp\"></ag-name-value>\n            <ag-name-value ref=\"maxAggregationComp\"></ag-name-value>\n            <ag-name-value ref=\"sumAggregationComp\"></ag-name-value>\n        </div>";
  __decorate$1U([agGridCommunity.Optional('rangeController')], AggregationComp.prototype, "rangeController", void 0);
  __decorate$1U([agGridCommunity.Autowired('valueService')], AggregationComp.prototype, "valueService", void 0);
  __decorate$1U([agGridCommunity.Autowired('cellNavigationService')], AggregationComp.prototype, "cellNavigationService", void 0);
  __decorate$1U([agGridCommunity.Autowired('rowRenderer')], AggregationComp.prototype, "rowRenderer", void 0);
  __decorate$1U([agGridCommunity.Autowired('gridOptions')], AggregationComp.prototype, "gridOptions", void 0);
  __decorate$1U([agGridCommunity.Autowired('gridApi')], AggregationComp.prototype, "gridApi", void 0);
  __decorate$1U([agGridCommunity.Autowired('cellPositionUtils')], AggregationComp.prototype, "cellPositionUtils", void 0);
  __decorate$1U([agGridCommunity.Autowired('rowPositionUtils')], AggregationComp.prototype, "rowPositionUtils", void 0);
  __decorate$1U([agGridCommunity.RefSelector('sumAggregationComp')], AggregationComp.prototype, "sumAggregationComp", void 0);
  __decorate$1U([agGridCommunity.RefSelector('countAggregationComp')], AggregationComp.prototype, "countAggregationComp", void 0);
  __decorate$1U([agGridCommunity.RefSelector('minAggregationComp')], AggregationComp.prototype, "minAggregationComp", void 0);
  __decorate$1U([agGridCommunity.RefSelector('maxAggregationComp')], AggregationComp.prototype, "maxAggregationComp", void 0);
  __decorate$1U([agGridCommunity.RefSelector('avgAggregationComp')], AggregationComp.prototype, "avgAggregationComp", void 0);
  __decorate$1U([agGridCommunity.PostConstruct], AggregationComp.prototype, "postConstruct", null);
  return AggregationComp;
}(agGridCommunity.Component);
var StatusBarModule = {
  moduleName: agGridCommunity.ModuleNames.StatusBarModule,
  beans: [StatusBarService],
  agStackComponents: [{
    componentName: 'AgStatusBar',
    componentClass: StatusBar
  }, {
    componentName: 'AgNameValue',
    componentClass: NameValueComp
  }],
  userComponents: [{
    componentName: 'agAggregationComponent',
    componentClass: AggregationComp
  }, {
    componentName: 'agSelectedRowCountComponent',
    componentClass: SelectedRowsComp
  }, {
    componentName: 'agTotalRowCountComponent',
    componentClass: TotalRowsComp
  }, {
    componentName: 'agFilteredRowCountComponent',
    componentClass: FilteredRowsComp
  }, {
    componentName: 'agTotalAndFilteredRowCountComponent',
    componentClass: TotalAndFilteredRowsComp
  }],
  dependantModules: [EnterpriseCoreModule]
};
var __extends$34 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1V =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ViewportRowModel = /** @class */function (_super) {
  __extends$34(ViewportRowModel, _super);
  function ViewportRowModel() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    // rowRenderer tells us these
    _this.firstRow = -1;
    _this.lastRow = -1;
    // datasource tells us this
    _this.rowCount = -1;
    _this.rowNodesByIndex = {};
    return _this;
  }
  // we don't implement as lazy row heights is not supported in this row model
  ViewportRowModel.prototype.ensureRowHeightsValid = function (startPixel, endPixel, startLimitIndex, endLimitIndex) {
    return false;
  };
  ViewportRowModel.prototype.init = function () {
    this.rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();
    this.addManagedListener(this.eventService, agGridCommunity.Events.EVENT_VIEWPORT_CHANGED, this.onViewportChanged.bind(this));
  };
  ViewportRowModel.prototype.start = function () {
    if (this.gridOptionsWrapper.getViewportDatasource()) {
      this.setViewportDatasource(this.gridOptionsWrapper.getViewportDatasource());
    }
  };
  ViewportRowModel.prototype.isLastRowIndexKnown = function () {
    return true;
  };
  ViewportRowModel.prototype.destroyDatasource = function () {
    if (!this.viewportDatasource) {
      return;
    }
    if (this.viewportDatasource.destroy) {
      this.viewportDatasource.destroy();
    }
    this.rowRenderer.datasourceChanged();
    this.firstRow = -1;
    this.lastRow = -1;
  };
  ViewportRowModel.prototype.calculateFirstRow = function (firstRenderedRow) {
    var bufferSize = this.gridOptionsWrapper.getViewportRowModelBufferSize();
    var pageSize = this.gridOptionsWrapper.getViewportRowModelPageSize();
    var afterBuffer = firstRenderedRow - bufferSize;
    if (afterBuffer < 0) {
      return 0;
    }
    return Math.floor(afterBuffer / pageSize) * pageSize;
  };
  ViewportRowModel.prototype.calculateLastRow = function (lastRenderedRow) {
    if (lastRenderedRow === -1) {
      return lastRenderedRow;
    }
    var bufferSize = this.gridOptionsWrapper.getViewportRowModelBufferSize();
    var pageSize = this.gridOptionsWrapper.getViewportRowModelPageSize();
    var afterBuffer = lastRenderedRow + bufferSize;
    var result = Math.ceil(afterBuffer / pageSize) * pageSize;
    var lastRowIndex = this.rowCount - 1;
    return Math.min(result, lastRowIndex);
  };
  ViewportRowModel.prototype.onViewportChanged = function (event) {
    var newFirst = this.calculateFirstRow(event.firstRow);
    var newLast = this.calculateLastRow(event.lastRow);
    if (this.firstRow !== newFirst || this.lastRow !== newLast) {
      this.firstRow = newFirst;
      this.lastRow = newLast;
      this.purgeRowsNotInViewport();
      if (this.viewportDatasource) {
        this.viewportDatasource.setViewportRange(this.firstRow, this.lastRow);
      }
    }
  };
  ViewportRowModel.prototype.purgeRowsNotInViewport = function () {
    var _this = this;
    Object.keys(this.rowNodesByIndex).forEach(function (indexStr) {
      var index = parseInt(indexStr, 10);
      if (index < _this.firstRow || index > _this.lastRow) {
        delete _this.rowNodesByIndex[index];
      }
    });
  };
  ViewportRowModel.prototype.setViewportDatasource = function (viewportDatasource) {
    this.destroyDatasource();
    this.viewportDatasource = viewportDatasource;
    this.rowCount = 0;
    if (!viewportDatasource.init) {
      console.warn('AG Grid: viewport is missing init method.');
    } else {
      viewportDatasource.init({
        setRowCount: this.setRowCount.bind(this),
        setRowData: this.setRowData.bind(this),
        getRow: this.getRow.bind(this)
      });
    }
  };
  ViewportRowModel.prototype.getType = function () {
    return agGridCommunity.Constants.ROW_MODEL_TYPE_VIEWPORT;
  };
  ViewportRowModel.prototype.getRow = function (rowIndex) {
    if (!this.rowNodesByIndex[rowIndex]) {
      this.rowNodesByIndex[rowIndex] = this.createBlankRowNode(rowIndex);
    }
    return this.rowNodesByIndex[rowIndex];
  };
  ViewportRowModel.prototype.getRowNode = function (id) {
    var result = null;
    this.forEachNode(function (rowNode) {
      if (rowNode.id === id) {
        result = rowNode;
      }
    });
    return result;
  };
  ViewportRowModel.prototype.getRowCount = function () {
    return this.rowCount;
  };
  ViewportRowModel.prototype.getRowIndexAtPixel = function (pixel) {
    if (this.rowHeight !== 0) {
      // avoid divide by zero error
      return Math.floor(pixel / this.rowHeight);
    }
    return 0;
  };
  ViewportRowModel.prototype.getRowBounds = function (index) {
    return {
      rowHeight: this.rowHeight,
      rowTop: this.rowHeight * index
    };
  };
  ViewportRowModel.prototype.getTopLevelRowCount = function () {
    return this.getRowCount();
  };
  ViewportRowModel.prototype.getTopLevelRowDisplayedIndex = function (topLevelIndex) {
    return topLevelIndex;
  };
  ViewportRowModel.prototype.isEmpty = function () {
    return this.rowCount > 0;
  };
  ViewportRowModel.prototype.isRowsToRender = function () {
    return this.rowCount > 0;
  };
  ViewportRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {
    var firstIndex = agGridCommunity._.missing(firstInRange) ? 0 : firstInRange.rowIndex;
    var lastIndex = lastInRange.rowIndex;
    var firstNodeOutOfRange = firstIndex < this.firstRow || firstIndex > this.lastRow;
    var lastNodeOutOfRange = lastIndex < this.firstRow || lastIndex > this.lastRow;
    if (firstNodeOutOfRange || lastNodeOutOfRange) {
      return [];
    }
    var result = [];
    var startIndex = firstIndex <= lastIndex ? firstIndex : lastIndex;
    var endIndex = firstIndex <= lastIndex ? lastIndex : firstIndex;
    for (var i = startIndex; i <= endIndex; i++) {
      result.push(this.rowNodesByIndex[i]);
    }
    return result;
  };
  ViewportRowModel.prototype.forEachNode = function (callback) {
    var _this = this;
    var callbackCount = 0;
    Object.keys(this.rowNodesByIndex).forEach(function (indexStr) {
      var index = parseInt(indexStr, 10);
      var rowNode = _this.rowNodesByIndex[index];
      callback(rowNode, callbackCount);
      callbackCount++;
    });
  };
  ViewportRowModel.prototype.setRowData = function (rowData) {
    var _this = this;
    agGridCommunity._.iterateObject(rowData, function (indexStr, dataItem) {
      var index = parseInt(indexStr, 10);
      // we should never keep rows that we didn't specifically ask for, this
      // guarantees the contract we have with the server.
      if (index >= _this.firstRow && index <= _this.lastRow) {
        var rowNode = _this.rowNodesByIndex[index];
        // the abnormal case is we requested a row even though the grid didn't need it
        // as a result of the paging and buffer (ie the row is off screen), in which
        // case we need to create a new node now
        if (agGridCommunity._.missing(rowNode)) {
          rowNode = _this.createBlankRowNode(index);
          _this.rowNodesByIndex[index] = rowNode;
        }
        // now we deffo have a row node, so set in the details
        // if the grid already asked for this row (the normal case), then we would
        // of put a placeholder node in place.
        rowNode.setDataAndId(dataItem, index.toString());
      }
    });
  };
  ViewportRowModel.prototype.createBlankRowNode = function (rowIndex) {
    var rowNode = new agGridCommunity.RowNode();
    this.createBean(rowNode);
    rowNode.setRowHeight(this.rowHeight);
    rowNode.setRowTop(this.rowHeight * rowIndex);
    rowNode.setRowIndex(rowIndex);
    return rowNode;
  };
  ViewportRowModel.prototype.setRowCount = function (rowCount, keepRenderedRows) {
    if (keepRenderedRows === void 0) {
      keepRenderedRows = false;
    }
    if (rowCount === this.rowCount) {
      return;
    }
    this.rowCount = rowCount;
    var event = {
      type: agGridCommunity.Events.EVENT_MODEL_UPDATED,
      api: this.gridApi,
      columnApi: this.columnApi,
      newData: false,
      newPage: false,
      keepRenderedRows: keepRenderedRows,
      animate: false
    };
    this.eventService.dispatchEvent(event);
  };
  ViewportRowModel.prototype.isRowPresent = function (rowNode) {
    return false;
  };
  __decorate$1V([agGridCommunity.Autowired('gridApi')], ViewportRowModel.prototype, "gridApi", void 0);
  __decorate$1V([agGridCommunity.Autowired('columnApi')], ViewportRowModel.prototype, "columnApi", void 0);
  __decorate$1V([agGridCommunity.Autowired('rowRenderer')], ViewportRowModel.prototype, "rowRenderer", void 0);
  __decorate$1V([agGridCommunity.PostConstruct], ViewportRowModel.prototype, "init", null);
  __decorate$1V([agGridCommunity.PreDestroy], ViewportRowModel.prototype, "destroyDatasource", null);
  ViewportRowModel = __decorate$1V([agGridCommunity.Bean('rowModel')], ViewportRowModel);
  return ViewportRowModel;
}(agGridCommunity.BeanStub);
var ViewportRowModelModule = {
  moduleName: agGridCommunity.ModuleNames.ViewportRowModelModule,
  rowModels: {
    viewport: ViewportRowModel
  },
  dependantModules: [EnterpriseCoreModule]
};
var __extends$35 =  false || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1W =  false || function (decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ClipboardService = /** @class */function (_super) {
  __extends$35(ClipboardService, _super);
  function ClipboardService() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.navigatorApiFailed = false;
    return _this;
  }
  ClipboardService.prototype.registerGridCompController = function (gridCompController) {
    this.gridCompController = gridCompController;
  };
  ClipboardService.prototype.init = function () {
    this.logger = this.loggerFactory.create('ClipboardService');
    if (this.rowModel.getType() === agGridCommunity.Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
      this.clientSideRowModel = this.rowModel;
    }
  };
  ClipboardService.prototype.pasteFromClipboard = function () {
    var _this = this;
    this.logger.log('pasteFromClipboard');
    // Method 1 - native clipboard API, available in modern chrome browsers
    var allowNavigator = !this.gridOptionsWrapper.isSuppressClipboardApi();
    // Some browsers (Firefox) do not allow Web Applications to read from
    // the clipboard so verify if not only the ClipboardAPI is available,
    // but also if the `readText` method is public.
    if (allowNavigator && !this.navigatorApiFailed && navigator.clipboard && navigator.clipboard.readText) {
      navigator.clipboard.readText().then(this.processClipboardData.bind(this)).catch(function (e) {
        agGridCommunity._.doOnce(function () {
          console.warn(e);
          console.warn('AG Grid: Unable to use the Clipboard API (navigator.clipboard.readText()). ' + 'The reason why it could not be used has been logged in the previous line. ' + 'For this reason the grid has defaulted to using a workaround which doesn\'t perform as well. ' + 'Either fix why Clipboard API is blocked, OR stop this message from appearing by setting grid ' + 'property suppressClipboardApi=true (which will default the grid to using the workaround rather than the API');
        }, 'clipboardApiError');
        _this.navigatorApiFailed = true;
        _this.pasteFromClipboardLegacy();
      });
    } else {
      this.pasteFromClipboardLegacy();
    }
  };
  ClipboardService.prototype.pasteFromClipboardLegacy = function () {
    var _this = this;
    // Method 2 - if modern API fails, the old school hack
    this.executeOnTempElement(function (textArea) {
      return textArea.focus({
        preventScroll: true
      });
    }, function (element) {
      var data = element.value;
      _this.processClipboardData(data);
    });
  };
  ClipboardService.prototype.processClipboardData = function (data) {
    var _this = this;
    if (data == null) {
      return;
    }
    var parsedData = agGridCommunity._.stringToArray(data, this.gridOptionsWrapper.getClipboardDeliminator());
    var userFunc = this.gridOptionsWrapper.getProcessDataFromClipboardFunc();
    if (userFunc) {
      parsedData = userFunc({
        data: parsedData
      });
    }
    if (parsedData == null) {
      return;
    }
    if (this.gridOptionsWrapper.isSuppressLastEmptyLineOnPaste()) {
      this.removeLastLineIfBlank(parsedData);
    }
    var pasteOperation = function (cellsToFlash, updatedRowNodes, focusedCell, changedPath) {
      var rangeActive = _this.rangeController && _this.rangeController.isMoreThanOneCell();
      var pasteIntoRange = rangeActive && !_this.hasOnlyOneValueToPaste(parsedData);
      if (pasteIntoRange) {
        _this.pasteIntoActiveRange(parsedData, cellsToFlash, updatedRowNodes, changedPath);
      } else {
        _this.pasteStartingFromFocusedCell(parsedData, cellsToFlash, updatedRowNodes, focusedCell, changedPath);
      }
    };
    this.doPasteOperation(pasteOperation);
  };
  // common code to paste operations, e.g. paste to cell, paste to range, and copy range down
  ClipboardService.prototype.doPasteOperation = function (pasteOperationFunc) {
    var api = this.gridOptionsWrapper.getApi();
    var columnApi = this.gridOptionsWrapper.getColumnApi();
    var source = 'clipboard';
    this.eventService.dispatchEvent({
      type: agGridCommunity.Events.EVENT_PASTE_START,
      api: api,
      columnApi: columnApi,
      source: source
    });
    var changedPath;
    if (this.clientSideRowModel) {
      var onlyChangedColumns = this.gridOptionsWrapper.isAggregateOnlyChangedColumns();
      changedPath = new agGridCommunity.ChangedPath(onlyChangedColumns, this.clientSideRowModel.getRootNode());
    }
    var cellsToFlash = {};
    var updatedRowNodes = [];
    var focusedCell = this.focusController.getFocusedCell();
    pasteOperationFunc(cellsToFlash, updatedRowNodes, focusedCell, changedPath);
    if (changedPath) {
      this.clientSideRowModel.doAggregate(changedPath);
    }
    this.rowRenderer.refreshCells();
    this.dispatchFlashCells(cellsToFlash);
    this.fireRowChanged(updatedRowNodes);
    // if using the clipboard hack with a temp element, then the focus has been lost,
    // so need to put it back. otherwise paste operation loosed focus on cell and keyboard
    // navigation stops.
    if (focusedCell) {
      this.focusController.setFocusedCell(focusedCell.rowIndex, focusedCell.column, focusedCell.rowPinned, true);
    }
    this.eventService.dispatchEvent({
      type: agGridCommunity.Events.EVENT_PASTE_END,
      api: api,
      columnApi: columnApi,
      source: source
    });
  };
  ClipboardService.prototype.pasteIntoActiveRange = function (clipboardData, cellsToFlash, updatedRowNodes, changedPath) {
    var _this = this;
    // true if clipboard data can be evenly pasted into range, otherwise false
    var abortRepeatingPasteIntoRows = this.getRangeSize() % clipboardData.length != 0;
    var indexOffset = 0;
    var dataRowIndex = 0;
    var rowCallback = function (currentRow, rowNode, columns, index) {
      var atEndOfClipboardData = index - indexOffset >= clipboardData.length;
      if (atEndOfClipboardData) {
        if (abortRepeatingPasteIntoRows) {
          return;
        }
        // increment offset and reset data index to repeat paste of data
        indexOffset += dataRowIndex;
        dataRowIndex = 0;
      }
      var currentRowData = clipboardData[index - indexOffset];
      // otherwise we are not the first row, so copy
      updatedRowNodes.push(rowNode);
      var processCellFromClipboardFunc = _this.gridOptionsWrapper.getProcessCellFromClipboardFunc();
      columns.forEach(function (column, idx) {
        if (!column.isCellEditable(rowNode) || column.isSuppressPaste(rowNode)) {
          return;
        }
        // repeat data for columns we don't have data for - happens when to range is bigger than copied data range
        if (idx >= currentRowData.length) {
          idx = idx % currentRowData.length;
        }
        var newValue = _this.processCell(rowNode, column, currentRowData[idx], agGridCommunity.Constants.EXPORT_TYPE_DRAG_COPY, processCellFromClipboardFunc);
        _this.valueService.setValue(rowNode, column, newValue, agGridCommunity.Constants.SOURCE_PASTE);
        if (changedPath) {
          changedPath.addParentNode(rowNode.parent, [column]);
        }
        var cellId = _this.cellPositionUtils.createIdFromValues(currentRow.rowIndex, column, currentRow.rowPinned);
        cellsToFlash[cellId] = true;
      });
      dataRowIndex++;
    };
    this.iterateActiveRanges(false, rowCallback);
  };
  ClipboardService.prototype.pasteStartingFromFocusedCell = function (parsedData, cellsToFlash, updatedRowNodes, focusedCell, changedPath) {
    if (!focusedCell) {
      return;
    }
    var currentRow = {
      rowIndex: focusedCell.rowIndex,
      rowPinned: focusedCell.rowPinned
    };
    var columnsToPasteInto = this.columnController.getDisplayedColumnsStartingAt(focusedCell.column);
    if (this.isPasteSingleValueIntoRange(parsedData)) {
      this.pasteSingleValueIntoRange(parsedData, updatedRowNodes, cellsToFlash, changedPath);
    } else {
      this.pasteMultipleValues(parsedData, currentRow, updatedRowNodes, columnsToPasteInto, cellsToFlash, agGridCommunity.Constants.EXPORT_TYPE_CLIPBOARD, changedPath);
    }
  };
  // if range is active, and only one cell, then we paste this cell into all cells in the active range.
  ClipboardService.prototype.isPasteSingleValueIntoRange = function (parsedData) {
    return this.hasOnlyOneValueToPaste(parsedData) && this.rangeController != null && !this.rangeController.isEmpty();
  };
  ClipboardService.prototype.pasteSingleValueIntoRange = function (parsedData, updatedRowNodes, cellsToFlash, changedPath) {
    var _this = this;
    var value = parsedData[0][0];
    var rowCallback = function (currentRow, rowNode, columns) {
      updatedRowNodes.push(rowNode);
      columns.forEach(function (column) {
        return _this.updateCellValue(rowNode, column, value, cellsToFlash, agGridCommunity.Constants.EXPORT_TYPE_CLIPBOARD, changedPath);
      });
    };
    this.iterateActiveRanges(false, rowCallback);
  };
  ClipboardService.prototype.hasOnlyOneValueToPaste = function (parsedData) {
    return parsedData.length === 1 && parsedData[0].length === 1;
  };
  ClipboardService.prototype.copyRangeDown = function () {
    var _this = this;
    if (!this.rangeController || this.rangeController.isEmpty()) {
      return;
    }
    var firstRowValues = [];
    var pasteOperation = function (cellsToFlash, updatedRowNodes, focusedCell, changedPath) {
      var processCellForClipboardFunc = _this.gridOptionsWrapper.getProcessCellForClipboardFunc();
      var processCellFromClipboardFunc = _this.gridOptionsWrapper.getProcessCellFromClipboardFunc();
      var rowCallback = function (currentRow, rowNode, columns) {
        // take reference of first row, this is the one we will be using to copy from
        if (!firstRowValues.length) {
          // two reasons for looping through columns
          columns.forEach(function (column) {
            // get the initial values to copy down
            var value = _this.processCell(rowNode, column, _this.valueService.getValue(column, rowNode), agGridCommunity.Constants.EXPORT_TYPE_DRAG_COPY, processCellForClipboardFunc);
            firstRowValues.push(value);
          });
        } else {
          // otherwise we are not the first row, so copy
          updatedRowNodes.push(rowNode);
          columns.forEach(function (column, index) {
            if (!column.isCellEditable(rowNode) || column.isSuppressPaste(rowNode)) {
              return;
            }
            var firstRowValue = _this.processCell(rowNode, column, firstRowValues[index], agGridCommunity.Constants.EXPORT_TYPE_DRAG_COPY, processCellFromClipboardFunc);
            _this.valueService.setValue(rowNode, column, firstRowValue, agGridCommunity.Constants.SOURCE_PASTE);
            if (changedPath) {
              changedPath.addParentNode(rowNode.parent, [column]);
            }
            var cellId = _this.cellPositionUtils.createIdFromValues(currentRow.rowIndex, column, currentRow.rowPinned);
            cellsToFlash[cellId] = true;
          });
        }
      };
      _this.iterateActiveRanges(true, rowCallback);
    };
    this.doPasteOperation(pasteOperation);
  };
  ClipboardService.prototype.removeLastLineIfBlank = function (parsedData) {
    // remove last row if empty, excel puts empty last row in
    var lastLine = agGridCommunity._.last(parsedData);
    var lastLineIsBlank = lastLine && lastLine.length === 1 && lastLine[0] === '';
    if (lastLineIsBlank) {
      agGridCommunity._.removeFromArray(parsedData, lastLine);
    }
  };
  ClipboardService.prototype.fireRowChanged = function (rowNodes) {
    var _this = this;
    if (!this.gridOptionsWrapper.isFullRowEdit()) {
      return;
    }
    rowNodes.forEach(function (rowNode) {
      var event = {
        type: agGridCommunity.Events.EVENT_ROW_VALUE_CHANGED,
        node: rowNode,
        data: rowNode.data,
        rowIndex: rowNode.rowIndex,
        rowPinned: rowNode.rowPinned,
        context: _this.gridOptionsWrapper.getContext(),
        api: _this.gridOptionsWrapper.getApi(),
        columnApi: _this.gridOptionsWrapper.getColumnApi()
      };
      _this.eventService.dispatchEvent(event);
    });
  };
  ClipboardService.prototype.pasteMultipleValues = function (clipboardGridData, currentRow, updatedRowNodes, columnsToPasteInto, cellsToFlash, type, changedPath) {
    var _this = this;
    var rowPointer = currentRow;
    // if doing CSRM and NOT tree data, then it means groups are aggregates, which are read only,
    // so we should skip them when doing paste operations.
    var skipGroupRows = this.clientSideRowModel != null && !this.gridOptionsWrapper.isTreeData();
    var getNextGoodRowNode = function () {
      while (true) {
        if (!rowPointer) {
          return null;
        }
        var res = _this.rowPositionUtils.getRowNode(rowPointer);
        // move to next row down for next set of values
        rowPointer = _this.cellNavigationService.getRowBelow({
          rowPinned: rowPointer.rowPinned,
          rowIndex: rowPointer.rowIndex
        });
        // if no more rows, return null
        if (res == null) {
          return null;
        }
        // skip details rows and footer rows, never paste into them as they don't hold data
        var skipRow = res.detail || res.footer || skipGroupRows && res.group;
        // skipping row means we go into the next iteration of the while loop
        if (!skipRow) {
          return res;
        }
      }
    };
    clipboardGridData.forEach(function (clipboardRowData) {
      var rowNode = getNextGoodRowNode();
      // if we have come to end of rows in grid, then skip
      if (!rowNode) {
        return;
      }
      clipboardRowData.forEach(function (value, index) {
        return _this.updateCellValue(rowNode, columnsToPasteInto[index], value, cellsToFlash, type, changedPath);
      });
      updatedRowNodes.push(rowNode);
    });
  };
  ClipboardService.prototype.updateCellValue = function (rowNode, column, value, cellsToFlash, type, changedPath) {
    if (!rowNode || !column || !column.isCellEditable(rowNode) || column.isSuppressPaste(rowNode)) {
      return;
    }
    var processedValue = this.processCell(rowNode, column, value, type, this.gridOptionsWrapper.getProcessCellFromClipboardFunc());
    this.valueService.setValue(rowNode, column, processedValue, agGridCommunity.Constants.SOURCE_PASTE);
    var cellId = this.cellPositionUtils.createIdFromValues(rowNode.rowIndex, column, rowNode.rowPinned);
    cellsToFlash[cellId] = true;
    if (changedPath) {
      changedPath.addParentNode(rowNode.parent, [column]);
    }
  };
  ClipboardService.prototype.copyToClipboard = function (includeHeaders) {
    this.logger.log("copyToClipboard: includeHeaders = " + includeHeaders);
    // don't override 'includeHeaders' if it has been explicitly set to 'false'
    if (includeHeaders == null) {
      includeHeaders = this.gridOptionsWrapper.isCopyHeadersToClipboard();
    }
    var selectedRowsToCopy = !this.selectionController.isEmpty() && !this.gridOptionsWrapper.isSuppressCopyRowsToClipboard();
    // default is copy range if exists, otherwise rows
    if (this.rangeController && this.rangeController.isMoreThanOneCell()) {
      this.copySelectedRangeToClipboard(includeHeaders);
    } else if (selectedRowsToCopy) {
      // otherwise copy selected rows if they exist
      this.copySelectedRowsToClipboard(includeHeaders);
    } else if (this.focusController.isAnyCellFocused()) {
      // if there is a focused cell, copy this
      this.copyFocusedCellToClipboard(includeHeaders);
    } else {
      // lastly if no focused cell, try range again. this can happen
      // if use has cellSelection turned off (so no focused cell)
      // but has a cell clicked, so there exists a cell range
      // of exactly one cell (hence the first 'if' above didn't
      // get executed).
      this.copySelectedRangeToClipboard(includeHeaders);
    }
  };
  ClipboardService.prototype.iterateActiveRanges = function (onlyFirst, rowCallback, columnCallback) {
    var _this = this;
    if (!this.rangeController || this.rangeController.isEmpty()) {
      return;
    }
    var cellRanges = this.rangeController.getCellRanges();
    if (onlyFirst) {
      this.iterateActiveRange(cellRanges[0], rowCallback, columnCallback, true);
    } else {
      cellRanges.forEach(function (range, idx) {
        return _this.iterateActiveRange(range, rowCallback, columnCallback, idx === cellRanges.length - 1);
      });
    }
  };
  ClipboardService.prototype.iterateActiveRange = function (range, rowCallback, columnCallback, isLastRange) {
    if (!this.rangeController) {
      return;
    }
    var currentRow = this.rangeController.getRangeStartRow(range);
    var lastRow = this.rangeController.getRangeEndRow(range);
    if (columnCallback && range.columns) {
      columnCallback(range.columns);
    }
    var rangeIndex = 0;
    var isLastRow = false;
    // the currentRow could be missing if the user sets the active range manually, and sets a range
    // that is outside of the grid (eg. sets range rows 0 to 100, but grid has only 20 rows).
    while (!isLastRow && currentRow != null) {
      var rowNode = this.rowPositionUtils.getRowNode(currentRow);
      isLastRow = this.rowPositionUtils.sameRow(currentRow, lastRow);
      rowCallback(currentRow, rowNode, range.columns, rangeIndex++, isLastRow && isLastRange);
      currentRow = this.cellNavigationService.getRowBelow(currentRow);
    }
  };
  ClipboardService.prototype.copySelectedRangeToClipboard = function (includeHeaders) {
    var _this = this;
    if (includeHeaders === void 0) {
      includeHeaders = false;
    }
    if (!this.rangeController || this.rangeController.isEmpty()) {
      return;
    }
    var deliminator = this.gridOptionsWrapper.getClipboardDeliminator();
    var data = '';
    var cellsToFlash = {};
    // adds columns to the data
    var columnCallback = function (columns) {
      if (!includeHeaders) {
        return;
      }
      var processHeaderForClipboardFunc = _this.gridOptionsWrapper.getProcessHeaderForClipboardFunc();
      var columnNames = columns.map(function (column) {
        var name = _this.columnController.getDisplayNameForColumn(column, 'clipboard', true);
        return _this.processHeader(column, name, processHeaderForClipboardFunc) || '';
      });
      data += columnNames.join(deliminator) + '\r\n';
    };
    // adds cell values to the data
    var rowCallback = function (currentRow, rowNode, columns, _2, isLastRow) {
      var processCellForClipboardFunc = _this.gridOptionsWrapper.getProcessCellForClipboardFunc();
      columns.forEach(function (column, index) {
        var value = _this.valueService.getValue(column, rowNode);
        var processedValue = _this.processCell(rowNode, column, value, agGridCommunity.Constants.EXPORT_TYPE_CLIPBOARD, processCellForClipboardFunc);
        if (index != 0) {
          data += deliminator;
        }
        if (agGridCommunity._.exists(processedValue)) {
          data += processedValue;
        }
        var cellId = _this.cellPositionUtils.createIdFromValues(currentRow.rowIndex, column, currentRow.rowPinned);
        cellsToFlash[cellId] = true;
      });
      if (!isLastRow) {
        data += '\r\n';
      }
    };
    this.iterateActiveRanges(false, rowCallback, columnCallback);
    this.copyDataToClipboard(data);
    this.dispatchFlashCells(cellsToFlash);
  };
  ClipboardService.prototype.copyFocusedCellToClipboard = function (includeHeaders) {
    var _a;
    if (includeHeaders === void 0) {
      includeHeaders = false;
    }
    var focusedCell = this.focusController.getFocusedCell();
    if (focusedCell == null) {
      return;
    }
    var cellId = this.cellPositionUtils.createId(focusedCell);
    var currentRow = {
      rowPinned: focusedCell.rowPinned,
      rowIndex: focusedCell.rowIndex
    };
    var rowNode = this.rowPositionUtils.getRowNode(currentRow);
    var column = focusedCell.column;
    var value = this.valueService.getValue(column, rowNode);
    var processedValue = this.processCell(rowNode, column, value, agGridCommunity.Constants.EXPORT_TYPE_CLIPBOARD, this.gridOptionsWrapper.getProcessCellForClipboardFunc());
    processedValue = agGridCommunity._.missing(processedValue) ? '' : processedValue.toString();
    var data;
    if (includeHeaders) {
      var headerValue = this.columnController.getDisplayNameForColumn(column, 'clipboard', true);
      data = this.processHeader(column, headerValue, this.gridOptionsWrapper.getProcessHeaderForClipboardFunc()) + '\r\n' + processedValue;
    } else {
      data = processedValue;
    }
    this.copyDataToClipboard(data);
    this.dispatchFlashCells((_a = {}, _a[cellId] = true, _a));
  };
  ClipboardService.prototype.dispatchFlashCells = function (cellsToFlash) {
    var _this = this;
    window.setTimeout(function () {
      var event = {
        type: agGridCommunity.Events.EVENT_FLASH_CELLS,
        cells: cellsToFlash,
        api: _this.gridApi,
        columnApi: _this.columnApi
      };
      _this.eventService.dispatchEvent(event);
    }, 0);
  };
  ClipboardService.prototype.processCell = function (rowNode, column, value, type, func) {
    if (func) {
      var params = {
        column: column,
        node: rowNode,
        value: value,
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        context: this.gridOptionsWrapper.getContext(),
        type: type
      };
      return func(params);
    }
    return value;
  };
  ClipboardService.prototype.processHeader = function (column, value, func) {
    if (func) {
      var params = {
        column: column,
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        context: this.gridOptionsWrapper.getContext()
      };
      return func(params);
    }
    return value;
  };
  ClipboardService.prototype.copySelectedRowsToClipboard = function (includeHeaders, columnKeys) {
    if (includeHeaders === void 0) {
      includeHeaders = false;
    }
    var params = {
      columnKeys: columnKeys,
      skipColumnHeaders: !includeHeaders,
      suppressQuotes: true,
      columnSeparator: this.gridOptionsWrapper.getClipboardDeliminator(),
      onlySelected: true,
      processCellCallback: this.gridOptionsWrapper.getProcessCellForClipboardFunc(),
      processHeaderCallback: this.gridOptionsWrapper.getProcessHeaderForClipboardFunc()
    };
    var data = this.csvCreator.getDataAsCsv(params);
    this.copyDataToClipboard(data);
  };
  ClipboardService.prototype.copyDataToClipboard = function (data) {
    var _this = this;
    var userProvidedFunc = this.gridOptionsWrapper.getSendToClipboardFunc();
    // method 1 - user provided func
    if (userProvidedFunc) {
      userProvidedFunc({
        data: data
      });
      return;
    }
    // method 2 - native clipboard API, available in modern chrome browsers
    var allowNavigator = !this.gridOptionsWrapper.isSuppressClipboardApi();
    if (allowNavigator && navigator.clipboard) {
      navigator.clipboard.writeText(data).catch(function (e) {
        agGridCommunity._.doOnce(function () {
          console.warn(e);
          console.warn('AG Grid: Unable to use the Clipboard API (navigator.clipboard.writeText()). ' + 'The reason why it could not be used has been logged in the previous line. ' + 'For this reason the grid has defaulted to using a workaround which doesn\'t perform as well. ' + 'Either fix why Clipboard API is blocked, OR stop this message from appearing by setting grid ' + 'property suppressClipboardApi=true (which will default the grid to using the workaround rather than the API.');
        }, 'clipboardApiError');
        _this.copyDataToClipboardLegacy(data);
      });
      return;
    }
    this.copyDataToClipboardLegacy(data);
  };
  ClipboardService.prototype.copyDataToClipboardLegacy = function (data) {
    var _this = this;
    // method 3 - if all else fails, the old school hack
    this.executeOnTempElement(function (element) {
      var focusedElementBefore = _this.gridOptionsWrapper.getDocument().activeElement;
      element.value = data || ' '; // has to be non-empty value or execCommand will not do anything
      element.select();
      element.focus({
        preventScroll: true
      });
      var result = document.execCommand('copy');
      if (!result) {
        console.warn('ag-grid: Browser did not allow document.execCommand(\'copy\'). Ensure ' + 'api.copySelectedRowsToClipboard() is invoked via a user event, i.e. button click, otherwise ' + 'the browser will prevent it for security reasons.');
      }
      if (focusedElementBefore != null && focusedElementBefore.focus != null) {
        focusedElementBefore.focus({
          preventScroll: true
        });
      }
    });
  };
  ClipboardService.prototype.executeOnTempElement = function (callbackNow, callbackAfter) {
    var eDoc = this.gridOptionsWrapper.getDocument();
    var eTempInput = eDoc.createElement('textarea');
    eTempInput.style.width = '1px';
    eTempInput.style.height = '1px';
    // removing items from the DOM causes the document element to scroll to the
    // position where the element was positioned. Here we set scrollTop / scrollLeft
    // to prevent the document element from scrolling when we remove it from the DOM.
    eTempInput.style.top = eDoc.documentElement.scrollTop + 'px';
    eTempInput.style.left = eDoc.documentElement.scrollLeft + 'px';
    eTempInput.style.position = 'absolute';
    eTempInput.style.opacity = '0';
    var guiRoot = this.gridCompController.getGui();
    guiRoot.appendChild(eTempInput);
    try {
      callbackNow(eTempInput);
    } catch (err) {
      console.warn('ag-grid: Browser does not support document.execCommand(\'copy\') for clipboard operations');
    }
    //It needs 100 otherwise OS X seemed to not always be able to paste... Go figure...
    if (callbackAfter) {
      window.setTimeout(function () {
        callbackAfter(eTempInput);
        guiRoot.removeChild(eTempInput);
      }, 100);
    } else {
      guiRoot.removeChild(eTempInput);
    }
  };
  ClipboardService.prototype.getRangeSize = function () {
    var ranges = this.rangeController.getCellRanges();
    var startRangeIndex = 0;
    var endRangeIndex = 0;
    if (ranges.length > 0) {
      startRangeIndex = this.rangeController.getRangeStartRow(ranges[0]).rowIndex;
      endRangeIndex = this.rangeController.getRangeEndRow(ranges[0]).rowIndex;
    }
    return startRangeIndex - endRangeIndex + 1;
  };
  __decorate$1W([agGridCommunity.Autowired('csvCreator')], ClipboardService.prototype, "csvCreator", void 0);
  __decorate$1W([agGridCommunity.Autowired('loggerFactory')], ClipboardService.prototype, "loggerFactory", void 0);
  __decorate$1W([agGridCommunity.Autowired('selectionController')], ClipboardService.prototype, "selectionController", void 0);
  __decorate$1W([agGridCommunity.Optional('rangeController')], ClipboardService.prototype, "rangeController", void 0);
  __decorate$1W([agGridCommunity.Autowired('rowModel')], ClipboardService.prototype, "rowModel", void 0);
  __decorate$1W([agGridCommunity.Autowired('valueService')], ClipboardService.prototype, "valueService", void 0);
  __decorate$1W([agGridCommunity.Autowired('focusController')], ClipboardService.prototype, "focusController", void 0);
  __decorate$1W([agGridCommunity.Autowired('rowRenderer')], ClipboardService.prototype, "rowRenderer", void 0);
  __decorate$1W([agGridCommunity.Autowired('columnController')], ClipboardService.prototype, "columnController", void 0);
  __decorate$1W([agGridCommunity.Autowired('cellNavigationService')], ClipboardService.prototype, "cellNavigationService", void 0);
  __decorate$1W([agGridCommunity.Autowired('columnApi')], ClipboardService.prototype, "columnApi", void 0);
  __decorate$1W([agGridCommunity.Autowired('gridApi')], ClipboardService.prototype, "gridApi", void 0);
  __decorate$1W([agGridCommunity.Autowired('cellPositionUtils')], ClipboardService.prototype, "cellPositionUtils", void 0);
  __decorate$1W([agGridCommunity.Autowired('rowPositionUtils')], ClipboardService.prototype, "rowPositionUtils", void 0);
  __decorate$1W([agGridCommunity.PostConstruct], ClipboardService.prototype, "init", null);
  ClipboardService = __decorate$1W([agGridCommunity.Bean('clipboardService')], ClipboardService);
  return ClipboardService;
}(agGridCommunity.BeanStub);
var ClipboardModule = {
  moduleName: agGridCommunity.ModuleNames.ClipboardModule,
  beans: [ClipboardService],
  dependantModules: [EnterpriseCoreModule, CsvExportModule]
};
agGridCommunity.ModuleRegistry.register(ColumnsToolPanelModule, false);
agGridCommunity.ModuleRegistry.register(ExcelExportModule, false);
agGridCommunity.ModuleRegistry.register(FiltersToolPanelModule, false);
agGridCommunity.ModuleRegistry.register(GridChartsModule, false);
agGridCommunity.ModuleRegistry.register(MasterDetailModule, false);
agGridCommunity.ModuleRegistry.register(MenuModule, false);
agGridCommunity.ModuleRegistry.register(MultiFilterModule, false);
agGridCommunity.ModuleRegistry.register(RangeSelectionModule, false);
agGridCommunity.ModuleRegistry.register(RichSelectModule, false);
agGridCommunity.ModuleRegistry.register(RowGroupingModule, false);
agGridCommunity.ModuleRegistry.register(ServerSideRowModelModule, false);
agGridCommunity.ModuleRegistry.register(SetFilterModule, false);
agGridCommunity.ModuleRegistry.register(SideBarModule, false);
agGridCommunity.ModuleRegistry.register(StatusBarModule, false);
agGridCommunity.ModuleRegistry.register(ViewportRowModelModule, false);
agGridCommunity.ModuleRegistry.register(ClipboardModule, false);
Object.defineProperty(exports, "VirtualList", ({
  enumerable: true,
  get: function () {
    return agGridCommunity.VirtualList;
  }
}));
exports.LicenseManager = LicenseManager;
exports.SetFilter = SetFilter;
exports.exportMultipleSheetsAsExcel = exportMultipleSheetsAsExcel;
exports.getMultipleSheetsAsExcel = getMultipleSheetsAsExcel;

/***/ }),

/***/ 450023:
/*!*************!*\
  !*** tslib ***!
  \*************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__assign": () => (/* binding */ __assign),
/* harmony export */   "__asyncDelegator": () => (/* binding */ __asyncDelegator),
/* harmony export */   "__asyncGenerator": () => (/* binding */ __asyncGenerator),
/* harmony export */   "__asyncValues": () => (/* binding */ __asyncValues),
/* harmony export */   "__await": () => (/* binding */ __await),
/* harmony export */   "__awaiter": () => (/* binding */ __awaiter),
/* harmony export */   "__classPrivateFieldGet": () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   "__classPrivateFieldSet": () => (/* binding */ __classPrivateFieldSet),
/* harmony export */   "__createBinding": () => (/* binding */ __createBinding),
/* harmony export */   "__decorate": () => (/* binding */ __decorate),
/* harmony export */   "__exportStar": () => (/* binding */ __exportStar),
/* harmony export */   "__extends": () => (/* binding */ __extends),
/* harmony export */   "__generator": () => (/* binding */ __generator),
/* harmony export */   "__importDefault": () => (/* binding */ __importDefault),
/* harmony export */   "__importStar": () => (/* binding */ __importStar),
/* harmony export */   "__makeTemplateObject": () => (/* binding */ __makeTemplateObject),
/* harmony export */   "__metadata": () => (/* binding */ __metadata),
/* harmony export */   "__param": () => (/* binding */ __param),
/* harmony export */   "__read": () => (/* binding */ __read),
/* harmony export */   "__rest": () => (/* binding */ __rest),
/* harmony export */   "__spread": () => (/* binding */ __spread),
/* harmony export */   "__spreadArrays": () => (/* binding */ __spreadArrays),
/* harmony export */   "__values": () => (/* binding */ __values)
/* harmony export */ });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}

function __exportStar(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
}


/***/ })

}]);