"use strict";(self.webpackChunkpatient=self.webpackChunkpatient||[]).push([[428],{82011:(K,F,h)=>{h.d(F,{b:()=>W});var v=h(24280),y=h(60515),$=h(54004),S=h(18505),f=h(63900),N=h(11365),Q=h(70262),m=h(94650),R=h(73602),x=h(30144),D=h(71873),V=h(4523),L=h(56869),E=h(71767),C=h(39646);class P extends E.T_{constructor(r){super(),this.showRuleMessages=!0,this.hideRuleMessages=!1,this.actionName=r}Do(r){return this.businessProvider=r,this.serviceContext=r.serviceContext,this.loggingService=r.loggingService,this.execute(),this.response}}var g=h(26177);class I extends P{constructor(r,s,e,c,u){super("ValidateClaimExcelDataAction"),this.valid=!1,this.excelData=r,this.priorAuthorizationRequests=s,this.claims=e,this.explanationOfPayments=c,this.patients=u}preValidateAction(){const r=[];this.excelData.map((s,e)=>{r.push(s.name),this.validationContext.addRule(new g.mi(`priorAuthorizationRequestName_${e}_is_valid}`,"Prior Authorization Request Is Not Valid","priorAuthorizationRequest.name",s.priorAuthorizationRequest,this.priorAuthorizationRequests,!0)),this.validationContext.addRule(new g.mi(`claimName_${e}_is_valid}`,"Claim Is Not Valid","claim.name",s.claim,this.claims,!0)),this.validationContext.addRule(new g.mi(`explanationOfPaymentName_${e}_is_valid}`,"Explanation of Payment Is Not Valid","explanationOfPayment.name",s.explanationOfPayment,this.explanationOfPayments,!0)),this.validationContext.addRule(new g.mi(`patientName_${e}_is_valid}`,"Patient Is Not Valid","patient.name",s.patient,this.patients,!0))}),this.validationContext.addRule(new g.cL("nameIsUnique","Name should be unique",r,!0))}performAction(){}finish(){super.finish();const r={};let s=[];this.validationContext.hasRuleViolations()?(this.valid=!1,this.validationContext.rules.map(e=>{e instanceof g.mi?e.isValid||(r[e.columnName]?r[e.columnName].newNames.includes(e.newName)||r[e.columnName].newNames.push(e.newName):r[e.columnName]={options:e.possibleValueList.map(c=>c.name),newNames:[e.newName]}):e instanceof g.cL&&(e.isValid||(s=e.conflicts))})):this.valid=!0,this.response=(0,C.of)({valid:this.valid,excelData:this.excelData,conflictNames:s,unknownNames:r})}}var U=h(28234);class z extends g.wS{constructor(r,s,e,c,u){super(r,s,e,c,u,!0)}}class T extends g.ul{constructor(r,s,e,c=!1){super(r,s,c),this.displayToUser=!0,this.doNotDisplayToUser=!1,this.target=e,this.configureRules()}configureRules(){this.rules.push(new g.DJ("NotificationIsNotNull","The form message cannot be null or undefined.",this.target,this.doNotDisplayToUser)),this.rules.push(new z("name","The claim name is not valid. Must be within 2 and 255 characters.",this.target.name,2,255))}}class G extends P{constructor(r){super("CreateClaimAction"),this.input=r}preValidateAction(){this.validationContext.addRule(new T("InputIsNotNull","The input information is not valid.",this.input,this.showRuleMessages))}performAction(){this.response=this.businessProvider.data.userCreateClaim({input:this.input}).pipe((0,f.w)(r=>(0,U.of)(r.data.created)))}}class B extends P{constructor(r){super("UpdateClaimsAction"),this.claims=r}preValidateAction(){this.validationContext.addRule(new g.DJ("Input","Input should have values",this.claims,!0))}performAction(){this.response=this.businessProvider.data.userUpdateClaims({input:{claims:this.claims}}).pipe((0,f.w)(r=>(0,C.of)(r.data.updated)))}}class J extends P{constructor(r,s){super("UpdateClaimAction"),this.claim=r,this.claimId=s}preValidateAction(){this.validationContext.addRule(new g.DJ("Input","Input should have values",this.claim,!0)).addRule(new g.xF("Id","Id should be a CUID and not null",this.claimId,!0))}performAction(){this.response=this.businessProvider.data.userUpdateClaim({claimId:this.claimId,input:this.claim}).pipe((0,f.w)(r=>(0,C.of)(r.data.updated)))}}let j=(()=>{class l extends E.nH{constructor(s,e,c){super("NotificationService.ClaimBusinessProviderService",s,c),this.data=e}createClaim(s){const e=new G(s);return e.Do(this),e.response}updateClaim(s,e){const c=new J(s,e);return c.Do(this),c.response}importClaims(s){const e=new B(s);return e.Do(this),e.response}validateClaimExcelData(s,e,c,u,b){const M=new I(s,e,c,u,b);return M.Do(this),M.response}}return l.\u0275fac=function(s){return new(s||l)(m.LFG(L.ed),m.LFG(R.q),m.LFG(E.oI))},l.\u0275prov=m.Yz7({token:l,factory:l.\u0275fac,providedIn:"root"}),l})(),w=(()=>{class l extends E.nH{constructor(s,e,c){super("ClaimService",c,s),this.businessProvider=e}createClaim(s){const e=Object.fromEntries(Object.entries(s).filter(([c,u])=>null!==u));return this.businessProvider.createClaim(e)}updateClaim(s,e){return this.businessProvider.updateClaim(s,e)}importClaims(s){return this.businessProvider.importClaims(s)}validateClaimExcelData(s,e,c,u,b){return this.businessProvider.validateClaimExcelData(s,e,c,u,b)}}return l.\u0275fac=function(s){return new(s||l)(m.LFG(j,8),m.LFG(j),m.LFG(L.ed))},l.\u0275prov=m.Yz7({token:l,factory:l.\u0275fac,providedIn:"root"}),l})(),W=(()=>{class l extends v.m1{constructor(s,e,c,u,b,M){if(super({loading:!1,claims:[],done:!1,searchQuery:"",formName:void 0,priorAuthorizationRequestId:void 0,claimId:void 0,explanationOfPaymentId:void 0,patientId:void 0,paging:{limit:1e4,skip:0}}),this.data=s,this.router=e,this.route=c,this.toast=u,this.formService=b,this.claimService=M,this.errors$=this.select(t=>t.errors),this.loading$=this.select(t=>t.loading),this.done$=this.select(t=>t.done),this.item$=this.select(t=>t.item),this.claims$=this.select(t=>t.claims),this.priorAuthorizationRequests$=this.select(t=>t.priorAuthorizationRequests||[]),this.documents$=this.select(t=>t.documents||[]),this.patients$=this.select(t=>t.patients||[]),this.priorAuthorizationRequestId$=this.select(t=>t.priorAuthorizationRequestId),this.claimId$=this.select(t=>t.claimId),this.explanationOfPaymentId$=this.select(t=>t.explanationOfPaymentId),this.patientId$=this.select(t=>t.patientId),this.paging$=this.select(t=>t.paging),this.searchQuery$=this.select(t=>t.searchQuery),this.formName$=this.select(t=>t.formName),this.actionResult$=this.select(this.item$,this.done$,(t,a)=>({item:t,done:a}),{debounce:!0}),this.vm$=this.select(this.errors$,this.loading$,this.item$,this.formName$,this.claims$,this.priorAuthorizationRequests$,this.documents$,this.patients$,(t,a,d,p,O,A,H,X)=>({errors:t,loading:a,item:d,formName:p,claims:O,priorAuthorizationRequests:A,documents:H,patients:X}),{debounce:!0}),this.input$=this.select(this.paging$,this.priorAuthorizationRequestId$,this.claimId$,this.explanationOfPaymentId$,this.patientId$,this.searchQuery$,(t,a,d,p,O,A)=>({limit:t.limit,skip:t.skip,name:A,priorAuthorizationRequestId:a,claimId:d,explanationOfPaymentId:p,patientId:O,total:t.total})),this.setFormName=this.updater((t,a)=>Object.assign(Object.assign({},t),{formName:a})),this.setPriorAuthorizationRequestId=this.updater((t,a)=>Object.assign(Object.assign({},t),{priorAuthorizationRequestId:a})),this.setClaimId=this.updater((t,a)=>Object.assign(Object.assign({},t),{claimId:a})),this.setExplanationOfPaymentId=this.updater((t,a)=>Object.assign(Object.assign({},t),{explanationOfPaymentId:a})),this.setPatientId=this.updater((t,a)=>Object.assign(Object.assign({},t),{patientId:a})),this.filterPriorAuthorizationRequests=t=>this.data.userSelectPriorAuthorizationRequests({input:{name:t}}).pipe((0,v._b)(a=>{let d=a.data.items;return this.patchState({priorAuthorizationRequests:d}),d},a=>this.patchState({errors:a.graphQLErrors?a.graphQLErrors:a})),(0,$.U)(a=>a.data.items)),this.filterDocuments=t=>this.data.userSelectDocuments({input:{name:t}}).pipe((0,v._b)(a=>{let d=a.data.items;return this.patchState({documents:d}),d},a=>this.patchState({errors:a.graphQLErrors?a.graphQLErrors:a})),(0,$.U)(a=>a.data.items)),this.filterPatients=t=>this.data.userSelectPatients({input:{name:t}}).pipe((0,v._b)(a=>{let d=a.data.items;return this.patchState({patients:d}),d},a=>this.patchState({errors:a.graphQLErrors?a.graphQLErrors:a})),(0,$.U)(a=>a.data.items)),this.addPriorAuthorizationRequest=this.updater((t,a)=>Object.assign(Object.assign({},t),{priorAuthorizationRequests:t.priorAuthorizationRequests.concat(a)})),this.addDocument=this.updater((t,a)=>Object.assign(Object.assign({},t),{documents:t.documents.concat(a)})),this.addPatient=this.updater((t,a)=>Object.assign(Object.assign({},t),{patients:t.patients.concat(a)})),this.setItem=this.updater((t,a)=>Object.assign(Object.assign({},t),{item:a})),this.addNewClaim=this.updater((t,a)=>Object.assign(Object.assign({},t),{claims:[...t.claims,a]})),this.updateClaim=this.updater((t,a)=>Object.assign(Object.assign({},t),{claims:t.claims.map(d=>d.id===a.id?a:d)})),this.addClaims=this.updater((t,a)=>Object.assign(Object.assign({},t),{claims:t.claims.concat(a)})),this.updateClaims=this.updater((t,a)=>Object.assign(Object.assign({},t),{claims:t.claims.map(d=>a.find(O=>O.id===d.id)||d)})),this.setSearchQuery=this.updater((t,a)=>Object.assign(Object.assign({},t),{searchQuery:a})),this.loadClaimEffect=this.effect(t=>t.pipe((0,S.b)(()=>this.patchState({loading:!0})),(0,f.w)(a=>this.data.userClaim({claimId:a}).pipe((0,v._b)(d=>{this.patchState({item:d.data.item,errors:d.errors,loading:!1})},d=>this.patchState({loading:!1,errors:d.graphQLErrors?d.graphQLErrors:d})))))),this.loadClaimsEffect=this.effect(t=>t.pipe((0,S.b)(()=>this.patchState({loading:!0})),(0,N.M)(this.input$),(0,f.w)(([a,d])=>this.data.userClaims({input:d}).pipe((0,v._b)(p=>this.patchState({paging:{limit:d.limit,skip:d.skip,total:p.data.count.total},claims:p.data.items,errors:p.errors,loading:!1}),p=>this.patchState({loading:!1,errors:p.graphQLErrors?p.graphQLErrors:p})))))),this.createClaimEffect=this.effect(t=>t.pipe((0,S.b)(()=>this.patchState({loading:!0})),(0,f.w)(a=>this.claimService.createClaim(Object.assign({},a)).pipe((0,v._b)(d=>{this.addNewClaim(d),this.toast.success("Created Successfully!"),setTimeout(()=>this.patchState({item:d,loading:!1,done:!0}),300),setTimeout(()=>this.patchState({done:!1,item:null}),600)},d=>{d.graphQLErrors?(this.toast.error(d.graphQLErrors[0].message,{duration:3e3}),this.patchState({loading:!1,errors:d.graphQLErrors?d.graphQLErrors:d})):(this.toast.error(d.Message),this.formService.setErrors(d.Data))}))))),this.updateClaimEffect=this.effect(t=>t.pipe((0,S.b)(()=>this.patchState({loading:!0})),(0,N.M)(this.item$),(0,f.w)(([a,d])=>this.claimService.updateClaim(a,a.id).pipe((0,v._b)(p=>{this.updateClaim(p),this.toast.success("Updated Successfully!"),setTimeout(()=>this.patchState({item:p,loading:!1,done:!0}),300),setTimeout(()=>this.patchState({done:!1,item:null}),600)},p=>{p.graphQLErrors?(this.toast.error(p.graphQLErrors[0].message,{duration:3e3}),this.patchState({loading:!1,errors:p.graphQLErrors?p.graphQLErrors:p})):(this.toast.error(p.Message),this.formService.setErrors(p.Data))}))))),this.deleteClaimEffect=this.effect(t=>t.pipe((0,S.b)(()=>this.patchState({loading:!0})),(0,N.M)(this.item$),(0,f.w)(([a,d])=>this.data.userDeleteClaim({claimId:d.id}).pipe((0,v._b)(p=>{this.toast.success("Deleted successfully!",{duration:3e3}),setTimeout(()=>this.patchState({item:p.data.deleted,loading:!1,done:!0}),300),setTimeout(()=>this.patchState({done:!1,item:null}),600)},p=>{p.graphQLErrors?(this.toast.error(p.graphQLErrors[0].message,{duration:3e3}),this.patchState({loading:!1,errors:p.graphQLErrors?p.graphQLErrors:p})):(this.toast.error(p.Message),this.formService.setErrors(p.Data))}))))),this.importExcelEffect=this.effect(t=>t.pipe((0,S.b)(()=>this.patchState({loading:!0})),(0,f.w)(a=>this.claimService.importClaims(a).pipe((0,Q.K)(d=>{var p;return this.toast.error(null!==(p=d.Message)&&void 0!==p?p:"Failed to save",{duration:3e3}),y.E}),(0,S.b)(d=>{const p=JSON.parse(d.created),O=JSON.parse(d.updated),A=JSON.parse(d.failed),H=p.length+O.length+A.length;this.addClaims(p),this.updateClaims(O),this.toast.success(`${p.length} created, ${O.length} updated, ${A.length} failed of total ${H}`,{duration:3e3})}))))),this.route.snapshot.paramMap.has("claimId")){var Y=this.route.snapshot.paramMap.get("claimId");this.setFormName("claim_edit")}else this.setFormName("claim_create");if(this.route.snapshot.paramMap.has("priorAuthorizationRequestId")){var o=this.route.snapshot.paramMap.get("priorAuthorizationRequestId");this.setPriorAuthorizationRequestId(o)}if(this.route.snapshot.paramMap.has("claimId")&&(Y=this.route.snapshot.paramMap.get("claimId"),this.setClaimId(Y)),this.route.snapshot.paramMap.has("explanationOfPaymentId")){var i=this.route.snapshot.paramMap.get("explanationOfPaymentId");this.setExplanationOfPaymentId(i)}if(this.route.snapshot.paramMap.has("patientId")){var n=this.route.snapshot.paramMap.get("patientId");this.setPatientId(n)}}validateImportData(s){return this.vm$.pipe((0,f.w)(e=>this.claimService.validateClaimExcelData(s,e.priorAuthorizationRequests,e.documents,e.documents,e.patients)))}}return l.\u0275fac=function(s){return new(s||l)(m.LFG(R.q),m.LFG(x.F0),m.LFG(x.gz),m.LFG(D.F),m.LFG(V.o),m.LFG(w))},l.\u0275prov=m.Yz7({token:l,factory:l.\u0275fac}),l})()},6506:(K,F,h)=>{h.d(F,{t:()=>W});var v=h(24280),y=h(60515),$=h(54004),S=h(18505),f=h(63900),N=h(11365),Q=h(70262),m=h(94650),R=h(73602),x=h(30144),D=h(71873),V=h(4523),L=h(56869),E=h(71767),C=h(39646);class P extends E.T_{constructor(r){super(),this.showRuleMessages=!0,this.hideRuleMessages=!1,this.actionName=r}Do(r){return this.businessProvider=r,this.serviceContext=r.serviceContext,this.loggingService=r.loggingService,this.execute(),this.response}}var g=h(26177);class I extends P{constructor(r,s){super("ValidateMedicalRecordExcelDataAction"),this.valid=!1,this.excelData=r,this.clinicalProviders=s}preValidateAction(){const r=[];this.excelData.map((s,e)=>{r.push(s.name),this.validationContext.addRule(new g.mi(`clinicalProviderName_${e}_is_valid}`,"Clinical Provider Is Not Valid","clinicalProvider.name",s.clinicalProvider,this.clinicalProviders,!0))}),this.validationContext.addRule(new g.cL("nameIsUnique","Name should be unique",r,!0))}performAction(){}finish(){super.finish();const r={};let s=[];this.validationContext.hasRuleViolations()?(this.valid=!1,this.validationContext.rules.map(e=>{e instanceof g.mi?e.isValid||(r[e.columnName]?r[e.columnName].newNames.includes(e.newName)||r[e.columnName].newNames.push(e.newName):r[e.columnName]={options:e.possibleValueList.map(c=>c.name),newNames:[e.newName]}):e instanceof g.cL&&(e.isValid||(s=e.conflicts))})):this.valid=!0,this.response=(0,C.of)({valid:this.valid,excelData:this.excelData,conflictNames:s,unknownNames:r})}}var U=h(28234);class z extends g.wS{constructor(r,s,e,c,u){super(r,s,e,c,u,!0)}}class T extends g.ul{constructor(r,s,e,c=!1){super(r,s,c),this.displayToUser=!0,this.doNotDisplayToUser=!1,this.target=e,this.configureRules()}configureRules(){this.rules.push(new g.DJ("NotificationIsNotNull","The form message cannot be null or undefined.",this.target,this.doNotDisplayToUser)),this.rules.push(new z("name","The medicalrecord name is not valid. Must be within 2 and 255 characters.",this.target.name,2,255))}}class G extends P{constructor(r){super("CreateMedicalRecordAction"),this.input=r}preValidateAction(){this.validationContext.addRule(new T("InputIsNotNull","The input information is not valid.",this.input,this.showRuleMessages))}performAction(){this.response=this.businessProvider.data.userCreateMedicalRecord({input:this.input}).pipe((0,f.w)(r=>(0,U.of)(r.data.created)))}}class B extends P{constructor(r){super("UpdateMedicalRecordsAction"),this.medicalRecords=r}preValidateAction(){this.validationContext.addRule(new g.DJ("Input","Input should have values",this.medicalRecords,!0))}performAction(){this.response=this.businessProvider.data.userUpdateMedicalRecords({input:{medicalRecords:this.medicalRecords}}).pipe((0,f.w)(r=>(0,C.of)(r.data.updated)))}}class J extends P{constructor(r,s){super("UpdateMedicalRecordAction"),this.medicalRecord=r,this.medicalRecordId=s}preValidateAction(){this.validationContext.addRule(new g.DJ("Input","Input should have values",this.medicalRecord,!0)).addRule(new g.xF("Id","Id should be a CUID and not null",this.medicalRecordId,!0))}performAction(){this.response=this.businessProvider.data.userUpdateMedicalRecord({medicalRecordId:this.medicalRecordId,input:this.medicalRecord}).pipe((0,f.w)(r=>(0,C.of)(r.data.updated)))}}let j=(()=>{class l extends E.nH{constructor(s,e,c){super("NotificationService.MedicalRecordBusinessProviderService",s,c),this.data=e}createMedicalRecord(s){const e=new G(s);return e.Do(this),e.response}updateMedicalRecord(s,e){const c=new J(s,e);return c.Do(this),c.response}importMedicalRecords(s){const e=new B(s);return e.Do(this),e.response}validateMedicalRecordExcelData(s,e){const c=new I(s,e);return c.Do(this),c.response}}return l.\u0275fac=function(s){return new(s||l)(m.LFG(L.ed),m.LFG(R.q),m.LFG(E.oI))},l.\u0275prov=m.Yz7({token:l,factory:l.\u0275fac,providedIn:"root"}),l})(),w=(()=>{class l extends E.nH{constructor(s,e,c){super("MedicalRecordService",c,s),this.businessProvider=e}createMedicalRecord(s){const e=Object.fromEntries(Object.entries(s).filter(([c,u])=>null!==u));return this.businessProvider.createMedicalRecord(e)}updateMedicalRecord(s,e){return this.businessProvider.updateMedicalRecord(s,e)}importMedicalRecords(s){return this.businessProvider.importMedicalRecords(s)}validateMedicalRecordExcelData(s,e){return this.businessProvider.validateMedicalRecordExcelData(s,e)}}return l.\u0275fac=function(s){return new(s||l)(m.LFG(j,8),m.LFG(j),m.LFG(L.ed))},l.\u0275prov=m.Yz7({token:l,factory:l.\u0275fac,providedIn:"root"}),l})(),W=(()=>{class l extends v.m1{constructor(s,e,c,u,b,M){if(super({loading:!1,medicalRecords:[],done:!1,searchQuery:"",formName:void 0,clinicalProviderId:void 0,dateFilter:void 0,paging:{limit:1e4,skip:0}}),this.data=s,this.router=e,this.route=c,this.toast=u,this.formService=b,this.medicalRecordService=M,this.errors$=this.select(i=>i.errors),this.loading$=this.select(i=>i.loading),this.done$=this.select(i=>i.done),this.item$=this.select(i=>i.item),this.medicalRecords$=this.select(i=>i.medicalRecords),this.clinicalProviders$=this.select(i=>i.clinicalProviders||[]),this.dateFilter$=this.select(i=>i.dateFilter),this.clinicalProviderId$=this.select(i=>i.clinicalProviderId),this.paging$=this.select(i=>i.paging),this.searchQuery$=this.select(i=>i.searchQuery),this.formName$=this.select(i=>i.formName),this.actionResult$=this.select(this.item$,this.done$,(i,n)=>({item:i,done:n}),{debounce:!0}),this.vm$=this.select(this.errors$,this.loading$,this.item$,this.formName$,this.medicalRecords$,this.clinicalProviders$,(i,n,t,a,d,p)=>({errors:i,loading:n,item:t,formName:a,medicalRecords:d,clinicalProviders:p}),{debounce:!0}),this.input$=this.select(this.paging$,this.clinicalProviderId$,this.searchQuery$,this.dateFilter$,(i,n,t,a)=>({limit:i.limit,skip:i.skip,name:t,clinicalProviderId:n,dateFilter:a,total:i.total})),this.setFormName=this.updater((i,n)=>Object.assign(Object.assign({},i),{formName:n})),this.setDateFilter=this.updater((i,n)=>Object.assign(Object.assign({},i),{dateFilter:n})),this.setClinicalProviderId=this.updater((i,n)=>Object.assign(Object.assign({},i),{clinicalProviderId:n})),this.setSkip=this.updater((i,n)=>Object.assign(Object.assign({},i),{paging:Object.assign(Object.assign({},i.paging),{skip:n})})),this.setLimit=this.updater((i,n)=>Object.assign(Object.assign({},i),{paging:Object.assign(Object.assign({},i.paging),{limit:n})})),this.filterClinicalProviders=i=>this.data.userSelectClinicalProviders({input:{name:i}}).pipe((0,v._b)(n=>{let t=n.data.items;return this.patchState({clinicalProviders:t}),t},n=>this.patchState({errors:n.graphQLErrors?n.graphQLErrors:n})),(0,$.U)(n=>n.data.items)),this.addClinicalProvider=this.updater((i,n)=>Object.assign(Object.assign({},i),{clinicalProviders:i.clinicalProviders.concat(n)})),this.setItem=this.updater((i,n)=>Object.assign(Object.assign({},i),{item:n})),this.addNewMedicalRecord=this.updater((i,n)=>Object.assign(Object.assign({},i),{medicalRecords:[...i.medicalRecords,n]})),this.updateMedicalRecord=this.updater((i,n)=>Object.assign(Object.assign({},i),{medicalRecords:i.medicalRecords.map(t=>t.id===n.id?n:t)})),this.addMedicalRecords=this.updater((i,n)=>Object.assign(Object.assign({},i),{medicalRecords:i.medicalRecords.concat(n)})),this.updateMedicalRecords=this.updater((i,n)=>Object.assign(Object.assign({},i),{medicalRecords:i.medicalRecords.map(t=>n.find(d=>d.id===t.id)||t)})),this.setSearchQuery=this.updater((i,n)=>Object.assign(Object.assign({},i),{searchQuery:n})),this.loadMedicalRecordEffect=this.effect(i=>i.pipe((0,S.b)(()=>this.patchState({loading:!0})),(0,f.w)(n=>this.data.userMedicalRecord({medicalRecordId:n}).pipe((0,v._b)(t=>{this.patchState({item:t.data.item,errors:t.errors,loading:!1})},t=>this.patchState({loading:!1,errors:t.graphQLErrors?t.graphQLErrors:t})))))),this.loadMedicalRecordsEffect=this.effect(i=>i.pipe((0,S.b)(()=>this.patchState({loading:!0})),(0,N.M)(this.input$),(0,f.w)(([n,t])=>this.data.userMedicalRecords({input:t}).pipe((0,v._b)(a=>this.patchState({paging:{limit:t.limit,skip:t.skip,total:a.data.count.total},medicalRecords:a.data.items,errors:a.errors,loading:!1}),a=>this.patchState({loading:!1,errors:a.graphQLErrors?a.graphQLErrors:a})))))),this.createMedicalRecordEffect=this.effect(i=>i.pipe((0,S.b)(()=>this.patchState({loading:!0})),(0,f.w)(n=>this.medicalRecordService.createMedicalRecord(Object.assign({},n)).pipe((0,v._b)(t=>{this.addNewMedicalRecord(t),this.toast.success("Created Successfully!"),setTimeout(()=>this.patchState({item:t,loading:!1,done:!0}),300),setTimeout(()=>this.patchState({done:!1,item:null}),600)},t=>{t.graphQLErrors?(this.toast.error(t.graphQLErrors[0].message,{duration:3e3}),this.patchState({loading:!1,errors:t.graphQLErrors?t.graphQLErrors:t})):(this.toast.error(t.Message),this.formService.setErrors(t.Data))}))))),this.updateMedicalRecordEffect=this.effect(i=>i.pipe((0,S.b)(()=>this.patchState({loading:!0})),(0,N.M)(this.item$),(0,f.w)(([n,t])=>this.medicalRecordService.updateMedicalRecord(n,n.id).pipe((0,v._b)(a=>{this.updateMedicalRecord(a),this.toast.success("Updated Successfully!"),setTimeout(()=>this.patchState({item:a,loading:!1,done:!0}),300),setTimeout(()=>this.patchState({done:!1,item:null}),600)},a=>{a.graphQLErrors?(this.toast.error(a.graphQLErrors[0].message,{duration:3e3}),this.patchState({loading:!1,errors:a.graphQLErrors?a.graphQLErrors:a})):(this.toast.error(a.Message),this.formService.setErrors(a.Data))}))))),this.deleteMedicalRecordEffect=this.effect(i=>i.pipe((0,S.b)(()=>this.patchState({loading:!0})),(0,N.M)(this.item$),(0,f.w)(([n,t])=>this.data.userDeleteMedicalRecord({medicalRecordId:t.id}).pipe((0,v._b)(a=>{this.toast.success("Deleted successfully!",{duration:3e3}),setTimeout(()=>this.patchState({item:a.data.deleted,loading:!1,done:!0}),300),setTimeout(()=>this.patchState({done:!1,item:null}),600)},a=>{a.graphQLErrors?(this.toast.error(a.graphQLErrors[0].message,{duration:3e3}),this.patchState({loading:!1,errors:a.graphQLErrors?a.graphQLErrors:a})):(this.toast.error(a.Message),this.formService.setErrors(a.Data))}))))),this.importExcelEffect=this.effect(i=>i.pipe((0,S.b)(()=>this.patchState({loading:!0})),(0,f.w)(n=>this.medicalRecordService.importMedicalRecords(n).pipe((0,Q.K)(t=>{var a;return this.toast.error(null!==(a=t.Message)&&void 0!==a?a:"Failed to save",{duration:3e3}),y.E}),(0,S.b)(t=>{const a=JSON.parse(t.created),d=JSON.parse(t.updated),p=JSON.parse(t.failed),O=a.length+d.length+p.length;this.addMedicalRecords(a),this.updateMedicalRecords(d),this.toast.success(`${a.length} created, ${d.length} updated, ${p.length} failed of total ${O}`,{duration:3e3})}))))),this.route.snapshot.paramMap.has("medicalRecordId")?(this.route.snapshot.paramMap.get("medicalRecordId"),this.setFormName("medicalRecord_edit")):this.setFormName("medicalRecord_create"),this.route.snapshot.paramMap.has("clinicalProviderId")){var o=this.route.snapshot.paramMap.get("clinicalProviderId");this.setClinicalProviderId(o)}}validateImportData(s){return this.vm$.pipe((0,f.w)(e=>this.medicalRecordService.validateMedicalRecordExcelData(s,e.clinicalProviders)))}}return l.\u0275fac=function(s){return new(s||l)(m.LFG(R.q),m.LFG(x.F0),m.LFG(x.gz),m.LFG(D.F),m.LFG(V.o),m.LFG(w))},l.\u0275prov=m.Yz7({token:l,factory:l.\u0275fac}),l})()},96236:(K,F,h)=>{h.d(F,{r:()=>l});var v=h(24280),y=h(60515),$=h(54004),S=h(18505),f=h(63900),N=h(11365),Q=h(70262),m=h(15439),R=h(94650),x=h(73602),D=h(30144),V=h(71873),L=h(4523),E=h(56869),C=h(71767),P=h(39646);class g extends C.T_{constructor(s){super(),this.showRuleMessages=!0,this.hideRuleMessages=!1,this.actionName=s}Do(s){return this.businessProvider=s,this.serviceContext=s.serviceContext,this.loggingService=s.loggingService,this.execute(),this.response}}var I=h(26177);class U extends g{constructor(s,e,c){super("ValidatePrescriptionExcelDataAction"),this.valid=!1,this.excelData=s,this.patients=e,this.documents=c}preValidateAction(){const s=[];this.excelData.map((e,c)=>{s.push(e.name),this.validationContext.addRule(new I.mi(`patientName_${c}_is_valid}`,"Patient Is Not Valid","patient.name",e.patient,this.patients,!0)),this.validationContext.addRule(new I.mi(`documentName_${c}_is_valid}`,"Document Is Not Valid","document.name",e.document,this.documents,!0))}),this.validationContext.addRule(new I.cL("nameIsUnique","Name should be unique",s,!0))}performAction(){}finish(){super.finish();const s={};let e=[];this.validationContext.hasRuleViolations()?(this.valid=!1,this.validationContext.rules.map(c=>{c instanceof I.mi?c.isValid||(s[c.columnName]?s[c.columnName].newNames.includes(c.newName)||s[c.columnName].newNames.push(c.newName):s[c.columnName]={options:c.possibleValueList.map(u=>u.name),newNames:[c.newName]}):c instanceof I.cL&&(c.isValid||(e=c.conflicts))})):this.valid=!0,this.response=(0,P.of)({valid:this.valid,excelData:this.excelData,conflictNames:e,unknownNames:s})}}var z=h(28234);class T extends I.wS{constructor(s,e,c,u,b){super(s,e,c,u,b,!0)}}class G extends I.ul{constructor(s,e,c,u=!1){super(s,e,u),this.displayToUser=!0,this.doNotDisplayToUser=!1,this.target=c,this.configureRules()}configureRules(){this.rules.push(new I.DJ("NotificationIsNotNull","The form message cannot be null or undefined.",this.target,this.doNotDisplayToUser)),this.rules.push(new T("name","The prescription name is not valid. Must be within 2 and 255 characters.",this.target.name,2,255))}}class B extends g{constructor(s){super("CreatePrescriptionAction"),this.input=s}preValidateAction(){this.validationContext.addRule(new G("InputIsNotNull","The input information is not valid.",this.input,this.showRuleMessages))}performAction(){this.response=this.businessProvider.data.userCreatePrescription({input:this.input}).pipe((0,f.w)(s=>(0,z.of)(s.data.created)))}}class J extends g{constructor(s){super("UpdatePrescriptionsAction"),this.prescriptions=s}preValidateAction(){this.validationContext.addRule(new I.DJ("Input","Input should have values",this.prescriptions,!0))}performAction(){this.response=this.businessProvider.data.userUpdatePrescriptions({input:{prescriptions:this.prescriptions}}).pipe((0,f.w)(s=>(0,P.of)(s.data.updated)))}}class j extends g{constructor(s,e){super("UpdatePrescriptionAction"),this.prescription=s,this.prescriptionId=e}preValidateAction(){this.validationContext.addRule(new I.DJ("Input","Input should have values",this.prescription,!0)).addRule(new I.xF("Id","Id should be a CUID and not null",this.prescriptionId,!0))}performAction(){this.response=this.businessProvider.data.userUpdatePrescription({prescriptionId:this.prescriptionId,input:this.prescription}).pipe((0,f.w)(s=>(0,P.of)(s.data.updated)))}}let w=(()=>{class r extends C.nH{constructor(e,c,u){super("NotificationService.PrescriptionBusinessProviderService",e,u),this.data=c}createPrescription(e){const c=new B(e);return c.Do(this),c.response}updatePrescription(e,c){const u=new j(e,c);return u.Do(this),u.response}importPrescriptions(e){const c=new J(e);return c.Do(this),c.response}validatePrescriptionExcelData(e,c,u){const b=new U(e,c,u);return b.Do(this),b.response}}return r.\u0275fac=function(e){return new(e||r)(R.LFG(E.ed),R.LFG(x.q),R.LFG(C.oI))},r.\u0275prov=R.Yz7({token:r,factory:r.\u0275fac,providedIn:"root"}),r})(),W=(()=>{class r extends C.nH{constructor(e,c,u){super("PrescriptionService",u,e),this.businessProvider=c}createPrescription(e){const c=Object.fromEntries(Object.entries(e).filter(([u,b])=>null!==b));return this.businessProvider.createPrescription(c)}updatePrescription(e,c){return this.businessProvider.updatePrescription(e,c)}importPrescriptions(e){return this.businessProvider.importPrescriptions(e)}validatePrescriptionExcelData(e,c,u){return this.businessProvider.validatePrescriptionExcelData(e,c,u)}}return r.\u0275fac=function(e){return new(e||r)(R.LFG(w,8),R.LFG(w),R.LFG(E.ed))},r.\u0275prov=R.Yz7({token:r,factory:r.\u0275fac,providedIn:"root"}),r})(),l=(()=>{class r extends v.m1{constructor(e,c,u,b,M,Y){if(super({loading:!1,prescriptions:[],done:!1,searchQuery:"",formName:void 0,patientId:void 0,documentId:void 0,paging:{limit:1e4,skip:0}}),this.data=e,this.router=c,this.route=u,this.toast=b,this.formService=M,this.prescriptionService=Y,this.errors$=this.select(o=>o.errors),this.loading$=this.select(o=>o.loading),this.done$=this.select(o=>o.done),this.item$=this.select(o=>o.item),this.prescriptions$=this.select(o=>{const i=o.prescriptions;return console.log("-----------------"),i.sort((n,t)=>m(n.createdAt).isBefore(m(t.createdAt))?1:-1),i}),this.patients$=this.select(o=>o.patients||[]),this.documents$=this.select(o=>o.documents||[]),this.patientId$=this.select(o=>o.patientId),this.documentId$=this.select(o=>o.documentId),this.paging$=this.select(o=>o.paging),this.searchQuery$=this.select(o=>o.searchQuery),this.formName$=this.select(o=>o.formName),this.actionResult$=this.select(this.item$,this.done$,(o,i)=>({item:o,done:i}),{debounce:!0}),this.vm$=this.select(this.errors$,this.loading$,this.item$,this.formName$,this.prescriptions$,this.patients$,this.documents$,(o,i,n,t,a,d,p)=>({errors:o,loading:i,item:n,formName:t,prescriptions:a,patients:d,documents:p}),{debounce:!0}),this.input$=this.select(this.paging$,this.patientId$,this.documentId$,this.searchQuery$,(o,i,n,t)=>({limit:o.limit,skip:o.skip,name:t,patientId:i,documentId:n,total:o.total})),this.setFormName=this.updater((o,i)=>Object.assign(Object.assign({},o),{formName:i})),this.setPatientId=this.updater((o,i)=>Object.assign(Object.assign({},o),{patientId:i})),this.setDocumentId=this.updater((o,i)=>Object.assign(Object.assign({},o),{documentId:i})),this.setSkip=this.updater((o,i)=>Object.assign(Object.assign({},o),{paging:Object.assign(Object.assign({},o.paging),{skip:i})})),this.setLimit=this.updater((o,i)=>Object.assign(Object.assign({},o),{paging:Object.assign(Object.assign({},o.paging),{limit:i})})),this.filterPatients=o=>this.data.userSelectPatients({input:{name:o}}).pipe((0,v._b)(i=>{const n=i.data.items;return this.patchState({patients:n}),n},i=>this.patchState({errors:i.graphQLErrors?i.graphQLErrors:i})),(0,$.U)(i=>i.data.items)),this.filterDocuments=o=>this.data.userSelectDocuments({input:{name:o}}).pipe((0,v._b)(i=>{const n=i.data.items;return this.patchState({documents:n}),n},i=>this.patchState({errors:i.graphQLErrors?i.graphQLErrors:i})),(0,$.U)(i=>i.data.items)),this.addPatient=this.updater((o,i)=>Object.assign(Object.assign({},o),{patients:o.patients.concat(i)})),this.addDocument=this.updater((o,i)=>Object.assign(Object.assign({},o),{documents:o.documents.concat(i)})),this.setItem=this.updater((o,i)=>Object.assign(Object.assign({},o),{item:i})),this.addNewPrescription=this.updater((o,i)=>Object.assign(Object.assign({},o),{prescriptions:[...o.prescriptions,i]})),this.updatePrescription=this.updater((o,i)=>Object.assign(Object.assign({},o),{prescriptions:o.prescriptions.map(n=>n.id===i.id?i:n)})),this.addPrescriptions=this.updater((o,i)=>Object.assign(Object.assign({},o),{prescriptions:o.prescriptions.concat(i)})),this.updatePrescriptions=this.updater((o,i)=>Object.assign(Object.assign({},o),{prescriptions:o.prescriptions.map(n=>i.find(a=>a.id===n.id)||n)})),this.setSearchQuery=this.updater((o,i)=>Object.assign(Object.assign({},o),{searchQuery:i})),this.loadPrescriptionEffect=this.effect(o=>o.pipe((0,S.b)(()=>this.patchState({loading:!0})),(0,f.w)(i=>this.data.userPrescription({prescriptionId:i}).pipe((0,v._b)(n=>{this.patchState({item:n.data.item,errors:n.errors,loading:!1})},n=>this.patchState({loading:!1,errors:n.graphQLErrors?n.graphQLErrors:n})))))),this.loadPrescriptionsEffect=this.effect(o=>o.pipe((0,S.b)(()=>this.patchState({loading:!0})),(0,N.M)(this.input$),(0,f.w)(([i,n])=>this.data.userPrescriptions({input:n}).pipe((0,v._b)(t=>this.patchState({paging:{limit:n.limit,skip:n.skip,total:t.data.count.total},prescriptions:t.data.items,errors:t.errors,loading:!1}),t=>this.patchState({loading:!1,errors:t.graphQLErrors?t.graphQLErrors:t})))))),this.createPrescriptionEffect=this.effect(o=>o.pipe((0,S.b)(()=>this.patchState({loading:!0})),(0,f.w)(i=>this.prescriptionService.createPrescription(Object.assign({},i)).pipe((0,v._b)(n=>{this.addNewPrescription(n),this.toast.success("Created Successfully!"),setTimeout(()=>this.patchState({item:n,loading:!1,done:!0}),300),setTimeout(()=>this.patchState({done:!1,item:null}),600)},n=>{n.graphQLErrors?(this.toast.error(n.graphQLErrors[0].message,{duration:3e3}),this.patchState({loading:!1,errors:n.graphQLErrors?n.graphQLErrors:n})):(this.toast.error(n.Message),this.formService.setErrors(n.Data))}))))),this.updatePrescriptionEffect=this.effect(o=>o.pipe((0,S.b)(()=>this.patchState({loading:!0})),(0,N.M)(this.item$),(0,f.w)(([i,n])=>this.prescriptionService.updatePrescription(i,i.id).pipe((0,v._b)(t=>{this.updatePrescription(t),this.toast.success("Updated Successfully!"),setTimeout(()=>this.patchState({item:t,loading:!1,done:!0}),300),setTimeout(()=>this.patchState({done:!1,item:null}),600)},t=>{t.graphQLErrors?(this.toast.error(t.graphQLErrors[0].message,{duration:3e3}),this.patchState({loading:!1,errors:t.graphQLErrors?t.graphQLErrors:t})):(this.toast.error(t.Message),this.formService.setErrors(t.Data))}))))),this.deletePrescriptionEffect=this.effect(o=>o.pipe((0,S.b)(()=>this.patchState({loading:!0})),(0,N.M)(this.item$),(0,f.w)(([i,n])=>this.data.userDeletePrescription({prescriptionId:n.id}).pipe((0,v._b)(t=>{this.toast.success("Deleted successfully!",{duration:3e3}),setTimeout(()=>this.patchState({item:t.data.deleted,loading:!1,done:!0}),300),setTimeout(()=>this.patchState({done:!1,item:null}),600)},t=>{t.graphQLErrors?(this.toast.error(t.graphQLErrors[0].message,{duration:3e3}),this.patchState({loading:!1,errors:t.graphQLErrors?t.graphQLErrors:t})):(this.toast.error(t.Message),this.formService.setErrors(t.Data))}))))),this.importExcelEffect=this.effect(o=>o.pipe((0,S.b)(()=>this.patchState({loading:!0})),(0,f.w)(i=>this.prescriptionService.importPrescriptions(i).pipe((0,Q.K)(n=>{var t;return this.toast.error(null!==(t=n.Message)&&void 0!==t?t:"Failed to save",{duration:3e3}),y.E}),(0,S.b)(n=>{const t=JSON.parse(n.created),a=JSON.parse(n.updated),d=JSON.parse(n.failed),p=t.length+a.length+d.length;this.addPrescriptions(t),this.updatePrescriptions(a),this.toast.success(`${t.length} created, ${a.length} updated, ${d.length} failed of total ${p}`,{duration:3e3})}))))),this.route.snapshot.paramMap.has("prescriptionId")?(this.route.snapshot.paramMap.get("prescriptionId"),this.setFormName("prescription_edit")):this.setFormName("prescription_create"),this.route.snapshot.paramMap.has("patientId")){const o=this.route.snapshot.paramMap.get("patientId");this.setPatientId(o)}if(this.route.snapshot.paramMap.has("documentId")){const o=this.route.snapshot.paramMap.get("documentId");this.setDocumentId(o)}}validateImportData(e){return this.vm$.pipe((0,f.w)(c=>this.prescriptionService.validatePrescriptionExcelData(e,c.patients,c.documents)))}}return r.\u0275fac=function(e){return new(e||r)(R.LFG(x.q),R.LFG(D.F0),R.LFG(D.gz),R.LFG(V.F),R.LFG(L.o),R.LFG(W))},r.\u0275prov=R.Yz7({token:r,factory:r.\u0275fac}),r})()}}]);